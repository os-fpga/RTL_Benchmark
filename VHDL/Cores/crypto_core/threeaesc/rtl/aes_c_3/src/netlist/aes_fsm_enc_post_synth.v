/* Generated by Yosys 0.16+65 (git sha1 051517d61, gcc 9.1.0 -fPIC -Os) */

module aes_fsm_enc(clk, rst, enc, block_ready, key, block_out, block_in);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  input [127:0] block_in;
  wire [127:0] block_in;
  output [127:0] block_out;
  wire [127:0] block_out;
  output block_ready;
  wire block_ready;
  input clk;
  wire clk;
  input enc;
  wire enc;
  input [127:0] key;
  wire [127:0] key;
  input rst;
  wire rst;
  dffsre _25_ (
    .C(clk),
    .D(_00_),
    .E(1'b1),
    .Q(_03_),
    .R(_23_),
    .S(1'b1)
  );
  dffsre _26_ (
    .C(clk),
    .D(_01_),
    .E(1'b1),
    .Q(_04_),
    .R(_23_),
    .S(1'b1)
  );
  dffsre _27_ (
    .C(clk),
    .D(_02_),
    .E(1'b1),
    .Q(_05_),
    .R(_23_),
    .S(1'b1)
  );
  dffnsre _28_ (
    .C(clk),
    .D(_06_),
    .E(1'b1),
    .Q(_07_),
    .R(_24_),
    .S(1'b1)
  );
  dffnsre _29_ (
    .C(clk),
    .D(_07_),
    .E(1'b1),
    .Q(_08_),
    .R(_24_),
    .S(1'b1)
  );
  dffsre _30_ (
    .C(clk),
    .D(_09_),
    .E(1'b1),
    .Q(_10_),
    .R(_24_),
    .S(1'b1)
  );
  dffsre _31_ (
    .C(clk),
    .D(_10_),
    .E(1'b1),
    .Q(_11_),
    .R(_24_),
    .S(1'b1)
  );
  dffnsre _32_ (
    .C(_16_),
    .D(_17_),
    .E(1'b1),
    .Q(_12_),
    .R(1'b1),
    .S(1'b1)
  );
  dffnsre _33_ (
    .C(_16_),
    .D(_18_),
    .E(1'b1),
    .Q(_13_),
    .R(1'b1),
    .S(1'b1)
  );
  dffnsre _34_ (
    .C(_16_),
    .D(_19_),
    .E(1'b1),
    .Q(_14_),
    .R(1'b1),
    .S(1'b1)
  );
  dffnsre _35_ (
    .C(_16_),
    .D(_20_),
    .E(1'b1),
    .Q(_15_),
    .R(1'b1),
    .S(1'b1)
  );
  assign _24_ = 8'b01111111 >> { _03_, _05_, _04_ };
  assign _17_ = 16'b0000000101111110 >> { _12_, _03_, _05_, _04_ };
  assign _21_ = 16'b0001000000000000 >> { _12_, _15_, _14_, _13_ };
  assign _18_ = 64'b0000000100000001000000010111111100000000011111100000000000000000 >> { _13_, _12_, _21_, _03_, _05_, _04_ };
  assign _19_ = 64'b0000000101111111011111110111111101111110000000000000000000000000 >> { _14_, _13_, _12_, _03_, _05_, _04_ };
  assign _22_ = 16'b1000001001111111 >> { _15_, _14_, _13_, _12_ };
  assign _20_ = 32'd4129534 >> { _03_, _22_, _05_, _04_, _15_ };
  assign _16_ = 4'b0001 >> { _08_, _11_ };
  assign _02_ = 32'd4227858442 >> { _03_, _04_, _05_, _21_, enc };
  assign _06_ = 4'b0001 >> { _07_, _08_ };
  assign block_ready = 16'b0100000000000000 >> { _04_, _21_, _03_, _05_ };
  assign _00_ = 32'd15741178 >> { _05_, _03_, _04_, _21_, enc };
  assign _09_ = 4'b0001 >> { _10_, _11_ };
  assign _01_ = 16'b1100001100001110 >> { _03_, _05_, _04_, enc };
  assign _23_ = 2'b01 >> rst;
  assign block_out = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
endmodule
