/* Generated by Yosys 0.16+65 (git sha1 051517d61, gcc 9.1.0 -fPIC -Os) */

module aes_fsm_enc(clk, rst, enc, block_ready, key, block_out, block_in);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  input [127:0] block_in;
  wire [127:0] block_in;
  output [127:0] block_out;
  wire [127:0] block_out;
  output block_ready;
  wire block_ready;
  input clk;
  wire clk;
  input enc;
  wire enc;
  input [127:0] key;
  wire [127:0] key;
  wire [3:0] next_state;
  input rst;
  wire rst;
  wire rst_cnt;
  wire [3:0] state;
  dffsre _19_ (
    .C(clk),
    .D(_02_),
    .E(1'b1),
    .Q(_05_),
    .R(_18_),
    .S(1'b1)
  );
  dffsre _20_ (
    .C(clk),
    .D(_03_),
    .E(1'b1),
    .Q(_06_),
    .R(_18_),
    .S(1'b1)
  );
  dffsre _21_ (
    .C(clk),
    .D(_04_),
    .E(1'b1),
    .Q(state[3]),
    .R(_18_),
    .S(1'b1)
  );
  dffsre _22_ (
    .C(clk),
    .D(next_state[0]),
    .E(_07_),
    .Q(state[0]),
    .R(_18_),
    .S(1'b1)
  );
  dffsre _23_ (
    .C(clk),
    .D(_12_),
    .E(1'b1),
    .Q(_08_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _24_ (
    .C(clk),
    .D(_13_),
    .E(1'b1),
    .Q(_09_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _25_ (
    .C(clk),
    .D(_14_),
    .E(1'b1),
    .Q(_10_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _26_ (
    .C(clk),
    .D(_15_),
    .E(1'b1),
    .Q(_11_),
    .R(1'b1),
    .S(1'b1)
  );
  assign _16_ = 16'b0000000100000000 >> { state[0], _06_, _05_, state[3] };
  assign _12_ = 8'b00010100 >> { _08_, _16_, rst_cnt };
  assign _17_ = 16'b0001000000000000 >> { _08_, _11_, _10_, _09_ };
  assign _13_ = 32'd3604544 >> { _09_, rst_cnt, _08_, _16_, _17_ };
  assign _14_ = 32'd8323200 >> { _10_, rst_cnt, _09_, _08_, _16_ };
  assign _15_ = 64'b0000000000000000011111111111011100000000000000001000000000000000 >> { _11_, rst_cnt, _10_, _09_, _08_, _16_ };
  assign _04_ = 32'd805358798 >> { _06_, state[0], _05_, state[3], enc };
  assign _07_ = 4'b0111 >> { _06_, state[3] };
  assign _02_ = 32'd3882752 >> { _05_, state[0], state[3], _06_, _17_ };
  assign _01_ = 16'b1111100000000000 >> { state[3], _06_, _05_, state[0] };
  assign block_ready = 4'b0001 >> { state[0], _07_ };
  assign next_state[0] = 32'd65534 >> { state[0], _06_, enc, state[3], _05_ };
  assign _03_ = 64'b0000111100000000000011111111000000000000000000001100000011111010 >> { state[0], state[3], _05_, _06_, _17_, enc };
  assign _18_ = 2'b01 >> rst;
  assign _00_ = 2'b01 >> _06_;
  latchsre _42_ (
    .D(_00_),
    .E(1'b1),
    .G(_01_),
    .Q(rst_cnt),
    .R(1'b1),
    .S(1'b1)
  );
  assign block_out = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
endmodule
