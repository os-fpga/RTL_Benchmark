/* Generated by Yosys 0.16+65 (git sha1 051517d61, gcc 9.1.0 -fPIC -Os) */

module aes_fsm_enc(clk, rst, enc, block_ready, key, block_out, block_in);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  input [127:0] block_in;
  wire [127:0] block_in;
  output [127:0] block_out;
  wire [127:0] block_out;
  output block_ready;
  wire block_ready;
  input clk;
  wire clk;
  wire clk_div_2;
  input enc;
  wire enc;
  input [127:0] key;
  wire [127:0] key;
  input rst;
  wire rst;
  wire [2:0] state;
  dffsre _17_ (
    .C(clk),
    .D(_09_),
    .E(1'b1),
    .Q(clk_div_2),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _18_ (
    .C(clk),
    .D(_00_),
    .E(1'b1),
    .Q(_03_),
    .R(_16_),
    .S(1'b1)
  );
  dffsre _19_ (
    .C(clk),
    .D(_01_),
    .E(1'b1),
    .Q(_04_),
    .R(_16_),
    .S(1'b1)
  );
  dffsre _20_ (
    .C(clk),
    .D(_02_),
    .E(1'b1),
    .Q(state[2]),
    .R(_16_),
    .S(1'b1)
  );
  dffsre _21_ (
    .C(clk_div_2),
    .D(_10_),
    .E(1'b1),
    .Q(_05_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _22_ (
    .C(clk_div_2),
    .D(_11_),
    .E(1'b1),
    .Q(_06_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _23_ (
    .C(clk_div_2),
    .D(_12_),
    .E(1'b1),
    .Q(_07_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _24_ (
    .C(clk_div_2),
    .D(_13_),
    .E(1'b1),
    .Q(_08_),
    .R(1'b1),
    .S(1'b1)
  );
  assign _14_ = 16'b0000000100000000 >> { enc, state[2], _04_, _03_ };
  assign _09_ = 4'b0001 >> { clk_div_2, _14_ };
  assign _15_ = 8'b10111110 >> { _03_, _04_, state[2] };
  assign _10_ = 8'b00010100 >> { _05_, _15_, _14_ };
  assign _11_ = 64'b0000000000000000000011111111111100000000000000001101000000000000 >> { _06_, _14_, _05_, _15_, _07_, _08_ };
  assign _12_ = 32'd8323200 >> { _07_, _14_, _06_, _05_, _15_ };
  assign _13_ = 64'b0000000000000000011111111111011100000000000000001000000000000000 >> { _08_, _14_, _07_, _06_, _05_, _15_ };
  assign block_ready = 64'b0000000100000000000000000000000000000000000000000000000000000000 >> { _08_, _05_, _04_, _03_, _07_, _06_ };
  assign _02_ = 8'b11111000 >> { _14_, state[2], _03_ };
  assign _01_ = 16'b0000000011110100 >> { state[2], block_ready, _03_, _04_ };
  assign _00_ = 16'b0000000011111110 >> { _03_, enc, _04_, state[2] };
  assign _16_ = 2'b01 >> rst;
  assign block_out = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
endmodule
