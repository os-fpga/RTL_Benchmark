-- (c) Copyright 2008 Xilinx, Inc. All rights reserved.
--
-- This file contains confidential and proprietary information
-- of Xilinx, Inc. and is protected under U.S. and
-- international copyright and other intellectual property
-- laws.
--
-- DISCLAIMER
-- This disclaimer is not a license and does not grant any
-- rights to the materials distributed herewith. Except as
-- otherwise provided in a valid license issued to you by
-- Xilinx, and to the maximum extent permitted by applicable
-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
-- (2) Xilinx shall not be liable (whether in contract or tort,
-- including negligence, or under any other theory of
-- liability) for any loss or damage of any kind or nature
-- related to, arising under or in connection with these
-- materials, including for any direct, or any indirect,
-- special, incidental, or consequential loss or damage
-- (including loss of data, profits, goodwill, or any type of
-- loss or damage suffered as a result of any action brought
-- by a third party) even if such damage or loss was
-- reasonably foreseeable or Xilinx had been advised of the
-- possibility of the same.
--
-- CRITICAL APPLICATIONS
-- Xilinx products are not designed or intended to be fail-
-- safe, or for use in any application requiring fail-safe
-- performance, such as life-support or safety devices or
-- systems, Class III medical devices, nuclear facilities,
-- applications related to the deployment of airbags, or any
-- other applications that could lead to death, personal
-- injury, or severe property or environmental damage
-- (individually and collectively, "Critical
-- Applications"). Customer assumes the sole risk and
-- liability of any use of Xilinx products in Critical
-- Applications, subject only to applicable laws and
-- regulations governing limitations on product liability.
--
-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
-- PART OF THIS FILE AT ALL TIMES.
-- 
-- 
---------------------------------------------------------------------------------------------
--  AURORA_EXAMPLE
--
--  Aurora Generator
--
-- The file was originally generated by the Xilinx Core Generator, but
-- since that tool does not create easily useable blackbox IPs, I had to 
-- modify the top level of it. (Istvan NAgy, buenos(at)freemail.hu)
--
--  this is to hold all the files from the reference design sources.
--  Modification: remove the frame gen/check and chipscope and route the LocalLink ports up.
--
--         

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use WORK.AURORA_PKG.all;

-- synthesis translate_off
library UNISIM;
use UNISIM.VCOMPONENTS.ALL;
-- synthesis translate_on

entity aurora_exmpl_des_modified is
--   generic(
--	   USE_CHIPSCOPE                  :    integer   := 0;
--           SIM_GTPRESET_SPEEDUP   :integer :=   1      --Set to 1 to speed up sim reset
--         );
    port (
    -- User I/O
            RESET             : in std_logic;
            HARD_ERROR        : out std_logic;
            SOFT_ERROR        : out std_logic;
            FRAME_ERROR       : out std_logic;
            ERR_COUNT         : out std_logic_vector(0 to 7);
            LANE_UP           : out std_logic_vector(0 to 1);
            CHANNEL_UP        : out std_logic;
            INIT_CLK          : in  std_logic;
            GT_RESET_IN       : in  std_logic;
	-- Clocks
           GTPD1_P   : in  std_logic;
           GTPD1_N   : in  std_logic;
			  user_clk_i : out std_logic;
			  x25m_clkin  : in  std_logic;
	--from the Frame Generator in the original reference design: (gtp-tx)
        -- User Interface
        TX_D            : in  std_logic_vector(0 to 31); 
        TX_REM          : in  std_logic_vector(0 to 1);     
        TX_SOF_N        : in  std_logic;
        TX_EOF_N        : in  std_logic;
        TX_SRC_RDY_N    : in  std_logic;
        TX_DST_RDY_N    : out   std_logic;  
        -- NFC Interface
        NFC_REQ_N       : in  std_logic;
        NFC_NB          : in  std_logic_vector(0 to 3);     
        NFC_ACK_N       : out   std_logic;  
	--from the Frame Check module in the original reference design: (gtp-rx)
        -- User Interface
        RX_D            : out  std_logic_vector(0 to 31); 
        RX_REM          : out  std_logic_vector(0 to 1);     
        RX_SOF_N        : out  std_logic;
        RX_EOF_N        : out  std_logic;
        RX_SRC_RDY_N    : out  std_logic; 
        -- NFC Interface
        RX_SNF          : out  std_logic;
        RX_FC_NB        : out  std_logic_vector(0 to 3);   
   -- V5 I/O
            RXP               : in std_logic_vector(0 to 1);
            RXN               : in std_logic_vector(0 to 1);
            TXP               : out std_logic_vector(0 to 1);
            TXN               : out std_logic_vector(0 to 1)
         );
end aurora_exmpl_des_modified;


architecture behavioral of aurora_exmpl_des_modified is

  attribute core_generation_info           : string;
  attribute core_generation_info of behavioral : architecture is "aurora_8b10b_v5_1,aurora_8b10b_v5_1,{backchannel_mode=Sidebands, c_aurora_lanes=2, c_column_used=None, c_gt_clock_1=GTPD1, c_gt_clock_2=None, c_gt_loc_1=X, c_gt_loc_10=X, c_gt_loc_11=X, c_gt_loc_12=X, c_gt_loc_13=X, c_gt_loc_14=X, c_gt_loc_15=X, c_gt_loc_16=X, c_gt_loc_17=X, c_gt_loc_18=X, c_gt_loc_19=X, c_gt_loc_2=X, c_gt_loc_20=X, c_gt_loc_21=X, c_gt_loc_22=X, c_gt_loc_23=X, c_gt_loc_24=X, c_gt_loc_25=X, c_gt_loc_26=X, c_gt_loc_27=X, c_gt_loc_28=X, c_gt_loc_29=X, c_gt_loc_3=1, c_gt_loc_30=X, c_gt_loc_31=X, c_gt_loc_32=X, c_gt_loc_33=X, c_gt_loc_34=X, c_gt_loc_35=X, c_gt_loc_36=X, c_gt_loc_37=X, c_gt_loc_38=X, c_gt_loc_39=X, c_gt_loc_4=2, c_gt_loc_40=X, c_gt_loc_41=X, c_gt_loc_42=X, c_gt_loc_43=X, c_gt_loc_44=X, c_gt_loc_45=X, c_gt_loc_46=X, c_gt_loc_47=X, c_gt_loc_48=X, c_gt_loc_5=X, c_gt_loc_6=X, c_gt_loc_7=X, c_gt_loc_8=X, c_gt_loc_9=X, c_lane_width=2, c_line_rate=1.5, c_nfc=true, c_nfc_mode=COMP, c_refclk_frequency=75.0, c_simplex=false, c_simplex_mode=TX, c_stream=false, c_ufc=false, flow_mode=Completion_NFC, interface_mode=Framing, dataflow_config=Duplex,}";

-- Parameter Declarations --

    constant DLY : time := 1 ns;

-- External Register Declarations --

    signal HARD_ERROR_Buffer  : std_logic;
    signal SOFT_ERROR_Buffer  : std_logic;
    signal FRAME_ERROR_Buffer : std_logic;
    signal LANE_UP_Buffer     : std_logic_vector(0 to 1);
    signal CHANNEL_UP_Buffer  : std_logic;
    signal TXP_Buffer         : std_logic_vector(0 to 1);
    signal TXN_Buffer         : std_logic_vector(0 to 1);

-- Internal Register Declarations --

    signal gt_reset_i         : std_logic; 
    signal system_reset_i     : std_logic;
 
-- Wire Declarations --

    -- LocalLink TX Interface

    signal tx_d_i             : std_logic_vector(0 to 31);
    signal tx_rem_i           : std_logic_vector(0 to 1);
    signal tx_src_rdy_n_i     : std_logic;
    signal tx_sof_n_i         : std_logic;
    signal tx_eof_n_i         : std_logic;

    signal tx_dst_rdy_n_i     : std_logic;

    -- LocalLink RX Interface

    signal rx_d_i             : std_logic_vector(0 to 31);
    signal rx_rem_i           : std_logic_vector(0 to 1);
    signal rx_src_rdy_n_i     : std_logic;
    signal rx_sof_n_i         : std_logic;
    signal rx_eof_n_i         : std_logic;


    -- Native Flow Control TX Interface

    signal nfc_req_n_i        : std_logic;
    signal nfc_nb_i           : std_logic_vector(0 to 3);
    signal nfc_ack_n_i        : std_logic;

    -- Native Flow Control RX Interface
    signal rx_snf_i           : std_logic;
    signal rx_fc_nb_i         : std_logic_vector(0 to 3);

    -- V5 Reference Clock Interface
    signal GTPD1_left_i      : std_logic;

    -- Error Detection Interface

    signal hard_error_i       : std_logic;
    signal soft_error_i       : std_logic;
    signal frame_error_i      : std_logic;

    -- Status

    signal channel_up_i       : std_logic;
    signal lane_up_i          : std_logic_vector(0 to 1);


    -- Clock Compensation Control Interface

    signal warn_cc_i          : std_logic;
    signal do_cc_i            : std_logic;

    -- System Interface

    signal pll_not_locked_i   : std_logic;
    signal user_clk_i_local         : std_logic;
    signal sync_clk_i         : std_logic;
    signal reset_i            : std_logic;
    signal power_down_i       : std_logic;
    signal loopback_i         : std_logic_vector(2 downto 0);
    signal tx_lock_i          : std_logic;
    signal gtpclkout_i        : std_logic;
    signal buf_gtpclkout_i    : std_logic;
    --Frame check signals
    signal error_count_i      : std_logic_vector(0 to 7);
    signal ERR_COUNT_Buffer : std_logic_vector(0 to 7);
    signal test_reset_i       : std_logic;
	 
	 SIGNAL AU_PLL_LOCKED    : std_logic;

-- VIO Signals
   signal icon_to_vio_i       : std_logic_vector (35 downto 0);
   signal sync_in_i           : std_logic_vector (0 to 63);
   signal sync_out_i          : std_logic_vector (0 to 15);


   signal lane_up_i_i  	      : std_logic;
   signal tx_lock_i_i  	      : std_logic;

-- Component Declarations --

    component IBUFGDS

    port (
                O  :  out STD_ULOGIC;
                I  : in STD_ULOGIC;
                IB : in STD_ULOGIC);

    end component;

    component IBUFDS_GTXE1

    generic(

      CLKCM_CFG	    : boolean       := TRUE;
      CLKRCV_TRST   : boolean       := TRUE;
      REFCLKOUT_DLY : bit_vector    := b"0000000000"
      );

    port(
      O       : out std_ulogic;
      ODIV2   : out std_ulogic;

      CEB     : in  std_ulogic;
      I       : in  std_ulogic;
      IB      : in  std_ulogic
       );

    end component; 

    component IBUFDS
        port (

                O : out std_ulogic;
                I : in std_ulogic;
                IB : in std_ulogic);

    end component;

    component BUFIO2 

    generic(

      DIVIDE_BYPASS : boolean := TRUE;  -- TRUE, FALSE
      DIVIDE        : integer := 1;     -- {1..8}
      I_INVERT      : boolean := FALSE; -- TRUE, FALSE
      USE_DOUBLER   : boolean := FALSE  -- TRUE, FALSE
      );

    port(
      DIVCLK       : out std_ulogic;
      IOCLK        : out std_ulogic;
      SERDESSTROBE : out std_ulogic;

      I            : in  std_ulogic
    );
    end component;
    component IBUFG

        port (

                O : out std_ulogic;
                I : in  std_ulogic

             );
    
    end component;


    component aurora_8b10b_v5_1_CLOCK_MODULE
        port (
                GT_CLK                  : in std_logic;
                GT_CLK_LOCKED           : in std_logic;
                USER_CLK                : out std_logic;
                SYNC_CLK                : out std_logic;
                PLL_NOT_LOCKED          : out std_logic
             );
    end component;

    component aurora_8b10b_v5_1_RESET_LOGIC
        port (
                RESET                  : in std_logic;
                USER_CLK               : in std_logic;
                INIT_CLK               : in std_logic;
                GT_RESET_IN            : in std_logic;
                TX_LOCK_IN             : in std_logic;
                PLL_NOT_LOCKED         : in std_logic;

                SYSTEM_RESET           : out std_logic;
                GT_RESET_OUT           : out std_logic
             );
    end component;

    component aurora_8b10b_v5_1
        generic(
                 SIM_GTPRESET_SPEEDUP :integer := 1
               );
        port   (
        -- LocalLink TX Interface

                TX_D             : in std_logic_vector(0 to 31);
                TX_REM           : in std_logic_vector(0 to 1);
                TX_SRC_RDY_N     : in std_logic;
                TX_SOF_N         : in std_logic;
                TX_EOF_N         : in std_logic;
                TX_DST_RDY_N     : out std_logic;

        -- LocalLink RX Interface

                RX_D             : out std_logic_vector(0 to 31);
                RX_REM           : out std_logic_vector(0 to 1);
                RX_SRC_RDY_N     : out std_logic;
                RX_SOF_N         : out std_logic;
                RX_EOF_N         : out std_logic;
        -- Native Flow Control TX Interface

                NFC_REQ_N        : in std_logic;
                NFC_NB           : in std_logic_vector(0 to 3);
                NFC_ACK_N        : out std_logic;

        -- Native Flow Control RX Interface
                RX_SNF           : out std_logic;
                RX_FC_NB         : out std_logic_vector(0 to 3);
        -- V5 Serial I/O

                RXP              : in std_logic_vector(0 to 1);
                RXN              : in std_logic_vector(0 to 1);

                TXP              : out std_logic_vector(0 to 1);
                TXN              : out std_logic_vector(0 to 1);

        -- V5 Reference Clock Interface

                GTPD1    : in std_logic;
        -- Error Detection Interface

                HARD_ERROR       : out std_logic;
                SOFT_ERROR       : out std_logic;
                
                FRAME_ERROR      : out std_logic;

        -- Status

                CHANNEL_UP       : out std_logic;
                LANE_UP          : out std_logic_vector(0 to 1);

        -- Clock Compensation Control Interface

                WARN_CC          : in std_logic;
                DO_CC            : in std_logic;

        -- System Interface

                USER_CLK         : in std_logic;
                SYNC_CLK         : in std_logic;
                GT_RESET         : in std_logic;
                RESET            : in std_logic;
                POWER_DOWN       : in std_logic;
                LOOPBACK         : in std_logic_vector(2 downto 0);
                GTPCLKOUT        : out std_logic;
                TX_LOCK          : out std_logic
            );

    end component;


    component aurora_8b10b_v5_1_STANDARD_CC_MODULE

        port (

        -- Clock Compensation Control Interface

                WARN_CC        : out std_logic;
                DO_CC          : out std_logic;

        -- System Interface

                PLL_NOT_LOCKED : in std_logic;
                USER_CLK       : in std_logic;
                RESET          : in std_logic

             );

    end component;
    
-- 	component pll_for_aurora
--	port
--	 (-- Clock in ports
--	  CLK_IN1           : in     std_logic;
--	  -- Clock out ports
--	  CLK_OUT1          : out    std_logic;
--	  -- Status and control signals
--	  RESET             : in     std_logic;
--	  LOCKED            : out    std_logic
--	 );
--	end component;


---- ------- SYNTHESIS ATTRIBUTES: --------------------------------------------------
--attribute keep_hierarchy : string; 
--attribute keep_hierarchy of aurora_exmpl_des_modified: entity is "yes"; 
    

begin

    HARD_ERROR  <= HARD_ERROR_Buffer;
    SOFT_ERROR  <= SOFT_ERROR_Buffer;
    FRAME_ERROR <= FRAME_ERROR_Buffer;
    ERR_COUNT   <= ERR_COUNT_Buffer;
    LANE_UP     <= LANE_UP_Buffer;
    CHANNEL_UP  <= CHANNEL_UP_Buffer;
    TXP         <= TXP_Buffer;
    TXN         <= TXN_Buffer;

	tx_d_i(0)  <=  '0';
	tx_rem_i(0)  <=  '0';
	tx_src_rdy_n_i  <=  '0';
	tx_sof_n_i  <=  '0';
	tx_eof_n_i  <=  '0';
	nfc_req_n_i  <=  '0';
	nfc_nb_i(0)  <=  '0';
	reset_i  <=  '0';
	error_count_i(0)  <=  '0';
	error_count_i(1)  <=  '0';
	error_count_i(2)  <=  '0';
	error_count_i(3)  <=  '0';
	error_count_i(4)  <=  '0';
	error_count_i(5)  <=  '0';
	error_count_i(6)  <=  '0';
	error_count_i(7)  <=  '0';




    -- ___________________________Clock Buffers________________________
      IBUFDS_i :  IBUFDS
      port map (
           I  => GTPD1_P ,
           IB => GTPD1_N ,
           O  => GTPD1_left_i
               );

    BUFIO2_i : BUFIO2
    generic map
    (
        DIVIDE                          =>      1,
        DIVIDE_BYPASS                   =>      TRUE
    )
    port map
    (
        I                               =>      gtpclkout_i,
        DIVCLK                          =>      buf_gtpclkout_i,
        IOCLK                           =>      open,
        SERDESSTROBE                    =>      open
    );
    -- Instantiate a clock module for clock division

    clock_module_i : aurora_8b10b_v5_1_CLOCK_MODULE
        port map (

                    GT_CLK              => buf_gtpclkout_i,
                    GT_CLK_LOCKED       => tx_lock_i,
                    USER_CLK            => user_clk_i_local,
                    SYNC_CLK            => sync_clk_i,
                    PLL_NOT_LOCKED      => pll_not_locked_i
                 );

    -- Register User I/O --

    -- Register User Outputs from core.

    process (user_clk_i_local)

    begin

        if (user_clk_i_local 'event and user_clk_i_local = '1') then

            HARD_ERROR_Buffer  <= hard_error_i;
            SOFT_ERROR_Buffer  <= soft_error_i;
            FRAME_ERROR_Buffer <= frame_error_i;
            ERR_COUNT_Buffer <= error_count_i;
            LANE_UP_Buffer     <= lane_up_i;
            CHANNEL_UP_Buffer  <= channel_up_i;

        end if;

    end process;

    -- System Interface

    power_down_i     <= '0';
    loopback_i       <= "000";


    -- _______________________________ Module Instantiations ________________________--



    --Use one of the lane up signals to reset the test logic
--    test_reset_i <= not lane_up_i(0);


--    --Connect a frame checker to the user interface
--    frame_check_i : aurora_8b10b_v5_1_FRAME_CHECK
--    port map
--    (
--        -- User Interface
--        RX_D            =>  rx_d_i, 
--        RX_REM          =>  rx_rem_i,
--        RX_SOF_N        =>  rx_sof_n_i,
--        RX_EOF_N        =>  rx_eof_n_i,
--        RX_SRC_RDY_N    =>  rx_src_rdy_n_i,  
--
--        -- NFC Interface
--        RX_SNF          =>  rx_snf_i,
--        RX_FC_NB        =>  rx_fc_nb_i,
--
--        -- System Interface
--        USER_CLK        =>  user_clk_i,   
--        RESET           =>  test_reset_i,
--        CHANNEL_UP      =>  channel_up_i,
--        ERR_COUNT       =>  error_count_i
--  
--    );


--    --Connect a frame generator to the user interface
--    frame_gen_i : aurora_8b10b_v5_1_FRAME_GEN
--    port map
--    (
--        -- User Interface
--        TX_D            =>  tx_d_i,
--            TX_REM          =>  tx_rem_i,
--        TX_SOF_N        =>  tx_sof_n_i,
--        TX_EOF_N        =>  tx_eof_n_i,
--            TX_SRC_RDY_N    =>  tx_src_rdy_n_i,
--        TX_DST_RDY_N    =>  tx_dst_rdy_n_i,    
--
--        -- NFC Interface
--        NFC_REQ_N       => nfc_req_n_i,
--        NFC_NB          => nfc_nb_i,
--        NFC_ACK_N       => nfc_ack_n_i,
--
--
--        -- System Interface
--        USER_CLK        =>  user_clk_i,
--        RESET           =>  test_reset_i,
--        CHANNEL_UP      =>  channel_up_i
--    ); 




    -- Module Instantiations --

    aurora_module_i : aurora_8b10b_v5_1
--        generic map(
--                    SIM_GTPRESET_SPEEDUP => SIM_GTPRESET_SPEEDUP
--                   )
        port map   (
        -- LocalLink TX Interface

                    TX_D             => TX_D,
                    TX_REM           => TX_REM,
                    TX_SRC_RDY_N     => TX_SRC_RDY_N,
                    TX_SOF_N         => TX_SOF_N,
                    TX_EOF_N         => TX_EOF_N,
                    TX_DST_RDY_N     => TX_DST_RDY_N,

        -- LocalLink RX Interface

                    RX_D             => RX_D,
                    RX_REM           => RX_REM,
                    RX_SRC_RDY_N     => RX_SRC_RDY_N,
                    RX_SOF_N         => RX_SOF_N,
                    RX_EOF_N         => RX_EOF_N,

        -- Native Flow Control TX Interface

                    NFC_REQ_N        => NFC_REQ_N,
                    NFC_NB           => NFC_NB,
                    NFC_ACK_N        => NFC_ACK_N,

        -- Native Flow Control RX Interface
	            RX_SNF           => RX_SNF,
                    RX_FC_NB         => RX_FC_NB,	
        -- V5 Serial I/O

                    RXP              => RXP,
                    RXN              => RXN,
                    TXP              => TXP_Buffer,
                    TXN              => TXN_Buffer,

        -- V5 Reference Clock Interface
                   GTPD1    => GTPD1_left_i,

        -- Error Detection Interface

                    HARD_ERROR       => hard_error_i,
                    SOFT_ERROR       => soft_error_i,
                    FRAME_ERROR      => frame_error_i,

        -- Status

                    CHANNEL_UP       => channel_up_i,
                    LANE_UP          => lane_up_i,

        -- Clock Compensation Control Interface

                    WARN_CC          => warn_cc_i,
                    DO_CC            => do_cc_i,

        -- System Interface

                    USER_CLK         => user_clk_i_local,
                    SYNC_CLK         => sync_clk_i,
                    RESET            => reset_i,
                    POWER_DOWN       => power_down_i,
                    LOOPBACK         => loopback_i,
                    GT_RESET         => gt_reset_i,
                    GTPCLKOUT        => gtpclkout_i,
                    TX_LOCK          => tx_lock_i
                 );

    standard_cc_module_i : aurora_8b10b_v5_1_STANDARD_CC_MODULE

        port map (

        -- Clock Compensation Control Interface

                    WARN_CC        => warn_cc_i,
                    DO_CC          => do_cc_i,

        -- System Interface

                    PLL_NOT_LOCKED => pll_not_locked_i,
                    USER_CLK       => user_clk_i_local,
                    RESET          => reset_i

                 );

    reset_logic_i : aurora_8b10b_v5_1_RESET_LOGIC
        port map (
                    RESET            => RESET,
                    USER_CLK         => user_clk_i_local,
                    INIT_CLK         => INIT_CLK,
                    GT_RESET_IN      => GT_RESET_IN,
                    TX_LOCK_IN       => tx_lock_i,
                    PLL_NOT_LOCKED   => pll_not_locked_i,

                    SYSTEM_RESET     => system_reset_i,
                    GT_RESET_OUT     => gt_reset_i
                 );




-- chipscope1 : if USE_CHIPSCOPE = 1 generate
--
--   lane_up_i_i <= '1'   and lane_up_i(0)  and lane_up_i(1) ;
--   tx_lock_i_i <= '1'  and tx_lock_i;
--
--  --Shared VIO Inputs
--   sync_in_i(0 to 15)  <= tx_d_i(0 to 15);
--   sync_in_i(16 to 31) <= rx_d_i(0 to 15);
--   sync_in_i(32 to 39) <= error_count_i;
--   sync_in_i(57)       <= frame_error_i;
--   sync_in_i(58)       <= soft_error_i;
--   sync_in_i(59)       <= hard_error_i;
--   sync_in_i(60)       <= tx_lock_i_i;
--   sync_in_i(61)       <= pll_not_locked_i;
--   sync_in_i(62)       <= lane_up_i_i;
--   sync_in_i(63)       <= channel_up_i;

--no_chipscope1 : if USE_CHIPSCOPE = 0 generate
--   sync_in_i  <= (others=>'0');
--end generate no_chipscope1;
--
--chipscope2 : if USE_CHIPSCOPE = 1 generate
-- -- Shared VIO Outputs
--    reset_i <= system_reset_i or sync_out_i(0);
--end generate chipscope2;
--
--no_chipscope2 : if USE_CHIPSCOPE = 0 generate
-- -- Shared VIO Outputs
--    reset_i <= system_reset_i;
--end generate no_chipscope2;
--
--chipscope3 : if USE_CHIPSCOPE = 1 generate
-- -- Shared VIO Outputs
--    test_reset_i <= not lane_up_i(0) or sync_out_i(15);
--end generate chipscope3;
--
--no_chipscope3 : if USE_CHIPSCOPE = 0 generate
-- -- Shared VIO Outputs
--    test_reset_i <= not lane_up_i(0);
--end generate no_chipscope3;

test_reset_i <= '1';


--user clock for the parallel bus:
--this is generated by external signal, and distributed up and down to every node.
--user_clk_i_local is used in this file, user_clk_i goes up one level
user_clk_i <= user_clk_i_local;
--	--PLL to generate user clock for the aurora parallel bus from the 25MHz osc clock
--	inst_pll_for_adc : pll_for_aurora
--	  port map
--		(-- Clock in ports
--		 CLK_IN1            => x25m_clkin,
--		 -- Clock out ports
--		 CLK_OUT1           => user_clk_i_local,
--		 -- Status and control signals
--		 RESET              => reset_i,
--		 LOCKED             => AU_PLL_LOCKED);






end behavioral;
