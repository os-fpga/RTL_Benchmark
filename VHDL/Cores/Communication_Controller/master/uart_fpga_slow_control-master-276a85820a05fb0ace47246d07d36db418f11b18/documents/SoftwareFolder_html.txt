<h4>In this section we will try to give ideas on how to drive the UART from a PC
besides the simple implementation with RealTerm.</h4>

<p>in the software folder of the project archive you will find:</p>
 
<ul>
<li><b> rtd_uart_test.bat :</b></li>
 <ul>
 <li> copy this bat file inside the RealTerm software folder to load the program (<a href="http://realterm.sourceforge.net/">http://realterm.sourceforge.net/</a>)</li>
 <ul>
  <li> passing parameter settings (uart port, speed, display size, etc)</li>
 </ul> 
 <li> check "RealTerm_line_commands.txt" in the documentation folder for more parameters</li>
 <li> loads a file "Hex_commands.bin" (in BINARY format) and sends it over UART</li>
 <li> known strange behaviour of such method:</li>
 <ul>
  <li> COLS=18 doesn't set the number of columns to 18</li>
  <li> relative paths or paths with "" don't work</li>
 </ul>
 </ul>
</ul>
 
<ul> 
<li><b> py_serial_control.py :</b></li>
 <ul>
 <li> custom very simple script to read and write the UART with Python (<a href="http://www.python.org/doc">http://www.python.org/doc</a>)</li>
 <li> uses the pySerial library (<a href="http://pyserial.sourceforge.net/">http://pyserial.sourceforge.net/</a>)</li>
  <ul>
   <li> parses human readable parameters and translates them into the correct hex commands</li>
     e.g: >> update --> 0x8000 0x00000000
     include a basic 'help' menu
  </ul>
 <li> Customize your script</li> 
  <ul>
   <li> define your commands</li>
   <li> DEFINE the number of registers to expect back after an update</li>
  </ul>
 <li> Browse to you script folder</li>
  <ul>
   <li> from a shell type: python py_serial_control.py</li>
   <li> enjoy ! :) </li> 
  </ul>   
 <li> to be implemented:</li>
  <ul>
   <li> load parameters and commands from files</li>
   <li> improve readback print on screen formatting</li>
   <li> make a generic nregister readout</li>
  </ul>   
 </ul>
</ul>
   
<h4>py_serial il Linux friendly! :)</h4> 
<h4>Tested on Ubuntu 10.04 LTS</h4>