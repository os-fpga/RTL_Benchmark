/* Generated by Yosys 0.16+65 (git sha1 051517d61, gcc 9.1.0 -fPIC -Os) */

module b12(clock, reset, start, nloss, speaker, nl, k);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  wire _200_;
  wire _201_;
  wire _202_;
  wire _203_;
  wire _204_;
  wire _205_;
  wire _206_;
  wire _207_;
  wire _208_;
  wire _209_;
  wire _210_;
  wire _211_;
  wire _212_;
  wire _213_;
  wire _214_;
  wire _215_;
  wire _216_;
  wire _217_;
  wire _218_;
  wire _219_;
  wire _220_;
  wire _221_;
  wire _222_;
  wire _223_;
  wire _224_;
  wire _225_;
  wire _226_;
  wire _227_;
  wire _228_;
  wire _229_;
  wire _230_;
  wire _231_;
  wire _232_;
  wire _233_;
  wire _234_;
  input clock;
  wire clock;
  wire [5:0] count;
  wire [1:0] count_2;
  wire [2:0] counter;
  wire [1:0] data_in;
  wire [1:0] data_out;
  input [3:0] k;
  wire [3:0] k;
  wire [4:0] max;
  wire [1:0] \memory[0] ;
  wire [1:0] \memory[10] ;
  wire [1:0] \memory[11] ;
  wire [1:0] \memory[12] ;
  wire [1:0] \memory[13] ;
  wire [1:0] \memory[14] ;
  wire [1:0] \memory[15] ;
  wire [1:0] \memory[16] ;
  wire [1:0] \memory[17] ;
  wire [1:0] \memory[18] ;
  wire [1:0] \memory[19] ;
  wire [1:0] \memory[1] ;
  wire [1:0] \memory[20] ;
  wire [1:0] \memory[21] ;
  wire [1:0] \memory[22] ;
  wire [1:0] \memory[23] ;
  wire [1:0] \memory[24] ;
  wire [1:0] \memory[25] ;
  wire [1:0] \memory[26] ;
  wire [1:0] \memory[27] ;
  wire [1:0] \memory[28] ;
  wire [1:0] \memory[29] ;
  wire [1:0] \memory[2] ;
  wire [1:0] \memory[30] ;
  wire [1:0] \memory[31] ;
  wire [1:0] \memory[3] ;
  wire [1:0] \memory[4] ;
  wire [1:0] \memory[5] ;
  wire [1:0] \memory[6] ;
  wire [1:0] \memory[7] ;
  wire [1:0] \memory[8] ;
  wire [1:0] \memory[9] ;
  output [3:0] nl;
  wire [3:0] nl;
  output nloss;
  wire nloss;
  wire play;
  input reset;
  wire reset;
  wire [4:0] scan;
  wire [2:0] sound;
  output speaker;
  wire speaker;
  input start;
  wire start;
  wire wr;
  dffsre _235_ (
    .C(clock),
    .D(_007_),
    .E(_000_),
    .Q(max[4]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _236_ (
    .C(clock),
    .D(_008_),
    .E(_000_),
    .Q(_012_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _237_ (
    .C(clock),
    .D(_009_),
    .E(_000_),
    .Q(_013_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _238_ (
    .C(clock),
    .D(_010_),
    .E(_000_),
    .Q(_014_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _239_ (
    .C(clock),
    .D(_011_),
    .E(_000_),
    .Q(_015_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _240_ (
    .C(clock),
    .D(_017_),
    .E(_016_),
    .Q(_019_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _241_ (
    .C(clock),
    .D(_018_),
    .E(_016_),
    .Q(_020_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _242_ (
    .C(clock),
    .D(_022_),
    .E(_021_),
    .Q(_028_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _243_ (
    .C(clock),
    .D(_023_),
    .E(_021_),
    .Q(_029_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _244_ (
    .C(clock),
    .D(_024_),
    .E(_021_),
    .Q(_030_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _245_ (
    .C(clock),
    .D(_025_),
    .E(_021_),
    .Q(_031_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _246_ (
    .C(clock),
    .D(_026_),
    .E(_021_),
    .Q(_032_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _247_ (
    .C(clock),
    .D(_027_),
    .E(_021_),
    .Q(_033_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _248_ (
    .C(clock),
    .D(_035_),
    .E(_034_),
    .Q(count[5]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _249_ (
    .C(clock),
    .D(_036_),
    .E(_034_),
    .Q(count[4]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _250_ (
    .C(clock),
    .D(_037_),
    .E(_034_),
    .Q(count[3]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _251_ (
    .C(clock),
    .D(_038_),
    .E(_034_),
    .Q(count[2]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _252_ (
    .C(clock),
    .D(_039_),
    .E(_034_),
    .Q(count[1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _253_ (
    .C(clock),
    .D(_040_),
    .E(_034_),
    .Q(count[0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _254_ (
    .C(clock),
    .D(_042_),
    .E(_041_),
    .Q(sound[0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _255_ (
    .C(clock),
    .D(_044_),
    .E(_043_),
    .Q(_046_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _256_ (
    .C(clock),
    .D(_045_),
    .E(_043_),
    .Q(sound[1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _257_ (
    .C(clock),
    .D(_006_),
    .E(_047_),
    .Q(_050_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _258_ (
    .C(clock),
    .D(_005_),
    .E(_047_),
    .Q(_051_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _259_ (
    .C(clock),
    .D(_004_),
    .E(_047_),
    .Q(_052_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _260_ (
    .C(clock),
    .D(_003_),
    .E(_047_),
    .Q(_053_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _261_ (
    .C(clock),
    .D(_002_),
    .E(_047_),
    .Q(_054_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _262_ (
    .C(clock),
    .D(count_2[1]),
    .E(_055_),
    .Q(data_in[1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _263_ (
    .C(clock),
    .D(count_2[0]),
    .E(_055_),
    .Q(data_in[0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _264_ (
    .C(clock),
    .D(_057_),
    .E(_056_),
    .Q(_058_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _265_ (
    .C(clock),
    .D(_060_),
    .E(_059_),
    .Q(speaker),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _266_ (
    .C(clock),
    .D(data_in[0]),
    .E(_061_),
    .Q(\memory[2] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _267_ (
    .C(clock),
    .D(data_in[1]),
    .E(_061_),
    .Q(\memory[2] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _268_ (
    .C(clock),
    .D(data_in[0]),
    .E(_062_),
    .Q(\memory[3] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _269_ (
    .C(clock),
    .D(data_in[1]),
    .E(_062_),
    .Q(\memory[3] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _270_ (
    .C(clock),
    .D(data_in[0]),
    .E(_063_),
    .Q(\memory[30] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _271_ (
    .C(clock),
    .D(data_in[1]),
    .E(_063_),
    .Q(\memory[30] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _272_ (
    .C(clock),
    .D(data_in[0]),
    .E(_064_),
    .Q(\memory[5] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _273_ (
    .C(clock),
    .D(data_in[1]),
    .E(_064_),
    .Q(\memory[5] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _274_ (
    .C(clock),
    .D(data_in[0]),
    .E(_065_),
    .Q(\memory[6] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _275_ (
    .C(clock),
    .D(data_in[1]),
    .E(_065_),
    .Q(\memory[6] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _276_ (
    .C(clock),
    .D(data_in[0]),
    .E(_066_),
    .Q(\memory[7] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _277_ (
    .C(clock),
    .D(data_in[1]),
    .E(_066_),
    .Q(\memory[7] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _278_ (
    .C(clock),
    .D(data_in[0]),
    .E(_067_),
    .Q(\memory[8] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _279_ (
    .C(clock),
    .D(data_in[1]),
    .E(_067_),
    .Q(\memory[8] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _280_ (
    .C(clock),
    .D(data_in[0]),
    .E(_068_),
    .Q(\memory[9] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _281_ (
    .C(clock),
    .D(data_in[1]),
    .E(_068_),
    .Q(\memory[9] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _282_ (
    .C(clock),
    .D(data_in[0]),
    .E(_069_),
    .Q(\memory[10] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _283_ (
    .C(clock),
    .D(data_in[1]),
    .E(_069_),
    .Q(\memory[10] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _284_ (
    .C(clock),
    .D(data_in[0]),
    .E(_070_),
    .Q(\memory[11] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _285_ (
    .C(clock),
    .D(data_in[1]),
    .E(_070_),
    .Q(\memory[11] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _286_ (
    .C(clock),
    .D(data_in[0]),
    .E(_071_),
    .Q(\memory[12] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _287_ (
    .C(clock),
    .D(data_in[1]),
    .E(_071_),
    .Q(\memory[12] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _288_ (
    .C(clock),
    .D(data_in[0]),
    .E(_072_),
    .Q(\memory[13] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _289_ (
    .C(clock),
    .D(data_in[1]),
    .E(_072_),
    .Q(\memory[13] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _290_ (
    .C(clock),
    .D(data_in[0]),
    .E(_073_),
    .Q(\memory[31] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _291_ (
    .C(clock),
    .D(data_in[1]),
    .E(_073_),
    .Q(\memory[31] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _292_ (
    .C(clock),
    .D(data_in[0]),
    .E(_074_),
    .Q(\memory[15] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _293_ (
    .C(clock),
    .D(data_in[1]),
    .E(_074_),
    .Q(\memory[15] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _294_ (
    .C(clock),
    .D(data_in[0]),
    .E(_075_),
    .Q(\memory[16] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _295_ (
    .C(clock),
    .D(data_in[1]),
    .E(_075_),
    .Q(\memory[16] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _296_ (
    .C(clock),
    .D(data_in[0]),
    .E(_076_),
    .Q(\memory[17] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _297_ (
    .C(clock),
    .D(data_in[1]),
    .E(_076_),
    .Q(\memory[17] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _298_ (
    .C(clock),
    .D(data_in[0]),
    .E(_077_),
    .Q(\memory[18] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _299_ (
    .C(clock),
    .D(data_in[1]),
    .E(_077_),
    .Q(\memory[18] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _300_ (
    .C(clock),
    .D(data_in[0]),
    .E(_078_),
    .Q(\memory[19] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _301_ (
    .C(clock),
    .D(data_in[1]),
    .E(_078_),
    .Q(\memory[19] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _302_ (
    .C(clock),
    .D(data_in[0]),
    .E(_079_),
    .Q(\memory[20] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _303_ (
    .C(clock),
    .D(data_in[1]),
    .E(_079_),
    .Q(\memory[20] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _304_ (
    .C(clock),
    .D(data_in[0]),
    .E(_080_),
    .Q(\memory[21] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _305_ (
    .C(clock),
    .D(data_in[1]),
    .E(_080_),
    .Q(\memory[21] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _306_ (
    .C(clock),
    .D(data_in[0]),
    .E(_081_),
    .Q(\memory[22] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _307_ (
    .C(clock),
    .D(data_in[1]),
    .E(_081_),
    .Q(\memory[22] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _308_ (
    .C(clock),
    .D(data_in[0]),
    .E(_082_),
    .Q(\memory[23] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _309_ (
    .C(clock),
    .D(data_in[1]),
    .E(_082_),
    .Q(\memory[23] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _310_ (
    .C(clock),
    .D(data_in[0]),
    .E(_083_),
    .Q(\memory[0] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _311_ (
    .C(clock),
    .D(data_in[1]),
    .E(_083_),
    .Q(\memory[0] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _312_ (
    .C(clock),
    .D(data_in[0]),
    .E(_084_),
    .Q(\memory[25] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _313_ (
    .C(clock),
    .D(data_in[1]),
    .E(_084_),
    .Q(\memory[25] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _314_ (
    .C(clock),
    .D(data_in[0]),
    .E(_085_),
    .Q(\memory[26] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _315_ (
    .C(clock),
    .D(data_in[1]),
    .E(_085_),
    .Q(\memory[26] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _316_ (
    .C(clock),
    .D(data_in[0]),
    .E(_086_),
    .Q(\memory[27] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _317_ (
    .C(clock),
    .D(data_in[1]),
    .E(_086_),
    .Q(\memory[27] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _318_ (
    .C(clock),
    .D(data_in[0]),
    .E(_087_),
    .Q(\memory[28] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _319_ (
    .C(clock),
    .D(data_in[1]),
    .E(_087_),
    .Q(\memory[28] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _320_ (
    .C(clock),
    .D(data_in[0]),
    .E(_088_),
    .Q(\memory[29] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _321_ (
    .C(clock),
    .D(data_in[1]),
    .E(_088_),
    .Q(\memory[29] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _322_ (
    .C(clock),
    .D(data_in[0]),
    .E(_089_),
    .Q(\memory[1] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _323_ (
    .C(clock),
    .D(data_in[1]),
    .E(_089_),
    .Q(\memory[1] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _324_ (
    .C(clock),
    .D(data_in[0]),
    .E(_090_),
    .Q(\memory[4] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _325_ (
    .C(clock),
    .D(data_in[1]),
    .E(_090_),
    .Q(\memory[4] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _326_ (
    .C(clock),
    .D(data_in[0]),
    .E(_091_),
    .Q(\memory[14] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _327_ (
    .C(clock),
    .D(data_in[1]),
    .E(_091_),
    .Q(\memory[14] [1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _328_ (
    .C(clock),
    .D(_001_),
    .E(_092_),
    .Q(nloss),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _329_ (
    .C(clock),
    .D(_094_),
    .E(_093_),
    .Q(nl[3]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _330_ (
    .C(clock),
    .D(_095_),
    .E(_093_),
    .Q(nl[2]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _331_ (
    .C(clock),
    .D(_096_),
    .E(_093_),
    .Q(nl[1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _332_ (
    .C(clock),
    .D(_097_),
    .E(_093_),
    .Q(nl[0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _333_ (
    .C(clock),
    .D(_099_),
    .E(_098_),
    .Q(play),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _334_ (
    .C(clock),
    .D(_105_),
    .E(_103_),
    .Q(wr),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _335_ (
    .C(clock),
    .D(_100_),
    .E(1'b1),
    .Q(_113_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _336_ (
    .C(clock),
    .D(_101_),
    .E(1'b1),
    .Q(_114_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _337_ (
    .C(clock),
    .D(_102_),
    .E(1'b1),
    .Q(counter[2]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _338_ (
    .C(clock),
    .D(_106_),
    .E(1'b1),
    .Q(count_2[0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _339_ (
    .C(clock),
    .D(_107_),
    .E(1'b1),
    .Q(count_2[1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _340_ (
    .C(clock),
    .D(_048_),
    .E(1'b1),
    .Q(data_out[0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _341_ (
    .C(clock),
    .D(_049_),
    .E(1'b1),
    .Q(data_out[1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _342_ (
    .C(clock),
    .D(_108_),
    .E(1'b1),
    .Q(_115_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _343_ (
    .C(clock),
    .D(_109_),
    .E(1'b1),
    .Q(_116_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _344_ (
    .C(clock),
    .D(_110_),
    .E(1'b1),
    .Q(_117_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _345_ (
    .C(clock),
    .D(_111_),
    .E(1'b1),
    .Q(_118_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _346_ (
    .C(clock),
    .D(_112_),
    .E(1'b1),
    .Q(_119_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _347_ (
    .C(clock),
    .D(_121_),
    .E(_120_),
    .Q(scan[3]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _348_ (
    .C(clock),
    .D(_122_),
    .E(_120_),
    .Q(scan[2]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _349_ (
    .C(clock),
    .D(_123_),
    .E(_120_),
    .Q(scan[1]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _350_ (
    .C(clock),
    .D(_124_),
    .E(_120_),
    .Q(scan[0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _351_ (
    .C(clock),
    .D(_125_),
    .E(_120_),
    .Q(_126_),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _352_ (
    .C(clock),
    .D(data_in[0]),
    .E(_104_),
    .Q(\memory[24] [0]),
    .R(_234_),
    .S(1'b1)
  );
  dffsre _353_ (
    .C(clock),
    .D(data_in[1]),
    .E(_104_),
    .Q(\memory[24] [1]),
    .R(_234_),
    .S(1'b1)
  );
  assign _001_ = 4'b0100 >> { _118_, start };
  assign _024_ = 32'd4261478400 >> { _001_, _030_, _033_, _032_, _031_ };
  assign _076_ = 64'b0000000100000000000000000000000000000000000000000000000000000000 >> { _050_, wr, _054_, _051_, _052_, _053_ };
  assign _127_ = 4'b0001 >> { start, _115_ };
  assign _128_ = 4'b0100 >> { _119_, start };
  assign _002_ = 32'd4042307754 >> { _128_, _127_, _015_, _118_, scan[0] };
  assign _129_ = 4'b0001 >> { count[0], count[1] };
  assign _130_ = 16'b0000000100000000 >> { _129_, count[4:2] };
  assign _131_ = 4'b0100 >> { _130_, count[5] };
  assign _132_ = 32'd4279226117 >> { _116_, _119_, _127_, _131_, _001_ };
  assign _133_ = 4'b0100 >> { _117_, start };
  assign _134_ = 64'b1001000000001001000000000000000000000000000000001001000000001001 >> { scan[0], _015_, scan[2], _013_, scan[3], _012_ };
  assign _135_ = 32'd2416508928 >> { _134_, scan[1], _014_, _126_, max[4] };
  assign _136_ = 4'b0100 >> { _116_, start };
  assign _137_ = 64'b1111110011111111111110000000000011111111000000001111111100001111 >> { _128_, _136_, _133_, _127_, _131_, _135_ };
  assign _093_ = 16'b1110111011110000 >> { _118_, _137_, _133_, _132_ };
  assign _025_ = 16'b1110000100000000 >> { _001_, _031_, _033_, _032_ };
  assign _084_ = 64'b0001000000000000000000000000000000000000000000000000000000000000 >> { wr, _051_, _054_, _050_, _053_, _052_ };
  assign _026_ = 8'b10010000 >> { _001_, _033_, _032_ };
  assign _138_ = 32'd30576 >> { _117_, _001_, _128_, _127_, _131_ };
  assign _139_ = 8'b11100000 >> { _133_, _119_, _118_ };
  assign _009_ = 32'd3215638528 >> { _013_, _139_, _014_, _015_, _138_ };
  assign _063_ = 64'b0100000000000000000000000000000000000000000000000000000000000000 >> { _052_, _051_, _053_, _050_, wr, _054_ };
  assign _010_ = 16'b1011101011000000 >> { _014_, _139_, _015_, _138_ };
  assign _103_ = 32'd4227858445 >> { _001_, _128_, _133_, _136_, _127_ };
  assign _140_ = 64'b1111111111111111111111111111111000000000000000000000000000000001 >> { _028_, _033_, _032_, _030_, _031_, _029_ };
  assign _022_ = 4'b1011 >> { _001_, _140_ };
  assign _006_ = 32'd4042307754 >> { _128_, _127_, max[4], _118_, _126_ };
  assign _061_ = 64'b0000000000000001000000000000000000000000000000000000000000000000 >> { wr, _053_, _051_, _052_, _054_, _050_ };
  assign _023_ = 64'b1111111111111110000000000000000100000000000000000000000000000000 >> { _001_, _029_, _033_, _032_, _030_, _031_ };
  assign _074_ = 64'b0100000000000000000000000000000000000000000000000000000000000000 >> { _054_, _051_, _053_, _052_, wr, _050_ };
  assign _080_ = 64'b0001000000000000000000000000000000000000000000000000000000000000 >> { wr, _052_, _054_, _050_, _053_, _051_ };
  assign _141_ = 16'b1000000000000000 >> { _014_, _015_, _013_, _012_ };
  assign _142_ = 4'b1000 >> { max[4], _141_ };
  assign _143_ = 64'b1111010000000000000000001111000000000000000000000000000000000000 >> { _131_, _133_, _115_, _136_, _135_, _142_ };
  assign _144_ = 32'd4294180864 >> { _001_, _119_, _136_, _117_, _143_ };
  assign _145_ = 64'b1111111111110000111111110111000000000000100011110000000011111111 >> { _136_, _119_, _127_, _133_, _135_, _131_ };
  assign _146_ = 64'b0000000010110010000000000000000000000000000000000000000000000000 >> { _001_, _116_, _119_, _117_, _131_, _127_ };
  assign _109_ = 8'b11110100 >> { _146_, _145_, _144_ };
  assign _071_ = 64'b0000000100000000000000000000000000000000000000000000000000000000 >> { _051_, wr, _052_, _050_, _054_, _053_ };
  assign _067_ = 64'b0000000000000001000000000000000000000000000000000000000000000000 >> { wr, _051_, _054_, _052_, _050_, _053_ };
  assign _066_ = 64'b0001000000000000000000000000000000000000000000000000000000000000 >> { wr, _053_, _054_, _052_, _050_, _051_ };
  assign _089_ = 64'b0000000000000001000000000000000000000000000000000000000000000000 >> { wr, _054_, _051_, _052_, _050_, _053_ };
  assign _062_ = 64'b0000000100000000000000000000000000000000000000000000000000000000 >> { _054_, wr, _053_, _051_, _052_, _050_ };
  assign _070_ = 64'b0001000000000000000000000000000000000000000000000000000000000000 >> { wr, _053_, _054_, _051_, _050_, _052_ };
  assign _147_ = 64'b1111111100000000110011001100110011110000111100001010101010101010 >> { _053_, _054_, \memory[27] [0], \memory[25] [0], \memory[26] [0], \memory[24] [0] };
  assign _148_ = 64'b1111111100000000110011001100110011110000111100001010101010101010 >> { _053_, _054_, \memory[11] [0], \memory[9] [0], \memory[10] [0], \memory[8] [0] };
  assign _149_ = 64'b1111111100000000110011001100110011110000111100001010101010101010 >> { _053_, _054_, \memory[15] [0], \memory[13] [0], \memory[14] [0], \memory[12] [0] };
  assign _150_ = 64'b1111111100000000110011001100110011110000111100001010101010101010 >> { _053_, _054_, \memory[31] [0], \memory[29] [0], \memory[30] [0], \memory[28] [0] };
  assign _151_ = 64'b1111111100000000110011001100110011110000111100001010101010101010 >> { _050_, _052_, _150_, _149_, _147_, _148_ };
  assign _152_ = 64'b1111111100000000110011001100110011110000111100001010101010101010 >> { _053_, _054_, \memory[7] [0], \memory[5] [0], \memory[6] [0], \memory[4] [0] };
  assign _153_ = 64'b1111111100000000110011001100110011110000111100001010101010101010 >> { _053_, _054_, \memory[23] [0], \memory[21] [0], \memory[22] [0], \memory[20] [0] };
  assign _154_ = 64'b1111111100000000110011001100110011110000111100001010101010101010 >> { _053_, _054_, \memory[19] [0], \memory[17] [0], \memory[18] [0], \memory[16] [0] };
  assign _155_ = 64'b1111111100000000110011001100110011110000111100001010101010101010 >> { _053_, _054_, \memory[3] [0], \memory[1] [0], \memory[2] [0], \memory[0] [0] };
  assign _156_ = 64'b1111000011110000110011001100110011111111000000001010101010101010 >> { _052_, _050_, _154_, _153_, _152_, _155_ };
  assign _048_ = 8'b10101100 >> { _051_, _156_, _151_ };
  assign _157_ = 64'b1111111111111111111111111100111111110000100010001111111111111111 >> { _119_, _001_, _116_, _133_, _135_, _142_ };
  assign _158_ = 32'd43967 >> { start, _115_, _116_, _131_, _157_ };
  assign _021_ = 16'b1100111000001100 >> { _118_, _136_, _103_, _143_ };
  assign _000_ = 64'b1111000011110000000000001111000011110101000011111100110000001100 >> { _136_, _119_, _117_, _001_, _021_, _158_ };
  assign _017_ = 4'b0001 >> { k[0], k[1] };
  assign _159_ = 8'b00010000 >> { _017_, k[2], k[3] };
  assign _160_ = 64'b1111111111111111111100111000110011111111100011000000110011111100 >> { _118_, _119_, _116_, _115_, _117_, _131_ };
  assign _161_ = 64'b0000000000000000000000000000000000010000000000001111111111111111 >> { start, _160_, _116_, _159_, _119_, _117_ };
  assign _098_ = 32'd43967 >> { _161_, _115_, _116_, _131_, _157_ };
  assign _011_ = 8'b11001010 >> { _015_, _138_, _139_ };
  assign _090_ = 64'b0000000000000001000000000000000000000000000000000000000000000000 >> { wr, _052_, _054_, _051_, _050_, _053_ };
  assign _073_ = 64'b1000000000000000000000000000000000000000000000000000000000000000 >> { _051_, _052_, _054_, _050_, wr, _053_ };
  assign _072_ = 64'b0001000000000000000000000000000000000000000000000000000000000000 >> { wr, _051_, _054_, _052_, _053_, _050_ };
  assign _085_ = 64'b0001000000000000000000000000000000000000000000000000000000000000 >> { wr, _053_, _051_, _050_, _054_, _052_ };
  assign _064_ = 64'b0000000100000000000000000000000000000000000000000000000000000000 >> { _052_, wr, _054_, _050_, _051_, _053_ };
  assign _065_ = 64'b0000000100000000000000000000000000000000000000000000000000000000 >> { _052_, wr, _053_, _054_, _051_, _050_ };
  assign _086_ = 64'b0100000000000000000000000000000000000000000000000000000000000000 >> { _054_, _051_, _053_, _050_, wr, _052_ };
  assign _075_ = 64'b0000000000000001000000000000000000000000000000000000000000000000 >> { wr, _050_, _051_, _052_, _054_, _053_ };
  assign _069_ = 64'b0000000100000000000000000000000000000000000000000000000000000000 >> { _051_, wr, _053_, _054_, _052_, _050_ };
  assign _068_ = 64'b0000000100000000000000000000000000000000000000000000000000000000 >> { _051_, wr, _054_, _050_, _052_, _053_ };
  assign _077_ = 64'b0000000100000000000000000000000000000000000000000000000000000000 >> { _050_, wr, _053_, _051_, _052_, _054_ };
  assign _087_ = 64'b0001000000000000000000000000000000000000000000000000000000000000 >> { wr, _051_, _052_, _050_, _053_, _054_ };
  assign _078_ = 64'b0001000000000000000000000000000000000000000000000000000000000000 >> { wr, _053_, _054_, _050_, _051_, _052_ };
  assign _018_ = 8'b00001101 >> { k[0], k[1], k[2] };
  assign _162_ = 4'b0100 >> { _127_, _131_ };
  assign _016_ = 64'b1111000011110100111100000000000000000000000000000000000000000000 >> { _001_, _116_, _117_, _119_, _162_, _159_ };
  assign _088_ = 64'b0100000000000000000000000000000000000000000000000000000000000000 >> { _054_, _051_, _052_, _050_, wr, _053_ };
  assign _082_ = 64'b0100000000000000000000000000000000000000000000000000000000000000 >> { _054_, _052_, _053_, _050_, wr, _051_ };
  assign _060_ = 4'b0100 >> { play, _058_ };
  assign _163_ = 64'b0000000000000000001111110111111100000000000000001111000000000000 >> { _117_, _119_, _116_, _115_, _131_, _118_ };
  assign _164_ = 64'b0000000000000000111100001100010000000000000000000000111100000000 >> { _118_, start, _116_, _119_, _117_, _135_ };
  assign _120_ = 4'b0100 >> { _164_, _163_ };
  assign _079_ = 64'b0000000100000000000000000000000000000000000000000000000000000000 >> { _050_, wr, _052_, _054_, _051_, _053_ };
  assign _165_ = 32'd50396671 >> { count[4], _129_, count[2], count[3], count[5] };
  assign _166_ = 64'b0101000011110000111100001111000000110011001100110000000011111111 >> { _136_, _127_, _029_, _165_, count[4], _131_ };
  assign _167_ = 8'b00010100 >> { _117_, _116_, _118_ };
  assign _168_ = 4'b1000 >> { _167_, _136_ };
  assign _169_ = 32'd3433697039 >> { _168_, _127_, _165_, count[4], _029_ };
  assign _170_ = 64'b1101110101011101110011110000000000000000000000000000000000000000 >> { _136_, _159_, _029_, _117_, _130_, _165_ };
  assign _171_ = 32'd2164195328 >> { _133_, _165_, _029_, _127_, _131_ };
  assign _036_ = 64'b1100110011001100110011111100110011111111111100000101010101010101 >> { _128_, _001_, _171_, _170_, _169_, _166_ };
  assign _172_ = 64'b0010001000110001111011101111111100000000000000111111110011111111 >> { _116_, _028_, count[5], _115_, start, _130_ };
  assign _173_ = 32'd4280221951 >> { _130_, count[5], _028_, _116_, _127_ };
  assign _174_ = 64'b0000111111001111000011111010101000001111111111110000111111111111 >> { _136_, _159_, _133_, _173_, _131_, _028_ };
  assign _175_ = 64'b0000000011111111001100110011001111110000011111111111000011111111 >> { _168_, _127_, count[5], _130_, _028_, _167_ };
  assign _035_ = 32'd252684851 >> { _128_, _001_, _175_, _172_, _174_ };
  assign _105_ = 4'b1000 >> { _116_, _127_ };
  assign _176_ = 64'b1111111111111101111111111111001111111111000011110000000011111111 >> { data_out, k[0], k[1], k[2], k[3] };
  assign _177_ = 64'b0000010100000100000001010101010101010101010101010101010101010001 >> { _118_, _116_, _117_, _119_, _115_, start };
  assign _092_ = 32'd65359 >> { _177_, _119_, _162_, _176_, _159_ };
  assign _083_ = 64'b0000000000000000000000000000000100000000000000000000000000000000 >> { wr, _051_, _052_, _054_, _050_, _053_ };
  assign _107_ = 4'b0110 >> count_2;
  assign _081_ = 64'b0001000000000000000000000000000000000000000000000000000000000000 >> { wr, _053_, _052_, _050_, _054_, _051_ };
  assign _178_ = 64'b1111111100001111110011110000111111111111101010101111111111111111 >> { _133_, _136_, _033_, _131_, _127_, _159_ };
  assign _179_ = 32'd259981312 >> { _178_, _133_, count[0], _136_, _159_ };
  assign _180_ = 64'b0001000101000101010001010001000100000101010101010101010100000101 >> { _127_, _136_, _128_, _033_, count[0], _001_ };
  assign _181_ = 64'b1011101110111000101010101010000010111011101100001010101010101010 >> { _136_, _128_, count[0], _131_, _167_, _180_ };
  assign _040_ = 16'b0000000011101111 >> { _181_, _001_, _119_, _179_ };
  assign _055_ = 32'd4227858448 >> { _128_, _118_, _136_, _133_, _115_ };
  assign _182_ = 64'b1111111111111111000100110011111100001101111111110000000011011111 >> { _046_, sound[1], counter[2], _114_, sound[0], _113_ };
  assign _056_ = 4'b0100 >> { play, _182_ };
  assign _047_ = 64'b0000000011111100000000000000000100000000000000100000000000110000 >> { _118_, _119_, start, _116_, _117_, _115_ };
  assign _183_ = 64'b0000111100001111000000000000111100000111011100000000111111111111 >> { _116_, _117_, _118_, _119_, _115_, _131_ };
  assign _043_ = 32'd16187392 >> { _158_, _183_, _119_, _116_, _159_ };
  assign _041_ = 64'b1111010011111111111111110100010000000000000000000000000000000000 >> { _043_, _133_, _136_, _118_, _131_, _127_ };
  assign _091_ = 64'b0001000000000000000000000000000000000000000000000000000000000000 >> { wr, _053_, _052_, _051_, _050_, _054_ };
  assign _004_ = 32'd4042307754 >> { _128_, _127_, _013_, _118_, scan[2] };
  assign _184_ = 64'b1111100000000000000000001111000000000000000000000000000000000000 >> { _131_, _115_, _117_, _116_, _142_, _135_ };
  assign _112_ = 8'b11111000 >> { _128_, _184_, _001_ };
  assign _008_ = 64'b1011111111111111101010101010101011000000000000000000000000000000 >> { _012_, _139_, _013_, _014_, _015_, _138_ };
  assign _185_ = 64'b1111111100000000110011001100110011110000111100001010101010101010 >> { _053_, _054_, \memory[23] [1], \memory[21] [1], \memory[22] [1], \memory[20] [1] };
  assign _186_ = 64'b1111111100000000110011001100110011110000111100001010101010101010 >> { _053_, _054_, \memory[7] [1], \memory[5] [1], \memory[6] [1], \memory[4] [1] };
  assign _187_ = 64'b0000000011111111001100110011001100001111000011110101010101010101 >> { _053_, _054_, \memory[19] [1], \memory[17] [1], \memory[18] [1], \memory[16] [1] };
  assign _188_ = 64'b1111111100000000110011001100110011110000111100001010101010101010 >> { _053_, _054_, \memory[3] [1], \memory[1] [1], \memory[2] [1], \memory[0] [1] };
  assign _189_ = 64'b1111111100000000110011001100110000001111000011111010101010101010 >> { _052_, _050_, _185_, _187_, _186_, _188_ };
  assign _190_ = 64'b1111111100000000110011001100110011110000111100001010101010101010 >> { _053_, _054_, \memory[27] [1], \memory[25] [1], \memory[26] [1], \memory[24] [1] };
  assign _191_ = 64'b1111111100000000110011001100110011110000111100001010101010101010 >> { _053_, _054_, \memory[11] [1], \memory[9] [1], \memory[10] [1], \memory[8] [1] };
  assign _192_ = 64'b1111111100000000110011001100110011110000111100001010101010101010 >> { _053_, _054_, \memory[15] [1], \memory[13] [1], \memory[14] [1], \memory[12] [1] };
  assign _193_ = 64'b1111111100000000110011001100110011110000111100001010101010101010 >> { _053_, _054_, \memory[31] [1], \memory[29] [1], \memory[30] [1], \memory[28] [1] };
  assign _194_ = 64'b1111111100000000110011001100110011110000111100001010101010101010 >> { _050_, _052_, _193_, _192_, _190_, _191_ };
  assign _049_ = 8'b11001010 >> { _051_, _194_, _189_ };
  assign _059_ = 4'b0111 >> { play, _182_ };
  assign _195_ = 64'b0000000011111111000111111111111100000000000000000000000000000000 >> { play, _001_, _131_, _133_, _119_, _116_ };
  assign _196_ = 64'b0000000000000000000000000000000011001100111111101111110011111100 >> { _195_, _119_, _131_, _136_, _127_, _001_ };
  assign _099_ = 64'b0000000000000000000000000000000000110011001110110011001111110000 >> { start, _119_, _117_, _118_, _196_, _115_ };
  assign _197_ = 8'b00001011 >> { _001_, _133_, _135_ };
  assign _122_ = 16'b0000011100001000 >> { scan[2], _197_, scan[1:0] };
  assign _198_ = 64'b0101000001011111010111110101000000010001110111011101110100010001 >> { _133_, count[0], count[1], _131_, _159_, _032_ };
  assign _199_ = 32'd786442 >> { _127_, _001_, _136_, count[1], _032_ };
  assign _200_ = 64'b0000001100000011111100111111001100000000111111111111111110101010 >> { _168_, count[1:0], _127_, _032_, _131_ };
  assign _201_ = 64'b1111111111111111000000000000000000000000101111110000000010111111 >> { _128_, _200_, _199_, _116_, _001_, _198_ };
  assign _202_ = 32'd2004291568 >> { _131_, count[1:0], _032_, _127_ };
  assign _039_ = 64'b0101010101010101010101010101110101010101010111010101111101010101 >> { _119_, _118_, _136_, _202_, _133_, _201_ };
  assign _203_ = 32'd14013696 >> { count[2], _129_, _031_, _127_, _131_ };
  assign _204_ = 64'b0000001100000011111100111111001111111111000000001010101011111111 >> { _168_, count[2], _129_, _127_, _031_, _131_ };
  assign _205_ = 64'b0000000011011101110111010000000000001100111111001111110000001100 >> { _133_, count[2], _129_, _159_, _031_, _131_ };
  assign _206_ = 32'd786442 >> { _127_, _001_, _136_, count[2], _031_ };
  assign _207_ = 64'b0000001100000011000001010000111100000000000011110000111100001111 >> { _118_, _136_, _203_, _206_, _205_, _133_ };
  assign _038_ = 32'd2400125183 >> { _128_, _207_, _204_, _133_, _203_ };
  assign _208_ = 64'b0000001000100010101010001010101010101010101010101010101010101010 >> { _131_, _115_, _117_, _116_, _119_, _001_ };
  assign _209_ = 16'b1111000100000000 >> { _208_, _105_, _133_, _128_ };
  assign _210_ = 32'd3758096384 >> { _131_, _127_, _117_, _136_, _128_ };
  assign _211_ = 32'd65521 >> { _208_, _118_, _210_, _128_, _133_ };
  assign _212_ = 16'b0000000011110100 >> { _118_, _128_, _133_, _116_ };
  assign _213_ = 32'd4009754383 >> { _115_, _212_, _128_, data_out };
  assign _097_ = 64'b0000000011111111111111111111111100010000000100001111111111111111 >> { nl[0], _213_, _211_, _209_, _020_, _019_ };
  assign _214_ = 32'd3154116367 >> { _115_, _212_, _128_, data_out[0], data_out[1] };
  assign _096_ = 64'b0100000011111111010000000100000011111111111111111111111111111111 >> { _214_, nl[1], _211_, _209_, _020_, _019_ };
  assign _215_ = 32'd3154116367 >> { _212_, _115_, _128_, data_out };
  assign _095_ = 64'b0000000011111111111111111111111101000000010000001111111111111111 >> { nl[2], _215_, _211_, _209_, _019_, _020_ };
  assign _216_ = 32'd2013265679 >> { _212_, _115_, _128_, data_out[0], data_out[1] };
  assign _094_ = 64'b1000000011111111100000001000000011111111111111111111111111111111 >> { _216_, nl[3], _211_, _209_, _020_, _019_ };
  assign _217_ = 64'b1111110011111110111111111000111111110000111100001100000000000000 >> { counter[2], sound[1:0], _046_, _114_, _113_ };
  assign _100_ = 8'b00010000 >> { play, _217_, _113_ };
  assign _218_ = 64'b1111111111111000000000000000000000000000000000000000000000000000 >> { _115_, _131_, _118_, _135_, _119_, _116_ };
  assign _219_ = 64'b0000000000000000000000000000000011001110111111001111000011001100 >> { _131_, _118_, _116_, _117_, _119_, _176_ };
  assign _220_ = 64'b1111111111110000111100001100000001010101010101010101010101010100 >> { _115_, _119_, _118_, _117_, _116_, _219_ };
  assign _108_ = 8'b00010000 >> { _220_, start, _218_ };
  assign _221_ = 64'b1111111011111010111110111111111111111111010011110011011111111111 >> { _046_, counter[2], _114_, sound[1], _113_, sound[0] };
  assign _102_ = 4'b0100 >> { play, _221_ };
  assign _104_ = 64'b0000000100000000000000000000000000000000000000000000000000000000 >> { _050_, wr, _051_, _054_, _052_, _053_ };
  assign _222_ = 64'b1111110111111111111100000000000000000000000000000000000000000000 >> { _212_, _117_, _115_, _116_, _135_, _131_ };
  assign _110_ = 16'b1111110011111010 >> { _092_, _222_, _146_, _163_ };
  assign _124_ = 4'b0001 >> { scan[0], _197_ };
  assign _123_ = 8'b00010100 >> { scan[1:0], _197_ };
  assign _121_ = 32'd8323200 >> { scan[3], _197_, scan[1], scan[2], scan[0] };
  assign _125_ = 64'b0000000000000000011111111111111100000000000000001000000000000000 >> { _126_, _197_, scan[2], scan[0], scan[3], scan[1] };
  assign _223_ = 64'b1111111100001111111111110000111100110011001100110101010101010101 >> { _001_, _127_, _117_, _017_, sound[1], data_out[1] };
  assign _224_ = 64'b0000110000001100000011000000010111111111111111111111111111110101 >> { sound[1], _133_, _001_, _127_, _131_, data_out[1] };
  assign _045_ = 64'b0000000011101111000000001110111100000000000000001111111111111111 >> { _128_, _223_, _224_, _117_, _118_, _116_ };
  assign _034_ = 64'b1010100010101010101010101010101010101010100010001000101000001000 >> { _117_, _116_, _118_, _115_, _119_, _158_ };
  assign _027_ = 4'b0111 >> { _033_, _001_ };
  assign _225_ = 32'd30576 >> { _046_, _001_, _136_, _115_, _131_ };
  assign _044_ = 64'b0000111100001111111111110000000010001111100010001000100010001000 >> { _001_, _128_, _117_, _225_, _046_, _127_ };
  assign _226_ = 16'b0100000000000000 >> { _115_, _131_, _117_, _116_ };
  assign _227_ = 8'b01001011 >> { count[3], _129_, count[2] };
  assign _228_ = 64'b1111111111111111001000100010001011110011111111110000001111111111 >> { _117_, _227_, _116_, _159_, _030_, _131_ };
  assign _229_ = 64'b1111000011111100111111001111110001010101010101010000000011111111 >> { _136_, _127_, _030_, _227_, _131_, count[3] };
  assign _230_ = 64'b1111000011110000111100001111000000110011010101011111111111111111 >> { _133_, _136_, _127_, _227_, count[3], _030_ };
  assign _231_ = 32'd247 >> { _230_, _001_, _030_, _127_, _131_ };
  assign _232_ = 64'b0000000000000000000000000000000011110000111101011111000011111100 >> { _231_, _116_, _118_, _227_, _131_, _117_ };
  assign _037_ = 64'b0000000011111111000000001111111110111011101110110000111100001111 >> { _128_, _001_, _232_, _229_, _228_, _226_ };
  assign _101_ = 16'b0001010000000000 >> { play, _114_, _113_, _217_ };
  assign _005_ = 32'd4042307754 >> { _128_, _127_, _012_, _118_, scan[3] };
  assign _003_ = 32'd4042307754 >> { _128_, _127_, _014_, _118_, scan[1] };
  assign _007_ = 16'b1011101011000000 >> { max[4], _139_, _141_, _138_ };
  assign _233_ = 16'b1111110100111111 >> { _118_, _117_, _119_, _018_ };
  assign _042_ = 64'b1111000011110000111100001111000000110011111100110011001110111011 >> { start, _115_, _118_, data_out[0], _233_, sound[0] };
  assign _111_ = 16'b1100111101010000 >> { _001_, _143_, _119_, _145_ };
  assign _234_ = 2'b01 >> reset;
  assign _057_ = 2'b01 >> _058_;
  assign _106_ = 2'b01 >> count_2[0];
endmodule
