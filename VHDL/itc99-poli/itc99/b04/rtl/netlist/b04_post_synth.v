/* Generated by Yosys 0.16+65 (git sha1 051517d61, gcc 9.1.0 -fPIC -Os) */

module b04(RESTART, AVERAGE, ENABLE, RESET, CLOCK, DATA_IN, DATA_OUT);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire [8:0] _097_;
  wire [7:0] _098_;
  wire [7:0] _099_;
  wire [8:0] _100_;
  wire [7:0] _101_;
  wire [7:0] _102_;
  wire [7:0] _103_;
  wire [8:0] _104_;
  wire [7:0] _105_;
  wire [8:0] _106_;
  wire [9:0] _107_;
  wire [8:0] _108_;
  wire _109_;
  wire [6:0] _110_;
  wire [7:0] _111_;
  wire [6:0] _112_;
  wire [6:0] _113_;
  wire [9:0] _114_;
  wire [8:0] _115_;
  wire _116_;
  wire [6:0] _117_;
  wire [7:0] _118_;
  wire [6:0] _119_;
  wire [6:0] _120_;
  wire [8:0] _121_;
  wire [7:0] _122_;
  wire [7:0] _123_;
  wire [8:0] _124_;
  wire [7:0] _125_;
  wire [8:0] _126_;
  wire [7:0] _127_;
  wire [7:0] _128_;
  wire [8:0] _129_;
  wire [7:0] _130_;
  input AVERAGE;
  wire AVERAGE;
  input CLOCK;
  wire CLOCK;
  input [7:0] DATA_IN;
  wire [7:0] DATA_IN;
  output [7:0] DATA_OUT;
  wire [7:0] DATA_OUT;
  input ENABLE;
  wire ENABLE;
  wire [7:0] REG1;
  wire [7:0] REG2;
  wire [7:0] REG3;
  wire [7:0] REG4;
  input RESET;
  wire RESET;
  input RESTART;
  wire RESTART;
  wire [7:0] RMAX;
  wire [7:0] RMIN;
  dffsre _131_ (
    .C(CLOCK),
    .D(_053_),
    .E(1'b1),
    .Q(_054_),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _132_ (
    .C(CLOCK),
    .D(_004_),
    .E(1'b1),
    .Q(_055_),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _133_ (
    .C(CLOCK),
    .D(DATA_IN[7]),
    .E(_057_),
    .Q(_058_),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _134_ (
    .C(CLOCK),
    .D(DATA_IN[6]),
    .E(_057_),
    .Q(_059_),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _135_ (
    .C(CLOCK),
    .D(DATA_IN[5]),
    .E(_057_),
    .Q(RMAX[5]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _136_ (
    .C(CLOCK),
    .D(DATA_IN[4]),
    .E(_057_),
    .Q(RMAX[4]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _137_ (
    .C(CLOCK),
    .D(DATA_IN[3]),
    .E(_057_),
    .Q(RMAX[3]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _138_ (
    .C(CLOCK),
    .D(DATA_IN[2]),
    .E(_057_),
    .Q(RMAX[2]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _139_ (
    .C(CLOCK),
    .D(DATA_IN[1]),
    .E(_057_),
    .Q(RMAX[1]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _140_ (
    .C(CLOCK),
    .D(DATA_IN[0]),
    .E(_057_),
    .Q(RMAX[0]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _141_ (
    .C(CLOCK),
    .D(DATA_IN[7]),
    .E(_061_),
    .Q(RMIN[7]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _142_ (
    .C(CLOCK),
    .D(DATA_IN[6]),
    .E(_061_),
    .Q(RMIN[6]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _143_ (
    .C(CLOCK),
    .D(DATA_IN[5]),
    .E(_061_),
    .Q(RMIN[5]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _144_ (
    .C(CLOCK),
    .D(DATA_IN[4]),
    .E(_061_),
    .Q(RMIN[4]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _145_ (
    .C(CLOCK),
    .D(DATA_IN[3]),
    .E(_061_),
    .Q(RMIN[3]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _146_ (
    .C(CLOCK),
    .D(DATA_IN[2]),
    .E(_061_),
    .Q(RMIN[2]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _147_ (
    .C(CLOCK),
    .D(DATA_IN[1]),
    .E(_061_),
    .Q(RMIN[1]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _148_ (
    .C(CLOCK),
    .D(DATA_IN[0]),
    .E(_061_),
    .Q(RMIN[0]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _149_ (
    .C(CLOCK),
    .D(_052_),
    .E(_004_),
    .Q(DATA_OUT[7]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _150_ (
    .C(CLOCK),
    .D(_051_),
    .E(_004_),
    .Q(DATA_OUT[6]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _151_ (
    .C(CLOCK),
    .D(_050_),
    .E(_004_),
    .Q(DATA_OUT[5]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _152_ (
    .C(CLOCK),
    .D(_049_),
    .E(_004_),
    .Q(DATA_OUT[4]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _153_ (
    .C(CLOCK),
    .D(_048_),
    .E(_004_),
    .Q(DATA_OUT[3]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _154_ (
    .C(CLOCK),
    .D(_047_),
    .E(_004_),
    .Q(DATA_OUT[2]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _155_ (
    .C(CLOCK),
    .D(_046_),
    .E(_004_),
    .Q(DATA_OUT[1]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _156_ (
    .C(CLOCK),
    .D(_045_),
    .E(_004_),
    .Q(DATA_OUT[0]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _157_ (
    .C(CLOCK),
    .D(_036_),
    .E(_004_),
    .Q(_066_),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _158_ (
    .C(CLOCK),
    .D(_035_),
    .E(_004_),
    .Q(REG4[6]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _159_ (
    .C(CLOCK),
    .D(_034_),
    .E(_004_),
    .Q(REG4[5]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _160_ (
    .C(CLOCK),
    .D(_033_),
    .E(_004_),
    .Q(REG4[4]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _161_ (
    .C(CLOCK),
    .D(_032_),
    .E(_004_),
    .Q(REG4[3]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _162_ (
    .C(CLOCK),
    .D(_031_),
    .E(_004_),
    .Q(REG4[2]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _163_ (
    .C(CLOCK),
    .D(_030_),
    .E(_004_),
    .Q(REG4[1]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _164_ (
    .C(CLOCK),
    .D(_029_),
    .E(_004_),
    .Q(REG4[0]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _165_ (
    .C(CLOCK),
    .D(_028_),
    .E(_004_),
    .Q(REG3[7]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _166_ (
    .C(CLOCK),
    .D(_027_),
    .E(_004_),
    .Q(REG3[6]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _167_ (
    .C(CLOCK),
    .D(_026_),
    .E(_004_),
    .Q(REG3[5]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _168_ (
    .C(CLOCK),
    .D(_025_),
    .E(_004_),
    .Q(REG3[4]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _169_ (
    .C(CLOCK),
    .D(_024_),
    .E(_004_),
    .Q(REG3[3]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _170_ (
    .C(CLOCK),
    .D(_023_),
    .E(_004_),
    .Q(REG3[2]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _171_ (
    .C(CLOCK),
    .D(_022_),
    .E(_004_),
    .Q(REG3[1]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _172_ (
    .C(CLOCK),
    .D(_021_),
    .E(_004_),
    .Q(REG3[0]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _173_ (
    .C(CLOCK),
    .D(_020_),
    .E(_004_),
    .Q(REG2[7]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _174_ (
    .C(CLOCK),
    .D(_019_),
    .E(_004_),
    .Q(REG2[6]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _175_ (
    .C(CLOCK),
    .D(_018_),
    .E(_004_),
    .Q(REG2[5]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _176_ (
    .C(CLOCK),
    .D(_017_),
    .E(_004_),
    .Q(REG2[4]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _177_ (
    .C(CLOCK),
    .D(_016_),
    .E(_004_),
    .Q(REG2[3]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _178_ (
    .C(CLOCK),
    .D(_015_),
    .E(_004_),
    .Q(REG2[2]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _179_ (
    .C(CLOCK),
    .D(_014_),
    .E(_004_),
    .Q(REG2[1]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _180_ (
    .C(CLOCK),
    .D(_013_),
    .E(_004_),
    .Q(REG2[0]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _181_ (
    .C(CLOCK),
    .D(_012_),
    .E(_004_),
    .Q(REG1[7]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _182_ (
    .C(CLOCK),
    .D(_011_),
    .E(_004_),
    .Q(REG1[6]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _183_ (
    .C(CLOCK),
    .D(_010_),
    .E(_004_),
    .Q(REG1[5]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _184_ (
    .C(CLOCK),
    .D(_009_),
    .E(_004_),
    .Q(REG1[4]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _185_ (
    .C(CLOCK),
    .D(_008_),
    .E(_004_),
    .Q(REG1[3]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _186_ (
    .C(CLOCK),
    .D(_007_),
    .E(_004_),
    .Q(REG1[2]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _187_ (
    .C(CLOCK),
    .D(_006_),
    .E(_004_),
    .Q(REG1[1]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _188_ (
    .C(CLOCK),
    .D(_005_),
    .E(_004_),
    .Q(REG1[0]),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _189_ (
    .C(CLOCK),
    .D(_044_),
    .E(_004_),
    .Q(_067_),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _190_ (
    .C(CLOCK),
    .D(_043_),
    .E(_004_),
    .Q(_068_),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _191_ (
    .C(CLOCK),
    .D(_042_),
    .E(_004_),
    .Q(_069_),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _192_ (
    .C(CLOCK),
    .D(_041_),
    .E(_004_),
    .Q(_070_),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _193_ (
    .C(CLOCK),
    .D(_040_),
    .E(_004_),
    .Q(_071_),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _194_ (
    .C(CLOCK),
    .D(_039_),
    .E(_004_),
    .Q(_072_),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _195_ (
    .C(CLOCK),
    .D(_038_),
    .E(_004_),
    .Q(_073_),
    .R(_096_),
    .S(1'b1)
  );
  dffsre _196_ (
    .C(CLOCK),
    .D(_037_),
    .E(_004_),
    .Q(_074_),
    .R(_096_),
    .S(1'b1)
  );
  assign _016_ = 4'b1000 >> { REG1[3], _055_ };
  assign _108_[4] = 4'b0110 >> { RMAX[4], RMIN[4] };
  assign _101_[0] = 4'b1001 >> { RMAX[0], DATA_IN[0] };
  assign _101_[4] = 4'b1001 >> { DATA_IN[4], RMAX[4] };
  assign _115_[1] = 4'b0110 >> { REG4[1], DATA_IN[1] };
  assign _109_ = 8'b11010000 >> { _122_[0], _105_[6], _002_ };
  assign _112_[0] = 4'b0110 >> { _110_[0], _109_ };
  assign _034_ = 4'b1000 >> { REG3[5], _055_ };
  assign _123_[5] = 8'b10010110 >> { _002_, _001_, _105_[6] };
  assign _075_ = 32'd3402410698 >> { DATA_IN[7], _062_, _066_, _130_[3], _103_[4] };
  assign _076_ = 32'd3433754864 >> { ENABLE, AVERAGE, _071_, REG4[3], _075_ };
  assign _077_ = 8'b10110010 >> { RMIN[7], _000_, _058_ };
  assign _048_ = 64'b1100110010101010111100001111000000000000000000000000000000000000 >> { _055_, RESTART, _077_, _076_, _125_[3], _105_[4] };
  assign _078_ = 32'd3402410698 >> { DATA_IN[7], _062_, _066_, _130_[4], _103_[5] };
  assign _079_ = 32'd2865557744 >> { ENABLE, AVERAGE, _070_, _078_, REG4[4] };
  assign _049_ = 64'b1100110010101010111100001111000000000000000000000000000000000000 >> { _055_, RESTART, _077_, _079_, _125_[4], _105_[5] };
  assign _007_ = 4'b1000 >> { DATA_IN[2], _055_ };
  assign _043_ = 16'b1100101000000000 >> { _055_, ENABLE, DATA_IN[6], _068_ };
  assign _108_[2] = 4'b0110 >> { RMAX[2], RMIN[2] };
  assign _042_ = 16'b1100101000000000 >> { _055_, ENABLE, DATA_IN[5], _069_ };
  assign _080_ = 16'b1101010000101011 >> { _065_, _063_, _064_, _103_[6] };
  assign _081_ = 64'b1010101010101010101010101010101000000000000000001100111100001100 >> { AVERAGE, _080_, DATA_IN[7], _062_, _066_, REG4[6] };
  assign _082_ = 32'd1303511040 >> { _077_, _003_, _002_, _105_[6], _001_ };
  assign _051_ = 64'b1111000011110000110011001010101000000000000000000000000000000000 >> { _055_, RESTART, ENABLE, _082_, _081_, _068_ };
  assign _039_ = 16'b1100101000000000 >> { _055_, ENABLE, DATA_IN[2], _072_ };
  assign _038_ = 16'b1100101000000000 >> { _055_, ENABLE, DATA_IN[1], _073_ };
  assign _041_ = 16'b1100101000000000 >> { _055_, ENABLE, DATA_IN[4], _070_ };
  assign _037_ = 16'b1100101000000000 >> { _055_, ENABLE, DATA_IN[0], _074_ };
  assign _044_ = 16'b1100101000000000 >> { _055_, ENABLE, DATA_IN[7], _067_ };
  assign _040_ = 16'b1010110000000000 >> { _055_, ENABLE, _071_, DATA_IN[3] };
  assign _083_ = 32'd3402410698 >> { DATA_IN[7], _062_, _066_, _130_[0], _103_[1] };
  assign _084_ = 32'd2865557744 >> { ENABLE, AVERAGE, _074_, _083_, REG4[0] };
  assign _045_ = 64'b1100110010101010111100001111000000000000000000000000000000000000 >> { _055_, RESTART, _077_, _084_, _125_[0], _105_[1] };
  assign _033_ = 4'b1000 >> { REG3[4], _055_ };
  assign _098_[4] = 4'b1001 >> { DATA_IN[4], RMIN[4] };
  assign _011_ = 4'b1000 >> { DATA_IN[6], _055_ };
  assign _098_[2] = 4'b1001 >> { RMIN[2], DATA_IN[2] };
  assign _022_ = 4'b1000 >> { REG2[1], _055_ };
  assign _008_ = 4'b1000 >> { DATA_IN[3], _055_ };
  assign _036_ = 4'b1000 >> { REG3[7], _055_ };
  assign _024_ = 4'b1000 >> { REG2[3], _055_ };
  assign _085_ = 32'd11665408 >> { _077_, _003_, _002_, _105_[6], _001_ };
  assign _086_ = 64'b0101010111111111010101011111111101010101111111110000010011101111 >> { _080_, _065_, _066_, DATA_IN[7], _062_, AVERAGE };
  assign _052_ = 64'b1111000011110000001100111010101000000000000000000000000000000000 >> { _055_, RESTART, ENABLE, _085_, _086_, _067_ };
  assign _087_ = 32'd3402410698 >> { DATA_IN[7], _062_, _066_, _130_[5], _103_[6] };
  assign _088_ = 32'd2865557744 >> { ENABLE, AVERAGE, _069_, _087_, REG4[5] };
  assign _050_ = 64'b1100110010101010111100001111000000000000000000000000000000000000 >> { _055_, RESTART, _077_, _088_, _125_[5], _105_[6] };
  assign _116_ = 8'b11010000 >> { _127_[0], _103_[6], _064_ };
  assign _119_[0] = 4'b0110 >> { _117_[0], _116_ };
  assign _115_[2] = 4'b0110 >> { REG4[2], DATA_IN[2] };
  assign _115_[5] = 4'b0110 >> { REG4[5], DATA_IN[5] };
  assign _115_[6] = 4'b0110 >> { REG4[6], DATA_IN[6] };
  assign _115_[4] = 4'b0110 >> { REG4[4], DATA_IN[4] };
  assign _017_ = 4'b1000 >> { REG1[4], _055_ };
  assign _115_[0] = 4'b0110 >> { REG4[0], DATA_IN[0] };
  assign _128_[5] = 8'b10010110 >> { _063_, _064_, _103_[6] };
  assign _115_[3] = 4'b0110 >> { DATA_IN[3], REG4[3] };
  assign _108_[5] = 4'b0110 >> { RMIN[5], RMAX[5] };
  assign _098_[1] = 4'b1001 >> { RMIN[1], DATA_IN[1] };
  assign _098_[3] = 4'b1001 >> { RMIN[3], DATA_IN[3] };
  assign _098_[0] = 4'b1001 >> { RMIN[0], DATA_IN[0] };
  assign _098_[5] = 4'b1001 >> { RMIN[5], DATA_IN[5] };
  assign _089_ = 64'b1000000000000000000000000000000000000000000000000000000000000000 >> { _098_[5], _098_[0], _098_[3], _098_[1], _098_[2], _098_[4] };
  assign _090_ = 16'b1000111010101111 >> { _060_, RMIN[6], _089_, DATA_IN[6] };
  assign _091_ = 32'd2938841866 >> { _056_, _059_, _058_, DATA_IN[6], DATA_IN[7] };
  assign _061_ = 64'b0000110011001111000000000000000010101010101010101010101010101010 >> { _055_, _091_, _090_, RMIN[7], DATA_IN[7], _054_ };
  assign _021_ = 4'b1000 >> { REG2[0], _055_ };
  assign _010_ = 4'b1000 >> { DATA_IN[5], _055_ };
  assign _014_ = 4'b1000 >> { REG1[1], _055_ };
  assign _053_ = 4'b0001 >> { _054_, _055_ };
  assign _057_ = 8'b00111010 >> { _055_, _091_, _054_ };
  assign _108_[0] = 4'b0110 >> { RMIN[0], RMAX[0] };
  assign _030_ = 4'b1000 >> { REG3[1], _055_ };
  assign _031_ = 4'b1000 >> { REG3[2], _055_ };
  assign _108_[1] = 4'b0110 >> { RMAX[1], RMIN[1] };
  assign _101_[1] = 4'b1001 >> { RMAX[1], DATA_IN[1] };
  assign _092_ = 32'd3402410698 >> { DATA_IN[7], _062_, _066_, _130_[2], _103_[3] };
  assign _093_ = 32'd2865557744 >> { ENABLE, AVERAGE, _072_, _092_, REG4[2] };
  assign _047_ = 64'b1100110010101010111100001111000000000000000000000000000000000000 >> { _055_, RESTART, _077_, _093_, _125_[2], _105_[3] };
  assign _015_ = 4'b1000 >> { REG1[2], _055_ };
  assign _020_ = 4'b1000 >> { REG1[7], _055_ };
  assign _019_ = 4'b1000 >> { REG1[6], _055_ };
  assign _032_ = 4'b1000 >> { REG3[3], _055_ };
  assign _006_ = 4'b1000 >> { DATA_IN[1], _055_ };
  assign _012_ = 4'b1000 >> { DATA_IN[7], _055_ };
  assign _101_[3] = 4'b1001 >> { RMAX[3], DATA_IN[3] };
  assign _023_ = 4'b1000 >> { REG2[2], _055_ };
  assign _013_ = 4'b1000 >> { REG1[0], _055_ };
  assign _101_[2] = 4'b1001 >> { RMAX[2], DATA_IN[2] };
  assign _009_ = 4'b1000 >> { DATA_IN[4], _055_ };
  assign _101_[5] = 4'b1001 >> { RMAX[5], DATA_IN[5] };
  assign _035_ = 4'b1000 >> { REG3[6], _055_ };
  assign _005_ = 4'b1000 >> { DATA_IN[0], _055_ };
  assign _025_ = 4'b1000 >> { REG2[4], _055_ };
  assign _108_[6] = 4'b0110 >> { _059_, RMIN[6] };
  assign _029_ = 4'b1000 >> { REG3[0], _055_ };
  assign _028_ = 4'b1000 >> { REG2[7], _055_ };
  assign _027_ = 4'b1000 >> { REG2[6], _055_ };
  assign _026_ = 4'b1000 >> { REG2[5], _055_ };
  assign _018_ = 4'b1000 >> { REG1[5], _055_ };
  assign _108_[3] = 4'b0110 >> { RMIN[3], RMAX[3] };
  assign _094_ = 32'd3402410698 >> { DATA_IN[7], _062_, _066_, _130_[1], _103_[2] };
  assign _095_ = 32'd3433754864 >> { ENABLE, AVERAGE, _073_, REG4[1], _094_ };
  assign _046_ = 64'b1100110010101010111100001111000000000000000000000000000000000000 >> { _055_, RESTART, _077_, _095_, _125_[1], _105_[2] };
  assign _096_ = 2'b01 >> RESET;
  assign _104_[4] = 2'b01 >> _103_[4];
  assign _104_[5] = 2'b01 >> _103_[5];
  assign _104_[1] = 2'b01 >> _103_[1];
  assign _106_[5] = 2'b01 >> _105_[5];
  assign _123_[0] = 2'b01 >> _113_[0];
  assign _123_[2] = 2'b01 >> _113_[2];
  assign _106_[3] = 2'b01 >> _105_[3];
  assign _123_[4] = 2'b01 >> _113_[4];
  assign _106_[1] = 2'b01 >> _105_[1];
  assign _106_[4] = 2'b01 >> _105_[4];
  assign _106_[2] = 2'b01 >> _105_[2];
  assign _004_ = 2'b01 >> _053_;
  assign _106_[0] = 2'b01 >> _105_[0];
  assign _123_[1] = 2'b01 >> _113_[1];
  assign _123_[3] = 2'b01 >> _113_[3];
  assign _104_[0] = 2'b01 >> _103_[0];
  assign _128_[0] = 2'b01 >> _120_[0];
  assign _128_[1] = 2'b01 >> _120_[1];
  assign _104_[3] = 2'b01 >> _103_[3];
  assign _128_[2] = 2'b01 >> _120_[2];
  assign _128_[3] = 2'b01 >> _120_[3];
  assign _128_[4] = 2'b01 >> _120_[4];
  assign _104_[2] = 2'b01 >> _103_[2];
  adder_carry _325_ (
    .cin(_097_[6]),
    .g(1'b0),
    .p(1'b0),
    .sumout(_060_)
  );
  adder_carry _326_ (
    .cin(_097_[0]),
    .cout(_097_[1]),
    .g(RMIN[0]),
    .p(_098_[0]),
    .sumout(_099_[0])
  );
  adder_carry _327_ (
    .cin(_097_[1]),
    .cout(_097_[2]),
    .g(RMIN[1]),
    .p(_098_[1]),
    .sumout(_099_[1])
  );
  adder_carry _328_ (
    .cin(_097_[2]),
    .cout(_097_[3]),
    .g(RMIN[2]),
    .p(_098_[2]),
    .sumout(_099_[2])
  );
  adder_carry _329_ (
    .cin(_097_[3]),
    .cout(_097_[4]),
    .g(RMIN[3]),
    .p(_098_[3]),
    .sumout(_099_[3])
  );
  adder_carry _330_ (
    .cin(_097_[4]),
    .cout(_097_[5]),
    .g(RMIN[4]),
    .p(_098_[4]),
    .sumout(_099_[4])
  );
  adder_carry _331_ (
    .cin(_097_[5]),
    .cout(_097_[6]),
    .g(RMIN[5]),
    .p(_098_[5]),
    .sumout(_099_[5])
  );
  adder_carry _332_ (
    .cout(_097_[0]),
    .g(1'b1),
    .p(1'b0)
  );
  adder_carry _333_ (
    .cin(_100_[6]),
    .g(1'b0),
    .p(1'b0),
    .sumout(_056_)
  );
  adder_carry _334_ (
    .cin(_100_[0]),
    .cout(_100_[1]),
    .g(RMAX[0]),
    .p(_101_[0]),
    .sumout(_102_[0])
  );
  adder_carry _335_ (
    .cin(_100_[1]),
    .cout(_100_[2]),
    .g(RMAX[1]),
    .p(_101_[1]),
    .sumout(_102_[1])
  );
  adder_carry _336_ (
    .cin(_100_[2]),
    .cout(_100_[3]),
    .g(RMAX[2]),
    .p(_101_[2]),
    .sumout(_102_[2])
  );
  adder_carry _337_ (
    .cin(_100_[3]),
    .cout(_100_[4]),
    .g(RMAX[3]),
    .p(_101_[3]),
    .sumout(_102_[3])
  );
  adder_carry _338_ (
    .cin(_100_[4]),
    .cout(_100_[5]),
    .g(RMAX[4]),
    .p(_101_[4]),
    .sumout(_102_[4])
  );
  adder_carry _339_ (
    .cin(_100_[5]),
    .cout(_100_[6]),
    .g(RMAX[5]),
    .p(_101_[5]),
    .sumout(_102_[5])
  );
  adder_carry _340_ (
    .cout(_100_[0]),
    .g(1'b1),
    .p(1'b0)
  );
  adder_carry _341_ (
    .cin(_107_[7]),
    .g(1'b0),
    .p(1'b0),
    .sumout(_000_)
  );
  adder_carry _342_ (
    .cin(_107_[0]),
    .cout(_107_[1]),
    .g(RMIN[0]),
    .p(_108_[0]),
    .sumout(_105_[0])
  );
  adder_carry _343_ (
    .cin(_107_[1]),
    .cout(_107_[2]),
    .g(RMIN[1]),
    .p(_108_[1]),
    .sumout(_105_[1])
  );
  adder_carry _344_ (
    .cin(_107_[2]),
    .cout(_107_[3]),
    .g(RMIN[2]),
    .p(_108_[2]),
    .sumout(_105_[2])
  );
  adder_carry _345_ (
    .cin(_107_[3]),
    .cout(_107_[4]),
    .g(RMIN[3]),
    .p(_108_[3]),
    .sumout(_105_[3])
  );
  adder_carry _346_ (
    .cin(_107_[4]),
    .cout(_107_[5]),
    .g(RMIN[4]),
    .p(_108_[4]),
    .sumout(_105_[4])
  );
  adder_carry _347_ (
    .cin(_107_[5]),
    .cout(_107_[6]),
    .g(RMIN[5]),
    .p(_108_[5]),
    .sumout(_105_[5])
  );
  adder_carry _348_ (
    .cin(_107_[6]),
    .cout(_107_[7]),
    .g(RMIN[6]),
    .p(_108_[6]),
    .sumout(_105_[6])
  );
  adder_carry _349_ (
    .cout(_107_[0]),
    .g(1'b0),
    .p(1'b0)
  );
  adder_carry _350_ (
    .cin(_111_[5]),
    .g(1'b0),
    .p(1'b0),
    .sumout(_001_)
  );
  adder_carry _351_ (
    .cin(_111_[0]),
    .cout(_111_[1]),
    .g(_109_),
    .p(_112_[0]),
    .sumout(_113_[0])
  );
  adder_carry _352_ (
    .cin(_111_[1]),
    .cout(_111_[2]),
    .g(1'b0),
    .p(_110_[1]),
    .sumout(_113_[1])
  );
  adder_carry _353_ (
    .cin(_111_[2]),
    .cout(_111_[3]),
    .g(1'b0),
    .p(_110_[2]),
    .sumout(_113_[2])
  );
  adder_carry _354_ (
    .cin(_111_[3]),
    .cout(_111_[4]),
    .g(1'b0),
    .p(_110_[3]),
    .sumout(_113_[3])
  );
  adder_carry _355_ (
    .cin(_111_[4]),
    .cout(_111_[5]),
    .g(1'b0),
    .p(_110_[4]),
    .sumout(_113_[4])
  );
  adder_carry _356_ (
    .cout(_111_[0]),
    .g(1'b0),
    .p(1'b0)
  );
  adder_carry _357_ (
    .cin(_114_[7]),
    .g(1'b0),
    .p(1'b0),
    .sumout(_062_)
  );
  adder_carry _358_ (
    .cin(_114_[0]),
    .cout(_114_[1]),
    .g(REG4[0]),
    .p(_115_[0]),
    .sumout(_103_[0])
  );
  adder_carry _359_ (
    .cin(_114_[1]),
    .cout(_114_[2]),
    .g(REG4[1]),
    .p(_115_[1]),
    .sumout(_103_[1])
  );
  adder_carry _360_ (
    .cin(_114_[2]),
    .cout(_114_[3]),
    .g(REG4[2]),
    .p(_115_[2]),
    .sumout(_103_[2])
  );
  adder_carry _361_ (
    .cin(_114_[3]),
    .cout(_114_[4]),
    .g(REG4[3]),
    .p(_115_[3]),
    .sumout(_103_[3])
  );
  adder_carry _362_ (
    .cin(_114_[4]),
    .cout(_114_[5]),
    .g(REG4[4]),
    .p(_115_[4]),
    .sumout(_103_[4])
  );
  adder_carry _363_ (
    .cin(_114_[5]),
    .cout(_114_[6]),
    .g(REG4[5]),
    .p(_115_[5]),
    .sumout(_103_[5])
  );
  adder_carry _364_ (
    .cin(_114_[6]),
    .cout(_114_[7]),
    .g(REG4[6]),
    .p(_115_[6]),
    .sumout(_103_[6])
  );
  adder_carry _365_ (
    .cout(_114_[0]),
    .g(1'b0),
    .p(1'b0)
  );
  adder_carry _366_ (
    .cin(_118_[5]),
    .g(1'b0),
    .p(1'b0),
    .sumout(_063_)
  );
  adder_carry _367_ (
    .cin(_118_[0]),
    .cout(_118_[1]),
    .g(_116_),
    .p(_119_[0]),
    .sumout(_120_[0])
  );
  adder_carry _368_ (
    .cin(_118_[1]),
    .cout(_118_[2]),
    .g(1'b0),
    .p(_117_[1]),
    .sumout(_120_[1])
  );
  adder_carry _369_ (
    .cin(_118_[2]),
    .cout(_118_[3]),
    .g(1'b0),
    .p(_117_[2]),
    .sumout(_120_[2])
  );
  adder_carry _370_ (
    .cin(_118_[3]),
    .cout(_118_[4]),
    .g(1'b0),
    .p(_117_[3]),
    .sumout(_120_[3])
  );
  adder_carry _371_ (
    .cin(_118_[4]),
    .cout(_118_[5]),
    .g(1'b0),
    .p(_117_[4]),
    .sumout(_120_[4])
  );
  adder_carry _372_ (
    .cout(_118_[0]),
    .g(1'b0),
    .p(1'b0)
  );
  adder_carry _373_ (
    .cin(_121_[6]),
    .g(1'b0),
    .p(1'b0),
    .sumout(_002_)
  );
  adder_carry _374_ (
    .cin(_121_[0]),
    .cout(_121_[1]),
    .g(1'b0),
    .p(_106_[0]),
    .sumout(_122_[0])
  );
  adder_carry _375_ (
    .cin(_121_[1]),
    .cout(_121_[2]),
    .g(1'b0),
    .p(_106_[1]),
    .sumout(_110_[0])
  );
  adder_carry _376_ (
    .cin(_121_[2]),
    .cout(_121_[3]),
    .g(1'b0),
    .p(_106_[2]),
    .sumout(_110_[1])
  );
  adder_carry _377_ (
    .cin(_121_[3]),
    .cout(_121_[4]),
    .g(1'b0),
    .p(_106_[3]),
    .sumout(_110_[2])
  );
  adder_carry _378_ (
    .cin(_121_[4]),
    .cout(_121_[5]),
    .g(1'b0),
    .p(_106_[4]),
    .sumout(_110_[3])
  );
  adder_carry _379_ (
    .cin(_121_[5]),
    .cout(_121_[6]),
    .g(1'b0),
    .p(_106_[5]),
    .sumout(_110_[4])
  );
  adder_carry _380_ (
    .cout(_121_[0]),
    .g(1'b1),
    .p(1'b0)
  );
  adder_carry _381_ (
    .cin(_124_[6]),
    .g(1'b0),
    .p(1'b0),
    .sumout(_003_)
  );
  adder_carry _382_ (
    .cin(_124_[0]),
    .cout(_124_[1]),
    .g(1'b0),
    .p(_123_[0]),
    .sumout(_125_[0])
  );
  adder_carry _383_ (
    .cin(_124_[1]),
    .cout(_124_[2]),
    .g(1'b0),
    .p(_123_[1]),
    .sumout(_125_[1])
  );
  adder_carry _384_ (
    .cin(_124_[2]),
    .cout(_124_[3]),
    .g(1'b0),
    .p(_123_[2]),
    .sumout(_125_[2])
  );
  adder_carry _385_ (
    .cin(_124_[3]),
    .cout(_124_[4]),
    .g(1'b0),
    .p(_123_[3]),
    .sumout(_125_[3])
  );
  adder_carry _386_ (
    .cin(_124_[4]),
    .cout(_124_[5]),
    .g(1'b0),
    .p(_123_[4]),
    .sumout(_125_[4])
  );
  adder_carry _387_ (
    .cin(_124_[5]),
    .cout(_124_[6]),
    .g(1'b0),
    .p(_123_[5]),
    .sumout(_125_[5])
  );
  adder_carry _388_ (
    .cout(_124_[0]),
    .g(1'b1),
    .p(1'b0)
  );
  adder_carry _389_ (
    .cin(_126_[6]),
    .g(1'b0),
    .p(1'b0),
    .sumout(_064_)
  );
  adder_carry _390_ (
    .cin(_126_[0]),
    .cout(_126_[1]),
    .g(1'b0),
    .p(_104_[0]),
    .sumout(_127_[0])
  );
  adder_carry _391_ (
    .cin(_126_[1]),
    .cout(_126_[2]),
    .g(1'b0),
    .p(_104_[1]),
    .sumout(_117_[0])
  );
  adder_carry _392_ (
    .cin(_126_[2]),
    .cout(_126_[3]),
    .g(1'b0),
    .p(_104_[2]),
    .sumout(_117_[1])
  );
  adder_carry _393_ (
    .cin(_126_[3]),
    .cout(_126_[4]),
    .g(1'b0),
    .p(_104_[3]),
    .sumout(_117_[2])
  );
  adder_carry _394_ (
    .cin(_126_[4]),
    .cout(_126_[5]),
    .g(1'b0),
    .p(_104_[4]),
    .sumout(_117_[3])
  );
  adder_carry _395_ (
    .cin(_126_[5]),
    .cout(_126_[6]),
    .g(1'b0),
    .p(_104_[5]),
    .sumout(_117_[4])
  );
  adder_carry _396_ (
    .cout(_126_[0]),
    .g(1'b1),
    .p(1'b0)
  );
  adder_carry _397_ (
    .cin(_129_[6]),
    .g(1'b0),
    .p(1'b0),
    .sumout(_065_)
  );
  adder_carry _398_ (
    .cin(_129_[0]),
    .cout(_129_[1]),
    .g(1'b0),
    .p(_128_[0]),
    .sumout(_130_[0])
  );
  adder_carry _399_ (
    .cin(_129_[1]),
    .cout(_129_[2]),
    .g(1'b0),
    .p(_128_[1]),
    .sumout(_130_[1])
  );
  adder_carry _400_ (
    .cin(_129_[2]),
    .cout(_129_[3]),
    .g(1'b0),
    .p(_128_[2]),
    .sumout(_130_[2])
  );
  adder_carry _401_ (
    .cin(_129_[3]),
    .cout(_129_[4]),
    .g(1'b0),
    .p(_128_[3]),
    .sumout(_130_[3])
  );
  adder_carry _402_ (
    .cin(_129_[4]),
    .cout(_129_[5]),
    .g(1'b0),
    .p(_128_[4]),
    .sumout(_130_[4])
  );
  adder_carry _403_ (
    .cin(_129_[5]),
    .cout(_129_[6]),
    .g(1'b0),
    .p(_128_[5]),
    .sumout(_130_[5])
  );
  adder_carry _404_ (
    .cout(_129_[0]),
    .g(1'b1),
    .p(1'b0)
  );
  assign _107_[9] = 1'b0;
  assign _108_[8] = 1'b0;
  assign _112_[6:1] = _110_[6:1];
  assign _114_[9] = 1'b0;
  assign _115_[8] = 1'b0;
  assign _119_[6:1] = _117_[6:1];
  assign _121_[7] = _121_[8];
  assign _122_[7:1] = _110_;
  assign _123_[6] = _123_[7];
  assign _126_[7] = _126_[8];
  assign _127_[7:1] = _117_;
  assign _128_[6] = _128_[7];
endmodule
