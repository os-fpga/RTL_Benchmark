/* Generated by Yosys 0.16+65 (git sha1 051517d61, gcc 9.1.0 -fPIC -Os) */

module b05(CLOCK, RESET, START, SIGN, DISPMAX2, DISPMAX3, DISPNUM1, DISPNUM2, DISPMAX1);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire [8:0] _072_;
  wire [8:0] _073_;
  wire [9:0] _074_;
  wire [8:0] _075_;
  wire [9:0] _076_;
  wire [8:0] _077_;
  wire [6:0] _078_;
  wire [5:0] _079_;
  wire [8:0] AC1;
  wire [8:0] AC2;
  input CLOCK;
  wire CLOCK;
  output [6:0] DISPMAX1;
  wire [6:0] DISPMAX1;
  output [6:0] DISPMAX2;
  wire [6:0] DISPMAX2;
  output [6:0] DISPMAX3;
  wire [6:0] DISPMAX3;
  output [6:0] DISPNUM1;
  wire [6:0] DISPNUM1;
  output [6:0] DISPNUM2;
  wire [6:0] DISPNUM2;
  wire EN_DISP;
  input RESET;
  wire RESET;
  output SIGN;
  wire SIGN;
  input START;
  wire START;
  wire [2:0] STATO;
  assign _019_ = 8'b01100000 >> { STATO[2], _024_, _025_ };
  assign DISPMAX1[5] = 4'b0100 >> { _001_, EN_DISP };
  assign _055_ = 8'b00110101 >> { _039_, _079_[0], _047_ };
  assign _056_ = 32'd4043291579 >> { _039_, _079_[1], _079_[3], _046_, _044_ };
  assign _057_ = 8'b00110101 >> { _039_, _079_[2], _045_ };
  assign _058_ = 32'd4043291579 >> { _039_, _079_[3], _079_[1], _044_, _046_ };
  assign _059_ = 16'b1000001100110111 >> { _057_, _043_, _056_, _058_ };
  assign _060_ = 8'b11010000 >> { _039_, _043_, _037_ };
  assign _061_ = 8'b01100001 >> { _058_, _043_, _057_ };
  assign DISPMAX3[4] = 32'd3221159936 >> { DISPMAX1[5], _055_, _059_, _061_, _060_ };
  assign _073_[4] = 32'd3593208069 >> { _024_, _023_, _021_, _022_, _025_ };
  assign _077_[4] = 4'b1001 >> { _031_, _073_[4] };
  assign _073_[7] = 32'd26062840 >> { _023_, _021_, _022_, _024_, _025_ };
  assign _073_[8] = 32'd805412868 >> { _021_, _022_, _025_, _023_, _024_ };
  assign _073_[3] = 32'd1543999876 >> { _022_, _025_, _023_, _021_, _024_ };
  assign _075_[3] = 4'b1001 >> { _044_, _073_[3] };
  assign _020_ = 4'b0100 >> { STATO[2], _025_ };
  assign _007_ = 16'b0111100000000000 >> { STATO[1], _012_, _014_, _013_ };
  assign _062_ = 32'd44239 >> { _060_, _057_, _043_, _058_, _056_ };
  assign DISPMAX2[1] = 64'b1111111100000000001111110111011100000000000000000000000000000000 >> { DISPMAX1[5], _043_, _039_, _079_[3], _062_, _044_ };
  assign DISPMAX2[0] = 64'b1111111111111111111111111111111110000000000000000000000000000000 >> { DISPMAX2[1], _043_, DISPMAX1[5], _044_, _045_, _046_ };
  assign DISPMAX2[6] = 64'b0000000000000000000000000000000000001111111011110000111100001111 >> { EN_DISP, _043_, _039_, _001_, _044_, _045_ };
  assign DISPNUM2[0] = 64'b0001000000000010000000100011110100000000000000000000000000000000 >> { DISPMAX1[5], _012_, _014_, _011_, _010_, _013_ };
  assign _063_ = 16'b0011111111110101 >> { _043_, _057_, _056_, _058_ };
  assign DISPMAX3[2] = 32'd3356282060 >> { _062_, _055_, _063_, DISPMAX1[5], _059_ };
  assign _064_ = 64'b0000000000000000000000000000000000000000000000000000000000000001 >> { AC1[0], AC1[2], AC1[3], AC1[6], AC1[4], AC1[5] };
  assign _065_ = 32'd1091829760 >> { _064_, _073_[7], _051_, _028_, AC1[1] };
  assign _066_ = 32'd2991410610 >> { _073_[8], _027_, _051_, _028_, _073_[7] };
  assign _048_ = 32'd1068105728 >> { STATO[0], STATO[1], _065_, _066_, START };
  assign DISPNUM2[3] = 64'b1000101010101000101010001010101010101010101010101010101010100010 >> { _012_, _013_, _014_, _011_, _010_, DISPMAX1[5] };
  assign _000_ = 16'b0000111000000011 >> { STATO[0], STATO[1], STATO[2], START };
  assign _026_ = 8'b11111000 >> { STATO[1:0], STATO[2] };
  assign _006_ = 32'd2139095040 >> { STATO[1], _011_, _012_, _013_, _014_ };
  assign _049_ = 4'b1000 >> { STATO[1], _066_ };
  assign _067_ = 64'b0000000001110001000000001000111000000000100011100000000001110001 >> { _073_[8], _039_, _065_, _040_, _036_, _073_[7] };
  assign _038_ = 32'd3216231424 >> { STATO[1], STATO[2], _066_, STATO[0], _067_ };
  assign DISPNUM2[5] = 64'b1010100010001010100010101010101010101010101000001010101010001010 >> { _013_, _014_, _011_, _012_, _010_, DISPMAX1[5] };
  assign DISPNUM1[5] = 32'd2031616 >> { DISPMAX1[5], _010_, _011_, _012_, _013_ };
  assign _073_[5] = 32'd4257572859 >> { _022_, _025_, _023_, _024_, _021_ };
  assign _077_[3] = 4'b1001 >> { _032_, _073_[3] };
  assign _073_[6] = 32'd1140199210 >> { _025_, _023_, _022_, _024_, _021_ };
  assign _073_[2] = 32'd8202988 >> { _023_, _022_, _024_, _021_, _025_ };
  assign _077_[2] = 4'b1001 >> { _033_, _073_[2] };
  assign _068_ = 32'd2147483648 >> { _021_, _024_, _023_, _025_, _022_ };
  assign _052_ = 32'd1061094911 >> { STATO[2], STATO[0], START, _068_, STATO[1] };
  assign _053_ = 32'd212795148 >> { STATO[0], STATO[1], _068_, STATO[2], START };
  assign _054_ = 32'd4286611584 >> { STATO[1:0], START, STATO[2], _068_ };
  assign _015_ = 32'd62912 >> { STATO[1], STATO[2], STATO[0], START, _068_ };
  assign _073_[1] = 32'd2860897169 >> { _023_, _022_, _021_, _025_, _024_ };
  assign _075_[1] = 4'b1001 >> { _046_, _073_[1] };
  assign DISPMAX2[5] = 32'd4277203184 >> { DISPMAX1[5], _043_, DISPMAX2[1], _044_, _045_ };
  assign DISPMAX3[5] = 32'd2827135658 >> { _062_, _055_, _061_, _059_, DISPMAX1[5] };
  assign _004_ = 64'b1111000010101010111111001111110000000000000000000000000000000000 >> { STATO[0], STATO[1], _066_, STATO[2], START, _050_ };
  assign _005_ = 64'b0111111111111111100000000000000000000000000000000000000000000000 >> { STATO[1], _010_, _012_, _013_, _014_, _011_ };
  assign _003_ = 4'b0100 >> { STATO[0], STATO[2] };
  assign _017_ = 32'd2139095040 >> { STATO[2], _022_, _023_, _025_, _024_ };
  assign _008_ = 8'b01100000 >> { STATO[1], _014_, _013_ };
  assign _073_[0] = 32'd188616936 >> { _025_, _022_, _021_, _023_, _024_ };
  assign _075_[0] = 4'b1001 >> { _047_, _073_[0] };
  assign DISPMAX3[3] = 32'd2829757096 >> { _055_, _059_, _063_, _060_, DISPMAX1[5] };
  assign DISPNUM2[2] = 64'b1010101010001010101010100010100010101010001000001010101010101010 >> { _012_, _014_, _010_, _011_, _013_, DISPMAX1[5] };
  assign _002_ = 32'd252316687 >> { STATO[2], STATO[0], STATO[1], START, _068_ };
  assign DISPMAX1[6] = 4'b0001 >> { EN_DISP, _001_ };
  assign _075_[2] = 4'b1001 >> { _045_, _073_[2] };
  assign _075_[5] = 4'b1001 >> { _042_, _073_[5] };
  assign _077_[6] = 4'b1001 >> { _029_, _073_[6] };
  assign _075_[6] = 4'b1001 >> { _041_, _073_[6] };
  assign DISPNUM2[4] = 64'b1010101010101010101010101010100010101000101010101010101010101010 >> { _013_, _012_, _011_, _010_, _014_, DISPMAX1[5] };
  assign DISPMAX3[0] = 32'd3203006464 >> { DISPMAX1[5], _059_, _055_, _063_, _060_ };
  assign DISPNUM2[1] = 64'b1010101010100010101000101010000010100000101010101010101000100010 >> { _013_, _012_, _011_, _010_, _014_, DISPMAX1[5] };
  assign DISPMAX2[4] = 64'b1111101111110011111100111111111100000000000000000000000000000000 >> { DISPMAX1[5], _045_, _044_, _039_, _043_, _046_ };
  assign _077_[0] = 4'b1001 >> { _035_, _073_[0] };
  assign _018_ = 16'b0111100000000000 >> { STATO[2], _023_, _024_, _025_ };
  assign SIGN = 8'b00001101 >> { EN_DISP, _039_, _001_ };
  assign _009_ = 4'b0100 >> { STATO[1], _014_ };
  assign _069_ = 64'b0000001000110000000000000000101100000000000000000000000000000000 >> { _001_, _013_, _012_, _011_, _010_, _014_ };
  assign DISPNUM2[6] = 4'b0001 >> { EN_DISP, _069_ };
  assign DISPMAX2[2] = 32'd3221159936 >> { DISPMAX2[5], _045_, _046_, _044_, _039_ };
  assign _075_[4] = 4'b1001 >> { _043_, _073_[4] };
  assign _077_[1] = 4'b1001 >> { _034_, _073_[1] };
  assign _077_[5] = 4'b1001 >> { _030_, _073_[5] };
  assign _016_ = 64'b0111111111111111100000000000000000000000000000000000000000000000 >> { STATO[2], _021_, _022_, _025_, _023_, _024_ };
  assign DISPMAX3[1] = 32'd2934898688 >> { DISPMAX1[5], _059_, _061_, _055_, _060_ };
  assign _070_ = 32'd2080440320 >> { _058_, _056_, _043_, _057_, _055_ };
  assign DISPMAX3[6] = 16'b0000000000011111 >> { EN_DISP, _001_, _070_, _060_ };
  assign _071_ = 2'b01 >> RESET;
  assign _072_[0] = 2'b01 >> _047_;
  assign _072_[2] = 2'b01 >> _045_;
  assign _072_[1] = 2'b01 >> _046_;
  assign _072_[3] = 2'b01 >> _044_;
  dffsre _170_ (
    .C(CLOCK),
    .D(STATO[0]),
    .E(_000_),
    .Q(_001_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _171_ (
    .C(CLOCK),
    .D(_003_),
    .E(_002_),
    .Q(EN_DISP),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _172_ (
    .C(CLOCK),
    .D(_005_),
    .E(_004_),
    .Q(_010_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _173_ (
    .C(CLOCK),
    .D(_006_),
    .E(_004_),
    .Q(_011_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _174_ (
    .C(CLOCK),
    .D(_007_),
    .E(_004_),
    .Q(_012_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _175_ (
    .C(CLOCK),
    .D(_008_),
    .E(_004_),
    .Q(_013_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _176_ (
    .C(CLOCK),
    .D(_009_),
    .E(_004_),
    .Q(_014_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _177_ (
    .C(CLOCK),
    .D(_016_),
    .E(_015_),
    .Q(_021_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _178_ (
    .C(CLOCK),
    .D(_017_),
    .E(_015_),
    .Q(_022_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _179_ (
    .C(CLOCK),
    .D(_018_),
    .E(_015_),
    .Q(_023_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _180_ (
    .C(CLOCK),
    .D(_019_),
    .E(_015_),
    .Q(_024_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _181_ (
    .C(CLOCK),
    .D(_020_),
    .E(_015_),
    .Q(_025_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _182_ (
    .C(CLOCK),
    .D(_073_[8]),
    .E(_026_),
    .Q(_027_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _183_ (
    .C(CLOCK),
    .D(_073_[7]),
    .E(_026_),
    .Q(_028_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _184_ (
    .C(CLOCK),
    .D(_073_[6]),
    .E(_026_),
    .Q(_029_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _185_ (
    .C(CLOCK),
    .D(_073_[5]),
    .E(_026_),
    .Q(_030_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _186_ (
    .C(CLOCK),
    .D(_073_[4]),
    .E(_026_),
    .Q(_031_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _187_ (
    .C(CLOCK),
    .D(_073_[3]),
    .E(_026_),
    .Q(_032_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _188_ (
    .C(CLOCK),
    .D(_073_[2]),
    .E(_026_),
    .Q(_033_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _189_ (
    .C(CLOCK),
    .D(_073_[1]),
    .E(_026_),
    .Q(_034_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _190_ (
    .C(CLOCK),
    .D(_073_[0]),
    .E(_026_),
    .Q(_035_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _191_ (
    .C(CLOCK),
    .D(_073_[8]),
    .E(_038_),
    .Q(_039_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _192_ (
    .C(CLOCK),
    .D(_073_[7]),
    .E(_038_),
    .Q(_040_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _193_ (
    .C(CLOCK),
    .D(_073_[6]),
    .E(_038_),
    .Q(_041_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _194_ (
    .C(CLOCK),
    .D(_073_[5]),
    .E(_038_),
    .Q(_042_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _195_ (
    .C(CLOCK),
    .D(_073_[4]),
    .E(_038_),
    .Q(_043_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _196_ (
    .C(CLOCK),
    .D(_073_[3]),
    .E(_038_),
    .Q(_044_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _197_ (
    .C(CLOCK),
    .D(_073_[2]),
    .E(_038_),
    .Q(_045_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _198_ (
    .C(CLOCK),
    .D(_073_[1]),
    .E(_038_),
    .Q(_046_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _199_ (
    .C(CLOCK),
    .D(_073_[0]),
    .E(_038_),
    .Q(_047_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _200_ (
    .C(CLOCK),
    .D(_049_),
    .E(_048_),
    .Q(_050_),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _201_ (
    .C(CLOCK),
    .D(_052_),
    .E(1'b1),
    .Q(STATO[0]),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _202_ (
    .C(CLOCK),
    .D(_053_),
    .E(1'b1),
    .Q(STATO[1]),
    .R(_071_),
    .S(1'b1)
  );
  dffsre _203_ (
    .C(CLOCK),
    .D(_054_),
    .E(1'b1),
    .Q(STATO[2]),
    .R(_071_),
    .S(1'b1)
  );
  adder_carry _204_ (
    .cin(_074_[7]),
    .g(1'b0),
    .p(1'b0),
    .sumout(_036_)
  );
  adder_carry _205_ (
    .cin(_074_[0]),
    .cout(_074_[1]),
    .g(_073_[0]),
    .p(_075_[0]),
    .sumout(AC2[0])
  );
  adder_carry _206_ (
    .cin(_074_[1]),
    .cout(_074_[2]),
    .g(_073_[1]),
    .p(_075_[1]),
    .sumout(AC2[1])
  );
  adder_carry _207_ (
    .cin(_074_[2]),
    .cout(_074_[3]),
    .g(_073_[2]),
    .p(_075_[2]),
    .sumout(AC2[2])
  );
  adder_carry _208_ (
    .cin(_074_[3]),
    .cout(_074_[4]),
    .g(_073_[3]),
    .p(_075_[3]),
    .sumout(AC2[3])
  );
  adder_carry _209_ (
    .cin(_074_[4]),
    .cout(_074_[5]),
    .g(_073_[4]),
    .p(_075_[4]),
    .sumout(AC2[4])
  );
  adder_carry _210_ (
    .cin(_074_[5]),
    .cout(_074_[6]),
    .g(_073_[5]),
    .p(_075_[5]),
    .sumout(AC2[5])
  );
  adder_carry _211_ (
    .cin(_074_[6]),
    .cout(_074_[7]),
    .g(_073_[6]),
    .p(_075_[6]),
    .sumout(AC2[6])
  );
  adder_carry _212_ (
    .cout(_074_[0]),
    .g(1'b1),
    .p(1'b0)
  );
  adder_carry _213_ (
    .cin(_076_[7]),
    .g(1'b0),
    .p(1'b0),
    .sumout(_051_)
  );
  adder_carry _214_ (
    .cin(_076_[0]),
    .cout(_076_[1]),
    .g(_073_[0]),
    .p(_077_[0]),
    .sumout(AC1[0])
  );
  adder_carry _215_ (
    .cin(_076_[1]),
    .cout(_076_[2]),
    .g(_073_[1]),
    .p(_077_[1]),
    .sumout(AC1[1])
  );
  adder_carry _216_ (
    .cin(_076_[2]),
    .cout(_076_[3]),
    .g(_073_[2]),
    .p(_077_[2]),
    .sumout(AC1[2])
  );
  adder_carry _217_ (
    .cin(_076_[3]),
    .cout(_076_[4]),
    .g(_073_[3]),
    .p(_077_[3]),
    .sumout(AC1[3])
  );
  adder_carry _218_ (
    .cin(_076_[4]),
    .cout(_076_[5]),
    .g(_073_[4]),
    .p(_077_[4]),
    .sumout(AC1[4])
  );
  adder_carry _219_ (
    .cin(_076_[5]),
    .cout(_076_[6]),
    .g(_073_[5]),
    .p(_077_[5]),
    .sumout(AC1[5])
  );
  adder_carry _220_ (
    .cin(_076_[6]),
    .cout(_076_[7]),
    .g(_073_[6]),
    .p(_077_[6]),
    .sumout(AC1[6])
  );
  adder_carry _221_ (
    .cout(_076_[0]),
    .g(1'b1),
    .p(1'b0)
  );
  adder_carry _222_ (
    .cin(_078_[4]),
    .g(1'b0),
    .p(1'b0),
    .sumout(_037_)
  );
  adder_carry _223_ (
    .cin(_078_[0]),
    .cout(_078_[1]),
    .g(1'b0),
    .p(_072_[0]),
    .sumout(_079_[0])
  );
  adder_carry _224_ (
    .cin(_078_[1]),
    .cout(_078_[2]),
    .g(1'b0),
    .p(_072_[1]),
    .sumout(_079_[1])
  );
  adder_carry _225_ (
    .cin(_078_[2]),
    .cout(_078_[3]),
    .g(1'b0),
    .p(_072_[2]),
    .sumout(_079_[2])
  );
  adder_carry _226_ (
    .cin(_078_[3]),
    .cout(_078_[4]),
    .g(1'b0),
    .p(_072_[3]),
    .sumout(_079_[3])
  );
  adder_carry _227_ (
    .cout(_078_[0]),
    .g(1'b1),
    .p(1'b0)
  );
  assign _078_[5] = _078_[6];
  assign DISPMAX1[4:0] = { DISPMAX1[5], DISPMAX1[5], DISPMAX1[5], DISPMAX1[5], DISPMAX1[5] };
  assign DISPMAX2[3] = DISPMAX1[5];
  assign { DISPNUM1[6], DISPNUM1[4:0] } = { DISPMAX1[6:5], DISPMAX1[5], DISPNUM1[5], DISPNUM1[5], DISPNUM1[5] };
endmodule
