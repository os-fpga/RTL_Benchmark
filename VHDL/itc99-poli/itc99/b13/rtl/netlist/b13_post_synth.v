/* Generated by Yosys 0.17+76 (git sha1 035496b50, gcc 9.1.0 -fPIC -Os) */

module b13(reset, eoc, soc, load_dato, add_mpx2, mux_en, clock, dsr, error, data_out, canale, data_in);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire [2:0] S1;
  output add_mpx2;
  wire add_mpx2;
  output [3:0] canale;
  wire [3:0] canale;
  input clock;
  wire clock;
  input [7:0] data_in;
  wire [7:0] data_in;
  output data_out;
  wire data_out;
  input dsr;
  wire dsr;
  input eoc;
  wire eoc;
  output error;
  wire error;
  wire [1:0] itfc_state;
  wire load;
  output load_dato;
  wire load_dato;
  output mux_en;
  wire mux_en;
  input reset;
  wire reset;
  wire send_en;
  output soc;
  wire soc;
  wire tre;
  dffsre _083_ (
    .C(clock),
    .D(_032_),
    .E(_017_),
    .Q(_033_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _084_ (
    .C(clock),
    .D(_016_),
    .E(_017_),
    .Q(itfc_state[1]),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _085_ (
    .C(clock),
    .D(itfc_state[1]),
    .E(_018_),
    .Q(_034_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _086_ (
    .C(clock),
    .D(_015_),
    .E(_016_),
    .Q(_035_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _087_ (
    .C(clock),
    .D(_005_),
    .E(_014_),
    .Q(load),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _088_ (
    .C(clock),
    .D(_036_),
    .E(_013_),
    .Q(_031_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _089_ (
    .C(clock),
    .D(_012_),
    .E(_003_),
    .Q(_030_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _090_ (
    .C(clock),
    .D(1'b1),
    .E(_011_),
    .Q(add_mpx2),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _091_ (
    .C(clock),
    .D(_036_),
    .E(_010_),
    .Q(_037_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _092_ (
    .C(clock),
    .D(_038_),
    .E(_009_),
    .Q(mux_en),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _093_ (
    .C(clock),
    .D(_039_),
    .E(_008_),
    .Q(load_dato),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _094_ (
    .C(clock),
    .D(S1[2]),
    .E(_007_),
    .Q(_040_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _095_ (
    .C(clock),
    .D(_038_),
    .E(_006_),
    .Q(soc),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _096_ (
    .C(clock),
    .D(_041_),
    .E(_004_),
    .Q(_045_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _097_ (
    .C(clock),
    .D(_042_),
    .E(_004_),
    .Q(_046_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _098_ (
    .C(clock),
    .D(_043_),
    .E(_004_),
    .Q(_047_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _099_ (
    .C(clock),
    .D(_044_),
    .E(_004_),
    .Q(_048_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _100_ (
    .C(clock),
    .D(_049_),
    .E(1'b1),
    .Q(_057_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _101_ (
    .C(clock),
    .D(_050_),
    .E(1'b1),
    .Q(_027_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _102_ (
    .C(clock),
    .D(_051_),
    .E(1'b1),
    .Q(_028_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _103_ (
    .C(clock),
    .D(_052_),
    .E(1'b1),
    .Q(_029_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _104_ (
    .C(clock),
    .D(_053_),
    .E(1'b1),
    .Q(send_en),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _105_ (
    .C(clock),
    .D(_054_),
    .E(1'b1),
    .Q(tre),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _106_ (
    .C(clock),
    .D(_055_),
    .E(1'b1),
    .Q(_058_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _107_ (
    .C(clock),
    .D(_056_),
    .E(1'b1),
    .Q(data_out),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _108_ (
    .C(clock),
    .D(_059_),
    .E(send_en),
    .Q(_066_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _109_ (
    .C(clock),
    .D(_060_),
    .E(send_en),
    .Q(_067_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _110_ (
    .C(clock),
    .D(_061_),
    .E(send_en),
    .Q(_068_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _111_ (
    .C(clock),
    .D(_062_),
    .E(send_en),
    .Q(_069_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _112_ (
    .C(clock),
    .D(_063_),
    .E(send_en),
    .Q(_070_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _113_ (
    .C(clock),
    .D(_064_),
    .E(send_en),
    .Q(_071_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _114_ (
    .C(clock),
    .D(_065_),
    .E(send_en),
    .Q(_072_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _115_ (
    .C(clock),
    .D(_026_),
    .E(_002_),
    .Q(error),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _116_ (
    .C(clock),
    .D(data_in[0]),
    .E(_001_),
    .Q(_019_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _117_ (
    .C(clock),
    .D(data_in[1]),
    .E(_001_),
    .Q(_020_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _118_ (
    .C(clock),
    .D(data_in[2]),
    .E(_001_),
    .Q(_021_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _119_ (
    .C(clock),
    .D(data_in[3]),
    .E(_001_),
    .Q(_022_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _120_ (
    .C(clock),
    .D(data_in[4]),
    .E(_001_),
    .Q(_023_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _121_ (
    .C(clock),
    .D(data_in[5]),
    .E(_001_),
    .Q(_024_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _122_ (
    .C(clock),
    .D(data_in[6]),
    .E(_001_),
    .Q(_073_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _123_ (
    .C(clock),
    .D(data_in[7]),
    .E(_001_),
    .Q(_025_),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _124_ (
    .C(clock),
    .D(_074_),
    .E(_000_),
    .Q(canale[2]),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _125_ (
    .C(clock),
    .D(_075_),
    .E(_000_),
    .Q(canale[1]),
    .R(_082_),
    .S(1'b1)
  );
  dffsre _126_ (
    .C(clock),
    .D(_076_),
    .E(_000_),
    .Q(canale[0]),
    .R(_082_),
    .S(1'b1)
  );
  assign _081_ = 64'b1111111111111111000000000000000011111110000000000000000000000000 >> { _070_, _071_, _069_, _068_, _067_, _066_ };
  assign _004_ = 8'b10000000 >> { _081_, _072_, send_en };
  assign _054_ = 8'b11111110 >> { _058_, load, tre };
  assign _003_ = 8'b01000000 >> { _029_, _034_, _028_ };
  assign _011_ = 4'b0100 >> { _003_, _030_ };
  assign _051_ = 16'b0000101000001100 >> { _029_, _028_, _040_, _034_ };
  assign _010_ = 4'b0100 >> { _051_, _011_ };
  assign _050_ = 32'd67067648 >> { S1[2], _057_, _027_, eoc, _037_ };
  assign _007_ = 16'b1110000000000000 >> { _057_, _027_, S1[2], _037_ };
  assign _043_ = 8'b01111000 >> { _047_, _045_, _046_ };
  assign _006_ = 4'b0100 >> { _027_, _057_ };
  assign _052_ = 16'b0000110111110000 >> { _029_, _028_, _030_, _034_ };
  assign _042_ = 16'b0000010000001011 >> { _045_, _048_, _047_, _046_ };
  assign _053_ = 32'd2155937664 >> { _058_, send_en, tre, _035_, dsr };
  assign _009_ = 16'b0001000000000011 >> { S1[2], _057_, _027_, eoc };
  assign _060_ = 16'b0000011101110000 >> { _066_, _067_, _081_, _072_ };
  assign _002_ = 4'b1110 >> { _035_, load };
  assign _049_ = 32'd257937167 >> { _027_, S1[2], _057_, eoc, _037_ };
  assign _013_ = 8'b00011100 >> { _029_, _028_, _034_ };
  assign _014_ = 8'b00001110 >> { itfc_state[1], _031_, _033_ };
  assign _017_ = 8'b10111111 >> { _033_, itfc_state[1], _058_ };
  assign _041_ = 16'b1111111100001110 >> { _048_, _045_, _046_, _047_ };
  assign _055_ = 32'd16777216 >> { _045_, _004_, _048_, _047_, _046_ };
  assign _074_ = 8'b01111000 >> canale[2:0];
  assign _000_ = 4'b1000 >> { S1[2], _006_ };
  assign _008_ = 16'b0001110000000000 >> { S1[2], _057_, _027_, eoc };
  assign _078_ = 64'b1010101010101010110011001100110011110000111100001111111100000000 >> { _046_, _045_, _024_, _023_, _022_, _021_ };
  assign _079_ = 64'b0000111100001111000011110000111101010101000000000011001111111111 >> { _047_, _045_, _046_, _078_, _025_, _073_ };
  assign _056_ = 64'b1010101011001100000011110000111111111111111111111111111111111111 >> { _004_, _048_, _045_, _079_, _020_, _019_ };
  assign _075_ = 4'b0110 >> canale[1:0];
  assign _026_ = 8'b01111100 >> { tre, _035_, dsr };
  assign _080_ = 8'b10000000 >> { _068_, _067_, _066_ };
  assign _065_ = 32'd2155937536 >> { _081_, _072_, _069_, _080_, _070_ };
  assign _063_ = 8'b01111000 >> { _070_, _080_, _069_ };
  assign _062_ = 64'b0000011101110111011101110111011101110000000000000000000000000000 >> { _069_, _068_, _067_, _066_, _081_, _072_ };
  assign _032_ = 8'b00001110 >> { _033_, _031_, itfc_state[1] };
  assign _001_ = 4'b0100 >> { load, tre };
  assign _061_ = 8'b01111000 >> { _068_, _067_, _066_ };
  assign _016_ = 4'b0110 >> { _033_, itfc_state[1] };
  assign _064_ = 64'b0000011101110111011101110111011101110000000000000000000000000000 >> { _071_, _080_, _070_, _069_, _081_, _072_ };
  assign _018_ = 4'b0100 >> { _017_, _016_ };
  assign _044_ = 16'b1000100011110000 >> { _045_, _048_, _047_, _046_ };
  assign _082_ = 2'b01 >> reset;
  assign _077_ = 2'b01 >> _057_;
  assign _015_ = 2'b01 >> itfc_state[1];
  assign _012_ = 2'b01 >> _030_;
  assign _039_ = 2'b01 >> _027_;
  assign _059_ = 2'b01 >> _066_;
  assign _038_ = 2'b01 >> S1[2];
  assign _005_ = 2'b01 >> _033_;
  assign _076_ = 2'b01 >> canale[0];
  assign _036_ = 2'b01 >> _029_;
  dffsre _179_ (
    .C(clock),
    .D(_027_),
    .E(_077_),
    .Q(S1[2]),
    .R(_082_),
    .S(1'b1)
  );
  assign canale[3] = 1'b0;
endmodule
