// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : sim.v
// Device     : SIM
// LiteX sha1 : 6f6a10db
// Date       : 2022-02-02 12:46:35
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module sim (
	output wire sim_trace,
	output wire serial_source_valid,
	input  wire serial_source_ready,
	output wire [7:0] serial_source_data,
	input  wire serial_sink_valid,
	output wire serial_sink_ready,
	input  wire [7:0] serial_sink_data,
	input  wire sys_clk
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg  soc_rst = 1'd0;
wire cpu_rst;
reg  [1:0] reset_storage = 2'd0;
reg  reset_re = 1'd0;
reg  [31:0] scratch_storage = 32'd305419896;
reg  scratch_re = 1'd0;
wire [31:0] bus_errors_status;
wire bus_errors_we;
reg  bus_errors_re = 1'd0;
wire bus_error;
reg  [31:0] bus_errors = 32'd0;
wire picorv32_trap;
wire picorv32_reset;
reg  [31:0] picorv32_interrupt = 32'd0;
wire [29:0] picorv32_idbus_adr;
wire [31:0] picorv32_idbus_dat_w;
wire [31:0] picorv32_idbus_dat_r;
wire [3:0] picorv32_idbus_sel;
wire picorv32_idbus_cyc;
wire picorv32_idbus_stb;
wire picorv32_idbus_ack;
wire picorv32_idbus_we;
wire [2:0] picorv32_idbus_cti;
wire [1:0] picorv32_idbus_bte;
wire picorv32_idbus_err;
wire picorv32_mem_valid;
wire picorv32_mem_instr;
wire picorv32_mem_ready;
wire [31:0] picorv32_mem_addr;
wire [31:0] picorv32_mem_wdata;
wire [3:0] picorv32_mem_wstrb;
wire [31:0] picorv32_mem_rdata;
wire picorv320;
wire picorv321;
wire [31:0] picorv322;
wire [31:0] picorv323;
wire [3:0] picorv324;
wire picorv325;
wire [31:0] picorv326;
wire [31:0] picorv327;
wire [31:0] picorv328;
wire [31:0] picorv329;
wire [29:0] ram_bus_adr;
wire [31:0] ram_bus_dat_w;
wire [31:0] ram_bus_dat_r;
wire [3:0] ram_bus_sel;
wire ram_bus_cyc;
wire ram_bus_stb;
reg  ram_bus_ack = 1'd0;
wire ram_bus_we;
wire [2:0] ram_bus_cti;
wire [1:0] ram_bus_bte;
reg  ram_bus_err = 1'd0;
wire [13:0] adr;
wire [31:0] dat_r;
wire [29:0] interface0_ram_bus_adr;
wire [31:0] interface0_ram_bus_dat_w;
wire [31:0] interface0_ram_bus_dat_r;
wire [3:0] interface0_ram_bus_sel;
wire interface0_ram_bus_cyc;
wire interface0_ram_bus_stb;
reg  interface0_ram_bus_ack = 1'd0;
wire interface0_ram_bus_we;
wire [2:0] interface0_ram_bus_cti;
wire [1:0] interface0_ram_bus_bte;
reg  interface0_ram_bus_err = 1'd0;
wire [10:0] sram0_adr;
wire [31:0] sram0_dat_r;
reg  [3:0] sram0_we = 4'd0;
wire [31:0] sram0_dat_w;
wire [29:0] interface1_ram_bus_adr;
wire [31:0] interface1_ram_bus_dat_w;
wire [31:0] interface1_ram_bus_dat_r;
wire [3:0] interface1_ram_bus_sel;
wire interface1_ram_bus_cyc;
wire interface1_ram_bus_stb;
reg  interface1_ram_bus_ack = 1'd0;
wire interface1_ram_bus_we;
wire [2:0] interface1_ram_bus_cti;
wire [1:0] interface1_ram_bus_bte;
reg  interface1_ram_bus_err = 1'd0;
wire sram1_adr;
wire [31:0] sram1_dat_r;
reg  [3:0] sram1_we = 4'd0;
wire [31:0] sram1_dat_w;
wire sink_valid;
wire sink_ready;
wire sink_first;
wire sink_last;
wire [7:0] sink_payload_data;
wire source_valid;
wire source_ready;
reg  source_first = 1'd0;
reg  source_last = 1'd0;
wire [7:0] source_payload_data;
reg  uart_rxtx_re = 1'd0;
wire [7:0] uart_rxtx_r;
reg  uart_rxtx_we = 1'd0;
wire [7:0] uart_rxtx_w;
wire uart_txfull_status;
wire uart_txfull_we;
reg  uart_txfull_re = 1'd0;
wire uart_rxempty_status;
wire uart_rxempty_we;
reg  uart_rxempty_re = 1'd0;
wire uart_irq;
wire uart_tx_status;
reg  uart_tx_pending = 1'd0;
wire uart_tx_trigger;
reg  uart_tx_clear = 1'd0;
reg  uart_tx_trigger_d = 1'd0;
wire uart_rx_status;
reg  uart_rx_pending = 1'd0;
wire uart_rx_trigger;
reg  uart_rx_clear = 1'd0;
reg  uart_rx_trigger_d = 1'd0;
wire uart_tx0;
wire uart_rx0;
reg  [1:0] uart_status_status = 2'd0;
wire uart_status_we;
reg  uart_status_re = 1'd0;
wire uart_tx1;
wire uart_rx1;
reg  [1:0] uart_pending_status = 2'd0;
wire uart_pending_we;
reg  uart_pending_re = 1'd0;
reg  [1:0] uart_pending_r = 2'd0;
wire uart_tx2;
wire uart_rx2;
reg  [1:0] uart_enable_storage = 2'd0;
reg  uart_enable_re = 1'd0;
wire uart_txempty_status;
wire uart_txempty_we;
reg  uart_txempty_re = 1'd0;
wire uart_rxfull_status;
wire uart_rxfull_we;
reg  uart_rxfull_re = 1'd0;
wire uart_uart_sink_valid;
wire uart_uart_sink_ready;
wire uart_uart_sink_first;
wire uart_uart_sink_last;
wire [7:0] uart_uart_sink_payload_data;
wire uart_uart_source_valid;
wire uart_uart_source_ready;
wire uart_uart_source_first;
wire uart_uart_source_last;
wire [7:0] uart_uart_source_payload_data;
wire uart_tx_fifo_sink_valid;
wire uart_tx_fifo_sink_ready;
reg  uart_tx_fifo_sink_first = 1'd0;
reg  uart_tx_fifo_sink_last = 1'd0;
wire [7:0] uart_tx_fifo_sink_payload_data;
wire uart_tx_fifo_source_valid;
wire uart_tx_fifo_source_ready;
wire uart_tx_fifo_source_first;
wire uart_tx_fifo_source_last;
wire [7:0] uart_tx_fifo_source_payload_data;
wire uart_tx_fifo_re;
reg  uart_tx_fifo_readable = 1'd0;
wire uart_tx_fifo_syncfifo_we;
wire uart_tx_fifo_syncfifo_writable;
wire uart_tx_fifo_syncfifo_re;
wire uart_tx_fifo_syncfifo_readable;
wire [9:0] uart_tx_fifo_syncfifo_din;
wire [9:0] uart_tx_fifo_syncfifo_dout;
reg  [4:0] uart_tx_fifo_level0 = 5'd0;
reg  uart_tx_fifo_replace = 1'd0;
reg  [3:0] uart_tx_fifo_produce = 4'd0;
reg  [3:0] uart_tx_fifo_consume = 4'd0;
reg  [3:0] uart_tx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_tx_fifo_wrport_dat_r;
wire uart_tx_fifo_wrport_we;
wire [9:0] uart_tx_fifo_wrport_dat_w;
wire uart_tx_fifo_do_read;
wire [3:0] uart_tx_fifo_rdport_adr;
wire [9:0] uart_tx_fifo_rdport_dat_r;
wire uart_tx_fifo_rdport_re;
wire [4:0] uart_tx_fifo_level1;
wire [7:0] uart_tx_fifo_fifo_in_payload_data;
wire uart_tx_fifo_fifo_in_first;
wire uart_tx_fifo_fifo_in_last;
wire [7:0] uart_tx_fifo_fifo_out_payload_data;
wire uart_tx_fifo_fifo_out_first;
wire uart_tx_fifo_fifo_out_last;
wire uart_rx_fifo_sink_valid;
wire uart_rx_fifo_sink_ready;
wire uart_rx_fifo_sink_first;
wire uart_rx_fifo_sink_last;
wire [7:0] uart_rx_fifo_sink_payload_data;
wire uart_rx_fifo_source_valid;
wire uart_rx_fifo_source_ready;
wire uart_rx_fifo_source_first;
wire uart_rx_fifo_source_last;
wire [7:0] uart_rx_fifo_source_payload_data;
wire uart_rx_fifo_re;
reg  uart_rx_fifo_readable = 1'd0;
wire uart_rx_fifo_syncfifo_we;
wire uart_rx_fifo_syncfifo_writable;
wire uart_rx_fifo_syncfifo_re;
wire uart_rx_fifo_syncfifo_readable;
wire [9:0] uart_rx_fifo_syncfifo_din;
wire [9:0] uart_rx_fifo_syncfifo_dout;
reg  [4:0] uart_rx_fifo_level0 = 5'd0;
reg  uart_rx_fifo_replace = 1'd0;
reg  [3:0] uart_rx_fifo_produce = 4'd0;
reg  [3:0] uart_rx_fifo_consume = 4'd0;
reg  [3:0] uart_rx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_rx_fifo_wrport_dat_r;
wire uart_rx_fifo_wrport_we;
wire [9:0] uart_rx_fifo_wrport_dat_w;
wire uart_rx_fifo_do_read;
wire [3:0] uart_rx_fifo_rdport_adr;
wire [9:0] uart_rx_fifo_rdport_dat_r;
wire uart_rx_fifo_rdport_re;
wire [4:0] uart_rx_fifo_level1;
wire [7:0] uart_rx_fifo_fifo_in_payload_data;
wire uart_rx_fifo_fifo_in_first;
wire uart_rx_fifo_fifo_in_last;
wire [7:0] uart_rx_fifo_fifo_out_payload_data;
wire uart_rx_fifo_fifo_out_first;
wire uart_rx_fifo_fifo_out_last;
reg  [31:0] timer_load_storage = 32'd0;
reg  timer_load_re = 1'd0;
reg  [31:0] timer_reload_storage = 32'd0;
reg  timer_reload_re = 1'd0;
reg  timer_en_storage = 1'd0;
reg  timer_en_re = 1'd0;
reg  timer_update_value_storage = 1'd0;
reg  timer_update_value_re = 1'd0;
reg  [31:0] timer_value_status = 32'd0;
wire timer_value_we;
reg  timer_value_re = 1'd0;
wire timer_irq;
wire timer_zero_status;
reg  timer_zero_pending = 1'd0;
wire timer_zero_trigger;
reg  timer_zero_clear = 1'd0;
reg  timer_zero_trigger_d = 1'd0;
wire timer_zero0;
wire timer_status_status;
wire timer_status_we;
reg  timer_status_re = 1'd0;
wire timer_zero1;
wire timer_pending_status;
wire timer_pending_we;
reg  timer_pending_re = 1'd0;
reg  timer_pending_r = 1'd0;
wire timer_zero2;
reg  timer_enable_storage = 1'd0;
reg  timer_enable_re = 1'd0;
reg  [31:0] timer_value = 32'd0;
wire sys_clk_1;
wire sys_rst;
wire por_clk;
reg  int_rst = 1'd1;
wire pads_clk;
reg  pads_cmd_i = 1'd0;
wire pads_cmd_o;
wire pads_cmd_t;
reg  [3:0] pads_dat_i = 4'd0;
wire [3:0] pads_dat_o;
wire [3:0] pads_dat_t;
wire sd_ll_clk;
wire [6:0] internal_rd_port_adr;
wire [31:0] internal_rd_port_dat_r;
wire [6:0] internal_wr_port_adr;
wire [31:0] internal_wr_port_dat_r;
wire internal_wr_port_we;
wire [31:0] internal_wr_port_dat_w;
wire [3:0] card_state;
wire mode_4bit;
wire mode_spi;
wire mode_crc_disable;
wire spi_sel;
wire [47:0] cmd_in;
wire [5:0] cmd_in_last;
wire cmd_in_crc_good;
wire cmd_in_act;
wire data_in_act;
wire data_in_busy;
wire data_in_another;
wire data_in_stop;
wire data_in_done;
wire data_in_crc_good;
wire [135:0] resp_out;
wire [3:0] resp_type;
wire resp_busy;
wire resp_act;
wire resp_done;
wire [511:0] data_out_reg;
wire data_out_src;
wire [9:0] data_out_len;
wire data_out_busy;
wire data_out_act;
wire data_out_stop;
wire data_out_done;
wire info_card_desel;
wire err_unhandled_cmd;
wire err_cmd_crc;
wire host_hc_support;
wire [5:0] cmd_in_cmd;
wire [31:0] card_status;
wire [10:0] phy_idc;
wire [10:0] phy_odc;
wire [6:0] phy_istate;
wire [6:0] phy_ostate;
wire [7:0] phy_spi_cnt;
wire [6:0] link_state;
wire [15:0] link_ddc;
wire [15:0] link_dc;
wire block_read_act;
wire [31:0] block_read_addr;
wire [31:0] block_read_byteaddr;
wire [31:0] block_read_num;
wire block_read_stop;
wire block_write_act;
wire [31:0] block_write_addr;
wire [31:0] block_write_byteaddr;
wire [31:0] block_write_num;
wire [22:0] block_preerase_num;
wire [31:0] block_erase_start;
wire [31:0] block_erase_end;
wire block_read_go;
wire block_write_done;
wire card_detect_status0;
wire card_detect_we;
reg  card_detect_re = 1'd0;
reg  [8:0] clocker_storage = 9'd256;
reg  clocker_re = 1'd0;
wire clocker_stop;
wire clocker_ce;
wire clocker_clk_en;
wire clocker_clk0;
reg  [8:0] clocker_clks = 9'd0;
reg  clocker_clk1 = 1'd0;
reg  clocker_clk_d = 1'd0;
reg  clocker_ce_delayed = 1'd0;
reg  clocker_ce_latched = 1'd0;
reg  init_initialize_re = 1'd0;
wire init_initialize_r;
reg  init_initialize_we = 1'd0;
reg  init_initialize_w = 1'd0;
wire init_pads_in_valid;
wire init_pads_in_payload_cmd_i;
wire [3:0] init_pads_in_payload_data_i;
wire init_pads_out_ready;
reg  init_pads_out_payload_clk = 1'd0;
reg  init_pads_out_payload_cmd_o = 1'd0;
reg  init_pads_out_payload_cmd_oe = 1'd0;
reg  [3:0] init_pads_out_payload_data_o = 4'd0;
reg  init_pads_out_payload_data_oe = 1'd0;
reg  [7:0] init_count = 8'd0;
wire cmdw_pads_in_valid;
wire cmdw_pads_in_payload_cmd_i;
wire [3:0] cmdw_pads_in_payload_data_i;
wire cmdw_pads_out_ready;
reg  cmdw_pads_out_payload_clk = 1'd0;
reg  cmdw_pads_out_payload_cmd_o = 1'd0;
reg  cmdw_pads_out_payload_cmd_oe = 1'd0;
reg  [3:0] cmdw_pads_out_payload_data_o = 4'd0;
reg  cmdw_pads_out_payload_data_oe = 1'd0;
reg  cmdw_sink_valid = 1'd0;
reg  cmdw_sink_ready = 1'd0;
reg  cmdw_sink_last = 1'd0;
reg  [7:0] cmdw_sink_payload_data = 8'd0;
reg  [1:0] cmdw_sink_payload_cmd_type = 2'd0;
reg  cmdw_done = 1'd0;
reg  [7:0] cmdw_count = 8'd0;
wire cmdr_pads_in_pads_in_valid;
wire cmdr_pads_in_pads_in_ready;
reg  cmdr_pads_in_pads_in_first = 1'd0;
reg  cmdr_pads_in_pads_in_last = 1'd0;
reg  cmdr_pads_in_pads_in_payload_clk = 1'd0;
wire cmdr_pads_in_pads_in_payload_cmd_i;
reg  cmdr_pads_in_pads_in_payload_cmd_o = 1'd0;
reg  cmdr_pads_in_pads_in_payload_cmd_oe = 1'd0;
wire [3:0] cmdr_pads_in_pads_in_payload_data_i;
reg  [3:0] cmdr_pads_in_pads_in_payload_data_o = 4'd0;
reg  cmdr_pads_in_pads_in_payload_data_oe = 1'd0;
reg  cmdr_pads_in_pads_in_payload_data_i_ce = 1'd0;
wire cmdr_pads_out_ready;
reg  cmdr_pads_out_payload_clk = 1'd0;
reg  cmdr_pads_out_payload_cmd_o = 1'd0;
reg  cmdr_pads_out_payload_cmd_oe = 1'd0;
reg  [3:0] cmdr_pads_out_payload_data_o = 4'd0;
reg  cmdr_pads_out_payload_data_oe = 1'd0;
reg  cmdr_sink_valid = 1'd0;
reg  cmdr_sink_ready = 1'd0;
reg  [1:0] cmdr_sink_payload_cmd_type = 2'd0;
reg  [1:0] cmdr_sink_payload_data_type = 2'd0;
reg  [7:0] cmdr_sink_payload_length = 8'd0;
reg  cmdr_source_valid = 1'd0;
reg  cmdr_source_ready = 1'd0;
reg  cmdr_source_last = 1'd0;
reg  [7:0] cmdr_source_payload_data = 8'd0;
reg  [2:0] cmdr_source_payload_status = 3'd0;
reg  [31:0] cmdr_timeout = 32'd1000000;
reg  [7:0] cmdr_count = 8'd0;
reg  cmdr_busy = 1'd0;
wire cmdr_cmdr_pads_in_valid;
reg  cmdr_cmdr_pads_in_ready = 1'd0;
wire cmdr_cmdr_pads_in_first;
wire cmdr_cmdr_pads_in_last;
wire cmdr_cmdr_pads_in_payload_clk;
wire cmdr_cmdr_pads_in_payload_cmd_i;
wire cmdr_cmdr_pads_in_payload_cmd_o;
wire cmdr_cmdr_pads_in_payload_cmd_oe;
wire [3:0] cmdr_cmdr_pads_in_payload_data_i;
wire [3:0] cmdr_cmdr_pads_in_payload_data_o;
wire cmdr_cmdr_pads_in_payload_data_oe;
wire cmdr_cmdr_pads_in_payload_data_i_ce;
wire cmdr_cmdr_source_source_valid0;
reg  cmdr_cmdr_source_source_ready0 = 1'd0;
wire cmdr_cmdr_source_source_first0;
wire cmdr_cmdr_source_source_last0;
wire [7:0] cmdr_cmdr_source_source_payload_data0;
wire cmdr_cmdr_start;
reg  cmdr_cmdr_run = 1'd0;
wire cmdr_cmdr_converter_sink_valid;
wire cmdr_cmdr_converter_sink_ready;
reg  cmdr_cmdr_converter_sink_first = 1'd0;
reg  cmdr_cmdr_converter_sink_last = 1'd0;
wire cmdr_cmdr_converter_sink_payload_data;
wire cmdr_cmdr_converter_source_valid;
wire cmdr_cmdr_converter_source_ready;
reg  cmdr_cmdr_converter_source_first = 1'd0;
reg  cmdr_cmdr_converter_source_last = 1'd0;
reg  [7:0] cmdr_cmdr_converter_source_payload_data = 8'd0;
reg  [3:0] cmdr_cmdr_converter_source_payload_valid_token_count = 4'd0;
reg  [2:0] cmdr_cmdr_converter_demux = 3'd0;
wire cmdr_cmdr_converter_load_part;
reg  cmdr_cmdr_converter_strobe_all = 1'd0;
wire cmdr_cmdr_source_source_valid1;
wire cmdr_cmdr_source_source_ready1;
wire cmdr_cmdr_source_source_first1;
wire cmdr_cmdr_source_source_last1;
wire [7:0] cmdr_cmdr_source_source_payload_data1;
wire cmdr_cmdr_buf_sink_valid;
wire cmdr_cmdr_buf_sink_ready;
wire cmdr_cmdr_buf_sink_first;
wire cmdr_cmdr_buf_sink_last;
wire [7:0] cmdr_cmdr_buf_sink_payload_data;
reg  cmdr_cmdr_buf_source_valid = 1'd0;
wire cmdr_cmdr_buf_source_ready;
reg  cmdr_cmdr_buf_source_first = 1'd0;
reg  cmdr_cmdr_buf_source_last = 1'd0;
reg  [7:0] cmdr_cmdr_buf_source_payload_data = 8'd0;
reg  cmdr_cmdr_reset = 1'd0;
wire dataw_pads_in_pads_in_valid;
reg  dataw_pads_in_pads_in_ready = 1'd0;
reg  dataw_pads_in_pads_in_first = 1'd0;
reg  dataw_pads_in_pads_in_last = 1'd0;
reg  dataw_pads_in_pads_in_payload_clk = 1'd0;
wire dataw_pads_in_pads_in_payload_cmd_i;
reg  dataw_pads_in_pads_in_payload_cmd_o = 1'd0;
reg  dataw_pads_in_pads_in_payload_cmd_oe = 1'd0;
wire [3:0] dataw_pads_in_pads_in_payload_data_i;
reg  [3:0] dataw_pads_in_pads_in_payload_data_o = 4'd0;
reg  dataw_pads_in_pads_in_payload_data_oe = 1'd0;
reg  dataw_pads_in_pads_in_payload_data_i_ce = 1'd0;
wire dataw_pads_out_ready;
reg  dataw_pads_out_payload_clk = 1'd0;
reg  dataw_pads_out_payload_cmd_o = 1'd0;
reg  dataw_pads_out_payload_cmd_oe = 1'd0;
reg  [3:0] dataw_pads_out_payload_data_o = 4'd0;
reg  dataw_pads_out_payload_data_oe = 1'd0;
reg  dataw_sink_valid = 1'd0;
reg  dataw_sink_ready = 1'd0;
reg  dataw_sink_first = 1'd0;
reg  dataw_sink_last = 1'd0;
reg  [7:0] dataw_sink_payload_data = 8'd0;
reg  dataw_stop = 1'd0;
wire dataw_accepted0;
wire dataw_crc_error0;
wire dataw_write_error0;
reg  [2:0] dataw_status = 3'd0;
wire dataw_we;
reg  dataw_re = 1'd0;
reg  [7:0] dataw_count = 8'd0;
reg  dataw_accepted1 = 1'd0;
reg  dataw_crc_error1 = 1'd0;
reg  dataw_write_error1 = 1'd0;
wire dataw_crc_pads_in_valid;
wire dataw_crc_pads_in_ready;
wire dataw_crc_pads_in_first;
wire dataw_crc_pads_in_last;
wire dataw_crc_pads_in_payload_clk;
wire dataw_crc_pads_in_payload_cmd_i;
wire dataw_crc_pads_in_payload_cmd_o;
wire dataw_crc_pads_in_payload_cmd_oe;
wire [3:0] dataw_crc_pads_in_payload_data_i;
wire [3:0] dataw_crc_pads_in_payload_data_o;
wire dataw_crc_pads_in_payload_data_oe;
wire dataw_crc_pads_in_payload_data_i_ce;
wire dataw_crc_source_source_valid0;
reg  dataw_crc_source_source_ready0 = 1'd0;
wire dataw_crc_source_source_first0;
wire dataw_crc_source_source_last0;
wire [7:0] dataw_crc_source_source_payload_data0;
wire dataw_crc_start;
reg  dataw_crc_run = 1'd0;
wire dataw_crc_converter_sink_valid;
wire dataw_crc_converter_sink_ready;
reg  dataw_crc_converter_sink_first = 1'd0;
reg  dataw_crc_converter_sink_last = 1'd0;
wire dataw_crc_converter_sink_payload_data;
wire dataw_crc_converter_source_valid;
wire dataw_crc_converter_source_ready;
reg  dataw_crc_converter_source_first = 1'd0;
reg  dataw_crc_converter_source_last = 1'd0;
reg  [7:0] dataw_crc_converter_source_payload_data = 8'd0;
reg  [3:0] dataw_crc_converter_source_payload_valid_token_count = 4'd0;
reg  [2:0] dataw_crc_converter_demux = 3'd0;
wire dataw_crc_converter_load_part;
reg  dataw_crc_converter_strobe_all = 1'd0;
wire dataw_crc_source_source_valid1;
wire dataw_crc_source_source_ready1;
wire dataw_crc_source_source_first1;
wire dataw_crc_source_source_last1;
wire [7:0] dataw_crc_source_source_payload_data1;
wire dataw_crc_buf_sink_valid;
wire dataw_crc_buf_sink_ready;
wire dataw_crc_buf_sink_first;
wire dataw_crc_buf_sink_last;
wire [7:0] dataw_crc_buf_sink_payload_data;
reg  dataw_crc_buf_source_valid = 1'd0;
wire dataw_crc_buf_source_ready;
reg  dataw_crc_buf_source_first = 1'd0;
reg  dataw_crc_buf_source_last = 1'd0;
reg  [7:0] dataw_crc_buf_source_payload_data = 8'd0;
reg  dataw_crc_reset = 1'd0;
wire datar_pads_in_pads_in_valid;
wire datar_pads_in_pads_in_ready;
reg  datar_pads_in_pads_in_first = 1'd0;
reg  datar_pads_in_pads_in_last = 1'd0;
reg  datar_pads_in_pads_in_payload_clk = 1'd0;
wire datar_pads_in_pads_in_payload_cmd_i;
reg  datar_pads_in_pads_in_payload_cmd_o = 1'd0;
reg  datar_pads_in_pads_in_payload_cmd_oe = 1'd0;
wire [3:0] datar_pads_in_pads_in_payload_data_i;
reg  [3:0] datar_pads_in_pads_in_payload_data_o = 4'd0;
reg  datar_pads_in_pads_in_payload_data_oe = 1'd0;
reg  datar_pads_in_pads_in_payload_data_i_ce = 1'd0;
wire datar_pads_out_ready;
reg  datar_pads_out_payload_clk = 1'd0;
reg  datar_pads_out_payload_cmd_o = 1'd0;
reg  datar_pads_out_payload_cmd_oe = 1'd0;
reg  [3:0] datar_pads_out_payload_data_o = 4'd0;
reg  datar_pads_out_payload_data_oe = 1'd0;
reg  datar_sink_valid = 1'd0;
reg  datar_sink_ready = 1'd0;
reg  datar_sink_last = 1'd0;
reg  [9:0] datar_sink_payload_block_length = 10'd0;
reg  datar_source_valid = 1'd0;
reg  datar_source_ready = 1'd0;
reg  datar_source_first = 1'd0;
reg  datar_source_last = 1'd0;
reg  [7:0] datar_source_payload_data = 8'd0;
reg  [2:0] datar_source_payload_status = 3'd0;
reg  datar_stop = 1'd0;
reg  [31:0] datar_timeout = 32'd1000000;
reg  [9:0] datar_count = 10'd0;
wire datar_datar_pads_in_valid;
reg  datar_datar_pads_in_ready = 1'd0;
wire datar_datar_pads_in_first;
wire datar_datar_pads_in_last;
wire datar_datar_pads_in_payload_clk;
wire datar_datar_pads_in_payload_cmd_i;
wire datar_datar_pads_in_payload_cmd_o;
wire datar_datar_pads_in_payload_cmd_oe;
wire [3:0] datar_datar_pads_in_payload_data_i;
wire [3:0] datar_datar_pads_in_payload_data_o;
wire datar_datar_pads_in_payload_data_oe;
wire datar_datar_pads_in_payload_data_i_ce;
wire datar_datar_source_source_valid0;
reg  datar_datar_source_source_ready0 = 1'd0;
wire datar_datar_source_source_first0;
wire datar_datar_source_source_last0;
wire [7:0] datar_datar_source_source_payload_data0;
wire datar_datar_start;
reg  datar_datar_run = 1'd0;
wire datar_datar_converter_sink_valid;
wire datar_datar_converter_sink_ready;
reg  datar_datar_converter_sink_first = 1'd0;
reg  datar_datar_converter_sink_last = 1'd0;
wire [3:0] datar_datar_converter_sink_payload_data;
wire datar_datar_converter_source_valid;
wire datar_datar_converter_source_ready;
reg  datar_datar_converter_source_first = 1'd0;
reg  datar_datar_converter_source_last = 1'd0;
reg  [7:0] datar_datar_converter_source_payload_data = 8'd0;
reg  [1:0] datar_datar_converter_source_payload_valid_token_count = 2'd0;
reg  datar_datar_converter_demux = 1'd0;
wire datar_datar_converter_load_part;
reg  datar_datar_converter_strobe_all = 1'd0;
wire datar_datar_source_source_valid1;
wire datar_datar_source_source_ready1;
wire datar_datar_source_source_first1;
wire datar_datar_source_source_last1;
wire [7:0] datar_datar_source_source_payload_data1;
wire datar_datar_buf_sink_valid;
wire datar_datar_buf_sink_ready;
wire datar_datar_buf_sink_first;
wire datar_datar_buf_sink_last;
wire [7:0] datar_datar_buf_sink_payload_data;
reg  datar_datar_buf_source_valid = 1'd0;
wire datar_datar_buf_source_ready;
reg  datar_datar_buf_source_first = 1'd0;
reg  datar_datar_buf_source_last = 1'd0;
reg  [7:0] datar_datar_buf_source_payload_data = 8'd0;
reg  datar_datar_reset = 1'd0;
wire sdpads_clk;
reg  sdpads_cmd_i = 1'd0;
wire sdpads_cmd_o;
wire sdpads_cmd_oe;
reg  [3:0] sdpads_data_i = 4'd0;
wire [3:0] sdpads_data_o;
wire sdpads_data_oe;
reg  sdpads_data_i_ce = 1'd0;
reg  [1:0] clocker_clk_delay = 2'd0;
reg  card_detect_irq = 1'd0;
reg  card_detect_d = 1'd0;
wire sdcore_sink_sink_valid0;
wire sdcore_sink_sink_ready0;
wire sdcore_sink_sink_first0;
wire sdcore_sink_sink_last0;
wire [7:0] sdcore_sink_sink_payload_data0;
wire sdcore_source_source_valid0;
wire sdcore_source_source_ready0;
wire sdcore_source_source_first0;
wire sdcore_source_source_last0;
wire [7:0] sdcore_source_source_payload_data0;
reg  [31:0] sdcore_cmd_argument_storage = 32'd0;
reg  sdcore_cmd_argument_re = 1'd0;
wire [1:0] sdcore_csrfield_cmd_type;
wire [1:0] sdcore_csrfield_data_type;
wire [5:0] sdcore_csrfield_cmd;
reg  [13:0] sdcore_cmd_command_storage = 14'd0;
reg  sdcore_cmd_command_re = 1'd0;
reg  sdcore_cmd_send_storage = 1'd0;
reg  sdcore_cmd_send_re = 1'd0;
reg  [127:0] sdcore_cmd_response_status = 128'd0;
wire sdcore_cmd_response_we;
reg  sdcore_cmd_response_re = 1'd0;
wire sdcore_csrfield_done0;
wire sdcore_csrfield_error0;
wire sdcore_csrfield_timeout0;
wire sdcore_csrfield_crc0;
reg  [3:0] sdcore_cmd_event_status = 4'd0;
wire sdcore_cmd_event_we;
reg  sdcore_cmd_event_re = 1'd0;
wire sdcore_csrfield_done1;
wire sdcore_csrfield_error1;
wire sdcore_csrfield_timeout1;
wire sdcore_csrfield_crc1;
reg  [3:0] sdcore_data_event_status = 4'd0;
wire sdcore_data_event_we;
reg  sdcore_data_event_re = 1'd0;
reg  [9:0] sdcore_block_length_storage = 10'd0;
reg  sdcore_block_length_re = 1'd0;
reg  [31:0] sdcore_block_count_storage = 32'd0;
reg  sdcore_block_count_re = 1'd0;
wire sdcore_crc7_inserter_reset;
wire sdcore_crc7_inserter_enable;
wire [39:0] sdcore_crc7_inserter_din;
reg  [6:0] sdcore_crc7_inserter_crc = 7'd0;
reg  [6:0] sdcore_crc7_inserter_reg0 = 7'd0;
wire [6:0] sdcore_crc7_inserter_reg1;
wire [6:0] sdcore_crc7_inserter_reg2;
wire [6:0] sdcore_crc7_inserter_reg3;
wire [6:0] sdcore_crc7_inserter_reg4;
wire [6:0] sdcore_crc7_inserter_reg5;
wire [6:0] sdcore_crc7_inserter_reg6;
wire [6:0] sdcore_crc7_inserter_reg7;
wire [6:0] sdcore_crc7_inserter_reg8;
wire [6:0] sdcore_crc7_inserter_reg9;
wire [6:0] sdcore_crc7_inserter_reg10;
wire [6:0] sdcore_crc7_inserter_reg11;
wire [6:0] sdcore_crc7_inserter_reg12;
wire [6:0] sdcore_crc7_inserter_reg13;
wire [6:0] sdcore_crc7_inserter_reg14;
wire [6:0] sdcore_crc7_inserter_reg15;
wire [6:0] sdcore_crc7_inserter_reg16;
wire [6:0] sdcore_crc7_inserter_reg17;
wire [6:0] sdcore_crc7_inserter_reg18;
wire [6:0] sdcore_crc7_inserter_reg19;
wire [6:0] sdcore_crc7_inserter_reg20;
wire [6:0] sdcore_crc7_inserter_reg21;
wire [6:0] sdcore_crc7_inserter_reg22;
wire [6:0] sdcore_crc7_inserter_reg23;
wire [6:0] sdcore_crc7_inserter_reg24;
wire [6:0] sdcore_crc7_inserter_reg25;
wire [6:0] sdcore_crc7_inserter_reg26;
wire [6:0] sdcore_crc7_inserter_reg27;
wire [6:0] sdcore_crc7_inserter_reg28;
wire [6:0] sdcore_crc7_inserter_reg29;
wire [6:0] sdcore_crc7_inserter_reg30;
wire [6:0] sdcore_crc7_inserter_reg31;
wire [6:0] sdcore_crc7_inserter_reg32;
wire [6:0] sdcore_crc7_inserter_reg33;
wire [6:0] sdcore_crc7_inserter_reg34;
wire [6:0] sdcore_crc7_inserter_reg35;
wire [6:0] sdcore_crc7_inserter_reg36;
wire [6:0] sdcore_crc7_inserter_reg37;
wire [6:0] sdcore_crc7_inserter_reg38;
wire [6:0] sdcore_crc7_inserter_reg39;
wire [6:0] sdcore_crc7_inserter_reg40;
wire sdcore_crc16_inserter_sink_valid;
reg  sdcore_crc16_inserter_sink_ready = 1'd0;
wire sdcore_crc16_inserter_sink_first;
wire sdcore_crc16_inserter_sink_last;
wire [7:0] sdcore_crc16_inserter_sink_payload_data;
reg  sdcore_crc16_inserter_source_valid = 1'd0;
reg  sdcore_crc16_inserter_source_ready = 1'd0;
reg  sdcore_crc16_inserter_source_first = 1'd0;
reg  sdcore_crc16_inserter_source_last = 1'd0;
reg  [7:0] sdcore_crc16_inserter_source_payload_data = 8'd0;
reg  [2:0] sdcore_crc16_inserter_count = 3'd0;
wire sdcore_crc16_inserter_crc0_reset;
wire sdcore_crc16_inserter_crc0_enable;
reg  [1:0] sdcore_crc16_inserter_crc0_din = 2'd0;
reg  [15:0] sdcore_crc16_inserter_crc0_crc = 16'd0;
reg  [15:0] sdcore_crc16_inserter_crc0_reg0 = 16'd0;
wire [15:0] sdcore_crc16_inserter_crc0_reg1;
wire [15:0] sdcore_crc16_inserter_crc0_reg2;
wire sdcore_crc16_inserter_crc1_reset;
wire sdcore_crc16_inserter_crc1_enable;
reg  [1:0] sdcore_crc16_inserter_crc1_din = 2'd0;
reg  [15:0] sdcore_crc16_inserter_crc1_crc = 16'd0;
reg  [15:0] sdcore_crc16_inserter_crc1_reg0 = 16'd0;
wire [15:0] sdcore_crc16_inserter_crc1_reg1;
wire [15:0] sdcore_crc16_inserter_crc1_reg2;
wire sdcore_crc16_inserter_crc2_reset;
wire sdcore_crc16_inserter_crc2_enable;
reg  [1:0] sdcore_crc16_inserter_crc2_din = 2'd0;
reg  [15:0] sdcore_crc16_inserter_crc2_crc = 16'd0;
reg  [15:0] sdcore_crc16_inserter_crc2_reg0 = 16'd0;
wire [15:0] sdcore_crc16_inserter_crc2_reg1;
wire [15:0] sdcore_crc16_inserter_crc2_reg2;
wire sdcore_crc16_inserter_crc3_reset;
wire sdcore_crc16_inserter_crc3_enable;
reg  [1:0] sdcore_crc16_inserter_crc3_din = 2'd0;
reg  [15:0] sdcore_crc16_inserter_crc3_crc = 16'd0;
reg  [15:0] sdcore_crc16_inserter_crc3_reg0 = 16'd0;
wire [15:0] sdcore_crc16_inserter_crc3_reg1;
wire [15:0] sdcore_crc16_inserter_crc3_reg2;
reg  sdcore_sink_sink_valid1 = 1'd0;
wire sdcore_sink_sink_ready1;
reg  sdcore_sink_sink_first1 = 1'd0;
reg  sdcore_sink_sink_last1 = 1'd0;
reg  [7:0] sdcore_sink_sink_payload_data1 = 8'd0;
wire sdcore_source_source_valid1;
wire sdcore_source_source_ready1;
wire sdcore_source_source_first1;
wire sdcore_source_source_last1;
wire [7:0] sdcore_source_source_payload_data1;
wire sdcore_fifo_sink_valid;
wire sdcore_fifo_sink_ready;
wire sdcore_fifo_sink_first;
wire sdcore_fifo_sink_last;
wire [7:0] sdcore_fifo_sink_payload_data;
wire sdcore_fifo_source_valid;
wire sdcore_fifo_source_ready;
wire sdcore_fifo_source_first;
wire sdcore_fifo_source_last;
wire [7:0] sdcore_fifo_source_payload_data;
wire sdcore_fifo_syncfifo_we;
wire sdcore_fifo_syncfifo_writable;
wire sdcore_fifo_syncfifo_re;
wire sdcore_fifo_syncfifo_readable;
wire [9:0] sdcore_fifo_syncfifo_din;
wire [9:0] sdcore_fifo_syncfifo_dout;
reg  [3:0] sdcore_fifo_level = 4'd0;
reg  sdcore_fifo_replace = 1'd0;
reg  [2:0] sdcore_fifo_produce = 3'd0;
reg  [2:0] sdcore_fifo_consume = 3'd0;
reg  [2:0] sdcore_fifo_wrport_adr = 3'd0;
wire [9:0] sdcore_fifo_wrport_dat_r;
wire sdcore_fifo_wrport_we;
wire [9:0] sdcore_fifo_wrport_dat_w;
wire sdcore_fifo_do_read;
wire [2:0] sdcore_fifo_rdport_adr;
wire [9:0] sdcore_fifo_rdport_dat_r;
wire [7:0] sdcore_fifo_fifo_in_payload_data;
wire sdcore_fifo_fifo_in_first;
wire sdcore_fifo_fifo_in_last;
wire [7:0] sdcore_fifo_fifo_out_payload_data;
wire sdcore_fifo_fifo_out_first;
wire sdcore_fifo_fifo_out_last;
wire sdcore_fifo_reset;
wire [1:0] sdcore_cmd_type;
reg  [2:0] sdcore_cmd_count = 3'd0;
reg  sdcore_cmd_done = 1'd0;
reg  sdcore_cmd_error = 1'd0;
reg  sdcore_cmd_timeout = 1'd0;
wire [1:0] sdcore_data_type;
reg  [31:0] sdcore_data_count = 32'd0;
reg  sdcore_data_done = 1'd0;
reg  sdcore_data_error = 1'd0;
reg  sdcore_data_timeout = 1'd0;
wire [5:0] sdcore_cmd;
wire [31:0] interface0_bus_adr;
wire [31:0] interface0_bus_dat_w;
wire [31:0] interface0_bus_dat_r;
wire [3:0] interface0_bus_sel;
wire interface0_bus_cyc;
wire interface0_bus_stb;
wire interface0_bus_ack;
wire interface0_bus_we;
reg  [2:0] interface0_bus_cti = 3'd0;
reg  [1:0] interface0_bus_bte = 2'd0;
wire interface0_bus_err;
wire sdblock2mem_sink_sink_valid0;
reg  sdblock2mem_sink_sink_ready0 = 1'd0;
wire sdblock2mem_sink_sink_first;
wire sdblock2mem_sink_sink_last0;
wire [7:0] sdblock2mem_sink_sink_payload_data0;
reg  sdblock2mem_irq = 1'd0;
reg  sdblock2mem_fifo_sink_valid = 1'd0;
wire sdblock2mem_fifo_sink_ready;
reg  sdblock2mem_fifo_sink_first = 1'd0;
reg  sdblock2mem_fifo_sink_last = 1'd0;
reg  [7:0] sdblock2mem_fifo_sink_payload_data = 8'd0;
wire sdblock2mem_fifo_source_valid;
wire sdblock2mem_fifo_source_ready;
wire sdblock2mem_fifo_source_first;
wire sdblock2mem_fifo_source_last;
wire [7:0] sdblock2mem_fifo_source_payload_data;
wire sdblock2mem_fifo_re;
reg  sdblock2mem_fifo_readable = 1'd0;
wire sdblock2mem_fifo_syncfifo_we;
wire sdblock2mem_fifo_syncfifo_writable;
wire sdblock2mem_fifo_syncfifo_re;
wire sdblock2mem_fifo_syncfifo_readable;
wire [9:0] sdblock2mem_fifo_syncfifo_din;
wire [9:0] sdblock2mem_fifo_syncfifo_dout;
reg  [9:0] sdblock2mem_fifo_level0 = 10'd0;
reg  sdblock2mem_fifo_replace = 1'd0;
reg  [8:0] sdblock2mem_fifo_produce = 9'd0;
reg  [8:0] sdblock2mem_fifo_consume = 9'd0;
reg  [8:0] sdblock2mem_fifo_wrport_adr = 9'd0;
wire [9:0] sdblock2mem_fifo_wrport_dat_r;
wire sdblock2mem_fifo_wrport_we;
wire [9:0] sdblock2mem_fifo_wrport_dat_w;
wire sdblock2mem_fifo_do_read;
wire [8:0] sdblock2mem_fifo_rdport_adr;
wire [9:0] sdblock2mem_fifo_rdport_dat_r;
wire sdblock2mem_fifo_rdport_re;
wire [9:0] sdblock2mem_fifo_level1;
wire [7:0] sdblock2mem_fifo_fifo_in_payload_data;
wire sdblock2mem_fifo_fifo_in_first;
wire sdblock2mem_fifo_fifo_in_last;
wire [7:0] sdblock2mem_fifo_fifo_out_payload_data;
wire sdblock2mem_fifo_fifo_out_first;
wire sdblock2mem_fifo_fifo_out_last;
wire sdblock2mem_converter_sink_valid;
wire sdblock2mem_converter_sink_ready;
wire sdblock2mem_converter_sink_first;
wire sdblock2mem_converter_sink_last;
wire [7:0] sdblock2mem_converter_sink_payload_data;
wire sdblock2mem_converter_source_valid;
wire sdblock2mem_converter_source_ready;
reg  sdblock2mem_converter_source_first = 1'd0;
reg  sdblock2mem_converter_source_last = 1'd0;
reg  [31:0] sdblock2mem_converter_source_payload_data = 32'd0;
reg  [2:0] sdblock2mem_converter_source_payload_valid_token_count = 3'd0;
reg  [1:0] sdblock2mem_converter_demux = 2'd0;
wire sdblock2mem_converter_load_part;
reg  sdblock2mem_converter_strobe_all = 1'd0;
wire sdblock2mem_source_source_valid;
wire sdblock2mem_source_source_ready;
wire sdblock2mem_source_source_first;
wire sdblock2mem_source_source_last;
wire [31:0] sdblock2mem_source_source_payload_data;
reg  sdblock2mem_sink_sink_valid1 = 1'd0;
wire sdblock2mem_sink_sink_ready1;
reg  sdblock2mem_sink_sink_last1 = 1'd0;
reg  [31:0] sdblock2mem_sink_sink_payload_address = 32'd0;
reg  [31:0] sdblock2mem_sink_sink_payload_data1 = 32'd0;
wire sdblock2mem_wishbonedmawriter_sink_valid;
reg  sdblock2mem_wishbonedmawriter_sink_ready = 1'd0;
wire sdblock2mem_wishbonedmawriter_sink_first;
wire sdblock2mem_wishbonedmawriter_sink_last;
wire [31:0] sdblock2mem_wishbonedmawriter_sink_payload_data;
reg  [63:0] sdblock2mem_wishbonedmawriter_base_storage = 64'd0;
reg  sdblock2mem_wishbonedmawriter_base_re = 1'd0;
reg  [31:0] sdblock2mem_wishbonedmawriter_length_storage = 32'd0;
reg  sdblock2mem_wishbonedmawriter_length_re = 1'd0;
reg  sdblock2mem_wishbonedmawriter_enable_storage = 1'd0;
reg  sdblock2mem_wishbonedmawriter_enable_re = 1'd0;
reg  sdblock2mem_wishbonedmawriter_done_status = 1'd0;
wire sdblock2mem_wishbonedmawriter_done_we;
reg  sdblock2mem_wishbonedmawriter_done_re = 1'd0;
reg  sdblock2mem_wishbonedmawriter_loop_storage = 1'd0;
reg  sdblock2mem_wishbonedmawriter_loop_re = 1'd0;
wire [31:0] sdblock2mem_wishbonedmawriter_offset_status;
wire sdblock2mem_wishbonedmawriter_offset_we;
reg  sdblock2mem_wishbonedmawriter_offset_re = 1'd0;
wire [31:0] sdblock2mem_wishbonedmawriter_base;
reg  [31:0] sdblock2mem_wishbonedmawriter_offset = 32'd0;
wire [31:0] sdblock2mem_wishbonedmawriter_length;
wire sdblock2mem_wishbonedmawriter_reset;
wire sdblock2mem_start;
reg  sdblock2mem_connect = 1'd0;
reg  sdblock2mem_done_d = 1'd0;
reg  [31:0] interface1_bus_adr = 32'd0;
reg  [31:0] interface1_bus_dat_w = 32'd0;
wire [31:0] interface1_bus_dat_r;
reg  [3:0] interface1_bus_sel = 4'd0;
reg  interface1_bus_cyc = 1'd0;
reg  interface1_bus_stb = 1'd0;
wire interface1_bus_ack;
reg  interface1_bus_we = 1'd0;
reg  [2:0] interface1_bus_cti = 3'd0;
reg  [1:0] interface1_bus_bte = 2'd0;
wire interface1_bus_err;
wire sdmem2block_source_source_valid0;
wire sdmem2block_source_source_ready0;
wire sdmem2block_source_source_first0;
reg  sdmem2block_source_source_last0 = 1'd0;
wire [7:0] sdmem2block_source_source_payload_data0;
reg  sdmem2block_irq = 1'd0;
reg  sdmem2block_dma_sink_valid = 1'd0;
reg  sdmem2block_dma_sink_ready = 1'd0;
reg  sdmem2block_dma_sink_last = 1'd0;
reg  [31:0] sdmem2block_dma_sink_payload_address = 32'd0;
reg  sdmem2block_dma_source_valid = 1'd0;
wire sdmem2block_dma_source_ready;
reg  sdmem2block_dma_source_first = 1'd0;
reg  sdmem2block_dma_source_last = 1'd0;
reg  [31:0] sdmem2block_dma_source_payload_data = 32'd0;
reg  [31:0] sdmem2block_dma_data = 32'd0;
reg  [63:0] sdmem2block_dma_base_storage = 64'd0;
reg  sdmem2block_dma_base_re = 1'd0;
reg  [31:0] sdmem2block_dma_length_storage = 32'd0;
reg  sdmem2block_dma_length_re = 1'd0;
reg  sdmem2block_dma_enable_storage = 1'd0;
reg  sdmem2block_dma_enable_re = 1'd0;
reg  sdmem2block_dma_done_status = 1'd0;
wire sdmem2block_dma_done_we;
reg  sdmem2block_dma_done_re = 1'd0;
reg  sdmem2block_dma_loop_storage = 1'd0;
reg  sdmem2block_dma_loop_re = 1'd0;
wire [31:0] sdmem2block_dma_offset_status;
wire sdmem2block_dma_offset_we;
reg  sdmem2block_dma_offset_re = 1'd0;
wire [31:0] sdmem2block_dma_base;
reg  [31:0] sdmem2block_dma_offset = 32'd0;
wire [31:0] sdmem2block_dma_length;
wire sdmem2block_dma_reset;
wire sdmem2block_converter_sink_valid;
wire sdmem2block_converter_sink_ready;
wire sdmem2block_converter_sink_first;
wire sdmem2block_converter_sink_last;
wire [31:0] sdmem2block_converter_sink_payload_data;
wire sdmem2block_converter_source_valid;
wire sdmem2block_converter_source_ready;
wire sdmem2block_converter_source_first;
wire sdmem2block_converter_source_last;
reg  [7:0] sdmem2block_converter_source_payload_data = 8'd0;
wire sdmem2block_converter_source_payload_valid_token_count;
reg  [1:0] sdmem2block_converter_mux = 2'd0;
wire sdmem2block_converter_first;
wire sdmem2block_converter_last;
wire sdmem2block_source_source_valid1;
wire sdmem2block_source_source_ready1;
wire sdmem2block_source_source_first1;
wire sdmem2block_source_source_last1;
wire [7:0] sdmem2block_source_source_payload_data1;
wire sdmem2block_fifo_sink_valid;
wire sdmem2block_fifo_sink_ready;
wire sdmem2block_fifo_sink_first;
wire sdmem2block_fifo_sink_last;
wire [7:0] sdmem2block_fifo_sink_payload_data;
wire sdmem2block_fifo_source_valid;
wire sdmem2block_fifo_source_ready;
wire sdmem2block_fifo_source_first;
wire sdmem2block_fifo_source_last;
wire [7:0] sdmem2block_fifo_source_payload_data;
wire sdmem2block_fifo_re;
reg  sdmem2block_fifo_readable = 1'd0;
wire sdmem2block_fifo_syncfifo_we;
wire sdmem2block_fifo_syncfifo_writable;
wire sdmem2block_fifo_syncfifo_re;
wire sdmem2block_fifo_syncfifo_readable;
wire [9:0] sdmem2block_fifo_syncfifo_din;
wire [9:0] sdmem2block_fifo_syncfifo_dout;
reg  [9:0] sdmem2block_fifo_level0 = 10'd0;
reg  sdmem2block_fifo_replace = 1'd0;
reg  [8:0] sdmem2block_fifo_produce = 9'd0;
reg  [8:0] sdmem2block_fifo_consume = 9'd0;
reg  [8:0] sdmem2block_fifo_wrport_adr = 9'd0;
wire [9:0] sdmem2block_fifo_wrport_dat_r;
wire sdmem2block_fifo_wrport_we;
wire [9:0] sdmem2block_fifo_wrport_dat_w;
wire sdmem2block_fifo_do_read;
wire [8:0] sdmem2block_fifo_rdport_adr;
wire [9:0] sdmem2block_fifo_rdport_dat_r;
wire sdmem2block_fifo_rdport_re;
wire [9:0] sdmem2block_fifo_level1;
wire [7:0] sdmem2block_fifo_fifo_in_payload_data;
wire sdmem2block_fifo_fifo_in_first;
wire sdmem2block_fifo_fifo_in_last;
wire [7:0] sdmem2block_fifo_fifo_out_payload_data;
wire sdmem2block_fifo_fifo_out_first;
wire sdmem2block_fifo_fifo_out_last;
reg  [8:0] sdmem2block_count = 9'd0;
reg  sdmem2block_done_d = 1'd0;
wire sdirq_irq;
wire card_detect_status1;
reg  card_detect_pending = 1'd0;
wire card_detect_trigger;
reg  card_detect_clear = 1'd0;
wire block2mem_dma_status;
reg  block2mem_dma_pending = 1'd0;
wire block2mem_dma_trigger;
reg  block2mem_dma_clear = 1'd0;
wire mem2block_dma_status;
reg  mem2block_dma_pending = 1'd0;
wire mem2block_dma_trigger;
reg  mem2block_dma_clear = 1'd0;
wire cmd_done_status;
wire cmd_done_pending;
wire cmd_done_trigger;
reg  cmd_done_clear = 1'd0;
wire eventmanager_card_detect0;
wire eventmanager_block2mem_dma0;
wire eventmanager_mem2block_dma0;
wire eventmanager_cmd_done0;
reg  [3:0] eventmanager_status_status = 4'd0;
wire eventmanager_status_we;
reg  eventmanager_status_re = 1'd0;
wire eventmanager_card_detect1;
wire eventmanager_block2mem_dma1;
wire eventmanager_mem2block_dma1;
wire eventmanager_cmd_done1;
reg  [3:0] eventmanager_pending_status = 4'd0;
wire eventmanager_pending_we;
reg  eventmanager_pending_re = 1'd0;
reg  [3:0] eventmanager_pending_r = 4'd0;
wire eventmanager_card_detect2;
wire eventmanager_block2mem_dma2;
wire eventmanager_mem2block_dma2;
wire eventmanager_cmd_done2;
reg  [3:0] eventmanager_enable_storage = 4'd0;
reg  eventmanager_enable_re = 1'd0;
reg  subfragments_sdphyinit_state = 1'd0;
reg  subfragments_sdphyinit_next_state = 1'd0;
reg  [7:0] init_count_sdphyinit_next_value = 8'd0;
reg  init_count_sdphyinit_next_value_ce = 1'd0;
reg  [1:0] subfragments_sdphycmdw_state = 2'd0;
reg  [1:0] subfragments_sdphycmdw_next_state = 2'd0;
reg  [7:0] cmdw_count_sdphycmdw_next_value = 8'd0;
reg  cmdw_count_sdphycmdw_next_value_ce = 1'd0;
reg  [2:0] subfragments_sdphycmdr_state = 3'd0;
reg  [2:0] subfragments_sdphycmdr_next_state = 3'd0;
reg  [31:0] cmdr_timeout_sdphycmdr_next_value0 = 32'd0;
reg  cmdr_timeout_sdphycmdr_next_value_ce0 = 1'd0;
reg  [7:0] cmdr_count_sdphycmdr_next_value1 = 8'd0;
reg  cmdr_count_sdphycmdr_next_value_ce1 = 1'd0;
reg  cmdr_busy_sdphycmdr_next_value2 = 1'd0;
reg  cmdr_busy_sdphycmdr_next_value_ce2 = 1'd0;
reg  cmdr_cmdr_reset_sdphycmdr_next_value3 = 1'd0;
reg  cmdr_cmdr_reset_sdphycmdr_next_value_ce3 = 1'd0;
reg  [2:0] subfragments_sdphydataw_state = 3'd0;
reg  [2:0] subfragments_sdphydataw_next_state = 3'd0;
reg  dataw_accepted1_sdphydataw_next_value0 = 1'd0;
reg  dataw_accepted1_sdphydataw_next_value_ce0 = 1'd0;
reg  dataw_crc_error1_sdphydataw_next_value1 = 1'd0;
reg  dataw_crc_error1_sdphydataw_next_value_ce1 = 1'd0;
reg  dataw_write_error1_sdphydataw_next_value2 = 1'd0;
reg  dataw_write_error1_sdphydataw_next_value_ce2 = 1'd0;
reg  [7:0] dataw_count_sdphydataw_next_value3 = 8'd0;
reg  dataw_count_sdphydataw_next_value_ce3 = 1'd0;
reg  [2:0] subfragments_sdphydatar_state = 3'd0;
reg  [2:0] subfragments_sdphydatar_next_state = 3'd0;
reg  [9:0] datar_count_sdphydatar_next_value0 = 10'd0;
reg  datar_count_sdphydatar_next_value_ce0 = 1'd0;
reg  [31:0] datar_timeout_sdphydatar_next_value1 = 32'd0;
reg  datar_timeout_sdphydatar_next_value_ce1 = 1'd0;
reg  datar_datar_reset_sdphydatar_next_value2 = 1'd0;
reg  datar_datar_reset_sdphydatar_next_value_ce2 = 1'd0;
reg  subfragments_sdcore_crc16inserter_state = 1'd0;
reg  subfragments_sdcore_crc16inserter_next_state = 1'd0;
reg  [2:0] sdcore_crc16_inserter_count_sdcore_crc16inserter_next_value = 3'd0;
reg  sdcore_crc16_inserter_count_sdcore_crc16inserter_next_value_ce = 1'd0;
reg  [2:0] subfragments_sdcore_fsm_state = 3'd0;
reg  [2:0] subfragments_sdcore_fsm_next_state = 3'd0;
reg  sdcore_cmd_done_sdcore_fsm_next_value0 = 1'd0;
reg  sdcore_cmd_done_sdcore_fsm_next_value_ce0 = 1'd0;
reg  sdcore_data_done_sdcore_fsm_next_value1 = 1'd0;
reg  sdcore_data_done_sdcore_fsm_next_value_ce1 = 1'd0;
reg  [2:0] sdcore_cmd_count_sdcore_fsm_next_value2 = 3'd0;
reg  sdcore_cmd_count_sdcore_fsm_next_value_ce2 = 1'd0;
reg  [31:0] sdcore_data_count_sdcore_fsm_next_value3 = 32'd0;
reg  sdcore_data_count_sdcore_fsm_next_value_ce3 = 1'd0;
reg  sdcore_cmd_error_sdcore_fsm_next_value4 = 1'd0;
reg  sdcore_cmd_error_sdcore_fsm_next_value_ce4 = 1'd0;
reg  sdcore_cmd_timeout_sdcore_fsm_next_value5 = 1'd0;
reg  sdcore_cmd_timeout_sdcore_fsm_next_value_ce5 = 1'd0;
reg  sdcore_data_error_sdcore_fsm_next_value6 = 1'd0;
reg  sdcore_data_error_sdcore_fsm_next_value_ce6 = 1'd0;
reg  sdcore_data_timeout_sdcore_fsm_next_value7 = 1'd0;
reg  sdcore_data_timeout_sdcore_fsm_next_value_ce7 = 1'd0;
reg  [127:0] sdcore_cmd_response_status_sdcore_fsm_next_value8 = 128'd0;
reg  sdcore_cmd_response_status_sdcore_fsm_next_value_ce8 = 1'd0;
reg  [1:0] subfragments_state = 2'd0;
reg  [1:0] subfragments_next_state = 2'd0;
reg  [31:0] sdblock2mem_wishbonedmawriter_offset_next_value = 32'd0;
reg  sdblock2mem_wishbonedmawriter_offset_next_value_ce = 1'd0;
reg  subfragments_sdmem2blockdma_fsm_state = 1'd0;
reg  subfragments_sdmem2blockdma_fsm_next_state = 1'd0;
reg  [31:0] sdmem2block_dma_data_sdmem2blockdma_fsm_next_value = 32'd0;
reg  sdmem2block_dma_data_sdmem2blockdma_fsm_next_value_ce = 1'd0;
reg  [1:0] subfragments_sdmem2blockdma_resetinserter_state = 2'd0;
reg  [1:0] subfragments_sdmem2blockdma_resetinserter_next_state = 2'd0;
reg  [31:0] sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value = 32'd0;
reg  sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value_ce = 1'd0;
reg  [13:0] simsoc_simsoc_adr = 14'd0;
reg  simsoc_simsoc_we = 1'd0;
reg  [31:0] simsoc_simsoc_dat_w = 32'd0;
wire [31:0] simsoc_simsoc_dat_r;
wire [29:0] simsoc_simsoc_wishbone_adr;
wire [31:0] simsoc_simsoc_wishbone_dat_w;
reg  [31:0] simsoc_simsoc_wishbone_dat_r = 32'd0;
wire [3:0] simsoc_simsoc_wishbone_sel;
wire simsoc_simsoc_wishbone_cyc;
wire simsoc_simsoc_wishbone_stb;
reg  simsoc_simsoc_wishbone_ack = 1'd0;
wire simsoc_simsoc_wishbone_we;
wire [2:0] simsoc_simsoc_wishbone_cti;
wire [1:0] simsoc_simsoc_wishbone_bte;
reg  simsoc_simsoc_wishbone_err = 1'd0;
wire [29:0] simsoc_shared_adr;
wire [31:0] simsoc_shared_dat_w;
reg  [31:0] simsoc_shared_dat_r = 32'd0;
wire [3:0] simsoc_shared_sel;
wire simsoc_shared_cyc;
wire simsoc_shared_stb;
reg  simsoc_shared_ack = 1'd0;
wire simsoc_shared_we;
wire [2:0] simsoc_shared_cti;
wire [1:0] simsoc_shared_bte;
wire simsoc_shared_err;
wire [2:0] simsoc_request;
reg  [1:0] simsoc_grant = 2'd0;
reg  [3:0] simsoc_slave_sel = 4'd0;
reg  [3:0] simsoc_slave_sel_r = 4'd0;
reg  simsoc_error = 1'd0;
wire simsoc_wait;
wire simsoc_done;
reg  [19:0] simsoc_count = 20'd1000000;
wire [13:0] simsoc_csr_bankarray_interface0_bank_bus_adr;
wire simsoc_csr_bankarray_interface0_bank_bus_we;
wire [31:0] simsoc_csr_bankarray_interface0_bank_bus_dat_w;
reg  [31:0] simsoc_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
reg  simsoc_csr_bankarray_csrbank0_reset0_re = 1'd0;
wire [1:0] simsoc_csr_bankarray_csrbank0_reset0_r;
reg  simsoc_csr_bankarray_csrbank0_reset0_we = 1'd0;
wire [1:0] simsoc_csr_bankarray_csrbank0_reset0_w;
reg  simsoc_csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank0_scratch0_r;
reg  simsoc_csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank0_scratch0_w;
reg  simsoc_csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank0_bus_errors_r;
reg  simsoc_csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank0_bus_errors_w;
wire simsoc_csr_bankarray_csrbank0_sel;
wire [13:0] simsoc_csr_bankarray_sram_bus_adr;
wire simsoc_csr_bankarray_sram_bus_we;
wire [31:0] simsoc_csr_bankarray_sram_bus_dat_w;
reg  [31:0] simsoc_csr_bankarray_sram_bus_dat_r = 32'd0;
wire [5:0] simsoc_csr_bankarray_adr;
wire [7:0] simsoc_csr_bankarray_dat_r;
wire simsoc_csr_bankarray_sel;
reg  simsoc_csr_bankarray_sel_r = 1'd0;
wire [13:0] simsoc_csr_bankarray_interface1_bank_bus_adr;
wire simsoc_csr_bankarray_interface1_bank_bus_we;
wire [31:0] simsoc_csr_bankarray_interface1_bank_bus_dat_w;
reg  [31:0] simsoc_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
reg  simsoc_csr_bankarray_csrbank1_dma_base1_re = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank1_dma_base1_r;
reg  simsoc_csr_bankarray_csrbank1_dma_base1_we = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank1_dma_base1_w;
reg  simsoc_csr_bankarray_csrbank1_dma_base0_re = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank1_dma_base0_r;
reg  simsoc_csr_bankarray_csrbank1_dma_base0_we = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank1_dma_base0_w;
reg  simsoc_csr_bankarray_csrbank1_dma_length0_re = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank1_dma_length0_r;
reg  simsoc_csr_bankarray_csrbank1_dma_length0_we = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank1_dma_length0_w;
reg  simsoc_csr_bankarray_csrbank1_dma_enable0_re = 1'd0;
wire simsoc_csr_bankarray_csrbank1_dma_enable0_r;
reg  simsoc_csr_bankarray_csrbank1_dma_enable0_we = 1'd0;
wire simsoc_csr_bankarray_csrbank1_dma_enable0_w;
reg  simsoc_csr_bankarray_csrbank1_dma_done_re = 1'd0;
wire simsoc_csr_bankarray_csrbank1_dma_done_r;
reg  simsoc_csr_bankarray_csrbank1_dma_done_we = 1'd0;
wire simsoc_csr_bankarray_csrbank1_dma_done_w;
reg  simsoc_csr_bankarray_csrbank1_dma_loop0_re = 1'd0;
wire simsoc_csr_bankarray_csrbank1_dma_loop0_r;
reg  simsoc_csr_bankarray_csrbank1_dma_loop0_we = 1'd0;
wire simsoc_csr_bankarray_csrbank1_dma_loop0_w;
reg  simsoc_csr_bankarray_csrbank1_dma_offset_re = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank1_dma_offset_r;
reg  simsoc_csr_bankarray_csrbank1_dma_offset_we = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank1_dma_offset_w;
wire simsoc_csr_bankarray_csrbank1_sel;
wire [13:0] simsoc_csr_bankarray_interface2_bank_bus_adr;
wire simsoc_csr_bankarray_interface2_bank_bus_we;
wire [31:0] simsoc_csr_bankarray_interface2_bank_bus_dat_w;
reg  [31:0] simsoc_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
reg  simsoc_csr_bankarray_csrbank2_cmd_argument0_re = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank2_cmd_argument0_r;
reg  simsoc_csr_bankarray_csrbank2_cmd_argument0_we = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank2_cmd_argument0_w;
reg  simsoc_csr_bankarray_csrbank2_cmd_command0_re = 1'd0;
wire [13:0] simsoc_csr_bankarray_csrbank2_cmd_command0_r;
reg  simsoc_csr_bankarray_csrbank2_cmd_command0_we = 1'd0;
wire [13:0] simsoc_csr_bankarray_csrbank2_cmd_command0_w;
reg  simsoc_csr_bankarray_csrbank2_cmd_send0_re = 1'd0;
wire simsoc_csr_bankarray_csrbank2_cmd_send0_r;
reg  simsoc_csr_bankarray_csrbank2_cmd_send0_we = 1'd0;
wire simsoc_csr_bankarray_csrbank2_cmd_send0_w;
reg  simsoc_csr_bankarray_csrbank2_cmd_response3_re = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank2_cmd_response3_r;
reg  simsoc_csr_bankarray_csrbank2_cmd_response3_we = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank2_cmd_response3_w;
reg  simsoc_csr_bankarray_csrbank2_cmd_response2_re = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank2_cmd_response2_r;
reg  simsoc_csr_bankarray_csrbank2_cmd_response2_we = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank2_cmd_response2_w;
reg  simsoc_csr_bankarray_csrbank2_cmd_response1_re = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank2_cmd_response1_r;
reg  simsoc_csr_bankarray_csrbank2_cmd_response1_we = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank2_cmd_response1_w;
reg  simsoc_csr_bankarray_csrbank2_cmd_response0_re = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank2_cmd_response0_r;
reg  simsoc_csr_bankarray_csrbank2_cmd_response0_we = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank2_cmd_response0_w;
reg  simsoc_csr_bankarray_csrbank2_cmd_event_re = 1'd0;
wire [3:0] simsoc_csr_bankarray_csrbank2_cmd_event_r;
reg  simsoc_csr_bankarray_csrbank2_cmd_event_we = 1'd0;
wire [3:0] simsoc_csr_bankarray_csrbank2_cmd_event_w;
reg  simsoc_csr_bankarray_csrbank2_data_event_re = 1'd0;
wire [3:0] simsoc_csr_bankarray_csrbank2_data_event_r;
reg  simsoc_csr_bankarray_csrbank2_data_event_we = 1'd0;
wire [3:0] simsoc_csr_bankarray_csrbank2_data_event_w;
reg  simsoc_csr_bankarray_csrbank2_block_length0_re = 1'd0;
wire [9:0] simsoc_csr_bankarray_csrbank2_block_length0_r;
reg  simsoc_csr_bankarray_csrbank2_block_length0_we = 1'd0;
wire [9:0] simsoc_csr_bankarray_csrbank2_block_length0_w;
reg  simsoc_csr_bankarray_csrbank2_block_count0_re = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank2_block_count0_r;
reg  simsoc_csr_bankarray_csrbank2_block_count0_we = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank2_block_count0_w;
wire simsoc_csr_bankarray_csrbank2_sel;
wire [13:0] simsoc_csr_bankarray_interface3_bank_bus_adr;
wire simsoc_csr_bankarray_interface3_bank_bus_we;
wire [31:0] simsoc_csr_bankarray_interface3_bank_bus_dat_w;
reg  [31:0] simsoc_csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
reg  simsoc_csr_bankarray_csrbank3_status_re = 1'd0;
wire [3:0] simsoc_csr_bankarray_csrbank3_status_r;
reg  simsoc_csr_bankarray_csrbank3_status_we = 1'd0;
wire [3:0] simsoc_csr_bankarray_csrbank3_status_w;
reg  simsoc_csr_bankarray_csrbank3_pending_re = 1'd0;
wire [3:0] simsoc_csr_bankarray_csrbank3_pending_r;
reg  simsoc_csr_bankarray_csrbank3_pending_we = 1'd0;
wire [3:0] simsoc_csr_bankarray_csrbank3_pending_w;
reg  simsoc_csr_bankarray_csrbank3_enable0_re = 1'd0;
wire [3:0] simsoc_csr_bankarray_csrbank3_enable0_r;
reg  simsoc_csr_bankarray_csrbank3_enable0_we = 1'd0;
wire [3:0] simsoc_csr_bankarray_csrbank3_enable0_w;
wire simsoc_csr_bankarray_csrbank3_sel;
wire [13:0] simsoc_csr_bankarray_interface4_bank_bus_adr;
wire simsoc_csr_bankarray_interface4_bank_bus_we;
wire [31:0] simsoc_csr_bankarray_interface4_bank_bus_dat_w;
reg  [31:0] simsoc_csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
reg  simsoc_csr_bankarray_csrbank4_dma_base1_re = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank4_dma_base1_r;
reg  simsoc_csr_bankarray_csrbank4_dma_base1_we = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank4_dma_base1_w;
reg  simsoc_csr_bankarray_csrbank4_dma_base0_re = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank4_dma_base0_r;
reg  simsoc_csr_bankarray_csrbank4_dma_base0_we = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank4_dma_base0_w;
reg  simsoc_csr_bankarray_csrbank4_dma_length0_re = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank4_dma_length0_r;
reg  simsoc_csr_bankarray_csrbank4_dma_length0_we = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank4_dma_length0_w;
reg  simsoc_csr_bankarray_csrbank4_dma_enable0_re = 1'd0;
wire simsoc_csr_bankarray_csrbank4_dma_enable0_r;
reg  simsoc_csr_bankarray_csrbank4_dma_enable0_we = 1'd0;
wire simsoc_csr_bankarray_csrbank4_dma_enable0_w;
reg  simsoc_csr_bankarray_csrbank4_dma_done_re = 1'd0;
wire simsoc_csr_bankarray_csrbank4_dma_done_r;
reg  simsoc_csr_bankarray_csrbank4_dma_done_we = 1'd0;
wire simsoc_csr_bankarray_csrbank4_dma_done_w;
reg  simsoc_csr_bankarray_csrbank4_dma_loop0_re = 1'd0;
wire simsoc_csr_bankarray_csrbank4_dma_loop0_r;
reg  simsoc_csr_bankarray_csrbank4_dma_loop0_we = 1'd0;
wire simsoc_csr_bankarray_csrbank4_dma_loop0_w;
reg  simsoc_csr_bankarray_csrbank4_dma_offset_re = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank4_dma_offset_r;
reg  simsoc_csr_bankarray_csrbank4_dma_offset_we = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank4_dma_offset_w;
wire simsoc_csr_bankarray_csrbank4_sel;
wire [13:0] simsoc_csr_bankarray_interface5_bank_bus_adr;
wire simsoc_csr_bankarray_interface5_bank_bus_we;
wire [31:0] simsoc_csr_bankarray_interface5_bank_bus_dat_w;
reg  [31:0] simsoc_csr_bankarray_interface5_bank_bus_dat_r = 32'd0;
reg  simsoc_csr_bankarray_csrbank5_card_detect_re = 1'd0;
wire simsoc_csr_bankarray_csrbank5_card_detect_r;
reg  simsoc_csr_bankarray_csrbank5_card_detect_we = 1'd0;
wire simsoc_csr_bankarray_csrbank5_card_detect_w;
reg  simsoc_csr_bankarray_csrbank5_clocker_divider0_re = 1'd0;
wire [8:0] simsoc_csr_bankarray_csrbank5_clocker_divider0_r;
reg  simsoc_csr_bankarray_csrbank5_clocker_divider0_we = 1'd0;
wire [8:0] simsoc_csr_bankarray_csrbank5_clocker_divider0_w;
reg  simsoc_csr_bankarray_csrbank5_dataw_status_re = 1'd0;
wire [2:0] simsoc_csr_bankarray_csrbank5_dataw_status_r;
reg  simsoc_csr_bankarray_csrbank5_dataw_status_we = 1'd0;
wire [2:0] simsoc_csr_bankarray_csrbank5_dataw_status_w;
wire simsoc_csr_bankarray_csrbank5_sel;
wire [13:0] simsoc_csr_bankarray_interface6_bank_bus_adr;
wire simsoc_csr_bankarray_interface6_bank_bus_we;
wire [31:0] simsoc_csr_bankarray_interface6_bank_bus_dat_w;
reg  [31:0] simsoc_csr_bankarray_interface6_bank_bus_dat_r = 32'd0;
reg  simsoc_csr_bankarray_csrbank6_load0_re = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank6_load0_r;
reg  simsoc_csr_bankarray_csrbank6_load0_we = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank6_load0_w;
reg  simsoc_csr_bankarray_csrbank6_reload0_re = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank6_reload0_r;
reg  simsoc_csr_bankarray_csrbank6_reload0_we = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank6_reload0_w;
reg  simsoc_csr_bankarray_csrbank6_en0_re = 1'd0;
wire simsoc_csr_bankarray_csrbank6_en0_r;
reg  simsoc_csr_bankarray_csrbank6_en0_we = 1'd0;
wire simsoc_csr_bankarray_csrbank6_en0_w;
reg  simsoc_csr_bankarray_csrbank6_update_value0_re = 1'd0;
wire simsoc_csr_bankarray_csrbank6_update_value0_r;
reg  simsoc_csr_bankarray_csrbank6_update_value0_we = 1'd0;
wire simsoc_csr_bankarray_csrbank6_update_value0_w;
reg  simsoc_csr_bankarray_csrbank6_value_re = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank6_value_r;
reg  simsoc_csr_bankarray_csrbank6_value_we = 1'd0;
wire [31:0] simsoc_csr_bankarray_csrbank6_value_w;
reg  simsoc_csr_bankarray_csrbank6_ev_status_re = 1'd0;
wire simsoc_csr_bankarray_csrbank6_ev_status_r;
reg  simsoc_csr_bankarray_csrbank6_ev_status_we = 1'd0;
wire simsoc_csr_bankarray_csrbank6_ev_status_w;
reg  simsoc_csr_bankarray_csrbank6_ev_pending_re = 1'd0;
wire simsoc_csr_bankarray_csrbank6_ev_pending_r;
reg  simsoc_csr_bankarray_csrbank6_ev_pending_we = 1'd0;
wire simsoc_csr_bankarray_csrbank6_ev_pending_w;
reg  simsoc_csr_bankarray_csrbank6_ev_enable0_re = 1'd0;
wire simsoc_csr_bankarray_csrbank6_ev_enable0_r;
reg  simsoc_csr_bankarray_csrbank6_ev_enable0_we = 1'd0;
wire simsoc_csr_bankarray_csrbank6_ev_enable0_w;
wire simsoc_csr_bankarray_csrbank6_sel;
wire [13:0] simsoc_csr_bankarray_interface7_bank_bus_adr;
wire simsoc_csr_bankarray_interface7_bank_bus_we;
wire [31:0] simsoc_csr_bankarray_interface7_bank_bus_dat_w;
reg  [31:0] simsoc_csr_bankarray_interface7_bank_bus_dat_r = 32'd0;
reg  simsoc_csr_bankarray_csrbank7_txfull_re = 1'd0;
wire simsoc_csr_bankarray_csrbank7_txfull_r;
reg  simsoc_csr_bankarray_csrbank7_txfull_we = 1'd0;
wire simsoc_csr_bankarray_csrbank7_txfull_w;
reg  simsoc_csr_bankarray_csrbank7_rxempty_re = 1'd0;
wire simsoc_csr_bankarray_csrbank7_rxempty_r;
reg  simsoc_csr_bankarray_csrbank7_rxempty_we = 1'd0;
wire simsoc_csr_bankarray_csrbank7_rxempty_w;
reg  simsoc_csr_bankarray_csrbank7_ev_status_re = 1'd0;
wire [1:0] simsoc_csr_bankarray_csrbank7_ev_status_r;
reg  simsoc_csr_bankarray_csrbank7_ev_status_we = 1'd0;
wire [1:0] simsoc_csr_bankarray_csrbank7_ev_status_w;
reg  simsoc_csr_bankarray_csrbank7_ev_pending_re = 1'd0;
wire [1:0] simsoc_csr_bankarray_csrbank7_ev_pending_r;
reg  simsoc_csr_bankarray_csrbank7_ev_pending_we = 1'd0;
wire [1:0] simsoc_csr_bankarray_csrbank7_ev_pending_w;
reg  simsoc_csr_bankarray_csrbank7_ev_enable0_re = 1'd0;
wire [1:0] simsoc_csr_bankarray_csrbank7_ev_enable0_r;
reg  simsoc_csr_bankarray_csrbank7_ev_enable0_we = 1'd0;
wire [1:0] simsoc_csr_bankarray_csrbank7_ev_enable0_w;
reg  simsoc_csr_bankarray_csrbank7_txempty_re = 1'd0;
wire simsoc_csr_bankarray_csrbank7_txempty_r;
reg  simsoc_csr_bankarray_csrbank7_txempty_we = 1'd0;
wire simsoc_csr_bankarray_csrbank7_txempty_w;
reg  simsoc_csr_bankarray_csrbank7_rxfull_re = 1'd0;
wire simsoc_csr_bankarray_csrbank7_rxfull_r;
reg  simsoc_csr_bankarray_csrbank7_rxfull_we = 1'd0;
wire simsoc_csr_bankarray_csrbank7_rxfull_w;
wire simsoc_csr_bankarray_csrbank7_sel;
wire [13:0] simsoc_csr_interconnect_adr;
wire simsoc_csr_interconnect_we;
wire [31:0] simsoc_csr_interconnect_dat_w;
wire [31:0] simsoc_csr_interconnect_dat_r;
reg  simsoc_state = 1'd0;
reg  simsoc_next_state = 1'd0;
reg  [31:0] array_muxed0 = 32'd0;
reg  [31:0] array_muxed1 = 32'd0;
reg  [3:0] array_muxed2 = 4'd0;
reg  array_muxed3 = 1'd0;
reg  array_muxed4 = 1'd0;
reg  array_muxed5 = 1'd0;
reg  [2:0] array_muxed6 = 3'd0;
reg  [1:0] array_muxed7 = 2'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign picorv32_reset = (soc_rst | cpu_rst);
assign sdblock2mem_sink_sink_valid0 = sdcore_source_source_valid0;
assign sdcore_source_source_ready0 = sdblock2mem_sink_sink_ready0;
assign sdblock2mem_sink_sink_first = sdcore_source_source_first0;
assign sdblock2mem_sink_sink_last0 = sdcore_source_source_last0;
assign sdblock2mem_sink_sink_payload_data0 = sdcore_source_source_payload_data0;
assign sdcore_sink_sink_valid0 = sdmem2block_source_source_valid0;
assign sdmem2block_source_source_ready0 = sdcore_sink_sink_ready0;
assign sdcore_sink_sink_first0 = sdmem2block_source_source_first0;
assign sdcore_sink_sink_last0 = sdmem2block_source_source_last0;
assign sdcore_sink_sink_payload_data0 = sdmem2block_source_source_payload_data0;
assign block2mem_dma_trigger = sdblock2mem_irq;
assign mem2block_dma_trigger = sdmem2block_irq;
assign card_detect_trigger = card_detect_irq;
assign cmd_done_trigger = sdcore_csrfield_done0;
assign sim_trace = 1'd1;
assign bus_error = simsoc_error;
always @(*) begin
	picorv32_interrupt <= 32'd0;
	picorv32_interrupt[2] <= sdirq_irq;
	picorv32_interrupt[1] <= timer_irq;
	picorv32_interrupt[0] <= uart_irq;
end
assign bus_errors_status = bus_errors;
assign picorv32_idbus_adr = picorv32_mem_addr[31:2];
assign picorv32_idbus_dat_w = picorv32_mem_wdata;
assign picorv32_idbus_we = (picorv32_mem_wstrb != 1'd0);
assign picorv32_idbus_sel = picorv32_mem_wstrb;
assign picorv32_idbus_cyc = picorv32_mem_valid;
assign picorv32_idbus_stb = picorv32_mem_valid;
assign picorv32_idbus_cti = 1'd0;
assign picorv32_idbus_bte = 1'd0;
assign picorv32_mem_ready = picorv32_idbus_ack;
assign picorv32_mem_rdata = picorv32_idbus_dat_r;
assign adr = ram_bus_adr[13:0];
assign ram_bus_dat_r = dat_r;
always @(*) begin
	sram0_we <= 4'd0;
	sram0_we[0] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[0]);
	sram0_we[1] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[1]);
	sram0_we[2] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[2]);
	sram0_we[3] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[3]);
end
assign sram0_adr = interface0_ram_bus_adr[10:0];
assign interface0_ram_bus_dat_r = sram0_dat_r;
assign sram0_dat_w = interface0_ram_bus_dat_w;
always @(*) begin
	sram1_we <= 4'd0;
	sram1_we[0] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[0]);
	sram1_we[1] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[1]);
	sram1_we[2] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[2]);
	sram1_we[3] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[3]);
end
assign sram1_adr = interface1_ram_bus_adr[0];
assign interface1_ram_bus_dat_r = sram1_dat_r;
assign sram1_dat_w = interface1_ram_bus_dat_w;
assign serial_source_valid = sink_valid;
assign serial_source_data = sink_payload_data;
assign sink_ready = serial_source_ready;
assign source_valid = serial_sink_valid;
assign source_payload_data = serial_sink_data;
assign serial_sink_ready = source_ready;
assign uart_uart_sink_valid = source_valid;
assign source_ready = uart_uart_sink_ready;
assign uart_uart_sink_first = source_first;
assign uart_uart_sink_last = source_last;
assign uart_uart_sink_payload_data = source_payload_data;
assign sink_valid = uart_uart_source_valid;
assign uart_uart_source_ready = sink_ready;
assign sink_first = uart_uart_source_first;
assign sink_last = uart_uart_source_last;
assign sink_payload_data = uart_uart_source_payload_data;
assign uart_tx_fifo_sink_valid = uart_rxtx_re;
assign uart_tx_fifo_sink_payload_data = uart_rxtx_r;
assign uart_uart_source_valid = uart_tx_fifo_source_valid;
assign uart_tx_fifo_source_ready = uart_uart_source_ready;
assign uart_uart_source_first = uart_tx_fifo_source_first;
assign uart_uart_source_last = uart_tx_fifo_source_last;
assign uart_uart_source_payload_data = uart_tx_fifo_source_payload_data;
assign uart_txfull_status = (~uart_tx_fifo_sink_ready);
assign uart_txempty_status = (~uart_tx_fifo_source_valid);
assign uart_tx_trigger = uart_tx_fifo_sink_ready;
assign uart_rx_fifo_sink_valid = uart_uart_sink_valid;
assign uart_uart_sink_ready = uart_rx_fifo_sink_ready;
assign uart_rx_fifo_sink_first = uart_uart_sink_first;
assign uart_rx_fifo_sink_last = uart_uart_sink_last;
assign uart_rx_fifo_sink_payload_data = uart_uart_sink_payload_data;
assign uart_rxtx_w = uart_rx_fifo_source_payload_data;
assign uart_rx_fifo_source_ready = (uart_rx_clear | (1'd0 & uart_rxtx_we));
assign uart_rxempty_status = (~uart_rx_fifo_source_valid);
assign uart_rxfull_status = (~uart_rx_fifo_sink_ready);
assign uart_rx_trigger = uart_rx_fifo_source_valid;
assign uart_tx0 = uart_tx_status;
assign uart_tx1 = uart_tx_pending;
always @(*) begin
	uart_tx_clear <= 1'd0;
	if ((uart_pending_re & uart_pending_r[0])) begin
		uart_tx_clear <= 1'd1;
	end
end
assign uart_rx0 = uart_rx_status;
assign uart_rx1 = uart_rx_pending;
always @(*) begin
	uart_rx_clear <= 1'd0;
	if ((uart_pending_re & uart_pending_r[1])) begin
		uart_rx_clear <= 1'd1;
	end
end
assign uart_irq = ((uart_pending_status[0] & uart_enable_storage[0]) | (uart_pending_status[1] & uart_enable_storage[1]));
assign uart_tx_status = uart_tx_trigger;
assign uart_rx_status = uart_rx_trigger;
assign uart_tx_fifo_syncfifo_din = {uart_tx_fifo_fifo_in_last, uart_tx_fifo_fifo_in_first, uart_tx_fifo_fifo_in_payload_data};
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign uart_tx_fifo_sink_ready = uart_tx_fifo_syncfifo_writable;
assign uart_tx_fifo_syncfifo_we = uart_tx_fifo_sink_valid;
assign uart_tx_fifo_fifo_in_first = uart_tx_fifo_sink_first;
assign uart_tx_fifo_fifo_in_last = uart_tx_fifo_sink_last;
assign uart_tx_fifo_fifo_in_payload_data = uart_tx_fifo_sink_payload_data;
assign uart_tx_fifo_source_valid = uart_tx_fifo_readable;
assign uart_tx_fifo_source_first = uart_tx_fifo_fifo_out_first;
assign uart_tx_fifo_source_last = uart_tx_fifo_fifo_out_last;
assign uart_tx_fifo_source_payload_data = uart_tx_fifo_fifo_out_payload_data;
assign uart_tx_fifo_re = uart_tx_fifo_source_ready;
assign uart_tx_fifo_syncfifo_re = (uart_tx_fifo_syncfifo_readable & ((~uart_tx_fifo_readable) | uart_tx_fifo_re));
assign uart_tx_fifo_level1 = (uart_tx_fifo_level0 + uart_tx_fifo_readable);
always @(*) begin
	uart_tx_fifo_wrport_adr <= 4'd0;
	if (uart_tx_fifo_replace) begin
		uart_tx_fifo_wrport_adr <= (uart_tx_fifo_produce - 1'd1);
	end else begin
		uart_tx_fifo_wrport_adr <= uart_tx_fifo_produce;
	end
end
assign uart_tx_fifo_wrport_dat_w = uart_tx_fifo_syncfifo_din;
assign uart_tx_fifo_wrport_we = (uart_tx_fifo_syncfifo_we & (uart_tx_fifo_syncfifo_writable | uart_tx_fifo_replace));
assign uart_tx_fifo_do_read = (uart_tx_fifo_syncfifo_readable & uart_tx_fifo_syncfifo_re);
assign uart_tx_fifo_rdport_adr = uart_tx_fifo_consume;
assign uart_tx_fifo_syncfifo_dout = uart_tx_fifo_rdport_dat_r;
assign uart_tx_fifo_rdport_re = uart_tx_fifo_do_read;
assign uart_tx_fifo_syncfifo_writable = (uart_tx_fifo_level0 != 5'd16);
assign uart_tx_fifo_syncfifo_readable = (uart_tx_fifo_level0 != 1'd0);
assign uart_rx_fifo_syncfifo_din = {uart_rx_fifo_fifo_in_last, uart_rx_fifo_fifo_in_first, uart_rx_fifo_fifo_in_payload_data};
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign uart_rx_fifo_sink_ready = uart_rx_fifo_syncfifo_writable;
assign uart_rx_fifo_syncfifo_we = uart_rx_fifo_sink_valid;
assign uart_rx_fifo_fifo_in_first = uart_rx_fifo_sink_first;
assign uart_rx_fifo_fifo_in_last = uart_rx_fifo_sink_last;
assign uart_rx_fifo_fifo_in_payload_data = uart_rx_fifo_sink_payload_data;
assign uart_rx_fifo_source_valid = uart_rx_fifo_readable;
assign uart_rx_fifo_source_first = uart_rx_fifo_fifo_out_first;
assign uart_rx_fifo_source_last = uart_rx_fifo_fifo_out_last;
assign uart_rx_fifo_source_payload_data = uart_rx_fifo_fifo_out_payload_data;
assign uart_rx_fifo_re = uart_rx_fifo_source_ready;
assign uart_rx_fifo_syncfifo_re = (uart_rx_fifo_syncfifo_readable & ((~uart_rx_fifo_readable) | uart_rx_fifo_re));
assign uart_rx_fifo_level1 = (uart_rx_fifo_level0 + uart_rx_fifo_readable);
always @(*) begin
	uart_rx_fifo_wrport_adr <= 4'd0;
	if (uart_rx_fifo_replace) begin
		uart_rx_fifo_wrport_adr <= (uart_rx_fifo_produce - 1'd1);
	end else begin
		uart_rx_fifo_wrport_adr <= uart_rx_fifo_produce;
	end
end
assign uart_rx_fifo_wrport_dat_w = uart_rx_fifo_syncfifo_din;
assign uart_rx_fifo_wrport_we = (uart_rx_fifo_syncfifo_we & (uart_rx_fifo_syncfifo_writable | uart_rx_fifo_replace));
assign uart_rx_fifo_do_read = (uart_rx_fifo_syncfifo_readable & uart_rx_fifo_syncfifo_re);
assign uart_rx_fifo_rdport_adr = uart_rx_fifo_consume;
assign uart_rx_fifo_syncfifo_dout = uart_rx_fifo_rdport_dat_r;
assign uart_rx_fifo_rdport_re = uart_rx_fifo_do_read;
assign uart_rx_fifo_syncfifo_writable = (uart_rx_fifo_level0 != 5'd16);
assign uart_rx_fifo_syncfifo_readable = (uart_rx_fifo_level0 != 1'd0);
assign timer_zero_trigger = (timer_value == 1'd0);
assign timer_zero0 = timer_zero_status;
assign timer_zero1 = timer_zero_pending;
always @(*) begin
	timer_zero_clear <= 1'd0;
	if ((timer_pending_re & timer_pending_r)) begin
		timer_zero_clear <= 1'd1;
	end
end
assign timer_irq = (timer_pending_status & timer_enable_storage);
assign timer_zero_status = timer_zero_trigger;
assign sys_clk_1 = sys_clk;
assign por_clk = sys_clk;
assign sys_rst = int_rst;
assign sd_ll_clk = pads_clk;
assign block_read_go = block_read_act;
assign block_write_done = block_write_act;
assign card_detect_status0 = 1'd0;
assign sdpads_clk = ((((init_pads_out_payload_clk | cmdw_pads_out_payload_clk) | cmdr_pads_out_payload_clk) | dataw_pads_out_payload_clk) | datar_pads_out_payload_clk);
assign sdpads_cmd_oe = ((((init_pads_out_payload_cmd_oe | cmdw_pads_out_payload_cmd_oe) | cmdr_pads_out_payload_cmd_oe) | dataw_pads_out_payload_cmd_oe) | datar_pads_out_payload_cmd_oe);
assign sdpads_cmd_o = ((((init_pads_out_payload_cmd_o | cmdw_pads_out_payload_cmd_o) | cmdr_pads_out_payload_cmd_o) | dataw_pads_out_payload_cmd_o) | datar_pads_out_payload_cmd_o);
assign sdpads_data_oe = ((((init_pads_out_payload_data_oe | cmdw_pads_out_payload_data_oe) | cmdr_pads_out_payload_data_oe) | dataw_pads_out_payload_data_oe) | datar_pads_out_payload_data_oe);
assign sdpads_data_o = ((((init_pads_out_payload_data_o | cmdw_pads_out_payload_data_o) | cmdr_pads_out_payload_data_o) | dataw_pads_out_payload_data_o) | datar_pads_out_payload_data_o);
assign init_pads_out_ready = clocker_ce;
assign cmdw_pads_out_ready = clocker_ce;
assign cmdr_pads_out_ready = clocker_ce;
assign dataw_pads_out_ready = clocker_ce;
assign datar_pads_out_ready = clocker_ce;
assign clocker_clk_en = sdpads_clk;
assign init_pads_in_valid = sdpads_data_i_ce;
assign init_pads_in_payload_cmd_i = sdpads_cmd_i;
assign init_pads_in_payload_data_i = sdpads_data_i;
assign cmdw_pads_in_valid = sdpads_data_i_ce;
assign cmdw_pads_in_payload_cmd_i = sdpads_cmd_i;
assign cmdw_pads_in_payload_data_i = sdpads_data_i;
assign cmdr_pads_in_pads_in_valid = sdpads_data_i_ce;
assign cmdr_pads_in_pads_in_payload_cmd_i = sdpads_cmd_i;
assign cmdr_pads_in_pads_in_payload_data_i = sdpads_data_i;
assign dataw_pads_in_pads_in_valid = sdpads_data_i_ce;
assign dataw_pads_in_pads_in_payload_cmd_i = sdpads_cmd_i;
assign dataw_pads_in_pads_in_payload_data_i = sdpads_data_i;
assign datar_pads_in_pads_in_valid = sdpads_data_i_ce;
assign datar_pads_in_pads_in_payload_cmd_i = sdpads_cmd_i;
assign datar_pads_in_pads_in_payload_data_i = sdpads_data_i;
assign clocker_stop = (dataw_stop | datar_stop);
always @(*) begin
	clocker_clk1 <= 1'd0;
	case (clocker_storage)
		3'd4: begin
			clocker_clk1 <= clocker_clks[1];
		end
		4'd8: begin
			clocker_clk1 <= clocker_clks[2];
		end
		5'd16: begin
			clocker_clk1 <= clocker_clks[3];
		end
		6'd32: begin
			clocker_clk1 <= clocker_clks[4];
		end
		7'd64: begin
			clocker_clk1 <= clocker_clks[5];
		end
		8'd128: begin
			clocker_clk1 <= clocker_clks[6];
		end
		9'd256: begin
			clocker_clk1 <= clocker_clks[7];
		end
		default: begin
			clocker_clk1 <= clocker_clks[0];
		end
	endcase
end
assign clocker_ce = (clocker_clk1 & (~clocker_clk_d));
always @(*) begin
	clocker_ce_latched <= 1'd0;
	if (clocker_clk_d) begin
		clocker_ce_latched <= clocker_clk_en;
	end else begin
		clocker_ce_latched <= clocker_ce_delayed;
	end
end
assign clocker_clk0 = ((~clocker_clk1) & clocker_ce_latched);
always @(*) begin
	subfragments_sdphyinit_next_state <= 1'd0;
	subfragments_sdphyinit_next_state <= subfragments_sdphyinit_state;
	case (subfragments_sdphyinit_state)
		1'd1: begin
			if (init_pads_out_ready) begin
				if ((init_count == 7'd79)) begin
					subfragments_sdphyinit_next_state <= 1'd0;
				end
			end
		end
		default: begin
			if (init_initialize_re) begin
				subfragments_sdphyinit_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	init_pads_out_payload_data_oe <= 1'd0;
	case (subfragments_sdphyinit_state)
		1'd1: begin
			init_pads_out_payload_data_oe <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	init_pads_out_payload_clk <= 1'd0;
	case (subfragments_sdphyinit_state)
		1'd1: begin
			init_pads_out_payload_clk <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	init_count_sdphyinit_next_value <= 8'd0;
	case (subfragments_sdphyinit_state)
		1'd1: begin
			if (init_pads_out_ready) begin
				init_count_sdphyinit_next_value <= (init_count + 1'd1);
			end
		end
		default: begin
			init_count_sdphyinit_next_value <= 1'd0;
		end
	endcase
end
always @(*) begin
	init_count_sdphyinit_next_value_ce <= 1'd0;
	case (subfragments_sdphyinit_state)
		1'd1: begin
			if (init_pads_out_ready) begin
				init_count_sdphyinit_next_value_ce <= 1'd1;
			end
		end
		default: begin
			init_count_sdphyinit_next_value_ce <= 1'd1;
		end
	endcase
end
always @(*) begin
	init_pads_out_payload_cmd_o <= 1'd0;
	case (subfragments_sdphyinit_state)
		1'd1: begin
			init_pads_out_payload_cmd_o <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	init_pads_out_payload_cmd_oe <= 1'd0;
	case (subfragments_sdphyinit_state)
		1'd1: begin
			init_pads_out_payload_cmd_oe <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	init_pads_out_payload_data_o <= 4'd0;
	case (subfragments_sdphyinit_state)
		1'd1: begin
			init_pads_out_payload_data_o <= 4'd15;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	subfragments_sdphycmdw_next_state <= 2'd0;
	subfragments_sdphycmdw_next_state <= subfragments_sdphycmdw_state;
	case (subfragments_sdphycmdw_state)
		1'd1: begin
			if (cmdw_pads_out_ready) begin
				if ((cmdw_count == 3'd7)) begin
					if ((cmdw_sink_last & (cmdw_sink_payload_cmd_type == 1'd0))) begin
						subfragments_sdphycmdw_next_state <= 2'd2;
					end else begin
						subfragments_sdphycmdw_next_state <= 1'd0;
					end
				end
			end
		end
		2'd2: begin
			if (cmdw_pads_out_ready) begin
				if ((cmdw_count == 3'd7)) begin
					subfragments_sdphycmdw_next_state <= 1'd0;
				end
			end
		end
		default: begin
			if ((cmdw_sink_valid & cmdw_pads_out_ready)) begin
				subfragments_sdphycmdw_next_state <= 1'd1;
			end else begin
			end
		end
	endcase
end
always @(*) begin
	cmdw_sink_ready <= 1'd0;
	case (subfragments_sdphycmdw_state)
		1'd1: begin
			if (cmdw_pads_out_ready) begin
				if ((cmdw_count == 3'd7)) begin
					if ((cmdw_sink_last & (cmdw_sink_payload_cmd_type == 1'd0))) begin
					end else begin
						cmdw_sink_ready <= 1'd1;
					end
				end
			end
		end
		2'd2: begin
			if (cmdw_pads_out_ready) begin
				if ((cmdw_count == 3'd7)) begin
					cmdw_sink_ready <= 1'd1;
				end
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	cmdw_count_sdphycmdw_next_value <= 8'd0;
	case (subfragments_sdphycmdw_state)
		1'd1: begin
			if (cmdw_pads_out_ready) begin
				cmdw_count_sdphycmdw_next_value <= (cmdw_count + 1'd1);
			end
		end
		2'd2: begin
			if (cmdw_pads_out_ready) begin
				cmdw_count_sdphycmdw_next_value <= (cmdw_count + 1'd1);
			end
		end
		default: begin
			cmdw_count_sdphycmdw_next_value <= 1'd0;
		end
	endcase
end
always @(*) begin
	cmdw_count_sdphycmdw_next_value_ce <= 1'd0;
	case (subfragments_sdphycmdw_state)
		1'd1: begin
			if (cmdw_pads_out_ready) begin
				cmdw_count_sdphycmdw_next_value_ce <= 1'd1;
			end
		end
		2'd2: begin
			if (cmdw_pads_out_ready) begin
				cmdw_count_sdphycmdw_next_value_ce <= 1'd1;
			end
		end
		default: begin
			cmdw_count_sdphycmdw_next_value_ce <= 1'd1;
		end
	endcase
end
always @(*) begin
	cmdw_done <= 1'd0;
	case (subfragments_sdphycmdw_state)
		1'd1: begin
		end
		2'd2: begin
		end
		default: begin
			if ((cmdw_sink_valid & cmdw_pads_out_ready)) begin
			end else begin
				cmdw_done <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	cmdw_pads_out_payload_clk <= 1'd0;
	case (subfragments_sdphycmdw_state)
		1'd1: begin
			cmdw_pads_out_payload_clk <= 1'd1;
		end
		2'd2: begin
			cmdw_pads_out_payload_clk <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	cmdw_pads_out_payload_cmd_o <= 1'd0;
	case (subfragments_sdphycmdw_state)
		1'd1: begin
			case (cmdw_count)
				1'd0: begin
					cmdw_pads_out_payload_cmd_o <= cmdw_sink_payload_data[7];
				end
				1'd1: begin
					cmdw_pads_out_payload_cmd_o <= cmdw_sink_payload_data[6];
				end
				2'd2: begin
					cmdw_pads_out_payload_cmd_o <= cmdw_sink_payload_data[5];
				end
				2'd3: begin
					cmdw_pads_out_payload_cmd_o <= cmdw_sink_payload_data[4];
				end
				3'd4: begin
					cmdw_pads_out_payload_cmd_o <= cmdw_sink_payload_data[3];
				end
				3'd5: begin
					cmdw_pads_out_payload_cmd_o <= cmdw_sink_payload_data[2];
				end
				3'd6: begin
					cmdw_pads_out_payload_cmd_o <= cmdw_sink_payload_data[1];
				end
				3'd7: begin
					cmdw_pads_out_payload_cmd_o <= cmdw_sink_payload_data[0];
				end
			endcase
		end
		2'd2: begin
			cmdw_pads_out_payload_cmd_o <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	cmdw_pads_out_payload_cmd_oe <= 1'd0;
	case (subfragments_sdphycmdw_state)
		1'd1: begin
			cmdw_pads_out_payload_cmd_oe <= 1'd1;
		end
		2'd2: begin
			cmdw_pads_out_payload_cmd_oe <= 1'd1;
		end
		default: begin
		end
	endcase
end
assign cmdr_cmdr_pads_in_valid = cmdr_pads_in_pads_in_valid;
assign cmdr_pads_in_pads_in_ready = cmdr_cmdr_pads_in_ready;
assign cmdr_cmdr_pads_in_first = cmdr_pads_in_pads_in_first;
assign cmdr_cmdr_pads_in_last = cmdr_pads_in_pads_in_last;
assign cmdr_cmdr_pads_in_payload_clk = cmdr_pads_in_pads_in_payload_clk;
assign cmdr_cmdr_pads_in_payload_cmd_i = cmdr_pads_in_pads_in_payload_cmd_i;
assign cmdr_cmdr_pads_in_payload_cmd_o = cmdr_pads_in_pads_in_payload_cmd_o;
assign cmdr_cmdr_pads_in_payload_cmd_oe = cmdr_pads_in_pads_in_payload_cmd_oe;
assign cmdr_cmdr_pads_in_payload_data_i = cmdr_pads_in_pads_in_payload_data_i;
assign cmdr_cmdr_pads_in_payload_data_o = cmdr_pads_in_pads_in_payload_data_o;
assign cmdr_cmdr_pads_in_payload_data_oe = cmdr_pads_in_pads_in_payload_data_oe;
assign cmdr_cmdr_pads_in_payload_data_i_ce = cmdr_pads_in_pads_in_payload_data_i_ce;
assign cmdr_cmdr_start = (cmdr_cmdr_pads_in_payload_cmd_i == 1'd0);
assign cmdr_cmdr_converter_sink_valid = (cmdr_cmdr_pads_in_valid & (cmdr_cmdr_start | cmdr_cmdr_run));
assign cmdr_cmdr_converter_sink_payload_data = cmdr_cmdr_pads_in_payload_cmd_i;
assign cmdr_cmdr_buf_sink_valid = cmdr_cmdr_source_source_valid1;
assign cmdr_cmdr_source_source_ready1 = cmdr_cmdr_buf_sink_ready;
assign cmdr_cmdr_buf_sink_first = cmdr_cmdr_source_source_first1;
assign cmdr_cmdr_buf_sink_last = cmdr_cmdr_source_source_last1;
assign cmdr_cmdr_buf_sink_payload_data = cmdr_cmdr_source_source_payload_data1;
assign cmdr_cmdr_source_source_valid0 = cmdr_cmdr_buf_source_valid;
assign cmdr_cmdr_buf_source_ready = cmdr_cmdr_source_source_ready0;
assign cmdr_cmdr_source_source_first0 = cmdr_cmdr_buf_source_first;
assign cmdr_cmdr_source_source_last0 = cmdr_cmdr_buf_source_last;
assign cmdr_cmdr_source_source_payload_data0 = cmdr_cmdr_buf_source_payload_data;
assign cmdr_cmdr_source_source_valid1 = cmdr_cmdr_converter_source_valid;
assign cmdr_cmdr_converter_source_ready = cmdr_cmdr_source_source_ready1;
assign cmdr_cmdr_source_source_first1 = cmdr_cmdr_converter_source_first;
assign cmdr_cmdr_source_source_last1 = cmdr_cmdr_converter_source_last;
assign cmdr_cmdr_source_source_payload_data1 = cmdr_cmdr_converter_source_payload_data;
assign cmdr_cmdr_converter_sink_ready = ((~cmdr_cmdr_converter_strobe_all) | cmdr_cmdr_converter_source_ready);
assign cmdr_cmdr_converter_source_valid = cmdr_cmdr_converter_strobe_all;
assign cmdr_cmdr_converter_load_part = (cmdr_cmdr_converter_sink_valid & cmdr_cmdr_converter_sink_ready);
assign cmdr_cmdr_buf_sink_ready = ((~cmdr_cmdr_buf_source_valid) | cmdr_cmdr_buf_source_ready);
always @(*) begin
	subfragments_sdphycmdr_next_state <= 3'd0;
	subfragments_sdphycmdr_next_state <= subfragments_sdphycmdr_state;
	case (subfragments_sdphycmdr_state)
		1'd1: begin
			if (cmdr_cmdr_source_source_valid0) begin
				subfragments_sdphycmdr_next_state <= 2'd2;
			end
			if ((cmdr_timeout == 1'd0)) begin
				subfragments_sdphycmdr_next_state <= 3'd5;
			end
		end
		2'd2: begin
			if ((cmdr_cmdr_source_source_valid0 & cmdr_source_ready)) begin
				if (cmdr_source_last) begin
					if ((cmdr_sink_payload_cmd_type == 2'd3)) begin
						subfragments_sdphycmdr_next_state <= 2'd3;
					end else begin
						if ((cmdr_sink_payload_data_type == 1'd0)) begin
							subfragments_sdphycmdr_next_state <= 3'd4;
						end else begin
							subfragments_sdphycmdr_next_state <= 1'd0;
						end
					end
				end
			end
			if ((cmdr_timeout == 1'd0)) begin
				subfragments_sdphycmdr_next_state <= 3'd5;
			end
		end
		2'd3: begin
			if ((~cmdr_busy)) begin
				if (cmdr_source_ready) begin
					subfragments_sdphycmdr_next_state <= 3'd4;
				end
			end
			if ((cmdr_timeout == 1'd0)) begin
				subfragments_sdphycmdr_next_state <= 3'd5;
			end
		end
		3'd4: begin
			if (cmdr_pads_out_ready) begin
				if ((cmdr_count == 3'd7)) begin
					subfragments_sdphycmdr_next_state <= 1'd0;
				end
			end
		end
		3'd5: begin
			if (cmdr_source_ready) begin
				subfragments_sdphycmdr_next_state <= 1'd0;
			end
		end
		default: begin
			if (((cmdr_sink_valid & cmdr_pads_out_ready) & cmdw_done)) begin
				subfragments_sdphycmdr_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	cmdr_cmdr_reset_sdphycmdr_next_value3 <= 1'd0;
	case (subfragments_sdphycmdr_state)
		1'd1: begin
			cmdr_cmdr_reset_sdphycmdr_next_value3 <= 1'd0;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		default: begin
			if (((cmdr_sink_valid & cmdr_pads_out_ready) & cmdw_done)) begin
				cmdr_cmdr_reset_sdphycmdr_next_value3 <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	cmdr_cmdr_reset_sdphycmdr_next_value_ce3 <= 1'd0;
	case (subfragments_sdphycmdr_state)
		1'd1: begin
			cmdr_cmdr_reset_sdphycmdr_next_value_ce3 <= 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		default: begin
			if (((cmdr_sink_valid & cmdr_pads_out_ready) & cmdw_done)) begin
				cmdr_cmdr_reset_sdphycmdr_next_value_ce3 <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	cmdr_sink_ready <= 1'd0;
	case (subfragments_sdphycmdr_state)
		1'd1: begin
		end
		2'd2: begin
			if ((cmdr_cmdr_source_source_valid0 & cmdr_source_ready)) begin
				if (cmdr_source_last) begin
					cmdr_sink_ready <= 1'd1;
				end
			end
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
			cmdr_sink_ready <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	cmdr_pads_out_payload_cmd_oe <= 1'd0;
	case (subfragments_sdphycmdr_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			cmdr_pads_out_payload_cmd_oe <= 1'd1;
		end
		3'd5: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	cmdr_source_payload_data <= 8'd0;
	case (subfragments_sdphycmdr_state)
		1'd1: begin
		end
		2'd2: begin
			cmdr_source_payload_data <= cmdr_cmdr_source_source_payload_data0;
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	cmdr_timeout_sdphycmdr_next_value0 <= 32'd0;
	case (subfragments_sdphycmdr_state)
		1'd1: begin
			cmdr_timeout_sdphycmdr_next_value0 <= (cmdr_timeout - 1'd1);
		end
		2'd2: begin
			if ((cmdr_cmdr_source_source_valid0 & cmdr_source_ready)) begin
				if (cmdr_source_last) begin
					if ((cmdr_sink_payload_cmd_type == 2'd3)) begin
						cmdr_timeout_sdphycmdr_next_value0 <= 20'd1000000;
					end else begin
					end
				end
			end
			cmdr_timeout_sdphycmdr_next_value0 <= (cmdr_timeout - 1'd1);
		end
		2'd3: begin
			cmdr_timeout_sdphycmdr_next_value0 <= (cmdr_timeout - 1'd1);
		end
		3'd4: begin
		end
		3'd5: begin
		end
		default: begin
			cmdr_timeout_sdphycmdr_next_value0 <= 20'd1000000;
		end
	endcase
end
always @(*) begin
	cmdr_timeout_sdphycmdr_next_value_ce0 <= 1'd0;
	case (subfragments_sdphycmdr_state)
		1'd1: begin
			cmdr_timeout_sdphycmdr_next_value_ce0 <= 1'd1;
		end
		2'd2: begin
			if ((cmdr_cmdr_source_source_valid0 & cmdr_source_ready)) begin
				if (cmdr_source_last) begin
					if ((cmdr_sink_payload_cmd_type == 2'd3)) begin
						cmdr_timeout_sdphycmdr_next_value_ce0 <= 1'd1;
					end else begin
					end
				end
			end
			cmdr_timeout_sdphycmdr_next_value_ce0 <= 1'd1;
		end
		2'd3: begin
			cmdr_timeout_sdphycmdr_next_value_ce0 <= 1'd1;
		end
		3'd4: begin
		end
		3'd5: begin
		end
		default: begin
			cmdr_timeout_sdphycmdr_next_value_ce0 <= 1'd1;
		end
	endcase
end
always @(*) begin
	cmdr_count_sdphycmdr_next_value1 <= 8'd0;
	case (subfragments_sdphycmdr_state)
		1'd1: begin
		end
		2'd2: begin
			if ((cmdr_cmdr_source_source_valid0 & cmdr_source_ready)) begin
				cmdr_count_sdphycmdr_next_value1 <= (cmdr_count + 1'd1);
				if (cmdr_source_last) begin
					if ((cmdr_sink_payload_cmd_type == 2'd3)) begin
					end else begin
						if ((cmdr_sink_payload_data_type == 1'd0)) begin
							cmdr_count_sdphycmdr_next_value1 <= 1'd0;
						end else begin
						end
					end
				end
			end
		end
		2'd3: begin
			if ((~cmdr_busy)) begin
				if (cmdr_source_ready) begin
					cmdr_count_sdphycmdr_next_value1 <= 1'd0;
				end
			end
		end
		3'd4: begin
			if (cmdr_pads_out_ready) begin
				cmdr_count_sdphycmdr_next_value1 <= (cmdr_count + 1'd1);
			end
		end
		3'd5: begin
		end
		default: begin
			cmdr_count_sdphycmdr_next_value1 <= 1'd0;
		end
	endcase
end
always @(*) begin
	cmdr_source_valid <= 1'd0;
	case (subfragments_sdphycmdr_state)
		1'd1: begin
		end
		2'd2: begin
			cmdr_source_valid <= cmdr_cmdr_source_source_valid0;
			if ((cmdr_cmdr_source_source_valid0 & cmdr_source_ready)) begin
				if (cmdr_source_last) begin
					if ((cmdr_sink_payload_cmd_type == 2'd3)) begin
						cmdr_source_valid <= 1'd0;
					end else begin
					end
				end
			end
		end
		2'd3: begin
			if ((~cmdr_busy)) begin
				cmdr_source_valid <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
			cmdr_source_valid <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	cmdr_count_sdphycmdr_next_value_ce1 <= 1'd0;
	case (subfragments_sdphycmdr_state)
		1'd1: begin
		end
		2'd2: begin
			if ((cmdr_cmdr_source_source_valid0 & cmdr_source_ready)) begin
				cmdr_count_sdphycmdr_next_value_ce1 <= 1'd1;
				if (cmdr_source_last) begin
					if ((cmdr_sink_payload_cmd_type == 2'd3)) begin
					end else begin
						if ((cmdr_sink_payload_data_type == 1'd0)) begin
							cmdr_count_sdphycmdr_next_value_ce1 <= 1'd1;
						end else begin
						end
					end
				end
			end
		end
		2'd3: begin
			if ((~cmdr_busy)) begin
				if (cmdr_source_ready) begin
					cmdr_count_sdphycmdr_next_value_ce1 <= 1'd1;
				end
			end
		end
		3'd4: begin
			if (cmdr_pads_out_ready) begin
				cmdr_count_sdphycmdr_next_value_ce1 <= 1'd1;
			end
		end
		3'd5: begin
		end
		default: begin
			cmdr_count_sdphycmdr_next_value_ce1 <= 1'd1;
		end
	endcase
end
always @(*) begin
	cmdr_pads_out_payload_clk <= 1'd0;
	case (subfragments_sdphycmdr_state)
		1'd1: begin
			cmdr_pads_out_payload_clk <= 1'd1;
		end
		2'd2: begin
			cmdr_pads_out_payload_clk <= 1'd1;
		end
		2'd3: begin
			cmdr_pads_out_payload_clk <= 1'd1;
		end
		3'd4: begin
			cmdr_pads_out_payload_clk <= 1'd1;
		end
		3'd5: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	cmdr_busy_sdphycmdr_next_value2 <= 1'd0;
	case (subfragments_sdphycmdr_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if ((cmdr_pads_in_pads_in_valid & cmdr_pads_in_pads_in_payload_data_i[0])) begin
				cmdr_busy_sdphycmdr_next_value2 <= 1'd0;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		default: begin
			cmdr_busy_sdphycmdr_next_value2 <= 1'd1;
		end
	endcase
end
always @(*) begin
	cmdr_pads_out_payload_cmd_o <= 1'd0;
	case (subfragments_sdphycmdr_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			cmdr_pads_out_payload_cmd_o <= 1'd1;
		end
		3'd5: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	cmdr_busy_sdphycmdr_next_value_ce2 <= 1'd0;
	case (subfragments_sdphycmdr_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if ((cmdr_pads_in_pads_in_valid & cmdr_pads_in_pads_in_payload_data_i[0])) begin
				cmdr_busy_sdphycmdr_next_value_ce2 <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		default: begin
			cmdr_busy_sdphycmdr_next_value_ce2 <= 1'd1;
		end
	endcase
end
always @(*) begin
	cmdr_source_payload_status <= 3'd0;
	case (subfragments_sdphycmdr_state)
		1'd1: begin
		end
		2'd2: begin
			cmdr_source_payload_status <= 1'd0;
		end
		2'd3: begin
			if ((~cmdr_busy)) begin
				cmdr_source_payload_status <= 1'd0;
			end
		end
		3'd4: begin
		end
		3'd5: begin
			cmdr_source_payload_status <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	cmdr_cmdr_source_source_ready0 <= 1'd0;
	case (subfragments_sdphycmdr_state)
		1'd1: begin
		end
		2'd2: begin
			if ((cmdr_cmdr_source_source_valid0 & cmdr_source_ready)) begin
				cmdr_cmdr_source_source_ready0 <= 1'd1;
			end
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	cmdr_source_last <= 1'd0;
	case (subfragments_sdphycmdr_state)
		1'd1: begin
		end
		2'd2: begin
			cmdr_source_last <= (cmdr_count == (cmdr_sink_payload_length - 1'd1));
		end
		2'd3: begin
			if ((~cmdr_busy)) begin
				cmdr_source_last <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
			cmdr_source_last <= 1'd1;
		end
		default: begin
		end
	endcase
end
assign dataw_accepted0 = dataw_accepted1;
assign dataw_crc_error0 = dataw_crc_error1;
assign dataw_write_error0 = dataw_write_error1;
assign dataw_crc_pads_in_valid = dataw_pads_in_pads_in_valid;
assign dataw_crc_pads_in_ready = dataw_pads_in_pads_in_ready;
assign dataw_crc_pads_in_first = dataw_pads_in_pads_in_first;
assign dataw_crc_pads_in_last = dataw_pads_in_pads_in_last;
assign dataw_crc_pads_in_payload_clk = dataw_pads_in_pads_in_payload_clk;
assign dataw_crc_pads_in_payload_cmd_i = dataw_pads_in_pads_in_payload_cmd_i;
assign dataw_crc_pads_in_payload_cmd_o = dataw_pads_in_pads_in_payload_cmd_o;
assign dataw_crc_pads_in_payload_cmd_oe = dataw_pads_in_pads_in_payload_cmd_oe;
assign dataw_crc_pads_in_payload_data_i = dataw_pads_in_pads_in_payload_data_i;
assign dataw_crc_pads_in_payload_data_o = dataw_pads_in_pads_in_payload_data_o;
assign dataw_crc_pads_in_payload_data_oe = dataw_pads_in_pads_in_payload_data_oe;
assign dataw_crc_pads_in_payload_data_i_ce = dataw_pads_in_pads_in_payload_data_i_ce;
assign dataw_crc_start = (dataw_crc_pads_in_payload_data_i[0] == 1'd0);
assign dataw_crc_converter_sink_valid = (dataw_crc_pads_in_valid & dataw_crc_run);
assign dataw_crc_converter_sink_payload_data = dataw_crc_pads_in_payload_data_i[0];
assign dataw_crc_buf_sink_valid = dataw_crc_source_source_valid1;
assign dataw_crc_source_source_ready1 = dataw_crc_buf_sink_ready;
assign dataw_crc_buf_sink_first = dataw_crc_source_source_first1;
assign dataw_crc_buf_sink_last = dataw_crc_source_source_last1;
assign dataw_crc_buf_sink_payload_data = dataw_crc_source_source_payload_data1;
assign dataw_crc_source_source_valid0 = dataw_crc_buf_source_valid;
assign dataw_crc_buf_source_ready = dataw_crc_source_source_ready0;
assign dataw_crc_source_source_first0 = dataw_crc_buf_source_first;
assign dataw_crc_source_source_last0 = dataw_crc_buf_source_last;
assign dataw_crc_source_source_payload_data0 = dataw_crc_buf_source_payload_data;
assign dataw_crc_source_source_valid1 = dataw_crc_converter_source_valid;
assign dataw_crc_converter_source_ready = dataw_crc_source_source_ready1;
assign dataw_crc_source_source_first1 = dataw_crc_converter_source_first;
assign dataw_crc_source_source_last1 = dataw_crc_converter_source_last;
assign dataw_crc_source_source_payload_data1 = dataw_crc_converter_source_payload_data;
assign dataw_crc_converter_sink_ready = ((~dataw_crc_converter_strobe_all) | dataw_crc_converter_source_ready);
assign dataw_crc_converter_source_valid = dataw_crc_converter_strobe_all;
assign dataw_crc_converter_load_part = (dataw_crc_converter_sink_valid & dataw_crc_converter_sink_ready);
assign dataw_crc_buf_sink_ready = ((~dataw_crc_buf_source_valid) | dataw_crc_buf_source_ready);
always @(*) begin
	subfragments_sdphydataw_next_state <= 3'd0;
	subfragments_sdphydataw_next_state <= subfragments_sdphydataw_state;
	case (subfragments_sdphydataw_state)
		1'd1: begin
			if (dataw_pads_out_ready) begin
				if ((dataw_count == 3'd7)) begin
					subfragments_sdphydataw_next_state <= 2'd2;
				end
			end
		end
		2'd2: begin
			if (dataw_pads_out_ready) begin
				subfragments_sdphydataw_next_state <= 2'd3;
			end
		end
		2'd3: begin
			if (dataw_pads_out_ready) begin
				if ((dataw_count == 1'd1)) begin
					if (dataw_sink_last) begin
						subfragments_sdphydataw_next_state <= 3'd4;
					end else begin
					end
				end
			end
		end
		3'd4: begin
			if (dataw_pads_out_ready) begin
				subfragments_sdphydataw_next_state <= 3'd5;
			end
		end
		3'd5: begin
			if (dataw_crc_source_source_valid0) begin
				subfragments_sdphydataw_next_state <= 3'd6;
			end
		end
		3'd6: begin
			if ((dataw_pads_in_pads_in_valid & dataw_pads_in_pads_in_payload_data_i[0])) begin
				subfragments_sdphydataw_next_state <= 1'd0;
			end
		end
		default: begin
			if ((dataw_sink_valid & dataw_pads_out_ready)) begin
				subfragments_sdphydataw_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	dataw_crc_error1_sdphydataw_next_value_ce1 <= 1'd0;
	case (subfragments_sdphydataw_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
			if (dataw_crc_source_source_valid0) begin
				dataw_crc_error1_sdphydataw_next_value_ce1 <= 1'd1;
			end
		end
		3'd6: begin
		end
		default: begin
			dataw_crc_error1_sdphydataw_next_value_ce1 <= 1'd1;
		end
	endcase
end
always @(*) begin
	dataw_pads_out_payload_clk <= 1'd0;
	case (subfragments_sdphydataw_state)
		1'd1: begin
			dataw_pads_out_payload_clk <= 1'd1;
		end
		2'd2: begin
			dataw_pads_out_payload_clk <= 1'd1;
		end
		2'd3: begin
			dataw_pads_out_payload_clk <= 1'd1;
		end
		3'd4: begin
			dataw_pads_out_payload_clk <= 1'd1;
		end
		3'd5: begin
			dataw_pads_out_payload_clk <= 1'd1;
		end
		3'd6: begin
			dataw_pads_out_payload_clk <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	dataw_write_error1_sdphydataw_next_value2 <= 1'd0;
	case (subfragments_sdphydataw_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
			if (dataw_crc_source_source_valid0) begin
				dataw_write_error1_sdphydataw_next_value2 <= (dataw_crc_source_source_payload_data0[7:5] == 3'd6);
			end
		end
		3'd6: begin
		end
		default: begin
			dataw_write_error1_sdphydataw_next_value2 <= 1'd0;
		end
	endcase
end
always @(*) begin
	dataw_crc_reset <= 1'd0;
	case (subfragments_sdphydataw_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (dataw_pads_out_ready) begin
				dataw_crc_reset <= 1'd1;
			end
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	dataw_write_error1_sdphydataw_next_value_ce2 <= 1'd0;
	case (subfragments_sdphydataw_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
			if (dataw_crc_source_source_valid0) begin
				dataw_write_error1_sdphydataw_next_value_ce2 <= 1'd1;
			end
		end
		3'd6: begin
		end
		default: begin
			dataw_write_error1_sdphydataw_next_value_ce2 <= 1'd1;
		end
	endcase
end
always @(*) begin
	dataw_pads_out_payload_cmd_o <= 1'd0;
	case (subfragments_sdphydataw_state)
		1'd1: begin
			dataw_pads_out_payload_cmd_o <= 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	dataw_pads_out_payload_cmd_oe <= 1'd0;
	case (subfragments_sdphydataw_state)
		1'd1: begin
			dataw_pads_out_payload_cmd_oe <= 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	dataw_count_sdphydataw_next_value3 <= 8'd0;
	case (subfragments_sdphydataw_state)
		1'd1: begin
			if (dataw_pads_out_ready) begin
				dataw_count_sdphydataw_next_value3 <= (dataw_count + 1'd1);
				if ((dataw_count == 3'd7)) begin
					dataw_count_sdphydataw_next_value3 <= 1'd0;
				end
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (dataw_pads_out_ready) begin
				dataw_count_sdphydataw_next_value3 <= (dataw_count + 1'd1);
				if ((dataw_count == 1'd1)) begin
					dataw_count_sdphydataw_next_value3 <= 1'd0;
				end
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			dataw_count_sdphydataw_next_value3 <= 1'd0;
		end
	endcase
end
always @(*) begin
	dataw_count_sdphydataw_next_value_ce3 <= 1'd0;
	case (subfragments_sdphydataw_state)
		1'd1: begin
			if (dataw_pads_out_ready) begin
				dataw_count_sdphydataw_next_value_ce3 <= 1'd1;
				if ((dataw_count == 3'd7)) begin
					dataw_count_sdphydataw_next_value_ce3 <= 1'd1;
				end
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (dataw_pads_out_ready) begin
				dataw_count_sdphydataw_next_value_ce3 <= 1'd1;
				if ((dataw_count == 1'd1)) begin
					dataw_count_sdphydataw_next_value_ce3 <= 1'd1;
				end
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			dataw_count_sdphydataw_next_value_ce3 <= 1'd1;
		end
	endcase
end
always @(*) begin
	dataw_pads_out_payload_data_o <= 4'd0;
	case (subfragments_sdphydataw_state)
		1'd1: begin
		end
		2'd2: begin
			dataw_pads_out_payload_data_o <= 1'd0;
		end
		2'd3: begin
			case (dataw_count)
				1'd0: begin
					dataw_pads_out_payload_data_o <= dataw_sink_payload_data[7:4];
				end
				1'd1: begin
					dataw_pads_out_payload_data_o <= dataw_sink_payload_data[3:0];
				end
			endcase
		end
		3'd4: begin
			dataw_pads_out_payload_data_o <= 4'd15;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	dataw_pads_out_payload_data_oe <= 1'd0;
	case (subfragments_sdphydataw_state)
		1'd1: begin
		end
		2'd2: begin
			dataw_pads_out_payload_data_oe <= 1'd1;
		end
		2'd3: begin
			dataw_pads_out_payload_data_oe <= 1'd1;
		end
		3'd4: begin
			dataw_pads_out_payload_data_oe <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	dataw_sink_ready <= 1'd0;
	case (subfragments_sdphydataw_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (dataw_pads_out_ready) begin
				if ((dataw_count == 1'd1)) begin
					if (dataw_sink_last) begin
					end else begin
						dataw_sink_ready <= 1'd1;
					end
				end
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
			if ((dataw_pads_in_pads_in_valid & dataw_pads_in_pads_in_payload_data_i[0])) begin
				dataw_sink_ready <= 1'd1;
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	dataw_accepted1_sdphydataw_next_value0 <= 1'd0;
	case (subfragments_sdphydataw_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
			if (dataw_crc_source_source_valid0) begin
				dataw_accepted1_sdphydataw_next_value0 <= (dataw_crc_source_source_payload_data0[7:5] == 2'd2);
			end
		end
		3'd6: begin
		end
		default: begin
			dataw_accepted1_sdphydataw_next_value0 <= 1'd0;
		end
	endcase
end
always @(*) begin
	dataw_accepted1_sdphydataw_next_value_ce0 <= 1'd0;
	case (subfragments_sdphydataw_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
			if (dataw_crc_source_source_valid0) begin
				dataw_accepted1_sdphydataw_next_value_ce0 <= 1'd1;
			end
		end
		3'd6: begin
		end
		default: begin
			dataw_accepted1_sdphydataw_next_value_ce0 <= 1'd1;
		end
	endcase
end
always @(*) begin
	dataw_stop <= 1'd0;
	case (subfragments_sdphydataw_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			dataw_stop <= (~dataw_sink_valid);
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	dataw_crc_error1_sdphydataw_next_value1 <= 1'd0;
	case (subfragments_sdphydataw_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
			if (dataw_crc_source_source_valid0) begin
				dataw_crc_error1_sdphydataw_next_value1 <= (dataw_crc_source_source_payload_data0[7:5] == 3'd5);
			end
		end
		3'd6: begin
		end
		default: begin
			dataw_crc_error1_sdphydataw_next_value1 <= 1'd0;
		end
	endcase
end
assign datar_datar_pads_in_valid = datar_pads_in_pads_in_valid;
assign datar_pads_in_pads_in_ready = datar_datar_pads_in_ready;
assign datar_datar_pads_in_first = datar_pads_in_pads_in_first;
assign datar_datar_pads_in_last = datar_pads_in_pads_in_last;
assign datar_datar_pads_in_payload_clk = datar_pads_in_pads_in_payload_clk;
assign datar_datar_pads_in_payload_cmd_i = datar_pads_in_pads_in_payload_cmd_i;
assign datar_datar_pads_in_payload_cmd_o = datar_pads_in_pads_in_payload_cmd_o;
assign datar_datar_pads_in_payload_cmd_oe = datar_pads_in_pads_in_payload_cmd_oe;
assign datar_datar_pads_in_payload_data_i = datar_pads_in_pads_in_payload_data_i;
assign datar_datar_pads_in_payload_data_o = datar_pads_in_pads_in_payload_data_o;
assign datar_datar_pads_in_payload_data_oe = datar_pads_in_pads_in_payload_data_oe;
assign datar_datar_pads_in_payload_data_i_ce = datar_pads_in_pads_in_payload_data_i_ce;
assign datar_datar_start = (datar_datar_pads_in_payload_data_i[3:0] == 1'd0);
assign datar_datar_converter_sink_valid = (datar_datar_pads_in_valid & datar_datar_run);
assign datar_datar_converter_sink_payload_data = datar_datar_pads_in_payload_data_i[3:0];
assign datar_datar_buf_sink_valid = datar_datar_source_source_valid1;
assign datar_datar_source_source_ready1 = datar_datar_buf_sink_ready;
assign datar_datar_buf_sink_first = datar_datar_source_source_first1;
assign datar_datar_buf_sink_last = datar_datar_source_source_last1;
assign datar_datar_buf_sink_payload_data = datar_datar_source_source_payload_data1;
assign datar_datar_source_source_valid0 = datar_datar_buf_source_valid;
assign datar_datar_buf_source_ready = datar_datar_source_source_ready0;
assign datar_datar_source_source_first0 = datar_datar_buf_source_first;
assign datar_datar_source_source_last0 = datar_datar_buf_source_last;
assign datar_datar_source_source_payload_data0 = datar_datar_buf_source_payload_data;
assign datar_datar_source_source_valid1 = datar_datar_converter_source_valid;
assign datar_datar_converter_source_ready = datar_datar_source_source_ready1;
assign datar_datar_source_source_first1 = datar_datar_converter_source_first;
assign datar_datar_source_source_last1 = datar_datar_converter_source_last;
assign datar_datar_source_source_payload_data1 = datar_datar_converter_source_payload_data;
assign datar_datar_converter_sink_ready = ((~datar_datar_converter_strobe_all) | datar_datar_converter_source_ready);
assign datar_datar_converter_source_valid = datar_datar_converter_strobe_all;
assign datar_datar_converter_load_part = (datar_datar_converter_sink_valid & datar_datar_converter_sink_ready);
assign datar_datar_buf_sink_ready = ((~datar_datar_buf_source_valid) | datar_datar_buf_source_ready);
always @(*) begin
	subfragments_sdphydatar_next_state <= 3'd0;
	subfragments_sdphydatar_next_state <= subfragments_sdphydatar_state;
	case (subfragments_sdphydatar_state)
		1'd1: begin
			if (datar_datar_source_source_valid0) begin
				subfragments_sdphydatar_next_state <= 2'd2;
			end
			if ((datar_timeout == 1'd0)) begin
				subfragments_sdphydatar_next_state <= 3'd4;
			end
		end
		2'd2: begin
			if (datar_source_valid) begin
				if (datar_source_ready) begin
					if (datar_source_last) begin
						if (datar_sink_last) begin
							subfragments_sdphydatar_next_state <= 2'd3;
						end else begin
							subfragments_sdphydatar_next_state <= 1'd0;
						end
					end
				end else begin
				end
			end
			if ((datar_timeout == 1'd0)) begin
				subfragments_sdphydatar_next_state <= 3'd4;
			end
		end
		2'd3: begin
			if (datar_pads_out_ready) begin
				if ((datar_count == 6'd39)) begin
					subfragments_sdphydatar_next_state <= 1'd0;
				end
			end
		end
		3'd4: begin
			if (datar_source_ready) begin
				subfragments_sdphydatar_next_state <= 1'd0;
			end
		end
		default: begin
			if ((datar_sink_valid & datar_pads_out_ready)) begin
				subfragments_sdphydatar_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	datar_timeout_sdphydatar_next_value_ce1 <= 1'd0;
	case (subfragments_sdphydatar_state)
		1'd1: begin
			datar_timeout_sdphydatar_next_value_ce1 <= 1'd1;
			datar_timeout_sdphydatar_next_value_ce1 <= 1'd1;
		end
		2'd2: begin
			datar_timeout_sdphydatar_next_value_ce1 <= 1'd1;
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
			if ((datar_sink_valid & datar_pads_out_ready)) begin
				datar_timeout_sdphydatar_next_value_ce1 <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	datar_sink_ready <= 1'd0;
	case (subfragments_sdphydatar_state)
		1'd1: begin
			if ((datar_timeout == 1'd0)) begin
				datar_sink_ready <= 1'd1;
			end
		end
		2'd2: begin
			if (datar_source_valid) begin
				if (datar_source_ready) begin
					if (datar_source_last) begin
						datar_sink_ready <= 1'd1;
					end
				end else begin
				end
			end
			if ((datar_timeout == 1'd0)) begin
				datar_sink_ready <= 1'd1;
			end
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	datar_datar_reset_sdphydatar_next_value2 <= 1'd0;
	case (subfragments_sdphydatar_state)
		1'd1: begin
			datar_datar_reset_sdphydatar_next_value2 <= 1'd0;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
			if ((datar_sink_valid & datar_pads_out_ready)) begin
				datar_datar_reset_sdphydatar_next_value2 <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	datar_datar_reset_sdphydatar_next_value_ce2 <= 1'd0;
	case (subfragments_sdphydatar_state)
		1'd1: begin
			datar_datar_reset_sdphydatar_next_value_ce2 <= 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
			if ((datar_sink_valid & datar_pads_out_ready)) begin
				datar_datar_reset_sdphydatar_next_value_ce2 <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	datar_source_valid <= 1'd0;
	case (subfragments_sdphydatar_state)
		1'd1: begin
		end
		2'd2: begin
			datar_source_valid <= datar_datar_source_source_valid0;
		end
		2'd3: begin
		end
		3'd4: begin
			datar_source_valid <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	datar_source_first <= 1'd0;
	case (subfragments_sdphydatar_state)
		1'd1: begin
		end
		2'd2: begin
			datar_source_first <= (datar_count == 1'd0);
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	datar_pads_out_payload_clk <= 1'd0;
	case (subfragments_sdphydatar_state)
		1'd1: begin
			datar_pads_out_payload_clk <= 1'd1;
		end
		2'd2: begin
			datar_pads_out_payload_clk <= 1'd1;
		end
		2'd3: begin
			datar_pads_out_payload_clk <= 1'd1;
		end
		3'd4: begin
		end
		default: begin
			if ((datar_sink_valid & datar_pads_out_ready)) begin
				datar_pads_out_payload_clk <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	datar_source_last <= 1'd0;
	case (subfragments_sdphydatar_state)
		1'd1: begin
		end
		2'd2: begin
			datar_source_last <= (datar_count == ((datar_sink_payload_block_length + 4'd8) - 1'd1));
		end
		2'd3: begin
		end
		3'd4: begin
			datar_source_last <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	datar_source_payload_data <= 8'd0;
	case (subfragments_sdphydatar_state)
		1'd1: begin
		end
		2'd2: begin
			datar_source_payload_data <= datar_datar_source_source_payload_data0;
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	datar_source_payload_status <= 3'd0;
	case (subfragments_sdphydatar_state)
		1'd1: begin
		end
		2'd2: begin
			datar_source_payload_status <= 1'd0;
		end
		2'd3: begin
		end
		3'd4: begin
			datar_source_payload_status <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	datar_datar_source_source_ready0 <= 1'd0;
	case (subfragments_sdphydatar_state)
		1'd1: begin
		end
		2'd2: begin
			if (datar_source_valid) begin
				if (datar_source_ready) begin
					datar_datar_source_source_ready0 <= 1'd1;
				end else begin
				end
			end
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	datar_count_sdphydatar_next_value0 <= 10'd0;
	case (subfragments_sdphydatar_state)
		1'd1: begin
		end
		2'd2: begin
			if (datar_source_valid) begin
				if (datar_source_ready) begin
					datar_count_sdphydatar_next_value0 <= (datar_count + 1'd1);
					if (datar_source_last) begin
						if (datar_sink_last) begin
							datar_count_sdphydatar_next_value0 <= 1'd0;
						end else begin
						end
					end
				end else begin
				end
			end
		end
		2'd3: begin
			if (datar_pads_out_ready) begin
				datar_count_sdphydatar_next_value0 <= (datar_count + 1'd1);
			end
		end
		3'd4: begin
		end
		default: begin
			datar_count_sdphydatar_next_value0 <= 1'd0;
			if ((datar_sink_valid & datar_pads_out_ready)) begin
				datar_count_sdphydatar_next_value0 <= 1'd0;
			end
		end
	endcase
end
always @(*) begin
	datar_stop <= 1'd0;
	case (subfragments_sdphydatar_state)
		1'd1: begin
		end
		2'd2: begin
			if (datar_source_valid) begin
				if (datar_source_ready) begin
				end else begin
					datar_stop <= 1'd1;
				end
			end
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	datar_count_sdphydatar_next_value_ce0 <= 1'd0;
	case (subfragments_sdphydatar_state)
		1'd1: begin
		end
		2'd2: begin
			if (datar_source_valid) begin
				if (datar_source_ready) begin
					datar_count_sdphydatar_next_value_ce0 <= 1'd1;
					if (datar_source_last) begin
						if (datar_sink_last) begin
							datar_count_sdphydatar_next_value_ce0 <= 1'd1;
						end else begin
						end
					end
				end else begin
				end
			end
		end
		2'd3: begin
			if (datar_pads_out_ready) begin
				datar_count_sdphydatar_next_value_ce0 <= 1'd1;
			end
		end
		3'd4: begin
		end
		default: begin
			datar_count_sdphydatar_next_value_ce0 <= 1'd1;
			if ((datar_sink_valid & datar_pads_out_ready)) begin
				datar_count_sdphydatar_next_value_ce0 <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	datar_timeout_sdphydatar_next_value1 <= 32'd0;
	case (subfragments_sdphydatar_state)
		1'd1: begin
			datar_timeout_sdphydatar_next_value1 <= (datar_timeout - 1'd1);
			datar_timeout_sdphydatar_next_value1 <= (datar_timeout - 1'd1);
		end
		2'd2: begin
			datar_timeout_sdphydatar_next_value1 <= (datar_timeout - 1'd1);
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
			if ((datar_sink_valid & datar_pads_out_ready)) begin
				datar_timeout_sdphydatar_next_value1 <= 32'd1000000;
			end
		end
	endcase
end
assign pads_clk = clocker_clk0;
always @(*) begin
	pads_cmd_i <= 1'd0;
	pads_cmd_i <= 1'd1;
	if (sdpads_cmd_oe) begin
		pads_cmd_i <= sdpads_cmd_o;
	end
end
always @(*) begin
	sdpads_cmd_i <= 1'd0;
	sdpads_cmd_i <= 1'd1;
	if ((~pads_cmd_t)) begin
		sdpads_cmd_i <= pads_cmd_o;
	end
end
always @(*) begin
	pads_dat_i <= 4'd0;
	pads_dat_i <= 4'd15;
	if (sdpads_data_oe) begin
		pads_dat_i <= sdpads_data_o;
	end
end
always @(*) begin
	sdpads_data_i <= 4'd0;
	sdpads_data_i <= 4'd15;
	if ((~pads_dat_t[0])) begin
		sdpads_data_i[0] <= pads_dat_o[0];
	end
	if ((~pads_dat_t[1])) begin
		sdpads_data_i[1] <= pads_dat_o[1];
	end
	if ((~pads_dat_t[2])) begin
		sdpads_data_i[2] <= pads_dat_o[2];
	end
	if ((~pads_dat_t[3])) begin
		sdpads_data_i[3] <= pads_dat_o[3];
	end
end
assign sdcore_crc16_inserter_sink_valid = sdcore_sink_sink_valid0;
assign sdcore_sink_sink_ready0 = sdcore_crc16_inserter_sink_ready;
assign sdcore_crc16_inserter_sink_first = sdcore_sink_sink_first0;
assign sdcore_crc16_inserter_sink_last = sdcore_sink_sink_last0;
assign sdcore_crc16_inserter_sink_payload_data = sdcore_sink_sink_payload_data0;
assign sdcore_source_source_valid0 = sdcore_source_source_valid1;
assign sdcore_source_source_ready1 = sdcore_source_source_ready0;
assign sdcore_source_source_first0 = sdcore_source_source_first1;
assign sdcore_source_source_last0 = sdcore_source_source_last1;
assign sdcore_source_source_payload_data0 = sdcore_source_source_payload_data1;
assign sdcore_cmd_type = sdcore_csrfield_cmd_type;
assign sdcore_data_type = sdcore_csrfield_data_type;
assign sdcore_cmd = sdcore_csrfield_cmd;
assign sdcore_csrfield_done0 = sdcore_cmd_done;
assign sdcore_csrfield_error0 = sdcore_cmd_error;
assign sdcore_csrfield_timeout0 = sdcore_cmd_timeout;
assign sdcore_csrfield_crc0 = 1'd0;
assign sdcore_csrfield_done1 = sdcore_data_done;
assign sdcore_csrfield_error1 = sdcore_data_error;
assign sdcore_csrfield_timeout1 = sdcore_data_timeout;
assign sdcore_csrfield_crc1 = 1'd0;
assign sdcore_crc7_inserter_din = {1'd0, 1'd1, sdcore_cmd, sdcore_cmd_argument_storage};
assign sdcore_crc7_inserter_reset = 1'd1;
assign sdcore_crc7_inserter_enable = 1'd1;
assign sdcore_crc7_inserter_reg1 = {sdcore_crc7_inserter_reg0[5], sdcore_crc7_inserter_reg0[4], sdcore_crc7_inserter_reg0[3], (sdcore_crc7_inserter_reg0[2] ^ (sdcore_crc7_inserter_din[39] ^ sdcore_crc7_inserter_reg0[6])), sdcore_crc7_inserter_reg0[1], sdcore_crc7_inserter_reg0[0], (sdcore_crc7_inserter_din[39] ^ sdcore_crc7_inserter_reg0[6])};
assign sdcore_crc7_inserter_reg2 = {sdcore_crc7_inserter_reg1[5], sdcore_crc7_inserter_reg1[4], sdcore_crc7_inserter_reg1[3], (sdcore_crc7_inserter_reg1[2] ^ (sdcore_crc7_inserter_din[38] ^ sdcore_crc7_inserter_reg1[6])), sdcore_crc7_inserter_reg1[1], sdcore_crc7_inserter_reg1[0], (sdcore_crc7_inserter_din[38] ^ sdcore_crc7_inserter_reg1[6])};
assign sdcore_crc7_inserter_reg3 = {sdcore_crc7_inserter_reg2[5], sdcore_crc7_inserter_reg2[4], sdcore_crc7_inserter_reg2[3], (sdcore_crc7_inserter_reg2[2] ^ (sdcore_crc7_inserter_din[37] ^ sdcore_crc7_inserter_reg2[6])), sdcore_crc7_inserter_reg2[1], sdcore_crc7_inserter_reg2[0], (sdcore_crc7_inserter_din[37] ^ sdcore_crc7_inserter_reg2[6])};
assign sdcore_crc7_inserter_reg4 = {sdcore_crc7_inserter_reg3[5], sdcore_crc7_inserter_reg3[4], sdcore_crc7_inserter_reg3[3], (sdcore_crc7_inserter_reg3[2] ^ (sdcore_crc7_inserter_din[36] ^ sdcore_crc7_inserter_reg3[6])), sdcore_crc7_inserter_reg3[1], sdcore_crc7_inserter_reg3[0], (sdcore_crc7_inserter_din[36] ^ sdcore_crc7_inserter_reg3[6])};
assign sdcore_crc7_inserter_reg5 = {sdcore_crc7_inserter_reg4[5], sdcore_crc7_inserter_reg4[4], sdcore_crc7_inserter_reg4[3], (sdcore_crc7_inserter_reg4[2] ^ (sdcore_crc7_inserter_din[35] ^ sdcore_crc7_inserter_reg4[6])), sdcore_crc7_inserter_reg4[1], sdcore_crc7_inserter_reg4[0], (sdcore_crc7_inserter_din[35] ^ sdcore_crc7_inserter_reg4[6])};
assign sdcore_crc7_inserter_reg6 = {sdcore_crc7_inserter_reg5[5], sdcore_crc7_inserter_reg5[4], sdcore_crc7_inserter_reg5[3], (sdcore_crc7_inserter_reg5[2] ^ (sdcore_crc7_inserter_din[34] ^ sdcore_crc7_inserter_reg5[6])), sdcore_crc7_inserter_reg5[1], sdcore_crc7_inserter_reg5[0], (sdcore_crc7_inserter_din[34] ^ sdcore_crc7_inserter_reg5[6])};
assign sdcore_crc7_inserter_reg7 = {sdcore_crc7_inserter_reg6[5], sdcore_crc7_inserter_reg6[4], sdcore_crc7_inserter_reg6[3], (sdcore_crc7_inserter_reg6[2] ^ (sdcore_crc7_inserter_din[33] ^ sdcore_crc7_inserter_reg6[6])), sdcore_crc7_inserter_reg6[1], sdcore_crc7_inserter_reg6[0], (sdcore_crc7_inserter_din[33] ^ sdcore_crc7_inserter_reg6[6])};
assign sdcore_crc7_inserter_reg8 = {sdcore_crc7_inserter_reg7[5], sdcore_crc7_inserter_reg7[4], sdcore_crc7_inserter_reg7[3], (sdcore_crc7_inserter_reg7[2] ^ (sdcore_crc7_inserter_din[32] ^ sdcore_crc7_inserter_reg7[6])), sdcore_crc7_inserter_reg7[1], sdcore_crc7_inserter_reg7[0], (sdcore_crc7_inserter_din[32] ^ sdcore_crc7_inserter_reg7[6])};
assign sdcore_crc7_inserter_reg9 = {sdcore_crc7_inserter_reg8[5], sdcore_crc7_inserter_reg8[4], sdcore_crc7_inserter_reg8[3], (sdcore_crc7_inserter_reg8[2] ^ (sdcore_crc7_inserter_din[31] ^ sdcore_crc7_inserter_reg8[6])), sdcore_crc7_inserter_reg8[1], sdcore_crc7_inserter_reg8[0], (sdcore_crc7_inserter_din[31] ^ sdcore_crc7_inserter_reg8[6])};
assign sdcore_crc7_inserter_reg10 = {sdcore_crc7_inserter_reg9[5], sdcore_crc7_inserter_reg9[4], sdcore_crc7_inserter_reg9[3], (sdcore_crc7_inserter_reg9[2] ^ (sdcore_crc7_inserter_din[30] ^ sdcore_crc7_inserter_reg9[6])), sdcore_crc7_inserter_reg9[1], sdcore_crc7_inserter_reg9[0], (sdcore_crc7_inserter_din[30] ^ sdcore_crc7_inserter_reg9[6])};
assign sdcore_crc7_inserter_reg11 = {sdcore_crc7_inserter_reg10[5], sdcore_crc7_inserter_reg10[4], sdcore_crc7_inserter_reg10[3], (sdcore_crc7_inserter_reg10[2] ^ (sdcore_crc7_inserter_din[29] ^ sdcore_crc7_inserter_reg10[6])), sdcore_crc7_inserter_reg10[1], sdcore_crc7_inserter_reg10[0], (sdcore_crc7_inserter_din[29] ^ sdcore_crc7_inserter_reg10[6])};
assign sdcore_crc7_inserter_reg12 = {sdcore_crc7_inserter_reg11[5], sdcore_crc7_inserter_reg11[4], sdcore_crc7_inserter_reg11[3], (sdcore_crc7_inserter_reg11[2] ^ (sdcore_crc7_inserter_din[28] ^ sdcore_crc7_inserter_reg11[6])), sdcore_crc7_inserter_reg11[1], sdcore_crc7_inserter_reg11[0], (sdcore_crc7_inserter_din[28] ^ sdcore_crc7_inserter_reg11[6])};
assign sdcore_crc7_inserter_reg13 = {sdcore_crc7_inserter_reg12[5], sdcore_crc7_inserter_reg12[4], sdcore_crc7_inserter_reg12[3], (sdcore_crc7_inserter_reg12[2] ^ (sdcore_crc7_inserter_din[27] ^ sdcore_crc7_inserter_reg12[6])), sdcore_crc7_inserter_reg12[1], sdcore_crc7_inserter_reg12[0], (sdcore_crc7_inserter_din[27] ^ sdcore_crc7_inserter_reg12[6])};
assign sdcore_crc7_inserter_reg14 = {sdcore_crc7_inserter_reg13[5], sdcore_crc7_inserter_reg13[4], sdcore_crc7_inserter_reg13[3], (sdcore_crc7_inserter_reg13[2] ^ (sdcore_crc7_inserter_din[26] ^ sdcore_crc7_inserter_reg13[6])), sdcore_crc7_inserter_reg13[1], sdcore_crc7_inserter_reg13[0], (sdcore_crc7_inserter_din[26] ^ sdcore_crc7_inserter_reg13[6])};
assign sdcore_crc7_inserter_reg15 = {sdcore_crc7_inserter_reg14[5], sdcore_crc7_inserter_reg14[4], sdcore_crc7_inserter_reg14[3], (sdcore_crc7_inserter_reg14[2] ^ (sdcore_crc7_inserter_din[25] ^ sdcore_crc7_inserter_reg14[6])), sdcore_crc7_inserter_reg14[1], sdcore_crc7_inserter_reg14[0], (sdcore_crc7_inserter_din[25] ^ sdcore_crc7_inserter_reg14[6])};
assign sdcore_crc7_inserter_reg16 = {sdcore_crc7_inserter_reg15[5], sdcore_crc7_inserter_reg15[4], sdcore_crc7_inserter_reg15[3], (sdcore_crc7_inserter_reg15[2] ^ (sdcore_crc7_inserter_din[24] ^ sdcore_crc7_inserter_reg15[6])), sdcore_crc7_inserter_reg15[1], sdcore_crc7_inserter_reg15[0], (sdcore_crc7_inserter_din[24] ^ sdcore_crc7_inserter_reg15[6])};
assign sdcore_crc7_inserter_reg17 = {sdcore_crc7_inserter_reg16[5], sdcore_crc7_inserter_reg16[4], sdcore_crc7_inserter_reg16[3], (sdcore_crc7_inserter_reg16[2] ^ (sdcore_crc7_inserter_din[23] ^ sdcore_crc7_inserter_reg16[6])), sdcore_crc7_inserter_reg16[1], sdcore_crc7_inserter_reg16[0], (sdcore_crc7_inserter_din[23] ^ sdcore_crc7_inserter_reg16[6])};
assign sdcore_crc7_inserter_reg18 = {sdcore_crc7_inserter_reg17[5], sdcore_crc7_inserter_reg17[4], sdcore_crc7_inserter_reg17[3], (sdcore_crc7_inserter_reg17[2] ^ (sdcore_crc7_inserter_din[22] ^ sdcore_crc7_inserter_reg17[6])), sdcore_crc7_inserter_reg17[1], sdcore_crc7_inserter_reg17[0], (sdcore_crc7_inserter_din[22] ^ sdcore_crc7_inserter_reg17[6])};
assign sdcore_crc7_inserter_reg19 = {sdcore_crc7_inserter_reg18[5], sdcore_crc7_inserter_reg18[4], sdcore_crc7_inserter_reg18[3], (sdcore_crc7_inserter_reg18[2] ^ (sdcore_crc7_inserter_din[21] ^ sdcore_crc7_inserter_reg18[6])), sdcore_crc7_inserter_reg18[1], sdcore_crc7_inserter_reg18[0], (sdcore_crc7_inserter_din[21] ^ sdcore_crc7_inserter_reg18[6])};
assign sdcore_crc7_inserter_reg20 = {sdcore_crc7_inserter_reg19[5], sdcore_crc7_inserter_reg19[4], sdcore_crc7_inserter_reg19[3], (sdcore_crc7_inserter_reg19[2] ^ (sdcore_crc7_inserter_din[20] ^ sdcore_crc7_inserter_reg19[6])), sdcore_crc7_inserter_reg19[1], sdcore_crc7_inserter_reg19[0], (sdcore_crc7_inserter_din[20] ^ sdcore_crc7_inserter_reg19[6])};
assign sdcore_crc7_inserter_reg21 = {sdcore_crc7_inserter_reg20[5], sdcore_crc7_inserter_reg20[4], sdcore_crc7_inserter_reg20[3], (sdcore_crc7_inserter_reg20[2] ^ (sdcore_crc7_inserter_din[19] ^ sdcore_crc7_inserter_reg20[6])), sdcore_crc7_inserter_reg20[1], sdcore_crc7_inserter_reg20[0], (sdcore_crc7_inserter_din[19] ^ sdcore_crc7_inserter_reg20[6])};
assign sdcore_crc7_inserter_reg22 = {sdcore_crc7_inserter_reg21[5], sdcore_crc7_inserter_reg21[4], sdcore_crc7_inserter_reg21[3], (sdcore_crc7_inserter_reg21[2] ^ (sdcore_crc7_inserter_din[18] ^ sdcore_crc7_inserter_reg21[6])), sdcore_crc7_inserter_reg21[1], sdcore_crc7_inserter_reg21[0], (sdcore_crc7_inserter_din[18] ^ sdcore_crc7_inserter_reg21[6])};
assign sdcore_crc7_inserter_reg23 = {sdcore_crc7_inserter_reg22[5], sdcore_crc7_inserter_reg22[4], sdcore_crc7_inserter_reg22[3], (sdcore_crc7_inserter_reg22[2] ^ (sdcore_crc7_inserter_din[17] ^ sdcore_crc7_inserter_reg22[6])), sdcore_crc7_inserter_reg22[1], sdcore_crc7_inserter_reg22[0], (sdcore_crc7_inserter_din[17] ^ sdcore_crc7_inserter_reg22[6])};
assign sdcore_crc7_inserter_reg24 = {sdcore_crc7_inserter_reg23[5], sdcore_crc7_inserter_reg23[4], sdcore_crc7_inserter_reg23[3], (sdcore_crc7_inserter_reg23[2] ^ (sdcore_crc7_inserter_din[16] ^ sdcore_crc7_inserter_reg23[6])), sdcore_crc7_inserter_reg23[1], sdcore_crc7_inserter_reg23[0], (sdcore_crc7_inserter_din[16] ^ sdcore_crc7_inserter_reg23[6])};
assign sdcore_crc7_inserter_reg25 = {sdcore_crc7_inserter_reg24[5], sdcore_crc7_inserter_reg24[4], sdcore_crc7_inserter_reg24[3], (sdcore_crc7_inserter_reg24[2] ^ (sdcore_crc7_inserter_din[15] ^ sdcore_crc7_inserter_reg24[6])), sdcore_crc7_inserter_reg24[1], sdcore_crc7_inserter_reg24[0], (sdcore_crc7_inserter_din[15] ^ sdcore_crc7_inserter_reg24[6])};
assign sdcore_crc7_inserter_reg26 = {sdcore_crc7_inserter_reg25[5], sdcore_crc7_inserter_reg25[4], sdcore_crc7_inserter_reg25[3], (sdcore_crc7_inserter_reg25[2] ^ (sdcore_crc7_inserter_din[14] ^ sdcore_crc7_inserter_reg25[6])), sdcore_crc7_inserter_reg25[1], sdcore_crc7_inserter_reg25[0], (sdcore_crc7_inserter_din[14] ^ sdcore_crc7_inserter_reg25[6])};
assign sdcore_crc7_inserter_reg27 = {sdcore_crc7_inserter_reg26[5], sdcore_crc7_inserter_reg26[4], sdcore_crc7_inserter_reg26[3], (sdcore_crc7_inserter_reg26[2] ^ (sdcore_crc7_inserter_din[13] ^ sdcore_crc7_inserter_reg26[6])), sdcore_crc7_inserter_reg26[1], sdcore_crc7_inserter_reg26[0], (sdcore_crc7_inserter_din[13] ^ sdcore_crc7_inserter_reg26[6])};
assign sdcore_crc7_inserter_reg28 = {sdcore_crc7_inserter_reg27[5], sdcore_crc7_inserter_reg27[4], sdcore_crc7_inserter_reg27[3], (sdcore_crc7_inserter_reg27[2] ^ (sdcore_crc7_inserter_din[12] ^ sdcore_crc7_inserter_reg27[6])), sdcore_crc7_inserter_reg27[1], sdcore_crc7_inserter_reg27[0], (sdcore_crc7_inserter_din[12] ^ sdcore_crc7_inserter_reg27[6])};
assign sdcore_crc7_inserter_reg29 = {sdcore_crc7_inserter_reg28[5], sdcore_crc7_inserter_reg28[4], sdcore_crc7_inserter_reg28[3], (sdcore_crc7_inserter_reg28[2] ^ (sdcore_crc7_inserter_din[11] ^ sdcore_crc7_inserter_reg28[6])), sdcore_crc7_inserter_reg28[1], sdcore_crc7_inserter_reg28[0], (sdcore_crc7_inserter_din[11] ^ sdcore_crc7_inserter_reg28[6])};
assign sdcore_crc7_inserter_reg30 = {sdcore_crc7_inserter_reg29[5], sdcore_crc7_inserter_reg29[4], sdcore_crc7_inserter_reg29[3], (sdcore_crc7_inserter_reg29[2] ^ (sdcore_crc7_inserter_din[10] ^ sdcore_crc7_inserter_reg29[6])), sdcore_crc7_inserter_reg29[1], sdcore_crc7_inserter_reg29[0], (sdcore_crc7_inserter_din[10] ^ sdcore_crc7_inserter_reg29[6])};
assign sdcore_crc7_inserter_reg31 = {sdcore_crc7_inserter_reg30[5], sdcore_crc7_inserter_reg30[4], sdcore_crc7_inserter_reg30[3], (sdcore_crc7_inserter_reg30[2] ^ (sdcore_crc7_inserter_din[9] ^ sdcore_crc7_inserter_reg30[6])), sdcore_crc7_inserter_reg30[1], sdcore_crc7_inserter_reg30[0], (sdcore_crc7_inserter_din[9] ^ sdcore_crc7_inserter_reg30[6])};
assign sdcore_crc7_inserter_reg32 = {sdcore_crc7_inserter_reg31[5], sdcore_crc7_inserter_reg31[4], sdcore_crc7_inserter_reg31[3], (sdcore_crc7_inserter_reg31[2] ^ (sdcore_crc7_inserter_din[8] ^ sdcore_crc7_inserter_reg31[6])), sdcore_crc7_inserter_reg31[1], sdcore_crc7_inserter_reg31[0], (sdcore_crc7_inserter_din[8] ^ sdcore_crc7_inserter_reg31[6])};
assign sdcore_crc7_inserter_reg33 = {sdcore_crc7_inserter_reg32[5], sdcore_crc7_inserter_reg32[4], sdcore_crc7_inserter_reg32[3], (sdcore_crc7_inserter_reg32[2] ^ (sdcore_crc7_inserter_din[7] ^ sdcore_crc7_inserter_reg32[6])), sdcore_crc7_inserter_reg32[1], sdcore_crc7_inserter_reg32[0], (sdcore_crc7_inserter_din[7] ^ sdcore_crc7_inserter_reg32[6])};
assign sdcore_crc7_inserter_reg34 = {sdcore_crc7_inserter_reg33[5], sdcore_crc7_inserter_reg33[4], sdcore_crc7_inserter_reg33[3], (sdcore_crc7_inserter_reg33[2] ^ (sdcore_crc7_inserter_din[6] ^ sdcore_crc7_inserter_reg33[6])), sdcore_crc7_inserter_reg33[1], sdcore_crc7_inserter_reg33[0], (sdcore_crc7_inserter_din[6] ^ sdcore_crc7_inserter_reg33[6])};
assign sdcore_crc7_inserter_reg35 = {sdcore_crc7_inserter_reg34[5], sdcore_crc7_inserter_reg34[4], sdcore_crc7_inserter_reg34[3], (sdcore_crc7_inserter_reg34[2] ^ (sdcore_crc7_inserter_din[5] ^ sdcore_crc7_inserter_reg34[6])), sdcore_crc7_inserter_reg34[1], sdcore_crc7_inserter_reg34[0], (sdcore_crc7_inserter_din[5] ^ sdcore_crc7_inserter_reg34[6])};
assign sdcore_crc7_inserter_reg36 = {sdcore_crc7_inserter_reg35[5], sdcore_crc7_inserter_reg35[4], sdcore_crc7_inserter_reg35[3], (sdcore_crc7_inserter_reg35[2] ^ (sdcore_crc7_inserter_din[4] ^ sdcore_crc7_inserter_reg35[6])), sdcore_crc7_inserter_reg35[1], sdcore_crc7_inserter_reg35[0], (sdcore_crc7_inserter_din[4] ^ sdcore_crc7_inserter_reg35[6])};
assign sdcore_crc7_inserter_reg37 = {sdcore_crc7_inserter_reg36[5], sdcore_crc7_inserter_reg36[4], sdcore_crc7_inserter_reg36[3], (sdcore_crc7_inserter_reg36[2] ^ (sdcore_crc7_inserter_din[3] ^ sdcore_crc7_inserter_reg36[6])), sdcore_crc7_inserter_reg36[1], sdcore_crc7_inserter_reg36[0], (sdcore_crc7_inserter_din[3] ^ sdcore_crc7_inserter_reg36[6])};
assign sdcore_crc7_inserter_reg38 = {sdcore_crc7_inserter_reg37[5], sdcore_crc7_inserter_reg37[4], sdcore_crc7_inserter_reg37[3], (sdcore_crc7_inserter_reg37[2] ^ (sdcore_crc7_inserter_din[2] ^ sdcore_crc7_inserter_reg37[6])), sdcore_crc7_inserter_reg37[1], sdcore_crc7_inserter_reg37[0], (sdcore_crc7_inserter_din[2] ^ sdcore_crc7_inserter_reg37[6])};
assign sdcore_crc7_inserter_reg39 = {sdcore_crc7_inserter_reg38[5], sdcore_crc7_inserter_reg38[4], sdcore_crc7_inserter_reg38[3], (sdcore_crc7_inserter_reg38[2] ^ (sdcore_crc7_inserter_din[1] ^ sdcore_crc7_inserter_reg38[6])), sdcore_crc7_inserter_reg38[1], sdcore_crc7_inserter_reg38[0], (sdcore_crc7_inserter_din[1] ^ sdcore_crc7_inserter_reg38[6])};
assign sdcore_crc7_inserter_reg40 = {sdcore_crc7_inserter_reg39[5], sdcore_crc7_inserter_reg39[4], sdcore_crc7_inserter_reg39[3], (sdcore_crc7_inserter_reg39[2] ^ (sdcore_crc7_inserter_din[0] ^ sdcore_crc7_inserter_reg39[6])), sdcore_crc7_inserter_reg39[1], sdcore_crc7_inserter_reg39[0], (sdcore_crc7_inserter_din[0] ^ sdcore_crc7_inserter_reg39[6])};
always @(*) begin
	sdcore_crc7_inserter_crc <= 7'd0;
	if (sdcore_crc7_inserter_enable) begin
		sdcore_crc7_inserter_crc <= sdcore_crc7_inserter_reg40;
	end else begin
		sdcore_crc7_inserter_crc <= sdcore_crc7_inserter_reg0;
	end
end
assign sdcore_crc16_inserter_crc0_reset = ((sdcore_crc16_inserter_source_valid & sdcore_crc16_inserter_source_ready) & sdcore_crc16_inserter_source_last);
assign sdcore_crc16_inserter_crc0_enable = (sdcore_crc16_inserter_sink_valid & sdcore_crc16_inserter_sink_ready);
always @(*) begin
	sdcore_crc16_inserter_crc0_din <= 2'd0;
	sdcore_crc16_inserter_crc0_din[0] <= sdcore_crc16_inserter_sink_payload_data[0];
	sdcore_crc16_inserter_crc0_din[1] <= sdcore_crc16_inserter_sink_payload_data[4];
end
assign sdcore_crc16_inserter_crc1_reset = ((sdcore_crc16_inserter_source_valid & sdcore_crc16_inserter_source_ready) & sdcore_crc16_inserter_source_last);
assign sdcore_crc16_inserter_crc1_enable = (sdcore_crc16_inserter_sink_valid & sdcore_crc16_inserter_sink_ready);
always @(*) begin
	sdcore_crc16_inserter_crc1_din <= 2'd0;
	sdcore_crc16_inserter_crc1_din[0] <= sdcore_crc16_inserter_sink_payload_data[1];
	sdcore_crc16_inserter_crc1_din[1] <= sdcore_crc16_inserter_sink_payload_data[5];
end
assign sdcore_crc16_inserter_crc2_reset = ((sdcore_crc16_inserter_source_valid & sdcore_crc16_inserter_source_ready) & sdcore_crc16_inserter_source_last);
assign sdcore_crc16_inserter_crc2_enable = (sdcore_crc16_inserter_sink_valid & sdcore_crc16_inserter_sink_ready);
always @(*) begin
	sdcore_crc16_inserter_crc2_din <= 2'd0;
	sdcore_crc16_inserter_crc2_din[0] <= sdcore_crc16_inserter_sink_payload_data[2];
	sdcore_crc16_inserter_crc2_din[1] <= sdcore_crc16_inserter_sink_payload_data[6];
end
assign sdcore_crc16_inserter_crc3_reset = ((sdcore_crc16_inserter_source_valid & sdcore_crc16_inserter_source_ready) & sdcore_crc16_inserter_source_last);
assign sdcore_crc16_inserter_crc3_enable = (sdcore_crc16_inserter_sink_valid & sdcore_crc16_inserter_sink_ready);
always @(*) begin
	sdcore_crc16_inserter_crc3_din <= 2'd0;
	sdcore_crc16_inserter_crc3_din[0] <= sdcore_crc16_inserter_sink_payload_data[3];
	sdcore_crc16_inserter_crc3_din[1] <= sdcore_crc16_inserter_sink_payload_data[7];
end
assign sdcore_crc16_inserter_crc0_reg1 = {sdcore_crc16_inserter_crc0_reg0[14], sdcore_crc16_inserter_crc0_reg0[13], sdcore_crc16_inserter_crc0_reg0[12], (sdcore_crc16_inserter_crc0_reg0[11] ^ (sdcore_crc16_inserter_crc0_din[1] ^ sdcore_crc16_inserter_crc0_reg0[15])), sdcore_crc16_inserter_crc0_reg0[10], sdcore_crc16_inserter_crc0_reg0[9], sdcore_crc16_inserter_crc0_reg0[8], sdcore_crc16_inserter_crc0_reg0[7], sdcore_crc16_inserter_crc0_reg0[6], sdcore_crc16_inserter_crc0_reg0[5], (sdcore_crc16_inserter_crc0_reg0[4] ^ (sdcore_crc16_inserter_crc0_din[1] ^ sdcore_crc16_inserter_crc0_reg0[15])), sdcore_crc16_inserter_crc0_reg0[3], sdcore_crc16_inserter_crc0_reg0[2], sdcore_crc16_inserter_crc0_reg0[1], sdcore_crc16_inserter_crc0_reg0[0], (sdcore_crc16_inserter_crc0_din[1] ^ sdcore_crc16_inserter_crc0_reg0[15])};
assign sdcore_crc16_inserter_crc0_reg2 = {sdcore_crc16_inserter_crc0_reg1[14], sdcore_crc16_inserter_crc0_reg1[13], sdcore_crc16_inserter_crc0_reg1[12], (sdcore_crc16_inserter_crc0_reg1[11] ^ (sdcore_crc16_inserter_crc0_din[0] ^ sdcore_crc16_inserter_crc0_reg1[15])), sdcore_crc16_inserter_crc0_reg1[10], sdcore_crc16_inserter_crc0_reg1[9], sdcore_crc16_inserter_crc0_reg1[8], sdcore_crc16_inserter_crc0_reg1[7], sdcore_crc16_inserter_crc0_reg1[6], sdcore_crc16_inserter_crc0_reg1[5], (sdcore_crc16_inserter_crc0_reg1[4] ^ (sdcore_crc16_inserter_crc0_din[0] ^ sdcore_crc16_inserter_crc0_reg1[15])), sdcore_crc16_inserter_crc0_reg1[3], sdcore_crc16_inserter_crc0_reg1[2], sdcore_crc16_inserter_crc0_reg1[1], sdcore_crc16_inserter_crc0_reg1[0], (sdcore_crc16_inserter_crc0_din[0] ^ sdcore_crc16_inserter_crc0_reg1[15])};
always @(*) begin
	sdcore_crc16_inserter_crc0_crc <= 16'd0;
	if (sdcore_crc16_inserter_crc0_enable) begin
		sdcore_crc16_inserter_crc0_crc <= sdcore_crc16_inserter_crc0_reg2;
	end else begin
		sdcore_crc16_inserter_crc0_crc <= sdcore_crc16_inserter_crc0_reg0;
	end
end
assign sdcore_crc16_inserter_crc1_reg1 = {sdcore_crc16_inserter_crc1_reg0[14], sdcore_crc16_inserter_crc1_reg0[13], sdcore_crc16_inserter_crc1_reg0[12], (sdcore_crc16_inserter_crc1_reg0[11] ^ (sdcore_crc16_inserter_crc1_din[1] ^ sdcore_crc16_inserter_crc1_reg0[15])), sdcore_crc16_inserter_crc1_reg0[10], sdcore_crc16_inserter_crc1_reg0[9], sdcore_crc16_inserter_crc1_reg0[8], sdcore_crc16_inserter_crc1_reg0[7], sdcore_crc16_inserter_crc1_reg0[6], sdcore_crc16_inserter_crc1_reg0[5], (sdcore_crc16_inserter_crc1_reg0[4] ^ (sdcore_crc16_inserter_crc1_din[1] ^ sdcore_crc16_inserter_crc1_reg0[15])), sdcore_crc16_inserter_crc1_reg0[3], sdcore_crc16_inserter_crc1_reg0[2], sdcore_crc16_inserter_crc1_reg0[1], sdcore_crc16_inserter_crc1_reg0[0], (sdcore_crc16_inserter_crc1_din[1] ^ sdcore_crc16_inserter_crc1_reg0[15])};
assign sdcore_crc16_inserter_crc1_reg2 = {sdcore_crc16_inserter_crc1_reg1[14], sdcore_crc16_inserter_crc1_reg1[13], sdcore_crc16_inserter_crc1_reg1[12], (sdcore_crc16_inserter_crc1_reg1[11] ^ (sdcore_crc16_inserter_crc1_din[0] ^ sdcore_crc16_inserter_crc1_reg1[15])), sdcore_crc16_inserter_crc1_reg1[10], sdcore_crc16_inserter_crc1_reg1[9], sdcore_crc16_inserter_crc1_reg1[8], sdcore_crc16_inserter_crc1_reg1[7], sdcore_crc16_inserter_crc1_reg1[6], sdcore_crc16_inserter_crc1_reg1[5], (sdcore_crc16_inserter_crc1_reg1[4] ^ (sdcore_crc16_inserter_crc1_din[0] ^ sdcore_crc16_inserter_crc1_reg1[15])), sdcore_crc16_inserter_crc1_reg1[3], sdcore_crc16_inserter_crc1_reg1[2], sdcore_crc16_inserter_crc1_reg1[1], sdcore_crc16_inserter_crc1_reg1[0], (sdcore_crc16_inserter_crc1_din[0] ^ sdcore_crc16_inserter_crc1_reg1[15])};
always @(*) begin
	sdcore_crc16_inserter_crc1_crc <= 16'd0;
	if (sdcore_crc16_inserter_crc1_enable) begin
		sdcore_crc16_inserter_crc1_crc <= sdcore_crc16_inserter_crc1_reg2;
	end else begin
		sdcore_crc16_inserter_crc1_crc <= sdcore_crc16_inserter_crc1_reg0;
	end
end
assign sdcore_crc16_inserter_crc2_reg1 = {sdcore_crc16_inserter_crc2_reg0[14], sdcore_crc16_inserter_crc2_reg0[13], sdcore_crc16_inserter_crc2_reg0[12], (sdcore_crc16_inserter_crc2_reg0[11] ^ (sdcore_crc16_inserter_crc2_din[1] ^ sdcore_crc16_inserter_crc2_reg0[15])), sdcore_crc16_inserter_crc2_reg0[10], sdcore_crc16_inserter_crc2_reg0[9], sdcore_crc16_inserter_crc2_reg0[8], sdcore_crc16_inserter_crc2_reg0[7], sdcore_crc16_inserter_crc2_reg0[6], sdcore_crc16_inserter_crc2_reg0[5], (sdcore_crc16_inserter_crc2_reg0[4] ^ (sdcore_crc16_inserter_crc2_din[1] ^ sdcore_crc16_inserter_crc2_reg0[15])), sdcore_crc16_inserter_crc2_reg0[3], sdcore_crc16_inserter_crc2_reg0[2], sdcore_crc16_inserter_crc2_reg0[1], sdcore_crc16_inserter_crc2_reg0[0], (sdcore_crc16_inserter_crc2_din[1] ^ sdcore_crc16_inserter_crc2_reg0[15])};
assign sdcore_crc16_inserter_crc2_reg2 = {sdcore_crc16_inserter_crc2_reg1[14], sdcore_crc16_inserter_crc2_reg1[13], sdcore_crc16_inserter_crc2_reg1[12], (sdcore_crc16_inserter_crc2_reg1[11] ^ (sdcore_crc16_inserter_crc2_din[0] ^ sdcore_crc16_inserter_crc2_reg1[15])), sdcore_crc16_inserter_crc2_reg1[10], sdcore_crc16_inserter_crc2_reg1[9], sdcore_crc16_inserter_crc2_reg1[8], sdcore_crc16_inserter_crc2_reg1[7], sdcore_crc16_inserter_crc2_reg1[6], sdcore_crc16_inserter_crc2_reg1[5], (sdcore_crc16_inserter_crc2_reg1[4] ^ (sdcore_crc16_inserter_crc2_din[0] ^ sdcore_crc16_inserter_crc2_reg1[15])), sdcore_crc16_inserter_crc2_reg1[3], sdcore_crc16_inserter_crc2_reg1[2], sdcore_crc16_inserter_crc2_reg1[1], sdcore_crc16_inserter_crc2_reg1[0], (sdcore_crc16_inserter_crc2_din[0] ^ sdcore_crc16_inserter_crc2_reg1[15])};
always @(*) begin
	sdcore_crc16_inserter_crc2_crc <= 16'd0;
	if (sdcore_crc16_inserter_crc2_enable) begin
		sdcore_crc16_inserter_crc2_crc <= sdcore_crc16_inserter_crc2_reg2;
	end else begin
		sdcore_crc16_inserter_crc2_crc <= sdcore_crc16_inserter_crc2_reg0;
	end
end
assign sdcore_crc16_inserter_crc3_reg1 = {sdcore_crc16_inserter_crc3_reg0[14], sdcore_crc16_inserter_crc3_reg0[13], sdcore_crc16_inserter_crc3_reg0[12], (sdcore_crc16_inserter_crc3_reg0[11] ^ (sdcore_crc16_inserter_crc3_din[1] ^ sdcore_crc16_inserter_crc3_reg0[15])), sdcore_crc16_inserter_crc3_reg0[10], sdcore_crc16_inserter_crc3_reg0[9], sdcore_crc16_inserter_crc3_reg0[8], sdcore_crc16_inserter_crc3_reg0[7], sdcore_crc16_inserter_crc3_reg0[6], sdcore_crc16_inserter_crc3_reg0[5], (sdcore_crc16_inserter_crc3_reg0[4] ^ (sdcore_crc16_inserter_crc3_din[1] ^ sdcore_crc16_inserter_crc3_reg0[15])), sdcore_crc16_inserter_crc3_reg0[3], sdcore_crc16_inserter_crc3_reg0[2], sdcore_crc16_inserter_crc3_reg0[1], sdcore_crc16_inserter_crc3_reg0[0], (sdcore_crc16_inserter_crc3_din[1] ^ sdcore_crc16_inserter_crc3_reg0[15])};
assign sdcore_crc16_inserter_crc3_reg2 = {sdcore_crc16_inserter_crc3_reg1[14], sdcore_crc16_inserter_crc3_reg1[13], sdcore_crc16_inserter_crc3_reg1[12], (sdcore_crc16_inserter_crc3_reg1[11] ^ (sdcore_crc16_inserter_crc3_din[0] ^ sdcore_crc16_inserter_crc3_reg1[15])), sdcore_crc16_inserter_crc3_reg1[10], sdcore_crc16_inserter_crc3_reg1[9], sdcore_crc16_inserter_crc3_reg1[8], sdcore_crc16_inserter_crc3_reg1[7], sdcore_crc16_inserter_crc3_reg1[6], sdcore_crc16_inserter_crc3_reg1[5], (sdcore_crc16_inserter_crc3_reg1[4] ^ (sdcore_crc16_inserter_crc3_din[0] ^ sdcore_crc16_inserter_crc3_reg1[15])), sdcore_crc16_inserter_crc3_reg1[3], sdcore_crc16_inserter_crc3_reg1[2], sdcore_crc16_inserter_crc3_reg1[1], sdcore_crc16_inserter_crc3_reg1[0], (sdcore_crc16_inserter_crc3_din[0] ^ sdcore_crc16_inserter_crc3_reg1[15])};
always @(*) begin
	sdcore_crc16_inserter_crc3_crc <= 16'd0;
	if (sdcore_crc16_inserter_crc3_enable) begin
		sdcore_crc16_inserter_crc3_crc <= sdcore_crc16_inserter_crc3_reg2;
	end else begin
		sdcore_crc16_inserter_crc3_crc <= sdcore_crc16_inserter_crc3_reg0;
	end
end
always @(*) begin
	subfragments_sdcore_crc16inserter_next_state <= 1'd0;
	subfragments_sdcore_crc16inserter_next_state <= subfragments_sdcore_crc16inserter_state;
	case (subfragments_sdcore_crc16inserter_state)
		1'd1: begin
			if ((sdcore_crc16_inserter_source_valid & sdcore_crc16_inserter_source_ready)) begin
				if (sdcore_crc16_inserter_source_last) begin
					subfragments_sdcore_crc16inserter_next_state <= 1'd0;
				end
			end
		end
		default: begin
			if ((sdcore_crc16_inserter_sink_valid & sdcore_crc16_inserter_sink_ready)) begin
				if (sdcore_crc16_inserter_sink_last) begin
					subfragments_sdcore_crc16inserter_next_state <= 1'd1;
				end
			end
		end
	endcase
end
always @(*) begin
	sdcore_crc16_inserter_sink_ready <= 1'd0;
	case (subfragments_sdcore_crc16inserter_state)
		1'd1: begin
		end
		default: begin
			sdcore_crc16_inserter_sink_ready <= sdcore_crc16_inserter_source_ready;
		end
	endcase
end
always @(*) begin
	sdcore_crc16_inserter_source_valid <= 1'd0;
	case (subfragments_sdcore_crc16inserter_state)
		1'd1: begin
			sdcore_crc16_inserter_source_valid <= 1'd1;
		end
		default: begin
			sdcore_crc16_inserter_source_valid <= sdcore_crc16_inserter_sink_valid;
		end
	endcase
end
always @(*) begin
	sdcore_crc16_inserter_source_first <= 1'd0;
	case (subfragments_sdcore_crc16inserter_state)
		1'd1: begin
		end
		default: begin
			sdcore_crc16_inserter_source_first <= sdcore_crc16_inserter_sink_first;
		end
	endcase
end
always @(*) begin
	sdcore_crc16_inserter_count_sdcore_crc16inserter_next_value <= 3'd0;
	case (subfragments_sdcore_crc16inserter_state)
		1'd1: begin
			if ((sdcore_crc16_inserter_source_valid & sdcore_crc16_inserter_source_ready)) begin
				sdcore_crc16_inserter_count_sdcore_crc16inserter_next_value <= (sdcore_crc16_inserter_count + 1'd1);
			end
		end
		default: begin
			sdcore_crc16_inserter_count_sdcore_crc16inserter_next_value <= 1'd0;
		end
	endcase
end
always @(*) begin
	sdcore_crc16_inserter_source_last <= 1'd0;
	case (subfragments_sdcore_crc16inserter_state)
		1'd1: begin
			sdcore_crc16_inserter_source_last <= (sdcore_crc16_inserter_count == 3'd7);
		end
		default: begin
			sdcore_crc16_inserter_source_last <= 1'd0;
		end
	endcase
end
always @(*) begin
	sdcore_crc16_inserter_count_sdcore_crc16inserter_next_value_ce <= 1'd0;
	case (subfragments_sdcore_crc16inserter_state)
		1'd1: begin
			if ((sdcore_crc16_inserter_source_valid & sdcore_crc16_inserter_source_ready)) begin
				sdcore_crc16_inserter_count_sdcore_crc16inserter_next_value_ce <= 1'd1;
			end
		end
		default: begin
			sdcore_crc16_inserter_count_sdcore_crc16inserter_next_value_ce <= 1'd1;
		end
	endcase
end
always @(*) begin
	sdcore_crc16_inserter_source_payload_data <= 8'd0;
	case (subfragments_sdcore_crc16inserter_state)
		1'd1: begin
			case (sdcore_crc16_inserter_count)
				1'd0: begin
					sdcore_crc16_inserter_source_payload_data[0] <= sdcore_crc16_inserter_crc0_crc[14];
					sdcore_crc16_inserter_source_payload_data[1] <= sdcore_crc16_inserter_crc1_crc[14];
					sdcore_crc16_inserter_source_payload_data[2] <= sdcore_crc16_inserter_crc2_crc[14];
					sdcore_crc16_inserter_source_payload_data[3] <= sdcore_crc16_inserter_crc3_crc[14];
					sdcore_crc16_inserter_source_payload_data[4] <= sdcore_crc16_inserter_crc0_crc[15];
					sdcore_crc16_inserter_source_payload_data[5] <= sdcore_crc16_inserter_crc1_crc[15];
					sdcore_crc16_inserter_source_payload_data[6] <= sdcore_crc16_inserter_crc2_crc[15];
					sdcore_crc16_inserter_source_payload_data[7] <= sdcore_crc16_inserter_crc3_crc[15];
				end
				1'd1: begin
					sdcore_crc16_inserter_source_payload_data[0] <= sdcore_crc16_inserter_crc0_crc[12];
					sdcore_crc16_inserter_source_payload_data[1] <= sdcore_crc16_inserter_crc1_crc[12];
					sdcore_crc16_inserter_source_payload_data[2] <= sdcore_crc16_inserter_crc2_crc[12];
					sdcore_crc16_inserter_source_payload_data[3] <= sdcore_crc16_inserter_crc3_crc[12];
					sdcore_crc16_inserter_source_payload_data[4] <= sdcore_crc16_inserter_crc0_crc[13];
					sdcore_crc16_inserter_source_payload_data[5] <= sdcore_crc16_inserter_crc1_crc[13];
					sdcore_crc16_inserter_source_payload_data[6] <= sdcore_crc16_inserter_crc2_crc[13];
					sdcore_crc16_inserter_source_payload_data[7] <= sdcore_crc16_inserter_crc3_crc[13];
				end
				2'd2: begin
					sdcore_crc16_inserter_source_payload_data[0] <= sdcore_crc16_inserter_crc0_crc[10];
					sdcore_crc16_inserter_source_payload_data[1] <= sdcore_crc16_inserter_crc1_crc[10];
					sdcore_crc16_inserter_source_payload_data[2] <= sdcore_crc16_inserter_crc2_crc[10];
					sdcore_crc16_inserter_source_payload_data[3] <= sdcore_crc16_inserter_crc3_crc[10];
					sdcore_crc16_inserter_source_payload_data[4] <= sdcore_crc16_inserter_crc0_crc[11];
					sdcore_crc16_inserter_source_payload_data[5] <= sdcore_crc16_inserter_crc1_crc[11];
					sdcore_crc16_inserter_source_payload_data[6] <= sdcore_crc16_inserter_crc2_crc[11];
					sdcore_crc16_inserter_source_payload_data[7] <= sdcore_crc16_inserter_crc3_crc[11];
				end
				2'd3: begin
					sdcore_crc16_inserter_source_payload_data[0] <= sdcore_crc16_inserter_crc0_crc[8];
					sdcore_crc16_inserter_source_payload_data[1] <= sdcore_crc16_inserter_crc1_crc[8];
					sdcore_crc16_inserter_source_payload_data[2] <= sdcore_crc16_inserter_crc2_crc[8];
					sdcore_crc16_inserter_source_payload_data[3] <= sdcore_crc16_inserter_crc3_crc[8];
					sdcore_crc16_inserter_source_payload_data[4] <= sdcore_crc16_inserter_crc0_crc[9];
					sdcore_crc16_inserter_source_payload_data[5] <= sdcore_crc16_inserter_crc1_crc[9];
					sdcore_crc16_inserter_source_payload_data[6] <= sdcore_crc16_inserter_crc2_crc[9];
					sdcore_crc16_inserter_source_payload_data[7] <= sdcore_crc16_inserter_crc3_crc[9];
				end
				3'd4: begin
					sdcore_crc16_inserter_source_payload_data[0] <= sdcore_crc16_inserter_crc0_crc[6];
					sdcore_crc16_inserter_source_payload_data[1] <= sdcore_crc16_inserter_crc1_crc[6];
					sdcore_crc16_inserter_source_payload_data[2] <= sdcore_crc16_inserter_crc2_crc[6];
					sdcore_crc16_inserter_source_payload_data[3] <= sdcore_crc16_inserter_crc3_crc[6];
					sdcore_crc16_inserter_source_payload_data[4] <= sdcore_crc16_inserter_crc0_crc[7];
					sdcore_crc16_inserter_source_payload_data[5] <= sdcore_crc16_inserter_crc1_crc[7];
					sdcore_crc16_inserter_source_payload_data[6] <= sdcore_crc16_inserter_crc2_crc[7];
					sdcore_crc16_inserter_source_payload_data[7] <= sdcore_crc16_inserter_crc3_crc[7];
				end
				3'd5: begin
					sdcore_crc16_inserter_source_payload_data[0] <= sdcore_crc16_inserter_crc0_crc[4];
					sdcore_crc16_inserter_source_payload_data[1] <= sdcore_crc16_inserter_crc1_crc[4];
					sdcore_crc16_inserter_source_payload_data[2] <= sdcore_crc16_inserter_crc2_crc[4];
					sdcore_crc16_inserter_source_payload_data[3] <= sdcore_crc16_inserter_crc3_crc[4];
					sdcore_crc16_inserter_source_payload_data[4] <= sdcore_crc16_inserter_crc0_crc[5];
					sdcore_crc16_inserter_source_payload_data[5] <= sdcore_crc16_inserter_crc1_crc[5];
					sdcore_crc16_inserter_source_payload_data[6] <= sdcore_crc16_inserter_crc2_crc[5];
					sdcore_crc16_inserter_source_payload_data[7] <= sdcore_crc16_inserter_crc3_crc[5];
				end
				3'd6: begin
					sdcore_crc16_inserter_source_payload_data[0] <= sdcore_crc16_inserter_crc0_crc[2];
					sdcore_crc16_inserter_source_payload_data[1] <= sdcore_crc16_inserter_crc1_crc[2];
					sdcore_crc16_inserter_source_payload_data[2] <= sdcore_crc16_inserter_crc2_crc[2];
					sdcore_crc16_inserter_source_payload_data[3] <= sdcore_crc16_inserter_crc3_crc[2];
					sdcore_crc16_inserter_source_payload_data[4] <= sdcore_crc16_inserter_crc0_crc[3];
					sdcore_crc16_inserter_source_payload_data[5] <= sdcore_crc16_inserter_crc1_crc[3];
					sdcore_crc16_inserter_source_payload_data[6] <= sdcore_crc16_inserter_crc2_crc[3];
					sdcore_crc16_inserter_source_payload_data[7] <= sdcore_crc16_inserter_crc3_crc[3];
				end
				3'd7: begin
					sdcore_crc16_inserter_source_payload_data[0] <= sdcore_crc16_inserter_crc0_crc[0];
					sdcore_crc16_inserter_source_payload_data[1] <= sdcore_crc16_inserter_crc1_crc[0];
					sdcore_crc16_inserter_source_payload_data[2] <= sdcore_crc16_inserter_crc2_crc[0];
					sdcore_crc16_inserter_source_payload_data[3] <= sdcore_crc16_inserter_crc3_crc[0];
					sdcore_crc16_inserter_source_payload_data[4] <= sdcore_crc16_inserter_crc0_crc[1];
					sdcore_crc16_inserter_source_payload_data[5] <= sdcore_crc16_inserter_crc1_crc[1];
					sdcore_crc16_inserter_source_payload_data[6] <= sdcore_crc16_inserter_crc2_crc[1];
					sdcore_crc16_inserter_source_payload_data[7] <= sdcore_crc16_inserter_crc3_crc[1];
				end
			endcase
		end
		default: begin
			sdcore_crc16_inserter_source_payload_data <= sdcore_crc16_inserter_sink_payload_data;
		end
	endcase
end
assign sdcore_fifo_sink_valid = sdcore_sink_sink_valid1;
assign sdcore_sink_sink_ready1 = sdcore_fifo_sink_ready;
assign sdcore_fifo_sink_first = sdcore_sink_sink_first1;
assign sdcore_fifo_sink_last = sdcore_sink_sink_last1;
assign sdcore_fifo_sink_payload_data = sdcore_sink_sink_payload_data1;
assign sdcore_source_source_first1 = sdcore_fifo_source_first;
assign sdcore_source_source_last1 = sdcore_fifo_source_last;
assign sdcore_source_source_payload_data1 = sdcore_fifo_source_payload_data;
assign sdcore_source_source_valid1 = (sdcore_fifo_level >= 4'd8);
assign sdcore_fifo_source_ready = (sdcore_source_source_valid1 & sdcore_source_source_ready1);
assign sdcore_fifo_reset = ((sdcore_sink_sink_valid1 & sdcore_sink_sink_ready1) & sdcore_sink_sink_last1);
assign sdcore_fifo_syncfifo_din = {sdcore_fifo_fifo_in_last, sdcore_fifo_fifo_in_first, sdcore_fifo_fifo_in_payload_data};
assign {sdcore_fifo_fifo_out_last, sdcore_fifo_fifo_out_first, sdcore_fifo_fifo_out_payload_data} = sdcore_fifo_syncfifo_dout;
assign {sdcore_fifo_fifo_out_last, sdcore_fifo_fifo_out_first, sdcore_fifo_fifo_out_payload_data} = sdcore_fifo_syncfifo_dout;
assign {sdcore_fifo_fifo_out_last, sdcore_fifo_fifo_out_first, sdcore_fifo_fifo_out_payload_data} = sdcore_fifo_syncfifo_dout;
assign sdcore_fifo_sink_ready = sdcore_fifo_syncfifo_writable;
assign sdcore_fifo_syncfifo_we = sdcore_fifo_sink_valid;
assign sdcore_fifo_fifo_in_first = sdcore_fifo_sink_first;
assign sdcore_fifo_fifo_in_last = sdcore_fifo_sink_last;
assign sdcore_fifo_fifo_in_payload_data = sdcore_fifo_sink_payload_data;
assign sdcore_fifo_source_valid = sdcore_fifo_syncfifo_readable;
assign sdcore_fifo_source_first = sdcore_fifo_fifo_out_first;
assign sdcore_fifo_source_last = sdcore_fifo_fifo_out_last;
assign sdcore_fifo_source_payload_data = sdcore_fifo_fifo_out_payload_data;
assign sdcore_fifo_syncfifo_re = sdcore_fifo_source_ready;
always @(*) begin
	sdcore_fifo_wrport_adr <= 3'd0;
	if (sdcore_fifo_replace) begin
		sdcore_fifo_wrport_adr <= (sdcore_fifo_produce - 1'd1);
	end else begin
		sdcore_fifo_wrport_adr <= sdcore_fifo_produce;
	end
end
assign sdcore_fifo_wrport_dat_w = sdcore_fifo_syncfifo_din;
assign sdcore_fifo_wrport_we = (sdcore_fifo_syncfifo_we & (sdcore_fifo_syncfifo_writable | sdcore_fifo_replace));
assign sdcore_fifo_do_read = (sdcore_fifo_syncfifo_readable & sdcore_fifo_syncfifo_re);
assign sdcore_fifo_rdport_adr = sdcore_fifo_consume;
assign sdcore_fifo_syncfifo_dout = sdcore_fifo_rdport_dat_r;
assign sdcore_fifo_syncfifo_writable = (sdcore_fifo_level != 4'd8);
assign sdcore_fifo_syncfifo_readable = (sdcore_fifo_level != 1'd0);
always @(*) begin
	subfragments_sdcore_fsm_next_state <= 3'd0;
	subfragments_sdcore_fsm_next_state <= subfragments_sdcore_fsm_state;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
			if (cmdw_sink_ready) begin
				if (cmdw_sink_last) begin
					if ((sdcore_cmd_type == 1'd0)) begin
						subfragments_sdcore_fsm_next_state <= 1'd0;
					end else begin
						subfragments_sdcore_fsm_next_state <= 2'd2;
					end
				end
			end
		end
		2'd2: begin
			if (cmdr_source_valid) begin
				if ((cmdr_source_payload_status == 1'd1)) begin
					subfragments_sdcore_fsm_next_state <= 1'd0;
				end else begin
					if (cmdr_source_last) begin
						if ((sdcore_data_type == 2'd2)) begin
							subfragments_sdcore_fsm_next_state <= 2'd3;
						end else begin
							if ((sdcore_data_type == 1'd1)) begin
								subfragments_sdcore_fsm_next_state <= 3'd4;
							end else begin
								subfragments_sdcore_fsm_next_state <= 1'd0;
							end
						end
					end else begin
					end
				end
			end
		end
		2'd3: begin
			if (((dataw_sink_valid & dataw_sink_ready) & dataw_sink_last)) begin
				if ((sdcore_data_count == (sdcore_block_count_storage - 1'd1))) begin
					subfragments_sdcore_fsm_next_state <= 1'd0;
				end
			end
		end
		3'd4: begin
			if (datar_source_valid) begin
				if ((datar_source_payload_status == 1'd0)) begin
					if ((datar_source_last & datar_source_ready)) begin
						if ((sdcore_data_count == (sdcore_block_count_storage - 1'd1))) begin
							subfragments_sdcore_fsm_next_state <= 1'd0;
						end
					end
				end else begin
					if ((datar_source_payload_status == 1'd1)) begin
						subfragments_sdcore_fsm_next_state <= 1'd0;
					end
				end
			end
		end
		default: begin
			if (sdcore_cmd_send_re) begin
				subfragments_sdcore_fsm_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	sdcore_sink_sink_valid1 <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (datar_source_valid) begin
				if ((datar_source_payload_status == 1'd0)) begin
					sdcore_sink_sink_valid1 <= datar_source_valid;
				end else begin
				end
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	sdcore_sink_sink_first1 <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (datar_source_valid) begin
				if ((datar_source_payload_status == 1'd0)) begin
					sdcore_sink_sink_first1 <= datar_source_first;
				end else begin
				end
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	sdcore_sink_sink_last1 <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (datar_source_valid) begin
				if ((datar_source_payload_status == 1'd0)) begin
					sdcore_sink_sink_last1 <= datar_source_last;
				end else begin
				end
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	sdcore_sink_sink_payload_data1 <= 8'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (datar_source_valid) begin
				if ((datar_source_payload_status == 1'd0)) begin
					sdcore_sink_sink_payload_data1 <= datar_source_payload_data;
				end else begin
				end
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	sdcore_cmd_done_sdcore_fsm_next_value0 <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
			sdcore_cmd_done_sdcore_fsm_next_value0 <= 1'd1;
			if (sdcore_cmd_send_re) begin
				sdcore_cmd_done_sdcore_fsm_next_value0 <= 1'd0;
			end
		end
	endcase
end
always @(*) begin
	sdcore_cmd_done_sdcore_fsm_next_value_ce0 <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
			sdcore_cmd_done_sdcore_fsm_next_value_ce0 <= 1'd1;
			if (sdcore_cmd_send_re) begin
				sdcore_cmd_done_sdcore_fsm_next_value_ce0 <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	sdcore_data_done_sdcore_fsm_next_value1 <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
			sdcore_data_done_sdcore_fsm_next_value1 <= 1'd1;
			if (sdcore_cmd_send_re) begin
				sdcore_data_done_sdcore_fsm_next_value1 <= 1'd0;
			end
		end
	endcase
end
always @(*) begin
	sdcore_data_done_sdcore_fsm_next_value_ce1 <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
			sdcore_data_done_sdcore_fsm_next_value_ce1 <= 1'd1;
			if (sdcore_cmd_send_re) begin
				sdcore_data_done_sdcore_fsm_next_value_ce1 <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	sdcore_cmd_count_sdcore_fsm_next_value2 <= 3'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
			if (cmdw_sink_ready) begin
				sdcore_cmd_count_sdcore_fsm_next_value2 <= (sdcore_cmd_count + 1'd1);
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
			sdcore_cmd_count_sdcore_fsm_next_value2 <= 1'd0;
		end
	endcase
end
always @(*) begin
	sdcore_cmd_count_sdcore_fsm_next_value_ce2 <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
			if (cmdw_sink_ready) begin
				sdcore_cmd_count_sdcore_fsm_next_value_ce2 <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
			sdcore_cmd_count_sdcore_fsm_next_value_ce2 <= 1'd1;
		end
	endcase
end
always @(*) begin
	sdcore_data_count_sdcore_fsm_next_value3 <= 32'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (((dataw_sink_valid & dataw_sink_ready) & dataw_sink_last)) begin
				sdcore_data_count_sdcore_fsm_next_value3 <= (sdcore_data_count + 1'd1);
			end
		end
		3'd4: begin
			if (datar_source_valid) begin
				if ((datar_source_payload_status == 1'd0)) begin
					if ((datar_source_last & datar_source_ready)) begin
						sdcore_data_count_sdcore_fsm_next_value3 <= (sdcore_data_count + 1'd1);
					end
				end else begin
				end
			end
		end
		default: begin
			sdcore_data_count_sdcore_fsm_next_value3 <= 1'd0;
		end
	endcase
end
always @(*) begin
	sdcore_data_count_sdcore_fsm_next_value_ce3 <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (((dataw_sink_valid & dataw_sink_ready) & dataw_sink_last)) begin
				sdcore_data_count_sdcore_fsm_next_value_ce3 <= 1'd1;
			end
		end
		3'd4: begin
			if (datar_source_valid) begin
				if ((datar_source_payload_status == 1'd0)) begin
					if ((datar_source_last & datar_source_ready)) begin
						sdcore_data_count_sdcore_fsm_next_value_ce3 <= 1'd1;
					end
				end else begin
				end
			end
		end
		default: begin
			sdcore_data_count_sdcore_fsm_next_value_ce3 <= 1'd1;
		end
	endcase
end
always @(*) begin
	sdcore_cmd_error_sdcore_fsm_next_value4 <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
			if (sdcore_cmd_send_re) begin
				sdcore_cmd_error_sdcore_fsm_next_value4 <= 1'd0;
			end
		end
	endcase
end
always @(*) begin
	sdcore_cmd_error_sdcore_fsm_next_value_ce4 <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
			if (sdcore_cmd_send_re) begin
				sdcore_cmd_error_sdcore_fsm_next_value_ce4 <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	sdcore_cmd_timeout_sdcore_fsm_next_value5 <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
			if (cmdr_source_valid) begin
				if ((cmdr_source_payload_status == 1'd1)) begin
					sdcore_cmd_timeout_sdcore_fsm_next_value5 <= 1'd1;
				end else begin
				end
			end
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
			if (sdcore_cmd_send_re) begin
				sdcore_cmd_timeout_sdcore_fsm_next_value5 <= 1'd0;
			end
		end
	endcase
end
always @(*) begin
	cmdr_sink_valid <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
			cmdr_sink_valid <= 1'd1;
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	sdcore_cmd_timeout_sdcore_fsm_next_value_ce5 <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
			if (cmdr_source_valid) begin
				if ((cmdr_source_payload_status == 1'd1)) begin
					sdcore_cmd_timeout_sdcore_fsm_next_value_ce5 <= 1'd1;
				end else begin
				end
			end
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
			if (sdcore_cmd_send_re) begin
				sdcore_cmd_timeout_sdcore_fsm_next_value_ce5 <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	sdcore_data_error_sdcore_fsm_next_value6 <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (datar_source_valid) begin
				if ((datar_source_payload_status != 2'd2)) begin
					sdcore_data_error_sdcore_fsm_next_value6 <= 1'd1;
				end
			end
		end
		3'd4: begin
		end
		default: begin
			if (sdcore_cmd_send_re) begin
				sdcore_data_error_sdcore_fsm_next_value6 <= 1'd0;
			end
		end
	endcase
end
always @(*) begin
	cmdr_sink_payload_cmd_type <= 2'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
			cmdr_sink_payload_cmd_type <= sdcore_cmd_type;
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	sdcore_data_error_sdcore_fsm_next_value_ce6 <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (datar_source_valid) begin
				if ((datar_source_payload_status != 2'd2)) begin
					sdcore_data_error_sdcore_fsm_next_value_ce6 <= 1'd1;
				end
			end
		end
		3'd4: begin
		end
		default: begin
			if (sdcore_cmd_send_re) begin
				sdcore_data_error_sdcore_fsm_next_value_ce6 <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	cmdr_sink_payload_data_type <= 2'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
			cmdr_sink_payload_data_type <= sdcore_data_type;
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	cmdr_sink_payload_length <= 8'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
			if ((sdcore_cmd_type == 2'd2)) begin
				cmdr_sink_payload_length <= 5'd18;
			end else begin
				cmdr_sink_payload_length <= 3'd6;
			end
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	sdcore_data_timeout_sdcore_fsm_next_value7 <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (datar_source_valid) begin
				if ((datar_source_payload_status == 1'd0)) begin
				end else begin
					if ((datar_source_payload_status == 1'd1)) begin
						sdcore_data_timeout_sdcore_fsm_next_value7 <= 1'd1;
					end
				end
			end
		end
		default: begin
			if (sdcore_cmd_send_re) begin
				sdcore_data_timeout_sdcore_fsm_next_value7 <= 1'd0;
			end
		end
	endcase
end
always @(*) begin
	sdcore_data_timeout_sdcore_fsm_next_value_ce7 <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (datar_source_valid) begin
				if ((datar_source_payload_status == 1'd0)) begin
				end else begin
					if ((datar_source_payload_status == 1'd1)) begin
						sdcore_data_timeout_sdcore_fsm_next_value_ce7 <= 1'd1;
					end
				end
			end
		end
		default: begin
			if (sdcore_cmd_send_re) begin
				sdcore_data_timeout_sdcore_fsm_next_value_ce7 <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	cmdr_source_ready <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
			cmdr_source_ready <= 1'd1;
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	dataw_sink_valid <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			dataw_sink_valid <= sdcore_crc16_inserter_source_valid;
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	dataw_sink_first <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			dataw_sink_first <= sdcore_crc16_inserter_source_first;
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	dataw_sink_last <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			dataw_sink_last <= sdcore_crc16_inserter_source_last;
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	dataw_sink_payload_data <= 8'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			dataw_sink_payload_data <= sdcore_crc16_inserter_source_payload_data;
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	cmdw_sink_valid <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
			cmdw_sink_valid <= 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	datar_sink_valid <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			datar_sink_valid <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	cmdw_sink_last <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
			cmdw_sink_last <= (sdcore_cmd_count == 3'd5);
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	datar_sink_last <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			datar_sink_last <= (sdcore_data_count == (sdcore_block_count_storage - 1'd1));
		end
		default: begin
		end
	endcase
end
always @(*) begin
	cmdw_sink_payload_data <= 8'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
			case (sdcore_cmd_count)
				1'd0: begin
					cmdw_sink_payload_data <= {1'd0, 1'd1, sdcore_cmd};
				end
				1'd1: begin
					cmdw_sink_payload_data <= sdcore_cmd_argument_storage[31:24];
				end
				2'd2: begin
					cmdw_sink_payload_data <= sdcore_cmd_argument_storage[23:16];
				end
				2'd3: begin
					cmdw_sink_payload_data <= sdcore_cmd_argument_storage[15:8];
				end
				3'd4: begin
					cmdw_sink_payload_data <= sdcore_cmd_argument_storage[7:0];
				end
				3'd5: begin
					cmdw_sink_payload_data <= {sdcore_crc7_inserter_crc, 1'd1};
				end
			endcase
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	datar_sink_payload_block_length <= 10'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			datar_sink_payload_block_length <= sdcore_block_length_storage;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	cmdw_sink_payload_cmd_type <= 2'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
			cmdw_sink_payload_cmd_type <= sdcore_cmd_type;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	sdcore_crc16_inserter_source_ready <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			sdcore_crc16_inserter_source_ready <= dataw_sink_ready;
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	datar_source_ready <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			datar_source_ready <= 1'd1;
		end
		3'd4: begin
			if (datar_source_valid) begin
				if ((datar_source_payload_status == 1'd0)) begin
					datar_source_ready <= sdcore_sink_sink_ready1;
				end else begin
					if ((datar_source_payload_status == 1'd1)) begin
						datar_source_ready <= 1'd1;
					end
				end
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	sdcore_cmd_response_status_sdcore_fsm_next_value8 <= 128'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
			if (cmdr_source_valid) begin
				if ((cmdr_source_payload_status == 1'd1)) begin
				end else begin
					if (cmdr_source_last) begin
					end else begin
						sdcore_cmd_response_status_sdcore_fsm_next_value8 <= {sdcore_cmd_response_status, cmdr_source_payload_data};
					end
				end
			end
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	sdcore_cmd_response_status_sdcore_fsm_next_value_ce8 <= 1'd0;
	case (subfragments_sdcore_fsm_state)
		1'd1: begin
		end
		2'd2: begin
			if (cmdr_source_valid) begin
				if ((cmdr_source_payload_status == 1'd1)) begin
				end else begin
					if (cmdr_source_last) begin
					end else begin
						sdcore_cmd_response_status_sdcore_fsm_next_value_ce8 <= 1'd1;
					end
				end
			end
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
assign sdblock2mem_start = (sdblock2mem_sink_sink_valid0 & sdblock2mem_sink_sink_first);
always @(*) begin
	sdblock2mem_fifo_sink_first <= 1'd0;
	if ((sdblock2mem_wishbonedmawriter_enable_storage & (sdblock2mem_start | sdblock2mem_connect))) begin
		sdblock2mem_fifo_sink_first <= sdblock2mem_sink_sink_first;
	end else begin
	end
end
always @(*) begin
	sdblock2mem_fifo_sink_last <= 1'd0;
	if ((sdblock2mem_wishbonedmawriter_enable_storage & (sdblock2mem_start | sdblock2mem_connect))) begin
		sdblock2mem_fifo_sink_last <= sdblock2mem_sink_sink_last0;
	end else begin
	end
end
always @(*) begin
	sdblock2mem_fifo_sink_payload_data <= 8'd0;
	if ((sdblock2mem_wishbonedmawriter_enable_storage & (sdblock2mem_start | sdblock2mem_connect))) begin
		sdblock2mem_fifo_sink_payload_data <= sdblock2mem_sink_sink_payload_data0;
	end else begin
	end
end
always @(*) begin
	sdblock2mem_sink_sink_ready0 <= 1'd0;
	if ((sdblock2mem_wishbonedmawriter_enable_storage & (sdblock2mem_start | sdblock2mem_connect))) begin
		sdblock2mem_sink_sink_ready0 <= sdblock2mem_fifo_sink_ready;
	end else begin
		sdblock2mem_sink_sink_ready0 <= 1'd1;
	end
end
always @(*) begin
	sdblock2mem_fifo_sink_valid <= 1'd0;
	if ((sdblock2mem_wishbonedmawriter_enable_storage & (sdblock2mem_start | sdblock2mem_connect))) begin
		sdblock2mem_fifo_sink_valid <= sdblock2mem_sink_sink_valid0;
	end else begin
	end
end
assign sdblock2mem_converter_sink_valid = sdblock2mem_fifo_source_valid;
assign sdblock2mem_fifo_source_ready = sdblock2mem_converter_sink_ready;
assign sdblock2mem_converter_sink_first = sdblock2mem_fifo_source_first;
assign sdblock2mem_converter_sink_last = sdblock2mem_fifo_source_last;
assign sdblock2mem_converter_sink_payload_data = sdblock2mem_fifo_source_payload_data;
assign sdblock2mem_wishbonedmawriter_sink_valid = sdblock2mem_source_source_valid;
assign sdblock2mem_source_source_ready = sdblock2mem_wishbonedmawriter_sink_ready;
assign sdblock2mem_wishbonedmawriter_sink_first = sdblock2mem_source_source_first;
assign sdblock2mem_wishbonedmawriter_sink_last = sdblock2mem_source_source_last;
assign sdblock2mem_wishbonedmawriter_sink_payload_data = sdblock2mem_source_source_payload_data;
assign sdblock2mem_fifo_syncfifo_din = {sdblock2mem_fifo_fifo_in_last, sdblock2mem_fifo_fifo_in_first, sdblock2mem_fifo_fifo_in_payload_data};
assign {sdblock2mem_fifo_fifo_out_last, sdblock2mem_fifo_fifo_out_first, sdblock2mem_fifo_fifo_out_payload_data} = sdblock2mem_fifo_syncfifo_dout;
assign {sdblock2mem_fifo_fifo_out_last, sdblock2mem_fifo_fifo_out_first, sdblock2mem_fifo_fifo_out_payload_data} = sdblock2mem_fifo_syncfifo_dout;
assign {sdblock2mem_fifo_fifo_out_last, sdblock2mem_fifo_fifo_out_first, sdblock2mem_fifo_fifo_out_payload_data} = sdblock2mem_fifo_syncfifo_dout;
assign sdblock2mem_fifo_sink_ready = sdblock2mem_fifo_syncfifo_writable;
assign sdblock2mem_fifo_syncfifo_we = sdblock2mem_fifo_sink_valid;
assign sdblock2mem_fifo_fifo_in_first = sdblock2mem_fifo_sink_first;
assign sdblock2mem_fifo_fifo_in_last = sdblock2mem_fifo_sink_last;
assign sdblock2mem_fifo_fifo_in_payload_data = sdblock2mem_fifo_sink_payload_data;
assign sdblock2mem_fifo_source_valid = sdblock2mem_fifo_readable;
assign sdblock2mem_fifo_source_first = sdblock2mem_fifo_fifo_out_first;
assign sdblock2mem_fifo_source_last = sdblock2mem_fifo_fifo_out_last;
assign sdblock2mem_fifo_source_payload_data = sdblock2mem_fifo_fifo_out_payload_data;
assign sdblock2mem_fifo_re = sdblock2mem_fifo_source_ready;
assign sdblock2mem_fifo_syncfifo_re = (sdblock2mem_fifo_syncfifo_readable & ((~sdblock2mem_fifo_readable) | sdblock2mem_fifo_re));
assign sdblock2mem_fifo_level1 = (sdblock2mem_fifo_level0 + sdblock2mem_fifo_readable);
always @(*) begin
	sdblock2mem_fifo_wrport_adr <= 9'd0;
	if (sdblock2mem_fifo_replace) begin
		sdblock2mem_fifo_wrport_adr <= (sdblock2mem_fifo_produce - 1'd1);
	end else begin
		sdblock2mem_fifo_wrport_adr <= sdblock2mem_fifo_produce;
	end
end
assign sdblock2mem_fifo_wrport_dat_w = sdblock2mem_fifo_syncfifo_din;
assign sdblock2mem_fifo_wrport_we = (sdblock2mem_fifo_syncfifo_we & (sdblock2mem_fifo_syncfifo_writable | sdblock2mem_fifo_replace));
assign sdblock2mem_fifo_do_read = (sdblock2mem_fifo_syncfifo_readable & sdblock2mem_fifo_syncfifo_re);
assign sdblock2mem_fifo_rdport_adr = sdblock2mem_fifo_consume;
assign sdblock2mem_fifo_syncfifo_dout = sdblock2mem_fifo_rdport_dat_r;
assign sdblock2mem_fifo_rdport_re = sdblock2mem_fifo_do_read;
assign sdblock2mem_fifo_syncfifo_writable = (sdblock2mem_fifo_level0 != 10'd512);
assign sdblock2mem_fifo_syncfifo_readable = (sdblock2mem_fifo_level0 != 1'd0);
assign sdblock2mem_source_source_valid = sdblock2mem_converter_source_valid;
assign sdblock2mem_converter_source_ready = sdblock2mem_source_source_ready;
assign sdblock2mem_source_source_first = sdblock2mem_converter_source_first;
assign sdblock2mem_source_source_last = sdblock2mem_converter_source_last;
assign sdblock2mem_source_source_payload_data = sdblock2mem_converter_source_payload_data;
assign sdblock2mem_converter_sink_ready = ((~sdblock2mem_converter_strobe_all) | sdblock2mem_converter_source_ready);
assign sdblock2mem_converter_source_valid = sdblock2mem_converter_strobe_all;
assign sdblock2mem_converter_load_part = (sdblock2mem_converter_sink_valid & sdblock2mem_converter_sink_ready);
assign interface0_bus_stb = sdblock2mem_sink_sink_valid1;
assign interface0_bus_cyc = sdblock2mem_sink_sink_valid1;
assign interface0_bus_we = 1'd1;
assign interface0_bus_sel = 4'd15;
assign interface0_bus_adr = sdblock2mem_sink_sink_payload_address;
assign interface0_bus_dat_w = {sdblock2mem_sink_sink_payload_data1[7:0], sdblock2mem_sink_sink_payload_data1[15:8], sdblock2mem_sink_sink_payload_data1[23:16], sdblock2mem_sink_sink_payload_data1[31:24]};
assign sdblock2mem_sink_sink_ready1 = interface0_bus_ack;
assign sdblock2mem_wishbonedmawriter_base = sdblock2mem_wishbonedmawriter_base_storage[63:2];
assign sdblock2mem_wishbonedmawriter_length = sdblock2mem_wishbonedmawriter_length_storage[31:2];
assign sdblock2mem_wishbonedmawriter_offset_status = sdblock2mem_wishbonedmawriter_offset;
assign sdblock2mem_wishbonedmawriter_reset = (~sdblock2mem_wishbonedmawriter_enable_storage);
always @(*) begin
	subfragments_next_state <= 2'd0;
	subfragments_next_state <= subfragments_state;
	case (subfragments_state)
		1'd1: begin
			if ((sdblock2mem_wishbonedmawriter_sink_valid & sdblock2mem_wishbonedmawriter_sink_ready)) begin
				if (sdblock2mem_sink_sink_last1) begin
					if (sdblock2mem_wishbonedmawriter_loop_storage) begin
					end else begin
						subfragments_next_state <= 2'd2;
					end
				end
			end
		end
		2'd2: begin
		end
		default: begin
			subfragments_next_state <= 1'd1;
		end
	endcase
end
always @(*) begin
	sdblock2mem_sink_sink_payload_data1 <= 32'd0;
	case (subfragments_state)
		1'd1: begin
			sdblock2mem_sink_sink_payload_data1 <= sdblock2mem_wishbonedmawriter_sink_payload_data;
		end
		2'd2: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	sdblock2mem_wishbonedmawriter_done_status <= 1'd0;
	case (subfragments_state)
		1'd1: begin
		end
		2'd2: begin
			sdblock2mem_wishbonedmawriter_done_status <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	sdblock2mem_wishbonedmawriter_sink_ready <= 1'd0;
	case (subfragments_state)
		1'd1: begin
			sdblock2mem_wishbonedmawriter_sink_ready <= sdblock2mem_sink_sink_ready1;
		end
		2'd2: begin
		end
		default: begin
			sdblock2mem_wishbonedmawriter_sink_ready <= 1'd1;
		end
	endcase
end
always @(*) begin
	sdblock2mem_wishbonedmawriter_offset_next_value <= 32'd0;
	case (subfragments_state)
		1'd1: begin
			if ((sdblock2mem_wishbonedmawriter_sink_valid & sdblock2mem_wishbonedmawriter_sink_ready)) begin
				sdblock2mem_wishbonedmawriter_offset_next_value <= (sdblock2mem_wishbonedmawriter_offset + 1'd1);
				if (sdblock2mem_sink_sink_last1) begin
					if (sdblock2mem_wishbonedmawriter_loop_storage) begin
						sdblock2mem_wishbonedmawriter_offset_next_value <= 1'd0;
					end else begin
					end
				end
			end
		end
		2'd2: begin
		end
		default: begin
			sdblock2mem_wishbonedmawriter_offset_next_value <= 1'd0;
		end
	endcase
end
always @(*) begin
	sdblock2mem_sink_sink_valid1 <= 1'd0;
	case (subfragments_state)
		1'd1: begin
			sdblock2mem_sink_sink_valid1 <= sdblock2mem_wishbonedmawriter_sink_valid;
		end
		2'd2: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	sdblock2mem_wishbonedmawriter_offset_next_value_ce <= 1'd0;
	case (subfragments_state)
		1'd1: begin
			if ((sdblock2mem_wishbonedmawriter_sink_valid & sdblock2mem_wishbonedmawriter_sink_ready)) begin
				sdblock2mem_wishbonedmawriter_offset_next_value_ce <= 1'd1;
				if (sdblock2mem_sink_sink_last1) begin
					if (sdblock2mem_wishbonedmawriter_loop_storage) begin
						sdblock2mem_wishbonedmawriter_offset_next_value_ce <= 1'd1;
					end else begin
					end
				end
			end
		end
		2'd2: begin
		end
		default: begin
			sdblock2mem_wishbonedmawriter_offset_next_value_ce <= 1'd1;
		end
	endcase
end
always @(*) begin
	sdblock2mem_sink_sink_last1 <= 1'd0;
	case (subfragments_state)
		1'd1: begin
			sdblock2mem_sink_sink_last1 <= (sdblock2mem_wishbonedmawriter_offset == (sdblock2mem_wishbonedmawriter_length - 1'd1));
		end
		2'd2: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	sdblock2mem_sink_sink_payload_address <= 32'd0;
	case (subfragments_state)
		1'd1: begin
			sdblock2mem_sink_sink_payload_address <= (sdblock2mem_wishbonedmawriter_base + sdblock2mem_wishbonedmawriter_offset);
		end
		2'd2: begin
		end
		default: begin
		end
	endcase
end
assign sdmem2block_converter_sink_valid = sdmem2block_dma_source_valid;
assign sdmem2block_dma_source_ready = sdmem2block_converter_sink_ready;
assign sdmem2block_converter_sink_first = sdmem2block_dma_source_first;
assign sdmem2block_converter_sink_last = sdmem2block_dma_source_last;
assign sdmem2block_converter_sink_payload_data = sdmem2block_dma_source_payload_data;
assign sdmem2block_fifo_sink_valid = sdmem2block_source_source_valid1;
assign sdmem2block_source_source_ready1 = sdmem2block_fifo_sink_ready;
assign sdmem2block_fifo_sink_first = sdmem2block_source_source_first1;
assign sdmem2block_fifo_sink_last = sdmem2block_source_source_last1;
assign sdmem2block_fifo_sink_payload_data = sdmem2block_source_source_payload_data1;
assign sdmem2block_source_source_valid0 = sdmem2block_fifo_source_valid;
assign sdmem2block_fifo_source_ready = sdmem2block_source_source_ready0;
assign sdmem2block_source_source_first0 = sdmem2block_fifo_source_first;
always @(*) begin
	sdmem2block_source_source_last0 <= 1'd0;
	sdmem2block_source_source_last0 <= sdmem2block_fifo_source_last;
	if ((sdmem2block_count == 9'd511)) begin
		sdmem2block_source_source_last0 <= 1'd1;
	end
end
assign sdmem2block_source_source_payload_data0 = sdmem2block_fifo_source_payload_data;
assign sdmem2block_dma_base = sdmem2block_dma_base_storage[63:2];
assign sdmem2block_dma_length = sdmem2block_dma_length_storage[31:2];
assign sdmem2block_dma_offset_status = sdmem2block_dma_offset;
assign sdmem2block_dma_reset = (~sdmem2block_dma_enable_storage);
always @(*) begin
	subfragments_sdmem2blockdma_fsm_next_state <= 1'd0;
	subfragments_sdmem2blockdma_fsm_next_state <= subfragments_sdmem2blockdma_fsm_state;
	case (subfragments_sdmem2blockdma_fsm_state)
		1'd1: begin
			if (sdmem2block_dma_source_ready) begin
				subfragments_sdmem2blockdma_fsm_next_state <= 1'd0;
			end
		end
		default: begin
			if ((interface1_bus_stb & interface1_bus_ack)) begin
				subfragments_sdmem2blockdma_fsm_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	interface1_bus_sel <= 4'd0;
	case (subfragments_sdmem2blockdma_fsm_state)
		1'd1: begin
		end
		default: begin
			interface1_bus_sel <= 4'd15;
		end
	endcase
end
always @(*) begin
	interface1_bus_cyc <= 1'd0;
	case (subfragments_sdmem2blockdma_fsm_state)
		1'd1: begin
		end
		default: begin
			interface1_bus_cyc <= sdmem2block_dma_sink_valid;
		end
	endcase
end
always @(*) begin
	interface1_bus_stb <= 1'd0;
	case (subfragments_sdmem2blockdma_fsm_state)
		1'd1: begin
		end
		default: begin
			interface1_bus_stb <= sdmem2block_dma_sink_valid;
		end
	endcase
end
always @(*) begin
	sdmem2block_dma_source_valid <= 1'd0;
	case (subfragments_sdmem2blockdma_fsm_state)
		1'd1: begin
			sdmem2block_dma_source_valid <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	interface1_bus_we <= 1'd0;
	case (subfragments_sdmem2blockdma_fsm_state)
		1'd1: begin
		end
		default: begin
			interface1_bus_we <= 1'd0;
		end
	endcase
end
always @(*) begin
	sdmem2block_dma_source_last <= 1'd0;
	case (subfragments_sdmem2blockdma_fsm_state)
		1'd1: begin
			sdmem2block_dma_source_last <= sdmem2block_dma_sink_last;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	sdmem2block_dma_data_sdmem2blockdma_fsm_next_value <= 32'd0;
	case (subfragments_sdmem2blockdma_fsm_state)
		1'd1: begin
		end
		default: begin
			if ((interface1_bus_stb & interface1_bus_ack)) begin
				sdmem2block_dma_data_sdmem2blockdma_fsm_next_value <= {interface1_bus_dat_r[7:0], interface1_bus_dat_r[15:8], interface1_bus_dat_r[23:16], interface1_bus_dat_r[31:24]};
			end
		end
	endcase
end
always @(*) begin
	sdmem2block_dma_source_payload_data <= 32'd0;
	case (subfragments_sdmem2blockdma_fsm_state)
		1'd1: begin
			sdmem2block_dma_source_payload_data <= sdmem2block_dma_data;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	sdmem2block_dma_data_sdmem2blockdma_fsm_next_value_ce <= 1'd0;
	case (subfragments_sdmem2blockdma_fsm_state)
		1'd1: begin
		end
		default: begin
			if ((interface1_bus_stb & interface1_bus_ack)) begin
				sdmem2block_dma_data_sdmem2blockdma_fsm_next_value_ce <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	interface1_bus_adr <= 32'd0;
	case (subfragments_sdmem2blockdma_fsm_state)
		1'd1: begin
		end
		default: begin
			interface1_bus_adr <= sdmem2block_dma_sink_payload_address;
		end
	endcase
end
always @(*) begin
	sdmem2block_dma_sink_ready <= 1'd0;
	case (subfragments_sdmem2blockdma_fsm_state)
		1'd1: begin
			if (sdmem2block_dma_source_ready) begin
				sdmem2block_dma_sink_ready <= 1'd1;
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	subfragments_sdmem2blockdma_resetinserter_next_state <= 2'd0;
	subfragments_sdmem2blockdma_resetinserter_next_state <= subfragments_sdmem2blockdma_resetinserter_state;
	case (subfragments_sdmem2blockdma_resetinserter_state)
		1'd1: begin
			if (sdmem2block_dma_sink_ready) begin
				if (sdmem2block_dma_sink_last) begin
					if (sdmem2block_dma_loop_storage) begin
					end else begin
						subfragments_sdmem2blockdma_resetinserter_next_state <= 2'd2;
					end
				end
			end
		end
		2'd2: begin
		end
		default: begin
			subfragments_sdmem2blockdma_resetinserter_next_state <= 1'd1;
		end
	endcase
end
always @(*) begin
	sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value_ce <= 1'd0;
	case (subfragments_sdmem2blockdma_resetinserter_state)
		1'd1: begin
			if (sdmem2block_dma_sink_ready) begin
				sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value_ce <= 1'd1;
				if (sdmem2block_dma_sink_last) begin
					if (sdmem2block_dma_loop_storage) begin
						sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value_ce <= 1'd1;
					end else begin
					end
				end
			end
		end
		2'd2: begin
		end
		default: begin
			sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value_ce <= 1'd1;
		end
	endcase
end
always @(*) begin
	sdmem2block_dma_sink_last <= 1'd0;
	case (subfragments_sdmem2blockdma_resetinserter_state)
		1'd1: begin
			sdmem2block_dma_sink_last <= (sdmem2block_dma_offset == (sdmem2block_dma_length - 1'd1));
		end
		2'd2: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	sdmem2block_dma_sink_payload_address <= 32'd0;
	case (subfragments_sdmem2blockdma_resetinserter_state)
		1'd1: begin
			sdmem2block_dma_sink_payload_address <= (sdmem2block_dma_base + sdmem2block_dma_offset);
		end
		2'd2: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value <= 32'd0;
	case (subfragments_sdmem2blockdma_resetinserter_state)
		1'd1: begin
			if (sdmem2block_dma_sink_ready) begin
				sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value <= (sdmem2block_dma_offset + 1'd1);
				if (sdmem2block_dma_sink_last) begin
					if (sdmem2block_dma_loop_storage) begin
						sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value <= 1'd0;
					end else begin
					end
				end
			end
		end
		2'd2: begin
		end
		default: begin
			sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value <= 1'd0;
		end
	endcase
end
always @(*) begin
	sdmem2block_dma_done_status <= 1'd0;
	case (subfragments_sdmem2blockdma_resetinserter_state)
		1'd1: begin
		end
		2'd2: begin
			sdmem2block_dma_done_status <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	sdmem2block_dma_sink_valid <= 1'd0;
	case (subfragments_sdmem2blockdma_resetinserter_state)
		1'd1: begin
			sdmem2block_dma_sink_valid <= 1'd1;
		end
		2'd2: begin
		end
		default: begin
		end
	endcase
end
assign sdmem2block_source_source_valid1 = sdmem2block_converter_source_valid;
assign sdmem2block_converter_source_ready = sdmem2block_source_source_ready1;
assign sdmem2block_source_source_first1 = sdmem2block_converter_source_first;
assign sdmem2block_source_source_last1 = sdmem2block_converter_source_last;
assign sdmem2block_source_source_payload_data1 = sdmem2block_converter_source_payload_data;
assign sdmem2block_converter_first = (sdmem2block_converter_mux == 1'd0);
assign sdmem2block_converter_last = (sdmem2block_converter_mux == 2'd3);
assign sdmem2block_converter_source_valid = sdmem2block_converter_sink_valid;
assign sdmem2block_converter_source_first = (sdmem2block_converter_sink_first & sdmem2block_converter_first);
assign sdmem2block_converter_source_last = (sdmem2block_converter_sink_last & sdmem2block_converter_last);
assign sdmem2block_converter_sink_ready = (sdmem2block_converter_last & sdmem2block_converter_source_ready);
always @(*) begin
	sdmem2block_converter_source_payload_data <= 8'd0;
	case (sdmem2block_converter_mux)
		1'd0: begin
			sdmem2block_converter_source_payload_data <= sdmem2block_converter_sink_payload_data[31:24];
		end
		1'd1: begin
			sdmem2block_converter_source_payload_data <= sdmem2block_converter_sink_payload_data[23:16];
		end
		2'd2: begin
			sdmem2block_converter_source_payload_data <= sdmem2block_converter_sink_payload_data[15:8];
		end
		default: begin
			sdmem2block_converter_source_payload_data <= sdmem2block_converter_sink_payload_data[7:0];
		end
	endcase
end
assign sdmem2block_converter_source_payload_valid_token_count = sdmem2block_converter_last;
assign sdmem2block_fifo_syncfifo_din = {sdmem2block_fifo_fifo_in_last, sdmem2block_fifo_fifo_in_first, sdmem2block_fifo_fifo_in_payload_data};
assign {sdmem2block_fifo_fifo_out_last, sdmem2block_fifo_fifo_out_first, sdmem2block_fifo_fifo_out_payload_data} = sdmem2block_fifo_syncfifo_dout;
assign {sdmem2block_fifo_fifo_out_last, sdmem2block_fifo_fifo_out_first, sdmem2block_fifo_fifo_out_payload_data} = sdmem2block_fifo_syncfifo_dout;
assign {sdmem2block_fifo_fifo_out_last, sdmem2block_fifo_fifo_out_first, sdmem2block_fifo_fifo_out_payload_data} = sdmem2block_fifo_syncfifo_dout;
assign sdmem2block_fifo_sink_ready = sdmem2block_fifo_syncfifo_writable;
assign sdmem2block_fifo_syncfifo_we = sdmem2block_fifo_sink_valid;
assign sdmem2block_fifo_fifo_in_first = sdmem2block_fifo_sink_first;
assign sdmem2block_fifo_fifo_in_last = sdmem2block_fifo_sink_last;
assign sdmem2block_fifo_fifo_in_payload_data = sdmem2block_fifo_sink_payload_data;
assign sdmem2block_fifo_source_valid = sdmem2block_fifo_readable;
assign sdmem2block_fifo_source_first = sdmem2block_fifo_fifo_out_first;
assign sdmem2block_fifo_source_last = sdmem2block_fifo_fifo_out_last;
assign sdmem2block_fifo_source_payload_data = sdmem2block_fifo_fifo_out_payload_data;
assign sdmem2block_fifo_re = sdmem2block_fifo_source_ready;
assign sdmem2block_fifo_syncfifo_re = (sdmem2block_fifo_syncfifo_readable & ((~sdmem2block_fifo_readable) | sdmem2block_fifo_re));
assign sdmem2block_fifo_level1 = (sdmem2block_fifo_level0 + sdmem2block_fifo_readable);
always @(*) begin
	sdmem2block_fifo_wrport_adr <= 9'd0;
	if (sdmem2block_fifo_replace) begin
		sdmem2block_fifo_wrport_adr <= (sdmem2block_fifo_produce - 1'd1);
	end else begin
		sdmem2block_fifo_wrport_adr <= sdmem2block_fifo_produce;
	end
end
assign sdmem2block_fifo_wrport_dat_w = sdmem2block_fifo_syncfifo_din;
assign sdmem2block_fifo_wrport_we = (sdmem2block_fifo_syncfifo_we & (sdmem2block_fifo_syncfifo_writable | sdmem2block_fifo_replace));
assign sdmem2block_fifo_do_read = (sdmem2block_fifo_syncfifo_readable & sdmem2block_fifo_syncfifo_re);
assign sdmem2block_fifo_rdport_adr = sdmem2block_fifo_consume;
assign sdmem2block_fifo_syncfifo_dout = sdmem2block_fifo_rdport_dat_r;
assign sdmem2block_fifo_rdport_re = sdmem2block_fifo_do_read;
assign sdmem2block_fifo_syncfifo_writable = (sdmem2block_fifo_level0 != 10'd512);
assign sdmem2block_fifo_syncfifo_readable = (sdmem2block_fifo_level0 != 1'd0);
assign eventmanager_card_detect0 = card_detect_status1;
assign eventmanager_card_detect1 = card_detect_pending;
always @(*) begin
	card_detect_clear <= 1'd0;
	if ((eventmanager_pending_re & eventmanager_pending_r[0])) begin
		card_detect_clear <= 1'd1;
	end
end
assign eventmanager_block2mem_dma0 = block2mem_dma_status;
assign eventmanager_block2mem_dma1 = block2mem_dma_pending;
always @(*) begin
	block2mem_dma_clear <= 1'd0;
	if ((eventmanager_pending_re & eventmanager_pending_r[1])) begin
		block2mem_dma_clear <= 1'd1;
	end
end
assign eventmanager_mem2block_dma0 = mem2block_dma_status;
assign eventmanager_mem2block_dma1 = mem2block_dma_pending;
always @(*) begin
	mem2block_dma_clear <= 1'd0;
	if ((eventmanager_pending_re & eventmanager_pending_r[2])) begin
		mem2block_dma_clear <= 1'd1;
	end
end
assign eventmanager_cmd_done0 = cmd_done_status;
assign eventmanager_cmd_done1 = cmd_done_pending;
always @(*) begin
	cmd_done_clear <= 1'd0;
	if ((eventmanager_pending_re & eventmanager_pending_r[3])) begin
		cmd_done_clear <= 1'd1;
	end
end
assign sdirq_irq = ((((eventmanager_pending_status[0] & eventmanager_enable_storage[0]) | (eventmanager_pending_status[1] & eventmanager_enable_storage[1])) | (eventmanager_pending_status[2] & eventmanager_enable_storage[2])) | (eventmanager_pending_status[3] & eventmanager_enable_storage[3]));
assign card_detect_status1 = 1'd0;
assign block2mem_dma_status = 1'd0;
assign mem2block_dma_status = 1'd0;
assign cmd_done_status = cmd_done_trigger;
assign cmd_done_pending = cmd_done_trigger;
always @(*) begin
	simsoc_next_state <= 1'd0;
	simsoc_next_state <= simsoc_state;
	case (simsoc_state)
		1'd1: begin
			simsoc_next_state <= 1'd0;
		end
		default: begin
			if ((simsoc_simsoc_wishbone_cyc & simsoc_simsoc_wishbone_stb)) begin
				simsoc_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	simsoc_simsoc_wishbone_ack <= 1'd0;
	case (simsoc_state)
		1'd1: begin
			simsoc_simsoc_wishbone_ack <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	simsoc_simsoc_adr <= 14'd0;
	case (simsoc_state)
		1'd1: begin
		end
		default: begin
			if ((simsoc_simsoc_wishbone_cyc & simsoc_simsoc_wishbone_stb)) begin
				simsoc_simsoc_adr <= simsoc_simsoc_wishbone_adr;
			end
		end
	endcase
end
always @(*) begin
	simsoc_simsoc_we <= 1'd0;
	case (simsoc_state)
		1'd1: begin
		end
		default: begin
			if ((simsoc_simsoc_wishbone_cyc & simsoc_simsoc_wishbone_stb)) begin
				simsoc_simsoc_we <= (simsoc_simsoc_wishbone_we & (simsoc_simsoc_wishbone_sel != 1'd0));
			end
		end
	endcase
end
always @(*) begin
	simsoc_simsoc_dat_w <= 32'd0;
	case (simsoc_state)
		1'd1: begin
		end
		default: begin
			simsoc_simsoc_dat_w <= simsoc_simsoc_wishbone_dat_w;
		end
	endcase
end
always @(*) begin
	simsoc_simsoc_wishbone_dat_r <= 32'd0;
	case (simsoc_state)
		1'd1: begin
			simsoc_simsoc_wishbone_dat_r <= simsoc_simsoc_dat_r;
		end
		default: begin
		end
	endcase
end
assign simsoc_shared_adr = array_muxed0;
assign simsoc_shared_dat_w = array_muxed1;
assign simsoc_shared_sel = array_muxed2;
assign simsoc_shared_cyc = array_muxed3;
assign simsoc_shared_stb = array_muxed4;
assign simsoc_shared_we = array_muxed5;
assign simsoc_shared_cti = array_muxed6;
assign simsoc_shared_bte = array_muxed7;
assign picorv32_idbus_dat_r = simsoc_shared_dat_r;
assign interface0_bus_dat_r = simsoc_shared_dat_r;
assign interface1_bus_dat_r = simsoc_shared_dat_r;
assign picorv32_idbus_ack = (simsoc_shared_ack & (simsoc_grant == 1'd0));
assign interface0_bus_ack = (simsoc_shared_ack & (simsoc_grant == 1'd1));
assign interface1_bus_ack = (simsoc_shared_ack & (simsoc_grant == 2'd2));
assign picorv32_idbus_err = (simsoc_shared_err & (simsoc_grant == 1'd0));
assign interface0_bus_err = (simsoc_shared_err & (simsoc_grant == 1'd1));
assign interface1_bus_err = (simsoc_shared_err & (simsoc_grant == 2'd2));
assign simsoc_request = {interface1_bus_cyc, interface0_bus_cyc, picorv32_idbus_cyc};
always @(*) begin
	simsoc_slave_sel <= 4'd0;
	simsoc_slave_sel[0] <= (simsoc_shared_adr[29:14] == 1'd0);
	simsoc_slave_sel[1] <= (simsoc_shared_adr[29:11] == 12'd2048);
	simsoc_slave_sel[2] <= (simsoc_shared_adr[29:2] == 27'd67108864);
	simsoc_slave_sel[3] <= (simsoc_shared_adr[29:14] == 16'd33280);
end
assign ram_bus_adr = simsoc_shared_adr;
assign ram_bus_dat_w = simsoc_shared_dat_w;
assign ram_bus_sel = simsoc_shared_sel;
assign ram_bus_stb = simsoc_shared_stb;
assign ram_bus_we = simsoc_shared_we;
assign ram_bus_cti = simsoc_shared_cti;
assign ram_bus_bte = simsoc_shared_bte;
assign interface0_ram_bus_adr = simsoc_shared_adr;
assign interface0_ram_bus_dat_w = simsoc_shared_dat_w;
assign interface0_ram_bus_sel = simsoc_shared_sel;
assign interface0_ram_bus_stb = simsoc_shared_stb;
assign interface0_ram_bus_we = simsoc_shared_we;
assign interface0_ram_bus_cti = simsoc_shared_cti;
assign interface0_ram_bus_bte = simsoc_shared_bte;
assign interface1_ram_bus_adr = simsoc_shared_adr;
assign interface1_ram_bus_dat_w = simsoc_shared_dat_w;
assign interface1_ram_bus_sel = simsoc_shared_sel;
assign interface1_ram_bus_stb = simsoc_shared_stb;
assign interface1_ram_bus_we = simsoc_shared_we;
assign interface1_ram_bus_cti = simsoc_shared_cti;
assign interface1_ram_bus_bte = simsoc_shared_bte;
assign simsoc_simsoc_wishbone_adr = simsoc_shared_adr;
assign simsoc_simsoc_wishbone_dat_w = simsoc_shared_dat_w;
assign simsoc_simsoc_wishbone_sel = simsoc_shared_sel;
assign simsoc_simsoc_wishbone_stb = simsoc_shared_stb;
assign simsoc_simsoc_wishbone_we = simsoc_shared_we;
assign simsoc_simsoc_wishbone_cti = simsoc_shared_cti;
assign simsoc_simsoc_wishbone_bte = simsoc_shared_bte;
assign ram_bus_cyc = (simsoc_shared_cyc & simsoc_slave_sel[0]);
assign interface0_ram_bus_cyc = (simsoc_shared_cyc & simsoc_slave_sel[1]);
assign interface1_ram_bus_cyc = (simsoc_shared_cyc & simsoc_slave_sel[2]);
assign simsoc_simsoc_wishbone_cyc = (simsoc_shared_cyc & simsoc_slave_sel[3]);
always @(*) begin
	simsoc_shared_ack <= 1'd0;
	simsoc_shared_ack <= (((ram_bus_ack | interface0_ram_bus_ack) | interface1_ram_bus_ack) | simsoc_simsoc_wishbone_ack);
	if (simsoc_done) begin
		simsoc_shared_ack <= 1'd1;
	end
end
assign simsoc_shared_err = (((ram_bus_err | interface0_ram_bus_err) | interface1_ram_bus_err) | simsoc_simsoc_wishbone_err);
always @(*) begin
	simsoc_shared_dat_r <= 32'd0;
	simsoc_shared_dat_r <= (((({32{simsoc_slave_sel_r[0]}} & ram_bus_dat_r) | ({32{simsoc_slave_sel_r[1]}} & interface0_ram_bus_dat_r)) | ({32{simsoc_slave_sel_r[2]}} & interface1_ram_bus_dat_r)) | ({32{simsoc_slave_sel_r[3]}} & simsoc_simsoc_wishbone_dat_r));
	if (simsoc_done) begin
		simsoc_shared_dat_r <= 32'd4294967295;
	end
end
assign simsoc_wait = ((simsoc_shared_stb & simsoc_shared_cyc) & (~simsoc_shared_ack));
always @(*) begin
	simsoc_error <= 1'd0;
	if (simsoc_done) begin
		simsoc_error <= 1'd1;
	end
end
assign simsoc_done = (simsoc_count == 1'd0);
assign simsoc_csr_bankarray_csrbank0_sel = (simsoc_csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign simsoc_csr_bankarray_csrbank0_reset0_r = simsoc_csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank0_reset0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank0_sel & (simsoc_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		simsoc_csr_bankarray_csrbank0_reset0_we <= (~simsoc_csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank0_reset0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank0_sel & (simsoc_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		simsoc_csr_bankarray_csrbank0_reset0_re <= simsoc_csr_bankarray_interface0_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank0_scratch0_r = simsoc_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank0_scratch0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank0_sel & (simsoc_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
		simsoc_csr_bankarray_csrbank0_scratch0_we <= (~simsoc_csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank0_scratch0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank0_sel & (simsoc_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
		simsoc_csr_bankarray_csrbank0_scratch0_re <= simsoc_csr_bankarray_interface0_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank0_bus_errors_r = simsoc_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank0_sel & (simsoc_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
		simsoc_csr_bankarray_csrbank0_bus_errors_re <= simsoc_csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank0_sel & (simsoc_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
		simsoc_csr_bankarray_csrbank0_bus_errors_we <= (~simsoc_csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	soc_rst <= 1'd0;
	if (reset_re) begin
		soc_rst <= reset_storage[0];
	end
end
assign cpu_rst = reset_storage[1];
assign simsoc_csr_bankarray_csrbank0_reset0_w = reset_storage[1:0];
assign simsoc_csr_bankarray_csrbank0_scratch0_w = scratch_storage[31:0];
assign simsoc_csr_bankarray_csrbank0_bus_errors_w = bus_errors_status[31:0];
assign bus_errors_we = simsoc_csr_bankarray_csrbank0_bus_errors_we;
assign simsoc_csr_bankarray_sel = (simsoc_csr_bankarray_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
	simsoc_csr_bankarray_sram_bus_dat_r <= 32'd0;
	if (simsoc_csr_bankarray_sel_r) begin
		simsoc_csr_bankarray_sram_bus_dat_r <= simsoc_csr_bankarray_dat_r;
	end
end
assign simsoc_csr_bankarray_adr = simsoc_csr_bankarray_sram_bus_adr[5:0];
assign simsoc_csr_bankarray_csrbank1_sel = (simsoc_csr_bankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign simsoc_csr_bankarray_csrbank1_dma_base1_r = simsoc_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank1_dma_base1_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank1_sel & (simsoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		simsoc_csr_bankarray_csrbank1_dma_base1_we <= (~simsoc_csr_bankarray_interface1_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank1_dma_base1_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank1_sel & (simsoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		simsoc_csr_bankarray_csrbank1_dma_base1_re <= simsoc_csr_bankarray_interface1_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank1_dma_base0_r = simsoc_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank1_dma_base0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank1_sel & (simsoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
		simsoc_csr_bankarray_csrbank1_dma_base0_re <= simsoc_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank1_dma_base0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank1_sel & (simsoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
		simsoc_csr_bankarray_csrbank1_dma_base0_we <= (~simsoc_csr_bankarray_interface1_bank_bus_we);
	end
end
assign simsoc_csr_bankarray_csrbank1_dma_length0_r = simsoc_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank1_dma_length0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank1_sel & (simsoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
		simsoc_csr_bankarray_csrbank1_dma_length0_we <= (~simsoc_csr_bankarray_interface1_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank1_dma_length0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank1_sel & (simsoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
		simsoc_csr_bankarray_csrbank1_dma_length0_re <= simsoc_csr_bankarray_interface1_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank1_dma_enable0_r = simsoc_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
	simsoc_csr_bankarray_csrbank1_dma_enable0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank1_sel & (simsoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
		simsoc_csr_bankarray_csrbank1_dma_enable0_we <= (~simsoc_csr_bankarray_interface1_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank1_dma_enable0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank1_sel & (simsoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
		simsoc_csr_bankarray_csrbank1_dma_enable0_re <= simsoc_csr_bankarray_interface1_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank1_dma_done_r = simsoc_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
	simsoc_csr_bankarray_csrbank1_dma_done_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank1_sel & (simsoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
		simsoc_csr_bankarray_csrbank1_dma_done_re <= simsoc_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank1_dma_done_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank1_sel & (simsoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
		simsoc_csr_bankarray_csrbank1_dma_done_we <= (~simsoc_csr_bankarray_interface1_bank_bus_we);
	end
end
assign simsoc_csr_bankarray_csrbank1_dma_loop0_r = simsoc_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
	simsoc_csr_bankarray_csrbank1_dma_loop0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank1_sel & (simsoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
		simsoc_csr_bankarray_csrbank1_dma_loop0_we <= (~simsoc_csr_bankarray_interface1_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank1_dma_loop0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank1_sel & (simsoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
		simsoc_csr_bankarray_csrbank1_dma_loop0_re <= simsoc_csr_bankarray_interface1_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank1_dma_offset_r = simsoc_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank1_dma_offset_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank1_sel & (simsoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd6))) begin
		simsoc_csr_bankarray_csrbank1_dma_offset_we <= (~simsoc_csr_bankarray_interface1_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank1_dma_offset_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank1_sel & (simsoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd6))) begin
		simsoc_csr_bankarray_csrbank1_dma_offset_re <= simsoc_csr_bankarray_interface1_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank1_dma_base1_w = sdblock2mem_wishbonedmawriter_base_storage[63:32];
assign simsoc_csr_bankarray_csrbank1_dma_base0_w = sdblock2mem_wishbonedmawriter_base_storage[31:0];
assign simsoc_csr_bankarray_csrbank1_dma_length0_w = sdblock2mem_wishbonedmawriter_length_storage[31:0];
assign simsoc_csr_bankarray_csrbank1_dma_enable0_w = sdblock2mem_wishbonedmawriter_enable_storage;
assign simsoc_csr_bankarray_csrbank1_dma_done_w = sdblock2mem_wishbonedmawriter_done_status;
assign sdblock2mem_wishbonedmawriter_done_we = simsoc_csr_bankarray_csrbank1_dma_done_we;
assign simsoc_csr_bankarray_csrbank1_dma_loop0_w = sdblock2mem_wishbonedmawriter_loop_storage;
assign simsoc_csr_bankarray_csrbank1_dma_offset_w = sdblock2mem_wishbonedmawriter_offset_status[31:0];
assign sdblock2mem_wishbonedmawriter_offset_we = simsoc_csr_bankarray_csrbank1_dma_offset_we;
assign simsoc_csr_bankarray_csrbank2_sel = (simsoc_csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign simsoc_csr_bankarray_csrbank2_cmd_argument0_r = simsoc_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank2_cmd_argument0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank2_sel & (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
		simsoc_csr_bankarray_csrbank2_cmd_argument0_re <= simsoc_csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank2_cmd_argument0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank2_sel & (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
		simsoc_csr_bankarray_csrbank2_cmd_argument0_we <= (~simsoc_csr_bankarray_interface2_bank_bus_we);
	end
end
assign simsoc_csr_bankarray_csrbank2_cmd_command0_r = simsoc_csr_bankarray_interface2_bank_bus_dat_w[13:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank2_cmd_command0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank2_sel & (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
		simsoc_csr_bankarray_csrbank2_cmd_command0_we <= (~simsoc_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank2_cmd_command0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank2_sel & (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
		simsoc_csr_bankarray_csrbank2_cmd_command0_re <= simsoc_csr_bankarray_interface2_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank2_cmd_send0_r = simsoc_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	simsoc_csr_bankarray_csrbank2_cmd_send0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank2_sel & (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
		simsoc_csr_bankarray_csrbank2_cmd_send0_we <= (~simsoc_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank2_cmd_send0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank2_sel & (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
		simsoc_csr_bankarray_csrbank2_cmd_send0_re <= simsoc_csr_bankarray_interface2_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank2_cmd_response3_r = simsoc_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank2_cmd_response3_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank2_sel & (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
		simsoc_csr_bankarray_csrbank2_cmd_response3_re <= simsoc_csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank2_cmd_response3_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank2_sel & (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
		simsoc_csr_bankarray_csrbank2_cmd_response3_we <= (~simsoc_csr_bankarray_interface2_bank_bus_we);
	end
end
assign simsoc_csr_bankarray_csrbank2_cmd_response2_r = simsoc_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank2_cmd_response2_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank2_sel & (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
		simsoc_csr_bankarray_csrbank2_cmd_response2_we <= (~simsoc_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank2_cmd_response2_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank2_sel & (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
		simsoc_csr_bankarray_csrbank2_cmd_response2_re <= simsoc_csr_bankarray_interface2_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank2_cmd_response1_r = simsoc_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank2_cmd_response1_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank2_sel & (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
		simsoc_csr_bankarray_csrbank2_cmd_response1_we <= (~simsoc_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank2_cmd_response1_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank2_sel & (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
		simsoc_csr_bankarray_csrbank2_cmd_response1_re <= simsoc_csr_bankarray_interface2_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank2_cmd_response0_r = simsoc_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank2_cmd_response0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank2_sel & (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
		simsoc_csr_bankarray_csrbank2_cmd_response0_re <= simsoc_csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank2_cmd_response0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank2_sel & (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
		simsoc_csr_bankarray_csrbank2_cmd_response0_we <= (~simsoc_csr_bankarray_interface2_bank_bus_we);
	end
end
assign simsoc_csr_bankarray_csrbank2_cmd_event_r = simsoc_csr_bankarray_interface2_bank_bus_dat_w[3:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank2_cmd_event_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank2_sel & (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
		simsoc_csr_bankarray_csrbank2_cmd_event_re <= simsoc_csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank2_cmd_event_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank2_sel & (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
		simsoc_csr_bankarray_csrbank2_cmd_event_we <= (~simsoc_csr_bankarray_interface2_bank_bus_we);
	end
end
assign simsoc_csr_bankarray_csrbank2_data_event_r = simsoc_csr_bankarray_interface2_bank_bus_dat_w[3:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank2_data_event_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank2_sel & (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 4'd8))) begin
		simsoc_csr_bankarray_csrbank2_data_event_we <= (~simsoc_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank2_data_event_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank2_sel & (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 4'd8))) begin
		simsoc_csr_bankarray_csrbank2_data_event_re <= simsoc_csr_bankarray_interface2_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank2_block_length0_r = simsoc_csr_bankarray_interface2_bank_bus_dat_w[9:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank2_block_length0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank2_sel & (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 4'd9))) begin
		simsoc_csr_bankarray_csrbank2_block_length0_we <= (~simsoc_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank2_block_length0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank2_sel & (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 4'd9))) begin
		simsoc_csr_bankarray_csrbank2_block_length0_re <= simsoc_csr_bankarray_interface2_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank2_block_count0_r = simsoc_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank2_block_count0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank2_sel & (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 4'd10))) begin
		simsoc_csr_bankarray_csrbank2_block_count0_re <= simsoc_csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank2_block_count0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank2_sel & (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 4'd10))) begin
		simsoc_csr_bankarray_csrbank2_block_count0_we <= (~simsoc_csr_bankarray_interface2_bank_bus_we);
	end
end
assign simsoc_csr_bankarray_csrbank2_cmd_argument0_w = sdcore_cmd_argument_storage[31:0];
assign sdcore_csrfield_cmd_type = sdcore_cmd_command_storage[1:0];
assign sdcore_csrfield_data_type = sdcore_cmd_command_storage[6:5];
assign sdcore_csrfield_cmd = sdcore_cmd_command_storage[13:8];
assign simsoc_csr_bankarray_csrbank2_cmd_command0_w = sdcore_cmd_command_storage[13:0];
assign simsoc_csr_bankarray_csrbank2_cmd_send0_w = sdcore_cmd_send_storage;
assign simsoc_csr_bankarray_csrbank2_cmd_response3_w = sdcore_cmd_response_status[127:96];
assign simsoc_csr_bankarray_csrbank2_cmd_response2_w = sdcore_cmd_response_status[95:64];
assign simsoc_csr_bankarray_csrbank2_cmd_response1_w = sdcore_cmd_response_status[63:32];
assign simsoc_csr_bankarray_csrbank2_cmd_response0_w = sdcore_cmd_response_status[31:0];
assign sdcore_cmd_response_we = simsoc_csr_bankarray_csrbank2_cmd_response0_we;
always @(*) begin
	sdcore_cmd_event_status <= 4'd0;
	sdcore_cmd_event_status[0] <= sdcore_csrfield_done0;
	sdcore_cmd_event_status[1] <= sdcore_csrfield_error0;
	sdcore_cmd_event_status[2] <= sdcore_csrfield_timeout0;
	sdcore_cmd_event_status[3] <= sdcore_csrfield_crc0;
end
assign simsoc_csr_bankarray_csrbank2_cmd_event_w = sdcore_cmd_event_status[3:0];
assign sdcore_cmd_event_we = simsoc_csr_bankarray_csrbank2_cmd_event_we;
always @(*) begin
	sdcore_data_event_status <= 4'd0;
	sdcore_data_event_status[0] <= sdcore_csrfield_done1;
	sdcore_data_event_status[1] <= sdcore_csrfield_error1;
	sdcore_data_event_status[2] <= sdcore_csrfield_timeout1;
	sdcore_data_event_status[3] <= sdcore_csrfield_crc1;
end
assign simsoc_csr_bankarray_csrbank2_data_event_w = sdcore_data_event_status[3:0];
assign sdcore_data_event_we = simsoc_csr_bankarray_csrbank2_data_event_we;
assign simsoc_csr_bankarray_csrbank2_block_length0_w = sdcore_block_length_storage[9:0];
assign simsoc_csr_bankarray_csrbank2_block_count0_w = sdcore_block_count_storage[31:0];
assign simsoc_csr_bankarray_csrbank3_sel = (simsoc_csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd4);
assign simsoc_csr_bankarray_csrbank3_status_r = simsoc_csr_bankarray_interface3_bank_bus_dat_w[3:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank3_status_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank3_sel & (simsoc_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
		simsoc_csr_bankarray_csrbank3_status_re <= simsoc_csr_bankarray_interface3_bank_bus_we;
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank3_status_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank3_sel & (simsoc_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
		simsoc_csr_bankarray_csrbank3_status_we <= (~simsoc_csr_bankarray_interface3_bank_bus_we);
	end
end
assign simsoc_csr_bankarray_csrbank3_pending_r = simsoc_csr_bankarray_interface3_bank_bus_dat_w[3:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank3_pending_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank3_sel & (simsoc_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
		simsoc_csr_bankarray_csrbank3_pending_re <= simsoc_csr_bankarray_interface3_bank_bus_we;
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank3_pending_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank3_sel & (simsoc_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
		simsoc_csr_bankarray_csrbank3_pending_we <= (~simsoc_csr_bankarray_interface3_bank_bus_we);
	end
end
assign simsoc_csr_bankarray_csrbank3_enable0_r = simsoc_csr_bankarray_interface3_bank_bus_dat_w[3:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank3_enable0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank3_sel & (simsoc_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
		simsoc_csr_bankarray_csrbank3_enable0_we <= (~simsoc_csr_bankarray_interface3_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank3_enable0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank3_sel & (simsoc_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
		simsoc_csr_bankarray_csrbank3_enable0_re <= simsoc_csr_bankarray_interface3_bank_bus_we;
	end
end
always @(*) begin
	eventmanager_status_status <= 4'd0;
	eventmanager_status_status[0] <= eventmanager_card_detect0;
	eventmanager_status_status[1] <= eventmanager_block2mem_dma0;
	eventmanager_status_status[2] <= eventmanager_mem2block_dma0;
	eventmanager_status_status[3] <= eventmanager_cmd_done0;
end
assign simsoc_csr_bankarray_csrbank3_status_w = eventmanager_status_status[3:0];
assign eventmanager_status_we = simsoc_csr_bankarray_csrbank3_status_we;
always @(*) begin
	eventmanager_pending_status <= 4'd0;
	eventmanager_pending_status[0] <= eventmanager_card_detect1;
	eventmanager_pending_status[1] <= eventmanager_block2mem_dma1;
	eventmanager_pending_status[2] <= eventmanager_mem2block_dma1;
	eventmanager_pending_status[3] <= eventmanager_cmd_done1;
end
assign simsoc_csr_bankarray_csrbank3_pending_w = eventmanager_pending_status[3:0];
assign eventmanager_pending_we = simsoc_csr_bankarray_csrbank3_pending_we;
assign eventmanager_card_detect2 = eventmanager_enable_storage[0];
assign eventmanager_block2mem_dma2 = eventmanager_enable_storage[1];
assign eventmanager_mem2block_dma2 = eventmanager_enable_storage[2];
assign eventmanager_cmd_done2 = eventmanager_enable_storage[3];
assign simsoc_csr_bankarray_csrbank3_enable0_w = eventmanager_enable_storage[3:0];
assign simsoc_csr_bankarray_csrbank4_sel = (simsoc_csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd5);
assign simsoc_csr_bankarray_csrbank4_dma_base1_r = simsoc_csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank4_dma_base1_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank4_sel & (simsoc_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
		simsoc_csr_bankarray_csrbank4_dma_base1_we <= (~simsoc_csr_bankarray_interface4_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank4_dma_base1_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank4_sel & (simsoc_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
		simsoc_csr_bankarray_csrbank4_dma_base1_re <= simsoc_csr_bankarray_interface4_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank4_dma_base0_r = simsoc_csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank4_dma_base0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank4_sel & (simsoc_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
		simsoc_csr_bankarray_csrbank4_dma_base0_we <= (~simsoc_csr_bankarray_interface4_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank4_dma_base0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank4_sel & (simsoc_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
		simsoc_csr_bankarray_csrbank4_dma_base0_re <= simsoc_csr_bankarray_interface4_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank4_dma_length0_r = simsoc_csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank4_dma_length0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank4_sel & (simsoc_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd2))) begin
		simsoc_csr_bankarray_csrbank4_dma_length0_re <= simsoc_csr_bankarray_interface4_bank_bus_we;
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank4_dma_length0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank4_sel & (simsoc_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd2))) begin
		simsoc_csr_bankarray_csrbank4_dma_length0_we <= (~simsoc_csr_bankarray_interface4_bank_bus_we);
	end
end
assign simsoc_csr_bankarray_csrbank4_dma_enable0_r = simsoc_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
	simsoc_csr_bankarray_csrbank4_dma_enable0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank4_sel & (simsoc_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd3))) begin
		simsoc_csr_bankarray_csrbank4_dma_enable0_we <= (~simsoc_csr_bankarray_interface4_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank4_dma_enable0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank4_sel & (simsoc_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd3))) begin
		simsoc_csr_bankarray_csrbank4_dma_enable0_re <= simsoc_csr_bankarray_interface4_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank4_dma_done_r = simsoc_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
	simsoc_csr_bankarray_csrbank4_dma_done_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank4_sel & (simsoc_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd4))) begin
		simsoc_csr_bankarray_csrbank4_dma_done_re <= simsoc_csr_bankarray_interface4_bank_bus_we;
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank4_dma_done_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank4_sel & (simsoc_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd4))) begin
		simsoc_csr_bankarray_csrbank4_dma_done_we <= (~simsoc_csr_bankarray_interface4_bank_bus_we);
	end
end
assign simsoc_csr_bankarray_csrbank4_dma_loop0_r = simsoc_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
	simsoc_csr_bankarray_csrbank4_dma_loop0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank4_sel & (simsoc_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd5))) begin
		simsoc_csr_bankarray_csrbank4_dma_loop0_re <= simsoc_csr_bankarray_interface4_bank_bus_we;
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank4_dma_loop0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank4_sel & (simsoc_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd5))) begin
		simsoc_csr_bankarray_csrbank4_dma_loop0_we <= (~simsoc_csr_bankarray_interface4_bank_bus_we);
	end
end
assign simsoc_csr_bankarray_csrbank4_dma_offset_r = simsoc_csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank4_dma_offset_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank4_sel & (simsoc_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd6))) begin
		simsoc_csr_bankarray_csrbank4_dma_offset_we <= (~simsoc_csr_bankarray_interface4_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank4_dma_offset_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank4_sel & (simsoc_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd6))) begin
		simsoc_csr_bankarray_csrbank4_dma_offset_re <= simsoc_csr_bankarray_interface4_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank4_dma_base1_w = sdmem2block_dma_base_storage[63:32];
assign simsoc_csr_bankarray_csrbank4_dma_base0_w = sdmem2block_dma_base_storage[31:0];
assign simsoc_csr_bankarray_csrbank4_dma_length0_w = sdmem2block_dma_length_storage[31:0];
assign simsoc_csr_bankarray_csrbank4_dma_enable0_w = sdmem2block_dma_enable_storage;
assign simsoc_csr_bankarray_csrbank4_dma_done_w = sdmem2block_dma_done_status;
assign sdmem2block_dma_done_we = simsoc_csr_bankarray_csrbank4_dma_done_we;
assign simsoc_csr_bankarray_csrbank4_dma_loop0_w = sdmem2block_dma_loop_storage;
assign simsoc_csr_bankarray_csrbank4_dma_offset_w = sdmem2block_dma_offset_status[31:0];
assign sdmem2block_dma_offset_we = simsoc_csr_bankarray_csrbank4_dma_offset_we;
assign simsoc_csr_bankarray_csrbank5_sel = (simsoc_csr_bankarray_interface5_bank_bus_adr[13:9] == 3'd6);
assign simsoc_csr_bankarray_csrbank5_card_detect_r = simsoc_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
	simsoc_csr_bankarray_csrbank5_card_detect_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank5_sel & (simsoc_csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd0))) begin
		simsoc_csr_bankarray_csrbank5_card_detect_we <= (~simsoc_csr_bankarray_interface5_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank5_card_detect_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank5_sel & (simsoc_csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd0))) begin
		simsoc_csr_bankarray_csrbank5_card_detect_re <= simsoc_csr_bankarray_interface5_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank5_clocker_divider0_r = simsoc_csr_bankarray_interface5_bank_bus_dat_w[8:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank5_clocker_divider0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank5_sel & (simsoc_csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd1))) begin
		simsoc_csr_bankarray_csrbank5_clocker_divider0_re <= simsoc_csr_bankarray_interface5_bank_bus_we;
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank5_clocker_divider0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank5_sel & (simsoc_csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd1))) begin
		simsoc_csr_bankarray_csrbank5_clocker_divider0_we <= (~simsoc_csr_bankarray_interface5_bank_bus_we);
	end
end
assign init_initialize_r = simsoc_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
	init_initialize_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank5_sel & (simsoc_csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd2))) begin
		init_initialize_we <= (~simsoc_csr_bankarray_interface5_bank_bus_we);
	end
end
always @(*) begin
	init_initialize_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank5_sel & (simsoc_csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd2))) begin
		init_initialize_re <= simsoc_csr_bankarray_interface5_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank5_dataw_status_r = simsoc_csr_bankarray_interface5_bank_bus_dat_w[2:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank5_dataw_status_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank5_sel & (simsoc_csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd3))) begin
		simsoc_csr_bankarray_csrbank5_dataw_status_we <= (~simsoc_csr_bankarray_interface5_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank5_dataw_status_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank5_sel & (simsoc_csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd3))) begin
		simsoc_csr_bankarray_csrbank5_dataw_status_re <= simsoc_csr_bankarray_interface5_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank5_card_detect_w = card_detect_status0;
assign card_detect_we = simsoc_csr_bankarray_csrbank5_card_detect_we;
assign simsoc_csr_bankarray_csrbank5_clocker_divider0_w = clocker_storage[8:0];
always @(*) begin
	dataw_status <= 3'd0;
	dataw_status[0] <= dataw_accepted0;
	dataw_status[1] <= dataw_crc_error0;
	dataw_status[2] <= dataw_write_error0;
end
assign simsoc_csr_bankarray_csrbank5_dataw_status_w = dataw_status[2:0];
assign dataw_we = simsoc_csr_bankarray_csrbank5_dataw_status_we;
assign simsoc_csr_bankarray_csrbank6_sel = (simsoc_csr_bankarray_interface6_bank_bus_adr[13:9] == 3'd7);
assign simsoc_csr_bankarray_csrbank6_load0_r = simsoc_csr_bankarray_interface6_bank_bus_dat_w[31:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank6_load0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank6_sel & (simsoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd0))) begin
		simsoc_csr_bankarray_csrbank6_load0_re <= simsoc_csr_bankarray_interface6_bank_bus_we;
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank6_load0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank6_sel & (simsoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd0))) begin
		simsoc_csr_bankarray_csrbank6_load0_we <= (~simsoc_csr_bankarray_interface6_bank_bus_we);
	end
end
assign simsoc_csr_bankarray_csrbank6_reload0_r = simsoc_csr_bankarray_interface6_bank_bus_dat_w[31:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank6_reload0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank6_sel & (simsoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd1))) begin
		simsoc_csr_bankarray_csrbank6_reload0_we <= (~simsoc_csr_bankarray_interface6_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank6_reload0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank6_sel & (simsoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd1))) begin
		simsoc_csr_bankarray_csrbank6_reload0_re <= simsoc_csr_bankarray_interface6_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank6_en0_r = simsoc_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
	simsoc_csr_bankarray_csrbank6_en0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank6_sel & (simsoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd2))) begin
		simsoc_csr_bankarray_csrbank6_en0_we <= (~simsoc_csr_bankarray_interface6_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank6_en0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank6_sel & (simsoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd2))) begin
		simsoc_csr_bankarray_csrbank6_en0_re <= simsoc_csr_bankarray_interface6_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank6_update_value0_r = simsoc_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
	simsoc_csr_bankarray_csrbank6_update_value0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank6_sel & (simsoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd3))) begin
		simsoc_csr_bankarray_csrbank6_update_value0_re <= simsoc_csr_bankarray_interface6_bank_bus_we;
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank6_update_value0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank6_sel & (simsoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd3))) begin
		simsoc_csr_bankarray_csrbank6_update_value0_we <= (~simsoc_csr_bankarray_interface6_bank_bus_we);
	end
end
assign simsoc_csr_bankarray_csrbank6_value_r = simsoc_csr_bankarray_interface6_bank_bus_dat_w[31:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank6_value_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank6_sel & (simsoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd4))) begin
		simsoc_csr_bankarray_csrbank6_value_we <= (~simsoc_csr_bankarray_interface6_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank6_value_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank6_sel & (simsoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd4))) begin
		simsoc_csr_bankarray_csrbank6_value_re <= simsoc_csr_bankarray_interface6_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank6_ev_status_r = simsoc_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
	simsoc_csr_bankarray_csrbank6_ev_status_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank6_sel & (simsoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd5))) begin
		simsoc_csr_bankarray_csrbank6_ev_status_we <= (~simsoc_csr_bankarray_interface6_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank6_ev_status_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank6_sel & (simsoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd5))) begin
		simsoc_csr_bankarray_csrbank6_ev_status_re <= simsoc_csr_bankarray_interface6_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank6_ev_pending_r = simsoc_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
	simsoc_csr_bankarray_csrbank6_ev_pending_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank6_sel & (simsoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd6))) begin
		simsoc_csr_bankarray_csrbank6_ev_pending_re <= simsoc_csr_bankarray_interface6_bank_bus_we;
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank6_ev_pending_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank6_sel & (simsoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd6))) begin
		simsoc_csr_bankarray_csrbank6_ev_pending_we <= (~simsoc_csr_bankarray_interface6_bank_bus_we);
	end
end
assign simsoc_csr_bankarray_csrbank6_ev_enable0_r = simsoc_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
	simsoc_csr_bankarray_csrbank6_ev_enable0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank6_sel & (simsoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd7))) begin
		simsoc_csr_bankarray_csrbank6_ev_enable0_we <= (~simsoc_csr_bankarray_interface6_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank6_ev_enable0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank6_sel & (simsoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd7))) begin
		simsoc_csr_bankarray_csrbank6_ev_enable0_re <= simsoc_csr_bankarray_interface6_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank6_load0_w = timer_load_storage[31:0];
assign simsoc_csr_bankarray_csrbank6_reload0_w = timer_reload_storage[31:0];
assign simsoc_csr_bankarray_csrbank6_en0_w = timer_en_storage;
assign simsoc_csr_bankarray_csrbank6_update_value0_w = timer_update_value_storage;
assign simsoc_csr_bankarray_csrbank6_value_w = timer_value_status[31:0];
assign timer_value_we = simsoc_csr_bankarray_csrbank6_value_we;
assign timer_status_status = timer_zero0;
assign simsoc_csr_bankarray_csrbank6_ev_status_w = timer_status_status;
assign timer_status_we = simsoc_csr_bankarray_csrbank6_ev_status_we;
assign timer_pending_status = timer_zero1;
assign simsoc_csr_bankarray_csrbank6_ev_pending_w = timer_pending_status;
assign timer_pending_we = simsoc_csr_bankarray_csrbank6_ev_pending_we;
assign timer_zero2 = timer_enable_storage;
assign simsoc_csr_bankarray_csrbank6_ev_enable0_w = timer_enable_storage;
assign simsoc_csr_bankarray_csrbank7_sel = (simsoc_csr_bankarray_interface7_bank_bus_adr[13:9] == 4'd8);
assign uart_rxtx_r = simsoc_csr_bankarray_interface7_bank_bus_dat_w[7:0];
always @(*) begin
	uart_rxtx_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank7_sel & (simsoc_csr_bankarray_interface7_bank_bus_adr[8:0] == 1'd0))) begin
		uart_rxtx_re <= simsoc_csr_bankarray_interface7_bank_bus_we;
	end
end
always @(*) begin
	uart_rxtx_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank7_sel & (simsoc_csr_bankarray_interface7_bank_bus_adr[8:0] == 1'd0))) begin
		uart_rxtx_we <= (~simsoc_csr_bankarray_interface7_bank_bus_we);
	end
end
assign simsoc_csr_bankarray_csrbank7_txfull_r = simsoc_csr_bankarray_interface7_bank_bus_dat_w[0];
always @(*) begin
	simsoc_csr_bankarray_csrbank7_txfull_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank7_sel & (simsoc_csr_bankarray_interface7_bank_bus_adr[8:0] == 1'd1))) begin
		simsoc_csr_bankarray_csrbank7_txfull_we <= (~simsoc_csr_bankarray_interface7_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank7_txfull_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank7_sel & (simsoc_csr_bankarray_interface7_bank_bus_adr[8:0] == 1'd1))) begin
		simsoc_csr_bankarray_csrbank7_txfull_re <= simsoc_csr_bankarray_interface7_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank7_rxempty_r = simsoc_csr_bankarray_interface7_bank_bus_dat_w[0];
always @(*) begin
	simsoc_csr_bankarray_csrbank7_rxempty_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank7_sel & (simsoc_csr_bankarray_interface7_bank_bus_adr[8:0] == 2'd2))) begin
		simsoc_csr_bankarray_csrbank7_rxempty_re <= simsoc_csr_bankarray_interface7_bank_bus_we;
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank7_rxempty_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank7_sel & (simsoc_csr_bankarray_interface7_bank_bus_adr[8:0] == 2'd2))) begin
		simsoc_csr_bankarray_csrbank7_rxempty_we <= (~simsoc_csr_bankarray_interface7_bank_bus_we);
	end
end
assign simsoc_csr_bankarray_csrbank7_ev_status_r = simsoc_csr_bankarray_interface7_bank_bus_dat_w[1:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank7_ev_status_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank7_sel & (simsoc_csr_bankarray_interface7_bank_bus_adr[8:0] == 2'd3))) begin
		simsoc_csr_bankarray_csrbank7_ev_status_re <= simsoc_csr_bankarray_interface7_bank_bus_we;
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank7_ev_status_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank7_sel & (simsoc_csr_bankarray_interface7_bank_bus_adr[8:0] == 2'd3))) begin
		simsoc_csr_bankarray_csrbank7_ev_status_we <= (~simsoc_csr_bankarray_interface7_bank_bus_we);
	end
end
assign simsoc_csr_bankarray_csrbank7_ev_pending_r = simsoc_csr_bankarray_interface7_bank_bus_dat_w[1:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank7_ev_pending_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank7_sel & (simsoc_csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd4))) begin
		simsoc_csr_bankarray_csrbank7_ev_pending_we <= (~simsoc_csr_bankarray_interface7_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank7_ev_pending_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank7_sel & (simsoc_csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd4))) begin
		simsoc_csr_bankarray_csrbank7_ev_pending_re <= simsoc_csr_bankarray_interface7_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank7_ev_enable0_r = simsoc_csr_bankarray_interface7_bank_bus_dat_w[1:0];
always @(*) begin
	simsoc_csr_bankarray_csrbank7_ev_enable0_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank7_sel & (simsoc_csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd5))) begin
		simsoc_csr_bankarray_csrbank7_ev_enable0_we <= (~simsoc_csr_bankarray_interface7_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank7_ev_enable0_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank7_sel & (simsoc_csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd5))) begin
		simsoc_csr_bankarray_csrbank7_ev_enable0_re <= simsoc_csr_bankarray_interface7_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank7_txempty_r = simsoc_csr_bankarray_interface7_bank_bus_dat_w[0];
always @(*) begin
	simsoc_csr_bankarray_csrbank7_txempty_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank7_sel & (simsoc_csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd6))) begin
		simsoc_csr_bankarray_csrbank7_txempty_re <= simsoc_csr_bankarray_interface7_bank_bus_we;
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank7_txempty_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank7_sel & (simsoc_csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd6))) begin
		simsoc_csr_bankarray_csrbank7_txempty_we <= (~simsoc_csr_bankarray_interface7_bank_bus_we);
	end
end
assign simsoc_csr_bankarray_csrbank7_rxfull_r = simsoc_csr_bankarray_interface7_bank_bus_dat_w[0];
always @(*) begin
	simsoc_csr_bankarray_csrbank7_rxfull_we <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank7_sel & (simsoc_csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd7))) begin
		simsoc_csr_bankarray_csrbank7_rxfull_we <= (~simsoc_csr_bankarray_interface7_bank_bus_we);
	end
end
always @(*) begin
	simsoc_csr_bankarray_csrbank7_rxfull_re <= 1'd0;
	if ((simsoc_csr_bankarray_csrbank7_sel & (simsoc_csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd7))) begin
		simsoc_csr_bankarray_csrbank7_rxfull_re <= simsoc_csr_bankarray_interface7_bank_bus_we;
	end
end
assign simsoc_csr_bankarray_csrbank7_txfull_w = uart_txfull_status;
assign uart_txfull_we = simsoc_csr_bankarray_csrbank7_txfull_we;
assign simsoc_csr_bankarray_csrbank7_rxempty_w = uart_rxempty_status;
assign uart_rxempty_we = simsoc_csr_bankarray_csrbank7_rxempty_we;
always @(*) begin
	uart_status_status <= 2'd0;
	uart_status_status[0] <= uart_tx0;
	uart_status_status[1] <= uart_rx0;
end
assign simsoc_csr_bankarray_csrbank7_ev_status_w = uart_status_status[1:0];
assign uart_status_we = simsoc_csr_bankarray_csrbank7_ev_status_we;
always @(*) begin
	uart_pending_status <= 2'd0;
	uart_pending_status[0] <= uart_tx1;
	uart_pending_status[1] <= uart_rx1;
end
assign simsoc_csr_bankarray_csrbank7_ev_pending_w = uart_pending_status[1:0];
assign uart_pending_we = simsoc_csr_bankarray_csrbank7_ev_pending_we;
assign uart_tx2 = uart_enable_storage[0];
assign uart_rx2 = uart_enable_storage[1];
assign simsoc_csr_bankarray_csrbank7_ev_enable0_w = uart_enable_storage[1:0];
assign simsoc_csr_bankarray_csrbank7_txempty_w = uart_txempty_status;
assign uart_txempty_we = simsoc_csr_bankarray_csrbank7_txempty_we;
assign simsoc_csr_bankarray_csrbank7_rxfull_w = uart_rxfull_status;
assign uart_rxfull_we = simsoc_csr_bankarray_csrbank7_rxfull_we;
assign simsoc_csr_interconnect_adr = simsoc_simsoc_adr;
assign simsoc_csr_interconnect_we = simsoc_simsoc_we;
assign simsoc_csr_interconnect_dat_w = simsoc_simsoc_dat_w;
assign simsoc_simsoc_dat_r = simsoc_csr_interconnect_dat_r;
assign simsoc_csr_bankarray_interface0_bank_bus_adr = simsoc_csr_interconnect_adr;
assign simsoc_csr_bankarray_interface1_bank_bus_adr = simsoc_csr_interconnect_adr;
assign simsoc_csr_bankarray_interface2_bank_bus_adr = simsoc_csr_interconnect_adr;
assign simsoc_csr_bankarray_interface3_bank_bus_adr = simsoc_csr_interconnect_adr;
assign simsoc_csr_bankarray_interface4_bank_bus_adr = simsoc_csr_interconnect_adr;
assign simsoc_csr_bankarray_interface5_bank_bus_adr = simsoc_csr_interconnect_adr;
assign simsoc_csr_bankarray_interface6_bank_bus_adr = simsoc_csr_interconnect_adr;
assign simsoc_csr_bankarray_interface7_bank_bus_adr = simsoc_csr_interconnect_adr;
assign simsoc_csr_bankarray_sram_bus_adr = simsoc_csr_interconnect_adr;
assign simsoc_csr_bankarray_interface0_bank_bus_we = simsoc_csr_interconnect_we;
assign simsoc_csr_bankarray_interface1_bank_bus_we = simsoc_csr_interconnect_we;
assign simsoc_csr_bankarray_interface2_bank_bus_we = simsoc_csr_interconnect_we;
assign simsoc_csr_bankarray_interface3_bank_bus_we = simsoc_csr_interconnect_we;
assign simsoc_csr_bankarray_interface4_bank_bus_we = simsoc_csr_interconnect_we;
assign simsoc_csr_bankarray_interface5_bank_bus_we = simsoc_csr_interconnect_we;
assign simsoc_csr_bankarray_interface6_bank_bus_we = simsoc_csr_interconnect_we;
assign simsoc_csr_bankarray_interface7_bank_bus_we = simsoc_csr_interconnect_we;
assign simsoc_csr_bankarray_sram_bus_we = simsoc_csr_interconnect_we;
assign simsoc_csr_bankarray_interface0_bank_bus_dat_w = simsoc_csr_interconnect_dat_w;
assign simsoc_csr_bankarray_interface1_bank_bus_dat_w = simsoc_csr_interconnect_dat_w;
assign simsoc_csr_bankarray_interface2_bank_bus_dat_w = simsoc_csr_interconnect_dat_w;
assign simsoc_csr_bankarray_interface3_bank_bus_dat_w = simsoc_csr_interconnect_dat_w;
assign simsoc_csr_bankarray_interface4_bank_bus_dat_w = simsoc_csr_interconnect_dat_w;
assign simsoc_csr_bankarray_interface5_bank_bus_dat_w = simsoc_csr_interconnect_dat_w;
assign simsoc_csr_bankarray_interface6_bank_bus_dat_w = simsoc_csr_interconnect_dat_w;
assign simsoc_csr_bankarray_interface7_bank_bus_dat_w = simsoc_csr_interconnect_dat_w;
assign simsoc_csr_bankarray_sram_bus_dat_w = simsoc_csr_interconnect_dat_w;
assign simsoc_csr_interconnect_dat_r = ((((((((simsoc_csr_bankarray_interface0_bank_bus_dat_r | simsoc_csr_bankarray_interface1_bank_bus_dat_r) | simsoc_csr_bankarray_interface2_bank_bus_dat_r) | simsoc_csr_bankarray_interface3_bank_bus_dat_r) | simsoc_csr_bankarray_interface4_bank_bus_dat_r) | simsoc_csr_bankarray_interface5_bank_bus_dat_r) | simsoc_csr_bankarray_interface6_bank_bus_dat_r) | simsoc_csr_bankarray_interface7_bank_bus_dat_r) | simsoc_csr_bankarray_sram_bus_dat_r);
always @(*) begin
	array_muxed0 <= 32'd0;
	case (simsoc_grant)
		1'd0: begin
			array_muxed0 <= picorv32_idbus_adr;
		end
		1'd1: begin
			array_muxed0 <= interface0_bus_adr;
		end
		default: begin
			array_muxed0 <= interface1_bus_adr;
		end
	endcase
end
always @(*) begin
	array_muxed1 <= 32'd0;
	case (simsoc_grant)
		1'd0: begin
			array_muxed1 <= picorv32_idbus_dat_w;
		end
		1'd1: begin
			array_muxed1 <= interface0_bus_dat_w;
		end
		default: begin
			array_muxed1 <= interface1_bus_dat_w;
		end
	endcase
end
always @(*) begin
	array_muxed2 <= 4'd0;
	case (simsoc_grant)
		1'd0: begin
			array_muxed2 <= picorv32_idbus_sel;
		end
		1'd1: begin
			array_muxed2 <= interface0_bus_sel;
		end
		default: begin
			array_muxed2 <= interface1_bus_sel;
		end
	endcase
end
always @(*) begin
	array_muxed3 <= 1'd0;
	case (simsoc_grant)
		1'd0: begin
			array_muxed3 <= picorv32_idbus_cyc;
		end
		1'd1: begin
			array_muxed3 <= interface0_bus_cyc;
		end
		default: begin
			array_muxed3 <= interface1_bus_cyc;
		end
	endcase
end
always @(*) begin
	array_muxed4 <= 1'd0;
	case (simsoc_grant)
		1'd0: begin
			array_muxed4 <= picorv32_idbus_stb;
		end
		1'd1: begin
			array_muxed4 <= interface0_bus_stb;
		end
		default: begin
			array_muxed4 <= interface1_bus_stb;
		end
	endcase
end
always @(*) begin
	array_muxed5 <= 1'd0;
	case (simsoc_grant)
		1'd0: begin
			array_muxed5 <= picorv32_idbus_we;
		end
		1'd1: begin
			array_muxed5 <= interface0_bus_we;
		end
		default: begin
			array_muxed5 <= interface1_bus_we;
		end
	endcase
end
always @(*) begin
	array_muxed6 <= 3'd0;
	case (simsoc_grant)
		1'd0: begin
			array_muxed6 <= picorv32_idbus_cti;
		end
		1'd1: begin
			array_muxed6 <= interface0_bus_cti;
		end
		default: begin
			array_muxed6 <= interface1_bus_cti;
		end
	endcase
end
always @(*) begin
	array_muxed7 <= 2'd0;
	case (simsoc_grant)
		1'd0: begin
			array_muxed7 <= picorv32_idbus_bte;
		end
		1'd1: begin
			array_muxed7 <= interface0_bus_bte;
		end
		default: begin
			array_muxed7 <= interface1_bus_bte;
		end
	endcase
end


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
	int_rst <= 1'd0;
end

always @(posedge sys_clk_1) begin
	if ((bus_errors != 32'd4294967295)) begin
		if (bus_error) begin
			bus_errors <= (bus_errors + 1'd1);
		end
	end
	ram_bus_ack <= 1'd0;
	if (((ram_bus_cyc & ram_bus_stb) & (~ram_bus_ack))) begin
		ram_bus_ack <= 1'd1;
	end
	interface0_ram_bus_ack <= 1'd0;
	if (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & (~interface0_ram_bus_ack))) begin
		interface0_ram_bus_ack <= 1'd1;
	end
	interface1_ram_bus_ack <= 1'd0;
	if (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & (~interface1_ram_bus_ack))) begin
		interface1_ram_bus_ack <= 1'd1;
	end
	if (uart_tx_clear) begin
		uart_tx_pending <= 1'd0;
	end
	uart_tx_trigger_d <= uart_tx_trigger;
	if ((uart_tx_trigger & (~uart_tx_trigger_d))) begin
		uart_tx_pending <= 1'd1;
	end
	if (uart_rx_clear) begin
		uart_rx_pending <= 1'd0;
	end
	uart_rx_trigger_d <= uart_rx_trigger;
	if ((uart_rx_trigger & (~uart_rx_trigger_d))) begin
		uart_rx_pending <= 1'd1;
	end
	if (uart_tx_fifo_syncfifo_re) begin
		uart_tx_fifo_readable <= 1'd1;
	end else begin
		if (uart_tx_fifo_re) begin
			uart_tx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		uart_tx_fifo_produce <= (uart_tx_fifo_produce + 1'd1);
	end
	if (uart_tx_fifo_do_read) begin
		uart_tx_fifo_consume <= (uart_tx_fifo_consume + 1'd1);
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		if ((~uart_tx_fifo_do_read)) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_tx_fifo_do_read) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 - 1'd1);
		end
	end
	if (uart_rx_fifo_syncfifo_re) begin
		uart_rx_fifo_readable <= 1'd1;
	end else begin
		if (uart_rx_fifo_re) begin
			uart_rx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		uart_rx_fifo_produce <= (uart_rx_fifo_produce + 1'd1);
	end
	if (uart_rx_fifo_do_read) begin
		uart_rx_fifo_consume <= (uart_rx_fifo_consume + 1'd1);
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		if ((~uart_rx_fifo_do_read)) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_rx_fifo_do_read) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 - 1'd1);
		end
	end
	if (timer_en_storage) begin
		if ((timer_value == 1'd0)) begin
			timer_value <= timer_reload_storage;
		end else begin
			timer_value <= (timer_value - 1'd1);
		end
	end else begin
		timer_value <= timer_load_storage;
	end
	if (timer_update_value_re) begin
		timer_value_status <= timer_value;
	end
	if (timer_zero_clear) begin
		timer_zero_pending <= 1'd0;
	end
	timer_zero_trigger_d <= timer_zero_trigger;
	if ((timer_zero_trigger & (~timer_zero_trigger_d))) begin
		timer_zero_pending <= 1'd1;
	end
	card_detect_d <= card_detect_status0;
	card_detect_irq <= (card_detect_status0 ^ card_detect_d);
	if ((~clocker_stop)) begin
		clocker_clks <= (clocker_clks + 1'd1);
	end
	clocker_clk_d <= clocker_clk1;
	if (clocker_clk_d) begin
		clocker_ce_delayed <= clocker_clk_en;
	end
	subfragments_sdphyinit_state <= subfragments_sdphyinit_next_state;
	if (init_count_sdphyinit_next_value_ce) begin
		init_count <= init_count_sdphyinit_next_value;
	end
	subfragments_sdphycmdw_state <= subfragments_sdphycmdw_next_state;
	if (cmdw_count_sdphycmdw_next_value_ce) begin
		cmdw_count <= cmdw_count_sdphycmdw_next_value;
	end
	if (cmdr_cmdr_pads_in_valid) begin
		cmdr_cmdr_run <= (cmdr_cmdr_start | cmdr_cmdr_run);
	end
	if (cmdr_cmdr_converter_source_ready) begin
		cmdr_cmdr_converter_strobe_all <= 1'd0;
	end
	if (cmdr_cmdr_converter_load_part) begin
		if (((cmdr_cmdr_converter_demux == 3'd7) | cmdr_cmdr_converter_sink_last)) begin
			cmdr_cmdr_converter_demux <= 1'd0;
			cmdr_cmdr_converter_strobe_all <= 1'd1;
		end else begin
			cmdr_cmdr_converter_demux <= (cmdr_cmdr_converter_demux + 1'd1);
		end
	end
	if ((cmdr_cmdr_converter_source_valid & cmdr_cmdr_converter_source_ready)) begin
		if ((cmdr_cmdr_converter_sink_valid & cmdr_cmdr_converter_sink_ready)) begin
			cmdr_cmdr_converter_source_first <= cmdr_cmdr_converter_sink_first;
			cmdr_cmdr_converter_source_last <= cmdr_cmdr_converter_sink_last;
		end else begin
			cmdr_cmdr_converter_source_first <= 1'd0;
			cmdr_cmdr_converter_source_last <= 1'd0;
		end
	end else begin
		if ((cmdr_cmdr_converter_sink_valid & cmdr_cmdr_converter_sink_ready)) begin
			cmdr_cmdr_converter_source_first <= (cmdr_cmdr_converter_sink_first | cmdr_cmdr_converter_source_first);
			cmdr_cmdr_converter_source_last <= (cmdr_cmdr_converter_sink_last | cmdr_cmdr_converter_source_last);
		end
	end
	if (cmdr_cmdr_converter_load_part) begin
		case (cmdr_cmdr_converter_demux)
			1'd0: begin
				cmdr_cmdr_converter_source_payload_data[7] <= cmdr_cmdr_converter_sink_payload_data;
			end
			1'd1: begin
				cmdr_cmdr_converter_source_payload_data[6] <= cmdr_cmdr_converter_sink_payload_data;
			end
			2'd2: begin
				cmdr_cmdr_converter_source_payload_data[5] <= cmdr_cmdr_converter_sink_payload_data;
			end
			2'd3: begin
				cmdr_cmdr_converter_source_payload_data[4] <= cmdr_cmdr_converter_sink_payload_data;
			end
			3'd4: begin
				cmdr_cmdr_converter_source_payload_data[3] <= cmdr_cmdr_converter_sink_payload_data;
			end
			3'd5: begin
				cmdr_cmdr_converter_source_payload_data[2] <= cmdr_cmdr_converter_sink_payload_data;
			end
			3'd6: begin
				cmdr_cmdr_converter_source_payload_data[1] <= cmdr_cmdr_converter_sink_payload_data;
			end
			3'd7: begin
				cmdr_cmdr_converter_source_payload_data[0] <= cmdr_cmdr_converter_sink_payload_data;
			end
		endcase
	end
	if (cmdr_cmdr_converter_load_part) begin
		cmdr_cmdr_converter_source_payload_valid_token_count <= (cmdr_cmdr_converter_demux + 1'd1);
	end
	if (((~cmdr_cmdr_buf_source_valid) | cmdr_cmdr_buf_source_ready)) begin
		cmdr_cmdr_buf_source_valid <= cmdr_cmdr_buf_sink_valid;
		cmdr_cmdr_buf_source_first <= cmdr_cmdr_buf_sink_first;
		cmdr_cmdr_buf_source_last <= cmdr_cmdr_buf_sink_last;
		cmdr_cmdr_buf_source_payload_data <= cmdr_cmdr_buf_sink_payload_data;
	end
	if (cmdr_cmdr_reset) begin
		cmdr_cmdr_run <= 1'd0;
		cmdr_cmdr_converter_source_payload_data <= 8'd0;
		cmdr_cmdr_converter_source_payload_valid_token_count <= 4'd0;
		cmdr_cmdr_converter_demux <= 3'd0;
		cmdr_cmdr_converter_strobe_all <= 1'd0;
		cmdr_cmdr_buf_source_valid <= 1'd0;
		cmdr_cmdr_buf_source_payload_data <= 8'd0;
	end
	subfragments_sdphycmdr_state <= subfragments_sdphycmdr_next_state;
	if (cmdr_timeout_sdphycmdr_next_value_ce0) begin
		cmdr_timeout <= cmdr_timeout_sdphycmdr_next_value0;
	end
	if (cmdr_count_sdphycmdr_next_value_ce1) begin
		cmdr_count <= cmdr_count_sdphycmdr_next_value1;
	end
	if (cmdr_busy_sdphycmdr_next_value_ce2) begin
		cmdr_busy <= cmdr_busy_sdphycmdr_next_value2;
	end
	if (cmdr_cmdr_reset_sdphycmdr_next_value_ce3) begin
		cmdr_cmdr_reset <= cmdr_cmdr_reset_sdphycmdr_next_value3;
	end
	if (dataw_crc_pads_in_valid) begin
		dataw_crc_run <= (dataw_crc_start | dataw_crc_run);
	end
	if (dataw_crc_converter_source_ready) begin
		dataw_crc_converter_strobe_all <= 1'd0;
	end
	if (dataw_crc_converter_load_part) begin
		if (((dataw_crc_converter_demux == 3'd7) | dataw_crc_converter_sink_last)) begin
			dataw_crc_converter_demux <= 1'd0;
			dataw_crc_converter_strobe_all <= 1'd1;
		end else begin
			dataw_crc_converter_demux <= (dataw_crc_converter_demux + 1'd1);
		end
	end
	if ((dataw_crc_converter_source_valid & dataw_crc_converter_source_ready)) begin
		if ((dataw_crc_converter_sink_valid & dataw_crc_converter_sink_ready)) begin
			dataw_crc_converter_source_first <= dataw_crc_converter_sink_first;
			dataw_crc_converter_source_last <= dataw_crc_converter_sink_last;
		end else begin
			dataw_crc_converter_source_first <= 1'd0;
			dataw_crc_converter_source_last <= 1'd0;
		end
	end else begin
		if ((dataw_crc_converter_sink_valid & dataw_crc_converter_sink_ready)) begin
			dataw_crc_converter_source_first <= (dataw_crc_converter_sink_first | dataw_crc_converter_source_first);
			dataw_crc_converter_source_last <= (dataw_crc_converter_sink_last | dataw_crc_converter_source_last);
		end
	end
	if (dataw_crc_converter_load_part) begin
		case (dataw_crc_converter_demux)
			1'd0: begin
				dataw_crc_converter_source_payload_data[7] <= dataw_crc_converter_sink_payload_data;
			end
			1'd1: begin
				dataw_crc_converter_source_payload_data[6] <= dataw_crc_converter_sink_payload_data;
			end
			2'd2: begin
				dataw_crc_converter_source_payload_data[5] <= dataw_crc_converter_sink_payload_data;
			end
			2'd3: begin
				dataw_crc_converter_source_payload_data[4] <= dataw_crc_converter_sink_payload_data;
			end
			3'd4: begin
				dataw_crc_converter_source_payload_data[3] <= dataw_crc_converter_sink_payload_data;
			end
			3'd5: begin
				dataw_crc_converter_source_payload_data[2] <= dataw_crc_converter_sink_payload_data;
			end
			3'd6: begin
				dataw_crc_converter_source_payload_data[1] <= dataw_crc_converter_sink_payload_data;
			end
			3'd7: begin
				dataw_crc_converter_source_payload_data[0] <= dataw_crc_converter_sink_payload_data;
			end
		endcase
	end
	if (dataw_crc_converter_load_part) begin
		dataw_crc_converter_source_payload_valid_token_count <= (dataw_crc_converter_demux + 1'd1);
	end
	if (((~dataw_crc_buf_source_valid) | dataw_crc_buf_source_ready)) begin
		dataw_crc_buf_source_valid <= dataw_crc_buf_sink_valid;
		dataw_crc_buf_source_first <= dataw_crc_buf_sink_first;
		dataw_crc_buf_source_last <= dataw_crc_buf_sink_last;
		dataw_crc_buf_source_payload_data <= dataw_crc_buf_sink_payload_data;
	end
	if (dataw_crc_reset) begin
		dataw_crc_run <= 1'd0;
		dataw_crc_converter_source_payload_data <= 8'd0;
		dataw_crc_converter_source_payload_valid_token_count <= 4'd0;
		dataw_crc_converter_demux <= 3'd0;
		dataw_crc_converter_strobe_all <= 1'd0;
		dataw_crc_buf_source_valid <= 1'd0;
		dataw_crc_buf_source_payload_data <= 8'd0;
	end
	subfragments_sdphydataw_state <= subfragments_sdphydataw_next_state;
	if (dataw_accepted1_sdphydataw_next_value_ce0) begin
		dataw_accepted1 <= dataw_accepted1_sdphydataw_next_value0;
	end
	if (dataw_crc_error1_sdphydataw_next_value_ce1) begin
		dataw_crc_error1 <= dataw_crc_error1_sdphydataw_next_value1;
	end
	if (dataw_write_error1_sdphydataw_next_value_ce2) begin
		dataw_write_error1 <= dataw_write_error1_sdphydataw_next_value2;
	end
	if (dataw_count_sdphydataw_next_value_ce3) begin
		dataw_count <= dataw_count_sdphydataw_next_value3;
	end
	if (datar_datar_pads_in_valid) begin
		datar_datar_run <= (datar_datar_start | datar_datar_run);
	end
	if (datar_datar_converter_source_ready) begin
		datar_datar_converter_strobe_all <= 1'd0;
	end
	if (datar_datar_converter_load_part) begin
		if (((datar_datar_converter_demux == 1'd1) | datar_datar_converter_sink_last)) begin
			datar_datar_converter_demux <= 1'd0;
			datar_datar_converter_strobe_all <= 1'd1;
		end else begin
			datar_datar_converter_demux <= (datar_datar_converter_demux + 1'd1);
		end
	end
	if ((datar_datar_converter_source_valid & datar_datar_converter_source_ready)) begin
		if ((datar_datar_converter_sink_valid & datar_datar_converter_sink_ready)) begin
			datar_datar_converter_source_first <= datar_datar_converter_sink_first;
			datar_datar_converter_source_last <= datar_datar_converter_sink_last;
		end else begin
			datar_datar_converter_source_first <= 1'd0;
			datar_datar_converter_source_last <= 1'd0;
		end
	end else begin
		if ((datar_datar_converter_sink_valid & datar_datar_converter_sink_ready)) begin
			datar_datar_converter_source_first <= (datar_datar_converter_sink_first | datar_datar_converter_source_first);
			datar_datar_converter_source_last <= (datar_datar_converter_sink_last | datar_datar_converter_source_last);
		end
	end
	if (datar_datar_converter_load_part) begin
		case (datar_datar_converter_demux)
			1'd0: begin
				datar_datar_converter_source_payload_data[7:4] <= datar_datar_converter_sink_payload_data;
			end
			1'd1: begin
				datar_datar_converter_source_payload_data[3:0] <= datar_datar_converter_sink_payload_data;
			end
		endcase
	end
	if (datar_datar_converter_load_part) begin
		datar_datar_converter_source_payload_valid_token_count <= (datar_datar_converter_demux + 1'd1);
	end
	if (((~datar_datar_buf_source_valid) | datar_datar_buf_source_ready)) begin
		datar_datar_buf_source_valid <= datar_datar_buf_sink_valid;
		datar_datar_buf_source_first <= datar_datar_buf_sink_first;
		datar_datar_buf_source_last <= datar_datar_buf_sink_last;
		datar_datar_buf_source_payload_data <= datar_datar_buf_sink_payload_data;
	end
	if (datar_datar_reset) begin
		datar_datar_run <= 1'd0;
		datar_datar_converter_source_payload_data <= 8'd0;
		datar_datar_converter_source_payload_valid_token_count <= 2'd0;
		datar_datar_converter_demux <= 1'd0;
		datar_datar_converter_strobe_all <= 1'd0;
		datar_datar_buf_source_valid <= 1'd0;
		datar_datar_buf_source_payload_data <= 8'd0;
	end
	subfragments_sdphydatar_state <= subfragments_sdphydatar_next_state;
	if (datar_count_sdphydatar_next_value_ce0) begin
		datar_count <= datar_count_sdphydatar_next_value0;
	end
	if (datar_timeout_sdphydatar_next_value_ce1) begin
		datar_timeout <= datar_timeout_sdphydatar_next_value1;
	end
	if (datar_datar_reset_sdphydatar_next_value_ce2) begin
		datar_datar_reset <= datar_datar_reset_sdphydatar_next_value2;
	end
	clocker_clk_delay <= {clocker_clk_delay, clocker_clk0};
	sdpads_data_i_ce <= (clocker_clk_delay[1] & (~clocker_clk_delay[0]));
	if (sdcore_crc7_inserter_reset) begin
		sdcore_crc7_inserter_reg0 <= 1'd0;
	end else begin
		if (sdcore_crc7_inserter_enable) begin
			sdcore_crc7_inserter_reg0 <= sdcore_crc7_inserter_reg40;
		end
	end
	if (sdcore_crc16_inserter_crc0_reset) begin
		sdcore_crc16_inserter_crc0_reg0 <= 1'd0;
	end else begin
		if (sdcore_crc16_inserter_crc0_enable) begin
			sdcore_crc16_inserter_crc0_reg0 <= sdcore_crc16_inserter_crc0_reg2;
		end
	end
	if (sdcore_crc16_inserter_crc1_reset) begin
		sdcore_crc16_inserter_crc1_reg0 <= 1'd0;
	end else begin
		if (sdcore_crc16_inserter_crc1_enable) begin
			sdcore_crc16_inserter_crc1_reg0 <= sdcore_crc16_inserter_crc1_reg2;
		end
	end
	if (sdcore_crc16_inserter_crc2_reset) begin
		sdcore_crc16_inserter_crc2_reg0 <= 1'd0;
	end else begin
		if (sdcore_crc16_inserter_crc2_enable) begin
			sdcore_crc16_inserter_crc2_reg0 <= sdcore_crc16_inserter_crc2_reg2;
		end
	end
	if (sdcore_crc16_inserter_crc3_reset) begin
		sdcore_crc16_inserter_crc3_reg0 <= 1'd0;
	end else begin
		if (sdcore_crc16_inserter_crc3_enable) begin
			sdcore_crc16_inserter_crc3_reg0 <= sdcore_crc16_inserter_crc3_reg2;
		end
	end
	subfragments_sdcore_crc16inserter_state <= subfragments_sdcore_crc16inserter_next_state;
	if (sdcore_crc16_inserter_count_sdcore_crc16inserter_next_value_ce) begin
		sdcore_crc16_inserter_count <= sdcore_crc16_inserter_count_sdcore_crc16inserter_next_value;
	end
	if (((sdcore_fifo_syncfifo_we & sdcore_fifo_syncfifo_writable) & (~sdcore_fifo_replace))) begin
		sdcore_fifo_produce <= (sdcore_fifo_produce + 1'd1);
	end
	if (sdcore_fifo_do_read) begin
		sdcore_fifo_consume <= (sdcore_fifo_consume + 1'd1);
	end
	if (((sdcore_fifo_syncfifo_we & sdcore_fifo_syncfifo_writable) & (~sdcore_fifo_replace))) begin
		if ((~sdcore_fifo_do_read)) begin
			sdcore_fifo_level <= (sdcore_fifo_level + 1'd1);
		end
	end else begin
		if (sdcore_fifo_do_read) begin
			sdcore_fifo_level <= (sdcore_fifo_level - 1'd1);
		end
	end
	if (sdcore_fifo_reset) begin
		sdcore_fifo_level <= 4'd0;
		sdcore_fifo_produce <= 3'd0;
		sdcore_fifo_consume <= 3'd0;
	end
	subfragments_sdcore_fsm_state <= subfragments_sdcore_fsm_next_state;
	if (sdcore_cmd_done_sdcore_fsm_next_value_ce0) begin
		sdcore_cmd_done <= sdcore_cmd_done_sdcore_fsm_next_value0;
	end
	if (sdcore_data_done_sdcore_fsm_next_value_ce1) begin
		sdcore_data_done <= sdcore_data_done_sdcore_fsm_next_value1;
	end
	if (sdcore_cmd_count_sdcore_fsm_next_value_ce2) begin
		sdcore_cmd_count <= sdcore_cmd_count_sdcore_fsm_next_value2;
	end
	if (sdcore_data_count_sdcore_fsm_next_value_ce3) begin
		sdcore_data_count <= sdcore_data_count_sdcore_fsm_next_value3;
	end
	if (sdcore_cmd_error_sdcore_fsm_next_value_ce4) begin
		sdcore_cmd_error <= sdcore_cmd_error_sdcore_fsm_next_value4;
	end
	if (sdcore_cmd_timeout_sdcore_fsm_next_value_ce5) begin
		sdcore_cmd_timeout <= sdcore_cmd_timeout_sdcore_fsm_next_value5;
	end
	if (sdcore_data_error_sdcore_fsm_next_value_ce6) begin
		sdcore_data_error <= sdcore_data_error_sdcore_fsm_next_value6;
	end
	if (sdcore_data_timeout_sdcore_fsm_next_value_ce7) begin
		sdcore_data_timeout <= sdcore_data_timeout_sdcore_fsm_next_value7;
	end
	if (sdcore_cmd_response_status_sdcore_fsm_next_value_ce8) begin
		sdcore_cmd_response_status <= sdcore_cmd_response_status_sdcore_fsm_next_value8;
	end
	if ((~sdblock2mem_wishbonedmawriter_enable_storage)) begin
		sdblock2mem_connect <= 1'd0;
	end else begin
		if (sdblock2mem_start) begin
			sdblock2mem_connect <= 1'd1;
		end
	end
	sdblock2mem_done_d <= sdblock2mem_wishbonedmawriter_done_status;
	sdblock2mem_irq <= (sdblock2mem_wishbonedmawriter_done_status & (~sdblock2mem_done_d));
	if (sdblock2mem_fifo_syncfifo_re) begin
		sdblock2mem_fifo_readable <= 1'd1;
	end else begin
		if (sdblock2mem_fifo_re) begin
			sdblock2mem_fifo_readable <= 1'd0;
		end
	end
	if (((sdblock2mem_fifo_syncfifo_we & sdblock2mem_fifo_syncfifo_writable) & (~sdblock2mem_fifo_replace))) begin
		sdblock2mem_fifo_produce <= (sdblock2mem_fifo_produce + 1'd1);
	end
	if (sdblock2mem_fifo_do_read) begin
		sdblock2mem_fifo_consume <= (sdblock2mem_fifo_consume + 1'd1);
	end
	if (((sdblock2mem_fifo_syncfifo_we & sdblock2mem_fifo_syncfifo_writable) & (~sdblock2mem_fifo_replace))) begin
		if ((~sdblock2mem_fifo_do_read)) begin
			sdblock2mem_fifo_level0 <= (sdblock2mem_fifo_level0 + 1'd1);
		end
	end else begin
		if (sdblock2mem_fifo_do_read) begin
			sdblock2mem_fifo_level0 <= (sdblock2mem_fifo_level0 - 1'd1);
		end
	end
	if (sdblock2mem_converter_source_ready) begin
		sdblock2mem_converter_strobe_all <= 1'd0;
	end
	if (sdblock2mem_converter_load_part) begin
		if (((sdblock2mem_converter_demux == 2'd3) | sdblock2mem_converter_sink_last)) begin
			sdblock2mem_converter_demux <= 1'd0;
			sdblock2mem_converter_strobe_all <= 1'd1;
		end else begin
			sdblock2mem_converter_demux <= (sdblock2mem_converter_demux + 1'd1);
		end
	end
	if ((sdblock2mem_converter_source_valid & sdblock2mem_converter_source_ready)) begin
		if ((sdblock2mem_converter_sink_valid & sdblock2mem_converter_sink_ready)) begin
			sdblock2mem_converter_source_first <= sdblock2mem_converter_sink_first;
			sdblock2mem_converter_source_last <= sdblock2mem_converter_sink_last;
		end else begin
			sdblock2mem_converter_source_first <= 1'd0;
			sdblock2mem_converter_source_last <= 1'd0;
		end
	end else begin
		if ((sdblock2mem_converter_sink_valid & sdblock2mem_converter_sink_ready)) begin
			sdblock2mem_converter_source_first <= (sdblock2mem_converter_sink_first | sdblock2mem_converter_source_first);
			sdblock2mem_converter_source_last <= (sdblock2mem_converter_sink_last | sdblock2mem_converter_source_last);
		end
	end
	if (sdblock2mem_converter_load_part) begin
		case (sdblock2mem_converter_demux)
			1'd0: begin
				sdblock2mem_converter_source_payload_data[31:24] <= sdblock2mem_converter_sink_payload_data;
			end
			1'd1: begin
				sdblock2mem_converter_source_payload_data[23:16] <= sdblock2mem_converter_sink_payload_data;
			end
			2'd2: begin
				sdblock2mem_converter_source_payload_data[15:8] <= sdblock2mem_converter_sink_payload_data;
			end
			2'd3: begin
				sdblock2mem_converter_source_payload_data[7:0] <= sdblock2mem_converter_sink_payload_data;
			end
		endcase
	end
	if (sdblock2mem_converter_load_part) begin
		sdblock2mem_converter_source_payload_valid_token_count <= (sdblock2mem_converter_demux + 1'd1);
	end
	subfragments_state <= subfragments_next_state;
	if (sdblock2mem_wishbonedmawriter_offset_next_value_ce) begin
		sdblock2mem_wishbonedmawriter_offset <= sdblock2mem_wishbonedmawriter_offset_next_value;
	end
	if (sdblock2mem_wishbonedmawriter_reset) begin
		sdblock2mem_wishbonedmawriter_offset <= 32'd0;
		subfragments_state <= 2'd0;
	end
	if ((sdmem2block_source_source_valid0 & sdmem2block_source_source_ready0)) begin
		sdmem2block_count <= (sdmem2block_count + 1'd1);
		if (sdmem2block_source_source_last0) begin
			sdmem2block_count <= 1'd0;
		end
	end
	sdmem2block_done_d <= sdmem2block_dma_done_status;
	sdmem2block_irq <= (sdmem2block_dma_done_status & (~sdmem2block_done_d));
	subfragments_sdmem2blockdma_fsm_state <= subfragments_sdmem2blockdma_fsm_next_state;
	if (sdmem2block_dma_data_sdmem2blockdma_fsm_next_value_ce) begin
		sdmem2block_dma_data <= sdmem2block_dma_data_sdmem2blockdma_fsm_next_value;
	end
	subfragments_sdmem2blockdma_resetinserter_state <= subfragments_sdmem2blockdma_resetinserter_next_state;
	if (sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value_ce) begin
		sdmem2block_dma_offset <= sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value;
	end
	if (sdmem2block_dma_reset) begin
		sdmem2block_dma_offset <= 32'd0;
		subfragments_sdmem2blockdma_resetinserter_state <= 2'd0;
	end
	if ((sdmem2block_converter_source_valid & sdmem2block_converter_source_ready)) begin
		if (sdmem2block_converter_last) begin
			sdmem2block_converter_mux <= 1'd0;
		end else begin
			sdmem2block_converter_mux <= (sdmem2block_converter_mux + 1'd1);
		end
	end
	if (sdmem2block_fifo_syncfifo_re) begin
		sdmem2block_fifo_readable <= 1'd1;
	end else begin
		if (sdmem2block_fifo_re) begin
			sdmem2block_fifo_readable <= 1'd0;
		end
	end
	if (((sdmem2block_fifo_syncfifo_we & sdmem2block_fifo_syncfifo_writable) & (~sdmem2block_fifo_replace))) begin
		sdmem2block_fifo_produce <= (sdmem2block_fifo_produce + 1'd1);
	end
	if (sdmem2block_fifo_do_read) begin
		sdmem2block_fifo_consume <= (sdmem2block_fifo_consume + 1'd1);
	end
	if (((sdmem2block_fifo_syncfifo_we & sdmem2block_fifo_syncfifo_writable) & (~sdmem2block_fifo_replace))) begin
		if ((~sdmem2block_fifo_do_read)) begin
			sdmem2block_fifo_level0 <= (sdmem2block_fifo_level0 + 1'd1);
		end
	end else begin
		if (sdmem2block_fifo_do_read) begin
			sdmem2block_fifo_level0 <= (sdmem2block_fifo_level0 - 1'd1);
		end
	end
	if (card_detect_clear) begin
		card_detect_pending <= 1'd0;
	end
	if (card_detect_trigger) begin
		card_detect_pending <= 1'd1;
	end
	if (block2mem_dma_clear) begin
		block2mem_dma_pending <= 1'd0;
	end
	if (block2mem_dma_trigger) begin
		block2mem_dma_pending <= 1'd1;
	end
	if (mem2block_dma_clear) begin
		mem2block_dma_pending <= 1'd0;
	end
	if (mem2block_dma_trigger) begin
		mem2block_dma_pending <= 1'd1;
	end
	simsoc_state <= simsoc_next_state;
	case (simsoc_grant)
		1'd0: begin
			if ((~simsoc_request[0])) begin
				if (simsoc_request[1]) begin
					simsoc_grant <= 1'd1;
				end else begin
					if (simsoc_request[2]) begin
						simsoc_grant <= 2'd2;
					end
				end
			end
		end
		1'd1: begin
			if ((~simsoc_request[1])) begin
				if (simsoc_request[2]) begin
					simsoc_grant <= 2'd2;
				end else begin
					if (simsoc_request[0]) begin
						simsoc_grant <= 1'd0;
					end
				end
			end
		end
		2'd2: begin
			if ((~simsoc_request[2])) begin
				if (simsoc_request[0]) begin
					simsoc_grant <= 1'd0;
				end else begin
					if (simsoc_request[1]) begin
						simsoc_grant <= 1'd1;
					end
				end
			end
		end
	endcase
	simsoc_slave_sel_r <= simsoc_slave_sel;
	if (simsoc_wait) begin
		if ((~simsoc_done)) begin
			simsoc_count <= (simsoc_count - 1'd1);
		end
	end else begin
		simsoc_count <= 20'd1000000;
	end
	simsoc_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
	if (simsoc_csr_bankarray_csrbank0_sel) begin
		case (simsoc_csr_bankarray_interface0_bank_bus_adr[8:0])
			1'd0: begin
				simsoc_csr_bankarray_interface0_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank0_reset0_w;
			end
			1'd1: begin
				simsoc_csr_bankarray_interface0_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank0_scratch0_w;
			end
			2'd2: begin
				simsoc_csr_bankarray_interface0_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank0_bus_errors_w;
			end
		endcase
	end
	if (simsoc_csr_bankarray_csrbank0_reset0_re) begin
		reset_storage[1:0] <= simsoc_csr_bankarray_csrbank0_reset0_r;
	end
	reset_re <= simsoc_csr_bankarray_csrbank0_reset0_re;
	if (simsoc_csr_bankarray_csrbank0_scratch0_re) begin
		scratch_storage[31:0] <= simsoc_csr_bankarray_csrbank0_scratch0_r;
	end
	scratch_re <= simsoc_csr_bankarray_csrbank0_scratch0_re;
	bus_errors_re <= simsoc_csr_bankarray_csrbank0_bus_errors_re;
	simsoc_csr_bankarray_sel_r <= simsoc_csr_bankarray_sel;
	simsoc_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
	if (simsoc_csr_bankarray_csrbank1_sel) begin
		case (simsoc_csr_bankarray_interface1_bank_bus_adr[8:0])
			1'd0: begin
				simsoc_csr_bankarray_interface1_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank1_dma_base1_w;
			end
			1'd1: begin
				simsoc_csr_bankarray_interface1_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank1_dma_base0_w;
			end
			2'd2: begin
				simsoc_csr_bankarray_interface1_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank1_dma_length0_w;
			end
			2'd3: begin
				simsoc_csr_bankarray_interface1_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank1_dma_enable0_w;
			end
			3'd4: begin
				simsoc_csr_bankarray_interface1_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank1_dma_done_w;
			end
			3'd5: begin
				simsoc_csr_bankarray_interface1_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank1_dma_loop0_w;
			end
			3'd6: begin
				simsoc_csr_bankarray_interface1_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank1_dma_offset_w;
			end
		endcase
	end
	if (simsoc_csr_bankarray_csrbank1_dma_base1_re) begin
		sdblock2mem_wishbonedmawriter_base_storage[63:32] <= simsoc_csr_bankarray_csrbank1_dma_base1_r;
	end
	if (simsoc_csr_bankarray_csrbank1_dma_base0_re) begin
		sdblock2mem_wishbonedmawriter_base_storage[31:0] <= simsoc_csr_bankarray_csrbank1_dma_base0_r;
	end
	sdblock2mem_wishbonedmawriter_base_re <= simsoc_csr_bankarray_csrbank1_dma_base0_re;
	if (simsoc_csr_bankarray_csrbank1_dma_length0_re) begin
		sdblock2mem_wishbonedmawriter_length_storage[31:0] <= simsoc_csr_bankarray_csrbank1_dma_length0_r;
	end
	sdblock2mem_wishbonedmawriter_length_re <= simsoc_csr_bankarray_csrbank1_dma_length0_re;
	if (simsoc_csr_bankarray_csrbank1_dma_enable0_re) begin
		sdblock2mem_wishbonedmawriter_enable_storage <= simsoc_csr_bankarray_csrbank1_dma_enable0_r;
	end
	sdblock2mem_wishbonedmawriter_enable_re <= simsoc_csr_bankarray_csrbank1_dma_enable0_re;
	sdblock2mem_wishbonedmawriter_done_re <= simsoc_csr_bankarray_csrbank1_dma_done_re;
	if (simsoc_csr_bankarray_csrbank1_dma_loop0_re) begin
		sdblock2mem_wishbonedmawriter_loop_storage <= simsoc_csr_bankarray_csrbank1_dma_loop0_r;
	end
	sdblock2mem_wishbonedmawriter_loop_re <= simsoc_csr_bankarray_csrbank1_dma_loop0_re;
	sdblock2mem_wishbonedmawriter_offset_re <= simsoc_csr_bankarray_csrbank1_dma_offset_re;
	simsoc_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
	if (simsoc_csr_bankarray_csrbank2_sel) begin
		case (simsoc_csr_bankarray_interface2_bank_bus_adr[8:0])
			1'd0: begin
				simsoc_csr_bankarray_interface2_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank2_cmd_argument0_w;
			end
			1'd1: begin
				simsoc_csr_bankarray_interface2_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank2_cmd_command0_w;
			end
			2'd2: begin
				simsoc_csr_bankarray_interface2_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank2_cmd_send0_w;
			end
			2'd3: begin
				simsoc_csr_bankarray_interface2_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank2_cmd_response3_w;
			end
			3'd4: begin
				simsoc_csr_bankarray_interface2_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank2_cmd_response2_w;
			end
			3'd5: begin
				simsoc_csr_bankarray_interface2_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank2_cmd_response1_w;
			end
			3'd6: begin
				simsoc_csr_bankarray_interface2_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank2_cmd_response0_w;
			end
			3'd7: begin
				simsoc_csr_bankarray_interface2_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank2_cmd_event_w;
			end
			4'd8: begin
				simsoc_csr_bankarray_interface2_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank2_data_event_w;
			end
			4'd9: begin
				simsoc_csr_bankarray_interface2_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank2_block_length0_w;
			end
			4'd10: begin
				simsoc_csr_bankarray_interface2_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank2_block_count0_w;
			end
		endcase
	end
	if (simsoc_csr_bankarray_csrbank2_cmd_argument0_re) begin
		sdcore_cmd_argument_storage[31:0] <= simsoc_csr_bankarray_csrbank2_cmd_argument0_r;
	end
	sdcore_cmd_argument_re <= simsoc_csr_bankarray_csrbank2_cmd_argument0_re;
	if (simsoc_csr_bankarray_csrbank2_cmd_command0_re) begin
		sdcore_cmd_command_storage[13:0] <= simsoc_csr_bankarray_csrbank2_cmd_command0_r;
	end
	sdcore_cmd_command_re <= simsoc_csr_bankarray_csrbank2_cmd_command0_re;
	if (simsoc_csr_bankarray_csrbank2_cmd_send0_re) begin
		sdcore_cmd_send_storage <= simsoc_csr_bankarray_csrbank2_cmd_send0_r;
	end
	sdcore_cmd_send_re <= simsoc_csr_bankarray_csrbank2_cmd_send0_re;
	sdcore_cmd_response_re <= simsoc_csr_bankarray_csrbank2_cmd_response0_re;
	sdcore_cmd_event_re <= simsoc_csr_bankarray_csrbank2_cmd_event_re;
	sdcore_data_event_re <= simsoc_csr_bankarray_csrbank2_data_event_re;
	if (simsoc_csr_bankarray_csrbank2_block_length0_re) begin
		sdcore_block_length_storage[9:0] <= simsoc_csr_bankarray_csrbank2_block_length0_r;
	end
	sdcore_block_length_re <= simsoc_csr_bankarray_csrbank2_block_length0_re;
	if (simsoc_csr_bankarray_csrbank2_block_count0_re) begin
		sdcore_block_count_storage[31:0] <= simsoc_csr_bankarray_csrbank2_block_count0_r;
	end
	sdcore_block_count_re <= simsoc_csr_bankarray_csrbank2_block_count0_re;
	simsoc_csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
	if (simsoc_csr_bankarray_csrbank3_sel) begin
		case (simsoc_csr_bankarray_interface3_bank_bus_adr[8:0])
			1'd0: begin
				simsoc_csr_bankarray_interface3_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank3_status_w;
			end
			1'd1: begin
				simsoc_csr_bankarray_interface3_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank3_pending_w;
			end
			2'd2: begin
				simsoc_csr_bankarray_interface3_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank3_enable0_w;
			end
		endcase
	end
	eventmanager_status_re <= simsoc_csr_bankarray_csrbank3_status_re;
	if (simsoc_csr_bankarray_csrbank3_pending_re) begin
		eventmanager_pending_r[3:0] <= simsoc_csr_bankarray_csrbank3_pending_r;
	end
	eventmanager_pending_re <= simsoc_csr_bankarray_csrbank3_pending_re;
	if (simsoc_csr_bankarray_csrbank3_enable0_re) begin
		eventmanager_enable_storage[3:0] <= simsoc_csr_bankarray_csrbank3_enable0_r;
	end
	eventmanager_enable_re <= simsoc_csr_bankarray_csrbank3_enable0_re;
	simsoc_csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
	if (simsoc_csr_bankarray_csrbank4_sel) begin
		case (simsoc_csr_bankarray_interface4_bank_bus_adr[8:0])
			1'd0: begin
				simsoc_csr_bankarray_interface4_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank4_dma_base1_w;
			end
			1'd1: begin
				simsoc_csr_bankarray_interface4_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank4_dma_base0_w;
			end
			2'd2: begin
				simsoc_csr_bankarray_interface4_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank4_dma_length0_w;
			end
			2'd3: begin
				simsoc_csr_bankarray_interface4_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank4_dma_enable0_w;
			end
			3'd4: begin
				simsoc_csr_bankarray_interface4_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank4_dma_done_w;
			end
			3'd5: begin
				simsoc_csr_bankarray_interface4_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank4_dma_loop0_w;
			end
			3'd6: begin
				simsoc_csr_bankarray_interface4_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank4_dma_offset_w;
			end
		endcase
	end
	if (simsoc_csr_bankarray_csrbank4_dma_base1_re) begin
		sdmem2block_dma_base_storage[63:32] <= simsoc_csr_bankarray_csrbank4_dma_base1_r;
	end
	if (simsoc_csr_bankarray_csrbank4_dma_base0_re) begin
		sdmem2block_dma_base_storage[31:0] <= simsoc_csr_bankarray_csrbank4_dma_base0_r;
	end
	sdmem2block_dma_base_re <= simsoc_csr_bankarray_csrbank4_dma_base0_re;
	if (simsoc_csr_bankarray_csrbank4_dma_length0_re) begin
		sdmem2block_dma_length_storage[31:0] <= simsoc_csr_bankarray_csrbank4_dma_length0_r;
	end
	sdmem2block_dma_length_re <= simsoc_csr_bankarray_csrbank4_dma_length0_re;
	if (simsoc_csr_bankarray_csrbank4_dma_enable0_re) begin
		sdmem2block_dma_enable_storage <= simsoc_csr_bankarray_csrbank4_dma_enable0_r;
	end
	sdmem2block_dma_enable_re <= simsoc_csr_bankarray_csrbank4_dma_enable0_re;
	sdmem2block_dma_done_re <= simsoc_csr_bankarray_csrbank4_dma_done_re;
	if (simsoc_csr_bankarray_csrbank4_dma_loop0_re) begin
		sdmem2block_dma_loop_storage <= simsoc_csr_bankarray_csrbank4_dma_loop0_r;
	end
	sdmem2block_dma_loop_re <= simsoc_csr_bankarray_csrbank4_dma_loop0_re;
	sdmem2block_dma_offset_re <= simsoc_csr_bankarray_csrbank4_dma_offset_re;
	simsoc_csr_bankarray_interface5_bank_bus_dat_r <= 1'd0;
	if (simsoc_csr_bankarray_csrbank5_sel) begin
		case (simsoc_csr_bankarray_interface5_bank_bus_adr[8:0])
			1'd0: begin
				simsoc_csr_bankarray_interface5_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank5_card_detect_w;
			end
			1'd1: begin
				simsoc_csr_bankarray_interface5_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank5_clocker_divider0_w;
			end
			2'd2: begin
				simsoc_csr_bankarray_interface5_bank_bus_dat_r <= init_initialize_w;
			end
			2'd3: begin
				simsoc_csr_bankarray_interface5_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank5_dataw_status_w;
			end
		endcase
	end
	card_detect_re <= simsoc_csr_bankarray_csrbank5_card_detect_re;
	if (simsoc_csr_bankarray_csrbank5_clocker_divider0_re) begin
		clocker_storage[8:0] <= simsoc_csr_bankarray_csrbank5_clocker_divider0_r;
	end
	clocker_re <= simsoc_csr_bankarray_csrbank5_clocker_divider0_re;
	dataw_re <= simsoc_csr_bankarray_csrbank5_dataw_status_re;
	simsoc_csr_bankarray_interface6_bank_bus_dat_r <= 1'd0;
	if (simsoc_csr_bankarray_csrbank6_sel) begin
		case (simsoc_csr_bankarray_interface6_bank_bus_adr[8:0])
			1'd0: begin
				simsoc_csr_bankarray_interface6_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank6_load0_w;
			end
			1'd1: begin
				simsoc_csr_bankarray_interface6_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank6_reload0_w;
			end
			2'd2: begin
				simsoc_csr_bankarray_interface6_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank6_en0_w;
			end
			2'd3: begin
				simsoc_csr_bankarray_interface6_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank6_update_value0_w;
			end
			3'd4: begin
				simsoc_csr_bankarray_interface6_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank6_value_w;
			end
			3'd5: begin
				simsoc_csr_bankarray_interface6_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank6_ev_status_w;
			end
			3'd6: begin
				simsoc_csr_bankarray_interface6_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank6_ev_pending_w;
			end
			3'd7: begin
				simsoc_csr_bankarray_interface6_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank6_ev_enable0_w;
			end
		endcase
	end
	if (simsoc_csr_bankarray_csrbank6_load0_re) begin
		timer_load_storage[31:0] <= simsoc_csr_bankarray_csrbank6_load0_r;
	end
	timer_load_re <= simsoc_csr_bankarray_csrbank6_load0_re;
	if (simsoc_csr_bankarray_csrbank6_reload0_re) begin
		timer_reload_storage[31:0] <= simsoc_csr_bankarray_csrbank6_reload0_r;
	end
	timer_reload_re <= simsoc_csr_bankarray_csrbank6_reload0_re;
	if (simsoc_csr_bankarray_csrbank6_en0_re) begin
		timer_en_storage <= simsoc_csr_bankarray_csrbank6_en0_r;
	end
	timer_en_re <= simsoc_csr_bankarray_csrbank6_en0_re;
	if (simsoc_csr_bankarray_csrbank6_update_value0_re) begin
		timer_update_value_storage <= simsoc_csr_bankarray_csrbank6_update_value0_r;
	end
	timer_update_value_re <= simsoc_csr_bankarray_csrbank6_update_value0_re;
	timer_value_re <= simsoc_csr_bankarray_csrbank6_value_re;
	timer_status_re <= simsoc_csr_bankarray_csrbank6_ev_status_re;
	if (simsoc_csr_bankarray_csrbank6_ev_pending_re) begin
		timer_pending_r <= simsoc_csr_bankarray_csrbank6_ev_pending_r;
	end
	timer_pending_re <= simsoc_csr_bankarray_csrbank6_ev_pending_re;
	if (simsoc_csr_bankarray_csrbank6_ev_enable0_re) begin
		timer_enable_storage <= simsoc_csr_bankarray_csrbank6_ev_enable0_r;
	end
	timer_enable_re <= simsoc_csr_bankarray_csrbank6_ev_enable0_re;
	simsoc_csr_bankarray_interface7_bank_bus_dat_r <= 1'd0;
	if (simsoc_csr_bankarray_csrbank7_sel) begin
		case (simsoc_csr_bankarray_interface7_bank_bus_adr[8:0])
			1'd0: begin
				simsoc_csr_bankarray_interface7_bank_bus_dat_r <= uart_rxtx_w;
			end
			1'd1: begin
				simsoc_csr_bankarray_interface7_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank7_txfull_w;
			end
			2'd2: begin
				simsoc_csr_bankarray_interface7_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank7_rxempty_w;
			end
			2'd3: begin
				simsoc_csr_bankarray_interface7_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank7_ev_status_w;
			end
			3'd4: begin
				simsoc_csr_bankarray_interface7_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank7_ev_pending_w;
			end
			3'd5: begin
				simsoc_csr_bankarray_interface7_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank7_ev_enable0_w;
			end
			3'd6: begin
				simsoc_csr_bankarray_interface7_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank7_txempty_w;
			end
			3'd7: begin
				simsoc_csr_bankarray_interface7_bank_bus_dat_r <= simsoc_csr_bankarray_csrbank7_rxfull_w;
			end
		endcase
	end
	uart_txfull_re <= simsoc_csr_bankarray_csrbank7_txfull_re;
	uart_rxempty_re <= simsoc_csr_bankarray_csrbank7_rxempty_re;
	uart_status_re <= simsoc_csr_bankarray_csrbank7_ev_status_re;
	if (simsoc_csr_bankarray_csrbank7_ev_pending_re) begin
		uart_pending_r[1:0] <= simsoc_csr_bankarray_csrbank7_ev_pending_r;
	end
	uart_pending_re <= simsoc_csr_bankarray_csrbank7_ev_pending_re;
	if (simsoc_csr_bankarray_csrbank7_ev_enable0_re) begin
		uart_enable_storage[1:0] <= simsoc_csr_bankarray_csrbank7_ev_enable0_r;
	end
	uart_enable_re <= simsoc_csr_bankarray_csrbank7_ev_enable0_re;
	uart_txempty_re <= simsoc_csr_bankarray_csrbank7_txempty_re;
	uart_rxfull_re <= simsoc_csr_bankarray_csrbank7_rxfull_re;
	if (sys_rst) begin
		reset_storage <= 2'd0;
		reset_re <= 1'd0;
		scratch_storage <= 32'd305419896;
		scratch_re <= 1'd0;
		bus_errors_re <= 1'd0;
		bus_errors <= 32'd0;
		ram_bus_ack <= 1'd0;
		interface0_ram_bus_ack <= 1'd0;
		interface1_ram_bus_ack <= 1'd0;
		uart_txfull_re <= 1'd0;
		uart_rxempty_re <= 1'd0;
		uart_tx_pending <= 1'd0;
		uart_tx_trigger_d <= 1'd0;
		uart_rx_pending <= 1'd0;
		uart_rx_trigger_d <= 1'd0;
		uart_status_re <= 1'd0;
		uart_pending_re <= 1'd0;
		uart_pending_r <= 2'd0;
		uart_enable_storage <= 2'd0;
		uart_enable_re <= 1'd0;
		uart_txempty_re <= 1'd0;
		uart_rxfull_re <= 1'd0;
		uart_tx_fifo_readable <= 1'd0;
		uart_tx_fifo_level0 <= 5'd0;
		uart_tx_fifo_produce <= 4'd0;
		uart_tx_fifo_consume <= 4'd0;
		uart_rx_fifo_readable <= 1'd0;
		uart_rx_fifo_level0 <= 5'd0;
		uart_rx_fifo_produce <= 4'd0;
		uart_rx_fifo_consume <= 4'd0;
		timer_load_storage <= 32'd0;
		timer_load_re <= 1'd0;
		timer_reload_storage <= 32'd0;
		timer_reload_re <= 1'd0;
		timer_en_storage <= 1'd0;
		timer_en_re <= 1'd0;
		timer_update_value_storage <= 1'd0;
		timer_update_value_re <= 1'd0;
		timer_value_status <= 32'd0;
		timer_value_re <= 1'd0;
		timer_zero_pending <= 1'd0;
		timer_zero_trigger_d <= 1'd0;
		timer_status_re <= 1'd0;
		timer_pending_re <= 1'd0;
		timer_pending_r <= 1'd0;
		timer_enable_storage <= 1'd0;
		timer_enable_re <= 1'd0;
		timer_value <= 32'd0;
		card_detect_re <= 1'd0;
		clocker_storage <= 9'd256;
		clocker_re <= 1'd0;
		clocker_clks <= 9'd0;
		clocker_clk_d <= 1'd0;
		clocker_ce_delayed <= 1'd0;
		init_count <= 8'd0;
		cmdw_count <= 8'd0;
		cmdr_timeout <= 32'd1000000;
		cmdr_count <= 8'd0;
		cmdr_busy <= 1'd0;
		cmdr_cmdr_run <= 1'd0;
		cmdr_cmdr_converter_source_payload_data <= 8'd0;
		cmdr_cmdr_converter_source_payload_valid_token_count <= 4'd0;
		cmdr_cmdr_converter_demux <= 3'd0;
		cmdr_cmdr_converter_strobe_all <= 1'd0;
		cmdr_cmdr_buf_source_valid <= 1'd0;
		cmdr_cmdr_buf_source_payload_data <= 8'd0;
		cmdr_cmdr_reset <= 1'd0;
		dataw_re <= 1'd0;
		dataw_count <= 8'd0;
		dataw_accepted1 <= 1'd0;
		dataw_crc_error1 <= 1'd0;
		dataw_write_error1 <= 1'd0;
		dataw_crc_run <= 1'd0;
		dataw_crc_converter_source_payload_data <= 8'd0;
		dataw_crc_converter_source_payload_valid_token_count <= 4'd0;
		dataw_crc_converter_demux <= 3'd0;
		dataw_crc_converter_strobe_all <= 1'd0;
		dataw_crc_buf_source_valid <= 1'd0;
		dataw_crc_buf_source_payload_data <= 8'd0;
		datar_timeout <= 32'd1000000;
		datar_count <= 10'd0;
		datar_datar_run <= 1'd0;
		datar_datar_converter_source_payload_data <= 8'd0;
		datar_datar_converter_source_payload_valid_token_count <= 2'd0;
		datar_datar_converter_demux <= 1'd0;
		datar_datar_converter_strobe_all <= 1'd0;
		datar_datar_buf_source_valid <= 1'd0;
		datar_datar_buf_source_payload_data <= 8'd0;
		datar_datar_reset <= 1'd0;
		sdpads_data_i_ce <= 1'd0;
		clocker_clk_delay <= 2'd0;
		card_detect_irq <= 1'd0;
		card_detect_d <= 1'd0;
		sdcore_cmd_argument_storage <= 32'd0;
		sdcore_cmd_argument_re <= 1'd0;
		sdcore_cmd_command_storage <= 14'd0;
		sdcore_cmd_command_re <= 1'd0;
		sdcore_cmd_send_storage <= 1'd0;
		sdcore_cmd_send_re <= 1'd0;
		sdcore_cmd_response_status <= 128'd0;
		sdcore_cmd_response_re <= 1'd0;
		sdcore_cmd_event_re <= 1'd0;
		sdcore_data_event_re <= 1'd0;
		sdcore_block_length_storage <= 10'd0;
		sdcore_block_length_re <= 1'd0;
		sdcore_block_count_storage <= 32'd0;
		sdcore_block_count_re <= 1'd0;
		sdcore_crc7_inserter_reg0 <= 7'd0;
		sdcore_crc16_inserter_count <= 3'd0;
		sdcore_crc16_inserter_crc0_reg0 <= 16'd0;
		sdcore_crc16_inserter_crc1_reg0 <= 16'd0;
		sdcore_crc16_inserter_crc2_reg0 <= 16'd0;
		sdcore_crc16_inserter_crc3_reg0 <= 16'd0;
		sdcore_fifo_level <= 4'd0;
		sdcore_fifo_produce <= 3'd0;
		sdcore_fifo_consume <= 3'd0;
		sdcore_cmd_count <= 3'd0;
		sdcore_cmd_done <= 1'd0;
		sdcore_cmd_error <= 1'd0;
		sdcore_cmd_timeout <= 1'd0;
		sdcore_data_count <= 32'd0;
		sdcore_data_done <= 1'd0;
		sdcore_data_error <= 1'd0;
		sdcore_data_timeout <= 1'd0;
		sdblock2mem_irq <= 1'd0;
		sdblock2mem_fifo_readable <= 1'd0;
		sdblock2mem_fifo_level0 <= 10'd0;
		sdblock2mem_fifo_produce <= 9'd0;
		sdblock2mem_fifo_consume <= 9'd0;
		sdblock2mem_converter_source_payload_data <= 32'd0;
		sdblock2mem_converter_source_payload_valid_token_count <= 3'd0;
		sdblock2mem_converter_demux <= 2'd0;
		sdblock2mem_converter_strobe_all <= 1'd0;
		sdblock2mem_wishbonedmawriter_base_storage <= 64'd0;
		sdblock2mem_wishbonedmawriter_base_re <= 1'd0;
		sdblock2mem_wishbonedmawriter_length_storage <= 32'd0;
		sdblock2mem_wishbonedmawriter_length_re <= 1'd0;
		sdblock2mem_wishbonedmawriter_enable_storage <= 1'd0;
		sdblock2mem_wishbonedmawriter_enable_re <= 1'd0;
		sdblock2mem_wishbonedmawriter_done_re <= 1'd0;
		sdblock2mem_wishbonedmawriter_loop_storage <= 1'd0;
		sdblock2mem_wishbonedmawriter_loop_re <= 1'd0;
		sdblock2mem_wishbonedmawriter_offset_re <= 1'd0;
		sdblock2mem_wishbonedmawriter_offset <= 32'd0;
		sdblock2mem_connect <= 1'd0;
		sdblock2mem_done_d <= 1'd0;
		sdmem2block_irq <= 1'd0;
		sdmem2block_dma_data <= 32'd0;
		sdmem2block_dma_base_storage <= 64'd0;
		sdmem2block_dma_base_re <= 1'd0;
		sdmem2block_dma_length_storage <= 32'd0;
		sdmem2block_dma_length_re <= 1'd0;
		sdmem2block_dma_enable_storage <= 1'd0;
		sdmem2block_dma_enable_re <= 1'd0;
		sdmem2block_dma_done_re <= 1'd0;
		sdmem2block_dma_loop_storage <= 1'd0;
		sdmem2block_dma_loop_re <= 1'd0;
		sdmem2block_dma_offset_re <= 1'd0;
		sdmem2block_dma_offset <= 32'd0;
		sdmem2block_converter_mux <= 2'd0;
		sdmem2block_fifo_readable <= 1'd0;
		sdmem2block_fifo_level0 <= 10'd0;
		sdmem2block_fifo_produce <= 9'd0;
		sdmem2block_fifo_consume <= 9'd0;
		sdmem2block_count <= 9'd0;
		sdmem2block_done_d <= 1'd0;
		card_detect_pending <= 1'd0;
		block2mem_dma_pending <= 1'd0;
		mem2block_dma_pending <= 1'd0;
		eventmanager_status_re <= 1'd0;
		eventmanager_pending_re <= 1'd0;
		eventmanager_pending_r <= 4'd0;
		eventmanager_enable_storage <= 4'd0;
		eventmanager_enable_re <= 1'd0;
		subfragments_sdphyinit_state <= 1'd0;
		subfragments_sdphycmdw_state <= 2'd0;
		subfragments_sdphycmdr_state <= 3'd0;
		subfragments_sdphydataw_state <= 3'd0;
		subfragments_sdphydatar_state <= 3'd0;
		subfragments_sdcore_crc16inserter_state <= 1'd0;
		subfragments_sdcore_fsm_state <= 3'd0;
		subfragments_state <= 2'd0;
		subfragments_sdmem2blockdma_fsm_state <= 1'd0;
		subfragments_sdmem2blockdma_resetinserter_state <= 2'd0;
		simsoc_grant <= 2'd0;
		simsoc_slave_sel_r <= 4'd0;
		simsoc_count <= 20'd1000000;
		simsoc_csr_bankarray_sel_r <= 1'd0;
		simsoc_state <= 1'd0;
	end
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory mem: 8568-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] mem[0:8567];
initial begin
	$readmemh("mem.init", mem);
end
reg [31:0] mem_dat0;
always @(posedge sys_clk_1) begin
	mem_dat0 <= mem[adr];
end
assign dat_r = mem_dat0;


//------------------------------------------------------------------------------
// Memory mem_1: 1025-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] mem_1[0:1024];
initial begin
	$readmemh("mem_1.init", mem_1);
end
reg [10:0] mem_1_adr0;
always @(posedge sys_clk_1) begin
	if (sram0_we[0])
		mem_1[sram0_adr][7:0] <= sram0_dat_w[7:0];
	if (sram0_we[1])
		mem_1[sram0_adr][15:8] <= sram0_dat_w[15:8];
	if (sram0_we[2])
		mem_1[sram0_adr][23:16] <= sram0_dat_w[23:16];
	if (sram0_we[3])
		mem_1[sram0_adr][31:24] <= sram0_dat_w[31:24];
	mem_1_adr0 <= sram0_adr;
end
assign sram0_dat_r = mem_1[mem_1_adr0];


//------------------------------------------------------------------------------
// Memory mem_2: 2-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] mem_2[0:1];
initial begin
	$readmemh("mem_2.init", mem_2);
end
reg [0:0] mem_2_adr0;
always @(posedge sys_clk_1) begin
	if (sram1_we[0])
		mem_2[sram1_adr][7:0] <= sram1_dat_w[7:0];
	if (sram1_we[1])
		mem_2[sram1_adr][15:8] <= sram1_dat_w[15:8];
	if (sram1_we[2])
		mem_2[sram1_adr][23:16] <= sram1_dat_w[23:16];
	if (sram1_we[3])
		mem_2[sram1_adr][31:24] <= sram1_dat_w[31:24];
	mem_2_adr0 <= sram1_adr;
end
assign sram1_dat_r = mem_2[mem_2_adr0];


//------------------------------------------------------------------------------
// Memory mem_3: 37-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem_3[0:36];
initial begin
	$readmemh("mem_3.init", mem_3);
end
reg [5:0] mem_3_adr0;
always @(posedge sys_clk_1) begin
	mem_3_adr0 <= simsoc_csr_bankarray_adr;
end
assign simsoc_csr_bankarray_dat_r = mem_3[mem_3_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk_1) begin
	if (uart_tx_fifo_wrport_we)
		storage[uart_tx_fifo_wrport_adr] <= uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[uart_tx_fifo_rdport_adr];
end
assign uart_tx_fifo_wrport_dat_r = storage_dat0;
assign uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk_1) begin
	if (uart_rx_fifo_wrport_we)
		storage_1[uart_rx_fifo_wrport_adr] <= uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[uart_rx_fifo_rdport_adr];
end
assign uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign uart_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Memory buffer: 128-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
// Port 1 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 32 
reg [31:0] buffer[0:127];
initial begin
	$readmemh("buffer.init", buffer);
end
reg [6:0] buffer_adr0;
reg [6:0] buffer_adr1;
always @(posedge sd_ll_clk) begin
	buffer_adr0 <= internal_rd_port_adr;
end
always @(posedge sd_ll_clk) begin
	if (internal_wr_port_we)
		buffer[internal_wr_port_adr] <= internal_wr_port_dat_w;
	buffer_adr1 <= internal_wr_port_adr;
end
assign internal_rd_port_dat_r = buffer[buffer_adr0];
assign internal_wr_port_dat_r = buffer[buffer_adr1];


sd_phy sd_phy(
	.bram_rd_sd_q(internal_rd_port_dat_r),
	.bram_wr_sd_q(internal_wr_port_dat_r),
	.card_state(card_state),
	.clk_50(sys_clk_1),
	.data_in_act(data_in_act),
	.data_in_another(data_in_another),
	.data_in_stop(data_in_stop),
	.data_out_act(data_out_act),
	.data_out_len(data_out_len),
	.data_out_reg(data_out_reg),
	.data_out_src(data_out_src),
	.data_out_stop(data_out_stop),
	.mode_4bit(mode_4bit),
	.mode_crc_disable(mode_crc_disable),
	.mode_spi(mode_spi),
	.reset_n((~sys_rst)),
	.resp_act(resp_act),
	.resp_busy(resp_busy),
	.resp_out(resp_out),
	.resp_type(resp_type),
	.sd_clk(sd_ll_clk),
	.sd_cmd_i(pads_cmd_i),
	.sd_dat_i(pads_dat_i),
	.bram_rd_sd_addr(internal_rd_port_adr),
	.bram_wr_sd_addr(internal_wr_port_adr),
	.bram_wr_sd_data(internal_wr_port_dat_w),
	.bram_wr_sd_wren(internal_wr_port_we),
	.cmd_in(cmd_in),
	.cmd_in_act(cmd_in_act),
	.cmd_in_crc_good(cmd_in_crc_good),
	.data_in_busy(data_in_busy),
	.data_in_crc_good(data_in_crc_good),
	.data_in_done(data_in_done),
	.data_out_busy(data_out_busy),
	.data_out_done(data_out_done),
	.idc(phy_idc),
	.istate(phy_istate),
	.odc(phy_odc),
	.ostate(phy_ostate),
	.resp_done(resp_done),
	.sd_cmd_o(pads_cmd_o),
	.sd_cmd_t(pads_cmd_t),
	.sd_dat_o(pads_dat_o),
	.sd_dat_t(pads_dat_t),
	.spi_cnt(phy_spi_cnt),
	.spi_sel(spi_sel)
);

sd_link sd_link(
	.block_read_go(block_read_go),
	.block_write_done(block_write_done),
	.clk_50(sys_clk_1),
	.opt_enable_hs(1'd1),
	.phy_cmd_in(cmd_in),
	.phy_cmd_in_act(cmd_in_act),
	.phy_cmd_in_crc_good(cmd_in_crc_good),
	.phy_data_in_busy(data_in_busy),
	.phy_data_in_crc_good(data_in_crc_good),
	.phy_data_in_done(data_in_done),
	.phy_data_out_busy(data_out_busy),
	.phy_data_out_done(data_out_done),
	.phy_resp_done(resp_done),
	.phy_spi_sel(spi_sel),
	.reset_n((~sys_rst)),
	.block_erase_end(block_erase_end),
	.block_erase_start(block_erase_start),
	.block_preerase_num(block_preerase_num),
	.block_read_act(block_read_act),
	.block_read_addr(block_read_addr),
	.block_read_byteaddr(block_read_byteaddr),
	.block_read_num(block_read_num),
	.block_read_stop(block_read_stop),
	.block_write_act(block_write_act),
	.block_write_addr(block_write_addr),
	.block_write_byteaddr(block_write_byteaddr),
	.block_write_num(block_write_num),
	.card_status(card_status),
	.cmd_in_cmd(cmd_in_cmd),
	.cmd_in_last(cmd_in_last),
	.dc(link_dc),
	.ddc(link_ddc),
	.err_cmd_crc(err_cmd_crc),
	.err_unhandled_cmd(err_unhandled_cmd),
	.host_hc_support(host_hc_support),
	.info_card_desel(info_card_desel),
	.link_card_state(card_state),
	.phy_data_in_act(data_in_act),
	.phy_data_in_another(data_in_another),
	.phy_data_in_stop(data_in_stop),
	.phy_data_out_act(data_out_act),
	.phy_data_out_len(data_out_len),
	.phy_data_out_reg(data_out_reg),
	.phy_data_out_src(data_out_src),
	.phy_data_out_stop(data_out_stop),
	.phy_mode_4bit(mode_4bit),
	.phy_mode_crc_disable(mode_crc_disable),
	.phy_mode_spi(mode_spi),
	.phy_resp_act(resp_act),
	.phy_resp_busy(resp_busy),
	.phy_resp_out(resp_out),
	.phy_resp_type(resp_type),
	.state(link_state)
);

//------------------------------------------------------------------------------
// Memory storage_2: 8-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Async | Write: ---- | 
reg [9:0] storage_2[0:7];
reg [9:0] storage_2_dat0;
always @(posedge sys_clk_1) begin
	if (sdcore_fifo_wrport_we)
		storage_2[sdcore_fifo_wrport_adr] <= sdcore_fifo_wrport_dat_w;
	storage_2_dat0 <= storage_2[sdcore_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
end
assign sdcore_fifo_wrport_dat_r = storage_2_dat0;
assign sdcore_fifo_rdport_dat_r = storage_2[sdcore_fifo_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_3: 512-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_3[0:511];
reg [9:0] storage_3_dat0;
reg [9:0] storage_3_dat1;
always @(posedge sys_clk_1) begin
	if (sdblock2mem_fifo_wrport_we)
		storage_3[sdblock2mem_fifo_wrport_adr] <= sdblock2mem_fifo_wrport_dat_w;
	storage_3_dat0 <= storage_3[sdblock2mem_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (sdblock2mem_fifo_rdport_re)
		storage_3_dat1 <= storage_3[sdblock2mem_fifo_rdport_adr];
end
assign sdblock2mem_fifo_wrport_dat_r = storage_3_dat0;
assign sdblock2mem_fifo_rdport_dat_r = storage_3_dat1;


//------------------------------------------------------------------------------
// Memory storage_4: 512-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_4[0:511];
reg [9:0] storage_4_dat0;
reg [9:0] storage_4_dat1;
always @(posedge sys_clk_1) begin
	if (sdmem2block_fifo_wrport_we)
		storage_4[sdmem2block_fifo_wrport_adr] <= sdmem2block_fifo_wrport_dat_w;
	storage_4_dat0 <= storage_4[sdmem2block_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (sdmem2block_fifo_rdport_re)
		storage_4_dat1 <= storage_4[sdmem2block_fifo_rdport_adr];
end
assign sdmem2block_fifo_wrport_dat_r = storage_4_dat0;
assign sdmem2block_fifo_rdport_dat_r = storage_4_dat1;


picorv32 #(
	.CATCH_ILLINSN(1'd1),
	.CATCH_MISALIGN(1'd1),
	.ENABLE_COUNTERS(1'd1),
	.ENABLE_COUNTERS64(1'd1),
	.ENABLE_DIV(1'd1),
	.ENABLE_FAST_MUL(1'd0),
	.ENABLE_IRQ(1'd1),
	.ENABLE_IRQ_QREGS(1'd1),
	.ENABLE_IRQ_TIMER(1'd1),
	.ENABLE_MUL(1'd1),
	.ENABLE_PCPI(1'd0),
	.ENABLE_REGS_16_31(1'd1),
	.ENABLE_REGS_DUALPORT(1'd1),
	.ENABLE_TRACE(1'd0),
	.LATCHED_IRQ(32'd4294967295),
	.LATCHED_MEM_RDATA(1'd0),
	.MASKED_IRQ(1'd0),
	.PROGADDR_IRQ(5'd16),
	.PROGADDR_RESET(1'd0),
	.STACKADDR(32'd4294967295),
	.TWO_CYCLE_ALU(1'd0),
	.TWO_CYCLE_COMPARE(1'd0),
	.TWO_STAGE_SHIFT(1'd1)
) picorv32 (
	.clk(sys_clk_1),
	.irq(picorv32_interrupt),
	.mem_rdata(picorv32_mem_rdata),
	.mem_ready(picorv32_mem_ready),
	.pcpi_rd(1'd0),
	.pcpi_ready(1'd0),
	.pcpi_wait(1'd0),
	.pcpi_wr(1'd0),
	.resetn((~(sys_rst | picorv32_reset))),
	.eoi(picorv329),
	.mem_addr(picorv32_mem_addr),
	.mem_instr(picorv32_mem_instr),
	.mem_la_addr(picorv322),
	.mem_la_read(picorv320),
	.mem_la_wdata(picorv323),
	.mem_la_write(picorv321),
	.mem_la_wstrb(picorv324),
	.mem_valid(picorv32_mem_valid),
	.mem_wdata(picorv32_mem_wdata),
	.mem_wstrb(picorv32_mem_wstrb),
	.pcpi_insn(picorv326),
	.pcpi_rs1(picorv327),
	.pcpi_rs2(picorv328),
	.pcpi_valid(picorv325),
	.trap(picorv32_trap)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2022-02-02 12:46:36.
//------------------------------------------------------------------------------
