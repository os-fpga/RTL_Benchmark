// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : sim.v
// Device     : SIM
// LiteX sha1 : 6f6a10db
// Date       : 2022-02-04 11:59:11
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module sim (
	output wire sim_trace,
	output wire serial_source_valid,
	input  wire serial_source_ready,
	output wire [7:0] serial_source_data,
	input  wire serial_sink_valid,
	output wire serial_sink_ready,
	input  wire [7:0] serial_sink_data,
	input  wire sys_clk
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg  main_soc_rst = 1'd0;
wire main_cpu_rst;
reg  [1:0] main_reset_storage = 2'd0;
reg  main_reset_re = 1'd0;
reg  [31:0] main_scratch_storage = 32'd305419896;
reg  main_scratch_re = 1'd0;
wire [31:0] main_bus_errors_status;
wire main_bus_errors_we;
reg  main_bus_errors_re = 1'd0;
wire main_bus_error;
reg  [31:0] main_bus_errors = 32'd0;
wire main_picorv32_trap;
wire main_picorv32_reset;
reg  [31:0] main_picorv32_interrupt = 32'd0;
wire [29:0] main_picorv32_idbus_adr;
wire [31:0] main_picorv32_idbus_dat_w;
reg  [31:0] main_picorv32_idbus_dat_r = 32'd0;
wire [3:0] main_picorv32_idbus_sel;
wire main_picorv32_idbus_cyc;
wire main_picorv32_idbus_stb;
reg  main_picorv32_idbus_ack = 1'd0;
wire main_picorv32_idbus_we;
wire [2:0] main_picorv32_idbus_cti;
wire [1:0] main_picorv32_idbus_bte;
reg  main_picorv32_idbus_err = 1'd0;
wire main_picorv32_mem_valid;
wire main_picorv32_mem_instr;
wire main_picorv32_mem_ready;
wire [31:0] main_picorv32_mem_addr;
wire [31:0] main_picorv32_mem_wdata;
wire [3:0] main_picorv32_mem_wstrb;
wire [31:0] main_picorv32_mem_rdata;
wire main_picorv320;
wire main_picorv321;
wire [31:0] main_picorv322;
wire [31:0] main_picorv323;
wire [3:0] main_picorv324;
wire main_picorv325;
wire [31:0] main_picorv326;
wire [31:0] main_picorv327;
wire [31:0] main_picorv328;
wire [31:0] main_picorv329;
reg  main_socbushandler_aw_valid = 1'd0;
wire main_socbushandler_aw_ready;
reg  main_socbushandler_aw_first = 1'd0;
reg  main_socbushandler_aw_last = 1'd0;
reg  [31:0] main_socbushandler_aw_payload_addr = 32'd0;
reg  main_socbushandler_w_valid = 1'd0;
wire main_socbushandler_w_ready;
reg  main_socbushandler_w_first = 1'd0;
reg  main_socbushandler_w_last = 1'd0;
reg  [31:0] main_socbushandler_w_payload_data = 32'd0;
reg  [3:0] main_socbushandler_w_payload_strb = 4'd0;
wire main_socbushandler_b_valid;
reg  main_socbushandler_b_ready = 1'd0;
wire main_socbushandler_b_first;
wire main_socbushandler_b_last;
wire [1:0] main_socbushandler_b_payload_resp;
reg  main_socbushandler_ar_valid = 1'd0;
wire main_socbushandler_ar_ready;
reg  main_socbushandler_ar_first = 1'd0;
reg  main_socbushandler_ar_last = 1'd0;
reg  [31:0] main_socbushandler_ar_payload_addr = 32'd0;
wire main_socbushandler_r_valid;
reg  main_socbushandler_r_ready = 1'd0;
wire main_socbushandler_r_first;
wire main_socbushandler_r_last;
wire [1:0] main_socbushandler_r_payload_resp;
wire [31:0] main_socbushandler_r_payload_data;
reg  main_socbushandler_cmd_done = 1'd0;
reg  main_socbushandler_data_done = 1'd0;
wire [29:0] main_socbushandler_addr;
wire main_simsoc_aw_valid;
reg  main_simsoc_aw_ready = 1'd0;
wire main_simsoc_aw_first;
wire main_simsoc_aw_last;
wire [31:0] main_simsoc_aw_payload_addr;
wire main_simsoc_w_valid;
reg  main_simsoc_w_ready = 1'd0;
wire main_simsoc_w_first;
wire main_simsoc_w_last;
wire [31:0] main_simsoc_w_payload_data;
wire [3:0] main_simsoc_w_payload_strb;
reg  main_simsoc_b_valid = 1'd0;
wire main_simsoc_b_ready;
reg  main_simsoc_b_first = 1'd0;
reg  main_simsoc_b_last = 1'd0;
reg  [1:0] main_simsoc_b_payload_resp = 2'd0;
wire main_simsoc_ar_valid;
reg  main_simsoc_ar_ready = 1'd0;
wire main_simsoc_ar_first;
wire main_simsoc_ar_last;
wire [31:0] main_simsoc_ar_payload_addr;
reg  main_simsoc_r_valid = 1'd0;
wire main_simsoc_r_ready;
reg  main_simsoc_r_first = 1'd0;
reg  main_simsoc_r_last = 1'd0;
reg  [1:0] main_simsoc_r_payload_resp = 2'd0;
reg  [31:0] main_simsoc_r_payload_data = 32'd0;
reg  [12:0] main_simsoc_adr = 13'd0;
wire [31:0] main_simsoc_dat_r;
reg  main_simsoc_do_read = 1'd0;
reg  main_simsoc_do_write = 1'd0;
reg  main_simsoc_last_was_read = 1'd0;
wire main_ram_bus_aw_valid;
reg  main_ram_bus_aw_ready = 1'd0;
wire main_ram_bus_aw_first;
wire main_ram_bus_aw_last;
wire [31:0] main_ram_bus_aw_payload_addr;
wire main_ram_bus_w_valid;
reg  main_ram_bus_w_ready = 1'd0;
wire main_ram_bus_w_first;
wire main_ram_bus_w_last;
wire [31:0] main_ram_bus_w_payload_data;
wire [3:0] main_ram_bus_w_payload_strb;
reg  main_ram_bus_b_valid = 1'd0;
wire main_ram_bus_b_ready;
reg  main_ram_bus_b_first = 1'd0;
reg  main_ram_bus_b_last = 1'd0;
reg  [1:0] main_ram_bus_b_payload_resp = 2'd0;
wire main_ram_bus_ar_valid;
reg  main_ram_bus_ar_ready = 1'd0;
wire main_ram_bus_ar_first;
wire main_ram_bus_ar_last;
wire [31:0] main_ram_bus_ar_payload_addr;
reg  main_ram_bus_r_valid = 1'd0;
wire main_ram_bus_r_ready;
reg  main_ram_bus_r_first = 1'd0;
reg  main_ram_bus_r_last = 1'd0;
reg  [1:0] main_ram_bus_r_payload_resp = 2'd0;
reg  [31:0] main_ram_bus_r_payload_data = 32'd0;
reg  [9:0] main_ram_adr = 10'd0;
wire [31:0] main_ram_dat_r;
reg  [3:0] main_ram_we = 4'd0;
reg  [31:0] main_ram_dat_w = 32'd0;
reg  main_ram_do_read = 1'd0;
reg  main_ram_do_write = 1'd0;
reg  main_ram_last_was_read = 1'd0;
wire main_sink_valid;
wire main_sink_ready;
wire main_sink_first;
wire main_sink_last;
wire [7:0] main_sink_payload_data;
wire main_source_valid;
wire main_source_ready;
reg  main_source_first = 1'd0;
reg  main_source_last = 1'd0;
wire [7:0] main_source_payload_data;
reg  main_uart_rxtx_re = 1'd0;
wire [7:0] main_uart_rxtx_r;
reg  main_uart_rxtx_we = 1'd0;
wire [7:0] main_uart_rxtx_w;
wire main_uart_txfull_status;
wire main_uart_txfull_we;
reg  main_uart_txfull_re = 1'd0;
wire main_uart_rxempty_status;
wire main_uart_rxempty_we;
reg  main_uart_rxempty_re = 1'd0;
wire main_uart_irq;
wire main_uart_tx_status;
reg  main_uart_tx_pending = 1'd0;
wire main_uart_tx_trigger;
reg  main_uart_tx_clear = 1'd0;
reg  main_uart_tx_trigger_d = 1'd0;
wire main_uart_rx_status;
reg  main_uart_rx_pending = 1'd0;
wire main_uart_rx_trigger;
reg  main_uart_rx_clear = 1'd0;
reg  main_uart_rx_trigger_d = 1'd0;
wire main_uart_tx0;
wire main_uart_rx0;
reg  [1:0] main_uart_status_status = 2'd0;
wire main_uart_status_we;
reg  main_uart_status_re = 1'd0;
wire main_uart_tx1;
wire main_uart_rx1;
reg  [1:0] main_uart_pending_status = 2'd0;
wire main_uart_pending_we;
reg  main_uart_pending_re = 1'd0;
reg  [1:0] main_uart_pending_r = 2'd0;
wire main_uart_tx2;
wire main_uart_rx2;
reg  [1:0] main_uart_enable_storage = 2'd0;
reg  main_uart_enable_re = 1'd0;
wire main_uart_txempty_status;
wire main_uart_txempty_we;
reg  main_uart_txempty_re = 1'd0;
wire main_uart_rxfull_status;
wire main_uart_rxfull_we;
reg  main_uart_rxfull_re = 1'd0;
wire main_uart_uart_sink_valid;
wire main_uart_uart_sink_ready;
wire main_uart_uart_sink_first;
wire main_uart_uart_sink_last;
wire [7:0] main_uart_uart_sink_payload_data;
wire main_uart_uart_source_valid;
wire main_uart_uart_source_ready;
wire main_uart_uart_source_first;
wire main_uart_uart_source_last;
wire [7:0] main_uart_uart_source_payload_data;
wire main_uart_tx_fifo_sink_valid;
wire main_uart_tx_fifo_sink_ready;
reg  main_uart_tx_fifo_sink_first = 1'd0;
reg  main_uart_tx_fifo_sink_last = 1'd0;
wire [7:0] main_uart_tx_fifo_sink_payload_data;
wire main_uart_tx_fifo_source_valid;
wire main_uart_tx_fifo_source_ready;
wire main_uart_tx_fifo_source_first;
wire main_uart_tx_fifo_source_last;
wire [7:0] main_uart_tx_fifo_source_payload_data;
wire main_uart_tx_fifo_re;
reg  main_uart_tx_fifo_readable = 1'd0;
wire main_uart_tx_fifo_syncfifo_we;
wire main_uart_tx_fifo_syncfifo_writable;
wire main_uart_tx_fifo_syncfifo_re;
wire main_uart_tx_fifo_syncfifo_readable;
wire [9:0] main_uart_tx_fifo_syncfifo_din;
wire [9:0] main_uart_tx_fifo_syncfifo_dout;
reg  [4:0] main_uart_tx_fifo_level0 = 5'd0;
reg  main_uart_tx_fifo_replace = 1'd0;
reg  [3:0] main_uart_tx_fifo_produce = 4'd0;
reg  [3:0] main_uart_tx_fifo_consume = 4'd0;
reg  [3:0] main_uart_tx_fifo_wrport_adr = 4'd0;
wire [9:0] main_uart_tx_fifo_wrport_dat_r;
wire main_uart_tx_fifo_wrport_we;
wire [9:0] main_uart_tx_fifo_wrport_dat_w;
wire main_uart_tx_fifo_do_read;
wire [3:0] main_uart_tx_fifo_rdport_adr;
wire [9:0] main_uart_tx_fifo_rdport_dat_r;
wire main_uart_tx_fifo_rdport_re;
wire [4:0] main_uart_tx_fifo_level1;
wire [7:0] main_uart_tx_fifo_fifo_in_payload_data;
wire main_uart_tx_fifo_fifo_in_first;
wire main_uart_tx_fifo_fifo_in_last;
wire [7:0] main_uart_tx_fifo_fifo_out_payload_data;
wire main_uart_tx_fifo_fifo_out_first;
wire main_uart_tx_fifo_fifo_out_last;
wire main_uart_rx_fifo_sink_valid;
wire main_uart_rx_fifo_sink_ready;
wire main_uart_rx_fifo_sink_first;
wire main_uart_rx_fifo_sink_last;
wire [7:0] main_uart_rx_fifo_sink_payload_data;
wire main_uart_rx_fifo_source_valid;
wire main_uart_rx_fifo_source_ready;
wire main_uart_rx_fifo_source_first;
wire main_uart_rx_fifo_source_last;
wire [7:0] main_uart_rx_fifo_source_payload_data;
wire main_uart_rx_fifo_re;
reg  main_uart_rx_fifo_readable = 1'd0;
wire main_uart_rx_fifo_syncfifo_we;
wire main_uart_rx_fifo_syncfifo_writable;
wire main_uart_rx_fifo_syncfifo_re;
wire main_uart_rx_fifo_syncfifo_readable;
wire [9:0] main_uart_rx_fifo_syncfifo_din;
wire [9:0] main_uart_rx_fifo_syncfifo_dout;
reg  [4:0] main_uart_rx_fifo_level0 = 5'd0;
reg  main_uart_rx_fifo_replace = 1'd0;
reg  [3:0] main_uart_rx_fifo_produce = 4'd0;
reg  [3:0] main_uart_rx_fifo_consume = 4'd0;
reg  [3:0] main_uart_rx_fifo_wrport_adr = 4'd0;
wire [9:0] main_uart_rx_fifo_wrport_dat_r;
wire main_uart_rx_fifo_wrport_we;
wire [9:0] main_uart_rx_fifo_wrport_dat_w;
wire main_uart_rx_fifo_do_read;
wire [3:0] main_uart_rx_fifo_rdport_adr;
wire [9:0] main_uart_rx_fifo_rdport_dat_r;
wire main_uart_rx_fifo_rdport_re;
wire [4:0] main_uart_rx_fifo_level1;
wire [7:0] main_uart_rx_fifo_fifo_in_payload_data;
wire main_uart_rx_fifo_fifo_in_first;
wire main_uart_rx_fifo_fifo_in_last;
wire [7:0] main_uart_rx_fifo_fifo_out_payload_data;
wire main_uart_rx_fifo_fifo_out_first;
wire main_uart_rx_fifo_fifo_out_last;
reg  [31:0] main_timer_load_storage = 32'd0;
reg  main_timer_load_re = 1'd0;
reg  [31:0] main_timer_reload_storage = 32'd0;
reg  main_timer_reload_re = 1'd0;
reg  main_timer_en_storage = 1'd0;
reg  main_timer_en_re = 1'd0;
reg  main_timer_update_value_storage = 1'd0;
reg  main_timer_update_value_re = 1'd0;
reg  [31:0] main_timer_value_status = 32'd0;
wire main_timer_value_we;
reg  main_timer_value_re = 1'd0;
wire main_timer_irq;
wire main_timer_zero_status;
reg  main_timer_zero_pending = 1'd0;
wire main_timer_zero_trigger;
reg  main_timer_zero_clear = 1'd0;
reg  main_timer_zero_trigger_d = 1'd0;
wire main_timer_zero0;
wire main_timer_status_status;
wire main_timer_status_we;
reg  main_timer_status_re = 1'd0;
wire main_timer_zero1;
wire main_timer_pending_status;
wire main_timer_pending_we;
reg  main_timer_pending_re = 1'd0;
reg  main_timer_pending_r = 1'd0;
wire main_timer_zero2;
reg  main_timer_enable_storage = 1'd0;
reg  main_timer_enable_re = 1'd0;
reg  [31:0] main_timer_value = 32'd0;
reg  main_uptime_latch_storage = 1'd0;
reg  main_uptime_latch_re = 1'd0;
reg  [63:0] main_uptime_cycles_status = 64'd0;
wire main_uptime_cycles_we;
reg  main_uptime_cycles_re = 1'd0;
reg  [63:0] main_uptime_cycles = 64'd0;
wire sys_clk_1;
wire sys_rst;
wire por_clk;
reg  main_int_rst = 1'd1;
reg  [1:0] builder_socbushandler_state = 2'd0;
reg  [1:0] builder_socbushandler_next_state = 2'd0;
reg  main_socbushandler_cmd_done_socbushandler_next_value0 = 1'd0;
reg  main_socbushandler_cmd_done_socbushandler_next_value_ce0 = 1'd0;
reg  main_socbushandler_data_done_socbushandler_next_value1 = 1'd0;
reg  main_socbushandler_data_done_socbushandler_next_value_ce1 = 1'd0;
reg  [1:0] builder_axilitesram0_state = 2'd0;
reg  [1:0] builder_axilitesram0_next_state = 2'd0;
reg  main_simsoc_last_was_read_axilitesram0_next_value = 1'd0;
reg  main_simsoc_last_was_read_axilitesram0_next_value_ce = 1'd0;
reg  [1:0] builder_axilitesram1_state = 2'd0;
reg  [1:0] builder_axilitesram1_next_state = 2'd0;
reg  main_ram_last_was_read_axilitesram1_next_value = 1'd0;
reg  main_ram_last_was_read_axilitesram1_next_value_ce = 1'd0;
reg  [13:0] builder_simsoc_adr = 14'd0;
wire builder_simsoc_we;
wire [31:0] builder_simsoc_dat_w;
wire [31:0] builder_simsoc_dat_r;
wire builder_simsoc_aw_valid;
reg  builder_simsoc_aw_ready = 1'd0;
wire builder_simsoc_aw_first;
wire builder_simsoc_aw_last;
wire [31:0] builder_simsoc_aw_payload_addr;
wire builder_simsoc_w_valid;
reg  builder_simsoc_w_ready = 1'd0;
wire builder_simsoc_w_first;
wire builder_simsoc_w_last;
wire [31:0] builder_simsoc_w_payload_data;
wire [3:0] builder_simsoc_w_payload_strb;
reg  builder_simsoc_b_valid = 1'd0;
wire builder_simsoc_b_ready;
reg  builder_simsoc_b_first = 1'd0;
reg  builder_simsoc_b_last = 1'd0;
reg  [1:0] builder_simsoc_b_payload_resp = 2'd0;
wire builder_simsoc_ar_valid;
reg  builder_simsoc_ar_ready = 1'd0;
wire builder_simsoc_ar_first;
wire builder_simsoc_ar_last;
wire [31:0] builder_simsoc_ar_payload_addr;
reg  builder_simsoc_r_valid = 1'd0;
wire builder_simsoc_r_ready;
reg  builder_simsoc_r_first = 1'd0;
reg  builder_simsoc_r_last = 1'd0;
reg  [1:0] builder_simsoc_r_payload_resp = 2'd0;
reg  [31:0] builder_simsoc_r_payload_data = 32'd0;
reg  builder_simsoc_do_read = 1'd0;
reg  builder_simsoc_do_write = 1'd0;
reg  builder_simsoc_last_was_read = 1'd0;
wire builder_bus_interconnect_aw_valid;
reg  builder_bus_interconnect_aw_ready = 1'd0;
wire builder_bus_interconnect_aw_first;
wire builder_bus_interconnect_aw_last;
wire [31:0] builder_bus_interconnect_aw_payload_addr;
wire builder_bus_interconnect_w_valid;
reg  builder_bus_interconnect_w_ready = 1'd0;
wire builder_bus_interconnect_w_first;
wire builder_bus_interconnect_w_last;
wire [31:0] builder_bus_interconnect_w_payload_data;
wire [3:0] builder_bus_interconnect_w_payload_strb;
reg  builder_bus_interconnect_b_valid = 1'd0;
wire builder_bus_interconnect_b_ready;
wire builder_bus_interconnect_b_first;
wire builder_bus_interconnect_b_last;
reg  [1:0] builder_bus_interconnect_b_payload_resp = 2'd0;
wire builder_bus_interconnect_ar_valid;
reg  builder_bus_interconnect_ar_ready = 1'd0;
wire builder_bus_interconnect_ar_first;
wire builder_bus_interconnect_ar_last;
wire [31:0] builder_bus_interconnect_ar_payload_addr;
reg  builder_bus_interconnect_r_valid = 1'd0;
wire builder_bus_interconnect_r_ready;
wire builder_bus_interconnect_r_first;
wire builder_bus_interconnect_r_last;
reg  [1:0] builder_bus_interconnect_r_payload_resp = 2'd0;
reg  [31:0] builder_bus_interconnect_r_payload_data = 32'd0;
wire builder_bus_interconnect_rr_write_request;
wire builder_bus_interconnect_rr_write_grant;
wire builder_bus_interconnect_rr_write_ce;
wire builder_bus_interconnect_rr_read_request;
wire builder_bus_interconnect_rr_read_grant;
wire builder_bus_interconnect_rr_read_ce;
reg  [7:0] builder_bus_interconnect_wr_lock_counter = 8'd0;
wire builder_bus_interconnect_wr_lock_full;
wire builder_bus_interconnect_wr_lock_empty;
wire builder_bus_interconnect_wr_lock_stall;
reg  [7:0] builder_bus_interconnect_rd_lock_counter = 8'd0;
wire builder_bus_interconnect_rd_lock_full;
wire builder_bus_interconnect_rd_lock_empty;
wire builder_bus_interconnect_rd_lock_stall;
reg  [2:0] builder_bus_interconnect_slave_sel_dec0 = 3'd0;
reg  [2:0] builder_bus_interconnect_slave_sel_dec1 = 3'd0;
reg  [2:0] builder_bus_interconnect_slave_sel_reg0 = 3'd0;
reg  [2:0] builder_bus_interconnect_slave_sel_reg1 = 3'd0;
reg  [2:0] builder_bus_interconnect_slave_sel0 = 3'd0;
reg  [2:0] builder_bus_interconnect_slave_sel1 = 3'd0;
reg  [7:0] builder_bus_interconnect_axiliterequestcounter0_counter = 8'd0;
wire builder_bus_interconnect_axiliterequestcounter0_full;
wire builder_bus_interconnect_axiliterequestcounter0_empty;
wire builder_bus_interconnect_axiliterequestcounter0_stall;
reg  [7:0] builder_bus_interconnect_axiliterequestcounter1_counter = 8'd0;
wire builder_bus_interconnect_axiliterequestcounter1_full;
wire builder_bus_interconnect_axiliterequestcounter1_empty;
wire builder_bus_interconnect_axiliterequestcounter1_stall;
wire builder_bus_interconnect_error;
reg  builder_bus_interconnect_wr_error = 1'd0;
reg  builder_bus_interconnect_rd_error = 1'd0;
reg  builder_bus_interconnect_wr_timer_wait = 1'd0;
wire builder_bus_interconnect_wr_timer_done;
reg  [19:0] builder_bus_interconnect_wr_timer_count = 20'd1000000;
reg  builder_bus_interconnect_rd_timer_wait = 1'd0;
wire builder_bus_interconnect_rd_timer_done;
reg  [19:0] builder_bus_interconnect_rd_timer_count = 20'd1000000;
wire [13:0] builder_csr_bankarray_interface0_bank_bus_adr;
wire builder_csr_bankarray_interface0_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface0_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank0_reset0_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank0_reset0_r;
reg  builder_csr_bankarray_csrbank0_reset0_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank0_reset0_w;
reg  builder_csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank0_scratch0_r;
reg  builder_csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank0_scratch0_w;
reg  builder_csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank0_bus_errors_r;
reg  builder_csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank0_bus_errors_w;
wire builder_csr_bankarray_csrbank0_sel;
wire [13:0] builder_csr_bankarray_sram_bus_adr;
wire builder_csr_bankarray_sram_bus_we;
wire [31:0] builder_csr_bankarray_sram_bus_dat_w;
reg  [31:0] builder_csr_bankarray_sram_bus_dat_r = 32'd0;
wire [5:0] builder_csr_bankarray_adr;
wire [7:0] builder_csr_bankarray_dat_r;
wire builder_csr_bankarray_sel;
reg  builder_csr_bankarray_sel_r = 1'd0;
wire [13:0] builder_csr_bankarray_interface1_bank_bus_adr;
wire builder_csr_bankarray_interface1_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface1_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank1_load0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_load0_r;
reg  builder_csr_bankarray_csrbank1_load0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_load0_w;
reg  builder_csr_bankarray_csrbank1_reload0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_reload0_r;
reg  builder_csr_bankarray_csrbank1_reload0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_reload0_w;
reg  builder_csr_bankarray_csrbank1_en0_re = 1'd0;
wire builder_csr_bankarray_csrbank1_en0_r;
reg  builder_csr_bankarray_csrbank1_en0_we = 1'd0;
wire builder_csr_bankarray_csrbank1_en0_w;
reg  builder_csr_bankarray_csrbank1_update_value0_re = 1'd0;
wire builder_csr_bankarray_csrbank1_update_value0_r;
reg  builder_csr_bankarray_csrbank1_update_value0_we = 1'd0;
wire builder_csr_bankarray_csrbank1_update_value0_w;
reg  builder_csr_bankarray_csrbank1_value_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_value_r;
reg  builder_csr_bankarray_csrbank1_value_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_value_w;
reg  builder_csr_bankarray_csrbank1_ev_status_re = 1'd0;
wire builder_csr_bankarray_csrbank1_ev_status_r;
reg  builder_csr_bankarray_csrbank1_ev_status_we = 1'd0;
wire builder_csr_bankarray_csrbank1_ev_status_w;
reg  builder_csr_bankarray_csrbank1_ev_pending_re = 1'd0;
wire builder_csr_bankarray_csrbank1_ev_pending_r;
reg  builder_csr_bankarray_csrbank1_ev_pending_we = 1'd0;
wire builder_csr_bankarray_csrbank1_ev_pending_w;
reg  builder_csr_bankarray_csrbank1_ev_enable0_re = 1'd0;
wire builder_csr_bankarray_csrbank1_ev_enable0_r;
reg  builder_csr_bankarray_csrbank1_ev_enable0_we = 1'd0;
wire builder_csr_bankarray_csrbank1_ev_enable0_w;
reg  builder_csr_bankarray_csrbank1_uptime_latch0_re = 1'd0;
wire builder_csr_bankarray_csrbank1_uptime_latch0_r;
reg  builder_csr_bankarray_csrbank1_uptime_latch0_we = 1'd0;
wire builder_csr_bankarray_csrbank1_uptime_latch0_w;
reg  builder_csr_bankarray_csrbank1_uptime_cycles1_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_uptime_cycles1_r;
reg  builder_csr_bankarray_csrbank1_uptime_cycles1_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_uptime_cycles1_w;
reg  builder_csr_bankarray_csrbank1_uptime_cycles0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_uptime_cycles0_r;
reg  builder_csr_bankarray_csrbank1_uptime_cycles0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_uptime_cycles0_w;
wire builder_csr_bankarray_csrbank1_sel;
wire [13:0] builder_csr_bankarray_interface2_bank_bus_adr;
wire builder_csr_bankarray_interface2_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface2_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank2_txfull_re = 1'd0;
wire builder_csr_bankarray_csrbank2_txfull_r;
reg  builder_csr_bankarray_csrbank2_txfull_we = 1'd0;
wire builder_csr_bankarray_csrbank2_txfull_w;
reg  builder_csr_bankarray_csrbank2_rxempty_re = 1'd0;
wire builder_csr_bankarray_csrbank2_rxempty_r;
reg  builder_csr_bankarray_csrbank2_rxempty_we = 1'd0;
wire builder_csr_bankarray_csrbank2_rxempty_w;
reg  builder_csr_bankarray_csrbank2_ev_status_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank2_ev_status_r;
reg  builder_csr_bankarray_csrbank2_ev_status_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank2_ev_status_w;
reg  builder_csr_bankarray_csrbank2_ev_pending_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank2_ev_pending_r;
reg  builder_csr_bankarray_csrbank2_ev_pending_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank2_ev_pending_w;
reg  builder_csr_bankarray_csrbank2_ev_enable0_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank2_ev_enable0_r;
reg  builder_csr_bankarray_csrbank2_ev_enable0_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank2_ev_enable0_w;
reg  builder_csr_bankarray_csrbank2_txempty_re = 1'd0;
wire builder_csr_bankarray_csrbank2_txempty_r;
reg  builder_csr_bankarray_csrbank2_txempty_we = 1'd0;
wire builder_csr_bankarray_csrbank2_txempty_w;
reg  builder_csr_bankarray_csrbank2_rxfull_re = 1'd0;
wire builder_csr_bankarray_csrbank2_rxfull_r;
reg  builder_csr_bankarray_csrbank2_rxfull_we = 1'd0;
wire builder_csr_bankarray_csrbank2_rxfull_w;
wire builder_csr_bankarray_csrbank2_sel;
wire [13:0] builder_csr_interconnect_adr;
wire builder_csr_interconnect_we;
wire [31:0] builder_csr_interconnect_dat_w;
wire [31:0] builder_csr_interconnect_dat_r;
reg  [1:0] builder_state = 2'd0;
reg  [1:0] builder_next_state = 2'd0;
reg  builder_simsoc_last_was_read_next_value = 1'd0;
reg  builder_simsoc_last_was_read_next_value_ce = 1'd0;
reg  builder_fsm0_state = 1'd0;
reg  builder_fsm0_next_state = 1'd0;
reg  builder_fsm1_state = 1'd0;
reg  builder_fsm1_next_state = 1'd0;
wire [29:0] builder_slice_proxy0;
wire [29:0] builder_slice_proxy1;
wire [29:0] builder_slice_proxy2;
wire [29:0] builder_slice_proxy3;
wire [29:0] builder_slice_proxy4;
wire [29:0] builder_slice_proxy5;
reg  builder_array_muxed0 = 1'd0;
reg  builder_array_muxed1 = 1'd0;
reg  builder_array_muxed2 = 1'd0;
reg  [31:0] builder_array_muxed3 = 32'd0;
reg  builder_array_muxed4 = 1'd0;
reg  builder_array_muxed5 = 1'd0;
reg  builder_array_muxed6 = 1'd0;
reg  [31:0] builder_array_muxed7 = 32'd0;
reg  [3:0] builder_array_muxed8 = 4'd0;
reg  builder_array_muxed9 = 1'd0;
reg  builder_array_muxed10 = 1'd0;
reg  builder_array_muxed11 = 1'd0;
reg  builder_array_muxed12 = 1'd0;
reg  [31:0] builder_array_muxed13 = 32'd0;
reg  builder_array_muxed14 = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign main_picorv32_reset = (main_soc_rst | main_cpu_rst);
assign sim_trace = 1'd1;
assign main_bus_error = builder_bus_interconnect_error;
always @(*) begin
	main_picorv32_interrupt <= 32'd0;
	main_picorv32_interrupt[1] <= main_timer_irq;
	main_picorv32_interrupt[0] <= main_uart_irq;
end
assign main_socbushandler_addr = (main_picorv32_idbus_adr - 1'd0);
always @(*) begin
	builder_socbushandler_next_state <= 2'd0;
	builder_socbushandler_next_state <= builder_socbushandler_state;
	case (builder_socbushandler_state)
		1'd1: begin
			if ((main_socbushandler_b_valid & main_socbushandler_b_ready)) begin
				if ((main_socbushandler_b_payload_resp == 1'd0)) begin
					builder_socbushandler_next_state <= 1'd0;
				end else begin
					builder_socbushandler_next_state <= 2'd3;
				end
			end
		end
		2'd2: begin
			if ((main_socbushandler_r_valid & main_socbushandler_r_ready)) begin
				if ((main_socbushandler_r_payload_resp == 1'd0)) begin
					builder_socbushandler_next_state <= 1'd0;
				end else begin
					builder_socbushandler_next_state <= 2'd3;
				end
			end
		end
		2'd3: begin
			builder_socbushandler_next_state <= 1'd0;
		end
		default: begin
			if ((main_picorv32_idbus_stb & main_picorv32_idbus_cyc)) begin
				if (main_picorv32_idbus_we) begin
					builder_socbushandler_next_state <= 1'd1;
				end else begin
					builder_socbushandler_next_state <= 2'd2;
				end
			end
		end
	endcase
end
always @(*) begin
	main_picorv32_idbus_ack <= 1'd0;
	case (builder_socbushandler_state)
		1'd1: begin
			if ((main_socbushandler_b_valid & main_socbushandler_b_ready)) begin
				if ((main_socbushandler_b_payload_resp == 1'd0)) begin
					main_picorv32_idbus_ack <= 1'd1;
				end else begin
				end
			end
		end
		2'd2: begin
			if ((main_socbushandler_r_valid & main_socbushandler_r_ready)) begin
				if ((main_socbushandler_r_payload_resp == 1'd0)) begin
					main_picorv32_idbus_ack <= 1'd1;
				end else begin
				end
			end
		end
		2'd3: begin
			main_picorv32_idbus_ack <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_socbushandler_r_ready <= 1'd0;
	case (builder_socbushandler_state)
		1'd1: begin
		end
		2'd2: begin
			main_socbushandler_r_ready <= main_socbushandler_cmd_done;
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_socbushandler_w_payload_data <= 32'd0;
	case (builder_socbushandler_state)
		1'd1: begin
			main_socbushandler_w_payload_data <= main_picorv32_idbus_dat_w;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_picorv32_idbus_err <= 1'd0;
	case (builder_socbushandler_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			main_picorv32_idbus_err <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_socbushandler_w_payload_strb <= 4'd0;
	case (builder_socbushandler_state)
		1'd1: begin
			main_socbushandler_w_payload_strb <= main_picorv32_idbus_sel;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_socbushandler_cmd_done_socbushandler_next_value0 <= 1'd0;
	case (builder_socbushandler_state)
		1'd1: begin
			if ((main_socbushandler_aw_valid & main_socbushandler_aw_ready)) begin
				main_socbushandler_cmd_done_socbushandler_next_value0 <= 1'd1;
			end
		end
		2'd2: begin
			if ((main_socbushandler_ar_valid & main_socbushandler_ar_ready)) begin
				main_socbushandler_cmd_done_socbushandler_next_value0 <= 1'd1;
			end
		end
		2'd3: begin
		end
		default: begin
			main_socbushandler_cmd_done_socbushandler_next_value0 <= 1'd0;
		end
	endcase
end
always @(*) begin
	main_socbushandler_b_ready <= 1'd0;
	case (builder_socbushandler_state)
		1'd1: begin
			main_socbushandler_b_ready <= (main_socbushandler_cmd_done & main_socbushandler_data_done);
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_socbushandler_cmd_done_socbushandler_next_value_ce0 <= 1'd0;
	case (builder_socbushandler_state)
		1'd1: begin
			if ((main_socbushandler_aw_valid & main_socbushandler_aw_ready)) begin
				main_socbushandler_cmd_done_socbushandler_next_value_ce0 <= 1'd1;
			end
		end
		2'd2: begin
			if ((main_socbushandler_ar_valid & main_socbushandler_ar_ready)) begin
				main_socbushandler_cmd_done_socbushandler_next_value_ce0 <= 1'd1;
			end
		end
		2'd3: begin
		end
		default: begin
			main_socbushandler_cmd_done_socbushandler_next_value_ce0 <= 1'd1;
		end
	endcase
end
always @(*) begin
	main_socbushandler_data_done_socbushandler_next_value1 <= 1'd0;
	case (builder_socbushandler_state)
		1'd1: begin
			if ((main_socbushandler_w_valid & main_socbushandler_w_ready)) begin
				main_socbushandler_data_done_socbushandler_next_value1 <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			main_socbushandler_data_done_socbushandler_next_value1 <= 1'd0;
		end
	endcase
end
always @(*) begin
	main_socbushandler_data_done_socbushandler_next_value_ce1 <= 1'd0;
	case (builder_socbushandler_state)
		1'd1: begin
			if ((main_socbushandler_w_valid & main_socbushandler_w_ready)) begin
				main_socbushandler_data_done_socbushandler_next_value_ce1 <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			main_socbushandler_data_done_socbushandler_next_value_ce1 <= 1'd1;
		end
	endcase
end
always @(*) begin
	main_socbushandler_aw_valid <= 1'd0;
	case (builder_socbushandler_state)
		1'd1: begin
			main_socbushandler_aw_valid <= (~main_socbushandler_cmd_done);
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_socbushandler_ar_valid <= 1'd0;
	case (builder_socbushandler_state)
		1'd1: begin
		end
		2'd2: begin
			main_socbushandler_ar_valid <= (~main_socbushandler_cmd_done);
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_socbushandler_ar_payload_addr <= 32'd0;
	case (builder_socbushandler_state)
		1'd1: begin
		end
		2'd2: begin
			main_socbushandler_ar_payload_addr[31:2] <= main_socbushandler_addr;
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_picorv32_idbus_dat_r <= 32'd0;
	case (builder_socbushandler_state)
		1'd1: begin
		end
		2'd2: begin
			if ((main_socbushandler_r_valid & main_socbushandler_r_ready)) begin
				if ((main_socbushandler_r_payload_resp == 1'd0)) begin
					main_picorv32_idbus_dat_r <= main_socbushandler_r_payload_data;
				end else begin
				end
			end
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_socbushandler_aw_payload_addr <= 32'd0;
	case (builder_socbushandler_state)
		1'd1: begin
			main_socbushandler_aw_payload_addr[31:2] <= main_socbushandler_addr;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_socbushandler_w_valid <= 1'd0;
	case (builder_socbushandler_state)
		1'd1: begin
			main_socbushandler_w_valid <= (~main_socbushandler_data_done);
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
assign main_bus_errors_status = main_bus_errors;
assign main_picorv32_idbus_adr = main_picorv32_mem_addr[31:2];
assign main_picorv32_idbus_dat_w = main_picorv32_mem_wdata;
assign main_picorv32_idbus_we = (main_picorv32_mem_wstrb != 1'd0);
assign main_picorv32_idbus_sel = main_picorv32_mem_wstrb;
assign main_picorv32_idbus_cyc = main_picorv32_mem_valid;
assign main_picorv32_idbus_stb = main_picorv32_mem_valid;
assign main_picorv32_idbus_cti = 1'd0;
assign main_picorv32_idbus_bte = 1'd0;
assign main_picorv32_mem_ready = main_picorv32_idbus_ack;
assign main_picorv32_mem_rdata = main_picorv32_idbus_dat_r;
always @(*) begin
	builder_axilitesram0_next_state <= 2'd0;
	builder_axilitesram0_next_state <= builder_axilitesram0_state;
	case (builder_axilitesram0_state)
		1'd1: begin
			if (main_simsoc_r_ready) begin
				builder_axilitesram0_next_state <= 1'd0;
			end
		end
		2'd2: begin
			if (main_simsoc_b_ready) begin
				builder_axilitesram0_next_state <= 1'd0;
			end
		end
		default: begin
			if (main_simsoc_do_write) begin
				if (main_simsoc_w_valid) begin
					builder_axilitesram0_next_state <= 2'd2;
				end
			end else begin
				if (main_simsoc_do_read) begin
					builder_axilitesram0_next_state <= 1'd1;
				end
			end
		end
	endcase
end
always @(*) begin
	main_simsoc_last_was_read_axilitesram0_next_value <= 1'd0;
	case (builder_axilitesram0_state)
		1'd1: begin
			main_simsoc_last_was_read_axilitesram0_next_value <= 1'd1;
		end
		2'd2: begin
			main_simsoc_last_was_read_axilitesram0_next_value <= 1'd0;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_simsoc_last_was_read_axilitesram0_next_value_ce <= 1'd0;
	case (builder_axilitesram0_state)
		1'd1: begin
			main_simsoc_last_was_read_axilitesram0_next_value_ce <= 1'd1;
		end
		2'd2: begin
			main_simsoc_last_was_read_axilitesram0_next_value_ce <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_simsoc_do_read <= 1'd0;
	case (builder_axilitesram0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		default: begin
			if ((main_simsoc_aw_valid & main_simsoc_ar_valid)) begin
				main_simsoc_do_read <= (~main_simsoc_last_was_read);
			end else begin
				main_simsoc_do_read <= main_simsoc_ar_valid;
			end
		end
	endcase
end
always @(*) begin
	main_simsoc_b_payload_resp <= 2'd0;
	case (builder_axilitesram0_state)
		1'd1: begin
		end
		2'd2: begin
			main_simsoc_b_payload_resp <= 1'd0;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_simsoc_do_write <= 1'd0;
	case (builder_axilitesram0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		default: begin
			if ((main_simsoc_aw_valid & main_simsoc_ar_valid)) begin
				main_simsoc_do_write <= main_simsoc_last_was_read;
			end else begin
				main_simsoc_do_write <= main_simsoc_aw_valid;
			end
		end
	endcase
end
always @(*) begin
	main_simsoc_aw_ready <= 1'd0;
	case (builder_axilitesram0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		default: begin
			if (main_simsoc_do_write) begin
				if (main_simsoc_w_valid) begin
					main_simsoc_aw_ready <= 1'd1;
				end
			end else begin
			end
		end
	endcase
end
always @(*) begin
	main_simsoc_ar_ready <= 1'd0;
	case (builder_axilitesram0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		default: begin
			if (main_simsoc_do_write) begin
			end else begin
				if (main_simsoc_do_read) begin
					main_simsoc_ar_ready <= 1'd1;
				end
			end
		end
	endcase
end
always @(*) begin
	main_simsoc_r_valid <= 1'd0;
	case (builder_axilitesram0_state)
		1'd1: begin
			main_simsoc_r_valid <= 1'd1;
		end
		2'd2: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_simsoc_w_ready <= 1'd0;
	case (builder_axilitesram0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		default: begin
			if (main_simsoc_do_write) begin
				if (main_simsoc_w_valid) begin
					main_simsoc_w_ready <= 1'd1;
				end
			end else begin
			end
		end
	endcase
end
always @(*) begin
	main_simsoc_r_payload_resp <= 2'd0;
	case (builder_axilitesram0_state)
		1'd1: begin
			main_simsoc_r_payload_resp <= 1'd0;
		end
		2'd2: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_simsoc_r_payload_data <= 32'd0;
	case (builder_axilitesram0_state)
		1'd1: begin
			main_simsoc_r_payload_data <= main_simsoc_dat_r;
		end
		2'd2: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_simsoc_b_valid <= 1'd0;
	case (builder_axilitesram0_state)
		1'd1: begin
		end
		2'd2: begin
			main_simsoc_b_valid <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_simsoc_adr <= 13'd0;
	case (builder_axilitesram0_state)
		1'd1: begin
			main_simsoc_adr <= main_simsoc_ar_payload_addr[31:2];
		end
		2'd2: begin
		end
		default: begin
			if (main_simsoc_do_write) begin
				main_simsoc_adr <= main_simsoc_aw_payload_addr[31:2];
			end else begin
				if (main_simsoc_do_read) begin
					main_simsoc_adr <= main_simsoc_ar_payload_addr[31:2];
				end
			end
		end
	endcase
end
always @(*) begin
	main_ram_dat_w <= 32'd0;
	main_ram_dat_w <= main_ram_bus_w_payload_data;
	main_ram_dat_w <= main_ram_bus_w_payload_data;
end
always @(*) begin
	main_ram_we <= 4'd0;
	main_ram_we[0] <= ((main_ram_bus_w_valid & main_ram_bus_w_ready) & main_ram_bus_w_payload_strb[0]);
	main_ram_we[1] <= ((main_ram_bus_w_valid & main_ram_bus_w_ready) & main_ram_bus_w_payload_strb[1]);
	main_ram_we[2] <= ((main_ram_bus_w_valid & main_ram_bus_w_ready) & main_ram_bus_w_payload_strb[2]);
	main_ram_we[3] <= ((main_ram_bus_w_valid & main_ram_bus_w_ready) & main_ram_bus_w_payload_strb[3]);
	main_ram_we[0] <= ((main_ram_bus_w_valid & main_ram_bus_w_ready) & main_ram_bus_w_payload_strb[0]);
	main_ram_we[1] <= ((main_ram_bus_w_valid & main_ram_bus_w_ready) & main_ram_bus_w_payload_strb[1]);
	main_ram_we[2] <= ((main_ram_bus_w_valid & main_ram_bus_w_ready) & main_ram_bus_w_payload_strb[2]);
	main_ram_we[3] <= ((main_ram_bus_w_valid & main_ram_bus_w_ready) & main_ram_bus_w_payload_strb[3]);
end
always @(*) begin
	builder_axilitesram1_next_state <= 2'd0;
	builder_axilitesram1_next_state <= builder_axilitesram1_state;
	case (builder_axilitesram1_state)
		1'd1: begin
			if (main_ram_bus_r_ready) begin
				builder_axilitesram1_next_state <= 1'd0;
			end
		end
		2'd2: begin
			if (main_ram_bus_b_ready) begin
				builder_axilitesram1_next_state <= 1'd0;
			end
		end
		default: begin
			if (main_ram_do_write) begin
				if (main_ram_bus_w_valid) begin
					builder_axilitesram1_next_state <= 2'd2;
				end
			end else begin
				if (main_ram_do_read) begin
					builder_axilitesram1_next_state <= 1'd1;
				end
			end
		end
	endcase
end
always @(*) begin
	main_ram_bus_r_valid <= 1'd0;
	case (builder_axilitesram1_state)
		1'd1: begin
			main_ram_bus_r_valid <= 1'd1;
		end
		2'd2: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_ram_bus_w_ready <= 1'd0;
	case (builder_axilitesram1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		default: begin
			if (main_ram_do_write) begin
				if (main_ram_bus_w_valid) begin
					main_ram_bus_w_ready <= 1'd1;
				end
			end else begin
			end
		end
	endcase
end
always @(*) begin
	main_ram_bus_ar_ready <= 1'd0;
	case (builder_axilitesram1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		default: begin
			if (main_ram_do_write) begin
			end else begin
				if (main_ram_do_read) begin
					main_ram_bus_ar_ready <= 1'd1;
				end
			end
		end
	endcase
end
always @(*) begin
	main_ram_do_read <= 1'd0;
	case (builder_axilitesram1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		default: begin
			if ((main_ram_bus_aw_valid & main_ram_bus_ar_valid)) begin
				main_ram_do_read <= (~main_ram_last_was_read);
			end else begin
				main_ram_do_read <= main_ram_bus_ar_valid;
			end
		end
	endcase
end
always @(*) begin
	main_ram_bus_r_payload_resp <= 2'd0;
	case (builder_axilitesram1_state)
		1'd1: begin
			main_ram_bus_r_payload_resp <= 1'd0;
		end
		2'd2: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_ram_do_write <= 1'd0;
	case (builder_axilitesram1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		default: begin
			if ((main_ram_bus_aw_valid & main_ram_bus_ar_valid)) begin
				main_ram_do_write <= main_ram_last_was_read;
			end else begin
				main_ram_do_write <= main_ram_bus_aw_valid;
			end
		end
	endcase
end
always @(*) begin
	main_ram_bus_r_payload_data <= 32'd0;
	case (builder_axilitesram1_state)
		1'd1: begin
			main_ram_bus_r_payload_data <= main_ram_dat_r;
		end
		2'd2: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_ram_bus_b_valid <= 1'd0;
	case (builder_axilitesram1_state)
		1'd1: begin
		end
		2'd2: begin
			main_ram_bus_b_valid <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_ram_adr <= 10'd0;
	case (builder_axilitesram1_state)
		1'd1: begin
			main_ram_adr <= main_ram_bus_ar_payload_addr[31:2];
		end
		2'd2: begin
		end
		default: begin
			if (main_ram_do_write) begin
				main_ram_adr <= main_ram_bus_aw_payload_addr[31:2];
			end else begin
				if (main_ram_do_read) begin
					main_ram_adr <= main_ram_bus_ar_payload_addr[31:2];
				end
			end
		end
	endcase
end
always @(*) begin
	main_ram_bus_b_payload_resp <= 2'd0;
	case (builder_axilitesram1_state)
		1'd1: begin
		end
		2'd2: begin
			main_ram_bus_b_payload_resp <= 1'd0;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_ram_bus_aw_ready <= 1'd0;
	case (builder_axilitesram1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		default: begin
			if (main_ram_do_write) begin
				if (main_ram_bus_w_valid) begin
					main_ram_bus_aw_ready <= 1'd1;
				end
			end else begin
			end
		end
	endcase
end
always @(*) begin
	main_ram_last_was_read_axilitesram1_next_value <= 1'd0;
	case (builder_axilitesram1_state)
		1'd1: begin
			main_ram_last_was_read_axilitesram1_next_value <= 1'd1;
		end
		2'd2: begin
			main_ram_last_was_read_axilitesram1_next_value <= 1'd0;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_ram_last_was_read_axilitesram1_next_value_ce <= 1'd0;
	case (builder_axilitesram1_state)
		1'd1: begin
			main_ram_last_was_read_axilitesram1_next_value_ce <= 1'd1;
		end
		2'd2: begin
			main_ram_last_was_read_axilitesram1_next_value_ce <= 1'd1;
		end
		default: begin
		end
	endcase
end
assign serial_source_valid = main_sink_valid;
assign serial_source_data = main_sink_payload_data;
assign main_sink_ready = serial_source_ready;
assign main_source_valid = serial_sink_valid;
assign main_source_payload_data = serial_sink_data;
assign serial_sink_ready = main_source_ready;
assign main_uart_uart_sink_valid = main_source_valid;
assign main_source_ready = main_uart_uart_sink_ready;
assign main_uart_uart_sink_first = main_source_first;
assign main_uart_uart_sink_last = main_source_last;
assign main_uart_uart_sink_payload_data = main_source_payload_data;
assign main_sink_valid = main_uart_uart_source_valid;
assign main_uart_uart_source_ready = main_sink_ready;
assign main_sink_first = main_uart_uart_source_first;
assign main_sink_last = main_uart_uart_source_last;
assign main_sink_payload_data = main_uart_uart_source_payload_data;
assign main_uart_tx_fifo_sink_valid = main_uart_rxtx_re;
assign main_uart_tx_fifo_sink_payload_data = main_uart_rxtx_r;
assign main_uart_uart_source_valid = main_uart_tx_fifo_source_valid;
assign main_uart_tx_fifo_source_ready = main_uart_uart_source_ready;
assign main_uart_uart_source_first = main_uart_tx_fifo_source_first;
assign main_uart_uart_source_last = main_uart_tx_fifo_source_last;
assign main_uart_uart_source_payload_data = main_uart_tx_fifo_source_payload_data;
assign main_uart_txfull_status = (~main_uart_tx_fifo_sink_ready);
assign main_uart_txempty_status = (~main_uart_tx_fifo_source_valid);
assign main_uart_tx_trigger = main_uart_tx_fifo_sink_ready;
assign main_uart_rx_fifo_sink_valid = main_uart_uart_sink_valid;
assign main_uart_uart_sink_ready = main_uart_rx_fifo_sink_ready;
assign main_uart_rx_fifo_sink_first = main_uart_uart_sink_first;
assign main_uart_rx_fifo_sink_last = main_uart_uart_sink_last;
assign main_uart_rx_fifo_sink_payload_data = main_uart_uart_sink_payload_data;
assign main_uart_rxtx_w = main_uart_rx_fifo_source_payload_data;
assign main_uart_rx_fifo_source_ready = (main_uart_rx_clear | (1'd0 & main_uart_rxtx_we));
assign main_uart_rxempty_status = (~main_uart_rx_fifo_source_valid);
assign main_uart_rxfull_status = (~main_uart_rx_fifo_sink_ready);
assign main_uart_rx_trigger = main_uart_rx_fifo_source_valid;
assign main_uart_tx0 = main_uart_tx_status;
assign main_uart_tx1 = main_uart_tx_pending;
always @(*) begin
	main_uart_tx_clear <= 1'd0;
	if ((main_uart_pending_re & main_uart_pending_r[0])) begin
		main_uart_tx_clear <= 1'd1;
	end
end
assign main_uart_rx0 = main_uart_rx_status;
assign main_uart_rx1 = main_uart_rx_pending;
always @(*) begin
	main_uart_rx_clear <= 1'd0;
	if ((main_uart_pending_re & main_uart_pending_r[1])) begin
		main_uart_rx_clear <= 1'd1;
	end
end
assign main_uart_irq = ((main_uart_pending_status[0] & main_uart_enable_storage[0]) | (main_uart_pending_status[1] & main_uart_enable_storage[1]));
assign main_uart_tx_status = main_uart_tx_trigger;
assign main_uart_rx_status = main_uart_rx_trigger;
assign main_uart_tx_fifo_syncfifo_din = {main_uart_tx_fifo_fifo_in_last, main_uart_tx_fifo_fifo_in_first, main_uart_tx_fifo_fifo_in_payload_data};
assign {main_uart_tx_fifo_fifo_out_last, main_uart_tx_fifo_fifo_out_first, main_uart_tx_fifo_fifo_out_payload_data} = main_uart_tx_fifo_syncfifo_dout;
assign {main_uart_tx_fifo_fifo_out_last, main_uart_tx_fifo_fifo_out_first, main_uart_tx_fifo_fifo_out_payload_data} = main_uart_tx_fifo_syncfifo_dout;
assign {main_uart_tx_fifo_fifo_out_last, main_uart_tx_fifo_fifo_out_first, main_uart_tx_fifo_fifo_out_payload_data} = main_uart_tx_fifo_syncfifo_dout;
assign main_uart_tx_fifo_sink_ready = main_uart_tx_fifo_syncfifo_writable;
assign main_uart_tx_fifo_syncfifo_we = main_uart_tx_fifo_sink_valid;
assign main_uart_tx_fifo_fifo_in_first = main_uart_tx_fifo_sink_first;
assign main_uart_tx_fifo_fifo_in_last = main_uart_tx_fifo_sink_last;
assign main_uart_tx_fifo_fifo_in_payload_data = main_uart_tx_fifo_sink_payload_data;
assign main_uart_tx_fifo_source_valid = main_uart_tx_fifo_readable;
assign main_uart_tx_fifo_source_first = main_uart_tx_fifo_fifo_out_first;
assign main_uart_tx_fifo_source_last = main_uart_tx_fifo_fifo_out_last;
assign main_uart_tx_fifo_source_payload_data = main_uart_tx_fifo_fifo_out_payload_data;
assign main_uart_tx_fifo_re = main_uart_tx_fifo_source_ready;
assign main_uart_tx_fifo_syncfifo_re = (main_uart_tx_fifo_syncfifo_readable & ((~main_uart_tx_fifo_readable) | main_uart_tx_fifo_re));
assign main_uart_tx_fifo_level1 = (main_uart_tx_fifo_level0 + main_uart_tx_fifo_readable);
always @(*) begin
	main_uart_tx_fifo_wrport_adr <= 4'd0;
	if (main_uart_tx_fifo_replace) begin
		main_uart_tx_fifo_wrport_adr <= (main_uart_tx_fifo_produce - 1'd1);
	end else begin
		main_uart_tx_fifo_wrport_adr <= main_uart_tx_fifo_produce;
	end
end
assign main_uart_tx_fifo_wrport_dat_w = main_uart_tx_fifo_syncfifo_din;
assign main_uart_tx_fifo_wrport_we = (main_uart_tx_fifo_syncfifo_we & (main_uart_tx_fifo_syncfifo_writable | main_uart_tx_fifo_replace));
assign main_uart_tx_fifo_do_read = (main_uart_tx_fifo_syncfifo_readable & main_uart_tx_fifo_syncfifo_re);
assign main_uart_tx_fifo_rdport_adr = main_uart_tx_fifo_consume;
assign main_uart_tx_fifo_syncfifo_dout = main_uart_tx_fifo_rdport_dat_r;
assign main_uart_tx_fifo_rdport_re = main_uart_tx_fifo_do_read;
assign main_uart_tx_fifo_syncfifo_writable = (main_uart_tx_fifo_level0 != 5'd16);
assign main_uart_tx_fifo_syncfifo_readable = (main_uart_tx_fifo_level0 != 1'd0);
assign main_uart_rx_fifo_syncfifo_din = {main_uart_rx_fifo_fifo_in_last, main_uart_rx_fifo_fifo_in_first, main_uart_rx_fifo_fifo_in_payload_data};
assign {main_uart_rx_fifo_fifo_out_last, main_uart_rx_fifo_fifo_out_first, main_uart_rx_fifo_fifo_out_payload_data} = main_uart_rx_fifo_syncfifo_dout;
assign {main_uart_rx_fifo_fifo_out_last, main_uart_rx_fifo_fifo_out_first, main_uart_rx_fifo_fifo_out_payload_data} = main_uart_rx_fifo_syncfifo_dout;
assign {main_uart_rx_fifo_fifo_out_last, main_uart_rx_fifo_fifo_out_first, main_uart_rx_fifo_fifo_out_payload_data} = main_uart_rx_fifo_syncfifo_dout;
assign main_uart_rx_fifo_sink_ready = main_uart_rx_fifo_syncfifo_writable;
assign main_uart_rx_fifo_syncfifo_we = main_uart_rx_fifo_sink_valid;
assign main_uart_rx_fifo_fifo_in_first = main_uart_rx_fifo_sink_first;
assign main_uart_rx_fifo_fifo_in_last = main_uart_rx_fifo_sink_last;
assign main_uart_rx_fifo_fifo_in_payload_data = main_uart_rx_fifo_sink_payload_data;
assign main_uart_rx_fifo_source_valid = main_uart_rx_fifo_readable;
assign main_uart_rx_fifo_source_first = main_uart_rx_fifo_fifo_out_first;
assign main_uart_rx_fifo_source_last = main_uart_rx_fifo_fifo_out_last;
assign main_uart_rx_fifo_source_payload_data = main_uart_rx_fifo_fifo_out_payload_data;
assign main_uart_rx_fifo_re = main_uart_rx_fifo_source_ready;
assign main_uart_rx_fifo_syncfifo_re = (main_uart_rx_fifo_syncfifo_readable & ((~main_uart_rx_fifo_readable) | main_uart_rx_fifo_re));
assign main_uart_rx_fifo_level1 = (main_uart_rx_fifo_level0 + main_uart_rx_fifo_readable);
always @(*) begin
	main_uart_rx_fifo_wrport_adr <= 4'd0;
	if (main_uart_rx_fifo_replace) begin
		main_uart_rx_fifo_wrport_adr <= (main_uart_rx_fifo_produce - 1'd1);
	end else begin
		main_uart_rx_fifo_wrport_adr <= main_uart_rx_fifo_produce;
	end
end
assign main_uart_rx_fifo_wrport_dat_w = main_uart_rx_fifo_syncfifo_din;
assign main_uart_rx_fifo_wrport_we = (main_uart_rx_fifo_syncfifo_we & (main_uart_rx_fifo_syncfifo_writable | main_uart_rx_fifo_replace));
assign main_uart_rx_fifo_do_read = (main_uart_rx_fifo_syncfifo_readable & main_uart_rx_fifo_syncfifo_re);
assign main_uart_rx_fifo_rdport_adr = main_uart_rx_fifo_consume;
assign main_uart_rx_fifo_syncfifo_dout = main_uart_rx_fifo_rdport_dat_r;
assign main_uart_rx_fifo_rdport_re = main_uart_rx_fifo_do_read;
assign main_uart_rx_fifo_syncfifo_writable = (main_uart_rx_fifo_level0 != 5'd16);
assign main_uart_rx_fifo_syncfifo_readable = (main_uart_rx_fifo_level0 != 1'd0);
assign main_timer_zero_trigger = (main_timer_value == 1'd0);
assign main_timer_zero0 = main_timer_zero_status;
assign main_timer_zero1 = main_timer_zero_pending;
always @(*) begin
	main_timer_zero_clear <= 1'd0;
	if ((main_timer_pending_re & main_timer_pending_r)) begin
		main_timer_zero_clear <= 1'd1;
	end
end
assign main_timer_irq = (main_timer_pending_status & main_timer_enable_storage);
assign main_timer_zero_status = main_timer_zero_trigger;
assign sys_clk_1 = sys_clk;
assign por_clk = sys_clk;
assign sys_rst = main_int_rst;
assign builder_simsoc_dat_w = builder_simsoc_w_payload_data;
assign builder_simsoc_we = ((builder_simsoc_w_valid & builder_simsoc_w_ready) & (builder_simsoc_w_payload_strb != 1'd0));
always @(*) begin
	builder_next_state <= 2'd0;
	builder_next_state <= builder_state;
	case (builder_state)
		1'd1: begin
			if (builder_simsoc_r_ready) begin
				builder_next_state <= 1'd0;
			end
		end
		2'd2: begin
			if (builder_simsoc_b_ready) begin
				builder_next_state <= 1'd0;
			end
		end
		default: begin
			if (builder_simsoc_do_write) begin
				if (builder_simsoc_w_valid) begin
					builder_next_state <= 2'd2;
				end
			end else begin
				if (builder_simsoc_do_read) begin
					builder_next_state <= 1'd1;
				end
			end
		end
	endcase
end
always @(*) begin
	builder_simsoc_w_ready <= 1'd0;
	case (builder_state)
		1'd1: begin
		end
		2'd2: begin
		end
		default: begin
			if (builder_simsoc_do_write) begin
				if (builder_simsoc_w_valid) begin
					builder_simsoc_w_ready <= 1'd1;
				end
			end else begin
			end
		end
	endcase
end
always @(*) begin
	builder_simsoc_r_payload_resp <= 2'd0;
	case (builder_state)
		1'd1: begin
			builder_simsoc_r_payload_resp <= 1'd0;
		end
		2'd2: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	builder_simsoc_r_payload_data <= 32'd0;
	case (builder_state)
		1'd1: begin
			builder_simsoc_r_payload_data <= builder_simsoc_dat_r;
		end
		2'd2: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	builder_simsoc_do_read <= 1'd0;
	case (builder_state)
		1'd1: begin
		end
		2'd2: begin
		end
		default: begin
			if ((builder_simsoc_aw_valid & builder_simsoc_ar_valid)) begin
				builder_simsoc_do_read <= (~builder_simsoc_last_was_read);
			end else begin
				builder_simsoc_do_read <= builder_simsoc_ar_valid;
			end
		end
	endcase
end
always @(*) begin
	builder_simsoc_b_valid <= 1'd0;
	case (builder_state)
		1'd1: begin
		end
		2'd2: begin
			builder_simsoc_b_valid <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	builder_simsoc_do_write <= 1'd0;
	case (builder_state)
		1'd1: begin
		end
		2'd2: begin
		end
		default: begin
			if ((builder_simsoc_aw_valid & builder_simsoc_ar_valid)) begin
				builder_simsoc_do_write <= builder_simsoc_last_was_read;
			end else begin
				builder_simsoc_do_write <= builder_simsoc_aw_valid;
			end
		end
	endcase
end
always @(*) begin
	builder_simsoc_adr <= 14'd0;
	case (builder_state)
		1'd1: begin
			builder_simsoc_adr <= builder_simsoc_ar_payload_addr[31:2];
		end
		2'd2: begin
		end
		default: begin
			if (builder_simsoc_do_write) begin
				builder_simsoc_adr <= builder_simsoc_aw_payload_addr[31:2];
			end else begin
				if (builder_simsoc_do_read) begin
					builder_simsoc_adr <= builder_simsoc_ar_payload_addr[31:2];
				end
			end
		end
	endcase
end
always @(*) begin
	builder_simsoc_b_payload_resp <= 2'd0;
	case (builder_state)
		1'd1: begin
		end
		2'd2: begin
			builder_simsoc_b_payload_resp <= 1'd0;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	builder_simsoc_aw_ready <= 1'd0;
	case (builder_state)
		1'd1: begin
		end
		2'd2: begin
		end
		default: begin
			if (builder_simsoc_do_write) begin
				if (builder_simsoc_w_valid) begin
					builder_simsoc_aw_ready <= 1'd1;
				end
			end else begin
			end
		end
	endcase
end
always @(*) begin
	builder_simsoc_ar_ready <= 1'd0;
	case (builder_state)
		1'd1: begin
		end
		2'd2: begin
		end
		default: begin
			if (builder_simsoc_do_write) begin
			end else begin
				if (builder_simsoc_do_read) begin
					builder_simsoc_ar_ready <= 1'd1;
				end
			end
		end
	endcase
end
always @(*) begin
	builder_simsoc_last_was_read_next_value <= 1'd0;
	case (builder_state)
		1'd1: begin
			builder_simsoc_last_was_read_next_value <= 1'd1;
		end
		2'd2: begin
			builder_simsoc_last_was_read_next_value <= 1'd0;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	builder_simsoc_last_was_read_next_value_ce <= 1'd0;
	case (builder_state)
		1'd1: begin
			builder_simsoc_last_was_read_next_value_ce <= 1'd1;
		end
		2'd2: begin
			builder_simsoc_last_was_read_next_value_ce <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	builder_simsoc_r_valid <= 1'd0;
	case (builder_state)
		1'd1: begin
			builder_simsoc_r_valid <= 1'd1;
		end
		2'd2: begin
		end
		default: begin
		end
	endcase
end
assign builder_bus_interconnect_aw_valid = builder_array_muxed0;
assign builder_bus_interconnect_aw_first = builder_array_muxed1;
assign builder_bus_interconnect_aw_last = builder_array_muxed2;
assign builder_bus_interconnect_aw_payload_addr = builder_array_muxed3;
assign builder_bus_interconnect_w_valid = builder_array_muxed4;
assign builder_bus_interconnect_w_first = builder_array_muxed5;
assign builder_bus_interconnect_w_last = builder_array_muxed6;
assign builder_bus_interconnect_w_payload_data = builder_array_muxed7;
assign builder_bus_interconnect_w_payload_strb = builder_array_muxed8;
assign builder_bus_interconnect_b_ready = builder_array_muxed9;
assign builder_bus_interconnect_ar_valid = builder_array_muxed10;
assign builder_bus_interconnect_ar_first = builder_array_muxed11;
assign builder_bus_interconnect_ar_last = builder_array_muxed12;
assign builder_bus_interconnect_ar_payload_addr = builder_array_muxed13;
assign builder_bus_interconnect_r_ready = builder_array_muxed14;
assign main_socbushandler_aw_ready = (builder_bus_interconnect_aw_ready & (builder_bus_interconnect_rr_write_grant == 1'd0));
assign main_socbushandler_w_ready = (builder_bus_interconnect_w_ready & (builder_bus_interconnect_rr_write_grant == 1'd0));
assign main_socbushandler_b_valid = builder_bus_interconnect_b_valid;
assign main_socbushandler_b_first = builder_bus_interconnect_b_first;
assign main_socbushandler_b_last = builder_bus_interconnect_b_last;
assign main_socbushandler_b_payload_resp = builder_bus_interconnect_b_payload_resp;
assign main_socbushandler_ar_ready = (builder_bus_interconnect_ar_ready & (builder_bus_interconnect_rr_read_grant == 1'd0));
assign main_socbushandler_r_valid = builder_bus_interconnect_r_valid;
assign main_socbushandler_r_first = builder_bus_interconnect_r_first;
assign main_socbushandler_r_last = builder_bus_interconnect_r_last;
assign main_socbushandler_r_payload_resp = builder_bus_interconnect_r_payload_resp;
assign main_socbushandler_r_payload_data = builder_bus_interconnect_r_payload_data;
assign builder_bus_interconnect_rr_write_ce = ((~((builder_bus_interconnect_aw_valid | builder_bus_interconnect_w_valid) | builder_bus_interconnect_b_valid)) & builder_bus_interconnect_wr_lock_empty);
assign builder_bus_interconnect_rr_read_ce = ((~(builder_bus_interconnect_ar_valid | builder_bus_interconnect_r_valid)) & builder_bus_interconnect_rd_lock_empty);
assign builder_bus_interconnect_rr_write_request = {((main_socbushandler_aw_valid | main_socbushandler_w_valid) | main_socbushandler_b_valid)};
assign builder_bus_interconnect_rr_read_request = {(main_socbushandler_ar_valid | main_socbushandler_r_valid)};
assign builder_bus_interconnect_rr_write_grant = 1'd0;
assign builder_bus_interconnect_rr_read_grant = 1'd0;
assign builder_bus_interconnect_wr_lock_full = (builder_bus_interconnect_wr_lock_counter == 8'd255);
assign builder_bus_interconnect_wr_lock_empty = (builder_bus_interconnect_wr_lock_counter == 1'd0);
assign builder_bus_interconnect_wr_lock_stall = ((builder_bus_interconnect_aw_valid & builder_bus_interconnect_aw_ready) & builder_bus_interconnect_wr_lock_full);
assign builder_bus_interconnect_rd_lock_full = (builder_bus_interconnect_rd_lock_counter == 8'd255);
assign builder_bus_interconnect_rd_lock_empty = (builder_bus_interconnect_rd_lock_counter == 1'd0);
assign builder_bus_interconnect_rd_lock_stall = ((builder_bus_interconnect_ar_valid & builder_bus_interconnect_ar_ready) & builder_bus_interconnect_rd_lock_full);
always @(*) begin
	builder_bus_interconnect_slave_sel_dec0 <= 3'd0;
	builder_bus_interconnect_slave_sel_dec0[0] <= (builder_slice_proxy0[29:13] == 1'd0);
	builder_bus_interconnect_slave_sel_dec0[1] <= (builder_slice_proxy2[29:10] == 13'd4096);
	builder_bus_interconnect_slave_sel_dec0[2] <= (builder_slice_proxy4[29:14] == 16'd33280);
end
always @(*) begin
	builder_bus_interconnect_slave_sel_dec1 <= 3'd0;
	builder_bus_interconnect_slave_sel_dec1[0] <= (builder_slice_proxy1[29:13] == 1'd0);
	builder_bus_interconnect_slave_sel_dec1[1] <= (builder_slice_proxy3[29:10] == 13'd4096);
	builder_bus_interconnect_slave_sel_dec1[2] <= (builder_slice_proxy5[29:14] == 16'd33280);
end
always @(*) begin
	builder_bus_interconnect_slave_sel0 <= 3'd0;
	if (builder_bus_interconnect_axiliterequestcounter0_empty) begin
		builder_bus_interconnect_slave_sel0 <= builder_bus_interconnect_slave_sel_dec0;
	end else begin
		builder_bus_interconnect_slave_sel0 <= builder_bus_interconnect_slave_sel_reg0;
	end
end
always @(*) begin
	builder_bus_interconnect_slave_sel1 <= 3'd0;
	if (builder_bus_interconnect_axiliterequestcounter1_empty) begin
		builder_bus_interconnect_slave_sel1 <= builder_bus_interconnect_slave_sel_dec1;
	end else begin
		builder_bus_interconnect_slave_sel1 <= builder_bus_interconnect_slave_sel_reg1;
	end
end
assign main_simsoc_aw_valid = (builder_bus_interconnect_aw_valid & builder_bus_interconnect_slave_sel0[0]);
assign main_simsoc_aw_first = builder_bus_interconnect_aw_first;
assign main_simsoc_aw_last = builder_bus_interconnect_aw_last;
assign main_simsoc_aw_payload_addr = builder_bus_interconnect_aw_payload_addr;
assign main_simsoc_w_valid = (builder_bus_interconnect_w_valid & builder_bus_interconnect_slave_sel0[0]);
assign main_simsoc_w_first = builder_bus_interconnect_w_first;
assign main_simsoc_w_last = builder_bus_interconnect_w_last;
assign main_simsoc_w_payload_data = builder_bus_interconnect_w_payload_data;
assign main_simsoc_w_payload_strb = builder_bus_interconnect_w_payload_strb;
assign main_simsoc_b_ready = (builder_bus_interconnect_b_ready & builder_bus_interconnect_slave_sel0[0]);
assign main_simsoc_ar_valid = (builder_bus_interconnect_ar_valid & builder_bus_interconnect_slave_sel1[0]);
assign main_simsoc_ar_first = builder_bus_interconnect_ar_first;
assign main_simsoc_ar_last = builder_bus_interconnect_ar_last;
assign main_simsoc_ar_payload_addr = builder_bus_interconnect_ar_payload_addr;
assign main_simsoc_r_ready = (builder_bus_interconnect_r_ready & builder_bus_interconnect_slave_sel1[0]);
assign main_ram_bus_aw_valid = (builder_bus_interconnect_aw_valid & builder_bus_interconnect_slave_sel0[1]);
assign main_ram_bus_aw_first = builder_bus_interconnect_aw_first;
assign main_ram_bus_aw_last = builder_bus_interconnect_aw_last;
assign main_ram_bus_aw_payload_addr = builder_bus_interconnect_aw_payload_addr;
assign main_ram_bus_w_valid = (builder_bus_interconnect_w_valid & builder_bus_interconnect_slave_sel0[1]);
assign main_ram_bus_w_first = builder_bus_interconnect_w_first;
assign main_ram_bus_w_last = builder_bus_interconnect_w_last;
assign main_ram_bus_w_payload_data = builder_bus_interconnect_w_payload_data;
assign main_ram_bus_w_payload_strb = builder_bus_interconnect_w_payload_strb;
assign main_ram_bus_b_ready = (builder_bus_interconnect_b_ready & builder_bus_interconnect_slave_sel0[1]);
assign main_ram_bus_ar_valid = (builder_bus_interconnect_ar_valid & builder_bus_interconnect_slave_sel1[1]);
assign main_ram_bus_ar_first = builder_bus_interconnect_ar_first;
assign main_ram_bus_ar_last = builder_bus_interconnect_ar_last;
assign main_ram_bus_ar_payload_addr = builder_bus_interconnect_ar_payload_addr;
assign main_ram_bus_r_ready = (builder_bus_interconnect_r_ready & builder_bus_interconnect_slave_sel1[1]);
assign builder_simsoc_aw_valid = (builder_bus_interconnect_aw_valid & builder_bus_interconnect_slave_sel0[2]);
assign builder_simsoc_aw_first = builder_bus_interconnect_aw_first;
assign builder_simsoc_aw_last = builder_bus_interconnect_aw_last;
assign builder_simsoc_aw_payload_addr = builder_bus_interconnect_aw_payload_addr;
assign builder_simsoc_w_valid = (builder_bus_interconnect_w_valid & builder_bus_interconnect_slave_sel0[2]);
assign builder_simsoc_w_first = builder_bus_interconnect_w_first;
assign builder_simsoc_w_last = builder_bus_interconnect_w_last;
assign builder_simsoc_w_payload_data = builder_bus_interconnect_w_payload_data;
assign builder_simsoc_w_payload_strb = builder_bus_interconnect_w_payload_strb;
assign builder_simsoc_b_ready = (builder_bus_interconnect_b_ready & builder_bus_interconnect_slave_sel0[2]);
assign builder_simsoc_ar_valid = (builder_bus_interconnect_ar_valid & builder_bus_interconnect_slave_sel1[2]);
assign builder_simsoc_ar_first = builder_bus_interconnect_ar_first;
assign builder_simsoc_ar_last = builder_bus_interconnect_ar_last;
assign builder_simsoc_ar_payload_addr = builder_bus_interconnect_ar_payload_addr;
assign builder_simsoc_r_ready = (builder_bus_interconnect_r_ready & builder_bus_interconnect_slave_sel1[2]);
always @(*) begin
	builder_bus_interconnect_aw_ready <= 1'd0;
	builder_bus_interconnect_aw_ready <= (((main_simsoc_aw_ready & {1{builder_bus_interconnect_slave_sel0[0]}}) | (main_ram_bus_aw_ready & {1{builder_bus_interconnect_slave_sel0[1]}})) | (builder_simsoc_aw_ready & {1{builder_bus_interconnect_slave_sel0[2]}}));
	case (builder_fsm0_state)
		1'd1: begin
			builder_bus_interconnect_aw_ready <= builder_bus_interconnect_aw_valid;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	builder_bus_interconnect_w_ready <= 1'd0;
	builder_bus_interconnect_w_ready <= (((main_simsoc_w_ready & {1{builder_bus_interconnect_slave_sel0[0]}}) | (main_ram_bus_w_ready & {1{builder_bus_interconnect_slave_sel0[1]}})) | (builder_simsoc_w_ready & {1{builder_bus_interconnect_slave_sel0[2]}}));
	case (builder_fsm0_state)
		1'd1: begin
			builder_bus_interconnect_w_ready <= builder_bus_interconnect_w_valid;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	builder_bus_interconnect_b_valid <= 1'd0;
	builder_bus_interconnect_b_valid <= (((main_simsoc_b_valid & {1{builder_bus_interconnect_slave_sel0[0]}}) | (main_ram_bus_b_valid & {1{builder_bus_interconnect_slave_sel0[1]}})) | (builder_simsoc_b_valid & {1{builder_bus_interconnect_slave_sel0[2]}}));
	case (builder_fsm0_state)
		1'd1: begin
			builder_bus_interconnect_b_valid <= ((~builder_bus_interconnect_aw_valid) & (~builder_bus_interconnect_w_valid));
		end
		default: begin
		end
	endcase
end
assign builder_bus_interconnect_b_first = (((main_simsoc_b_first & {1{builder_bus_interconnect_slave_sel0[0]}}) | (main_ram_bus_b_first & {1{builder_bus_interconnect_slave_sel0[1]}})) | (builder_simsoc_b_first & {1{builder_bus_interconnect_slave_sel0[2]}}));
assign builder_bus_interconnect_b_last = (((main_simsoc_b_last & {1{builder_bus_interconnect_slave_sel0[0]}}) | (main_ram_bus_b_last & {1{builder_bus_interconnect_slave_sel0[1]}})) | (builder_simsoc_b_last & {1{builder_bus_interconnect_slave_sel0[2]}}));
always @(*) begin
	builder_bus_interconnect_b_payload_resp <= 2'd0;
	builder_bus_interconnect_b_payload_resp <= (((main_simsoc_b_payload_resp & {2{builder_bus_interconnect_slave_sel0[0]}}) | (main_ram_bus_b_payload_resp & {2{builder_bus_interconnect_slave_sel0[1]}})) | (builder_simsoc_b_payload_resp & {2{builder_bus_interconnect_slave_sel0[2]}}));
	case (builder_fsm0_state)
		1'd1: begin
			builder_bus_interconnect_b_payload_resp <= 2'd2;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	builder_bus_interconnect_ar_ready <= 1'd0;
	builder_bus_interconnect_ar_ready <= (((main_simsoc_ar_ready & {1{builder_bus_interconnect_slave_sel1[0]}}) | (main_ram_bus_ar_ready & {1{builder_bus_interconnect_slave_sel1[1]}})) | (builder_simsoc_ar_ready & {1{builder_bus_interconnect_slave_sel1[2]}}));
	case (builder_fsm1_state)
		1'd1: begin
			builder_bus_interconnect_ar_ready <= builder_bus_interconnect_ar_valid;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	builder_bus_interconnect_r_valid <= 1'd0;
	builder_bus_interconnect_r_valid <= (((main_simsoc_r_valid & {1{builder_bus_interconnect_slave_sel1[0]}}) | (main_ram_bus_r_valid & {1{builder_bus_interconnect_slave_sel1[1]}})) | (builder_simsoc_r_valid & {1{builder_bus_interconnect_slave_sel1[2]}}));
	case (builder_fsm1_state)
		1'd1: begin
			builder_bus_interconnect_r_valid <= (~builder_bus_interconnect_ar_valid);
		end
		default: begin
		end
	endcase
end
assign builder_bus_interconnect_r_first = (((main_simsoc_r_first & {1{builder_bus_interconnect_slave_sel1[0]}}) | (main_ram_bus_r_first & {1{builder_bus_interconnect_slave_sel1[1]}})) | (builder_simsoc_r_first & {1{builder_bus_interconnect_slave_sel1[2]}}));
assign builder_bus_interconnect_r_last = (((main_simsoc_r_last & {1{builder_bus_interconnect_slave_sel1[0]}}) | (main_ram_bus_r_last & {1{builder_bus_interconnect_slave_sel1[1]}})) | (builder_simsoc_r_last & {1{builder_bus_interconnect_slave_sel1[2]}}));
always @(*) begin
	builder_bus_interconnect_r_payload_resp <= 2'd0;
	builder_bus_interconnect_r_payload_resp <= (((main_simsoc_r_payload_resp & {2{builder_bus_interconnect_slave_sel1[0]}}) | (main_ram_bus_r_payload_resp & {2{builder_bus_interconnect_slave_sel1[1]}})) | (builder_simsoc_r_payload_resp & {2{builder_bus_interconnect_slave_sel1[2]}}));
	case (builder_fsm1_state)
		1'd1: begin
			builder_bus_interconnect_r_payload_resp <= 2'd2;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	builder_bus_interconnect_r_payload_data <= 32'd0;
	builder_bus_interconnect_r_payload_data <= (((main_simsoc_r_payload_data & {32{builder_bus_interconnect_slave_sel1[0]}}) | (main_ram_bus_r_payload_data & {32{builder_bus_interconnect_slave_sel1[1]}})) | (builder_simsoc_r_payload_data & {32{builder_bus_interconnect_slave_sel1[2]}}));
	case (builder_fsm1_state)
		1'd1: begin
			builder_bus_interconnect_r_payload_data <= 32'd4294967295;
		end
		default: begin
		end
	endcase
end
assign builder_bus_interconnect_axiliterequestcounter0_full = (builder_bus_interconnect_axiliterequestcounter0_counter == 8'd255);
assign builder_bus_interconnect_axiliterequestcounter0_empty = (builder_bus_interconnect_axiliterequestcounter0_counter == 1'd0);
assign builder_bus_interconnect_axiliterequestcounter0_stall = ((builder_bus_interconnect_aw_valid & builder_bus_interconnect_aw_ready) & builder_bus_interconnect_axiliterequestcounter0_full);
assign builder_bus_interconnect_axiliterequestcounter1_full = (builder_bus_interconnect_axiliterequestcounter1_counter == 8'd255);
assign builder_bus_interconnect_axiliterequestcounter1_empty = (builder_bus_interconnect_axiliterequestcounter1_counter == 1'd0);
assign builder_bus_interconnect_axiliterequestcounter1_stall = ((builder_bus_interconnect_ar_valid & builder_bus_interconnect_ar_ready) & builder_bus_interconnect_axiliterequestcounter1_full);
assign builder_bus_interconnect_error = (builder_bus_interconnect_wr_error | builder_bus_interconnect_rd_error);
assign builder_bus_interconnect_wr_timer_done = (builder_bus_interconnect_wr_timer_count == 1'd0);
assign builder_bus_interconnect_rd_timer_done = (builder_bus_interconnect_rd_timer_count == 1'd0);
always @(*) begin
	builder_fsm0_next_state <= 1'd0;
	builder_fsm0_next_state <= builder_fsm0_state;
	case (builder_fsm0_state)
		1'd1: begin
			if ((builder_bus_interconnect_b_valid & builder_bus_interconnect_b_ready)) begin
				builder_fsm0_next_state <= 1'd0;
			end
		end
		default: begin
			if ((builder_bus_interconnect_wr_timer_done & builder_bus_interconnect_wr_timer_wait)) begin
				builder_fsm0_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	builder_bus_interconnect_wr_error <= 1'd0;
	case (builder_fsm0_state)
		1'd1: begin
		end
		default: begin
			if ((builder_bus_interconnect_wr_timer_done & builder_bus_interconnect_wr_timer_wait)) begin
				builder_bus_interconnect_wr_error <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	builder_bus_interconnect_wr_timer_wait <= 1'd0;
	case (builder_fsm0_state)
		1'd1: begin
		end
		default: begin
			builder_bus_interconnect_wr_timer_wait <= ((builder_bus_interconnect_aw_valid & (~builder_bus_interconnect_aw_ready)) | (builder_bus_interconnect_w_valid & (~builder_bus_interconnect_w_ready)));
		end
	endcase
end
always @(*) begin
	builder_fsm1_next_state <= 1'd0;
	builder_fsm1_next_state <= builder_fsm1_state;
	case (builder_fsm1_state)
		1'd1: begin
			if ((builder_bus_interconnect_r_valid & builder_bus_interconnect_r_ready)) begin
				builder_fsm1_next_state <= 1'd0;
			end
		end
		default: begin
			if ((builder_bus_interconnect_rd_timer_done & builder_bus_interconnect_rd_timer_wait)) begin
				builder_fsm1_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	builder_bus_interconnect_rd_timer_wait <= 1'd0;
	case (builder_fsm1_state)
		1'd1: begin
		end
		default: begin
			builder_bus_interconnect_rd_timer_wait <= (builder_bus_interconnect_ar_valid & (~builder_bus_interconnect_ar_ready));
		end
	endcase
end
always @(*) begin
	builder_bus_interconnect_rd_error <= 1'd0;
	case (builder_fsm1_state)
		1'd1: begin
		end
		default: begin
			if ((builder_bus_interconnect_rd_timer_done & builder_bus_interconnect_rd_timer_wait)) begin
				builder_bus_interconnect_rd_error <= 1'd1;
			end
		end
	endcase
end
assign builder_csr_bankarray_csrbank0_sel = (builder_csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign builder_csr_bankarray_csrbank0_reset0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank0_reset0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank0_reset0_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank0_reset0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank0_reset0_re <= builder_csr_bankarray_interface0_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank0_scratch0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank0_scratch0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank0_scratch0_re <= builder_csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank0_scratch0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank0_scratch0_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank0_bus_errors_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank0_bus_errors_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank0_bus_errors_re <= builder_csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	main_soc_rst <= 1'd0;
	if (main_reset_re) begin
		main_soc_rst <= main_reset_storage[0];
	end
end
assign main_cpu_rst = main_reset_storage[1];
assign builder_csr_bankarray_csrbank0_reset0_w = main_reset_storage[1:0];
assign builder_csr_bankarray_csrbank0_scratch0_w = main_scratch_storage[31:0];
assign builder_csr_bankarray_csrbank0_bus_errors_w = main_bus_errors_status[31:0];
assign main_bus_errors_we = builder_csr_bankarray_csrbank0_bus_errors_we;
assign builder_csr_bankarray_sel = (builder_csr_bankarray_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
	builder_csr_bankarray_sram_bus_dat_r <= 32'd0;
	if (builder_csr_bankarray_sel_r) begin
		builder_csr_bankarray_sram_bus_dat_r <= builder_csr_bankarray_dat_r;
	end
end
assign builder_csr_bankarray_adr = builder_csr_bankarray_sram_bus_adr[5:0];
assign builder_csr_bankarray_csrbank1_sel = (builder_csr_bankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign builder_csr_bankarray_csrbank1_load0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank1_load0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank1_load0_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_load0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank1_load0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank1_reload0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank1_reload0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank1_reload0_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_reload0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank1_reload0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank1_en0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank1_en0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank1_en0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_en0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank1_en0_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank1_update_value0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank1_update_value0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank1_update_value0_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_update_value0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank1_update_value0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank1_value_r = builder_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank1_value_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank1_value_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_value_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank1_value_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank1_ev_status_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank1_ev_status_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank1_ev_status_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_ev_status_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank1_ev_status_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank1_ev_pending_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank1_ev_pending_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank1_ev_pending_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_ev_pending_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank1_ev_pending_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank1_ev_enable0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank1_ev_enable0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csr_bankarray_csrbank1_ev_enable0_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_ev_enable0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csr_bankarray_csrbank1_ev_enable0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank1_uptime_latch0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank1_uptime_latch0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd8))) begin
		builder_csr_bankarray_csrbank1_uptime_latch0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_uptime_latch0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd8))) begin
		builder_csr_bankarray_csrbank1_uptime_latch0_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank1_uptime_cycles1_r = builder_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank1_uptime_cycles1_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd9))) begin
		builder_csr_bankarray_csrbank1_uptime_cycles1_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_uptime_cycles1_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd9))) begin
		builder_csr_bankarray_csrbank1_uptime_cycles1_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank1_uptime_cycles0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank1_uptime_cycles0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd10))) begin
		builder_csr_bankarray_csrbank1_uptime_cycles0_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_uptime_cycles0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd10))) begin
		builder_csr_bankarray_csrbank1_uptime_cycles0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank1_load0_w = main_timer_load_storage[31:0];
assign builder_csr_bankarray_csrbank1_reload0_w = main_timer_reload_storage[31:0];
assign builder_csr_bankarray_csrbank1_en0_w = main_timer_en_storage;
assign builder_csr_bankarray_csrbank1_update_value0_w = main_timer_update_value_storage;
assign builder_csr_bankarray_csrbank1_value_w = main_timer_value_status[31:0];
assign main_timer_value_we = builder_csr_bankarray_csrbank1_value_we;
assign main_timer_status_status = main_timer_zero0;
assign builder_csr_bankarray_csrbank1_ev_status_w = main_timer_status_status;
assign main_timer_status_we = builder_csr_bankarray_csrbank1_ev_status_we;
assign main_timer_pending_status = main_timer_zero1;
assign builder_csr_bankarray_csrbank1_ev_pending_w = main_timer_pending_status;
assign main_timer_pending_we = builder_csr_bankarray_csrbank1_ev_pending_we;
assign main_timer_zero2 = main_timer_enable_storage;
assign builder_csr_bankarray_csrbank1_ev_enable0_w = main_timer_enable_storage;
assign builder_csr_bankarray_csrbank1_uptime_latch0_w = main_uptime_latch_storage;
assign builder_csr_bankarray_csrbank1_uptime_cycles1_w = main_uptime_cycles_status[63:32];
assign builder_csr_bankarray_csrbank1_uptime_cycles0_w = main_uptime_cycles_status[31:0];
assign main_uptime_cycles_we = builder_csr_bankarray_csrbank1_uptime_cycles0_we;
assign builder_csr_bankarray_csrbank2_sel = (builder_csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign main_uart_rxtx_r = builder_csr_bankarray_interface2_bank_bus_dat_w[7:0];
always @(*) begin
	main_uart_rxtx_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
		main_uart_rxtx_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	main_uart_rxtx_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
		main_uart_rxtx_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank2_txfull_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_txfull_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank2_txfull_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank2_txfull_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank2_txfull_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_rxempty_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_rxempty_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank2_rxempty_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank2_rxempty_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank2_rxempty_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_ev_status_r = builder_csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_status_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank2_ev_status_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_status_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank2_ev_status_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank2_ev_pending_r = builder_csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_pending_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank2_ev_pending_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_pending_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank2_ev_pending_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank2_ev_enable0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_enable0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank2_ev_enable0_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_enable0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank2_ev_enable0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_txempty_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_txempty_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank2_txempty_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank2_txempty_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank2_txempty_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank2_rxfull_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_rxfull_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csr_bankarray_csrbank2_rxfull_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank2_rxfull_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csr_bankarray_csrbank2_rxfull_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank2_txfull_w = main_uart_txfull_status;
assign main_uart_txfull_we = builder_csr_bankarray_csrbank2_txfull_we;
assign builder_csr_bankarray_csrbank2_rxempty_w = main_uart_rxempty_status;
assign main_uart_rxempty_we = builder_csr_bankarray_csrbank2_rxempty_we;
always @(*) begin
	main_uart_status_status <= 2'd0;
	main_uart_status_status[0] <= main_uart_tx0;
	main_uart_status_status[1] <= main_uart_rx0;
end
assign builder_csr_bankarray_csrbank2_ev_status_w = main_uart_status_status[1:0];
assign main_uart_status_we = builder_csr_bankarray_csrbank2_ev_status_we;
always @(*) begin
	main_uart_pending_status <= 2'd0;
	main_uart_pending_status[0] <= main_uart_tx1;
	main_uart_pending_status[1] <= main_uart_rx1;
end
assign builder_csr_bankarray_csrbank2_ev_pending_w = main_uart_pending_status[1:0];
assign main_uart_pending_we = builder_csr_bankarray_csrbank2_ev_pending_we;
assign main_uart_tx2 = main_uart_enable_storage[0];
assign main_uart_rx2 = main_uart_enable_storage[1];
assign builder_csr_bankarray_csrbank2_ev_enable0_w = main_uart_enable_storage[1:0];
assign builder_csr_bankarray_csrbank2_txempty_w = main_uart_txempty_status;
assign main_uart_txempty_we = builder_csr_bankarray_csrbank2_txempty_we;
assign builder_csr_bankarray_csrbank2_rxfull_w = main_uart_rxfull_status;
assign main_uart_rxfull_we = builder_csr_bankarray_csrbank2_rxfull_we;
assign builder_csr_interconnect_adr = builder_simsoc_adr;
assign builder_csr_interconnect_we = builder_simsoc_we;
assign builder_csr_interconnect_dat_w = builder_simsoc_dat_w;
assign builder_simsoc_dat_r = builder_csr_interconnect_dat_r;
assign builder_csr_bankarray_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_sram_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_sram_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_sram_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = (((builder_csr_bankarray_interface0_bank_bus_dat_r | builder_csr_bankarray_interface1_bank_bus_dat_r) | builder_csr_bankarray_interface2_bank_bus_dat_r) | builder_csr_bankarray_sram_bus_dat_r);
assign builder_slice_proxy0 = builder_bus_interconnect_aw_payload_addr[31:2];
assign builder_slice_proxy1 = builder_bus_interconnect_ar_payload_addr[31:2];
assign builder_slice_proxy2 = builder_bus_interconnect_aw_payload_addr[31:2];
assign builder_slice_proxy3 = builder_bus_interconnect_ar_payload_addr[31:2];
assign builder_slice_proxy4 = builder_bus_interconnect_aw_payload_addr[31:2];
assign builder_slice_proxy5 = builder_bus_interconnect_ar_payload_addr[31:2];
always @(*) begin
	builder_array_muxed0 <= 1'd0;
	case (builder_bus_interconnect_rr_write_grant)
		default: begin
			builder_array_muxed0 <= main_socbushandler_aw_valid;
		end
	endcase
end
always @(*) begin
	builder_array_muxed1 <= 1'd0;
	case (builder_bus_interconnect_rr_write_grant)
		default: begin
			builder_array_muxed1 <= main_socbushandler_aw_first;
		end
	endcase
end
always @(*) begin
	builder_array_muxed2 <= 1'd0;
	case (builder_bus_interconnect_rr_write_grant)
		default: begin
			builder_array_muxed2 <= main_socbushandler_aw_last;
		end
	endcase
end
always @(*) begin
	builder_array_muxed3 <= 32'd0;
	case (builder_bus_interconnect_rr_write_grant)
		default: begin
			builder_array_muxed3 <= main_socbushandler_aw_payload_addr;
		end
	endcase
end
always @(*) begin
	builder_array_muxed4 <= 1'd0;
	case (builder_bus_interconnect_rr_write_grant)
		default: begin
			builder_array_muxed4 <= main_socbushandler_w_valid;
		end
	endcase
end
always @(*) begin
	builder_array_muxed5 <= 1'd0;
	case (builder_bus_interconnect_rr_write_grant)
		default: begin
			builder_array_muxed5 <= main_socbushandler_w_first;
		end
	endcase
end
always @(*) begin
	builder_array_muxed6 <= 1'd0;
	case (builder_bus_interconnect_rr_write_grant)
		default: begin
			builder_array_muxed6 <= main_socbushandler_w_last;
		end
	endcase
end
always @(*) begin
	builder_array_muxed7 <= 32'd0;
	case (builder_bus_interconnect_rr_write_grant)
		default: begin
			builder_array_muxed7 <= main_socbushandler_w_payload_data;
		end
	endcase
end
always @(*) begin
	builder_array_muxed8 <= 4'd0;
	case (builder_bus_interconnect_rr_write_grant)
		default: begin
			builder_array_muxed8 <= main_socbushandler_w_payload_strb;
		end
	endcase
end
always @(*) begin
	builder_array_muxed9 <= 1'd0;
	case (builder_bus_interconnect_rr_write_grant)
		default: begin
			builder_array_muxed9 <= main_socbushandler_b_ready;
		end
	endcase
end
always @(*) begin
	builder_array_muxed10 <= 1'd0;
	case (builder_bus_interconnect_rr_read_grant)
		default: begin
			builder_array_muxed10 <= main_socbushandler_ar_valid;
		end
	endcase
end
always @(*) begin
	builder_array_muxed11 <= 1'd0;
	case (builder_bus_interconnect_rr_read_grant)
		default: begin
			builder_array_muxed11 <= main_socbushandler_ar_first;
		end
	endcase
end
always @(*) begin
	builder_array_muxed12 <= 1'd0;
	case (builder_bus_interconnect_rr_read_grant)
		default: begin
			builder_array_muxed12 <= main_socbushandler_ar_last;
		end
	endcase
end
always @(*) begin
	builder_array_muxed13 <= 32'd0;
	case (builder_bus_interconnect_rr_read_grant)
		default: begin
			builder_array_muxed13 <= main_socbushandler_ar_payload_addr;
		end
	endcase
end
always @(*) begin
	builder_array_muxed14 <= 1'd0;
	case (builder_bus_interconnect_rr_read_grant)
		default: begin
			builder_array_muxed14 <= main_socbushandler_r_ready;
		end
	endcase
end


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
	main_int_rst <= 1'd0;
end

always @(posedge sys_clk_1) begin
	builder_socbushandler_state <= builder_socbushandler_next_state;
	if (main_socbushandler_cmd_done_socbushandler_next_value_ce0) begin
		main_socbushandler_cmd_done <= main_socbushandler_cmd_done_socbushandler_next_value0;
	end
	if (main_socbushandler_data_done_socbushandler_next_value_ce1) begin
		main_socbushandler_data_done <= main_socbushandler_data_done_socbushandler_next_value1;
	end
	if ((main_bus_errors != 32'd4294967295)) begin
		if (main_bus_error) begin
			main_bus_errors <= (main_bus_errors + 1'd1);
		end
	end
	builder_axilitesram0_state <= builder_axilitesram0_next_state;
	if (main_simsoc_last_was_read_axilitesram0_next_value_ce) begin
		main_simsoc_last_was_read <= main_simsoc_last_was_read_axilitesram0_next_value;
	end
	builder_axilitesram1_state <= builder_axilitesram1_next_state;
	if (main_ram_last_was_read_axilitesram1_next_value_ce) begin
		main_ram_last_was_read <= main_ram_last_was_read_axilitesram1_next_value;
	end
	if (main_uart_tx_clear) begin
		main_uart_tx_pending <= 1'd0;
	end
	main_uart_tx_trigger_d <= main_uart_tx_trigger;
	if ((main_uart_tx_trigger & (~main_uart_tx_trigger_d))) begin
		main_uart_tx_pending <= 1'd1;
	end
	if (main_uart_rx_clear) begin
		main_uart_rx_pending <= 1'd0;
	end
	main_uart_rx_trigger_d <= main_uart_rx_trigger;
	if ((main_uart_rx_trigger & (~main_uart_rx_trigger_d))) begin
		main_uart_rx_pending <= 1'd1;
	end
	if (main_uart_tx_fifo_syncfifo_re) begin
		main_uart_tx_fifo_readable <= 1'd1;
	end else begin
		if (main_uart_tx_fifo_re) begin
			main_uart_tx_fifo_readable <= 1'd0;
		end
	end
	if (((main_uart_tx_fifo_syncfifo_we & main_uart_tx_fifo_syncfifo_writable) & (~main_uart_tx_fifo_replace))) begin
		main_uart_tx_fifo_produce <= (main_uart_tx_fifo_produce + 1'd1);
	end
	if (main_uart_tx_fifo_do_read) begin
		main_uart_tx_fifo_consume <= (main_uart_tx_fifo_consume + 1'd1);
	end
	if (((main_uart_tx_fifo_syncfifo_we & main_uart_tx_fifo_syncfifo_writable) & (~main_uart_tx_fifo_replace))) begin
		if ((~main_uart_tx_fifo_do_read)) begin
			main_uart_tx_fifo_level0 <= (main_uart_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (main_uart_tx_fifo_do_read) begin
			main_uart_tx_fifo_level0 <= (main_uart_tx_fifo_level0 - 1'd1);
		end
	end
	if (main_uart_rx_fifo_syncfifo_re) begin
		main_uart_rx_fifo_readable <= 1'd1;
	end else begin
		if (main_uart_rx_fifo_re) begin
			main_uart_rx_fifo_readable <= 1'd0;
		end
	end
	if (((main_uart_rx_fifo_syncfifo_we & main_uart_rx_fifo_syncfifo_writable) & (~main_uart_rx_fifo_replace))) begin
		main_uart_rx_fifo_produce <= (main_uart_rx_fifo_produce + 1'd1);
	end
	if (main_uart_rx_fifo_do_read) begin
		main_uart_rx_fifo_consume <= (main_uart_rx_fifo_consume + 1'd1);
	end
	if (((main_uart_rx_fifo_syncfifo_we & main_uart_rx_fifo_syncfifo_writable) & (~main_uart_rx_fifo_replace))) begin
		if ((~main_uart_rx_fifo_do_read)) begin
			main_uart_rx_fifo_level0 <= (main_uart_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (main_uart_rx_fifo_do_read) begin
			main_uart_rx_fifo_level0 <= (main_uart_rx_fifo_level0 - 1'd1);
		end
	end
	if (main_timer_en_storage) begin
		if ((main_timer_value == 1'd0)) begin
			main_timer_value <= main_timer_reload_storage;
		end else begin
			main_timer_value <= (main_timer_value - 1'd1);
		end
	end else begin
		main_timer_value <= main_timer_load_storage;
	end
	if (main_timer_update_value_re) begin
		main_timer_value_status <= main_timer_value;
	end
	main_uptime_cycles <= (main_uptime_cycles + 1'd1);
	if (main_uptime_latch_re) begin
		main_uptime_cycles_status <= main_uptime_cycles;
	end
	if (main_timer_zero_clear) begin
		main_timer_zero_pending <= 1'd0;
	end
	main_timer_zero_trigger_d <= main_timer_zero_trigger;
	if ((main_timer_zero_trigger & (~main_timer_zero_trigger_d))) begin
		main_timer_zero_pending <= 1'd1;
	end
	builder_state <= builder_next_state;
	if (builder_simsoc_last_was_read_next_value_ce) begin
		builder_simsoc_last_was_read <= builder_simsoc_last_was_read_next_value;
	end
	if (((builder_bus_interconnect_aw_valid & builder_bus_interconnect_aw_ready) & (builder_bus_interconnect_b_valid & builder_bus_interconnect_b_ready))) begin
		builder_bus_interconnect_wr_lock_counter <= builder_bus_interconnect_wr_lock_counter;
	end else begin
		if (((builder_bus_interconnect_aw_valid & builder_bus_interconnect_aw_ready) & (~builder_bus_interconnect_wr_lock_full))) begin
			builder_bus_interconnect_wr_lock_counter <= (builder_bus_interconnect_wr_lock_counter + 1'd1);
		end else begin
			if (((builder_bus_interconnect_b_valid & builder_bus_interconnect_b_ready) & (~builder_bus_interconnect_wr_lock_empty))) begin
				builder_bus_interconnect_wr_lock_counter <= (builder_bus_interconnect_wr_lock_counter - 1'd1);
			end
		end
	end
	if (((builder_bus_interconnect_ar_valid & builder_bus_interconnect_ar_ready) & (builder_bus_interconnect_r_valid & builder_bus_interconnect_r_ready))) begin
		builder_bus_interconnect_rd_lock_counter <= builder_bus_interconnect_rd_lock_counter;
	end else begin
		if (((builder_bus_interconnect_ar_valid & builder_bus_interconnect_ar_ready) & (~builder_bus_interconnect_rd_lock_full))) begin
			builder_bus_interconnect_rd_lock_counter <= (builder_bus_interconnect_rd_lock_counter + 1'd1);
		end else begin
			if (((builder_bus_interconnect_r_valid & builder_bus_interconnect_r_ready) & (~builder_bus_interconnect_rd_lock_empty))) begin
				builder_bus_interconnect_rd_lock_counter <= (builder_bus_interconnect_rd_lock_counter - 1'd1);
			end
		end
	end
	if (builder_bus_interconnect_axiliterequestcounter0_empty) begin
		builder_bus_interconnect_slave_sel_reg0 <= builder_bus_interconnect_slave_sel_dec0;
	end
	if (builder_bus_interconnect_axiliterequestcounter1_empty) begin
		builder_bus_interconnect_slave_sel_reg1 <= builder_bus_interconnect_slave_sel_dec1;
	end
	if (((builder_bus_interconnect_aw_valid & builder_bus_interconnect_aw_ready) & (builder_bus_interconnect_b_valid & builder_bus_interconnect_b_ready))) begin
		builder_bus_interconnect_axiliterequestcounter0_counter <= builder_bus_interconnect_axiliterequestcounter0_counter;
	end else begin
		if (((builder_bus_interconnect_aw_valid & builder_bus_interconnect_aw_ready) & (~builder_bus_interconnect_axiliterequestcounter0_full))) begin
			builder_bus_interconnect_axiliterequestcounter0_counter <= (builder_bus_interconnect_axiliterequestcounter0_counter + 1'd1);
		end else begin
			if (((builder_bus_interconnect_b_valid & builder_bus_interconnect_b_ready) & (~builder_bus_interconnect_axiliterequestcounter0_empty))) begin
				builder_bus_interconnect_axiliterequestcounter0_counter <= (builder_bus_interconnect_axiliterequestcounter0_counter - 1'd1);
			end
		end
	end
	if (((builder_bus_interconnect_ar_valid & builder_bus_interconnect_ar_ready) & (builder_bus_interconnect_r_valid & builder_bus_interconnect_r_ready))) begin
		builder_bus_interconnect_axiliterequestcounter1_counter <= builder_bus_interconnect_axiliterequestcounter1_counter;
	end else begin
		if (((builder_bus_interconnect_ar_valid & builder_bus_interconnect_ar_ready) & (~builder_bus_interconnect_axiliterequestcounter1_full))) begin
			builder_bus_interconnect_axiliterequestcounter1_counter <= (builder_bus_interconnect_axiliterequestcounter1_counter + 1'd1);
		end else begin
			if (((builder_bus_interconnect_r_valid & builder_bus_interconnect_r_ready) & (~builder_bus_interconnect_axiliterequestcounter1_empty))) begin
				builder_bus_interconnect_axiliterequestcounter1_counter <= (builder_bus_interconnect_axiliterequestcounter1_counter - 1'd1);
			end
		end
	end
	if (builder_bus_interconnect_wr_timer_wait) begin
		if ((~builder_bus_interconnect_wr_timer_done)) begin
			builder_bus_interconnect_wr_timer_count <= (builder_bus_interconnect_wr_timer_count - 1'd1);
		end
	end else begin
		builder_bus_interconnect_wr_timer_count <= 20'd1000000;
	end
	if (builder_bus_interconnect_rd_timer_wait) begin
		if ((~builder_bus_interconnect_rd_timer_done)) begin
			builder_bus_interconnect_rd_timer_count <= (builder_bus_interconnect_rd_timer_count - 1'd1);
		end
	end else begin
		builder_bus_interconnect_rd_timer_count <= 20'd1000000;
	end
	builder_fsm0_state <= builder_fsm0_next_state;
	builder_fsm1_state <= builder_fsm1_next_state;
	builder_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank0_sel) begin
		case (builder_csr_bankarray_interface0_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_reset0_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_scratch0_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_bus_errors_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank0_reset0_re) begin
		main_reset_storage[1:0] <= builder_csr_bankarray_csrbank0_reset0_r;
	end
	main_reset_re <= builder_csr_bankarray_csrbank0_reset0_re;
	if (builder_csr_bankarray_csrbank0_scratch0_re) begin
		main_scratch_storage[31:0] <= builder_csr_bankarray_csrbank0_scratch0_r;
	end
	main_scratch_re <= builder_csr_bankarray_csrbank0_scratch0_re;
	main_bus_errors_re <= builder_csr_bankarray_csrbank0_bus_errors_re;
	builder_csr_bankarray_sel_r <= builder_csr_bankarray_sel;
	builder_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank1_sel) begin
		case (builder_csr_bankarray_interface1_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_load0_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_reload0_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_en0_w;
			end
			2'd3: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_update_value0_w;
			end
			3'd4: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_value_w;
			end
			3'd5: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_ev_status_w;
			end
			3'd6: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_ev_pending_w;
			end
			3'd7: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_ev_enable0_w;
			end
			4'd8: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_uptime_latch0_w;
			end
			4'd9: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_uptime_cycles1_w;
			end
			4'd10: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_uptime_cycles0_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank1_load0_re) begin
		main_timer_load_storage[31:0] <= builder_csr_bankarray_csrbank1_load0_r;
	end
	main_timer_load_re <= builder_csr_bankarray_csrbank1_load0_re;
	if (builder_csr_bankarray_csrbank1_reload0_re) begin
		main_timer_reload_storage[31:0] <= builder_csr_bankarray_csrbank1_reload0_r;
	end
	main_timer_reload_re <= builder_csr_bankarray_csrbank1_reload0_re;
	if (builder_csr_bankarray_csrbank1_en0_re) begin
		main_timer_en_storage <= builder_csr_bankarray_csrbank1_en0_r;
	end
	main_timer_en_re <= builder_csr_bankarray_csrbank1_en0_re;
	if (builder_csr_bankarray_csrbank1_update_value0_re) begin
		main_timer_update_value_storage <= builder_csr_bankarray_csrbank1_update_value0_r;
	end
	main_timer_update_value_re <= builder_csr_bankarray_csrbank1_update_value0_re;
	main_timer_value_re <= builder_csr_bankarray_csrbank1_value_re;
	main_timer_status_re <= builder_csr_bankarray_csrbank1_ev_status_re;
	if (builder_csr_bankarray_csrbank1_ev_pending_re) begin
		main_timer_pending_r <= builder_csr_bankarray_csrbank1_ev_pending_r;
	end
	main_timer_pending_re <= builder_csr_bankarray_csrbank1_ev_pending_re;
	if (builder_csr_bankarray_csrbank1_ev_enable0_re) begin
		main_timer_enable_storage <= builder_csr_bankarray_csrbank1_ev_enable0_r;
	end
	main_timer_enable_re <= builder_csr_bankarray_csrbank1_ev_enable0_re;
	if (builder_csr_bankarray_csrbank1_uptime_latch0_re) begin
		main_uptime_latch_storage <= builder_csr_bankarray_csrbank1_uptime_latch0_r;
	end
	main_uptime_latch_re <= builder_csr_bankarray_csrbank1_uptime_latch0_re;
	main_uptime_cycles_re <= builder_csr_bankarray_csrbank1_uptime_cycles0_re;
	builder_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank2_sel) begin
		case (builder_csr_bankarray_interface2_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= main_uart_rxtx_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_txfull_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_rxempty_w;
			end
			2'd3: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_status_w;
			end
			3'd4: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_pending_w;
			end
			3'd5: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_enable0_w;
			end
			3'd6: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_txempty_w;
			end
			3'd7: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_rxfull_w;
			end
		endcase
	end
	main_uart_txfull_re <= builder_csr_bankarray_csrbank2_txfull_re;
	main_uart_rxempty_re <= builder_csr_bankarray_csrbank2_rxempty_re;
	main_uart_status_re <= builder_csr_bankarray_csrbank2_ev_status_re;
	if (builder_csr_bankarray_csrbank2_ev_pending_re) begin
		main_uart_pending_r[1:0] <= builder_csr_bankarray_csrbank2_ev_pending_r;
	end
	main_uart_pending_re <= builder_csr_bankarray_csrbank2_ev_pending_re;
	if (builder_csr_bankarray_csrbank2_ev_enable0_re) begin
		main_uart_enable_storage[1:0] <= builder_csr_bankarray_csrbank2_ev_enable0_r;
	end
	main_uart_enable_re <= builder_csr_bankarray_csrbank2_ev_enable0_re;
	main_uart_txempty_re <= builder_csr_bankarray_csrbank2_txempty_re;
	main_uart_rxfull_re <= builder_csr_bankarray_csrbank2_rxfull_re;
	if (sys_rst) begin
		main_reset_storage <= 2'd0;
		main_reset_re <= 1'd0;
		main_scratch_storage <= 32'd305419896;
		main_scratch_re <= 1'd0;
		main_bus_errors_re <= 1'd0;
		main_bus_errors <= 32'd0;
		main_socbushandler_cmd_done <= 1'd0;
		main_socbushandler_data_done <= 1'd0;
		main_simsoc_last_was_read <= 1'd0;
		main_ram_last_was_read <= 1'd0;
		main_uart_txfull_re <= 1'd0;
		main_uart_rxempty_re <= 1'd0;
		main_uart_tx_pending <= 1'd0;
		main_uart_tx_trigger_d <= 1'd0;
		main_uart_rx_pending <= 1'd0;
		main_uart_rx_trigger_d <= 1'd0;
		main_uart_status_re <= 1'd0;
		main_uart_pending_re <= 1'd0;
		main_uart_pending_r <= 2'd0;
		main_uart_enable_storage <= 2'd0;
		main_uart_enable_re <= 1'd0;
		main_uart_txempty_re <= 1'd0;
		main_uart_rxfull_re <= 1'd0;
		main_uart_tx_fifo_readable <= 1'd0;
		main_uart_tx_fifo_level0 <= 5'd0;
		main_uart_tx_fifo_produce <= 4'd0;
		main_uart_tx_fifo_consume <= 4'd0;
		main_uart_rx_fifo_readable <= 1'd0;
		main_uart_rx_fifo_level0 <= 5'd0;
		main_uart_rx_fifo_produce <= 4'd0;
		main_uart_rx_fifo_consume <= 4'd0;
		main_timer_load_storage <= 32'd0;
		main_timer_load_re <= 1'd0;
		main_timer_reload_storage <= 32'd0;
		main_timer_reload_re <= 1'd0;
		main_timer_en_storage <= 1'd0;
		main_timer_en_re <= 1'd0;
		main_timer_update_value_storage <= 1'd0;
		main_timer_update_value_re <= 1'd0;
		main_timer_value_status <= 32'd0;
		main_timer_value_re <= 1'd0;
		main_timer_zero_pending <= 1'd0;
		main_timer_zero_trigger_d <= 1'd0;
		main_timer_status_re <= 1'd0;
		main_timer_pending_re <= 1'd0;
		main_timer_pending_r <= 1'd0;
		main_timer_enable_storage <= 1'd0;
		main_timer_enable_re <= 1'd0;
		main_timer_value <= 32'd0;
		main_uptime_latch_storage <= 1'd0;
		main_uptime_latch_re <= 1'd0;
		main_uptime_cycles_status <= 64'd0;
		main_uptime_cycles_re <= 1'd0;
		builder_socbushandler_state <= 2'd0;
		builder_axilitesram0_state <= 2'd0;
		builder_axilitesram1_state <= 2'd0;
		builder_simsoc_last_was_read <= 1'd0;
		builder_bus_interconnect_wr_lock_counter <= 8'd0;
		builder_bus_interconnect_rd_lock_counter <= 8'd0;
		builder_bus_interconnect_slave_sel_reg0 <= 3'd0;
		builder_bus_interconnect_slave_sel_reg1 <= 3'd0;
		builder_bus_interconnect_axiliterequestcounter0_counter <= 8'd0;
		builder_bus_interconnect_axiliterequestcounter1_counter <= 8'd0;
		builder_bus_interconnect_wr_timer_count <= 20'd1000000;
		builder_bus_interconnect_rd_timer_count <= 20'd1000000;
		builder_csr_bankarray_sel_r <= 1'd0;
		builder_state <= 2'd0;
		builder_fsm0_state <= 1'd0;
		builder_fsm1_state <= 1'd0;
	end
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory mem: 5431-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] mem[0:5430];
initial begin
	$readmemh("mem.init", mem);
end
reg [31:0] mem_dat0;
always @(posedge sys_clk_1) begin
	mem_dat0 <= mem[main_simsoc_adr];
end
assign main_simsoc_dat_r = mem_dat0;


//------------------------------------------------------------------------------
// Memory mem_1: 875-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] mem_1[0:874];
initial begin
	$readmemh("mem_1.init", mem_1);
end
reg [9:0] mem_1_adr0;
always @(posedge sys_clk_1) begin
	if (main_ram_we[0])
		mem_1[main_ram_adr][7:0] <= main_ram_dat_w[7:0];
	if (main_ram_we[1])
		mem_1[main_ram_adr][15:8] <= main_ram_dat_w[15:8];
	if (main_ram_we[2])
		mem_1[main_ram_adr][23:16] <= main_ram_dat_w[23:16];
	if (main_ram_we[3])
		mem_1[main_ram_adr][31:24] <= main_ram_dat_w[31:24];
	mem_1_adr0 <= main_ram_adr;
end
assign main_ram_dat_r = mem_1[mem_1_adr0];


//------------------------------------------------------------------------------
// Memory mem_2: 37-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem_2[0:36];
initial begin
	$readmemh("mem_2.init", mem_2);
end
reg [5:0] mem_2_adr0;
always @(posedge sys_clk_1) begin
	mem_2_adr0 <= builder_csr_bankarray_adr;
end
assign builder_csr_bankarray_dat_r = mem_2[mem_2_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk_1) begin
	if (main_uart_tx_fifo_wrport_we)
		storage[main_uart_tx_fifo_wrport_adr] <= main_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[main_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (main_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[main_uart_tx_fifo_rdport_adr];
end
assign main_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign main_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk_1) begin
	if (main_uart_rx_fifo_wrport_we)
		storage_1[main_uart_rx_fifo_wrport_adr] <= main_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[main_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (main_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[main_uart_rx_fifo_rdport_adr];
end
assign main_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign main_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


picorv32 #(
	.CATCH_ILLINSN(1'd1),
	.CATCH_MISALIGN(1'd1),
	.ENABLE_COUNTERS(1'd1),
	.ENABLE_COUNTERS64(1'd1),
	.ENABLE_DIV(1'd1),
	.ENABLE_FAST_MUL(1'd0),
	.ENABLE_IRQ(1'd1),
	.ENABLE_IRQ_QREGS(1'd1),
	.ENABLE_IRQ_TIMER(1'd1),
	.ENABLE_MUL(1'd1),
	.ENABLE_PCPI(1'd0),
	.ENABLE_REGS_16_31(1'd1),
	.ENABLE_REGS_DUALPORT(1'd1),
	.ENABLE_TRACE(1'd0),
	.LATCHED_IRQ(32'd4294967295),
	.LATCHED_MEM_RDATA(1'd0),
	.MASKED_IRQ(1'd0),
	.PROGADDR_IRQ(5'd16),
	.PROGADDR_RESET(1'd0),
	.STACKADDR(32'd4294967295),
	.TWO_CYCLE_ALU(1'd0),
	.TWO_CYCLE_COMPARE(1'd0),
	.TWO_STAGE_SHIFT(1'd1)
) picorv32 (
	.clk(sys_clk_1),
	.irq(main_picorv32_interrupt),
	.mem_rdata(main_picorv32_mem_rdata),
	.mem_ready(main_picorv32_mem_ready),
	.pcpi_rd(1'd0),
	.pcpi_ready(1'd0),
	.pcpi_wait(1'd0),
	.pcpi_wr(1'd0),
	.resetn((~(sys_rst | main_picorv32_reset))),
	.eoi(main_picorv329),
	.mem_addr(main_picorv32_mem_addr),
	.mem_instr(main_picorv32_mem_instr),
	.mem_la_addr(main_picorv322),
	.mem_la_read(main_picorv320),
	.mem_la_wdata(main_picorv323),
	.mem_la_write(main_picorv321),
	.mem_la_wstrb(main_picorv324),
	.mem_valid(main_picorv32_mem_valid),
	.mem_wdata(main_picorv32_mem_wdata),
	.mem_wstrb(main_picorv32_mem_wstrb),
	.pcpi_insn(main_picorv326),
	.pcpi_rs1(main_picorv327),
	.pcpi_rs2(main_picorv328),
	.pcpi_valid(main_picorv325),
	.trap(main_picorv32_trap)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2022-02-04 11:59:11.
//------------------------------------------------------------------------------
