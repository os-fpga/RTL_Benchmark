//
//  Copyright (c) 2003 Launchbird Design Systems, Inc.
//  All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//    Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
//    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
//  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
//  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
//  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  
//  Overview:
//  
//    Performs finite impulse response (FIR) filtering.
//    The filter's sum of products is pipelined with a register after
//    every multiplier and adder.  The adder network is a balanced binary
//    tree to minimize latency.  The sum of products has no numeric loss because the
//    multipliers keep all resulting bits and each adder extends the precision by 1.
//  
//  Interface:
//  
//    Synchronization:
//      clock_c  : Clock input.
//      reset_i  : Filter delay bank synchronous reset.  Does not reset sum of products pipeline registers.
//  
//    Inputs:
//      data_i  : Input data.
//      k0_i    : Coefficient 0 multiplied by in_i(0).
//      k1_i    : Coefficient 1 multiplied by in_i(k-1).
//      k2_i    : Coefficient 2 multiplied by in_i(k-2).
//      ...
//      k<order>_i : Coefficient <order> multiplied by in_i(k-<order>).
//  
//    Outputs:
//      data_o : Output data.
//  
//  Built In Parameters:
//  
//    Filter Order             = 16
//    Input Precision          = 16
//    Coefficient Precision    = 16
//    Sum of Products Latency  = 6
//  
//  
//  
//  
//  Generated by Confluence 0.6.3  --  Launchbird Design Systems, Inc.  --  www.launchbird.com
//  
//  Build Date : Fri Aug 22 09:45:53 CDT 2003
//  
//  Interface
//  
//    Build Name    : cf_fir_16_16_16
//    Clock Domains : clock_c  
//    Vector Input  : reset_i(1)
//    Vector Input  : data_i(16)
//    Vector Input  : k0_i(16)
//    Vector Input  : k1_i(16)
//    Vector Input  : k2_i(16)
//    Vector Input  : k3_i(16)
//    Vector Input  : k4_i(16)
//    Vector Input  : k5_i(16)
//    Vector Input  : k6_i(16)
//    Vector Input  : k7_i(16)
//    Vector Input  : k8_i(16)
//    Vector Input  : k9_i(16)
//    Vector Input  : k10_i(16)
//    Vector Input  : k11_i(16)
//    Vector Input  : k12_i(16)
//    Vector Input  : k13_i(16)
//    Vector Input  : k14_i(16)
//    Vector Input  : k15_i(16)
//    Vector Input  : k16_i(16)
//    Vector Output : data_o(37)
//  
//  
//  

`timescale 1 ns / 1 ns

module cf_fir_16_16_16 (clock_c, reset_i, data_i, k0_i, k1_i, k2_i, k3_i, k4_i, k5_i, k6_i, k7_i, k8_i, k9_i, k10_i, k11_i, k12_i, k13_i, k14_i, k15_i, k16_i, data_o);
input  clock_c;
input  reset_i;
input  [15:0] data_i;
input  [15:0] k0_i;
input  [15:0] k1_i;
input  [15:0] k2_i;
input  [15:0] k3_i;
input  [15:0] k4_i;
input  [15:0] k5_i;
input  [15:0] k6_i;
input  [15:0] k7_i;
input  [15:0] k8_i;
input  [15:0] k9_i;
input  [15:0] k10_i;
input  [15:0] k11_i;
input  [15:0] k12_i;
input  [15:0] k13_i;
input  [15:0] k14_i;
input  [15:0] k15_i;
input  [15:0] k16_i;
output [36:0] data_o;
wire   [36:0] n1;
cf_fir_16_16_16_1 s1 (clock_c, reset_i, k0_i, k1_i, k2_i, k3_i, k4_i, k5_i, k6_i, k7_i, k8_i, k9_i, k10_i, k11_i, k12_i, k13_i, k14_i, k15_i, k16_i, data_i, n1);
assign data_o = n1;
endmodule

module cf_fir_16_16_16_1 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, o1);
input  clock_c;
input  i1;
input  [15:0] i2;
input  [15:0] i3;
input  [15:0] i4;
input  [15:0] i5;
input  [15:0] i6;
input  [15:0] i7;
input  [15:0] i8;
input  [15:0] i9;
input  [15:0] i10;
input  [15:0] i11;
input  [15:0] i12;
input  [15:0] i13;
input  [15:0] i14;
input  [15:0] i15;
input  [15:0] i16;
input  [15:0] i17;
input  [15:0] i18;
input  [15:0] i19;
output [36:0] o1;
wire   n1;
wire   n2;
reg    [15:0] n3;
reg    [15:0] n4;
wire   [31:0] n5;
reg    [31:0] n6;
wire   [31:0] s7_1;
wire   [31:0] s7_2;
wire   [31:0] s7_3;
wire   [31:0] s7_4;
wire   [31:0] s7_5;
wire   [31:0] s7_6;
wire   [31:0] s7_7;
wire   [31:0] s7_8;
wire   [31:0] s7_9;
wire   [31:0] s7_10;
wire   [31:0] s7_11;
wire   [31:0] s7_12;
wire   [31:0] s7_13;
wire   [31:0] s7_14;
wire   [31:0] s7_15;
wire   [31:0] s7_16;
wire   [15:0] s8_1;
wire   [15:0] s8_2;
wire   [15:0] s8_3;
wire   [15:0] s8_4;
wire   [15:0] s8_5;
wire   [15:0] s8_6;
wire   [15:0] s8_7;
wire   [15:0] s8_8;
wire   [15:0] s8_9;
wire   [15:0] s8_10;
wire   [15:0] s8_11;
wire   [15:0] s8_12;
wire   [15:0] s8_13;
wire   [15:0] s8_14;
wire   [15:0] s8_15;
wire   [36:0] s9_1;
assign n1 = 1'b1;
assign n2 = 1'b0;
initial n3 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i1 == 1'b1)
    n3 <= 16'b0000000000000000;
  else if (n1 == 1'b1)
    n3 <= i19;
initial n4 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i1 == 1'b1)
    n4 <= 16'b0000000000000000;
  else if (n1 == 1'b1)
    n4 <= n3;
assign n5 = {{16{1'b0}}, i2} * {{16{1'b0}}, n3};
initial n6 = 32'b00000000000000000000000000000000;
always @ (posedge clock_c)
  if (n2 == 1'b1)
    n6 <= 32'b00000000000000000000000000000000;
  else if (n1 == 1'b1)
    n6 <= n5;
cf_fir_16_16_16_15 s7 (clock_c, n1, n2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, n4, s8_1, s8_2, s8_3, s8_4, s8_5, s8_6, s8_7, s8_8, s8_9, s8_10, s8_11, s8_12, s8_13, s8_14, s8_15, s7_1, s7_2, s7_3, s7_4, s7_5, s7_6, s7_7, s7_8, s7_9, s7_10, s7_11, s7_12, s7_13, s7_14, s7_15, s7_16);
cf_fir_16_16_16_13 s8 (clock_c, n1, i1, n4, s8_1, s8_2, s8_3, s8_4, s8_5, s8_6, s8_7, s8_8, s8_9, s8_10, s8_11, s8_12, s8_13, s8_14, s8_15);
cf_fir_16_16_16_2 s9 (clock_c, n1, n2, n6, s7_1, s7_2, s7_3, s7_4, s7_5, s7_6, s7_7, s7_8, s7_9, s7_10, s7_11, s7_12, s7_13, s7_14, s7_15, s7_16, s9_1);
assign o1 = s9_1;
endmodule

module cf_fir_16_16_16_2 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, o1);
input  clock_c;
input  i1;
input  i2;
input  [31:0] i3;
input  [31:0] i4;
input  [31:0] i5;
input  [31:0] i6;
input  [31:0] i7;
input  [31:0] i8;
input  [31:0] i9;
input  [31:0] i10;
input  [31:0] i11;
input  [31:0] i12;
input  [31:0] i13;
input  [31:0] i14;
input  [31:0] i15;
input  [31:0] i16;
input  [31:0] i17;
input  [31:0] i18;
input  [31:0] i19;
output [36:0] o1;
wire   n1;
wire   [32:0] n2;
wire   n3;
wire   [32:0] n4;
wire   [32:0] n5;
reg    [32:0] n6;
wire   [32:0] s7_1;
wire   [32:0] s7_2;
wire   [32:0] s7_3;
wire   [32:0] s7_4;
wire   [32:0] s7_5;
wire   [32:0] s7_6;
wire   [32:0] s7_7;
wire   [32:0] s7_8;
wire   [36:0] s8_1;
assign n1 = i3[31];
assign n2 = {n1, i3};
assign n3 = i4[31];
assign n4 = {n3, i4};
assign n5 = n2 + n4;
initial n6 = 33'b000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 33'b000000000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
cf_fir_16_16_16_9 s7 (clock_c, i1, i2, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, s7_1, s7_2, s7_3, s7_4, s7_5, s7_6, s7_7, s7_8);
cf_fir_16_16_16_3 s8 (clock_c, i1, i2, n6, s7_1, s7_2, s7_3, s7_4, s7_5, s7_6, s7_7, s7_8, s8_1);
assign o1 = s8_1;
endmodule

module cf_fir_16_16_16_3 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, o1);
input  clock_c;
input  i1;
input  i2;
input  [32:0] i3;
input  [32:0] i4;
input  [32:0] i5;
input  [32:0] i6;
input  [32:0] i7;
input  [32:0] i8;
input  [32:0] i9;
input  [32:0] i10;
input  [32:0] i11;
output [36:0] o1;
wire   n1;
wire   [33:0] n2;
wire   n3;
wire   [33:0] n4;
wire   [33:0] n5;
reg    [33:0] n6;
wire   [33:0] s7_1;
wire   [33:0] s7_2;
wire   [33:0] s7_3;
wire   [33:0] s7_4;
wire   [36:0] s8_1;
assign n1 = i3[32];
assign n2 = {n1, i3};
assign n3 = i4[32];
assign n4 = {n3, i4};
assign n5 = n2 + n4;
initial n6 = 34'b0000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 34'b0000000000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
cf_fir_16_16_16_7 s7 (clock_c, i1, i2, i5, i6, i7, i8, i9, i10, i11, s7_1, s7_2, s7_3, s7_4);
cf_fir_16_16_16_4 s8 (clock_c, i1, i2, n6, s7_1, s7_2, s7_3, s7_4, s8_1);
assign o1 = s8_1;
endmodule

module cf_fir_16_16_16_4 (clock_c, i1, i2, i3, i4, i5, i6, i7, o1);
input  clock_c;
input  i1;
input  i2;
input  [33:0] i3;
input  [33:0] i4;
input  [33:0] i5;
input  [33:0] i6;
input  [33:0] i7;
output [36:0] o1;
wire   n1;
wire   [34:0] n2;
wire   n3;
wire   [34:0] n4;
wire   [34:0] n5;
reg    [34:0] n6;
wire   n7;
wire   [36:0] n8;
wire   n9;
wire   [36:0] n10;
wire   [36:0] n11;
reg    [36:0] n12;
wire   [34:0] s13_1;
wire   [34:0] s13_2;
wire   [35:0] s14_1;
wire   [35:0] s14_2;
assign n1 = i3[33];
assign n2 = {n1, i3};
assign n3 = i4[33];
assign n4 = {n3, i4};
assign n5 = n2 + n4;
initial n6 = 35'b00000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 35'b00000000000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
assign n7 = s14_1[35];
assign n8 = {n7, s14_1};
assign n9 = s14_2[35];
assign n10 = {n9, s14_2};
assign n11 = n8 + n10;
initial n12 = 37'b0000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n12 <= 37'b0000000000000000000000000000000000000;
  else if (i1 == 1'b1)
    n12 <= n11;
cf_fir_16_16_16_6 s13 (clock_c, i1, i2, i5, i6, i7, s13_1, s13_2);
cf_fir_16_16_16_5 s14 (clock_c, i1, i2, n6, s13_1, s13_2, s14_1, s14_2);
assign o1 = n12;
endmodule

module cf_fir_16_16_16_5 (clock_c, i1, i2, i3, i4, i5, o1, o2);
input  clock_c;
input  i1;
input  i2;
input  [34:0] i3;
input  [34:0] i4;
input  [34:0] i5;
output [35:0] o1;
output [35:0] o2;
wire   n1;
wire   [35:0] n2;
wire   n3;
wire   [35:0] n4;
wire   [35:0] n5;
reg    [35:0] n6;
wire   n7;
wire   [35:0] n8;
reg    [35:0] n9;
assign n1 = i3[34];
assign n2 = {n1, i3};
assign n3 = i4[34];
assign n4 = {n3, i4};
assign n5 = n2 + n4;
initial n6 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 36'b000000000000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
assign n7 = i5[34];
assign n8 = {n7, i5};
initial n9 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n9 <= 36'b000000000000000000000000000000000000;
  else if (i1 == 1'b1)
    n9 <= n8;
assign o2 = n9;
assign o1 = n6;
endmodule

module cf_fir_16_16_16_6 (clock_c, i1, i2, i3, i4, i5, o1, o2);
input  clock_c;
input  i1;
input  i2;
input  [33:0] i3;
input  [33:0] i4;
input  [33:0] i5;
output [34:0] o1;
output [34:0] o2;
wire   n1;
wire   [34:0] n2;
wire   n3;
wire   [34:0] n4;
wire   [34:0] n5;
reg    [34:0] n6;
wire   n7;
wire   [34:0] n8;
reg    [34:0] n9;
assign n1 = i3[33];
assign n2 = {n1, i3};
assign n3 = i4[33];
assign n4 = {n3, i4};
assign n5 = n2 + n4;
initial n6 = 35'b00000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 35'b00000000000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
assign n7 = i5[33];
assign n8 = {n7, i5};
initial n9 = 35'b00000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n9 <= 35'b00000000000000000000000000000000000;
  else if (i1 == 1'b1)
    n9 <= n8;
assign o2 = n9;
assign o1 = n6;
endmodule

module cf_fir_16_16_16_7 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, o1, o2, o3, o4);
input  clock_c;
input  i1;
input  i2;
input  [32:0] i3;
input  [32:0] i4;
input  [32:0] i5;
input  [32:0] i6;
input  [32:0] i7;
input  [32:0] i8;
input  [32:0] i9;
output [33:0] o1;
output [33:0] o2;
output [33:0] o3;
output [33:0] o4;
wire   n1;
wire   [33:0] n2;
wire   n3;
wire   [33:0] n4;
wire   [33:0] n5;
reg    [33:0] n6;
wire   n7;
wire   [33:0] n8;
wire   n9;
wire   [33:0] n10;
wire   [33:0] n11;
reg    [33:0] n12;
wire   [33:0] s13_1;
wire   [33:0] s13_2;
assign n1 = i3[32];
assign n2 = {n1, i3};
assign n3 = i4[32];
assign n4 = {n3, i4};
assign n5 = n2 + n4;
initial n6 = 34'b0000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 34'b0000000000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
assign n7 = i5[32];
assign n8 = {n7, i5};
assign n9 = i6[32];
assign n10 = {n9, i6};
assign n11 = n8 + n10;
initial n12 = 34'b0000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n12 <= 34'b0000000000000000000000000000000000;
  else if (i1 == 1'b1)
    n12 <= n11;
cf_fir_16_16_16_8 s13 (clock_c, i1, i2, i7, i8, i9, s13_1, s13_2);
assign o4 = s13_2;
assign o3 = s13_1;
assign o2 = n12;
assign o1 = n6;
endmodule

module cf_fir_16_16_16_8 (clock_c, i1, i2, i3, i4, i5, o1, o2);
input  clock_c;
input  i1;
input  i2;
input  [32:0] i3;
input  [32:0] i4;
input  [32:0] i5;
output [33:0] o1;
output [33:0] o2;
wire   n1;
wire   [33:0] n2;
wire   n3;
wire   [33:0] n4;
wire   [33:0] n5;
reg    [33:0] n6;
wire   n7;
wire   [33:0] n8;
reg    [33:0] n9;
assign n1 = i3[32];
assign n2 = {n1, i3};
assign n3 = i4[32];
assign n4 = {n3, i4};
assign n5 = n2 + n4;
initial n6 = 34'b0000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 34'b0000000000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
assign n7 = i5[32];
assign n8 = {n7, i5};
initial n9 = 34'b0000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n9 <= 34'b0000000000000000000000000000000000;
  else if (i1 == 1'b1)
    n9 <= n8;
assign o2 = n9;
assign o1 = n6;
endmodule

module cf_fir_16_16_16_9 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, o1, o2, o3, o4, o5, o6, o7, o8);
input  clock_c;
input  i1;
input  i2;
input  [31:0] i3;
input  [31:0] i4;
input  [31:0] i5;
input  [31:0] i6;
input  [31:0] i7;
input  [31:0] i8;
input  [31:0] i9;
input  [31:0] i10;
input  [31:0] i11;
input  [31:0] i12;
input  [31:0] i13;
input  [31:0] i14;
input  [31:0] i15;
input  [31:0] i16;
input  [31:0] i17;
output [32:0] o1;
output [32:0] o2;
output [32:0] o3;
output [32:0] o4;
output [32:0] o5;
output [32:0] o6;
output [32:0] o7;
output [32:0] o8;
wire   n1;
wire   [32:0] n2;
wire   n3;
wire   [32:0] n4;
wire   [32:0] n5;
reg    [32:0] n6;
wire   n7;
wire   [32:0] n8;
wire   n9;
wire   [32:0] n10;
wire   [32:0] n11;
reg    [32:0] n12;
wire   [32:0] s13_1;
wire   [32:0] s13_2;
wire   [32:0] s13_3;
wire   [32:0] s13_4;
wire   [32:0] s13_5;
wire   [32:0] s13_6;
assign n1 = i3[31];
assign n2 = {n1, i3};
assign n3 = i4[31];
assign n4 = {n3, i4};
assign n5 = n2 + n4;
initial n6 = 33'b000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 33'b000000000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
assign n7 = i5[31];
assign n8 = {n7, i5};
assign n9 = i6[31];
assign n10 = {n9, i6};
assign n11 = n8 + n10;
initial n12 = 33'b000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n12 <= 33'b000000000000000000000000000000000;
  else if (i1 == 1'b1)
    n12 <= n11;
cf_fir_16_16_16_10 s13 (clock_c, i1, i2, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, s13_1, s13_2, s13_3, s13_4, s13_5, s13_6);
assign o8 = s13_6;
assign o7 = s13_5;
assign o6 = s13_4;
assign o5 = s13_3;
assign o4 = s13_2;
assign o3 = s13_1;
assign o2 = n12;
assign o1 = n6;
endmodule

module cf_fir_16_16_16_10 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, o1, o2, o3, o4, o5, o6);
input  clock_c;
input  i1;
input  i2;
input  [31:0] i3;
input  [31:0] i4;
input  [31:0] i5;
input  [31:0] i6;
input  [31:0] i7;
input  [31:0] i8;
input  [31:0] i9;
input  [31:0] i10;
input  [31:0] i11;
input  [31:0] i12;
input  [31:0] i13;
output [32:0] o1;
output [32:0] o2;
output [32:0] o3;
output [32:0] o4;
output [32:0] o5;
output [32:0] o6;
wire   n1;
wire   [32:0] n2;
wire   n3;
wire   [32:0] n4;
wire   [32:0] n5;
reg    [32:0] n6;
wire   n7;
wire   [32:0] n8;
wire   n9;
wire   [32:0] n10;
wire   [32:0] n11;
reg    [32:0] n12;
wire   [32:0] s13_1;
wire   [32:0] s13_2;
wire   [32:0] s13_3;
wire   [32:0] s13_4;
assign n1 = i3[31];
assign n2 = {n1, i3};
assign n3 = i4[31];
assign n4 = {n3, i4};
assign n5 = n2 + n4;
initial n6 = 33'b000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 33'b000000000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
assign n7 = i5[31];
assign n8 = {n7, i5};
assign n9 = i6[31];
assign n10 = {n9, i6};
assign n11 = n8 + n10;
initial n12 = 33'b000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n12 <= 33'b000000000000000000000000000000000;
  else if (i1 == 1'b1)
    n12 <= n11;
cf_fir_16_16_16_11 s13 (clock_c, i1, i2, i7, i8, i9, i10, i11, i12, i13, s13_1, s13_2, s13_3, s13_4);
assign o6 = s13_4;
assign o5 = s13_3;
assign o4 = s13_2;
assign o3 = s13_1;
assign o2 = n12;
assign o1 = n6;
endmodule

module cf_fir_16_16_16_11 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, o1, o2, o3, o4);
input  clock_c;
input  i1;
input  i2;
input  [31:0] i3;
input  [31:0] i4;
input  [31:0] i5;
input  [31:0] i6;
input  [31:0] i7;
input  [31:0] i8;
input  [31:0] i9;
output [32:0] o1;
output [32:0] o2;
output [32:0] o3;
output [32:0] o4;
wire   n1;
wire   [32:0] n2;
wire   n3;
wire   [32:0] n4;
wire   [32:0] n5;
reg    [32:0] n6;
wire   n7;
wire   [32:0] n8;
wire   n9;
wire   [32:0] n10;
wire   [32:0] n11;
reg    [32:0] n12;
wire   [32:0] s13_1;
wire   [32:0] s13_2;
assign n1 = i3[31];
assign n2 = {n1, i3};
assign n3 = i4[31];
assign n4 = {n3, i4};
assign n5 = n2 + n4;
initial n6 = 33'b000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 33'b000000000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
assign n7 = i5[31];
assign n8 = {n7, i5};
assign n9 = i6[31];
assign n10 = {n9, i6};
assign n11 = n8 + n10;
initial n12 = 33'b000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n12 <= 33'b000000000000000000000000000000000;
  else if (i1 == 1'b1)
    n12 <= n11;
cf_fir_16_16_16_12 s13 (clock_c, i1, i2, i7, i8, i9, s13_1, s13_2);
assign o4 = s13_2;
assign o3 = s13_1;
assign o2 = n12;
assign o1 = n6;
endmodule

module cf_fir_16_16_16_12 (clock_c, i1, i2, i3, i4, i5, o1, o2);
input  clock_c;
input  i1;
input  i2;
input  [31:0] i3;
input  [31:0] i4;
input  [31:0] i5;
output [32:0] o1;
output [32:0] o2;
wire   n1;
wire   [32:0] n2;
wire   n3;
wire   [32:0] n4;
wire   [32:0] n5;
reg    [32:0] n6;
wire   n7;
wire   [32:0] n8;
reg    [32:0] n9;
assign n1 = i3[31];
assign n2 = {n1, i3};
assign n3 = i4[31];
assign n4 = {n3, i4};
assign n5 = n2 + n4;
initial n6 = 33'b000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 33'b000000000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
assign n7 = i5[31];
assign n8 = {n7, i5};
initial n9 = 33'b000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n9 <= 33'b000000000000000000000000000000000;
  else if (i1 == 1'b1)
    n9 <= n8;
assign o2 = n9;
assign o1 = n6;
endmodule

module cf_fir_16_16_16_13 (clock_c, i1, i2, i3, o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15);
input  clock_c;
input  i1;
input  i2;
input  [15:0] i3;
output [15:0] o1;
output [15:0] o2;
output [15:0] o3;
output [15:0] o4;
output [15:0] o5;
output [15:0] o6;
output [15:0] o7;
output [15:0] o8;
output [15:0] o9;
output [15:0] o10;
output [15:0] o11;
output [15:0] o12;
output [15:0] o13;
output [15:0] o14;
output [15:0] o15;
reg    [15:0] n1;
reg    [15:0] n2;
reg    [15:0] n3;
reg    [15:0] n4;
reg    [15:0] n5;
reg    [15:0] n6;
reg    [15:0] n7;
wire   [15:0] s8_1;
wire   [15:0] s8_2;
wire   [15:0] s8_3;
wire   [15:0] s8_4;
wire   [15:0] s8_5;
wire   [15:0] s8_6;
wire   [15:0] s8_7;
wire   [15:0] s8_8;
initial n1 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n1 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n1 <= i3;
initial n2 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n2 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n2 <= n1;
initial n3 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n3 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n3 <= n2;
initial n4 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n4 <= n3;
initial n5 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n5 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n5 <= n4;
initial n6 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
initial n7 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n7 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n7 <= n6;
cf_fir_16_16_16_14 s8 (clock_c, i1, i2, n7, s8_1, s8_2, s8_3, s8_4, s8_5, s8_6, s8_7, s8_8);
assign o15 = s8_8;
assign o14 = s8_7;
assign o13 = s8_6;
assign o12 = s8_5;
assign o11 = s8_4;
assign o10 = s8_3;
assign o9 = s8_2;
assign o8 = s8_1;
assign o7 = n7;
assign o6 = n6;
assign o5 = n5;
assign o4 = n4;
assign o3 = n3;
assign o2 = n2;
assign o1 = n1;
endmodule

module cf_fir_16_16_16_14 (clock_c, i1, i2, i3, o1, o2, o3, o4, o5, o6, o7, o8);
input  clock_c;
input  i1;
input  i2;
input  [15:0] i3;
output [15:0] o1;
output [15:0] o2;
output [15:0] o3;
output [15:0] o4;
output [15:0] o5;
output [15:0] o6;
output [15:0] o7;
output [15:0] o8;
reg    [15:0] n1;
reg    [15:0] n2;
reg    [15:0] n3;
reg    [15:0] n4;
reg    [15:0] n5;
reg    [15:0] n6;
reg    [15:0] n7;
reg    [15:0] n8;
initial n1 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n1 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n1 <= i3;
initial n2 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n2 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n2 <= n1;
initial n3 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n3 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n3 <= n2;
initial n4 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n4 <= n3;
initial n5 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n5 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n5 <= n4;
initial n6 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
initial n7 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n7 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n7 <= n6;
initial n8 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n8 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n8 <= n7;
assign o8 = n8;
assign o7 = n7;
assign o6 = n6;
assign o5 = n5;
assign o4 = n4;
assign o3 = n3;
assign o2 = n2;
assign o1 = n1;
endmodule

module cf_fir_16_16_16_15 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, o16);
input  clock_c;
input  i1;
input  i2;
input  [15:0] i3;
input  [15:0] i4;
input  [15:0] i5;
input  [15:0] i6;
input  [15:0] i7;
input  [15:0] i8;
input  [15:0] i9;
input  [15:0] i10;
input  [15:0] i11;
input  [15:0] i12;
input  [15:0] i13;
input  [15:0] i14;
input  [15:0] i15;
input  [15:0] i16;
input  [15:0] i17;
input  [15:0] i18;
input  [15:0] i19;
input  [15:0] i20;
input  [15:0] i21;
input  [15:0] i22;
input  [15:0] i23;
input  [15:0] i24;
input  [15:0] i25;
input  [15:0] i26;
input  [15:0] i27;
input  [15:0] i28;
input  [15:0] i29;
input  [15:0] i30;
input  [15:0] i31;
input  [15:0] i32;
input  [15:0] i33;
input  [15:0] i34;
output [31:0] o1;
output [31:0] o2;
output [31:0] o3;
output [31:0] o4;
output [31:0] o5;
output [31:0] o6;
output [31:0] o7;
output [31:0] o8;
output [31:0] o9;
output [31:0] o10;
output [31:0] o11;
output [31:0] o12;
output [31:0] o13;
output [31:0] o14;
output [31:0] o15;
output [31:0] o16;
wire   [31:0] n1;
reg    [31:0] n2;
wire   [31:0] n3;
reg    [31:0] n4;
wire   [31:0] n5;
reg    [31:0] n6;
wire   [31:0] n7;
reg    [31:0] n8;
wire   [31:0] s9_1;
wire   [31:0] s9_2;
wire   [31:0] s9_3;
wire   [31:0] s9_4;
wire   [31:0] s9_5;
wire   [31:0] s9_6;
wire   [31:0] s9_7;
wire   [31:0] s9_8;
wire   [31:0] s9_9;
wire   [31:0] s9_10;
wire   [31:0] s9_11;
wire   [31:0] s9_12;
assign n1 = {{16{1'b0}}, i3} * {{16{1'b0}}, i19};
initial n2 = 32'b00000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n2 <= 32'b00000000000000000000000000000000;
  else if (i1 == 1'b1)
    n2 <= n1;
assign n3 = {{16{1'b0}}, i4} * {{16{1'b0}}, i20};
initial n4 = 32'b00000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 32'b00000000000000000000000000000000;
  else if (i1 == 1'b1)
    n4 <= n3;
assign n5 = {{16{1'b0}}, i5} * {{16{1'b0}}, i21};
initial n6 = 32'b00000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 32'b00000000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
assign n7 = {{16{1'b0}}, i6} * {{16{1'b0}}, i22};
initial n8 = 32'b00000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n8 <= 32'b00000000000000000000000000000000;
  else if (i1 == 1'b1)
    n8 <= n7;
cf_fir_16_16_16_16 s9 (clock_c, i1, i2, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, s9_1, s9_2, s9_3, s9_4, s9_5, s9_6, s9_7, s9_8, s9_9, s9_10, s9_11, s9_12);
assign o16 = s9_12;
assign o15 = s9_11;
assign o14 = s9_10;
assign o13 = s9_9;
assign o12 = s9_8;
assign o11 = s9_7;
assign o10 = s9_6;
assign o9 = s9_5;
assign o8 = s9_4;
assign o7 = s9_3;
assign o6 = s9_2;
assign o5 = s9_1;
assign o4 = n8;
assign o3 = n6;
assign o2 = n4;
assign o1 = n2;
endmodule

module cf_fir_16_16_16_16 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12);
input  clock_c;
input  i1;
input  i2;
input  [15:0] i3;
input  [15:0] i4;
input  [15:0] i5;
input  [15:0] i6;
input  [15:0] i7;
input  [15:0] i8;
input  [15:0] i9;
input  [15:0] i10;
input  [15:0] i11;
input  [15:0] i12;
input  [15:0] i13;
input  [15:0] i14;
input  [15:0] i15;
input  [15:0] i16;
input  [15:0] i17;
input  [15:0] i18;
input  [15:0] i19;
input  [15:0] i20;
input  [15:0] i21;
input  [15:0] i22;
input  [15:0] i23;
input  [15:0] i24;
input  [15:0] i25;
input  [15:0] i26;
output [31:0] o1;
output [31:0] o2;
output [31:0] o3;
output [31:0] o4;
output [31:0] o5;
output [31:0] o6;
output [31:0] o7;
output [31:0] o8;
output [31:0] o9;
output [31:0] o10;
output [31:0] o11;
output [31:0] o12;
wire   [31:0] n1;
reg    [31:0] n2;
wire   [31:0] n3;
reg    [31:0] n4;
wire   [31:0] n5;
reg    [31:0] n6;
wire   [31:0] n7;
reg    [31:0] n8;
wire   [31:0] s9_1;
wire   [31:0] s9_2;
wire   [31:0] s9_3;
wire   [31:0] s9_4;
wire   [31:0] s9_5;
wire   [31:0] s9_6;
wire   [31:0] s9_7;
wire   [31:0] s9_8;
assign n1 = {{16{1'b0}}, i3} * {{16{1'b0}}, i15};
initial n2 = 32'b00000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n2 <= 32'b00000000000000000000000000000000;
  else if (i1 == 1'b1)
    n2 <= n1;
assign n3 = {{16{1'b0}}, i4} * {{16{1'b0}}, i16};
initial n4 = 32'b00000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 32'b00000000000000000000000000000000;
  else if (i1 == 1'b1)
    n4 <= n3;
assign n5 = {{16{1'b0}}, i5} * {{16{1'b0}}, i17};
initial n6 = 32'b00000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 32'b00000000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
assign n7 = {{16{1'b0}}, i6} * {{16{1'b0}}, i18};
initial n8 = 32'b00000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n8 <= 32'b00000000000000000000000000000000;
  else if (i1 == 1'b1)
    n8 <= n7;
cf_fir_16_16_16_17 s9 (clock_c, i1, i2, i7, i8, i9, i10, i11, i12, i13, i14, i19, i20, i21, i22, i23, i24, i25, i26, s9_1, s9_2, s9_3, s9_4, s9_5, s9_6, s9_7, s9_8);
assign o12 = s9_8;
assign o11 = s9_7;
assign o10 = s9_6;
assign o9 = s9_5;
assign o8 = s9_4;
assign o7 = s9_3;
assign o6 = s9_2;
assign o5 = s9_1;
assign o4 = n8;
assign o3 = n6;
assign o2 = n4;
assign o1 = n2;
endmodule

module cf_fir_16_16_16_17 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, o1, o2, o3, o4, o5, o6, o7, o8);
input  clock_c;
input  i1;
input  i2;
input  [15:0] i3;
input  [15:0] i4;
input  [15:0] i5;
input  [15:0] i6;
input  [15:0] i7;
input  [15:0] i8;
input  [15:0] i9;
input  [15:0] i10;
input  [15:0] i11;
input  [15:0] i12;
input  [15:0] i13;
input  [15:0] i14;
input  [15:0] i15;
input  [15:0] i16;
input  [15:0] i17;
input  [15:0] i18;
output [31:0] o1;
output [31:0] o2;
output [31:0] o3;
output [31:0] o4;
output [31:0] o5;
output [31:0] o6;
output [31:0] o7;
output [31:0] o8;
wire   [31:0] n1;
reg    [31:0] n2;
wire   [31:0] n3;
reg    [31:0] n4;
wire   [31:0] n5;
reg    [31:0] n6;
wire   [31:0] n7;
reg    [31:0] n8;
wire   [31:0] s9_1;
wire   [31:0] s9_2;
wire   [31:0] s9_3;
wire   [31:0] s9_4;
assign n1 = {{16{1'b0}}, i3} * {{16{1'b0}}, i11};
initial n2 = 32'b00000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n2 <= 32'b00000000000000000000000000000000;
  else if (i1 == 1'b1)
    n2 <= n1;
assign n3 = {{16{1'b0}}, i4} * {{16{1'b0}}, i12};
initial n4 = 32'b00000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 32'b00000000000000000000000000000000;
  else if (i1 == 1'b1)
    n4 <= n3;
assign n5 = {{16{1'b0}}, i5} * {{16{1'b0}}, i13};
initial n6 = 32'b00000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 32'b00000000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
assign n7 = {{16{1'b0}}, i6} * {{16{1'b0}}, i14};
initial n8 = 32'b00000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n8 <= 32'b00000000000000000000000000000000;
  else if (i1 == 1'b1)
    n8 <= n7;
cf_fir_16_16_16_18 s9 (clock_c, i1, i2, i7, i8, i9, i10, i15, i16, i17, i18, s9_1, s9_2, s9_3, s9_4);
assign o8 = s9_4;
assign o7 = s9_3;
assign o6 = s9_2;
assign o5 = s9_1;
assign o4 = n8;
assign o3 = n6;
assign o2 = n4;
assign o1 = n2;
endmodule

module cf_fir_16_16_16_18 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, o1, o2, o3, o4);
input  clock_c;
input  i1;
input  i2;
input  [15:0] i3;
input  [15:0] i4;
input  [15:0] i5;
input  [15:0] i6;
input  [15:0] i7;
input  [15:0] i8;
input  [15:0] i9;
input  [15:0] i10;
output [31:0] o1;
output [31:0] o2;
output [31:0] o3;
output [31:0] o4;
wire   [31:0] n1;
reg    [31:0] n2;
wire   [31:0] n3;
reg    [31:0] n4;
wire   [31:0] n5;
reg    [31:0] n6;
wire   [31:0] n7;
reg    [31:0] n8;
assign n1 = {{16{1'b0}}, i3} * {{16{1'b0}}, i7};
initial n2 = 32'b00000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n2 <= 32'b00000000000000000000000000000000;
  else if (i1 == 1'b1)
    n2 <= n1;
assign n3 = {{16{1'b0}}, i4} * {{16{1'b0}}, i8};
initial n4 = 32'b00000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 32'b00000000000000000000000000000000;
  else if (i1 == 1'b1)
    n4 <= n3;
assign n5 = {{16{1'b0}}, i5} * {{16{1'b0}}, i9};
initial n6 = 32'b00000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 32'b00000000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
assign n7 = {{16{1'b0}}, i6} * {{16{1'b0}}, i10};
initial n8 = 32'b00000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n8 <= 32'b00000000000000000000000000000000;
  else if (i1 == 1'b1)
    n8 <= n7;
assign o4 = n8;
assign o3 = n6;
assign o2 = n4;
assign o1 = n2;
endmodule

