//
//  Copyright (c) 2003 Launchbird Design Systems, Inc.
//  All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//    Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
//    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
//  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
//  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
//  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  
//  Overview:
//  
//    Performs a radix 2 Fast Fourier Transform.
//    The FFT architecture is pipelined on a rank basis; each rank has its own butterfly and ranks are
//    isolated from each other using memory interleavers.  This FFT can perform calcualations on continuous
//    streaming data (one data set right after another).  More over, inputs and outputs are passed in pairs,
//    doubling the bandwidth.  For instance, a 2048 point FFT can perform a transform every 1024 cycles.
//  
//  Interface:
//  
//    Synchronization:
//      clock_c  : Clock input.
//      enable_i : Synchronous enable.
//      reset_i  : Synchronous reset.
//  
//    Inputs:
//      sync_i     : Input sync pulse must occur one frame prior to data input.
//      data_0_i   : Input data 0.  Width is 2 * precision.  Real on the left, imag on the right.
//      data_1_i   : Input data 1.  Width is 2 * precision.  Real on the left, imag on the right.
//  
//    Outputs:
//      sync_o     : Output sync pulse occurs one frame before data output.
//      data_0_o   : Output data 0.  Width is 2 * precision.  Real on the left, imag on the right.
//      data_1_o   : Output data 1.  Width is 2 * precision.  Real on the left, imag on the right.
//  
//  Built In Parameters:
//  
//    FFT Points   = 256
//    Precision    = 16
//  
//  
//  
//  
//  Generated by Confluence 0.6.3  --  Launchbird Design Systems, Inc.  --  www.launchbird.com
//  
//  Build Date : Fri Aug 22 08:43:46 CDT 2003
//  
//  Interface
//  
//    Build Name    : cf_fft_256_16
//    Clock Domains : clock_c  
//    Vector Input  : enable_i(1)
//    Vector Input  : reset_i(1)
//    Vector Input  : sync_i(1)
//    Vector Input  : data_0_i(32)
//    Vector Input  : data_1_i(32)
//    Vector Output : sync_o(1)
//    Vector Output : data_0_o(32)
//    Vector Output : data_1_o(32)
//  
//  
//  

#ifdef __cplusplus
extern "C" {
#endif

void cf_fft_256_16_ports(unsigned char* port_enable_i, unsigned char* port_reset_i, unsigned char* port_sync_i, unsigned char* port_data_0_i, unsigned char* port_data_1_i, unsigned char* port_sync_o, unsigned char* port_data_0_o, unsigned char* port_data_1_o);
void cf_fft_256_16_init();
void cf_fft_256_16_calc();
void cf_fft_256_16_cycle_clock();
void cf_fft_256_16_sim_init(const char* file);
void cf_fft_256_16_sim_end();
void cf_fft_256_16_sim_sample();

#ifdef __cplusplus
}
#endif

