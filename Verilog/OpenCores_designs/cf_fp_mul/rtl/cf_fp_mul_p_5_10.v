//
//  Copyright (c) 2003 Launchbird Design Systems, Inc.
//  All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//    Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
//    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
//  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
//  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
//  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  
//  Overview:
//  
//    Performs floating point multiply.
//  
//  Interface:
//  
//    Synchronization:
//      clock_c  : Clock input.
//  
//    Inputs:
//      a_i : Left operand.
//      b_i : Right operand.
//  
//    Outputs:
//      x_o : Result.
//  
//  Built In Parameters:
//  
//    Exponent Precision = 5
//    Mantissa Precision = 10
//    Total    Precision = 16
//    Pipeline Latency   = 14 clock cycles
//  
//  
//  
//  
//  Generated by Confluence 0.6.3  --  Launchbird Design Systems, Inc.  --  www.launchbird.com
//  
//  Build Date : Fri Aug 22 09:47:04 CDT 2003
//  
//  Interface
//  
//    Build Name    : cf_fp_mul_p_5_10
//    Clock Domains : clock_c  
//    Vector Input  : a_i(16)
//    Vector Input  : b_i(16)
//    Vector Output : x_o(16)
//  
//  
//  

`timescale 1 ns / 1 ns

module cf_fp_mul_p_5_10 (clock_c, a_i, b_i, x_o);
input  clock_c;
input  [15:0] a_i;
input  [15:0] b_i;
output [15:0] x_o;
wire   [15:0] n1;
cf_fp_mul_p_5_10_1 s1 (clock_c, a_i, b_i, n1);
assign x_o = n1;
endmodule

module cf_fp_mul_p_5_10_1 (clock_c, i1, i2, o1);
input  clock_c;
input  [15:0] i1;
input  [15:0] i2;
output [15:0] o1;
wire   n1;
wire   n2;
wire   [15:0] s3_1;
assign n1 = 1'b1;
assign n2 = 1'b0;
cf_fp_mul_p_5_10_2 s3 (clock_c, n1, n2, i1, i2, s3_1);
assign o1 = s3_1;
endmodule

module cf_fp_mul_p_5_10_2 (clock_c, i1, i2, i3, i4, o1);
input  clock_c;
input  i1;
input  i2;
input  [15:0] i3;
input  [15:0] i4;
output [15:0] o1;
reg    [15:0] n1;
reg    [15:0] n2;
reg    n3;
reg    n4;
reg    n5;
reg    n6;
reg    n7;
reg    [5:0] n8;
reg    [21:0] n9;
wire   n10;
wire   [5:0] n11;
wire   [5:0] n12;
wire   [5:0] n13;
wire   [20:0] n14;
wire   [20:0] n15;
wire   [20:0] n16;
reg    n17;
reg    n18;
reg    n19;
reg    n20;
reg    n21;
reg    [5:0] n22;
reg    [20:0] n23;
reg    [15:0] n24;
wire   [15:0] s25_1;
wire   s26_1;
wire   s26_2;
wire   s26_3;
wire   s26_4;
wire   s26_5;
wire   [5:0] s26_6;
wire   [21:0] s26_7;
wire   s27_1;
wire   s27_2;
wire   s27_3;
wire   s27_4;
wire   s27_5;
wire   [5:0] s27_6;
wire   [10:0] s27_7;
initial n1 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n1 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n1 <= i3;
initial n2 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n2 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n2 <= i4;
initial n3 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n3 <= 1'b0;
  else if (i1 == 1'b1)
    n3 <= s26_1;
initial n4 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 1'b0;
  else if (i1 == 1'b1)
    n4 <= s26_2;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n5 <= 1'b0;
  else if (i1 == 1'b1)
    n5 <= s26_3;
initial n6 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 1'b0;
  else if (i1 == 1'b1)
    n6 <= s26_4;
initial n7 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n7 <= 1'b0;
  else if (i1 == 1'b1)
    n7 <= s26_5;
initial n8 = 6'b000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n8 <= 6'b000000;
  else if (i1 == 1'b1)
    n8 <= s26_6;
initial n9 = 22'b0000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n9 <= 22'b0000000000000000000000;
  else if (i1 == 1'b1)
    n9 <= s26_7;
assign n10 = n9[21];
assign n11 = 6'b000001;
assign n12 = n8 + n11;
assign n13 = n10 ? n12 : n8;
assign n14 = {n9[21],
  n9[20],
  n9[19],
  n9[18],
  n9[17],
  n9[16],
  n9[15],
  n9[14],
  n9[13],
  n9[12],
  n9[11],
  n9[10],
  n9[9],
  n9[8],
  n9[7],
  n9[6],
  n9[5],
  n9[4],
  n9[3],
  n9[2],
  n9[1]};
assign n15 = {n9[20],
  n9[19],
  n9[18],
  n9[17],
  n9[16],
  n9[15],
  n9[14],
  n9[13],
  n9[12],
  n9[11],
  n9[10],
  n9[9],
  n9[8],
  n9[7],
  n9[6],
  n9[5],
  n9[4],
  n9[3],
  n9[2],
  n9[1],
  n9[0]};
assign n16 = n10 ? n14 : n15;
initial n17 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n17 <= 1'b0;
  else if (i1 == 1'b1)
    n17 <= n3;
initial n18 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n18 <= 1'b0;
  else if (i1 == 1'b1)
    n18 <= n4;
initial n19 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n19 <= 1'b0;
  else if (i1 == 1'b1)
    n19 <= n5;
initial n20 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n20 <= 1'b0;
  else if (i1 == 1'b1)
    n20 <= n6;
initial n21 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n21 <= 1'b0;
  else if (i1 == 1'b1)
    n21 <= n7;
initial n22 = 6'b000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n22 <= 6'b000000;
  else if (i1 == 1'b1)
    n22 <= n13;
initial n23 = 21'b000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n23 <= 21'b000000000000000000000;
  else if (i1 == 1'b1)
    n23 <= n16;
initial n24 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n24 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n24 <= s25_1;
cf_fp_mul_p_5_10_29 s25 (s27_1, s27_2, s27_3, s27_4, s27_5, s27_6, s27_7, s25_1);
cf_fp_mul_p_5_10_24 s26 (n1, n2, s26_1, s26_2, s26_3, s26_4, s26_5, s26_6, s26_7);
cf_fp_mul_p_5_10_3 s27 (clock_c, i1, i2, n17, n18, n19, n20, n21, n22, n23, s27_1, s27_2, s27_3, s27_4, s27_5, s27_6, s27_7);
assign o1 = n24;
endmodule

module cf_fp_mul_p_5_10_3 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, o1, o2, o3, o4, o5, o6, o7);
input  clock_c;
input  i1;
input  i2;
input  i3;
input  i4;
input  i5;
input  i6;
input  i7;
input  [5:0] i8;
input  [20:0] i9;
output o1;
output o2;
output o3;
output o4;
output o5;
output [5:0] o6;
output [10:0] o7;
reg    n1;
reg    n2;
reg    n3;
reg    n4;
reg    n5;
reg    [5:0] n6;
reg    [19:0] n7;
wire   [5:0] s8_1;
wire   [19:0] s8_2;
wire   s9_1;
wire   s9_2;
wire   s9_3;
wire   s9_4;
wire   s9_5;
wire   [5:0] s9_6;
wire   [10:0] s9_7;
initial n1 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n1 <= 1'b0;
  else if (i1 == 1'b1)
    n1 <= i3;
initial n2 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n2 <= 1'b0;
  else if (i1 == 1'b1)
    n2 <= i4;
initial n3 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n3 <= 1'b0;
  else if (i1 == 1'b1)
    n3 <= i5;
initial n4 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 1'b0;
  else if (i1 == 1'b1)
    n4 <= i6;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n5 <= 1'b0;
  else if (i1 == 1'b1)
    n5 <= i7;
initial n6 = 6'b000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 6'b000000;
  else if (i1 == 1'b1)
    n6 <= s8_1;
initial n7 = 20'b00000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n7 <= 20'b00000000000000000000;
  else if (i1 == 1'b1)
    n7 <= s8_2;
cf_fp_mul_p_5_10_22 s8 (i8, i9, s8_1, s8_2);
cf_fp_mul_p_5_10_4 s9 (clock_c, i1, i2, n1, n2, n3, n4, n5, n6, n7, s9_1, s9_2, s9_3, s9_4, s9_5, s9_6, s9_7);
assign o7 = s9_7;
assign o6 = s9_6;
assign o5 = s9_5;
assign o4 = s9_4;
assign o3 = s9_3;
assign o2 = s9_2;
assign o1 = s9_1;
endmodule

module cf_fp_mul_p_5_10_4 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, o1, o2, o3, o4, o5, o6, o7);
input  clock_c;
input  i1;
input  i2;
input  i3;
input  i4;
input  i5;
input  i6;
input  i7;
input  [5:0] i8;
input  [19:0] i9;
output o1;
output o2;
output o3;
output o4;
output o5;
output [5:0] o6;
output [10:0] o7;
reg    n1;
reg    n2;
reg    n3;
reg    n4;
reg    n5;
reg    [5:0] n6;
reg    [18:0] n7;
wire   [5:0] s8_1;
wire   [18:0] s8_2;
wire   s9_1;
wire   s9_2;
wire   s9_3;
wire   s9_4;
wire   s9_5;
wire   [5:0] s9_6;
wire   [10:0] s9_7;
initial n1 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n1 <= 1'b0;
  else if (i1 == 1'b1)
    n1 <= i3;
initial n2 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n2 <= 1'b0;
  else if (i1 == 1'b1)
    n2 <= i4;
initial n3 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n3 <= 1'b0;
  else if (i1 == 1'b1)
    n3 <= i5;
initial n4 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 1'b0;
  else if (i1 == 1'b1)
    n4 <= i6;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n5 <= 1'b0;
  else if (i1 == 1'b1)
    n5 <= i7;
initial n6 = 6'b000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 6'b000000;
  else if (i1 == 1'b1)
    n6 <= s8_1;
initial n7 = 19'b0000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n7 <= 19'b0000000000000000000;
  else if (i1 == 1'b1)
    n7 <= s8_2;
cf_fp_mul_p_5_10_21 s8 (i8, i9, s8_1, s8_2);
cf_fp_mul_p_5_10_5 s9 (clock_c, i1, i2, n1, n2, n3, n4, n5, n6, n7, s9_1, s9_2, s9_3, s9_4, s9_5, s9_6, s9_7);
assign o7 = s9_7;
assign o6 = s9_6;
assign o5 = s9_5;
assign o4 = s9_4;
assign o3 = s9_3;
assign o2 = s9_2;
assign o1 = s9_1;
endmodule

module cf_fp_mul_p_5_10_5 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, o1, o2, o3, o4, o5, o6, o7);
input  clock_c;
input  i1;
input  i2;
input  i3;
input  i4;
input  i5;
input  i6;
input  i7;
input  [5:0] i8;
input  [18:0] i9;
output o1;
output o2;
output o3;
output o4;
output o5;
output [5:0] o6;
output [10:0] o7;
reg    n1;
reg    n2;
reg    n3;
reg    n4;
reg    n5;
reg    [5:0] n6;
reg    [17:0] n7;
wire   [5:0] s8_1;
wire   [17:0] s8_2;
wire   s9_1;
wire   s9_2;
wire   s9_3;
wire   s9_4;
wire   s9_5;
wire   [5:0] s9_6;
wire   [10:0] s9_7;
initial n1 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n1 <= 1'b0;
  else if (i1 == 1'b1)
    n1 <= i3;
initial n2 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n2 <= 1'b0;
  else if (i1 == 1'b1)
    n2 <= i4;
initial n3 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n3 <= 1'b0;
  else if (i1 == 1'b1)
    n3 <= i5;
initial n4 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 1'b0;
  else if (i1 == 1'b1)
    n4 <= i6;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n5 <= 1'b0;
  else if (i1 == 1'b1)
    n5 <= i7;
initial n6 = 6'b000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 6'b000000;
  else if (i1 == 1'b1)
    n6 <= s8_1;
initial n7 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n7 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n7 <= s8_2;
cf_fp_mul_p_5_10_20 s8 (i8, i9, s8_1, s8_2);
cf_fp_mul_p_5_10_6 s9 (clock_c, i1, i2, n1, n2, n3, n4, n5, n6, n7, s9_1, s9_2, s9_3, s9_4, s9_5, s9_6, s9_7);
assign o7 = s9_7;
assign o6 = s9_6;
assign o5 = s9_5;
assign o4 = s9_4;
assign o3 = s9_3;
assign o2 = s9_2;
assign o1 = s9_1;
endmodule

module cf_fp_mul_p_5_10_6 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, o1, o2, o3, o4, o5, o6, o7);
input  clock_c;
input  i1;
input  i2;
input  i3;
input  i4;
input  i5;
input  i6;
input  i7;
input  [5:0] i8;
input  [17:0] i9;
output o1;
output o2;
output o3;
output o4;
output o5;
output [5:0] o6;
output [10:0] o7;
reg    n1;
reg    n2;
reg    n3;
reg    n4;
reg    n5;
reg    [5:0] n6;
reg    [16:0] n7;
wire   [5:0] s8_1;
wire   [16:0] s8_2;
wire   s9_1;
wire   s9_2;
wire   s9_3;
wire   s9_4;
wire   s9_5;
wire   [5:0] s9_6;
wire   [10:0] s9_7;
initial n1 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n1 <= 1'b0;
  else if (i1 == 1'b1)
    n1 <= i3;
initial n2 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n2 <= 1'b0;
  else if (i1 == 1'b1)
    n2 <= i4;
initial n3 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n3 <= 1'b0;
  else if (i1 == 1'b1)
    n3 <= i5;
initial n4 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 1'b0;
  else if (i1 == 1'b1)
    n4 <= i6;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n5 <= 1'b0;
  else if (i1 == 1'b1)
    n5 <= i7;
initial n6 = 6'b000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 6'b000000;
  else if (i1 == 1'b1)
    n6 <= s8_1;
initial n7 = 17'b00000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n7 <= 17'b00000000000000000;
  else if (i1 == 1'b1)
    n7 <= s8_2;
cf_fp_mul_p_5_10_19 s8 (i8, i9, s8_1, s8_2);
cf_fp_mul_p_5_10_7 s9 (clock_c, i1, i2, n1, n2, n3, n4, n5, n6, n7, s9_1, s9_2, s9_3, s9_4, s9_5, s9_6, s9_7);
assign o7 = s9_7;
assign o6 = s9_6;
assign o5 = s9_5;
assign o4 = s9_4;
assign o3 = s9_3;
assign o2 = s9_2;
assign o1 = s9_1;
endmodule

module cf_fp_mul_p_5_10_7 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, o1, o2, o3, o4, o5, o6, o7);
input  clock_c;
input  i1;
input  i2;
input  i3;
input  i4;
input  i5;
input  i6;
input  i7;
input  [5:0] i8;
input  [16:0] i9;
output o1;
output o2;
output o3;
output o4;
output o5;
output [5:0] o6;
output [10:0] o7;
reg    n1;
reg    n2;
reg    n3;
reg    n4;
reg    n5;
reg    [5:0] n6;
reg    [15:0] n7;
wire   [5:0] s8_1;
wire   [15:0] s8_2;
wire   s9_1;
wire   s9_2;
wire   s9_3;
wire   s9_4;
wire   s9_5;
wire   [5:0] s9_6;
wire   [10:0] s9_7;
initial n1 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n1 <= 1'b0;
  else if (i1 == 1'b1)
    n1 <= i3;
initial n2 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n2 <= 1'b0;
  else if (i1 == 1'b1)
    n2 <= i4;
initial n3 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n3 <= 1'b0;
  else if (i1 == 1'b1)
    n3 <= i5;
initial n4 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 1'b0;
  else if (i1 == 1'b1)
    n4 <= i6;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n5 <= 1'b0;
  else if (i1 == 1'b1)
    n5 <= i7;
initial n6 = 6'b000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 6'b000000;
  else if (i1 == 1'b1)
    n6 <= s8_1;
initial n7 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n7 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n7 <= s8_2;
cf_fp_mul_p_5_10_18 s8 (i8, i9, s8_1, s8_2);
cf_fp_mul_p_5_10_8 s9 (clock_c, i1, i2, n1, n2, n3, n4, n5, n6, n7, s9_1, s9_2, s9_3, s9_4, s9_5, s9_6, s9_7);
assign o7 = s9_7;
assign o6 = s9_6;
assign o5 = s9_5;
assign o4 = s9_4;
assign o3 = s9_3;
assign o2 = s9_2;
assign o1 = s9_1;
endmodule

module cf_fp_mul_p_5_10_8 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, o1, o2, o3, o4, o5, o6, o7);
input  clock_c;
input  i1;
input  i2;
input  i3;
input  i4;
input  i5;
input  i6;
input  i7;
input  [5:0] i8;
input  [15:0] i9;
output o1;
output o2;
output o3;
output o4;
output o5;
output [5:0] o6;
output [10:0] o7;
reg    n1;
reg    n2;
reg    n3;
reg    n4;
reg    n5;
reg    [5:0] n6;
reg    [14:0] n7;
wire   [5:0] s8_1;
wire   [14:0] s8_2;
wire   s9_1;
wire   s9_2;
wire   s9_3;
wire   s9_4;
wire   s9_5;
wire   [5:0] s9_6;
wire   [10:0] s9_7;
initial n1 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n1 <= 1'b0;
  else if (i1 == 1'b1)
    n1 <= i3;
initial n2 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n2 <= 1'b0;
  else if (i1 == 1'b1)
    n2 <= i4;
initial n3 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n3 <= 1'b0;
  else if (i1 == 1'b1)
    n3 <= i5;
initial n4 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 1'b0;
  else if (i1 == 1'b1)
    n4 <= i6;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n5 <= 1'b0;
  else if (i1 == 1'b1)
    n5 <= i7;
initial n6 = 6'b000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 6'b000000;
  else if (i1 == 1'b1)
    n6 <= s8_1;
initial n7 = 15'b000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n7 <= 15'b000000000000000;
  else if (i1 == 1'b1)
    n7 <= s8_2;
cf_fp_mul_p_5_10_17 s8 (i8, i9, s8_1, s8_2);
cf_fp_mul_p_5_10_9 s9 (clock_c, i1, i2, n1, n2, n3, n4, n5, n6, n7, s9_1, s9_2, s9_3, s9_4, s9_5, s9_6, s9_7);
assign o7 = s9_7;
assign o6 = s9_6;
assign o5 = s9_5;
assign o4 = s9_4;
assign o3 = s9_3;
assign o2 = s9_2;
assign o1 = s9_1;
endmodule

module cf_fp_mul_p_5_10_9 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, o1, o2, o3, o4, o5, o6, o7);
input  clock_c;
input  i1;
input  i2;
input  i3;
input  i4;
input  i5;
input  i6;
input  i7;
input  [5:0] i8;
input  [14:0] i9;
output o1;
output o2;
output o3;
output o4;
output o5;
output [5:0] o6;
output [10:0] o7;
reg    n1;
reg    n2;
reg    n3;
reg    n4;
reg    n5;
reg    [5:0] n6;
reg    [13:0] n7;
wire   [5:0] s8_1;
wire   [13:0] s8_2;
wire   s9_1;
wire   s9_2;
wire   s9_3;
wire   s9_4;
wire   s9_5;
wire   [5:0] s9_6;
wire   [10:0] s9_7;
initial n1 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n1 <= 1'b0;
  else if (i1 == 1'b1)
    n1 <= i3;
initial n2 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n2 <= 1'b0;
  else if (i1 == 1'b1)
    n2 <= i4;
initial n3 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n3 <= 1'b0;
  else if (i1 == 1'b1)
    n3 <= i5;
initial n4 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 1'b0;
  else if (i1 == 1'b1)
    n4 <= i6;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n5 <= 1'b0;
  else if (i1 == 1'b1)
    n5 <= i7;
initial n6 = 6'b000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 6'b000000;
  else if (i1 == 1'b1)
    n6 <= s8_1;
initial n7 = 14'b00000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n7 <= 14'b00000000000000;
  else if (i1 == 1'b1)
    n7 <= s8_2;
cf_fp_mul_p_5_10_16 s8 (i8, i9, s8_1, s8_2);
cf_fp_mul_p_5_10_10 s9 (clock_c, i1, i2, n1, n2, n3, n4, n5, n6, n7, s9_1, s9_2, s9_3, s9_4, s9_5, s9_6, s9_7);
assign o7 = s9_7;
assign o6 = s9_6;
assign o5 = s9_5;
assign o4 = s9_4;
assign o3 = s9_3;
assign o2 = s9_2;
assign o1 = s9_1;
endmodule

module cf_fp_mul_p_5_10_10 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, o1, o2, o3, o4, o5, o6, o7);
input  clock_c;
input  i1;
input  i2;
input  i3;
input  i4;
input  i5;
input  i6;
input  i7;
input  [5:0] i8;
input  [13:0] i9;
output o1;
output o2;
output o3;
output o4;
output o5;
output [5:0] o6;
output [10:0] o7;
reg    n1;
reg    n2;
reg    n3;
reg    n4;
reg    n5;
reg    [5:0] n6;
reg    [12:0] n7;
wire   [5:0] s8_1;
wire   [12:0] s8_2;
wire   s9_1;
wire   s9_2;
wire   s9_3;
wire   s9_4;
wire   s9_5;
wire   [5:0] s9_6;
wire   [10:0] s9_7;
initial n1 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n1 <= 1'b0;
  else if (i1 == 1'b1)
    n1 <= i3;
initial n2 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n2 <= 1'b0;
  else if (i1 == 1'b1)
    n2 <= i4;
initial n3 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n3 <= 1'b0;
  else if (i1 == 1'b1)
    n3 <= i5;
initial n4 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 1'b0;
  else if (i1 == 1'b1)
    n4 <= i6;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n5 <= 1'b0;
  else if (i1 == 1'b1)
    n5 <= i7;
initial n6 = 6'b000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 6'b000000;
  else if (i1 == 1'b1)
    n6 <= s8_1;
initial n7 = 13'b0000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n7 <= 13'b0000000000000;
  else if (i1 == 1'b1)
    n7 <= s8_2;
cf_fp_mul_p_5_10_15 s8 (i8, i9, s8_1, s8_2);
cf_fp_mul_p_5_10_11 s9 (clock_c, i1, i2, n1, n2, n3, n4, n5, n6, n7, s9_1, s9_2, s9_3, s9_4, s9_5, s9_6, s9_7);
assign o7 = s9_7;
assign o6 = s9_6;
assign o5 = s9_5;
assign o4 = s9_4;
assign o3 = s9_3;
assign o2 = s9_2;
assign o1 = s9_1;
endmodule

module cf_fp_mul_p_5_10_11 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, o1, o2, o3, o4, o5, o6, o7);
input  clock_c;
input  i1;
input  i2;
input  i3;
input  i4;
input  i5;
input  i6;
input  i7;
input  [5:0] i8;
input  [12:0] i9;
output o1;
output o2;
output o3;
output o4;
output o5;
output [5:0] o6;
output [10:0] o7;
reg    n1;
reg    n2;
reg    n3;
reg    n4;
reg    n5;
reg    [5:0] n6;
reg    [11:0] n7;
wire   [5:0] s8_1;
wire   [11:0] s8_2;
wire   s9_1;
wire   s9_2;
wire   s9_3;
wire   s9_4;
wire   s9_5;
wire   [5:0] s9_6;
wire   [10:0] s9_7;
initial n1 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n1 <= 1'b0;
  else if (i1 == 1'b1)
    n1 <= i3;
initial n2 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n2 <= 1'b0;
  else if (i1 == 1'b1)
    n2 <= i4;
initial n3 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n3 <= 1'b0;
  else if (i1 == 1'b1)
    n3 <= i5;
initial n4 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 1'b0;
  else if (i1 == 1'b1)
    n4 <= i6;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n5 <= 1'b0;
  else if (i1 == 1'b1)
    n5 <= i7;
initial n6 = 6'b000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 6'b000000;
  else if (i1 == 1'b1)
    n6 <= s8_1;
initial n7 = 12'b000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n7 <= 12'b000000000000;
  else if (i1 == 1'b1)
    n7 <= s8_2;
cf_fp_mul_p_5_10_14 s8 (i8, i9, s8_1, s8_2);
cf_fp_mul_p_5_10_12 s9 (clock_c, i1, i2, n1, n2, n3, n4, n5, n6, n7, s9_1, s9_2, s9_3, s9_4, s9_5, s9_6, s9_7);
assign o7 = s9_7;
assign o6 = s9_6;
assign o5 = s9_5;
assign o4 = s9_4;
assign o3 = s9_3;
assign o2 = s9_2;
assign o1 = s9_1;
endmodule

module cf_fp_mul_p_5_10_12 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, o1, o2, o3, o4, o5, o6, o7);
input  clock_c;
input  i1;
input  i2;
input  i3;
input  i4;
input  i5;
input  i6;
input  i7;
input  [5:0] i8;
input  [11:0] i9;
output o1;
output o2;
output o3;
output o4;
output o5;
output [5:0] o6;
output [10:0] o7;
reg    n1;
reg    n2;
reg    n3;
reg    n4;
reg    n5;
reg    [5:0] n6;
reg    [10:0] n7;
wire   [5:0] s8_1;
wire   [10:0] s8_2;
initial n1 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n1 <= 1'b0;
  else if (i1 == 1'b1)
    n1 <= i3;
initial n2 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n2 <= 1'b0;
  else if (i1 == 1'b1)
    n2 <= i4;
initial n3 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n3 <= 1'b0;
  else if (i1 == 1'b1)
    n3 <= i5;
initial n4 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 1'b0;
  else if (i1 == 1'b1)
    n4 <= i6;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n5 <= 1'b0;
  else if (i1 == 1'b1)
    n5 <= i7;
initial n6 = 6'b000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 6'b000000;
  else if (i1 == 1'b1)
    n6 <= s8_1;
initial n7 = 11'b00000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n7 <= 11'b00000000000;
  else if (i1 == 1'b1)
    n7 <= s8_2;
cf_fp_mul_p_5_10_13 s8 (i8, i9, s8_1, s8_2);
assign o7 = n7;
assign o6 = n6;
assign o5 = n5;
assign o4 = n4;
assign o3 = n3;
assign o2 = n2;
assign o1 = n1;
endmodule

module cf_fp_mul_p_5_10_13 (i1, i2, o1, o2);
input  [5:0] i1;
input  [11:0] i2;
output [5:0] o1;
output [10:0] o2;
wire   n1;
wire   n2;
wire   n3;
wire   [5:0] n4;
wire   [5:0] n5;
wire   [5:0] n6;
wire   [10:0] n7;
wire   [10:0] n8;
wire   [10:0] n9;
wire   s10_1;
assign n1 = i2[11];
assign n2 = n1 | s10_1;
assign n3 = ~n2;
assign n4 = 6'b000001;
assign n5 = i1 - n4;
assign n6 = n3 ? n5 : i1;
assign n7 = {i2[10],
  i2[9],
  i2[8],
  i2[7],
  i2[6],
  i2[5],
  i2[4],
  i2[3],
  i2[2],
  i2[1],
  i2[0]};
assign n8 = {i2[11],
  i2[10],
  i2[9],
  i2[8],
  i2[7],
  i2[6],
  i2[5],
  i2[4],
  i2[3],
  i2[2],
  i2[1]};
assign n9 = n3 ? n7 : n8;
cf_fp_mul_p_5_10_23 s10 (i1, s10_1);
assign o2 = n9;
assign o1 = n6;
endmodule

module cf_fp_mul_p_5_10_14 (i1, i2, o1, o2);
input  [5:0] i1;
input  [12:0] i2;
output [5:0] o1;
output [11:0] o2;
wire   n1;
wire   n2;
wire   n3;
wire   [5:0] n4;
wire   [5:0] n5;
wire   [5:0] n6;
wire   [11:0] n7;
wire   [11:0] n8;
wire   [11:0] n9;
wire   s10_1;
assign n1 = i2[12];
assign n2 = n1 | s10_1;
assign n3 = ~n2;
assign n4 = 6'b000001;
assign n5 = i1 - n4;
assign n6 = n3 ? n5 : i1;
assign n7 = {i2[11],
  i2[10],
  i2[9],
  i2[8],
  i2[7],
  i2[6],
  i2[5],
  i2[4],
  i2[3],
  i2[2],
  i2[1],
  i2[0]};
assign n8 = {i2[12],
  i2[11],
  i2[10],
  i2[9],
  i2[8],
  i2[7],
  i2[6],
  i2[5],
  i2[4],
  i2[3],
  i2[2],
  i2[1]};
assign n9 = n3 ? n7 : n8;
cf_fp_mul_p_5_10_23 s10 (i1, s10_1);
assign o2 = n9;
assign o1 = n6;
endmodule

module cf_fp_mul_p_5_10_15 (i1, i2, o1, o2);
input  [5:0] i1;
input  [13:0] i2;
output [5:0] o1;
output [12:0] o2;
wire   n1;
wire   n2;
wire   n3;
wire   [5:0] n4;
wire   [5:0] n5;
wire   [5:0] n6;
wire   [12:0] n7;
wire   [12:0] n8;
wire   [12:0] n9;
wire   s10_1;
assign n1 = i2[13];
assign n2 = n1 | s10_1;
assign n3 = ~n2;
assign n4 = 6'b000001;
assign n5 = i1 - n4;
assign n6 = n3 ? n5 : i1;
assign n7 = {i2[12],
  i2[11],
  i2[10],
  i2[9],
  i2[8],
  i2[7],
  i2[6],
  i2[5],
  i2[4],
  i2[3],
  i2[2],
  i2[1],
  i2[0]};
assign n8 = {i2[13],
  i2[12],
  i2[11],
  i2[10],
  i2[9],
  i2[8],
  i2[7],
  i2[6],
  i2[5],
  i2[4],
  i2[3],
  i2[2],
  i2[1]};
assign n9 = n3 ? n7 : n8;
cf_fp_mul_p_5_10_23 s10 (i1, s10_1);
assign o2 = n9;
assign o1 = n6;
endmodule

module cf_fp_mul_p_5_10_16 (i1, i2, o1, o2);
input  [5:0] i1;
input  [14:0] i2;
output [5:0] o1;
output [13:0] o2;
wire   n1;
wire   n2;
wire   n3;
wire   [5:0] n4;
wire   [5:0] n5;
wire   [5:0] n6;
wire   [13:0] n7;
wire   [13:0] n8;
wire   [13:0] n9;
wire   s10_1;
assign n1 = i2[14];
assign n2 = n1 | s10_1;
assign n3 = ~n2;
assign n4 = 6'b000001;
assign n5 = i1 - n4;
assign n6 = n3 ? n5 : i1;
assign n7 = {i2[13],
  i2[12],
  i2[11],
  i2[10],
  i2[9],
  i2[8],
  i2[7],
  i2[6],
  i2[5],
  i2[4],
  i2[3],
  i2[2],
  i2[1],
  i2[0]};
assign n8 = {i2[14],
  i2[13],
  i2[12],
  i2[11],
  i2[10],
  i2[9],
  i2[8],
  i2[7],
  i2[6],
  i2[5],
  i2[4],
  i2[3],
  i2[2],
  i2[1]};
assign n9 = n3 ? n7 : n8;
cf_fp_mul_p_5_10_23 s10 (i1, s10_1);
assign o2 = n9;
assign o1 = n6;
endmodule

module cf_fp_mul_p_5_10_17 (i1, i2, o1, o2);
input  [5:0] i1;
input  [15:0] i2;
output [5:0] o1;
output [14:0] o2;
wire   n1;
wire   n2;
wire   n3;
wire   [5:0] n4;
wire   [5:0] n5;
wire   [5:0] n6;
wire   [14:0] n7;
wire   [14:0] n8;
wire   [14:0] n9;
wire   s10_1;
assign n1 = i2[15];
assign n2 = n1 | s10_1;
assign n3 = ~n2;
assign n4 = 6'b000001;
assign n5 = i1 - n4;
assign n6 = n3 ? n5 : i1;
assign n7 = {i2[14],
  i2[13],
  i2[12],
  i2[11],
  i2[10],
  i2[9],
  i2[8],
  i2[7],
  i2[6],
  i2[5],
  i2[4],
  i2[3],
  i2[2],
  i2[1],
  i2[0]};
assign n8 = {i2[15],
  i2[14],
  i2[13],
  i2[12],
  i2[11],
  i2[10],
  i2[9],
  i2[8],
  i2[7],
  i2[6],
  i2[5],
  i2[4],
  i2[3],
  i2[2],
  i2[1]};
assign n9 = n3 ? n7 : n8;
cf_fp_mul_p_5_10_23 s10 (i1, s10_1);
assign o2 = n9;
assign o1 = n6;
endmodule

module cf_fp_mul_p_5_10_18 (i1, i2, o1, o2);
input  [5:0] i1;
input  [16:0] i2;
output [5:0] o1;
output [15:0] o2;
wire   n1;
wire   n2;
wire   n3;
wire   [5:0] n4;
wire   [5:0] n5;
wire   [5:0] n6;
wire   [15:0] n7;
wire   [15:0] n8;
wire   [15:0] n9;
wire   s10_1;
assign n1 = i2[16];
assign n2 = n1 | s10_1;
assign n3 = ~n2;
assign n4 = 6'b000001;
assign n5 = i1 - n4;
assign n6 = n3 ? n5 : i1;
assign n7 = {i2[15],
  i2[14],
  i2[13],
  i2[12],
  i2[11],
  i2[10],
  i2[9],
  i2[8],
  i2[7],
  i2[6],
  i2[5],
  i2[4],
  i2[3],
  i2[2],
  i2[1],
  i2[0]};
assign n8 = {i2[16],
  i2[15],
  i2[14],
  i2[13],
  i2[12],
  i2[11],
  i2[10],
  i2[9],
  i2[8],
  i2[7],
  i2[6],
  i2[5],
  i2[4],
  i2[3],
  i2[2],
  i2[1]};
assign n9 = n3 ? n7 : n8;
cf_fp_mul_p_5_10_23 s10 (i1, s10_1);
assign o2 = n9;
assign o1 = n6;
endmodule

module cf_fp_mul_p_5_10_19 (i1, i2, o1, o2);
input  [5:0] i1;
input  [17:0] i2;
output [5:0] o1;
output [16:0] o2;
wire   n1;
wire   n2;
wire   n3;
wire   [5:0] n4;
wire   [5:0] n5;
wire   [5:0] n6;
wire   [16:0] n7;
wire   [16:0] n8;
wire   [16:0] n9;
wire   s10_1;
assign n1 = i2[17];
assign n2 = n1 | s10_1;
assign n3 = ~n2;
assign n4 = 6'b000001;
assign n5 = i1 - n4;
assign n6 = n3 ? n5 : i1;
assign n7 = {i2[16],
  i2[15],
  i2[14],
  i2[13],
  i2[12],
  i2[11],
  i2[10],
  i2[9],
  i2[8],
  i2[7],
  i2[6],
  i2[5],
  i2[4],
  i2[3],
  i2[2],
  i2[1],
  i2[0]};
assign n8 = {i2[17],
  i2[16],
  i2[15],
  i2[14],
  i2[13],
  i2[12],
  i2[11],
  i2[10],
  i2[9],
  i2[8],
  i2[7],
  i2[6],
  i2[5],
  i2[4],
  i2[3],
  i2[2],
  i2[1]};
assign n9 = n3 ? n7 : n8;
cf_fp_mul_p_5_10_23 s10 (i1, s10_1);
assign o2 = n9;
assign o1 = n6;
endmodule

module cf_fp_mul_p_5_10_20 (i1, i2, o1, o2);
input  [5:0] i1;
input  [18:0] i2;
output [5:0] o1;
output [17:0] o2;
wire   n1;
wire   n2;
wire   n3;
wire   [5:0] n4;
wire   [5:0] n5;
wire   [5:0] n6;
wire   [17:0] n7;
wire   [17:0] n8;
wire   [17:0] n9;
wire   s10_1;
assign n1 = i2[18];
assign n2 = n1 | s10_1;
assign n3 = ~n2;
assign n4 = 6'b000001;
assign n5 = i1 - n4;
assign n6 = n3 ? n5 : i1;
assign n7 = {i2[17],
  i2[16],
  i2[15],
  i2[14],
  i2[13],
  i2[12],
  i2[11],
  i2[10],
  i2[9],
  i2[8],
  i2[7],
  i2[6],
  i2[5],
  i2[4],
  i2[3],
  i2[2],
  i2[1],
  i2[0]};
assign n8 = {i2[18],
  i2[17],
  i2[16],
  i2[15],
  i2[14],
  i2[13],
  i2[12],
  i2[11],
  i2[10],
  i2[9],
  i2[8],
  i2[7],
  i2[6],
  i2[5],
  i2[4],
  i2[3],
  i2[2],
  i2[1]};
assign n9 = n3 ? n7 : n8;
cf_fp_mul_p_5_10_23 s10 (i1, s10_1);
assign o2 = n9;
assign o1 = n6;
endmodule

module cf_fp_mul_p_5_10_21 (i1, i2, o1, o2);
input  [5:0] i1;
input  [19:0] i2;
output [5:0] o1;
output [18:0] o2;
wire   n1;
wire   n2;
wire   n3;
wire   [5:0] n4;
wire   [5:0] n5;
wire   [5:0] n6;
wire   [18:0] n7;
wire   [18:0] n8;
wire   [18:0] n9;
wire   s10_1;
assign n1 = i2[19];
assign n2 = n1 | s10_1;
assign n3 = ~n2;
assign n4 = 6'b000001;
assign n5 = i1 - n4;
assign n6 = n3 ? n5 : i1;
assign n7 = {i2[18],
  i2[17],
  i2[16],
  i2[15],
  i2[14],
  i2[13],
  i2[12],
  i2[11],
  i2[10],
  i2[9],
  i2[8],
  i2[7],
  i2[6],
  i2[5],
  i2[4],
  i2[3],
  i2[2],
  i2[1],
  i2[0]};
assign n8 = {i2[19],
  i2[18],
  i2[17],
  i2[16],
  i2[15],
  i2[14],
  i2[13],
  i2[12],
  i2[11],
  i2[10],
  i2[9],
  i2[8],
  i2[7],
  i2[6],
  i2[5],
  i2[4],
  i2[3],
  i2[2],
  i2[1]};
assign n9 = n3 ? n7 : n8;
cf_fp_mul_p_5_10_23 s10 (i1, s10_1);
assign o2 = n9;
assign o1 = n6;
endmodule

module cf_fp_mul_p_5_10_22 (i1, i2, o1, o2);
input  [5:0] i1;
input  [20:0] i2;
output [5:0] o1;
output [19:0] o2;
wire   n1;
wire   n2;
wire   n3;
wire   [5:0] n4;
wire   [5:0] n5;
wire   [5:0] n6;
wire   [19:0] n7;
wire   [19:0] n8;
wire   [19:0] n9;
wire   s10_1;
assign n1 = i2[20];
assign n2 = n1 | s10_1;
assign n3 = ~n2;
assign n4 = 6'b000001;
assign n5 = i1 - n4;
assign n6 = n3 ? n5 : i1;
assign n7 = {i2[19],
  i2[18],
  i2[17],
  i2[16],
  i2[15],
  i2[14],
  i2[13],
  i2[12],
  i2[11],
  i2[10],
  i2[9],
  i2[8],
  i2[7],
  i2[6],
  i2[5],
  i2[4],
  i2[3],
  i2[2],
  i2[1],
  i2[0]};
assign n8 = {i2[20],
  i2[19],
  i2[18],
  i2[17],
  i2[16],
  i2[15],
  i2[14],
  i2[13],
  i2[12],
  i2[11],
  i2[10],
  i2[9],
  i2[8],
  i2[7],
  i2[6],
  i2[5],
  i2[4],
  i2[3],
  i2[2],
  i2[1]};
assign n9 = n3 ? n7 : n8;
cf_fp_mul_p_5_10_23 s10 (i1, s10_1);
assign o2 = n9;
assign o1 = n6;
endmodule

module cf_fp_mul_p_5_10_23 (i1, o1);
input  [5:0] i1;
output o1;
wire   n1;
wire   [4:0] n2;
wire   n3;
wire   n4;
wire   n5;
wire   n6;
wire   n7;
wire   n8;
wire   s9_1;
wire   s9_2;
wire   s9_3;
wire   s9_4;
wire   s9_5;
assign n1 = i1[5];
assign n2 = {i1[4],
  i1[3],
  i1[2],
  i1[1],
  i1[0]};
assign n3 = n1 | s9_1;
assign n4 = s9_2 | s9_3;
assign n5 = s9_4 | s9_5;
assign n6 = n3 | n4;
assign n7 = n6 | n5;
assign n8 = ~n7;
cf_fp_mul_p_5_10_28 s9 (n2, s9_1, s9_2, s9_3, s9_4, s9_5);
assign o1 = n8;
endmodule

module cf_fp_mul_p_5_10_24 (i1, i2, o1, o2, o3, o4, o5, o6, o7);
input  [15:0] i1;
input  [15:0] i2;
output o1;
output o2;
output o3;
output o4;
output o5;
output [5:0] o6;
output [21:0] o7;
wire   n1;
wire   [4:0] n2;
wire   [9:0] n3;
wire   n4;
wire   [4:0] n5;
wire   [9:0] n6;
wire   n7;
wire   n8;
wire   n9;
wire   n10;
wire   n11;
wire   n12;
wire   n13;
wire   n14;
wire   n15;
wire   n16;
wire   [5:0] n17;
wire   n18;
wire   [5:0] n19;
wire   [5:0] n20;
wire   [5:0] n21;
wire   n22;
wire   [10:0] n23;
wire   n24;
wire   [10:0] n25;
wire   [21:0] n26;
wire   [5:0] n27;
wire   s28_1;
wire   s28_2;
wire   s28_3;
wire   s28_4;
wire   s28_5;
wire   s29_1;
wire   s29_2;
wire   s29_3;
wire   s29_4;
wire   s29_5;
assign n1 = i1[15];
assign n2 = {i1[14],
  i1[13],
  i1[12],
  i1[11],
  i1[10]};
assign n3 = {i1[9],
  i1[8],
  i1[7],
  i1[6],
  i1[5],
  i1[4],
  i1[3],
  i1[2],
  i1[1],
  i1[0]};
assign n4 = i2[15];
assign n5 = {i2[14],
  i2[13],
  i2[12],
  i2[11],
  i2[10]};
assign n6 = {i2[9],
  i2[8],
  i2[7],
  i2[6],
  i2[5],
  i2[4],
  i2[3],
  i2[2],
  i2[1],
  i2[0]};
assign n7 = s29_2 | s29_1;
assign n8 = s28_2 | s28_1;
assign n9 = n7 | n8;
assign n10 = s29_3 & s28_4;
assign n11 = s29_4 & s28_3;
assign n12 = n10 | n11;
assign n13 = s29_3 | s28_3;
assign n14 = s29_4 | s28_4;
assign n15 = n1 ^ n4;
assign n16 = 1'b0;
assign n17 = {n16, n2};
assign n18 = 1'b0;
assign n19 = {n18, n5};
assign n20 = n17 + n19;
assign n21 = n20 - n27;
assign n22 = ~s29_5;
assign n23 = {n22, n3};
assign n24 = ~s28_5;
assign n25 = {n24, n6};
assign n26 = {{11{1'b0}}, n23} * {{11{1'b0}}, n25};
assign n27 = 6'b001111;
cf_fp_mul_p_5_10_25 s28 (i2, s28_1, s28_2, s28_3, s28_4, s28_5);
cf_fp_mul_p_5_10_25 s29 (i1, s29_1, s29_2, s29_3, s29_4, s29_5);
assign o7 = n26;
assign o6 = n21;
assign o5 = n15;
assign o4 = n14;
assign o3 = n13;
assign o2 = n12;
assign o1 = n9;
endmodule

module cf_fp_mul_p_5_10_25 (i1, o1, o2, o3, o4, o5);
input  [15:0] i1;
output o1;
output o2;
output o3;
output o4;
output o5;
wire   [4:0] n1;
wire   [9:0] n2;
wire   n3;
wire   n4;
wire   n5;
wire   n6;
wire   n7;
wire   n8;
wire   n9;
wire   n10;
wire   n11;
wire   n12;
wire   [8:0] n13;
wire   n14;
wire   n15;
wire   n16;
wire   n17;
wire   n18;
wire   n19;
wire   n20;
wire   n21;
wire   n22;
wire   n23;
wire   n24;
wire   n25;
wire   s26_1;
wire   s26_2;
wire   s26_3;
wire   s26_4;
wire   s26_5;
wire   s27_1;
wire   s27_2;
wire   s27_3;
wire   s27_4;
wire   s27_5;
wire   s28_1;
wire   s28_2;
wire   s28_3;
wire   s28_4;
wire   s28_5;
wire   s28_6;
wire   s28_7;
wire   s28_8;
wire   s28_9;
wire   s29_1;
assign n1 = {i1[14],
  i1[13],
  i1[12],
  i1[11],
  i1[10]};
assign n2 = {i1[9],
  i1[8],
  i1[7],
  i1[6],
  i1[5],
  i1[4],
  i1[3],
  i1[2],
  i1[1],
  i1[0]};
assign n3 = s26_1 & s26_2;
assign n4 = s26_3 & s26_4;
assign n5 = n3 & n4;
assign n6 = n5 & s26_5;
assign n7 = s27_1 | s27_2;
assign n8 = s27_3 | s27_4;
assign n9 = n7 | n8;
assign n10 = n9 | s27_5;
assign n11 = ~n10;
assign n12 = n2[9];
assign n13 = {n2[8],
  n2[7],
  n2[6],
  n2[5],
  n2[4],
  n2[3],
  n2[2],
  n2[1],
  n2[0]};
assign n14 = ~s29_1;
assign n15 = n2[9];
assign n16 = n6 & n15;
assign n17 = n2[9];
assign n18 = ~n17;
assign n19 = n6 & n18;
assign n20 = ~n14;
assign n21 = n19 & n20;
assign n22 = n6 & n14;
assign n23 = n11 & n14;
assign n24 = ~n14;
assign n25 = n11 & n24;
cf_fp_mul_p_5_10_28 s26 (n1, s26_1, s26_2, s26_3, s26_4, s26_5);
cf_fp_mul_p_5_10_28 s27 (n1, s27_1, s27_2, s27_3, s27_4, s27_5);
cf_fp_mul_p_5_10_27 s28 (n13, s28_1, s28_2, s28_3, s28_4, s28_5, s28_6, s28_7, s28_8, s28_9);
cf_fp_mul_p_5_10_26 s29 (n12, s28_1, s28_2, s28_3, s28_4, s28_5, s28_6, s28_7, s28_8, s28_9, s29_1);
assign o5 = n25;
assign o4 = n23;
assign o3 = n22;
assign o2 = n21;
assign o1 = n16;
endmodule

module cf_fp_mul_p_5_10_26 (i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, o1);
input  i1;
input  i2;
input  i3;
input  i4;
input  i5;
input  i6;
input  i7;
input  i8;
input  i9;
input  i10;
output o1;
wire   n1;
wire   n2;
wire   n3;
wire   n4;
wire   n5;
wire   n6;
wire   n7;
wire   n8;
wire   n9;
assign n1 = i1 | i2;
assign n2 = i3 | i4;
assign n3 = i5 | i6;
assign n4 = i7 | i8;
assign n5 = i9 | i10;
assign n6 = n1 | n2;
assign n7 = n3 | n4;
assign n8 = n6 | n7;
assign n9 = n8 | n5;
assign o1 = n9;
endmodule

module cf_fp_mul_p_5_10_27 (i1, o1, o2, o3, o4, o5, o6, o7, o8, o9);
input  [8:0] i1;
output o1;
output o2;
output o3;
output o4;
output o5;
output o6;
output o7;
output o8;
output o9;
wire   n1;
wire   [7:0] n2;
wire   n3;
wire   [6:0] n4;
wire   n5;
wire   [5:0] n6;
wire   n7;
wire   [4:0] n8;
wire   s9_1;
wire   s9_2;
wire   s9_3;
wire   s9_4;
wire   s9_5;
assign n1 = i1[8];
assign n2 = {i1[7],
  i1[6],
  i1[5],
  i1[4],
  i1[3],
  i1[2],
  i1[1],
  i1[0]};
assign n3 = n2[7];
assign n4 = {n2[6],
  n2[5],
  n2[4],
  n2[3],
  n2[2],
  n2[1],
  n2[0]};
assign n5 = n4[6];
assign n6 = {n4[5],
  n4[4],
  n4[3],
  n4[2],
  n4[1],
  n4[0]};
assign n7 = n6[5];
assign n8 = {n6[4],
  n6[3],
  n6[2],
  n6[1],
  n6[0]};
cf_fp_mul_p_5_10_28 s9 (n8, s9_1, s9_2, s9_3, s9_4, s9_5);
assign o9 = s9_5;
assign o8 = s9_4;
assign o7 = s9_3;
assign o6 = s9_2;
assign o5 = s9_1;
assign o4 = n7;
assign o3 = n5;
assign o2 = n3;
assign o1 = n1;
endmodule

module cf_fp_mul_p_5_10_28 (i1, o1, o2, o3, o4, o5);
input  [4:0] i1;
output o1;
output o2;
output o3;
output o4;
output o5;
wire   n1;
wire   [3:0] n2;
wire   n3;
wire   [2:0] n4;
wire   n5;
wire   [1:0] n6;
wire   n7;
wire   n8;
wire   n9;
assign n1 = i1[4];
assign n2 = {i1[3],
  i1[2],
  i1[1],
  i1[0]};
assign n3 = n2[3];
assign n4 = {n2[2],
  n2[1],
  n2[0]};
assign n5 = n4[2];
assign n6 = {n4[1],
  n4[0]};
assign n7 = n6[1];
assign n8 = n6[0];
assign n9 = n8;
assign o5 = n9;
assign o4 = n7;
assign o3 = n5;
assign o2 = n3;
assign o1 = n1;
endmodule

module cf_fp_mul_p_5_10_29 (i1, i2, i3, i4, i5, i6, i7, o1);
input  i1;
input  i2;
input  i3;
input  i4;
input  i5;
input  [5:0] i6;
input  [10:0] i7;
output [15:0] o1;
wire   [4:0] n1;
wire   [9:0] n2;
wire   [14:0] n3;
wire   [14:0] n4;
wire   [1:0] n5;
wire   [2:0] n6;
wire   [3:0] n7;
wire   [2:0] n8;
wire   [2:0] n9;
wire   [2:0] n10;
wire   [2:0] n11;
wire   [2:0] n12;
wire   [15:0] n13;
wire   [14:0] n14;
wire   [14:0] n15;
wire   [14:0] n16;
wire   [2:0] s17_1;
wire   [14:0] s18_1;
assign n1 = {i6[4],
  i6[3],
  i6[2],
  i6[1],
  i6[0]};
assign n2 = {i7[9],
  i7[8],
  i7[7],
  i7[6],
  i7[5],
  i7[4],
  i7[3],
  i7[2],
  i7[1],
  i7[0]};
assign n3 = {n1, n2};
assign n4 = 15'b000000000000000;
assign n5 = {i3, i4};
assign n6 = {i2, n5};
assign n7 = {i1, n6};
assign n8 = 3'b000;
assign n9 = 3'b001;
assign n10 = 3'b010;
assign n11 = 3'b011;
assign n12 = 3'b100;
assign n13 = {i5, s18_1};
assign n14 = 15'b111110000000000;
assign n15 = 15'b111111111111111;
assign n16 = 15'b111110111111111;
cf_fp_mul_p_5_10_31 s17 (n7, n8, n9, n10, n11, n12, s17_1);
cf_fp_mul_p_5_10_30 s18 (n3, n4, s17_1, n14, n15, n16, s18_1);
assign o1 = n13;
endmodule

module cf_fp_mul_p_5_10_30 (i1, i2, i3, i4, i5, i6, o1);
input  [14:0] i1;
input  [14:0] i2;
input  [2:0] i3;
input  [14:0] i4;
input  [14:0] i5;
input  [14:0] i6;
output [14:0] o1;
wire   [1:0] n1;
wire   n2;
wire   [14:0] n3;
wire   [14:0] n4;
wire   n5;
wire   n6;
wire   [14:0] n7;
wire   n8;
wire   [14:0] n9;
assign n1 = {i3[2],
  i3[1]};
assign n2 = i3[0];
assign n3 = n2 ? i2 : i1;
assign n4 = n2 ? i5 : i4;
assign n5 = n1[1];
assign n6 = n1[0];
assign n7 = n6 ? n4 : n3;
assign n8 = n5;
assign n9 = n8 ? i6 : n7;
assign o1 = n9;
endmodule

module cf_fp_mul_p_5_10_31 (i1, i2, i3, i4, i5, i6, o1);
input  [3:0] i1;
input  [2:0] i2;
input  [2:0] i3;
input  [2:0] i4;
input  [2:0] i5;
input  [2:0] i6;
output [2:0] o1;
wire   [3:0] n1;
wire   n2;
wire   [3:0] n3;
wire   n4;
wire   [3:0] n5;
wire   n6;
wire   [2:0] n7;
wire   [2:0] n8;
wire   [2:0] n9;
wire   [2:0] s10_1;
assign n1 = 4'b1000;
assign n2 = i1 == n1;
assign n3 = 4'b1001;
assign n4 = i1 == n3;
assign n5 = 4'b1010;
assign n6 = i1 == n5;
assign n7 = n6 ? i6 : s10_1;
assign n8 = n4 ? i6 : n7;
assign n9 = n2 ? i6 : n8;
cf_fp_mul_p_5_10_32 s10 (i1, i2, i3, i4, i5, i6, s10_1);
assign o1 = n9;
endmodule

module cf_fp_mul_p_5_10_32 (i1, i2, i3, i4, i5, i6, o1);
input  [3:0] i1;
input  [2:0] i2;
input  [2:0] i3;
input  [2:0] i4;
input  [2:0] i5;
input  [2:0] i6;
output [2:0] o1;
wire   [3:0] n1;
wire   n2;
wire   [3:0] n3;
wire   n4;
wire   [3:0] n5;
wire   n6;
wire   [2:0] n7;
wire   [2:0] n8;
wire   [2:0] n9;
wire   [2:0] s10_1;
assign n1 = 4'b1011;
assign n2 = i1 == n1;
assign n3 = 4'b1100;
assign n4 = i1 == n3;
assign n5 = 4'b1101;
assign n6 = i1 == n5;
assign n7 = n6 ? i6 : s10_1;
assign n8 = n4 ? i6 : n7;
assign n9 = n2 ? i6 : n8;
cf_fp_mul_p_5_10_33 s10 (i1, i2, i3, i4, i5, i6, s10_1);
assign o1 = n9;
endmodule

module cf_fp_mul_p_5_10_33 (i1, i2, i3, i4, i5, i6, o1);
input  [3:0] i1;
input  [2:0] i2;
input  [2:0] i3;
input  [2:0] i4;
input  [2:0] i5;
input  [2:0] i6;
output [2:0] o1;
wire   [3:0] n1;
wire   n2;
wire   [3:0] n3;
wire   n4;
wire   [3:0] n5;
wire   n6;
wire   [2:0] n7;
wire   [2:0] n8;
wire   [2:0] n9;
wire   [2:0] s10_1;
assign n1 = 4'b1110;
assign n2 = i1 == n1;
assign n3 = 4'b1111;
assign n4 = i1 == n3;
assign n5 = 4'b0100;
assign n6 = i1 == n5;
assign n7 = n6 ? i5 : s10_1;
assign n8 = n4 ? i6 : n7;
assign n9 = n2 ? i6 : n8;
cf_fp_mul_p_5_10_34 s10 (i1, i2, i3, i4, i5, s10_1);
assign o1 = n9;
endmodule

module cf_fp_mul_p_5_10_34 (i1, i2, i3, i4, i5, o1);
input  [3:0] i1;
input  [2:0] i2;
input  [2:0] i3;
input  [2:0] i4;
input  [2:0] i5;
output [2:0] o1;
wire   [3:0] n1;
wire   n2;
wire   [3:0] n3;
wire   n4;
wire   [3:0] n5;
wire   n6;
wire   [2:0] n7;
wire   [2:0] n8;
wire   [2:0] n9;
wire   [2:0] s10_1;
assign n1 = 4'b0101;
assign n2 = i1 == n1;
assign n3 = 4'b0110;
assign n4 = i1 == n3;
assign n5 = 4'b0111;
assign n6 = i1 == n5;
assign n7 = n6 ? i5 : s10_1;
assign n8 = n4 ? i5 : n7;
assign n9 = n2 ? i5 : n8;
cf_fp_mul_p_5_10_35 s10 (i1, i2, i3, i4, s10_1);
assign o1 = n9;
endmodule

module cf_fp_mul_p_5_10_35 (i1, i2, i3, i4, o1);
input  [3:0] i1;
input  [2:0] i2;
input  [2:0] i3;
input  [2:0] i4;
output [2:0] o1;
wire   [3:0] n1;
wire   n2;
wire   [3:0] n3;
wire   n4;
wire   [3:0] n5;
wire   n6;
wire   [2:0] n7;
wire   [2:0] n8;
wire   [2:0] n9;
assign n1 = 4'b0010;
assign n2 = i1 == n1;
assign n3 = 4'b0011;
assign n4 = i1 == n3;
assign n5 = 4'b0001;
assign n6 = i1 == n5;
assign n7 = n6 ? i3 : i2;
assign n8 = n4 ? i4 : n7;
assign n9 = n2 ? i4 : n8;
assign o1 = n9;
endmodule

