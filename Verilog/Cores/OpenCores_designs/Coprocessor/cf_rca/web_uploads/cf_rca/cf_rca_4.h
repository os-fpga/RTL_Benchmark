//
//  Copyright (c) 2003 Launchbird Design Systems, Inc.
//  All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//    Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
//    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
//  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
//  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
//  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  Overview:
//  
//    Reconfigurable Computing Array (RCA) is a fine-grained array of programmable tiles.
//    Similar to FPGA CLBs, a tile can implement a wide variety of logic functions.
//    But unlike most FPGAs, RCA can be partially reconfigured dynamically.
//  
//    Also, RCA has no routing fabric.  Instead, the square tiles communicate directly
//    with their nearest neighbor (N, S, W, E), providing fast, deterministic timing and 
//    far greater logic density compared with FPGAs.
//  
//    Each tile implements a programmable 4-bit input to 4-bit output function.
//  
//  Interface:
//  
//    Each side of the array comprises 2 N-bit data buses for a total of 8 buses:
//    north_i, north_o, south_i, south_o, west_i, west_o, east_i, and east_o.
//    The 0 bit in each bus corresponds to northern most or western most tile.
//    All tile registers are synchronized on clock_main_c.
//  
//    Device programming is controlled via the configuration bus.  Each directional datapath
//    of each tile is addressable for configuration.  The configuration addressing format follows:
//  
//      ConfigAddr = {RowSelect, ColSelect, DirSelect} where
//      DirSelect  : 00=north, 01=south, 10=west, 11=east.
//  
//    The configuration data format follows:
//  
//      ConfigData[17]    : Output Select (0=direct, 1=registered)
//      ConfigData[16:14] : Input Select 2  (000=north_in, 001=south_in, 010=west_in, 011=east_in, 100=north_state, 101=south_state, 110=west_state, 111=east_state
//      ConfigData[13:11] : Input Select 1
//      ConfigData[10:8]  : Input Select 0
//      ConfigData[7:0]   : LUT data  {f(7), f(6), f(5), f(4), f(3), f(2), f(1), f(0)}
//  
//  
//  Generated by Confluence 0.6.3  --  Launchbird Design Systems, Inc.  --  www.launchbird.com
//  
//  Build Date : Thu Aug 21 15:05:41 CDT 2003
//  
//  Interface
//  
//    Build Name    : cf_rca_4
//    Clock Domains : clock_config_c  clock_main_c  
//    Vector Input  : config_write_i(1)
//    Vector Input  : config_addr_i(6)
//    Vector Input  : config_data_i(18)
//    Vector Input  : north_i(4)
//    Vector Input  : south_i(4)
//    Vector Input  : west_i(4)
//    Vector Input  : east_i(4)
//    Vector Output : north_o(4)
//    Vector Output : south_o(4)
//    Vector Output : west_o(4)
//    Vector Output : east_o(4)
//  
//  
//  

#ifdef __cplusplus
extern "C" {
#endif

void cf_rca_4_ports(unsigned char* port_config_write_i, unsigned char* port_config_addr_i, unsigned char* port_config_data_i, unsigned char* port_north_i, unsigned char* port_south_i, unsigned char* port_west_i, unsigned char* port_east_i, unsigned char* port_north_o, unsigned char* port_south_o, unsigned char* port_west_o, unsigned char* port_east_o);
void cf_rca_4_init();
void cf_rca_4_calc();
void cf_rca_4_cycle_clock_config();
void cf_rca_4_cycle_clock_main();
void cf_rca_4_sim_init(const char* file);
void cf_rca_4_sim_end();
void cf_rca_4_sim_sample();

#ifdef __cplusplus
}
#endif

