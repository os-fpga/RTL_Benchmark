//
//  Copyright (c) 2003 Launchbird Design Systems, Inc.
//  All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//    Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
//    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
//  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
//  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
//  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  
//  Overview:
//  
//    Performs finite impulse response (FIR) filtering.
//    The filter's sum of products is pipelined with a register after
//    every multiplier and adder.  The adder network is a balanced binary
//    tree to minimize latency.  The sum of products has no numeric loss because the
//    multipliers keep all resulting bits and each adder extends the precision by 1.
//  
//  Interface:
//  
//    Synchronization:
//      clock_c  : Clock input.
//      reset_i  : Filter delay bank synchronous reset.  Does not reset sum of products pipeline registers.
//  
//    Inputs:
//      data_i  : Input data.
//      k0_i    : Coefficient 0 multiplied by in_i(0).
//      k1_i    : Coefficient 1 multiplied by in_i(k-1).
//      k2_i    : Coefficient 2 multiplied by in_i(k-2).
//      ...
//      k<order>_i : Coefficient <order> multiplied by in_i(k-<order>).
//  
//    Outputs:
//      data_o : Output data.
//  
//  Built In Parameters:
//  
//    Filter Order             = 12
//    Input Precision          = 16
//    Coefficient Precision    = 10
//    Sum of Products Latency  = 5
//  
//  
//  
//  
//  Generated by Confluence 0.6.3  --  Launchbird Design Systems, Inc.  --  www.launchbird.com
//  
//  Build Date : Fri Aug 22 09:45:51 CDT 2003
//  
//  Interface
//  
//    Build Name    : cf_fir_12_16_10
//    Clock Domains : clock_c  
//    Vector Input  : reset_i(1)
//    Vector Input  : data_i(16)
//    Vector Input  : k0_i(10)
//    Vector Input  : k1_i(10)
//    Vector Input  : k2_i(10)
//    Vector Input  : k3_i(10)
//    Vector Input  : k4_i(10)
//    Vector Input  : k5_i(10)
//    Vector Input  : k6_i(10)
//    Vector Input  : k7_i(10)
//    Vector Input  : k8_i(10)
//    Vector Input  : k9_i(10)
//    Vector Input  : k10_i(10)
//    Vector Input  : k11_i(10)
//    Vector Input  : k12_i(10)
//    Vector Output : data_o(30)
//  
//  
//  

`timescale 1 ns / 1 ns

module cf_fir_12_16_10 (clock_c, reset_i, data_i, k0_i, k1_i, k2_i, k3_i, k4_i, k5_i, k6_i, k7_i, k8_i, k9_i, k10_i, k11_i, k12_i, data_o);
input  clock_c;
input  reset_i;
input  [15:0] data_i;
input  [9:0] k0_i;
input  [9:0] k1_i;
input  [9:0] k2_i;
input  [9:0] k3_i;
input  [9:0] k4_i;
input  [9:0] k5_i;
input  [9:0] k6_i;
input  [9:0] k7_i;
input  [9:0] k8_i;
input  [9:0] k9_i;
input  [9:0] k10_i;
input  [9:0] k11_i;
input  [9:0] k12_i;
output [29:0] data_o;
wire   [29:0] n1;
cf_fir_12_16_10_1 s1 (clock_c, reset_i, k0_i, k1_i, k2_i, k3_i, k4_i, k5_i, k6_i, k7_i, k8_i, k9_i, k10_i, k11_i, k12_i, data_i, n1);
assign data_o = n1;
endmodule

module cf_fir_12_16_10_1 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, o1);
input  clock_c;
input  i1;
input  [9:0] i2;
input  [9:0] i3;
input  [9:0] i4;
input  [9:0] i5;
input  [9:0] i6;
input  [9:0] i7;
input  [9:0] i8;
input  [9:0] i9;
input  [9:0] i10;
input  [9:0] i11;
input  [9:0] i12;
input  [9:0] i13;
input  [9:0] i14;
input  [15:0] i15;
output [29:0] o1;
wire   n1;
wire   n2;
wire   [29:0] s3_1;
assign n1 = 1'b1;
assign n2 = 1'b0;
cf_fir_12_16_10_2 s3 (clock_c, n1, n2, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, s3_1);
assign o1 = s3_1;
endmodule

module cf_fir_12_16_10_2 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, o1);
input  clock_c;
input  i1;
input  i2;
input  i3;
input  [9:0] i4;
input  [9:0] i5;
input  [9:0] i6;
input  [9:0] i7;
input  [9:0] i8;
input  [9:0] i9;
input  [9:0] i10;
input  [9:0] i11;
input  [9:0] i12;
input  [9:0] i13;
input  [9:0] i14;
input  [9:0] i15;
input  [9:0] i16;
input  [15:0] i17;
output [29:0] o1;
reg    [15:0] n1;
reg    [15:0] n2;
reg    [15:0] n3;
reg    [15:0] n4;
reg    [15:0] n5;
wire   [25:0] n6;
reg    [25:0] n7;
wire   [15:0] s8_1;
wire   [15:0] s8_2;
wire   [15:0] s8_3;
wire   [15:0] s8_4;
wire   [15:0] s8_5;
wire   [15:0] s8_6;
wire   [15:0] s8_7;
wire   [15:0] s8_8;
wire   [25:0] s9_1;
wire   [25:0] s9_2;
wire   [25:0] s9_3;
wire   [25:0] s9_4;
wire   [25:0] s9_5;
wire   [25:0] s9_6;
wire   [25:0] s9_7;
wire   [25:0] s9_8;
wire   [25:0] s9_9;
wire   [25:0] s9_10;
wire   [25:0] s9_11;
wire   [25:0] s9_12;
wire   [29:0] s10_1;
initial n1 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i3 == 1'b1)
    n1 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n1 <= i17;
initial n2 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i3 == 1'b1)
    n2 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n2 <= n1;
initial n3 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i3 == 1'b1)
    n3 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n3 <= n2;
initial n4 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i3 == 1'b1)
    n4 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n4 <= n3;
initial n5 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i3 == 1'b1)
    n5 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n5 <= n4;
assign n6 = {{16{1'b0}}, i4} * {{10{1'b0}}, n1};
initial n7 = 26'b00000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n7 <= 26'b00000000000000000000000000;
  else if (i1 == 1'b1)
    n7 <= n6;
cf_fir_12_16_10_14 s8 (clock_c, i1, i3, n5, s8_1, s8_2, s8_3, s8_4, s8_5, s8_6, s8_7, s8_8);
cf_fir_12_16_10_11 s9 (clock_c, i1, i2, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, n2, n3, n4, n5, s8_1, s8_2, s8_3, s8_4, s8_5, s8_6, s8_7, s8_8, s9_1, s9_2, s9_3, s9_4, s9_5, s9_6, s9_7, s9_8, s9_9, s9_10, s9_11, s9_12);
cf_fir_12_16_10_3 s10 (clock_c, i1, i2, n7, s9_1, s9_2, s9_3, s9_4, s9_5, s9_6, s9_7, s9_8, s9_9, s9_10, s9_11, s9_12, s10_1);
assign o1 = s10_1;
endmodule

module cf_fir_12_16_10_3 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, o1);
input  clock_c;
input  i1;
input  i2;
input  [25:0] i3;
input  [25:0] i4;
input  [25:0] i5;
input  [25:0] i6;
input  [25:0] i7;
input  [25:0] i8;
input  [25:0] i9;
input  [25:0] i10;
input  [25:0] i11;
input  [25:0] i12;
input  [25:0] i13;
input  [25:0] i14;
input  [25:0] i15;
output [29:0] o1;
wire   n1;
wire   [26:0] n2;
wire   n3;
wire   [26:0] n4;
wire   [26:0] n5;
reg    [26:0] n6;
wire   [26:0] s7_1;
wire   [26:0] s7_2;
wire   [26:0] s7_3;
wire   [26:0] s7_4;
wire   [26:0] s7_5;
wire   [26:0] s7_6;
wire   [29:0] s8_1;
assign n1 = i3[25];
assign n2 = {n1, i3};
assign n3 = i4[25];
assign n4 = {n3, i4};
assign n5 = n2 + n4;
initial n6 = 27'b000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 27'b000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
cf_fir_12_16_10_8 s7 (clock_c, i1, i2, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, s7_1, s7_2, s7_3, s7_4, s7_5, s7_6);
cf_fir_12_16_10_4 s8 (clock_c, i1, i2, n6, s7_1, s7_2, s7_3, s7_4, s7_5, s7_6, s8_1);
assign o1 = s8_1;
endmodule

module cf_fir_12_16_10_4 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, o1);
input  clock_c;
input  i1;
input  i2;
input  [26:0] i3;
input  [26:0] i4;
input  [26:0] i5;
input  [26:0] i6;
input  [26:0] i7;
input  [26:0] i8;
input  [26:0] i9;
output [29:0] o1;
wire   n1;
wire   [29:0] n2;
wire   n3;
wire   [29:0] n4;
wire   [29:0] n5;
reg    [29:0] n6;
wire   [28:0] s7_1;
wire   [28:0] s7_2;
wire   [27:0] s8_1;
wire   [27:0] s8_2;
wire   [27:0] s8_3;
wire   [27:0] s8_4;
assign n1 = s7_1[28];
assign n2 = {n1, s7_1};
assign n3 = s7_2[28];
assign n4 = {n3, s7_2};
assign n5 = n2 + n4;
initial n6 = 30'b000000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 30'b000000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
cf_fir_12_16_10_7 s7 (clock_c, i1, i2, s8_1, s8_2, s8_3, s8_4, s7_1, s7_2);
cf_fir_12_16_10_5 s8 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, s8_1, s8_2, s8_3, s8_4);
assign o1 = n6;
endmodule

module cf_fir_12_16_10_5 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, o1, o2, o3, o4);
input  clock_c;
input  i1;
input  i2;
input  [26:0] i3;
input  [26:0] i4;
input  [26:0] i5;
input  [26:0] i6;
input  [26:0] i7;
input  [26:0] i8;
input  [26:0] i9;
output [27:0] o1;
output [27:0] o2;
output [27:0] o3;
output [27:0] o4;
wire   n1;
wire   [27:0] n2;
wire   n3;
wire   [27:0] n4;
wire   [27:0] n5;
reg    [27:0] n6;
wire   n7;
wire   [27:0] n8;
wire   n9;
wire   [27:0] n10;
wire   [27:0] n11;
reg    [27:0] n12;
wire   [27:0] s13_1;
wire   [27:0] s13_2;
assign n1 = i3[26];
assign n2 = {n1, i3};
assign n3 = i4[26];
assign n4 = {n3, i4};
assign n5 = n2 + n4;
initial n6 = 28'b0000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 28'b0000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
assign n7 = i5[26];
assign n8 = {n7, i5};
assign n9 = i6[26];
assign n10 = {n9, i6};
assign n11 = n8 + n10;
initial n12 = 28'b0000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n12 <= 28'b0000000000000000000000000000;
  else if (i1 == 1'b1)
    n12 <= n11;
cf_fir_12_16_10_6 s13 (clock_c, i1, i2, i7, i8, i9, s13_1, s13_2);
assign o4 = s13_2;
assign o3 = s13_1;
assign o2 = n12;
assign o1 = n6;
endmodule

module cf_fir_12_16_10_6 (clock_c, i1, i2, i3, i4, i5, o1, o2);
input  clock_c;
input  i1;
input  i2;
input  [26:0] i3;
input  [26:0] i4;
input  [26:0] i5;
output [27:0] o1;
output [27:0] o2;
wire   n1;
wire   [27:0] n2;
wire   n3;
wire   [27:0] n4;
wire   [27:0] n5;
reg    [27:0] n6;
wire   n7;
wire   [27:0] n8;
reg    [27:0] n9;
assign n1 = i3[26];
assign n2 = {n1, i3};
assign n3 = i4[26];
assign n4 = {n3, i4};
assign n5 = n2 + n4;
initial n6 = 28'b0000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 28'b0000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
assign n7 = i5[26];
assign n8 = {n7, i5};
initial n9 = 28'b0000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n9 <= 28'b0000000000000000000000000000;
  else if (i1 == 1'b1)
    n9 <= n8;
assign o2 = n9;
assign o1 = n6;
endmodule

module cf_fir_12_16_10_7 (clock_c, i1, i2, i3, i4, i5, i6, o1, o2);
input  clock_c;
input  i1;
input  i2;
input  [27:0] i3;
input  [27:0] i4;
input  [27:0] i5;
input  [27:0] i6;
output [28:0] o1;
output [28:0] o2;
wire   n1;
wire   [28:0] n2;
wire   n3;
wire   [28:0] n4;
wire   [28:0] n5;
reg    [28:0] n6;
wire   n7;
wire   [28:0] n8;
wire   n9;
wire   [28:0] n10;
wire   [28:0] n11;
reg    [28:0] n12;
assign n1 = i3[27];
assign n2 = {n1, i3};
assign n3 = i4[27];
assign n4 = {n3, i4};
assign n5 = n2 + n4;
initial n6 = 29'b00000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 29'b00000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
assign n7 = i5[27];
assign n8 = {n7, i5};
assign n9 = i6[27];
assign n10 = {n9, i6};
assign n11 = n8 + n10;
initial n12 = 29'b00000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n12 <= 29'b00000000000000000000000000000;
  else if (i1 == 1'b1)
    n12 <= n11;
assign o2 = n12;
assign o1 = n6;
endmodule

module cf_fir_12_16_10_8 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, o1, o2, o3, o4, o5, o6);
input  clock_c;
input  i1;
input  i2;
input  [25:0] i3;
input  [25:0] i4;
input  [25:0] i5;
input  [25:0] i6;
input  [25:0] i7;
input  [25:0] i8;
input  [25:0] i9;
input  [25:0] i10;
input  [25:0] i11;
input  [25:0] i12;
input  [25:0] i13;
output [26:0] o1;
output [26:0] o2;
output [26:0] o3;
output [26:0] o4;
output [26:0] o5;
output [26:0] o6;
wire   n1;
wire   [26:0] n2;
wire   n3;
wire   [26:0] n4;
wire   [26:0] n5;
reg    [26:0] n6;
wire   n7;
wire   [26:0] n8;
wire   n9;
wire   [26:0] n10;
wire   [26:0] n11;
reg    [26:0] n12;
wire   [26:0] s13_1;
wire   [26:0] s13_2;
wire   [26:0] s13_3;
wire   [26:0] s13_4;
assign n1 = i3[25];
assign n2 = {n1, i3};
assign n3 = i4[25];
assign n4 = {n3, i4};
assign n5 = n2 + n4;
initial n6 = 27'b000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 27'b000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
assign n7 = i5[25];
assign n8 = {n7, i5};
assign n9 = i6[25];
assign n10 = {n9, i6};
assign n11 = n8 + n10;
initial n12 = 27'b000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n12 <= 27'b000000000000000000000000000;
  else if (i1 == 1'b1)
    n12 <= n11;
cf_fir_12_16_10_9 s13 (clock_c, i1, i2, i7, i8, i9, i10, i11, i12, i13, s13_1, s13_2, s13_3, s13_4);
assign o6 = s13_4;
assign o5 = s13_3;
assign o4 = s13_2;
assign o3 = s13_1;
assign o2 = n12;
assign o1 = n6;
endmodule

module cf_fir_12_16_10_9 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, o1, o2, o3, o4);
input  clock_c;
input  i1;
input  i2;
input  [25:0] i3;
input  [25:0] i4;
input  [25:0] i5;
input  [25:0] i6;
input  [25:0] i7;
input  [25:0] i8;
input  [25:0] i9;
output [26:0] o1;
output [26:0] o2;
output [26:0] o3;
output [26:0] o4;
wire   n1;
wire   [26:0] n2;
wire   n3;
wire   [26:0] n4;
wire   [26:0] n5;
reg    [26:0] n6;
wire   n7;
wire   [26:0] n8;
wire   n9;
wire   [26:0] n10;
wire   [26:0] n11;
reg    [26:0] n12;
wire   [26:0] s13_1;
wire   [26:0] s13_2;
assign n1 = i3[25];
assign n2 = {n1, i3};
assign n3 = i4[25];
assign n4 = {n3, i4};
assign n5 = n2 + n4;
initial n6 = 27'b000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 27'b000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
assign n7 = i5[25];
assign n8 = {n7, i5};
assign n9 = i6[25];
assign n10 = {n9, i6};
assign n11 = n8 + n10;
initial n12 = 27'b000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n12 <= 27'b000000000000000000000000000;
  else if (i1 == 1'b1)
    n12 <= n11;
cf_fir_12_16_10_10 s13 (clock_c, i1, i2, i7, i8, i9, s13_1, s13_2);
assign o4 = s13_2;
assign o3 = s13_1;
assign o2 = n12;
assign o1 = n6;
endmodule

module cf_fir_12_16_10_10 (clock_c, i1, i2, i3, i4, i5, o1, o2);
input  clock_c;
input  i1;
input  i2;
input  [25:0] i3;
input  [25:0] i4;
input  [25:0] i5;
output [26:0] o1;
output [26:0] o2;
wire   n1;
wire   [26:0] n2;
wire   n3;
wire   [26:0] n4;
wire   [26:0] n5;
reg    [26:0] n6;
wire   n7;
wire   [26:0] n8;
reg    [26:0] n9;
assign n1 = i3[25];
assign n2 = {n1, i3};
assign n3 = i4[25];
assign n4 = {n3, i4};
assign n5 = n2 + n4;
initial n6 = 27'b000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 27'b000000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
assign n7 = i5[25];
assign n8 = {n7, i5};
initial n9 = 27'b000000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n9 <= 27'b000000000000000000000000000;
  else if (i1 == 1'b1)
    n9 <= n8;
assign o2 = n9;
assign o1 = n6;
endmodule

module cf_fir_12_16_10_11 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12);
input  clock_c;
input  i1;
input  i2;
input  [9:0] i3;
input  [9:0] i4;
input  [9:0] i5;
input  [9:0] i6;
input  [9:0] i7;
input  [9:0] i8;
input  [9:0] i9;
input  [9:0] i10;
input  [9:0] i11;
input  [9:0] i12;
input  [9:0] i13;
input  [9:0] i14;
input  [15:0] i15;
input  [15:0] i16;
input  [15:0] i17;
input  [15:0] i18;
input  [15:0] i19;
input  [15:0] i20;
input  [15:0] i21;
input  [15:0] i22;
input  [15:0] i23;
input  [15:0] i24;
input  [15:0] i25;
input  [15:0] i26;
output [25:0] o1;
output [25:0] o2;
output [25:0] o3;
output [25:0] o4;
output [25:0] o5;
output [25:0] o6;
output [25:0] o7;
output [25:0] o8;
output [25:0] o9;
output [25:0] o10;
output [25:0] o11;
output [25:0] o12;
wire   [25:0] n1;
reg    [25:0] n2;
wire   [25:0] n3;
reg    [25:0] n4;
wire   [25:0] n5;
reg    [25:0] n6;
wire   [25:0] n7;
reg    [25:0] n8;
wire   [25:0] s9_1;
wire   [25:0] s9_2;
wire   [25:0] s9_3;
wire   [25:0] s9_4;
wire   [25:0] s9_5;
wire   [25:0] s9_6;
wire   [25:0] s9_7;
wire   [25:0] s9_8;
assign n1 = {{16{1'b0}}, i3} * {{10{1'b0}}, i15};
initial n2 = 26'b00000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n2 <= 26'b00000000000000000000000000;
  else if (i1 == 1'b1)
    n2 <= n1;
assign n3 = {{16{1'b0}}, i4} * {{10{1'b0}}, i16};
initial n4 = 26'b00000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 26'b00000000000000000000000000;
  else if (i1 == 1'b1)
    n4 <= n3;
assign n5 = {{16{1'b0}}, i5} * {{10{1'b0}}, i17};
initial n6 = 26'b00000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 26'b00000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
assign n7 = {{16{1'b0}}, i6} * {{10{1'b0}}, i18};
initial n8 = 26'b00000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n8 <= 26'b00000000000000000000000000;
  else if (i1 == 1'b1)
    n8 <= n7;
cf_fir_12_16_10_12 s9 (clock_c, i1, i2, i7, i8, i9, i10, i11, i12, i13, i14, i19, i20, i21, i22, i23, i24, i25, i26, s9_1, s9_2, s9_3, s9_4, s9_5, s9_6, s9_7, s9_8);
assign o12 = s9_8;
assign o11 = s9_7;
assign o10 = s9_6;
assign o9 = s9_5;
assign o8 = s9_4;
assign o7 = s9_3;
assign o6 = s9_2;
assign o5 = s9_1;
assign o4 = n8;
assign o3 = n6;
assign o2 = n4;
assign o1 = n2;
endmodule

module cf_fir_12_16_10_12 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, o1, o2, o3, o4, o5, o6, o7, o8);
input  clock_c;
input  i1;
input  i2;
input  [9:0] i3;
input  [9:0] i4;
input  [9:0] i5;
input  [9:0] i6;
input  [9:0] i7;
input  [9:0] i8;
input  [9:0] i9;
input  [9:0] i10;
input  [15:0] i11;
input  [15:0] i12;
input  [15:0] i13;
input  [15:0] i14;
input  [15:0] i15;
input  [15:0] i16;
input  [15:0] i17;
input  [15:0] i18;
output [25:0] o1;
output [25:0] o2;
output [25:0] o3;
output [25:0] o4;
output [25:0] o5;
output [25:0] o6;
output [25:0] o7;
output [25:0] o8;
wire   [25:0] n1;
reg    [25:0] n2;
wire   [25:0] n3;
reg    [25:0] n4;
wire   [25:0] n5;
reg    [25:0] n6;
wire   [25:0] n7;
reg    [25:0] n8;
wire   [25:0] s9_1;
wire   [25:0] s9_2;
wire   [25:0] s9_3;
wire   [25:0] s9_4;
assign n1 = {{16{1'b0}}, i3} * {{10{1'b0}}, i11};
initial n2 = 26'b00000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n2 <= 26'b00000000000000000000000000;
  else if (i1 == 1'b1)
    n2 <= n1;
assign n3 = {{16{1'b0}}, i4} * {{10{1'b0}}, i12};
initial n4 = 26'b00000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 26'b00000000000000000000000000;
  else if (i1 == 1'b1)
    n4 <= n3;
assign n5 = {{16{1'b0}}, i5} * {{10{1'b0}}, i13};
initial n6 = 26'b00000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 26'b00000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
assign n7 = {{16{1'b0}}, i6} * {{10{1'b0}}, i14};
initial n8 = 26'b00000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n8 <= 26'b00000000000000000000000000;
  else if (i1 == 1'b1)
    n8 <= n7;
cf_fir_12_16_10_13 s9 (clock_c, i1, i2, i7, i8, i9, i10, i15, i16, i17, i18, s9_1, s9_2, s9_3, s9_4);
assign o8 = s9_4;
assign o7 = s9_3;
assign o6 = s9_2;
assign o5 = s9_1;
assign o4 = n8;
assign o3 = n6;
assign o2 = n4;
assign o1 = n2;
endmodule

module cf_fir_12_16_10_13 (clock_c, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, o1, o2, o3, o4);
input  clock_c;
input  i1;
input  i2;
input  [9:0] i3;
input  [9:0] i4;
input  [9:0] i5;
input  [9:0] i6;
input  [15:0] i7;
input  [15:0] i8;
input  [15:0] i9;
input  [15:0] i10;
output [25:0] o1;
output [25:0] o2;
output [25:0] o3;
output [25:0] o4;
wire   [25:0] n1;
reg    [25:0] n2;
wire   [25:0] n3;
reg    [25:0] n4;
wire   [25:0] n5;
reg    [25:0] n6;
wire   [25:0] n7;
reg    [25:0] n8;
assign n1 = {{16{1'b0}}, i3} * {{10{1'b0}}, i7};
initial n2 = 26'b00000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n2 <= 26'b00000000000000000000000000;
  else if (i1 == 1'b1)
    n2 <= n1;
assign n3 = {{16{1'b0}}, i4} * {{10{1'b0}}, i8};
initial n4 = 26'b00000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 26'b00000000000000000000000000;
  else if (i1 == 1'b1)
    n4 <= n3;
assign n5 = {{16{1'b0}}, i5} * {{10{1'b0}}, i9};
initial n6 = 26'b00000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 26'b00000000000000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
assign n7 = {{16{1'b0}}, i6} * {{10{1'b0}}, i10};
initial n8 = 26'b00000000000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n8 <= 26'b00000000000000000000000000;
  else if (i1 == 1'b1)
    n8 <= n7;
assign o4 = n8;
assign o3 = n6;
assign o2 = n4;
assign o1 = n2;
endmodule

module cf_fir_12_16_10_14 (clock_c, i1, i2, i3, o1, o2, o3, o4, o5, o6, o7, o8);
input  clock_c;
input  i1;
input  i2;
input  [15:0] i3;
output [15:0] o1;
output [15:0] o2;
output [15:0] o3;
output [15:0] o4;
output [15:0] o5;
output [15:0] o6;
output [15:0] o7;
output [15:0] o8;
reg    [15:0] n1;
reg    [15:0] n2;
reg    [15:0] n3;
reg    [15:0] n4;
reg    [15:0] n5;
reg    [15:0] n6;
reg    [15:0] n7;
reg    [15:0] n8;
initial n1 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n1 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n1 <= i3;
initial n2 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n2 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n2 <= n1;
initial n3 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n3 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n3 <= n2;
initial n4 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n4 <= n3;
initial n5 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n5 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n5 <= n4;
initial n6 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n6 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n6 <= n5;
initial n7 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n7 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n7 <= n6;
initial n8 = 16'b0000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n8 <= 16'b0000000000000000;
  else if (i1 == 1'b1)
    n8 <= n7;
assign o8 = n8;
assign o7 = n7;
assign o6 = n6;
assign o5 = n5;
assign o4 = n4;
assign o3 = n3;
assign o2 = n2;
assign o1 = n1;
endmodule

