/* Generated by Yosys 0.16+65 (git sha1 051517d61, gcc 9.1.0 -fPIC -Os) */

module top(clk1, clk2, clk3, clk4, led);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  input clk1;
  wire clk1;
  input clk2;
  wire clk2;
  input clk3;
  wire clk3;
  input clk4;
  wire clk4;
  output [3:0] led;
  wire [3:0] led;
  assign _032_ = 64'b1000000000000000000000000000000000000000000000000000000000000000 >> { _061_, _062_, _060_, _059_, _057_, _058_ };
  assign _030_ = 4'b0110 >> { _063_, _032_ };
  assign _031_ = 8'b01111000 >> { led[0], _063_, _032_ };
  assign _026_ = 8'b01111000 >> { _059_, _058_, _057_ };
  assign _033_ = 64'b1000000000000000000000000000000000000000000000000000000000000000 >> { _048_, _047_, _046_, _045_, _043_, _044_ };
  assign _015_ = 8'b01111000 >> { led[2], _049_, _033_ };
  assign _034_ = 64'b1000000000000000000000000000000000000000000000000000000000000000 >> { _055_, _054_, _053_, _052_, _050_, _051_ };
  assign _023_ = 8'b01111000 >> { led[1], _056_, _034_ };
  assign _005_ = 64'b0111111111111111111111111111111110000000000000000000000000000000 >> { _041_, _039_, _040_, _038_, _036_, _037_ };
  assign _012_ = 32'd2147450880 >> { _047_, _045_, _046_, _043_, _044_ };
  assign _020_ = 32'd2147450880 >> { _054_, _052_, _053_, _050_, _051_ };
  assign _019_ = 16'b0111111110000000 >> { _053_, _050_, _052_, _051_ };
  assign _035_ = 64'b1000000000000000000000000000000000000000000000000000000000000000 >> { _040_, _041_, _039_, _038_, _036_, _037_ };
  assign _006_ = 4'b0110 >> { _042_, _035_ };
  assign _003_ = 16'b0111111110000000 >> { _039_, _036_, _038_, _037_ };
  assign _010_ = 8'b01111000 >> { _045_, _044_, _043_ };
  assign _018_ = 8'b01111000 >> { _052_, _051_, _050_ };
  assign _017_ = 4'b0110 >> { _051_, _050_ };
  assign _022_ = 4'b0110 >> { _056_, _034_ };
  assign _014_ = 4'b0110 >> { _049_, _033_ };
  assign _002_ = 8'b01111000 >> { _038_, _037_, _036_ };
  assign _013_ = 64'b0111111111111111111111111111111110000000000000000000000000000000 >> { _048_, _047_, _046_, _045_, _043_, _044_ };
  assign _007_ = 8'b01111000 >> { led[3], _042_, _035_ };
  assign _004_ = 32'd2147450880 >> { _040_, _038_, _039_, _036_, _037_ };
  assign _011_ = 16'b0111111110000000 >> { _046_, _043_, _045_, _044_ };
  assign _009_ = 4'b0110 >> { _044_, _043_ };
  assign _001_ = 4'b0110 >> { _037_, _036_ };
  assign _021_ = 64'b0111111111111111111111111111111110000000000000000000000000000000 >> { _055_, _054_, _053_, _052_, _050_, _051_ };
  assign _025_ = 4'b0110 >> { _058_, _057_ };
  assign _028_ = 32'd2147450880 >> { _061_, _059_, _060_, _057_, _058_ };
  assign _029_ = 64'b0111111111111111111111111111111110000000000000000000000000000000 >> { _062_, _060_, _061_, _059_, _057_, _058_ };
  assign _027_ = 16'b0111111110000000 >> { _060_, _057_, _059_, _058_ };
  assign _024_ = 2'b01 >> _057_;
  assign _008_ = 2'b01 >> _043_;
  assign _016_ = 2'b01 >> _050_;
  assign _000_ = 2'b01 >> _036_;
  dffsre _100_ (
    .C(clk4),
    .D(_000_),
    .E(1'b1),
    .Q(_036_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _101_ (
    .C(clk4),
    .D(_001_),
    .E(1'b1),
    .Q(_037_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _102_ (
    .C(clk4),
    .D(_002_),
    .E(1'b1),
    .Q(_038_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _103_ (
    .C(clk4),
    .D(_003_),
    .E(1'b1),
    .Q(_039_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _104_ (
    .C(clk4),
    .D(_004_),
    .E(1'b1),
    .Q(_040_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _105_ (
    .C(clk4),
    .D(_005_),
    .E(1'b1),
    .Q(_041_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _106_ (
    .C(clk4),
    .D(_006_),
    .E(1'b1),
    .Q(_042_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _107_ (
    .C(clk4),
    .D(_007_),
    .E(1'b1),
    .Q(led[3]),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _108_ (
    .C(clk3),
    .D(_008_),
    .E(1'b1),
    .Q(_043_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _109_ (
    .C(clk3),
    .D(_009_),
    .E(1'b1),
    .Q(_044_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _110_ (
    .C(clk3),
    .D(_010_),
    .E(1'b1),
    .Q(_045_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _111_ (
    .C(clk3),
    .D(_011_),
    .E(1'b1),
    .Q(_046_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _112_ (
    .C(clk3),
    .D(_012_),
    .E(1'b1),
    .Q(_047_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _113_ (
    .C(clk3),
    .D(_013_),
    .E(1'b1),
    .Q(_048_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _114_ (
    .C(clk3),
    .D(_014_),
    .E(1'b1),
    .Q(_049_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _115_ (
    .C(clk3),
    .D(_015_),
    .E(1'b1),
    .Q(led[2]),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _116_ (
    .C(clk2),
    .D(_016_),
    .E(1'b1),
    .Q(_050_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _117_ (
    .C(clk2),
    .D(_017_),
    .E(1'b1),
    .Q(_051_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _118_ (
    .C(clk2),
    .D(_018_),
    .E(1'b1),
    .Q(_052_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _119_ (
    .C(clk2),
    .D(_019_),
    .E(1'b1),
    .Q(_053_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _120_ (
    .C(clk2),
    .D(_020_),
    .E(1'b1),
    .Q(_054_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _121_ (
    .C(clk2),
    .D(_021_),
    .E(1'b1),
    .Q(_055_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _122_ (
    .C(clk2),
    .D(_022_),
    .E(1'b1),
    .Q(_056_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _123_ (
    .C(clk2),
    .D(_023_),
    .E(1'b1),
    .Q(led[1]),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _124_ (
    .C(clk1),
    .D(_024_),
    .E(1'b1),
    .Q(_057_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _125_ (
    .C(clk1),
    .D(_025_),
    .E(1'b1),
    .Q(_058_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _126_ (
    .C(clk1),
    .D(_026_),
    .E(1'b1),
    .Q(_059_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _127_ (
    .C(clk1),
    .D(_027_),
    .E(1'b1),
    .Q(_060_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _128_ (
    .C(clk1),
    .D(_028_),
    .E(1'b1),
    .Q(_061_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _129_ (
    .C(clk1),
    .D(_029_),
    .E(1'b1),
    .Q(_062_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _130_ (
    .C(clk1),
    .D(_030_),
    .E(1'b1),
    .Q(_063_),
    .R(1'b1),
    .S(1'b1)
  );
  dffsre _131_ (
    .C(clk1),
    .D(_031_),
    .E(1'b1),
    .Q(led[0]),
    .R(1'b1),
    .S(1'b1)
  );
endmodule
