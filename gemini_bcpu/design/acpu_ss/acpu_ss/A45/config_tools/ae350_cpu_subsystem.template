// Copyright (C) 2022, Andes Technology Corp. Confidential Proprietary

`include "config.inc"
`include "global.inc"
`include "ae350_config.vh"
`include "ae350_const.vh"

`include "atcbmc300_config.vh"
`include "atcbmc301_config.vh"
`include "atcbusdec301_config.vh"


module ae350_cpu_subsystem (
`ifdef NDS_IO_BIU_AXI_COMMON_X2
	  i_arid,
	  i_araddr,
	  i_arlen,
	  i_arsize,
	  i_arburst,
	  i_arlock,
	  i_arcache,
	  i_arprot,
	  i_arvalid,
	  i_arready,
	  i_awid,
	  i_awaddr,
	  i_awlen,
	  i_awsize,
	  i_awburst,
	  i_awlock,
	  i_awcache,
	  i_awprot,
	  i_awvalid,
	  i_awready,
	  i_wdata,
	  i_wstrb,
	  i_wlast,
	  i_wvalid,
	  i_wready,
	  i_bid,
	  i_bresp,
	  i_bvalid,
	  i_bready,
	  i_rid,
	  i_rdata,
	  i_rresp,
	  i_rlast,
	  i_rvalid,
	  i_rready,
	  d_arid,
	  d_araddr,
	  d_arlen,
	  d_arsize,
	  d_arburst,
	  d_arlock,
	  d_arcache,
	  d_arprot,
	  d_arvalid,
	  d_arready,
	  d_awid,
	  d_awaddr,
	  d_awlen,
	  d_awsize,
	  d_awburst,
	  d_awlock,
	  d_awcache,
	  d_awprot,
	  d_awvalid,
	  d_awready,
	  d_wdata,
	  d_wstrb,
	  d_wlast,
	  d_wvalid,
	  d_wready,
	  d_bid,
	  d_bresp,
	  d_bvalid,
	  d_bready,
	  d_rid,
	  d_rdata,
	  d_rresp,
	  d_rlast,
	  d_rvalid,
	  d_rready,
`endif
`ifdef NDS_IO_BIU_AXI_COMMON_X1
	  arid,
	  araddr,
	  arlen,
	  arsize,
	  arburst,
	  arlock,
	  arcache,
	  arprot,
	  arvalid,
	  arready,
	  awid,
	  awaddr,
	  awlen,
	  awsize,
	  awburst,
	  awlock,
	  awcache,
	  awprot,
	  awvalid,
	  awready,
	  wdata,
	  wstrb,
	  wlast,
	  wvalid,
	  wready,
	  bid,
	  bresp,
	  bvalid,
	  bready,
	  rid,
	  rdata,
	  rresp,
	  rlast,
	  rvalid,
	  rready,
`endif
`ifdef NDS_IO_SLAVEPORT_COMMON_X1
	  slv_arid,
	  slv_awid,
	  slv_bid,
	  slv_rid,
	  slv_araddr,
	  slv_arburst,
	  slv_arcache,
	  slv_arlen,
	  slv_arlock,
	  slv_arprot,
	  slv_arready,
	  slv_arsize,
	  slv_arvalid,
	  slv_awaddr,
	  slv_awburst,
	  slv_awcache,
	  slv_awlen,
	  slv_awlock,
	  slv_awprot,
	  slv_awready,
	  slv_awsize,
	  slv_awvalid,
	  slv_bready,
	  slv_bresp,
	  slv_bvalid,
	  slv_rdata,
	  slv_rlast,
	  slv_rready,
	  slv_rresp,
	  slv_rvalid,
	  slv_wdata,
	  slv_wlast,
	  slv_wready,
	  slv_wstrb,
	  slv_wvalid,
`endif
`ifdef PLATFORM_DEBUG_SUBSYSTEM
	  dmactive,
	  dmi_haddr,
	  dmi_hburst,
	  dmi_hprot,
	  dmi_hrdata,
	  dmi_hready,
	  dmi_hreadyout,
	  dmi_hresp,
	  dmi_hsel,
	  dmi_hsize,
	  dmi_htrans,
	  dmi_hwdata,
	  dmi_hwrite,
	  dmi_resetn,
`endif
`ifdef NDS_IO_PROBING
	  hart0_probe_current_pc,
	  hart0_probe_gpr_index,
	  hart0_probe_selected_gpr_value,
`endif
`ifdef NDS_IO_TRACE_INSTR_GEN1
	  hart0_gen1_trace_cause,
	  hart0_gen1_trace_enabled,
	  hart0_gen1_trace_iaddr,
	  hart0_gen1_trace_iexception,
	  hart0_gen1_trace_instr,
	  hart0_gen1_trace_interrupt,
	  hart0_gen1_trace_ivalid,
	  hart0_gen1_trace_priv,
	  hart0_gen1_trace_tval,
`endif
`ifdef NDS_IO_TRACE_INSTR
	  hart0_trace_cause,
	  hart0_trace_enabled,
	  hart0_trace_halted,
	  hart0_trace_iaddr,
	  hart0_trace_ilastsize,
	  hart0_trace_iretire,
	  hart0_trace_itype,
	  hart0_trace_priv,
	  hart0_trace_reset,
	  hart0_trace_trigger,
	  hart0_trace_tval,
`endif
`ifdef PLATFORM_PLDM_SYS_BUS_ACCESS
   `ifdef PLATFORM_DEBUG_SUBSYSTEM
	  dm_sys_araddr,
	  dm_sys_arburst,
	  dm_sys_arcache,
	  dm_sys_arid,
	  dm_sys_arlen,
	  dm_sys_arlock,
	  dm_sys_arprot,
	  dm_sys_arready,
	  dm_sys_arsize,
	  dm_sys_arvalid,
	  dm_sys_awaddr,
	  dm_sys_awburst,
	  dm_sys_awcache,
	  dm_sys_awid,
	  dm_sys_awlen,
	  dm_sys_awlock,
	  dm_sys_awprot,
	  dm_sys_awready,
	  dm_sys_awsize,
	  dm_sys_awvalid,
	  dm_sys_bid,
	  dm_sys_bready,
	  dm_sys_bresp,
	  dm_sys_bvalid,
	  dm_sys_rdata,
	  dm_sys_rid,
	  dm_sys_rlast,
	  dm_sys_rready,
	  dm_sys_rresp,
	  dm_sys_rvalid,
	  dm_sys_wdata,
	  dm_sys_wlast,
	  dm_sys_wready,
	  dm_sys_wstrb,
	  dm_sys_wvalid,
   `endif
`endif
	  axi_bus_clk_en,
	  core_clk,
	  core_resetn,
	  dbg_srst_req,
	  dc_clk,
	  hart0_wakeup_event,
	  lm_clk,
	  slvp_resetn,
	  test_rstn,
	  aclk,
	  aresetn,
	  scan_enable,
	  test_mode,
	  int_src,
	  mtime_clk,
	  por_rstn,
	  hart0_reset_vector,
	  hart0_icache_disable_init,
	  hart0_dcache_disable_init,
	  hart0_core_wfi_mode,
	  hart0_nmi
);

`ifdef PLATFORM_SLVPORT_DLM_SEL_BIT
localparam SLVPORT_DLM_SEL_BIT	= `PLATFORM_SLVPORT_DLM_SEL_BIT;
`else
localparam SLVPORT_DLM_SEL_BIT	= 21;
`endif
localparam PALEN			= `NDS_BIU_ADDR_WIDTH;
localparam BIU_ADDR_WIDTH		= `NDS_BIU_ADDR_WIDTH;
localparam BIU_ADDR_MSB		= `NDS_BIU_ADDR_WIDTH-1;
localparam BIU_ASYNC_SUPPORT	= `NDS_BIU_ASYNC_SUPPORT;
localparam XLEN			= `NDS_XLEN;
localparam VALEN			= `NDS_VALEN;
`ifdef PLATFORM_FORCE_4GB_SPACE
localparam ADDR_WIDTH           = 32;
`else
localparam ADDR_WIDTH           = PALEN;
`endif
localparam ADDR_MSB		    = (ADDR_WIDTH-1);
localparam RESET_VECTOR_WIDTH	= (VALEN > 32) ? 64 : 32;
`ifdef NDS_L2C_BIU_DATA_WIDTH
localparam BIU_DATA_WIDTH		= `NDS_L2C_BIU_DATA_WIDTH;
`else
localparam BIU_DATA_WIDTH		= `NDS_BIU_DATA_WIDTH;
`endif
localparam BIU_DATA_MSB		= (BIU_DATA_WIDTH-1);
localparam BIU_WSTRB_WIDTH		= (BIU_DATA_WIDTH/8);
localparam BIU_WSTRB_MSB		= (BIU_WSTRB_WIDTH-1);
localparam SLVPORT_ID_WIDTH 	= `NDS_SLAVE_PORT_ID_WIDTH;
localparam SLVPORT_DATA_WIDTH	= `NDS_SLAVE_PORT_DATA_WIDTH;
localparam SLVPORT_DATA_MSB		= (SLVPORT_DATA_WIDTH-1);
localparam SLVPORT_WSTRB_WIDTH	= (SLVPORT_DATA_WIDTH/8);
localparam SLVPORT_WSTRB_MSB	= (SLVPORT_WSTRB_WIDTH-1);
`ifdef NDS_BIU_ID_WIDTH
localparam BIU_ID_WIDTH		= `NDS_BIU_ID_WIDTH;
`else
localparam BIU_ID_WIDTH		= 4;
`endif
localparam BIU_ID_MSB		= (BIU_ID_WIDTH-1);
localparam VECTOR_PLIC_SUPPORT	= `NDS_VECTOR_PLIC_SUPPORT;
localparam NCE_DATA_WIDTH		= (BIU_DATA_WIDTH > 64) ? 64 : BIU_DATA_WIDTH;
localparam NCE_DATA_MSB		= (NCE_DATA_WIDTH-1);
localparam NCE_WSTRB_WIDTH		= (NCE_DATA_WIDTH/8);
localparam NCE_WSTRB_MSB		= (NCE_WSTRB_WIDTH-1);
localparam DM_SYS_DATA_WIDTH	= (BIU_DATA_WIDTH > 128) ? 128 : BIU_DATA_WIDTH;
localparam DM_SYS_DATA_MSB		= (DM_SYS_DATA_WIDTH-1);
localparam DM_SYS_WSTRB_WIDTH	= (DM_SYS_DATA_WIDTH/8);
localparam DM_SYS_WSTRB_MSB		= (DM_SYS_WSTRB_WIDTH-1);
localparam SIZEUP_DS_DATA_WIDTH     = BIU_DATA_WIDTH;
localparam SIZEUP_DS_DATA_SIZE      = $unsigned($clog2(SIZEUP_DS_DATA_WIDTH)) - 3;
localparam SIZEUP_ADDR_WIDTH	= SIZEUP_DS_DATA_SIZE;
localparam SIZEUP_ADDR_MSB		= (SIZEUP_ADDR_WIDTH-1);
localparam NHART                    = 1;
localparam DLM_RAM_AW		= `NDS_DLM_RAM_AW;
localparam DLM_RAM_DW		= `NDS_DLM_RAM_DW;
localparam DLM_RAM_BWEW		= `NDS_DLM_RAM_BWEW;
localparam ILM_RAM_AW		= `NDS_ILM_RAM_AW;
localparam ILM_RAM_DW		= `NDS_ILM_RAM_DW;
localparam ILM_RAM_BWEW		= `NDS_ILM_RAM_BWEW;
localparam ILM_ECC_SUPPORT          = `NDS_ILM_ECC_TYPE == "ecc";
localparam ILM_TL_UL_RAM_NUM        = (XLEN == 64) ? 1 : 2;
localparam ILM_TL_UL_AW		= ILM_RAM_AW+3;
localparam ILM_TL_UL_EW		= ILM_ECC_SUPPORT ? (XLEN == 64) ? 8 : 7 : 1;
localparam ILM_TL_UL_RAM_AW         = ILM_RAM_AW;
localparam ILM_TL_UL_RAM_DW         = (XLEN == 64) ? ILM_ECC_SUPPORT ? 72 : 64 : ILM_ECC_SUPPORT ? 39 : 32;
localparam ILM_TL_UL_RAM_BWEW       = (ILM_TL_UL_RAM_DW == 39) ? 5 : ILM_TL_UL_RAM_DW/8;
localparam PLIC_HW_TARGET_NUM = NHART*2;
localparam PLIC_SW_TARGET_NUM = NHART;
localparam ILM_HDATA_WIDTH		= XLEN;
localparam DLM_HDATA_WIDTH		= XLEN;
localparam PROGBUF_SIZE	= `PLATFORM_PLDM_PROGBUF_SIZE;
localparam HALTGROUP_COUNT  = `PLATFORM_PLDM_HALTGROUP_COUNT;
`ifdef PLATFORM_PLDM_SYS_BUS_ACCESS
localparam PLDM_SYS_BUS_ACCESS        = "yes";
`else
localparam PLDM_SYS_BUS_ACCESS        = "no";
`endif

`ifdef NDS_IO_BIU_AXI_COMMON_X2
output                       [BIU_ID_MSB:0] i_arid;
output                         [ADDR_MSB:0] i_araddr;
output                                [7:0] i_arlen;
output                                [2:0] i_arsize;
output                                [1:0] i_arburst;
output                                      i_arlock;
output                                [3:0] i_arcache;
output                                [2:0] i_arprot;
output                                      i_arvalid;
input                                       i_arready;
output                       [BIU_ID_MSB:0] i_awid;
output                         [ADDR_MSB:0] i_awaddr;
output                                [7:0] i_awlen;
output                                [2:0] i_awsize;
output                                [1:0] i_awburst;
output                                      i_awlock;
output                                [3:0] i_awcache;
output                                [2:0] i_awprot;
output                                      i_awvalid;
input                                       i_awready;
output               [(BIU_DATA_WIDTH-1):0] i_wdata;
output           [((BIU_DATA_WIDTH/8)-1):0] i_wstrb;
output                                      i_wlast;
output                                      i_wvalid;
input                                       i_wready;
input                        [BIU_ID_MSB:0] i_bid;
input                                 [1:0] i_bresp;
input                                       i_bvalid;
output                                      i_bready;
input                        [BIU_ID_MSB:0] i_rid;
input                [(BIU_DATA_WIDTH-1):0] i_rdata;
input                                 [1:0] i_rresp;
input                                       i_rlast;
input                                       i_rvalid;
output                                      i_rready;
output                       [BIU_ID_MSB:0] d_arid;
output                         [ADDR_MSB:0] d_araddr;
output                                [7:0] d_arlen;
output                                [2:0] d_arsize;
output                                [1:0] d_arburst;
output                                      d_arlock;
output                                [3:0] d_arcache;
output                                [2:0] d_arprot;
output                                      d_arvalid;
input                                       d_arready;
output                       [BIU_ID_MSB:0] d_awid;
output                         [ADDR_MSB:0] d_awaddr;
output                                [7:0] d_awlen;
output                                [2:0] d_awsize;
output                                [1:0] d_awburst;
output                                      d_awlock;
output                                [3:0] d_awcache;
output                                [2:0] d_awprot;
output                                      d_awvalid;
input                                       d_awready;
output               [(BIU_DATA_WIDTH-1):0] d_wdata;
output           [((BIU_DATA_WIDTH/8)-1):0] d_wstrb;
output                                      d_wlast;
output                                      d_wvalid;
input                                       d_wready;
input                        [BIU_ID_MSB:0] d_bid;
input                                 [1:0] d_bresp;
input                                       d_bvalid;
output                                      d_bready;
input                        [BIU_ID_MSB:0] d_rid;
input                [(BIU_DATA_WIDTH-1):0] d_rdata;
input                                 [1:0] d_rresp;
input                                       d_rlast;
input                                       d_rvalid;
output                                      d_rready;
`endif
`ifdef NDS_IO_BIU_AXI_COMMON_X1
output                       [BIU_ID_MSB:0] arid;
output                         [ADDR_MSB:0] araddr;
output                                [7:0] arlen;
output                                [2:0] arsize;
output                                [1:0] arburst;
output                                      arlock;
output                                [3:0] arcache;
output                                [2:0] arprot;
output                                      arvalid;
input                                       arready;
output                       [BIU_ID_MSB:0] awid;
output                         [ADDR_MSB:0] awaddr;
output                                [7:0] awlen;
output                                [2:0] awsize;
output                                [1:0] awburst;
output                                      awlock;
output                                [3:0] awcache;
output                                [2:0] awprot;
output                                      awvalid;
input                                       awready;
output               [(BIU_DATA_WIDTH-1):0] wdata;
output           [((BIU_DATA_WIDTH/8)-1):0] wstrb;
output                                      wlast;
output                                      wvalid;
input                                       wready;
input                        [BIU_ID_MSB:0] bid;
input                                 [1:0] bresp;
input                                       bvalid;
output                                      bready;
input                        [BIU_ID_MSB:0] rid;
input                [(BIU_DATA_WIDTH-1):0] rdata;
input                                 [1:0] rresp;
input                                       rlast;
input                                       rvalid;
output                                      rready;
`endif
`ifdef NDS_IO_SLAVEPORT_COMMON_X1
input                [(BIU_ID_WIDTH+4-1):0] slv_arid;
input                [(BIU_ID_WIDTH+4-1):0] slv_awid;
output               [(BIU_ID_WIDTH+4-1):0] slv_bid;
output               [(BIU_ID_WIDTH+4-1):0] slv_rid;
input                          [ADDR_MSB:0] slv_araddr;
input                                 [1:0] slv_arburst;
input                                 [3:0] slv_arcache;
input                                 [7:0] slv_arlen;
input                                       slv_arlock;
input                                 [2:0] slv_arprot;
output                                      slv_arready;
input                                 [2:0] slv_arsize;
input                                       slv_arvalid;
input                          [ADDR_MSB:0] slv_awaddr;
input                                 [1:0] slv_awburst;
input                                 [3:0] slv_awcache;
input                                 [7:0] slv_awlen;
input                                       slv_awlock;
input                                 [2:0] slv_awprot;
output                                      slv_awready;
input                                 [2:0] slv_awsize;
input                                       slv_awvalid;
input                                       slv_bready;
output                                [1:0] slv_bresp;
output                                      slv_bvalid;
output           [(SLVPORT_DATA_WIDTH-1):0] slv_rdata;
output                                      slv_rlast;
input                                       slv_rready;
output                                [1:0] slv_rresp;
output                                      slv_rvalid;
input            [(SLVPORT_DATA_WIDTH-1):0] slv_wdata;
input                                       slv_wlast;
output                                      slv_wready;
input        [((SLVPORT_DATA_WIDTH/8)-1):0] slv_wstrb;
input                                       slv_wvalid;
`endif
`ifdef PLATFORM_DEBUG_SUBSYSTEM
output                                      dmactive;
input                                 [8:0] dmi_haddr;
input                                 [2:0] dmi_hburst;
input                                 [3:0] dmi_hprot;
output                               [31:0] dmi_hrdata;
input                                       dmi_hready;
output                                      dmi_hreadyout;
output                                [1:0] dmi_hresp;
input                                       dmi_hsel;
input                                 [2:0] dmi_hsize;
input                                 [1:0] dmi_htrans;
input                                [31:0] dmi_hwdata;
input                                       dmi_hwrite;
input                                       dmi_resetn;
`endif
`ifdef NDS_IO_PROBING
output                 [((`NDS_VALEN)-1):0] hart0_probe_current_pc;
input                                [12:0] hart0_probe_gpr_index;
output                  [((`NDS_XLEN)-1):0] hart0_probe_selected_gpr_value;
`endif
`ifdef NDS_IO_TRACE_INSTR_GEN1
output                               [19:0] hart0_gen1_trace_cause;
input                                       hart0_gen1_trace_enabled;
output                 [(`NDS_VALEN)*2-1:0] hart0_gen1_trace_iaddr;
output                                [1:0] hart0_gen1_trace_iexception;
output                               [63:0] hart0_gen1_trace_instr;
output                                [1:0] hart0_gen1_trace_interrupt;
output                                [1:0] hart0_gen1_trace_ivalid;
output                                [3:0] hart0_gen1_trace_priv;
output                  [(`NDS_XLEN)*2-1:0] hart0_gen1_trace_tval;
`endif
`ifdef NDS_IO_TRACE_INSTR
output                                [9:0] hart0_trace_cause;
input                                       hart0_trace_enabled;
output                                      hart0_trace_halted;
output                 [2*(`NDS_VALEN)-1:0] hart0_trace_iaddr;
output                                [1:0] hart0_trace_ilastsize;
output                                [3:0] hart0_trace_iretire;
output                                [7:0] hart0_trace_itype;
output                                [1:0] hart0_trace_priv;
output                                      hart0_trace_reset;
output                                [5:0] hart0_trace_trigger;
output                  [((`NDS_XLEN)-1):0] hart0_trace_tval;
`endif
`ifdef PLATFORM_PLDM_SYS_BUS_ACCESS
   `ifdef PLATFORM_DEBUG_SUBSYSTEM
output                         [ADDR_MSB:0] dm_sys_araddr;
output                                [1:0] dm_sys_arburst;
output                                [3:0] dm_sys_arcache;
output                       [BIU_ID_MSB:0] dm_sys_arid;
output                                [7:0] dm_sys_arlen;
output                                      dm_sys_arlock;
output                                [2:0] dm_sys_arprot;
input                                       dm_sys_arready;
output                                [2:0] dm_sys_arsize;
output                                      dm_sys_arvalid;
output                         [ADDR_MSB:0] dm_sys_awaddr;
output                                [1:0] dm_sys_awburst;
output                                [3:0] dm_sys_awcache;
output                       [BIU_ID_MSB:0] dm_sys_awid;
output                                [7:0] dm_sys_awlen;
output                                      dm_sys_awlock;
output                                [2:0] dm_sys_awprot;
input                                       dm_sys_awready;
output                                [2:0] dm_sys_awsize;
output                                      dm_sys_awvalid;
input                        [BIU_ID_MSB:0] dm_sys_bid;
output                                      dm_sys_bready;
input                                 [1:0] dm_sys_bresp;
input                                       dm_sys_bvalid;
input                [(BIU_DATA_WIDTH-1):0] dm_sys_rdata;
input                        [BIU_ID_MSB:0] dm_sys_rid;
input                                       dm_sys_rlast;
output                                      dm_sys_rready;
input                                 [1:0] dm_sys_rresp;
input                                       dm_sys_rvalid;
output               [(BIU_DATA_WIDTH-1):0] dm_sys_wdata;
output                                      dm_sys_wlast;
input                                       dm_sys_wready;
output           [((BIU_DATA_WIDTH/8)-1):0] dm_sys_wstrb;
output                                      dm_sys_wvalid;
   `endif
`endif
input                                       axi_bus_clk_en;
input                         [(NHART-1):0] core_clk;
input                         [(NHART-1):0] core_resetn;
output                                      dbg_srst_req;
input                         [(NHART-1):0] dc_clk;
output                                [5:0] hart0_wakeup_event;
input                         [(NHART-1):0] lm_clk;
input                         [(NHART-1):0] slvp_resetn;
input                                       test_rstn;
input                                       aclk;
input                                       aresetn;
input                                       scan_enable;
input                                       test_mode;
input                                [31:1] int_src;
input                                       mtime_clk;
input                                       por_rstn;
input                         [(VALEN-1):0] hart0_reset_vector;
input                                       hart0_icache_disable_init;
input                                       hart0_dcache_disable_init;
output                                      hart0_core_wfi_mode;
input                                       hart0_nmi;

`ifdef NDS_IO_BIU_AXI_COMMON_X2
wire                                              [3:0] d_exmon_bid_dummy;
wire                                              [3:0] d_exmon_rid_dummy;
wire                                              [3:0] i_bid_dummy;
wire                                              [3:0] i_rid_dummy;
wire                                                    d_exmon_arready;
wire                                                    d_exmon_awready;
wire                               [(BIU_ID_WIDTH-1):0] d_exmon_bid;
wire                                              [1:0] d_exmon_bresp;
wire                                                    d_exmon_bvalid;
wire                             [(BIU_DATA_WIDTH-1):0] d_exmon_rdata;
wire                               [(BIU_ID_WIDTH-1):0] d_exmon_rid;
wire                                                    d_exmon_rlast;
wire                                              [1:0] d_exmon_rresp;
wire                                                    d_exmon_rvalid;
wire                                                    d_exmon_wready;
wire                                              [3:0] d_unused_arqos;
wire                                              [3:0] d_unused_arregion;
wire                                              [3:0] d_unused_awqos;
wire                                              [3:0] d_unused_awregion;
wire                                 [(ADDR_WIDTH-1):0] d_exmon_araddr;
wire                                              [1:0] d_exmon_arburst;
wire                                              [3:0] d_exmon_arcache;
wire                               [(BIU_ID_WIDTH-1):0] d_exmon_arid;
wire                                              [3:0] d_exmon_arid_dummy;
wire                                              [7:0] d_exmon_arlen;
wire                                                    d_exmon_arlock;
wire                                              [2:0] d_exmon_arprot;
wire                                              [2:0] d_exmon_arsize;
wire                                                    d_exmon_arvalid;
wire                                 [(ADDR_WIDTH-1):0] d_exmon_awaddr;
wire                                              [1:0] d_exmon_awburst;
wire                                              [3:0] d_exmon_awcache;
wire                               [(BIU_ID_WIDTH-1):0] d_exmon_awid;
wire                                              [3:0] d_exmon_awid_dummy;
wire                                              [7:0] d_exmon_awlen;
wire                                                    d_exmon_awlock;
wire                                              [2:0] d_exmon_awprot;
wire                                              [2:0] d_exmon_awsize;
wire                                                    d_exmon_awvalid;
wire                                                    d_exmon_bready;
wire                                                    d_exmon_rready;
wire                             [(BIU_DATA_WIDTH-1):0] d_exmon_wdata;
wire                                                    d_exmon_wlast;
wire                           [(BIU_DATA_WIDTH/8)-1:0] d_exmon_wstrb;
wire                                                    d_exmon_wvalid;
wire                                                    hart0_d_arready;
wire                                                    hart0_d_awready;
wire                                     [BIU_ID_MSB:0] hart0_d_bid;
wire                                              [1:0] hart0_d_bresp;
wire                                                    hart0_d_bvalid;
wire                                   [BIU_DATA_MSB:0] hart0_d_rdata;
wire                                     [BIU_ID_MSB:0] hart0_d_rid;
wire                                                    hart0_d_rlast;
wire                                              [1:0] hart0_d_rresp;
wire                                                    hart0_d_rvalid;
wire                                                    hart0_d_wready;
wire                                                    hart0_i_arready;
wire                                                    hart0_i_awready;
wire                                     [BIU_ID_MSB:0] hart0_i_bid;
wire                                              [1:0] hart0_i_bresp;
wire                                                    hart0_i_bvalid;
wire                                   [BIU_DATA_MSB:0] hart0_i_rdata;
wire                                     [BIU_ID_MSB:0] hart0_i_rid;
wire                                                    hart0_i_rlast;
wire                                              [1:0] hart0_i_rresp;
wire                                                    hart0_i_rvalid;
wire                                                    hart0_i_wready;
wire                                              [3:0] i_arid_dummy;
wire                                              [3:0] i_awid_dummy;
wire                                       [ADDR_MSB:0] hart0_d_araddr;
wire                                              [1:0] hart0_d_arburst;
wire                                              [3:0] hart0_d_arcache;
wire                                     [BIU_ID_MSB:0] hart0_d_arid;
wire                                              [7:0] hart0_d_arlen;
wire                                                    hart0_d_arlock;
wire                                              [2:0] hart0_d_arprot;
wire                                              [2:0] hart0_d_arsize;
wire                                                    hart0_d_arvalid;
wire                                       [ADDR_MSB:0] hart0_d_awaddr;
wire                                              [1:0] hart0_d_awburst;
wire                                              [3:0] hart0_d_awcache;
wire                                     [BIU_ID_MSB:0] hart0_d_awid;
wire                                              [7:0] hart0_d_awlen;
wire                                                    hart0_d_awlock;
wire                                              [2:0] hart0_d_awprot;
wire                                              [2:0] hart0_d_awsize;
wire                                                    hart0_d_awvalid;
wire                                                    hart0_d_bready;
wire                                                    hart0_d_rready;
wire                                   [BIU_DATA_MSB:0] hart0_d_wdata;
wire                                                    hart0_d_wlast;
wire                                  [BIU_WSTRB_MSB:0] hart0_d_wstrb;
wire                                                    hart0_d_wvalid;
wire                                       [ADDR_MSB:0] hart0_i_araddr;
wire                                              [1:0] hart0_i_arburst;
wire                                              [3:0] hart0_i_arcache;
wire                                     [BIU_ID_MSB:0] hart0_i_arid;
wire                                              [7:0] hart0_i_arlen;
wire                                                    hart0_i_arlock;
wire                                              [2:0] hart0_i_arprot;
wire                                              [2:0] hart0_i_arsize;
wire                                                    hart0_i_arvalid;
wire                                       [ADDR_MSB:0] hart0_i_awaddr;
wire                                              [1:0] hart0_i_awburst;
wire                                              [3:0] hart0_i_awcache;
wire                                     [BIU_ID_MSB:0] hart0_i_awid;
wire                                              [7:0] hart0_i_awlen;
wire                                                    hart0_i_awlock;
wire                                              [2:0] hart0_i_awprot;
wire                                              [2:0] hart0_i_awsize;
wire                                                    hart0_i_awvalid;
wire                                                    hart0_i_bready;
wire                                                    hart0_i_rready;
wire                                   [BIU_DATA_MSB:0] hart0_i_wdata;
wire                                                    hart0_i_wlast;
wire                                  [BIU_WSTRB_MSB:0] hart0_i_wstrb;
wire                                                    hart0_i_wvalid;
`endif
`ifdef NDS_IO_BIU_AXI_COMMON_X1
wire                                              [3:0] exmon_bid_dummy;
wire                                              [3:0] exmon_rid_dummy;
wire                                                    exmon_arready;
wire                                                    exmon_awready;
wire                               [(BIU_ID_WIDTH-1):0] exmon_bid;
wire                                              [1:0] exmon_bresp;
wire                                                    exmon_bvalid;
wire                             [(BIU_DATA_WIDTH-1):0] exmon_rdata;
wire                               [(BIU_ID_WIDTH-1):0] exmon_rid;
wire                                                    exmon_rlast;
wire                                              [1:0] exmon_rresp;
wire                                                    exmon_rvalid;
wire                                                    exmon_wready;
wire                                              [3:0] unused_arqos;
wire                                              [3:0] unused_arregion;
wire                                              [3:0] unused_awqos;
wire                                              [3:0] unused_awregion;
wire                                 [(ADDR_WIDTH-1):0] exmon_araddr;
wire                                              [1:0] exmon_arburst;
wire                                              [3:0] exmon_arcache;
wire                               [(BIU_ID_WIDTH-1):0] exmon_arid;
wire                                              [3:0] exmon_arid_dummy;
wire                                              [7:0] exmon_arlen;
wire                                                    exmon_arlock;
wire                                              [2:0] exmon_arprot;
wire                                              [2:0] exmon_arsize;
wire                                                    exmon_arvalid;
wire                                 [(ADDR_WIDTH-1):0] exmon_awaddr;
wire                                              [1:0] exmon_awburst;
wire                                              [3:0] exmon_awcache;
wire                               [(BIU_ID_WIDTH-1):0] exmon_awid;
wire                                              [3:0] exmon_awid_dummy;
wire                                              [7:0] exmon_awlen;
wire                                                    exmon_awlock;
wire                                              [2:0] exmon_awprot;
wire                                              [2:0] exmon_awsize;
wire                                                    exmon_awvalid;
wire                                                    exmon_bready;
wire                                                    exmon_rready;
wire                             [(BIU_DATA_WIDTH-1):0] exmon_wdata;
wire                                                    exmon_wlast;
wire                           [(BIU_DATA_WIDTH/8)-1:0] exmon_wstrb;
wire                                                    exmon_wvalid;
wire                                                    hart0_arready;
wire                                                    hart0_awready;
wire                                     [BIU_ID_MSB:0] hart0_bid;
wire                                              [1:0] hart0_bresp;
wire                                                    hart0_bvalid;
wire                                   [BIU_DATA_MSB:0] hart0_rdata;
wire                                     [BIU_ID_MSB:0] hart0_rid;
wire                                                    hart0_rlast;
wire                                              [1:0] hart0_rresp;
wire                                                    hart0_rvalid;
wire                                                    hart0_wready;
wire                                       [ADDR_MSB:0] hart0_araddr;
wire                                              [1:0] hart0_arburst;
wire                                              [3:0] hart0_arcache;
wire                                     [BIU_ID_MSB:0] hart0_arid;
wire                                              [7:0] hart0_arlen;
wire                                                    hart0_arlock;
wire                                              [2:0] hart0_arprot;
wire                                              [2:0] hart0_arsize;
wire                                                    hart0_arvalid;
wire                                       [ADDR_MSB:0] hart0_awaddr;
wire                                              [1:0] hart0_awburst;
wire                                              [3:0] hart0_awcache;
wire                                     [BIU_ID_MSB:0] hart0_awid;
wire                                              [7:0] hart0_awlen;
wire                                                    hart0_awlock;
wire                                              [2:0] hart0_awprot;
wire                                              [2:0] hart0_awsize;
wire                                                    hart0_awvalid;
wire                                                    hart0_bready;
wire                                                    hart0_rready;
wire                                   [BIU_DATA_MSB:0] hart0_wdata;
wire                                                    hart0_wlast;
wire                                  [BIU_WSTRB_MSB:0] hart0_wstrb;
wire                                                    hart0_wvalid;
`endif
`ifdef NDS_IO_SLAVEPORT_COMMON_X1
wire                           [(SLVPORT_ID_WIDTH-1):0] hart0_slv_arid;
wire                           [(SLVPORT_ID_WIDTH-1):0] hart0_slv_awid;
wire                                                    slv_aruser;
wire                                                    slv_awuser;
wire                           [(SLVPORT_ID_WIDTH-1):0] hart0_slv_bid;
wire                           [(SLVPORT_ID_WIDTH-1):0] hart0_slv_rid;
`endif
`ifdef NDS_IO_ILM_TL_UL
wire                                 [ILM_TL_UL_AW-1:0] ilm_a_addr_ext;
wire                                 [ILM_TL_UL_EW-1:0] ilm_a_parity0_in;
wire                                 [ILM_TL_UL_EW-1:0] ilm_a_parity1_in;
wire                                              [7:0] ilm_d_parity0;
wire                                              [7:0] ilm_d_parity1;
wire                                                    ilm_reset_n;
wire                                                    ilm_ram_clk;
wire                                                    ilm_ram_clk_en;
wire                             [ILM_TL_UL_RAM_AW-1:0] ilm0_addr;
wire                           [ILM_TL_UL_RAM_BWEW-1:0] ilm0_bwe;
wire                                                    ilm0_cs;
wire                             [ILM_TL_UL_RAM_DW-1:0] ilm0_wdata;
wire                                                    ilm0_we;
wire                             [ILM_TL_UL_RAM_AW-1:0] ilm1_addr;
wire                           [ILM_TL_UL_RAM_BWEW-1:0] ilm1_bwe;
wire                                                    ilm1_cs;
wire                             [ILM_TL_UL_RAM_DW-1:0] ilm1_wdata;
wire                                                    ilm1_we;
wire                                                    ilm_a_ready;
wire                                             [63:0] ilm_d_data;
wire                                                    ilm_d_denied;
wire                                 [ILM_TL_UL_EW-1:0] ilm_d_parity0_out;
wire                                 [ILM_TL_UL_EW-1:0] ilm_d_parity1_out;
wire                                                    ilm_d_valid;
wire                             [ILM_TL_UL_RAM_DW-1:0] ilm0_rdata;
wire                             [ILM_TL_UL_RAM_DW-1:0] ilm1_rdata;
wire                            [(`NDS_ILM_RAM_AW)+2:3] ilm_a_addr;
wire                                             [63:0] ilm_a_data;
wire                                              [7:0] ilm_a_mask;
wire                                              [2:0] ilm_a_opcode;
wire                                              [7:0] ilm_a_parity0;
wire                                              [7:0] ilm_a_parity1;
wire                                              [2:0] ilm_a_size;
wire                                              [1:0] ilm_a_user;
wire                                                    ilm_a_valid;
wire                                                    ilm_d_ready;
`endif
`ifdef NDS_IO_LM_RESET
wire                                                    lm_reset_n;
`endif
`ifdef NDS_IO_DLM_TL_UL
wire                                                    dlm_reset_n;
wire                                                    dlm_a_ready;
wire                                  [(`NDS_XLEN-1):0] dlm_d_data;
wire                                                    dlm_d_denied;
wire                                              [7:0] dlm_d_parity;
wire                                                    dlm_d_valid;
wire                      [`NDS_DLM_AMSB:`NDS_DLM_ALSB] dlm_a_addr;
wire                                  [(`NDS_XLEN-1):0] dlm_a_data;
wire                                [(`NDS_XLEN/8)-1:0] dlm_a_mask;
wire                                              [2:0] dlm_a_opcode;
wire                                              [7:0] dlm_a_parity;
wire                                              [2:0] dlm_a_size;
wire                                              [1:0] dlm_a_user;
wire                                                    dlm_a_valid;
wire                                                    dlm_d_ready;
`endif
`ifdef PLATFORM_DEBUG_SUBSYSTEM
wire                                       [ADDR_MSB:0] dm_araddr;
wire                                              [1:0] dm_arburst;
wire                                              [3:0] dm_arcache;
wire                                              [7:0] dm_arlen;
wire                                                    dm_arlock;
wire                                              [2:0] dm_arprot;
wire                                              [2:0] dm_arsize;
wire                                       [ADDR_MSB:0] dm_awaddr;
wire                                              [1:0] dm_awburst;
wire                                              [3:0] dm_awcache;
wire                                              [7:0] dm_awlen;
wire                                                    dm_awlock;
wire                                              [2:0] dm_awprot;
wire                                              [2:0] dm_awsize;
wire                                              [1:0] dm_sup_bresp;
wire                                   [NCE_DATA_MSB:0] dm_wdata;
wire                                                    dm_wlast;
wire                                  [NCE_WSTRB_MSB:0] dm_wstrb;
wire                                                    dm_arvalid;
wire                                                    dm_awvalid;
wire                                                    dm_bready;
wire                                                    dm_rready;
wire                                                    dm_wvalid;
wire                                                    dm_sup_arready;
wire                                                    dm_sup_awready;
wire                                     [BIU_ID_MSB:0] dm_sup_bid;
wire                                                    dm_sup_bvalid;
wire                                [DM_SYS_DATA_MSB:0] dm_sup_rdata;
wire                                     [BIU_ID_MSB:0] dm_sup_rid;
wire                                                    dm_sup_rlast;
wire                                              [1:0] dm_sup_rresp;
wire                                                    dm_sup_rvalid;
wire                                                    dm_sup_wready;
wire                                                    dm_arready;
wire                                                    dm_awready;
wire                                              [1:0] dm_bresp;
wire                                                    dm_bvalid;
wire                                   [NCE_DATA_MSB:0] dm_rdata;
wire                                                    dm_rlast;
wire                                              [1:0] dm_rresp;
wire                                                    dm_rvalid;
wire                                       [ADDR_MSB:0] dm_sup_araddr;
wire                                              [1:0] dm_sup_arburst;
wire                                              [3:0] dm_sup_arcache;
wire                                     [BIU_ID_MSB:0] dm_sup_arid;
wire                                              [7:0] dm_sup_arlen;
wire                                                    dm_sup_arlock;
wire                                              [2:0] dm_sup_arprot;
wire                                              [2:0] dm_sup_arsize;
wire                                                    dm_sup_arvalid;
wire                                       [ADDR_MSB:0] dm_sup_awaddr;
wire                                              [1:0] dm_sup_awburst;
wire                                              [3:0] dm_sup_awcache;
wire                                     [BIU_ID_MSB:0] dm_sup_awid;
wire                                              [7:0] dm_sup_awlen;
wire                                                    dm_sup_awlock;
wire                                              [2:0] dm_sup_awprot;
wire                                              [2:0] dm_sup_awsize;
wire                                                    dm_sup_awvalid;
wire                                                    dm_sup_bready;
wire                                                    dm_sup_rready;
wire                                [DM_SYS_DATA_MSB:0] dm_sup_wdata;
wire                                                    dm_sup_wlast;
wire                               [DM_SYS_WSTRB_MSB:0] dm_sup_wstrb;
wire                                                    dm_sup_wvalid;
wire                                                    dm_wready;
wire                                                    ndmreset;
wire                                              [3:0] nds_unused_dm_bid;
wire                             [(NCE_DATA_WIDTH-1):0] nds_unused_dm_hrdata;
wire                                                    nds_unused_dm_hreadyout;
wire                                              [1:0] nds_unused_dm_hresp;
wire                                              [3:0] nds_unused_dm_rid;
wire                                 [(ADDR_WIDTH-1):0] nds_unused_dm_sup_haddr;
wire                                              [2:0] nds_unused_dm_sup_hburst;
wire                                                    nds_unused_dm_sup_hbusreq;
wire                                              [3:0] nds_unused_dm_sup_hprot;
wire                                              [2:0] nds_unused_dm_sup_hsize;
wire                                              [1:0] nds_unused_dm_sup_htrans;
wire                          [(DM_SYS_DATA_WIDTH-1):0] nds_unused_dm_sup_hwdata;
wire                                                    nds_unused_dm_sup_hwrite;
`endif
`ifdef NDS_IO_SLAVEPORT_COMMON_X2
wire                                                    nds_unused_hart0_slv1_arready;
wire                                                    nds_unused_hart0_slv1_awready;
wire                 [((`NDS_SLAVE_PORT_ID_WIDTH)-1):0] nds_unused_hart0_slv1_bid;
wire                                              [1:0] nds_unused_hart0_slv1_bresp;
wire                                                    nds_unused_hart0_slv1_bvalid;
wire               [((`NDS_SLAVE_PORT_DATA_WIDTH)-1):0] nds_unused_hart0_slv1_rdata;
wire                 [((`NDS_SLAVE_PORT_ID_WIDTH)-1):0] nds_unused_hart0_slv1_rid;
wire                                                    nds_unused_hart0_slv1_rlast;
wire                                              [1:0] nds_unused_hart0_slv1_rresp;
wire                                                    nds_unused_hart0_slv1_rvalid;
wire                                                    nds_unused_hart0_slv1_wready;
`endif
`ifdef NDS_IO_LM
wire                                                    lm_local_int;
`endif
`ifdef NDS_IO_UEIP
wire                                                    nds_unused_hart0_ueiack;
`endif
`ifdef NDS_IO_DEBUG
wire                                                    nds_unused_hart0_hart_halted;
`endif
`ifdef NDS_IO_BTB_RAM_CTRL_OUT
wire                [(`NDS_BTB_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_btb0_ctrl_out;
wire                [(`NDS_BTB_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_btb1_ctrl_out;
`endif
`ifdef NDS_IO_DCACHE0_CTRL_OUT
wire        [(`NDS_DCACHE_DATA_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_dcache_data0_ctrl_out;
wire        [(`NDS_DCACHE_DATA_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_dcache_data1_ctrl_out;
wire        [(`NDS_DCACHE_DATA_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_dcache_data2_ctrl_out;
wire        [(`NDS_DCACHE_DATA_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_dcache_data3_ctrl_out;
wire         [(`NDS_DCACHE_TAG_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_dcache_tag0_ctrl_out;
`endif
`ifdef NDS_IO_DCACHE1_CTRL_OUT
wire         [(`NDS_DCACHE_TAG_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_dcache_tag1_ctrl_out;
`endif
`ifdef NDS_IO_DCACHE2_CTRL_OUT
wire         [(`NDS_DCACHE_TAG_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_dcache_tag2_ctrl_out;
wire         [(`NDS_DCACHE_TAG_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_dcache_tag3_ctrl_out;
`endif
`ifdef NDS_IO_DLM_RAM0_CTRL_OUT
wire                [(`NDS_DLM_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_dlm_ctrl_out;
`endif
`ifdef NDS_IO_DLM_RAM1_CTRL_OUT
wire                [(`NDS_DLM_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_dlm1_ctrl_out;
`endif
`ifdef NDS_IO_DLM_RAM2_CTRL_OUT
wire                [(`NDS_DLM_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_dlm2_ctrl_out;
`endif
`ifdef NDS_IO_DLM_RAM3_CTRL_OUT
wire                [(`NDS_DLM_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_dlm3_ctrl_out;
`endif
`ifdef NDS_IO_ICACHE0_CTRL_OUT
wire        [(`NDS_ICACHE_DATA_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_icache_data0_ctrl_out;
wire        [(`NDS_ICACHE_DATA_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_icache_data1_ctrl_out;
wire        [(`NDS_ICACHE_DATA_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_icache_data2_ctrl_out;
wire        [(`NDS_ICACHE_DATA_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_icache_data3_ctrl_out;
wire        [(`NDS_ICACHE_DATA_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_icache_data4_ctrl_out;
wire        [(`NDS_ICACHE_DATA_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_icache_data5_ctrl_out;
wire        [(`NDS_ICACHE_DATA_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_icache_data6_ctrl_out;
wire        [(`NDS_ICACHE_DATA_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_icache_data7_ctrl_out;
wire         [(`NDS_ICACHE_TAG_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_icache_tag0_ctrl_out;
`endif
`ifdef NDS_IO_ICACHE1_CTRL_OUT
wire         [(`NDS_ICACHE_TAG_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_icache_tag1_ctrl_out;
`endif
`ifdef NDS_IO_ICACHE2_CTRL_OUT
wire         [(`NDS_ICACHE_TAG_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_icache_tag2_ctrl_out;
wire         [(`NDS_ICACHE_TAG_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_icache_tag3_ctrl_out;
`endif
`ifdef NDS_IO_ILM_RAM0_CTRL_OUT
wire                [(`NDS_ILM_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_ilm0_ctrl_out;
`endif
`ifdef NDS_IO_ILM_RAM1_CTRL_OUT
wire                [(`NDS_ILM_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_ilm1_ctrl_out;
`endif
`ifdef NDS_IO_STLB_RAM_NECC_CTRL_OUT
wire               [(`NDS_STLB_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_stlb0_ctrl_out;
wire               [(`NDS_STLB_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_stlb1_ctrl_out;
wire               [(`NDS_STLB_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_stlb2_ctrl_out;
wire               [(`NDS_STLB_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_stlb3_ctrl_out;
`endif
`ifdef NDS_IO_STLB_RAM_ECC_CTRL_OUT
wire          [(`NDS_STLB_DATA_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_stlb_data0_ctrl_out;
wire          [(`NDS_STLB_DATA_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_stlb_data1_ctrl_out;
wire          [(`NDS_STLB_DATA_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_stlb_data2_ctrl_out;
wire          [(`NDS_STLB_DATA_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_stlb_data3_ctrl_out;
wire           [(`NDS_STLB_TAG_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_stlb_tag0_ctrl_out;
wire           [(`NDS_STLB_TAG_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_stlb_tag1_ctrl_out;
wire           [(`NDS_STLB_TAG_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_stlb_tag2_ctrl_out;
wire           [(`NDS_STLB_TAG_RAM_CTRL_OUT_WIDTH-1):0] nds_unused_stlb_tag3_ctrl_out;
`endif
`ifdef PLATFORM_NO_PLIC_SW
`else
wire                                              [3:0] nds_unused_plicsw_bid;
wire                             [(NCE_DATA_WIDTH-1):0] nds_unused_plicsw_hrdata;
wire                                                    nds_unused_plicsw_hreadyout;
wire                                              [1:0] nds_unused_plicsw_hresp;
wire                                              [3:0] nds_unused_plicsw_rid;
wire                                              [9:0] nds_unused_plicsw_t0_eiid;
wire                                              [9:0] nds_unused_plicsw_t10_eiid;
wire                                                    nds_unused_plicsw_t10_eip;
wire                                              [9:0] nds_unused_plicsw_t11_eiid;
wire                                                    nds_unused_plicsw_t11_eip;
wire                                              [9:0] nds_unused_plicsw_t12_eiid;
wire                                                    nds_unused_plicsw_t12_eip;
wire                                              [9:0] nds_unused_plicsw_t13_eiid;
wire                                                    nds_unused_plicsw_t13_eip;
wire                                              [9:0] nds_unused_plicsw_t14_eiid;
wire                                                    nds_unused_plicsw_t14_eip;
wire                                              [9:0] nds_unused_plicsw_t15_eiid;
wire                                                    nds_unused_plicsw_t15_eip;
wire                                              [9:0] nds_unused_plicsw_t1_eiid;
wire                                                    nds_unused_plicsw_t1_eip;
wire                                              [9:0] nds_unused_plicsw_t2_eiid;
wire                                                    nds_unused_plicsw_t2_eip;
wire                                              [9:0] nds_unused_plicsw_t3_eiid;
wire                                                    nds_unused_plicsw_t3_eip;
wire                                              [9:0] nds_unused_plicsw_t4_eiid;
wire                                                    nds_unused_plicsw_t4_eip;
wire                                              [9:0] nds_unused_plicsw_t5_eiid;
wire                                                    nds_unused_plicsw_t5_eip;
wire                                              [9:0] nds_unused_plicsw_t6_eiid;
wire                                                    nds_unused_plicsw_t6_eip;
wire                                              [9:0] nds_unused_plicsw_t7_eiid;
wire                                                    nds_unused_plicsw_t7_eip;
wire                                              [9:0] nds_unused_plicsw_t8_eiid;
wire                                                    nds_unused_plicsw_t8_eip;
wire                                              [9:0] nds_unused_plicsw_t9_eiid;
wire                                                    nds_unused_plicsw_t9_eip;
`endif
`ifdef NDS_IO_ILM_TL_UL
   `ifdef NDS_IO_ILM_RAM_ECC
wire              [((`NDS_ILM_RAM_CTRL_OUT_WIDTH)-1):0] nds_unused_tl_ul_ilm0_ctrl_out;
wire              [((`NDS_ILM_RAM_CTRL_OUT_WIDTH)-1):0] nds_unused_tl_ul_ilm1_ctrl_out;
   `else
wire              [((`NDS_ILM_RAM_CTRL_OUT_WIDTH)-1):0] nds_unused_tl_ul_ilm0_ctrl_out;
wire              [((`NDS_ILM_RAM_CTRL_OUT_WIDTH)-1):0] nds_unused_tl_ul_ilm1_ctrl_out;
   `endif
`endif
`ifdef PLATFORM_PLDM_SYS_BUS_ACCESS
`else
   `ifdef PLATFORM_DEBUG_SUBSYSTEM
wire                                       [ADDR_MSB:0] dm_sys_araddr;
wire                                              [1:0] dm_sys_arburst;
wire                                              [3:0] dm_sys_arcache;
wire                                     [BIU_ID_MSB:0] dm_sys_arid;
wire                                              [7:0] dm_sys_arlen;
wire                                                    dm_sys_arlock;
wire                                              [2:0] dm_sys_arprot;
wire                                                    dm_sys_arready;
wire                                              [2:0] dm_sys_arsize;
wire                                       [ADDR_MSB:0] dm_sys_awaddr;
wire                                              [1:0] dm_sys_awburst;
wire                                              [3:0] dm_sys_awcache;
wire                                     [BIU_ID_MSB:0] dm_sys_awid;
wire                                              [7:0] dm_sys_awlen;
wire                                                    dm_sys_awlock;
wire                                              [2:0] dm_sys_awprot;
wire                                                    dm_sys_awready;
wire                                              [2:0] dm_sys_awsize;
wire                                     [BIU_ID_MSB:0] dm_sys_bid;
wire                                              [1:0] dm_sys_bresp;
wire                                                    dm_sys_bvalid;
wire                             [(BIU_DATA_WIDTH-1):0] dm_sys_rdata;
wire                                     [BIU_ID_MSB:0] dm_sys_rid;
wire                                                    dm_sys_rlast;
wire                                              [1:0] dm_sys_rresp;
wire                                                    dm_sys_rvalid;
wire                                                    dm_sys_wready;
wire                                                    dm_sys_arvalid;
wire                                                    dm_sys_awvalid;
wire                                                    dm_sys_bready;
wire                                                    dm_sys_rready;
wire                             [(BIU_DATA_WIDTH-1):0] dm_sys_wdata;
wire                                                    dm_sys_wlast;
wire                         [((BIU_DATA_WIDTH/8)-1):0] dm_sys_wstrb;
wire                                                    dm_sys_wvalid;
   `endif
`endif
wire                                      [(NHART-1):0] dm_hart_unavail;
wire                                      [(NHART-1):0] dm_hart_under_reset;
wire                                                    hart0_bus_clk;
wire                                                    hart0_bus_clk_en;
wire                                                    hart0_dcu_clk;
wire                                             [63:0] hart0_hart_id;
wire                                                    hart0_lm_clk;
wire                                                    hart0_slv1_clk;
wire                                                    hart0_slv1_clk_en;
wire                                                    hart0_slv1_reset_n;
wire                                                    hart0_slv_clk;
wire                                                    hart0_slv_clk_en;
wire                                                    hart0_slv_reset_n;
wire                                                    hart0_ueip;
wire                                       [ADDR_MSB:0] plic_araddr;
wire                                              [1:0] plic_arburst;
wire                                              [3:0] plic_arcache;
wire                                              [7:0] plic_arlen;
wire                                                    plic_arlock;
wire                                              [2:0] plic_arprot;
wire                                              [2:0] plic_arsize;
wire                                       [ADDR_MSB:0] plic_awaddr;
wire                                              [1:0] plic_awburst;
wire                                              [3:0] plic_awcache;
wire                                              [7:0] plic_awlen;
wire                                                    plic_awlock;
wire                                              [2:0] plic_awprot;
wire                                              [2:0] plic_awsize;
wire                                   [NCE_DATA_MSB:0] plic_wdata;
wire                                                    plic_wlast;
wire                                  [NCE_WSTRB_MSB:0] plic_wstrb;
wire                                       [ADDR_MSB:0] plicsw_araddr;
wire                                              [1:0] plicsw_arburst;
wire                                              [3:0] plicsw_arcache;
wire                                              [7:0] plicsw_arlen;
wire                                                    plicsw_arlock;
wire                                              [2:0] plicsw_arprot;
wire                                              [2:0] plicsw_arsize;
wire                                       [ADDR_MSB:0] plicsw_awaddr;
wire                                              [1:0] plicsw_awburst;
wire                                              [3:0] plicsw_awcache;
wire                                              [7:0] plicsw_awlen;
wire                                                    plicsw_awlock;
wire                                              [2:0] plicsw_awprot;
wire                                              [2:0] plicsw_awsize;
wire                                   [NCE_DATA_MSB:0] plicsw_wdata;
wire                                                    plicsw_wlast;
wire                                  [NCE_WSTRB_MSB:0] plicsw_wstrb;
wire                                       [ADDR_MSB:0] plmt_araddr;
wire                                              [1:0] plmt_arburst;
wire                                              [3:0] plmt_arcache;
wire                                              [7:0] plmt_arlen;
wire                                                    plmt_arlock;
wire                                              [2:0] plmt_arprot;
wire                                              [2:0] plmt_arsize;
wire                                       [ADDR_MSB:0] plmt_awaddr;
wire                                              [1:0] plmt_awburst;
wire                                              [3:0] plmt_awcache;
wire                                              [7:0] plmt_awlen;
wire                                                    plmt_awlock;
wire                                              [2:0] plmt_awprot;
wire                                              [2:0] plmt_awsize;
wire                                   [NCE_DATA_MSB:0] plmt_wdata;
wire                                                    plmt_wlast;
wire                                  [NCE_WSTRB_MSB:0] plmt_wstrb;
wire                                     [BIU_ID_MSB:0] sdn2busdec_arid;
wire                                              [3:0] sdn2busdec_arid_dummy;
wire                                     [BIU_ID_MSB:0] sdn2busdec_awid;
wire                                              [3:0] sdn2busdec_awid_dummy;
wire                                                    stoptime;
wire                                        [NHART-1:0] stoptime_array;
wire                                       [ADDR_MSB:0] inter2sdn_araddr;
wire                                              [1:0] inter2sdn_arburst;
wire                                              [3:0] inter2sdn_arcache;
wire                                     [BIU_ID_MSB:0] inter2sdn_arid;
wire                                              [3:0] inter2sdn_arid_dummy;
wire                                              [7:0] inter2sdn_arlen;
wire                                                    inter2sdn_arlock;
wire                                              [2:0] inter2sdn_arprot;
wire                                              [2:0] inter2sdn_arsize;
wire                                                    inter2sdn_arvalid;
wire                                       [ADDR_MSB:0] inter2sdn_awaddr;
wire                                              [1:0] inter2sdn_awburst;
wire                                              [3:0] inter2sdn_awcache;
wire                                     [BIU_ID_MSB:0] inter2sdn_awid;
wire                                              [3:0] inter2sdn_awid_dummy;
wire                                              [7:0] inter2sdn_awlen;
wire                                                    inter2sdn_awlock;
wire                                              [2:0] inter2sdn_awprot;
wire                                              [2:0] inter2sdn_awsize;
wire                                                    inter2sdn_awvalid;
wire                                                    inter2sdn_bready;
wire                                                    inter2sdn_rready;
wire                                   [BIU_DATA_MSB:0] inter2sdn_wdata;
wire                                                    inter2sdn_wlast;
wire                                  [BIU_WSTRB_MSB:0] inter2sdn_wstrb;
wire                                                    inter2sdn_wvalid;
wire                                       [ADDR_MSB:0] busdec2nce_araddr;
wire                                              [1:0] busdec2nce_arburst;
wire                                              [3:0] busdec2nce_arcache;
wire                                              [7:0] busdec2nce_arlen;
wire                                                    busdec2nce_arlock;
wire                                              [2:0] busdec2nce_arprot;
wire                                              [2:0] busdec2nce_arsize;
wire                                       [ADDR_MSB:0] busdec2nce_awaddr;
wire                                              [1:0] busdec2nce_awburst;
wire                                              [3:0] busdec2nce_awcache;
wire                                              [7:0] busdec2nce_awlen;
wire                                                    busdec2nce_awlock;
wire                                              [2:0] busdec2nce_awprot;
wire                                              [2:0] busdec2nce_awsize;
wire                                   [NCE_DATA_MSB:0] busdec2nce_wdata;
wire                                                    busdec2nce_wlast;
wire                                  [NCE_WSTRB_MSB:0] busdec2nce_wstrb;
wire                                                    plic_arvalid;
wire                                                    plic_awvalid;
wire                                                    plic_bready;
wire                                                    plic_rready;
wire                                                    plic_wvalid;
wire                                                    plicsw_arvalid;
wire                                                    plicsw_awvalid;
wire                                                    plicsw_bready;
wire                                                    plicsw_rready;
wire                                                    plicsw_wvalid;
wire                                                    plmt_arvalid;
wire                                                    plmt_awvalid;
wire                                                    plmt_bready;
wire                                                    plmt_rready;
wire                                                    plmt_wvalid;
wire                                                    sdn2busdec_arready;
wire                                                    sdn2busdec_awready;
wire                                     [BIU_ID_MSB:0] sdn2busdec_bid;
wire                                              [3:0] sdn2busdec_bid_dummy;
wire                                              [1:0] sdn2busdec_bresp;
wire                                                    sdn2busdec_bvalid;
wire                                   [NCE_DATA_MSB:0] sdn2busdec_rdata;
wire                                     [BIU_ID_MSB:0] sdn2busdec_rid;
wire                                              [3:0] sdn2busdec_rid_dummy;
wire                                                    sdn2busdec_rlast;
wire                                              [1:0] sdn2busdec_rresp;
wire                                                    sdn2busdec_rvalid;
wire                                                    sdn2busdec_wready;
wire                                                    inter2sdn_arready;
wire                                                    inter2sdn_awready;
wire                                     [BIU_ID_MSB:0] inter2sdn_bid;
wire                                              [3:0] inter2sdn_bid_dummy;
wire                                              [1:0] inter2sdn_bresp;
wire                                                    inter2sdn_bvalid;
wire                                   [BIU_DATA_MSB:0] inter2sdn_rdata;
wire                                     [BIU_ID_MSB:0] inter2sdn_rid;
wire                                              [3:0] inter2sdn_rid_dummy;
wire                                                    inter2sdn_rlast;
wire                                              [1:0] inter2sdn_rresp;
wire                                                    inter2sdn_rvalid;
wire                                                    inter2sdn_wready;
wire                                       [ADDR_MSB:0] sdn2busdec_araddr;
wire                                              [1:0] sdn2busdec_arburst;
wire                                              [3:0] sdn2busdec_arcache;
wire                                              [7:0] sdn2busdec_arlen;
wire                                                    sdn2busdec_arlock;
wire                                              [2:0] sdn2busdec_arprot;
wire                                              [2:0] sdn2busdec_arsize;
wire                                                    sdn2busdec_arvalid;
wire                                       [ADDR_MSB:0] sdn2busdec_awaddr;
wire                                              [1:0] sdn2busdec_awburst;
wire                                              [3:0] sdn2busdec_awcache;
wire                                              [7:0] sdn2busdec_awlen;
wire                                                    sdn2busdec_awlock;
wire                                              [2:0] sdn2busdec_awprot;
wire                                              [2:0] sdn2busdec_awsize;
wire                                                    sdn2busdec_awvalid;
wire                                                    sdn2busdec_bready;
wire                                                    sdn2busdec_rready;
wire                                   [NCE_DATA_MSB:0] sdn2busdec_wdata;
wire                                                    sdn2busdec_wlast;
wire                                  [NCE_WSTRB_MSB:0] sdn2busdec_wstrb;
wire                                                    sdn2busdec_wvalid;
wire                                                    hart0_debugint;
wire                                                    hart0_meiack;
wire                                                    hart0_seiack;
wire                                                    hart0_stoptime;
wire                                                    plic_hart0_meiack;
wire                                                    hart0_meip;
wire                                                    hart0_msip;
wire                                                    hart0_mtip;
wire                                      [(NHART-1):0] dm_debugint;
wire                                      [(NHART-1):0] dm_resethaltreq;
wire                                              [9:0] hart0_meiid;
wire                                              [9:0] hart0_seiid;
wire                                              [3:0] nds_unused_plic_bid;
wire                             [(NCE_DATA_WIDTH-1):0] nds_unused_plic_hrdata;
wire                                                    nds_unused_plic_hreadyout;
wire                                              [1:0] nds_unused_plic_hresp;
wire                                              [3:0] nds_unused_plic_rid;
wire                                              [9:0] nds_unused_plic_t10_eiid;
wire                                                    nds_unused_plic_t10_eip;
wire                                              [9:0] nds_unused_plic_t11_eiid;
wire                                                    nds_unused_plic_t11_eip;
wire                                              [9:0] nds_unused_plic_t12_eiid;
wire                                                    nds_unused_plic_t12_eip;
wire                                              [9:0] nds_unused_plic_t13_eiid;
wire                                                    nds_unused_plic_t13_eip;
wire                                              [9:0] nds_unused_plic_t14_eiid;
wire                                                    nds_unused_plic_t14_eip;
wire                                              [9:0] nds_unused_plic_t15_eiid;
wire                                                    nds_unused_plic_t15_eip;
wire                                              [9:0] nds_unused_plic_t2_eiid;
wire                                                    nds_unused_plic_t2_eip;
wire                                              [9:0] nds_unused_plic_t3_eiid;
wire                                                    nds_unused_plic_t3_eip;
wire                                              [9:0] nds_unused_plic_t4_eiid;
wire                                                    nds_unused_plic_t4_eip;
wire                                              [9:0] nds_unused_plic_t5_eiid;
wire                                                    nds_unused_plic_t5_eip;
wire                                              [9:0] nds_unused_plic_t6_eiid;
wire                                                    nds_unused_plic_t6_eip;
wire                                              [9:0] nds_unused_plic_t7_eiid;
wire                                                    nds_unused_plic_t7_eip;
wire                                              [9:0] nds_unused_plic_t8_eiid;
wire                                                    nds_unused_plic_t8_eip;
wire                                              [9:0] nds_unused_plic_t9_eiid;
wire                                                    nds_unused_plic_t9_eip;
wire                                                    plic_arready;
wire                                                    plic_awready;
wire                                              [1:0] plic_bresp;
wire                                                    plic_bvalid;
wire                                                    plic_hart0_meip;
wire                                                    plic_hart0_seip;
wire                                   [NCE_DATA_MSB:0] plic_rdata;
wire                                                    plic_rlast;
wire                                              [1:0] plic_rresp;
wire                                                    plic_rvalid;
wire                                                    plic_wready;
wire                                                    plicsw_arready;
wire                                                    plicsw_awready;
wire                                              [1:0] plicsw_bresp;
wire                                                    plicsw_bvalid;
wire                                                    plicsw_hart0_msip;
wire                                   [NCE_DATA_MSB:0] plicsw_rdata;
wire                                                    plicsw_rlast;
wire                                              [1:0] plicsw_rresp;
wire                                                    plicsw_rvalid;
wire                                                    plicsw_wready;
wire                                        [NHART-1:0] mtip;
wire                                              [3:0] nds_unused_plmt_bid;
wire                             [(NCE_DATA_WIDTH-1):0] nds_unused_plmt_hrdata;
wire                                                    nds_unused_plmt_hreadyout;
wire                                              [1:0] nds_unused_plmt_hresp;
wire                                              [3:0] nds_unused_plmt_rid;
wire                                                    plmt_arready;
wire                                                    plmt_awready;
wire                                              [1:0] plmt_bresp;
wire                                                    plmt_bvalid;
wire                                   [NCE_DATA_MSB:0] plmt_rdata;
wire                                                    plmt_rlast;
wire                                              [1:0] plmt_rresp;
wire                                                    plmt_rvalid;
wire                                                    plmt_wready;
wire                                                    plic_hart0_seiack;
wire                                                    hart0_seip;
wire                                                    hart0_core_clk;
wire                                                    hart0_core_reset_n;
wire                                                    hart0_resethaltreq;
wire                                                    hart0_unavail;
wire                                                    hart0_under_reset;


assign hart0_core_clk     = core_clk[0];
assign hart0_core_reset_n = core_resetn[0];
assign hart0_slv_reset_n  = slvp_resetn[0];
assign hart0_slv1_reset_n = slvp_resetn[0];
assign hart0_bus_clk_en   = axi_bus_clk_en;
assign hart0_bus_clk      = aclk;
assign hart0_slv_clk_en   = axi_bus_clk_en;
assign hart0_slv_clk      = aclk;
assign hart0_slv1_clk_en  = axi_bus_clk_en;
assign hart0_slv1_clk     = aclk;
assign hart0_lm_clk       = lm_clk[0];
assign hart0_dcu_clk      = dc_clk[0];

assign hart0_ueip = 1'b0;
`ifdef NDS_IO_LM
assign hart0_wakeup_event = {(plic_hart0_meip | lm_local_int), plic_hart0_seip, 1'b0 , mtip[0], plicsw_hart0_msip, dm_debugint[0]};
`else
assign hart0_wakeup_event = {plic_hart0_meip, plic_hart0_seip, 1'b0 , mtip[0], plicsw_hart0_msip, dm_debugint[0]};
`endif
`ifdef NDS_IO_ILM_TL_UL
	`ifndef NDS_IO_ILM_RAM_ECC
wire nds_unused_bwe = (|ilm0_bwe) | (|ilm1_bwe);
generate
if (ILM_TL_UL_RAM_NUM < 2) begin : gen_ilm_tl_ul_ram1_stub
       assign ilm1_rdata = {ILM_TL_UL_RAM_DW{1'b0}};
       assign nds_unused_tl_ul_ilm1_ctrl_out = {`NDS_ILM_RAM_CTRL_OUT_WIDTH{1'b0}};
end
endgenerate
	`endif
`endif
`ifdef NDS_IO_ILM_TL_UL
	`ifdef NDS_IO_ILM_RAM_ECC
generate
if (ILM_TL_UL_RAM_NUM < 2) begin : gen_ilm_tl_ul_ram1_stub
       wire nds_unused_ram1_if = ilm1_cs | ilm1_we | (|ilm1_bwe);
       assign ilm1_rdata = {ILM_TL_UL_RAM_DW{1'b0}};
       assign nds_unused_tl_ul_ilm1_ctrl_out = {`NDS_ILM_RAM_CTRL_OUT_WIDTH{1'b0}};
end
endgenerate
	`endif
`endif
`ifdef NDS_IO_ILM_TL_UL
assign ilm_reset_n = lm_reset_n;
`endif
`ifdef NDS_IO_DLM_TL_UL
assign dlm_reset_n = lm_reset_n;
`endif
`ifdef NDS_IO_ILM_TL_UL
assign ilm_a_addr_ext = {ilm_a_addr, 3'b0};
assign ilm_d_parity0[ILM_TL_UL_EW-1:0] = ilm_d_parity0_out[ILM_TL_UL_EW-1:0];
assign ilm_d_parity1[ILM_TL_UL_EW-1:0] = ilm_d_parity1_out[ILM_TL_UL_EW-1:0];
generate
if (ILM_ECC_SUPPORT && (XLEN == 32)) begin : gen_ilm_parity_32
       wire nds_unused_ilm_a_parity0 = ilm_a_parity0[7];
       wire nds_unused_ilm_a_parity1 = ilm_a_parity1[7];
       assign ilm_a_parity0_in = ilm_a_parity0[6:0];
       assign ilm_a_parity1_in = ilm_a_parity1[6:0];
       assign ilm_d_parity0[7] = 1'b0;
       assign ilm_d_parity1[7] = 1'b0;
end
else if (ILM_ECC_SUPPORT && (XLEN == 64)) begin : gen_ilm_parity_64
       assign ilm_a_parity0_in = ilm_a_parity0[7:0];
       assign ilm_a_parity1_in = ilm_a_parity1[7:0];
end
else begin : gen_ilm_parity_no_ecc
       wire nds_unused_ilm_a_parity0 = |ilm_a_parity0;
       wire nds_unused_ilm_a_parity1 = |ilm_a_parity1;
       assign ilm_a_parity0_in = 1'b0;
       assign ilm_a_parity1_in = 1'b0;
       assign ilm_d_parity0[7:1] = 7'b0;
       assign ilm_d_parity1[7:1] = 7'b0;
end
endgenerate
`endif
`ifdef NDS_IO_SLAVEPORT_COMMON_X1
      assign slv_awuser = slv_awaddr[SLVPORT_DLM_SEL_BIT];
      assign slv_aruser = slv_araddr[SLVPORT_DLM_SEL_BIT];
`endif
`ifdef NDS_IO_SLAVEPORT_COMMON_X1
generate
if(SLVPORT_ID_WIDTH > (BIU_ID_WIDTH+4)) begin : gen_hart_slv_id_truncated
      assign hart0_slv_arid = {{(SLVPORT_ID_WIDTH-(BIU_ID_WIDTH+4)){1'b0}}, slv_arid};
      assign hart0_slv_awid = {{(SLVPORT_ID_WIDTH-(BIU_ID_WIDTH+4)){1'b0}}, slv_awid};
      assign slv_rid = hart0_slv_rid[0+:(BIU_ID_WIDTH+4)];
      assign slv_bid = hart0_slv_bid[0+:(BIU_ID_WIDTH+4)];
end
else if(SLVPORT_ID_WIDTH < (BIU_ID_WIDTH+4)) begin : gen_hart_slv_id_extended
      assign hart0_slv_arid = slv_arid[0+:SLVPORT_ID_WIDTH];
      assign hart0_slv_awid = slv_awid[0+:SLVPORT_ID_WIDTH];
      assign slv_rid = {{((BIU_ID_WIDTH+4)-SLVPORT_ID_WIDTH){1'b0}}, hart0_slv_rid};
      assign slv_bid = {{((BIU_ID_WIDTH+4)-SLVPORT_ID_WIDTH){1'b0}}, hart0_slv_bid};
end
else begin : gen_hart_slv_id_connection
      assign hart0_slv_arid = slv_arid;
      assign hart0_slv_awid = slv_awid;
      assign slv_rid = hart0_slv_rid;
      assign slv_bid = hart0_slv_bid;
end
endgenerate
`endif
`ifdef NDS_IO_BIU_AXI_COMMON_X2
	assign i_bid_dummy = 4'b0;
	assign i_rid_dummy = 4'b0;
	assign d_exmon_bid_dummy = 4'b1;
	assign d_exmon_rid_dummy = 4'b1;
`endif
`ifdef NDS_IO_BIU_AXI_COMMON_X1
	assign exmon_bid_dummy = 4'b0;
	assign exmon_rid_dummy = 4'b0;
`endif
generate
if (BIU_DATA_WIDTH > NCE_DATA_WIDTH) begin: gen_connect_axi_sdn
	assign {sdn2busdec_arid, sdn2busdec_arid_dummy} = {(BIU_ID_WIDTH+4){1'b0}};
	assign {sdn2busdec_awid, sdn2busdec_awid_dummy} = {(BIU_ID_WIDTH+4){1'b0}};
end
else begin: gen_connect_axi
		assign sdn2busdec_araddr  = inter2sdn_araddr;
		assign sdn2busdec_arburst = inter2sdn_arburst;
		assign sdn2busdec_arcache = inter2sdn_arcache;
		assign {sdn2busdec_arid, sdn2busdec_arid_dummy} = {inter2sdn_arid, inter2sdn_arid_dummy};
		assign sdn2busdec_arlen   = inter2sdn_arlen;
		assign sdn2busdec_arlock  = inter2sdn_arlock;
		assign sdn2busdec_arprot  = inter2sdn_arprot;
		assign sdn2busdec_arsize  = inter2sdn_arsize;
		assign sdn2busdec_arvalid = inter2sdn_arvalid;
		assign inter2sdn_arready  = sdn2busdec_arready;

		assign sdn2busdec_awaddr  = inter2sdn_awaddr;
		assign sdn2busdec_awburst = inter2sdn_awburst;
		assign sdn2busdec_awcache = inter2sdn_awcache;
		assign {sdn2busdec_awid, sdn2busdec_awid_dummy} = {inter2sdn_awid, inter2sdn_awid_dummy};
		assign sdn2busdec_awlen   = inter2sdn_awlen;
		assign sdn2busdec_awlock  = inter2sdn_awlock;
		assign sdn2busdec_awprot  = inter2sdn_awprot;
		assign sdn2busdec_awsize  = inter2sdn_awsize;
		assign sdn2busdec_awvalid = inter2sdn_awvalid;
		assign inter2sdn_awready  = sdn2busdec_awready;

		assign {inter2sdn_bid, inter2sdn_bid_dummy} = {sdn2busdec_bid, sdn2busdec_bid_dummy};
		assign inter2sdn_bresp    = sdn2busdec_bresp;
		assign inter2sdn_bvalid   = sdn2busdec_bvalid;
		assign sdn2busdec_bready  = inter2sdn_bready;

		assign inter2sdn_rdata    = sdn2busdec_rdata;
		assign {inter2sdn_rid, inter2sdn_rid_dummy} = {sdn2busdec_rid, sdn2busdec_rid_dummy};
		assign inter2sdn_rlast    = sdn2busdec_rlast;
		assign inter2sdn_rresp    = sdn2busdec_rresp;
		assign inter2sdn_rvalid   = sdn2busdec_rvalid;
		assign sdn2busdec_rready  = inter2sdn_rready;

		assign sdn2busdec_wdata   = inter2sdn_wdata;
		assign sdn2busdec_wlast   = inter2sdn_wlast;
		assign sdn2busdec_wstrb   = inter2sdn_wstrb;
		assign sdn2busdec_wvalid  = inter2sdn_wvalid;
		assign inter2sdn_wready   = sdn2busdec_wready;
end
endgenerate
`ifdef ATCBUSDEC301_SLV1_SUPPORT
	assign plic_awaddr	=	busdec2nce_awaddr	;
	assign plic_awlen	=	busdec2nce_awlen	;
	assign plic_awsize	=	busdec2nce_awsize	;
	assign plic_awburst	=	busdec2nce_awburst	;
	assign plic_awlock	=	busdec2nce_awlock	;
	assign plic_awcache	=	busdec2nce_awcache	;
	assign plic_awprot	=	busdec2nce_awprot	;
	assign plic_wdata	=	busdec2nce_wdata	;
	assign plic_wstrb	=	busdec2nce_wstrb	;
	assign plic_wlast	=	busdec2nce_wlast	;
	assign plic_araddr	=	busdec2nce_araddr	;
	assign plic_arlen	=	busdec2nce_arlen	;
	assign plic_arsize	=	busdec2nce_arsize	;
	assign plic_arburst	=	busdec2nce_arburst	;
	assign plic_arlock	=	busdec2nce_arlock	;
	assign plic_arcache	=	busdec2nce_arcache	;
	assign plic_arprot	=	busdec2nce_arprot	;
`endif
`ifdef ATCBUSDEC301_SLV2_SUPPORT
	assign plmt_awaddr	=	busdec2nce_awaddr	;
	assign plmt_awlen	=	busdec2nce_awlen	;
	assign plmt_awsize	=	busdec2nce_awsize	;
	assign plmt_awburst	=	busdec2nce_awburst	;
	assign plmt_awlock	=	busdec2nce_awlock	;
	assign plmt_awcache	=	busdec2nce_awcache	;
	assign plmt_awprot	=	busdec2nce_awprot	;
	assign plmt_wdata	=	busdec2nce_wdata	;
	assign plmt_wstrb	=	busdec2nce_wstrb	;
	assign plmt_wlast	=	busdec2nce_wlast	;
	assign plmt_araddr	=	busdec2nce_araddr	;
	assign plmt_arlen	=	busdec2nce_arlen	;
	assign plmt_arsize	=	busdec2nce_arsize	;
	assign plmt_arburst	=	busdec2nce_arburst	;
	assign plmt_arlock	=	busdec2nce_arlock	;
	assign plmt_arcache	=	busdec2nce_arcache	;
	assign plmt_arprot	=	busdec2nce_arprot	;
`endif
`ifdef ATCBUSDEC301_SLV3_SUPPORT
	assign plicsw_awaddr	=	busdec2nce_awaddr	;
	assign plicsw_awlen	=	busdec2nce_awlen	;
	assign plicsw_awsize	=	busdec2nce_awsize	;
	assign plicsw_awburst	=	busdec2nce_awburst	;
	assign plicsw_awlock	=	busdec2nce_awlock	;
	assign plicsw_awcache	=	busdec2nce_awcache	;
	assign plicsw_awprot	=	busdec2nce_awprot	;
	assign plicsw_wdata	=	busdec2nce_wdata	;
	assign plicsw_wstrb	=	busdec2nce_wstrb	;
	assign plicsw_wlast	=	busdec2nce_wlast	;
	assign plicsw_araddr	=	busdec2nce_araddr	;
	assign plicsw_arlen	=	busdec2nce_arlen	;
	assign plicsw_arsize	=	busdec2nce_arsize	;
	assign plicsw_arburst	=	busdec2nce_arburst	;
	assign plicsw_arlock	=	busdec2nce_arlock	;
	assign plicsw_arcache	=	busdec2nce_arcache	;
	assign plicsw_arprot	=	busdec2nce_arprot	;
`endif
`ifdef ATCBUSDEC301_SLV4_SUPPORT
	assign dm_awaddr	=	busdec2nce_awaddr	;
	assign dm_awlen	=	busdec2nce_awlen	;
	assign dm_awsize	=	busdec2nce_awsize	;
	assign dm_awburst	=	busdec2nce_awburst	;
	assign dm_awlock	=	busdec2nce_awlock	;
	assign dm_awcache	=	busdec2nce_awcache	;
	assign dm_awprot	=	busdec2nce_awprot	;
	assign dm_wdata	=	busdec2nce_wdata	;
	assign dm_wstrb	=	busdec2nce_wstrb	;
	assign dm_wlast	=	busdec2nce_wlast	;
	assign dm_araddr	=	busdec2nce_araddr	;
	assign dm_arlen	=	busdec2nce_arlen	;
	assign dm_arsize	=	busdec2nce_arsize	;
	assign dm_arburst	=	busdec2nce_arburst	;
	assign dm_arlock	=	busdec2nce_arlock	;
	assign dm_arcache	=	busdec2nce_arcache	;
	assign dm_arprot	=	busdec2nce_arprot	;
`endif
assign stoptime_array[0] = hart0_stoptime;
	`ifndef NDS_IO_DEBUG
assign hart0_stoptime = 1'b0;
	`endif

assign stoptime = |stoptime_array;

`ifdef PLATFORM_DEBUG_SUBSYSTEM
	generate
	if (BIU_DATA_WIDTH > DM_SYS_DATA_WIDTH) begin : gen_connect_axi_dm_sup
		assign dm_sys_araddr          = dm_sup_araddr;
		assign dm_sys_arburst         = dm_sup_arburst;
		assign dm_sys_arcache         = dm_sup_arcache;
		assign dm_sys_arid	      = {BIU_ID_WIDTH{1'b0}};
		assign dm_sys_arlen           = dm_sup_arlen;
		assign dm_sys_arlock          = dm_sup_arlock;
		assign dm_sys_arprot          = dm_sup_arprot;
		assign dm_sys_arsize          = dm_sup_arsize;

		assign dm_sys_awaddr          = dm_sup_awaddr;
		assign dm_sys_awburst         = dm_sup_awburst;
		assign dm_sys_awcache         = dm_sup_awcache;
		assign dm_sys_awid            = {BIU_ID_WIDTH{1'b0}};
		assign dm_sys_awlen           = dm_sup_awlen;
		assign dm_sys_awlock          = dm_sup_awlock;
		assign dm_sys_awprot          = dm_sup_awprot;
		assign dm_sys_awsize          = dm_sup_awsize;

               assign dm_sup_bresp           = dm_sys_bresp;
	end
	else begin : gen_connect_axi_dm
		assign dm_sup_arready         = dm_sys_arready;
		assign dm_sup_awready         = dm_sys_awready;
		assign dm_sup_rvalid          = dm_sys_rvalid;
		assign dm_sup_rdata           = dm_sys_rdata;
		assign dm_sup_rid             = dm_sys_rid;
		assign dm_sup_rlast           = dm_sys_rlast;
		assign dm_sup_rresp           = dm_sys_rresp;
		assign dm_sup_wready          = dm_sys_wready;
		assign dm_sup_bvalid          = dm_sys_bvalid;
		assign dm_sup_bid             = dm_sys_bid;
		assign dm_sup_bresp           = dm_sys_bresp;

		assign dm_sys_araddr          = dm_sup_araddr;
		assign dm_sys_arburst         = dm_sup_arburst;
		assign dm_sys_arcache         = dm_sup_arcache;
		assign dm_sys_arid            = dm_sup_arid;
		assign dm_sys_arlen           = dm_sup_arlen;
		assign dm_sys_arlock          = dm_sup_arlock;
		assign dm_sys_arprot          = dm_sup_arprot;
		assign dm_sys_arsize          = dm_sup_arsize;
		assign dm_sys_arvalid         = dm_sup_arvalid;

		assign dm_sys_awaddr          = dm_sup_awaddr;
		assign dm_sys_awburst         = dm_sup_awburst;
		assign dm_sys_awcache         = dm_sup_awcache;
		assign dm_sys_awid            = dm_sup_awid;
		assign dm_sys_awlen           = dm_sup_awlen;
		assign dm_sys_awlock          = dm_sup_awlock;
		assign dm_sys_awprot          = dm_sup_awprot;
		assign dm_sys_awsize          = dm_sup_awsize;
		assign dm_sys_awvalid         = dm_sup_awvalid;

		assign dm_sys_rready          = dm_sup_rready;
		assign dm_sys_wdata           = dm_sup_wdata;
		assign dm_sys_wlast           = dm_sup_wlast;
		assign dm_sys_wstrb           = dm_sup_wstrb;
		assign dm_sys_wvalid          = dm_sup_wvalid;
		assign dm_sys_bready          = dm_sup_bready;
	end
	endgenerate
	`ifdef PLATFORM_PLDM_SYS_BUS_ACCESS
	`else
		assign dm_sys_arready	= 1'b1;
		assign dm_sys_awready	= 1'b1;
		assign dm_sys_rvalid	= 1'b0;
		assign dm_sys_rdata	= {BIU_DATA_WIDTH{1'b0}};
		assign dm_sys_rid	= {BIU_ID_WIDTH{1'b0}};
		assign dm_sys_rlast	= 1'b0;
		assign dm_sys_rresp	= 2'b0;
		assign dm_sys_wready	= 1'b1;
		assign dm_sys_bvalid	= 1'b0;
		assign dm_sys_bid	= {BIU_ID_WIDTH{1'b0}};
		assign dm_sys_bresp	= 2'b0;
	`endif
`endif


`ifdef PLATFORM_DEBUG_SUBSYSTEM
`else
    assign       dm_debugint     = {NHART{1'b0}};
    assign       dm_resethaltreq = {NHART{1'b0}};
`endif

`ifdef PLATFORM_DEBUG_SUBSYSTEM
	assign	dbg_srst_req	= ndmreset;
`else
	assign	dbg_srst_req	= 1'b0;
`endif

`ifdef PLATFORM_NO_PLIC_SW
assign plicsw_hart0_msip = 1'b0;
`endif
 assign hart0_hart_id = 64'd0;


`ifndef NDS_IO_SEIP
assign hart0_seiack              = 1'b0;
`endif
assign dm_hart_unavail[0]        = hart0_unavail;
assign dm_hart_under_reset[0]    = hart0_under_reset;
`ifndef NDS_IO_DEBUG
assign hart0_unavail             = 1'b0;
assign hart0_under_reset         = 1'b0;
`endif
generate
if (BIU_ASYNC_SUPPORT == 0) begin : gen_debugint_connection
   assign hart0_debugint = dm_debugint[0];
end
endgenerate
generate
if (BIU_ASYNC_SUPPORT == 0) begin : gen_resethaltreq_connection
   assign hart0_resethaltreq = dm_resethaltreq[0];
end
endgenerate
generate
if (BIU_ASYNC_SUPPORT == 0) begin : gen_seip_connection
   assign hart0_seip = plic_hart0_seip;
end
endgenerate
generate
if (BIU_ASYNC_SUPPORT == 0) begin : gen_seiack_connection
   assign plic_hart0_seiack = hart0_seiack;
end
endgenerate
generate
if (BIU_ASYNC_SUPPORT == 0) begin : gen_meip_connection
   assign hart0_meip = plic_hart0_meip;
end
endgenerate
generate
if (BIU_ASYNC_SUPPORT == 0) begin : gen_meiack_connection
   assign plic_hart0_meiack = hart0_meiack;
end
endgenerate
generate
if (BIU_ASYNC_SUPPORT == 0) begin : gen_msip_connection
   assign hart0_msip = plicsw_hart0_msip;
end
endgenerate
generate
if (BIU_ASYNC_SUPPORT == 0) begin : gen_mtip_connection
   assign hart0_mtip = mtip[0];
end
endgenerate

`ifdef NDS_IO_ILM_TL_UL
   `ifdef NDS_IO_ILM_RAM_ECC
generate
if (ILM_TL_UL_RAM_NUM >= 1) begin : gen_tl_ul_ram0

	kv_ilm_ecc_ram #(
		.ILM_RAM_AW      (ILM_TL_UL_RAM_AW),
		.ILM_RAM_CTRL_IN_WIDTH(`NDS_ILM_RAM_CTRL_IN_WIDTH),
		.ILM_RAM_CTRL_OUT_WIDTH(`NDS_ILM_RAM_CTRL_OUT_WIDTH),
		.ILM_RAM_DW      (ILM_TL_UL_RAM_DW)
	) u_ilm_tl_ul_ram0 (
		.clk         (ilm_ram_clk                       ),
		.ilm_cs      (ilm0_cs                           ),
		.ilm_we      (ilm0_we                           ),
		.ilm_addr    (ilm0_addr                         ),
		.ilm_wdata   (ilm0_wdata                        ),
		.ilm_rdata   (ilm0_rdata                        ),
		.ilm_ctrl_in ({`NDS_ILM_RAM_CTRL_IN_WIDTH{1'b0}}),
		.ilm_ctrl_out(nds_unused_tl_ul_ilm0_ctrl_out    )
	);

end
endgenerate

generate
if (ILM_TL_UL_RAM_NUM >= 2) begin : gen_tl_ul_ram1

	kv_ilm_ecc_ram #(
		.ILM_RAM_AW      (ILM_TL_UL_RAM_AW),
		.ILM_RAM_CTRL_IN_WIDTH(`NDS_ILM_RAM_CTRL_IN_WIDTH),
		.ILM_RAM_CTRL_OUT_WIDTH(`NDS_ILM_RAM_CTRL_OUT_WIDTH),
		.ILM_RAM_DW      (ILM_TL_UL_RAM_DW)
	) u_ilm_tl_ul_ram1 (
		.clk         (ilm_ram_clk                       ),
		.ilm_cs      (ilm1_cs                           ),
		.ilm_we      (ilm1_we                           ),
		.ilm_addr    (ilm1_addr                         ),
		.ilm_wdata   (ilm1_wdata                        ),
		.ilm_rdata   (ilm1_rdata                        ),
		.ilm_ctrl_in ({`NDS_ILM_RAM_CTRL_IN_WIDTH{1'b0}}),
		.ilm_ctrl_out(nds_unused_tl_ul_ilm1_ctrl_out    )
	);

end
endgenerate

   `else
generate
if (ILM_TL_UL_RAM_NUM >= 1) begin : gen_tl_ul_ram0

	kv_ilm_ram #(
		.ILM_RAM_AW      (ILM_TL_UL_RAM_AW),
		.ILM_RAM_BWEW    (ILM_TL_UL_RAM_BWEW),
		.ILM_RAM_CTRL_IN_WIDTH(`NDS_ILM_RAM_CTRL_IN_WIDTH),
		.ILM_RAM_CTRL_OUT_WIDTH(`NDS_ILM_RAM_CTRL_OUT_WIDTH),
		.ILM_RAM_DW      (ILM_TL_UL_RAM_DW)
	) u_ilm_tl_ul_ram0 (
		.clk         (ilm_ram_clk                       ),
		.ilm_cs      (ilm0_cs                           ),
		.ilm_we      (ilm0_we                           ),
		.ilm_addr    (ilm0_addr                         ),
		.ilm_byte_we (ilm0_bwe                          ),
		.ilm_wdata   (ilm0_wdata                        ),
		.ilm_rdata   (ilm0_rdata                        ),
		.ilm_ctrl_in ({`NDS_ILM_RAM_CTRL_IN_WIDTH{1'b0}}),
		.ilm_ctrl_out(nds_unused_tl_ul_ilm0_ctrl_out    )
	);

end
endgenerate

generate
if (ILM_TL_UL_RAM_NUM >= 2) begin : gen_tl_ul_ram1

	kv_ilm_ram #(
		.ILM_RAM_AW      (ILM_TL_UL_RAM_AW),
		.ILM_RAM_BWEW    (ILM_TL_UL_RAM_BWEW),
		.ILM_RAM_CTRL_IN_WIDTH(`NDS_ILM_RAM_CTRL_IN_WIDTH),
		.ILM_RAM_CTRL_OUT_WIDTH(`NDS_ILM_RAM_CTRL_OUT_WIDTH),
		.ILM_RAM_DW      (ILM_TL_UL_RAM_DW)
	) u_ilm_tl_ul_ram1 (
		.clk         (ilm_ram_clk                       ),
		.ilm_cs      (ilm1_cs                           ),
		.ilm_we      (ilm1_we                           ),
		.ilm_addr    (ilm1_addr                         ),
		.ilm_byte_we (ilm1_bwe                          ),
		.ilm_wdata   (ilm1_wdata                        ),
		.ilm_rdata   (ilm1_rdata                        ),
		.ilm_ctrl_in ({`NDS_ILM_RAM_CTRL_IN_WIDTH{1'b0}}),
		.ilm_ctrl_out(nds_unused_tl_ul_ilm1_ctrl_out    )
	);

end
endgenerate

   `endif
sample_kv_clk_gen #(
	.RATIO           (2               )
) u_clock_gen (
	.clk_in (hart0_lm_clk  ),
	.resetn (ilm_reset_n   ),
	.clk_en (ilm_ram_clk_en),
	.clk_out(ilm_ram_clk   )
);

atcrambrg500 #(
	.DS_DW           (ILM_TL_UL_RAM_DW),
	.US_AW           (ILM_TL_UL_AW    )
) u_ilm_ram_brg (
	.clk       (hart0_lm_clk     ),
	.clk_en    (ilm_ram_clk_en   ),
	.resetn    (ilm_reset_n      ),
	.a_valid   (ilm_a_valid      ),
	.a_ready   (ilm_a_ready      ),
	.a_addr    ({ilm_a_addr,3'b0}),
	.a_data    (ilm_a_data       ),
	.a_opcode  (ilm_a_opcode     ),
	.a_mask    (ilm_a_mask       ),
	.a_size    (ilm_a_size       ),
	.a_parity0 (ilm_a_parity0_in ),
	.a_parity1 (ilm_a_parity1_in ),
	.d_valid   (ilm_d_valid      ),
	.d_ready   (ilm_d_ready      ),
	.d_data    (ilm_d_data       ),
	.d_parity0 (ilm_d_parity0_out),
	.d_parity1 (ilm_d_parity1_out),
	.d_denied  (ilm_d_denied     ),
	.ram0_cs   (ilm0_cs          ),
	.ram0_we   (ilm0_we          ),
	.ram0_addr (ilm0_addr        ),
	.ram0_wdata(ilm0_wdata       ),
	.ram0_bwe  (ilm0_bwe         ),
	.ram0_rdata(ilm0_rdata       ),
	.ram1_cs   (ilm1_cs          ),
	.ram1_we   (ilm1_we          ),
	.ram1_addr (ilm1_addr        ),
	.ram1_wdata(ilm1_wdata       ),
	.ram1_bwe  (ilm1_bwe         ),
	.ram1_rdata(ilm1_rdata       )
);

`endif
`ifdef NDS_IO_DLM_TL_UL
   `ifdef NDS_IO_DLM_RAM_ECC
kv_dlm_wait_ecc_ram #(
	.DLM_RAM_AMSB    (`NDS_DLM_AMSB   ),
	.DLM_RAM_BWEW    (`NDS_DLM_RAM_BWEW),
	.DLM_RAM_DW      (`NDS_DLM_RAM_DW ),
	.XLEN            (`NDS_XLEN       )
) u_dlm_ram0 (
	.lm_clk      (hart0_lm_clk),
	.lm_reset_n  (dlm_reset_n ),
	.dlm_a_addr  (dlm_a_addr  ),
	.dlm_a_data  (dlm_a_data  ),
	.dlm_a_mask  (dlm_a_mask  ),
	.dlm_a_opcode(dlm_a_opcode),
	.dlm_a_parity(dlm_a_parity),
	.dlm_a_size  (dlm_a_size  ),
	.dlm_a_user  (dlm_a_user  ),
	.dlm_a_valid (dlm_a_valid ),
	.dlm_a_ready (dlm_a_ready ),
	.dlm_d_data  (dlm_d_data  ),
	.dlm_d_parity(dlm_d_parity),
	.dlm_d_denied(dlm_d_denied),
	.dlm_d_ready (dlm_d_ready ),
	.dlm_d_valid (dlm_d_valid )
);

   `else
kv_dlm_wait_ram #(
	.DLM_RAM_AMSB    (`NDS_DLM_AMSB   ),
	.DLM_RAM_BWEW    (`NDS_DLM_RAM_BWEW),
	.DLM_RAM_DW      (`NDS_DLM_RAM_DW ),
	.XLEN            (`NDS_XLEN       )
) u_dlm_ram0 (
	.lm_clk      (hart0_lm_clk),
	.lm_reset_n  (dlm_reset_n ),
	.dlm_a_addr  (dlm_a_addr  ),
	.dlm_a_data  (dlm_a_data  ),
	.dlm_a_mask  (dlm_a_mask  ),
	.dlm_a_opcode(dlm_a_opcode),
	.dlm_a_size  (dlm_a_size  ),
	.dlm_a_user  (dlm_a_user  ),
	.dlm_a_valid (dlm_a_valid ),
	.dlm_a_parity(dlm_a_parity),
	.dlm_a_ready (dlm_a_ready ),
	.dlm_d_data  (dlm_d_data  ),
	.dlm_d_denied(dlm_d_denied),
	.dlm_d_ready (dlm_d_ready ),
	.dlm_d_parity(dlm_d_parity),
	.dlm_d_valid (dlm_d_valid )
);

   `endif
`endif
`ifdef NDS_IO_BIU_AXI_COMMON_X2
atcbmc301 #(
	.ADDR_WIDTH      (ADDR_WIDTH      ),
	.DATA_WIDTH      (BIU_DATA_WIDTH  )
) u_axi_bmc_x2 (
   `ifdef ATCBMC301_MST0_SUPPORT
	.us0_araddr (hart0_i_araddr[ADDR_MSB:0]           ),
	.us0_arburst(hart0_i_arburst                      ),
	.us0_arcache(hart0_i_arcache                      ),
	.us0_arid   (hart0_i_arid                         ),
	.us0_arlen  (hart0_i_arlen                        ),
	.us0_arlock (hart0_i_arlock                       ),
	.us0_arprot (hart0_i_arprot                       ),
	.us0_arready(hart0_i_arready                      ),
	.us0_arsize (hart0_i_arsize                       ),
	.us0_arvalid(hart0_i_arvalid                      ),
	.us0_awaddr (hart0_i_awaddr[ADDR_MSB:0]           ),
	.us0_awburst(hart0_i_awburst                      ),
	.us0_awcache(hart0_i_awcache                      ),
	.us0_awid   (hart0_i_awid                         ),
	.us0_awlen  (hart0_i_awlen                        ),
	.us0_awlock (hart0_i_awlock                       ),
	.us0_awprot (hart0_i_awprot                       ),
	.us0_awready(hart0_i_awready                      ),
	.us0_awsize (hart0_i_awsize                       ),
	.us0_awvalid(hart0_i_awvalid                      ),
	.us0_bid    (hart0_i_bid                          ),
	.us0_bready (hart0_i_bready                       ),
	.us0_bresp  (hart0_i_bresp                        ),
	.us0_bvalid (hart0_i_bvalid                       ),
	.us0_rdata  (hart0_i_rdata                        ),
	.us0_rid    (hart0_i_rid                          ),
	.us0_rlast  (hart0_i_rlast                        ),
	.us0_rready (hart0_i_rready                       ),
	.us0_rresp  (hart0_i_rresp                        ),
	.us0_rvalid (hart0_i_rvalid                       ),
	.us0_wdata  (hart0_i_wdata                        ),
	.us0_wlast  (hart0_i_wlast                        ),
	.us0_wready (hart0_i_wready                       ),
	.us0_wstrb  (hart0_i_wstrb                        ),
	.us0_wvalid (hart0_i_wvalid                       ),
   `endif
   `ifdef ATCBMC301_SLV1_SUPPORT
	.ds1_araddr (inter2sdn_araddr                     ),
	.ds1_arburst(inter2sdn_arburst                    ),
	.ds1_arcache(inter2sdn_arcache                    ),
	.ds1_arid   ({inter2sdn_arid,inter2sdn_arid_dummy}),
	.ds1_arlen  (inter2sdn_arlen                      ),
	.ds1_arlock (inter2sdn_arlock                     ),
	.ds1_arprot (inter2sdn_arprot                     ),
	.ds1_arready(inter2sdn_arready                    ),
	.ds1_arsize (inter2sdn_arsize                     ),
	.ds1_arvalid(inter2sdn_arvalid                    ),
	.ds1_awaddr (inter2sdn_awaddr                     ),
	.ds1_awburst(inter2sdn_awburst                    ),
	.ds1_awcache(inter2sdn_awcache                    ),
	.ds1_awid   ({inter2sdn_awid,inter2sdn_awid_dummy}),
	.ds1_awlen  (inter2sdn_awlen                      ),
	.ds1_awlock (inter2sdn_awlock                     ),
	.ds1_awprot (inter2sdn_awprot                     ),
	.ds1_awready(inter2sdn_awready                    ),
	.ds1_awsize (inter2sdn_awsize                     ),
	.ds1_awvalid(inter2sdn_awvalid                    ),
	.ds1_bid    ({inter2sdn_bid,inter2sdn_bid_dummy}  ),
	.ds1_bready (inter2sdn_bready                     ),
	.ds1_bresp  (inter2sdn_bresp                      ),
	.ds1_bvalid (inter2sdn_bvalid                     ),
	.ds1_rdata  (inter2sdn_rdata                      ),
	.ds1_rid    ({inter2sdn_rid,inter2sdn_rid_dummy}  ),
	.ds1_rlast  (inter2sdn_rlast                      ),
	.ds1_rready (inter2sdn_rready                     ),
	.ds1_rresp  (inter2sdn_rresp                      ),
	.ds1_rvalid (inter2sdn_rvalid                     ),
	.ds1_wdata  (inter2sdn_wdata                      ),
	.ds1_wlast  (inter2sdn_wlast                      ),
	.ds1_wready (inter2sdn_wready                     ),
	.ds1_wstrb  (inter2sdn_wstrb                      ),
	.ds1_wvalid (inter2sdn_wvalid                     ),
   `endif
   `ifdef ATCBMC301_SLV2_SUPPORT
	.ds2_araddr (i_araddr                             ),
	.ds2_arburst(i_arburst                            ),
	.ds2_arcache(i_arcache                            ),
	.ds2_arid   ({i_arid,i_arid_dummy}                ),
	.ds2_arlen  (i_arlen                              ),
	.ds2_arlock (i_arlock                             ),
	.ds2_arprot (i_arprot                             ),
	.ds2_arready(i_arready                            ),
	.ds2_arsize (i_arsize                             ),
	.ds2_arvalid(i_arvalid                            ),
	.ds2_awaddr (i_awaddr                             ),
	.ds2_awburst(i_awburst                            ),
	.ds2_awcache(i_awcache                            ),
	.ds2_awid   ({i_awid,i_awid_dummy}                ),
	.ds2_awlen  (i_awlen                              ),
	.ds2_awlock (i_awlock                             ),
	.ds2_awprot (i_awprot                             ),
	.ds2_awready(i_awready                            ),
	.ds2_awsize (i_awsize                             ),
	.ds2_awvalid(i_awvalid                            ),
	.ds2_bid    ({i_bid,i_bid_dummy}                  ),
	.ds2_bready (i_bready                             ),
	.ds2_bresp  (i_bresp                              ),
	.ds2_bvalid (i_bvalid                             ),
	.ds2_rdata  (i_rdata                              ),
	.ds2_rid    ({i_rid,i_rid_dummy}                  ),
	.ds2_rlast  (i_rlast                              ),
	.ds2_rready (i_rready                             ),
	.ds2_rresp  (i_rresp                              ),
	.ds2_rvalid (i_rvalid                             ),
	.ds2_wdata  (i_wdata                              ),
	.ds2_wlast  (i_wlast                              ),
	.ds2_wready (i_wready                             ),
	.ds2_wstrb  (i_wstrb                              ),
	.ds2_wvalid (i_wvalid                             ),
   `endif
   `ifdef ATCBMC301_SLV3_SUPPORT
	.ds3_araddr (d_exmon_araddr                       ),
	.ds3_arburst(d_exmon_arburst                      ),
	.ds3_arcache(d_exmon_arcache                      ),
	.ds3_arid   ({d_exmon_arid,d_exmon_arid_dummy}    ),
	.ds3_arlen  (d_exmon_arlen                        ),
	.ds3_arlock (d_exmon_arlock                       ),
	.ds3_arprot (d_exmon_arprot                       ),
	.ds3_arready(d_exmon_arready                      ),
	.ds3_arsize (d_exmon_arsize                       ),
	.ds3_arvalid(d_exmon_arvalid                      ),
	.ds3_awaddr (d_exmon_awaddr                       ),
	.ds3_awburst(d_exmon_awburst                      ),
	.ds3_awcache(d_exmon_awcache                      ),
	.ds3_awid   ({d_exmon_awid,d_exmon_awid_dummy}    ),
	.ds3_awlen  (d_exmon_awlen                        ),
	.ds3_awlock (d_exmon_awlock                       ),
	.ds3_awprot (d_exmon_awprot                       ),
	.ds3_awready(d_exmon_awready                      ),
	.ds3_awsize (d_exmon_awsize                       ),
	.ds3_awvalid(d_exmon_awvalid                      ),
	.ds3_bid    ({d_exmon_bid,d_exmon_bid_dummy}      ),
	.ds3_bready (d_exmon_bready                       ),
	.ds3_bresp  (d_exmon_bresp                        ),
	.ds3_bvalid (d_exmon_bvalid                       ),
	.ds3_rdata  (d_exmon_rdata                        ),
	.ds3_rid    ({d_exmon_rid,d_exmon_rid_dummy}      ),
	.ds3_rlast  (d_exmon_rlast                        ),
	.ds3_rready (d_exmon_rready                       ),
	.ds3_rresp  (d_exmon_rresp                        ),
	.ds3_rvalid (d_exmon_rvalid                       ),
	.ds3_wdata  (d_exmon_wdata                        ),
	.ds3_wlast  (d_exmon_wlast                        ),
	.ds3_wready (d_exmon_wready                       ),
	.ds3_wstrb  (d_exmon_wstrb                        ),
	.ds3_wvalid (d_exmon_wvalid                       ),
   `endif
   `ifdef ATCBMC301_MST1_SUPPORT
	.us1_araddr (hart0_d_araddr[ADDR_MSB:0]           ),
	.us1_arburst(hart0_d_arburst                      ),
	.us1_arcache(hart0_d_arcache                      ),
	.us1_arid   (hart0_d_arid                         ),
	.us1_arlen  (hart0_d_arlen                        ),
	.us1_arlock (hart0_d_arlock                       ),
	.us1_arprot (hart0_d_arprot                       ),
	.us1_arready(hart0_d_arready                      ),
	.us1_arsize (hart0_d_arsize                       ),
	.us1_arvalid(hart0_d_arvalid                      ),
	.us1_awaddr (hart0_d_awaddr[ADDR_MSB:0]           ),
	.us1_awburst(hart0_d_awburst                      ),
	.us1_awcache(hart0_d_awcache                      ),
	.us1_awid   (hart0_d_awid                         ),
	.us1_awlen  (hart0_d_awlen                        ),
	.us1_awlock (hart0_d_awlock                       ),
	.us1_awprot (hart0_d_awprot                       ),
	.us1_awready(hart0_d_awready                      ),
	.us1_awsize (hart0_d_awsize                       ),
	.us1_awvalid(hart0_d_awvalid                      ),
	.us1_bid    (hart0_d_bid                          ),
	.us1_bready (hart0_d_bready                       ),
	.us1_bresp  (hart0_d_bresp                        ),
	.us1_bvalid (hart0_d_bvalid                       ),
	.us1_rdata  (hart0_d_rdata                        ),
	.us1_rid    (hart0_d_rid                          ),
	.us1_rlast  (hart0_d_rlast                        ),
	.us1_rready (hart0_d_rready                       ),
	.us1_rresp  (hart0_d_rresp                        ),
	.us1_rvalid (hart0_d_rvalid                       ),
	.us1_wdata  (hart0_d_wdata                        ),
	.us1_wlast  (hart0_d_wlast                        ),
	.us1_wready (hart0_d_wready                       ),
	.us1_wstrb  (hart0_d_wstrb                        ),
	.us1_wvalid (hart0_d_wvalid                       ),
   `endif
	.aclk       (aclk                                 ),
	.aresetn    (aresetn                              )
);

`endif
`ifdef NDS_IO_BIU_AXI_COMMON_X1
atcbmc301 #(
	.ADDR_WIDTH      (ADDR_WIDTH      ),
	.DATA_WIDTH      (BIU_DATA_WIDTH  )
) u_axi_bmc_x1 (
   `ifdef ATCBMC301_MST0_SUPPORT
	.us0_araddr (hart0_araddr[ADDR_MSB:0]             ),
	.us0_arburst(hart0_arburst                        ),
	.us0_arcache(hart0_arcache                        ),
	.us0_arid   (hart0_arid                           ),
	.us0_arlen  (hart0_arlen                          ),
	.us0_arlock (hart0_arlock                         ),
	.us0_arprot (hart0_arprot                         ),
	.us0_arready(hart0_arready                        ),
	.us0_arsize (hart0_arsize                         ),
	.us0_arvalid(hart0_arvalid                        ),
	.us0_awaddr (hart0_awaddr[ADDR_MSB:0]             ),
	.us0_awburst(hart0_awburst                        ),
	.us0_awcache(hart0_awcache                        ),
	.us0_awid   (hart0_awid                           ),
	.us0_awlen  (hart0_awlen                          ),
	.us0_awlock (hart0_awlock                         ),
	.us0_awprot (hart0_awprot                         ),
	.us0_awready(hart0_awready                        ),
	.us0_awsize (hart0_awsize                         ),
	.us0_awvalid(hart0_awvalid                        ),
	.us0_bid    (hart0_bid                            ),
	.us0_bready (hart0_bready                         ),
	.us0_bresp  (hart0_bresp                          ),
	.us0_bvalid (hart0_bvalid                         ),
	.us0_rdata  (hart0_rdata                          ),
	.us0_rid    (hart0_rid                            ),
	.us0_rlast  (hart0_rlast                          ),
	.us0_rready (hart0_rready                         ),
	.us0_rresp  (hart0_rresp                          ),
	.us0_rvalid (hart0_rvalid                         ),
	.us0_wdata  (hart0_wdata                          ),
	.us0_wlast  (hart0_wlast                          ),
	.us0_wready (hart0_wready                         ),
	.us0_wstrb  (hart0_wstrb                          ),
	.us0_wvalid (hart0_wvalid                         ),
   `endif
   `ifdef ATCBMC301_SLV1_SUPPORT
	.ds1_araddr (inter2sdn_araddr                     ),
	.ds1_arburst(inter2sdn_arburst                    ),
	.ds1_arcache(inter2sdn_arcache                    ),
	.ds1_arid   ({inter2sdn_arid,inter2sdn_arid_dummy}),
	.ds1_arlen  (inter2sdn_arlen                      ),
	.ds1_arlock (inter2sdn_arlock                     ),
	.ds1_arprot (inter2sdn_arprot                     ),
	.ds1_arready(inter2sdn_arready                    ),
	.ds1_arsize (inter2sdn_arsize                     ),
	.ds1_arvalid(inter2sdn_arvalid                    ),
	.ds1_awaddr (inter2sdn_awaddr                     ),
	.ds1_awburst(inter2sdn_awburst                    ),
	.ds1_awcache(inter2sdn_awcache                    ),
	.ds1_awid   ({inter2sdn_awid,inter2sdn_awid_dummy}),
	.ds1_awlen  (inter2sdn_awlen                      ),
	.ds1_awlock (inter2sdn_awlock                     ),
	.ds1_awprot (inter2sdn_awprot                     ),
	.ds1_awready(inter2sdn_awready                    ),
	.ds1_awsize (inter2sdn_awsize                     ),
	.ds1_awvalid(inter2sdn_awvalid                    ),
	.ds1_bid    ({inter2sdn_bid,inter2sdn_bid_dummy}  ),
	.ds1_bready (inter2sdn_bready                     ),
	.ds1_bresp  (inter2sdn_bresp                      ),
	.ds1_bvalid (inter2sdn_bvalid                     ),
	.ds1_rdata  (inter2sdn_rdata                      ),
	.ds1_rid    ({inter2sdn_rid,inter2sdn_rid_dummy}  ),
	.ds1_rlast  (inter2sdn_rlast                      ),
	.ds1_rready (inter2sdn_rready                     ),
	.ds1_rresp  (inter2sdn_rresp                      ),
	.ds1_rvalid (inter2sdn_rvalid                     ),
	.ds1_wdata  (inter2sdn_wdata                      ),
	.ds1_wlast  (inter2sdn_wlast                      ),
	.ds1_wready (inter2sdn_wready                     ),
	.ds1_wstrb  (inter2sdn_wstrb                      ),
	.ds1_wvalid (inter2sdn_wvalid                     ),
   `endif
   `ifdef ATCBMC301_SLV2_SUPPORT
	.ds2_araddr (exmon_araddr                         ),
	.ds2_arburst(exmon_arburst                        ),
	.ds2_arcache(exmon_arcache                        ),
	.ds2_arid   ({exmon_arid,exmon_arid_dummy}        ),
	.ds2_arlen  (exmon_arlen                          ),
	.ds2_arlock (exmon_arlock                         ),
	.ds2_arprot (exmon_arprot                         ),
	.ds2_arready(exmon_arready                        ),
	.ds2_arsize (exmon_arsize                         ),
	.ds2_arvalid(exmon_arvalid                        ),
	.ds2_awaddr (exmon_awaddr                         ),
	.ds2_awburst(exmon_awburst                        ),
	.ds2_awcache(exmon_awcache                        ),
	.ds2_awid   ({exmon_awid,exmon_awid_dummy}        ),
	.ds2_awlen  (exmon_awlen                          ),
	.ds2_awlock (exmon_awlock                         ),
	.ds2_awprot (exmon_awprot                         ),
	.ds2_awready(exmon_awready                        ),
	.ds2_awsize (exmon_awsize                         ),
	.ds2_awvalid(exmon_awvalid                        ),
	.ds2_bid    ({exmon_bid,exmon_bid_dummy}          ),
	.ds2_bready (exmon_bready                         ),
	.ds2_bresp  (exmon_bresp                          ),
	.ds2_bvalid (exmon_bvalid                         ),
	.ds2_rdata  (exmon_rdata                          ),
	.ds2_rid    ({exmon_rid,exmon_rid_dummy}          ),
	.ds2_rlast  (exmon_rlast                          ),
	.ds2_rready (exmon_rready                         ),
	.ds2_rresp  (exmon_rresp                          ),
	.ds2_rvalid (exmon_rvalid                         ),
	.ds2_wdata  (exmon_wdata                          ),
	.ds2_wlast  (exmon_wlast                          ),
	.ds2_wready (exmon_wready                         ),
	.ds2_wstrb  (exmon_wstrb                          ),
	.ds2_wvalid (exmon_wvalid                         ),
   `endif
   `ifdef ATCBMC301_SLV3_SUPPORT
	.ds3_araddr (                             ),
	.ds3_arburst(                             ),
	.ds3_arcache(                             ),
	.ds3_arid   (                             ),
	.ds3_arlen  (                             ),
	.ds3_arlock (                             ),
	.ds3_arprot (                             ),
	.ds3_arready(1'b1                                 ),
	.ds3_arsize (                             ),
	.ds3_arvalid(                             ),
	.ds3_awaddr (                             ),
	.ds3_awburst(                             ),
	.ds3_awcache(                             ),
	.ds3_awid   (                             ),
	.ds3_awlen  (                             ),
	.ds3_awlock (                             ),
	.ds3_awprot (                             ),
	.ds3_awready(1'b1                                 ),
	.ds3_awsize (                             ),
	.ds3_awvalid(                             ),
	.ds3_bid    ({(BIU_ID_WIDTH+4){1'b0}}             ),
	.ds3_bready (                             ),
	.ds3_bresp  (2'b0                                 ),
	.ds3_bvalid (1'b0                                 ),
	.ds3_rdata  ({(BIU_DATA_WIDTH){1'b0}}             ),
	.ds3_rid    ({(BIU_ID_WIDTH+4){1'b0}}             ),
	.ds3_rlast  (1'b0                                 ),
	.ds3_rready (                             ),
	.ds3_rresp  (2'b0                                 ),
	.ds3_rvalid (1'b0                                 ),
	.ds3_wdata  (                             ),
	.ds3_wlast  (                             ),
	.ds3_wready (1'b1                                 ),
	.ds3_wstrb  (                             ),
	.ds3_wvalid (                             ),
   `endif
   `ifdef ATCBMC301_MST1_SUPPORT
	.us1_araddr ({ADDR_WIDTH{1'b0}}                   ),
	.us1_arburst(2'b0                                 ),
	.us1_arcache(4'b0                                 ),
	.us1_arid   ({(BIU_ID_WIDTH){1'b0}}               ),
	.us1_arlen  (8'b0                                 ),
	.us1_arlock (                             ),
	.us1_arprot (3'b0                                 ),
	.us1_arready(                             ),
	.us1_arsize (3'b0                                 ),
	.us1_arvalid(1'b0                                 ),
	.us1_awaddr ({ADDR_WIDTH{1'b0}}                   ),
	.us1_awburst(2'b0                                 ),
	.us1_awcache(4'b0                                 ),
	.us1_awid   ({(BIU_ID_WIDTH){1'b0}}               ),
	.us1_awlen  (8'b0                                 ),
	.us1_awlock (1'b0                                 ),
	.us1_awprot (3'b0                                 ),
	.us1_awready(                             ),
	.us1_awsize (3'b0                                 ),
	.us1_awvalid(1'b0                                 ),
	.us1_bid    (                             ),
	.us1_bready (1'b1                                 ),
	.us1_bresp  (                             ),
	.us1_bvalid (                             ),
	.us1_rdata  (                             ),
	.us1_rid    (                             ),
	.us1_rlast  (                             ),
	.us1_rready (1'b1                                 ),
	.us1_rresp  (                             ),
	.us1_rvalid (                             ),
	.us1_wdata  ({(BIU_DATA_WIDTH){1'b0}}             ),
	.us1_wlast  (1'b0                                 ),
	.us1_wready (                             ),
	.us1_wstrb  ({(BIU_WSTRB_WIDTH){1'b0}}            ),
	.us1_wvalid (1'b0                                 ),
   `endif
	.aclk       (aclk                                 ),
	.aresetn    (aresetn                              )
);

`endif
`ifdef NDS_IO_BIU_AXI_COMMON_X2
atcexmon300 #(
	.ADDR_WIDTH      (ADDR_WIDTH      ),
	.DATA_WIDTH      (BIU_DATA_WIDTH  ),
	.ID_WIDTH        (BIU_ID_WIDTH    ),
	.NUM_EX_SEQ      (2               )
) u_atcexmon300x2 (
	.aclk       (aclk             ),
	.aresetn    (aresetn          ),
	.us_awid    (d_exmon_awid     ),
	.us_awaddr  (d_exmon_awaddr   ),
	.us_awlock  (d_exmon_awlock   ),
	.us_awburst (d_exmon_awburst  ),
	.us_awlen   (d_exmon_awlen    ),
	.us_awcache (d_exmon_awcache  ),
	.us_awprot  (d_exmon_awprot   ),
	.us_awsize  (d_exmon_awsize   ),
	.us_awqos   (4'b0             ),
	.us_awregion(4'b0             ),
	.us_awvalid (d_exmon_awvalid  ),
	.us_awready (d_exmon_awready  ),
	.us_wdata   (d_exmon_wdata    ),
	.us_wstrb   (d_exmon_wstrb    ),
	.us_wlast   (d_exmon_wlast    ),
	.us_wvalid  (d_exmon_wvalid   ),
	.us_wready  (d_exmon_wready   ),
	.us_bresp   (d_exmon_bresp    ),
	.us_bid     (d_exmon_bid      ),
	.us_bvalid  (d_exmon_bvalid   ),
	.us_bready  (d_exmon_bready   ),
	.us_arid    (d_exmon_arid     ),
	.us_araddr  (d_exmon_araddr   ),
	.us_arlock  (d_exmon_arlock   ),
	.us_arburst (d_exmon_arburst  ),
	.us_arlen   (d_exmon_arlen    ),
	.us_arcache (d_exmon_arcache  ),
	.us_arprot  (d_exmon_arprot   ),
	.us_arsize  (d_exmon_arsize   ),
	.us_arqos   (4'b0             ),
	.us_arregion(4'b0             ),
	.us_arvalid (d_exmon_arvalid  ),
	.us_arready (d_exmon_arready  ),
	.us_rid     (d_exmon_rid      ),
	.us_rresp   (d_exmon_rresp    ),
	.us_rdata   (d_exmon_rdata    ),
	.us_rlast   (d_exmon_rlast    ),
	.us_rvalid  (d_exmon_rvalid   ),
	.us_rready  (d_exmon_rready   ),
	.ds_awid    (d_awid           ),
	.ds_awaddr  (d_awaddr         ),
	.ds_awlock  (d_awlock         ),
	.ds_awburst (d_awburst        ),
	.ds_awlen   (d_awlen          ),
	.ds_awcache (d_awcache        ),
	.ds_awprot  (d_awprot         ),
	.ds_awsize  (d_awsize         ),
	.ds_awqos   (d_unused_awqos   ),
	.ds_awregion(d_unused_awregion),
	.ds_awvalid (d_awvalid        ),
	.ds_awready (d_awready        ),
	.ds_wdata   (d_wdata          ),
	.ds_wstrb   (d_wstrb          ),
	.ds_wlast   (d_wlast          ),
	.ds_wvalid  (d_wvalid         ),
	.ds_wready  (d_wready         ),
	.ds_bresp   (d_bresp          ),
	.ds_bid     (d_bid            ),
	.ds_bvalid  (d_bvalid         ),
	.ds_bready  (d_bready         ),
	.ds_arid    (d_arid           ),
	.ds_araddr  (d_araddr         ),
	.ds_arlock  (d_arlock         ),
	.ds_arburst (d_arburst        ),
	.ds_arlen   (d_arlen          ),
	.ds_arcache (d_arcache        ),
	.ds_arprot  (d_arprot         ),
	.ds_arsize  (d_arsize         ),
	.ds_arqos   (d_unused_arqos   ),
	.ds_arregion(d_unused_arregion),
	.ds_arvalid (d_arvalid        ),
	.ds_arready (d_arready        ),
	.ds_rid     (d_rid            ),
	.ds_rresp   (d_rresp          ),
	.ds_rdata   (d_rdata          ),
	.ds_rlast   (d_rlast          ),
	.ds_rvalid  (d_rvalid         ),
	.ds_rready  (d_rready         )
);

`endif
`ifdef NDS_IO_BIU_AXI_COMMON_X1
atcexmon300 #(
	.ADDR_WIDTH      (ADDR_WIDTH      ),
	.DATA_WIDTH      (BIU_DATA_WIDTH  ),
	.ID_WIDTH        (BIU_ID_WIDTH    ),
	.NUM_EX_SEQ      (2               )
) u_atcexmon300 (
	.aclk       (aclk           ),
	.aresetn    (aresetn        ),
	.us_awid    (exmon_awid     ),
	.us_awaddr  (exmon_awaddr   ),
	.us_awlock  (exmon_awlock   ),
	.us_awburst (exmon_awburst  ),
	.us_awlen   (exmon_awlen    ),
	.us_awcache (exmon_awcache  ),
	.us_awprot  (exmon_awprot   ),
	.us_awsize  (exmon_awsize   ),
	.us_awqos   (4'b0           ),
	.us_awregion(4'b0           ),
	.us_awvalid (exmon_awvalid  ),
	.us_awready (exmon_awready  ),
	.us_wdata   (exmon_wdata    ),
	.us_wstrb   (exmon_wstrb    ),
	.us_wlast   (exmon_wlast    ),
	.us_wvalid  (exmon_wvalid   ),
	.us_wready  (exmon_wready   ),
	.us_bresp   (exmon_bresp    ),
	.us_bid     (exmon_bid      ),
	.us_bvalid  (exmon_bvalid   ),
	.us_bready  (exmon_bready   ),
	.us_arid    (exmon_arid     ),
	.us_araddr  (exmon_araddr   ),
	.us_arlock  (exmon_arlock   ),
	.us_arburst (exmon_arburst  ),
	.us_arlen   (exmon_arlen    ),
	.us_arcache (exmon_arcache  ),
	.us_arprot  (exmon_arprot   ),
	.us_arsize  (exmon_arsize   ),
	.us_arqos   (4'b0           ),
	.us_arregion(4'b0           ),
	.us_arvalid (exmon_arvalid  ),
	.us_arready (exmon_arready  ),
	.us_rid     (exmon_rid      ),
	.us_rresp   (exmon_rresp    ),
	.us_rdata   (exmon_rdata    ),
	.us_rlast   (exmon_rlast    ),
	.us_rvalid  (exmon_rvalid   ),
	.us_rready  (exmon_rready   ),
	.ds_awid    (awid           ),
	.ds_awaddr  (awaddr         ),
	.ds_awlock  (awlock         ),
	.ds_awburst (awburst        ),
	.ds_awlen   (awlen          ),
	.ds_awcache (awcache        ),
	.ds_awprot  (awprot         ),
	.ds_awsize  (awsize         ),
	.ds_awqos   (unused_awqos   ),
	.ds_awregion(unused_awregion),
	.ds_awvalid (awvalid        ),
	.ds_awready (awready        ),
	.ds_wdata   (wdata          ),
	.ds_wstrb   (wstrb          ),
	.ds_wlast   (wlast          ),
	.ds_wvalid  (wvalid         ),
	.ds_wready  (wready         ),
	.ds_bresp   (bresp          ),
	.ds_bid     (bid            ),
	.ds_bvalid  (bvalid         ),
	.ds_bready  (bready         ),
	.ds_arid    (arid           ),
	.ds_araddr  (araddr         ),
	.ds_arlock  (arlock         ),
	.ds_arburst (arburst        ),
	.ds_arlen   (arlen          ),
	.ds_arcache (arcache        ),
	.ds_arprot  (arprot         ),
	.ds_arsize  (arsize         ),
	.ds_arqos   (unused_arqos   ),
	.ds_arregion(unused_arregion),
	.ds_arvalid (arvalid        ),
	.ds_arready (arready        ),
	.ds_rid     (rid            ),
	.ds_rresp   (rresp          ),
	.ds_rdata   (rdata          ),
	.ds_rlast   (rlast          ),
	.ds_rvalid  (rvalid         ),
	.ds_rready  (rready         )
);

`endif
generate
if ((BIU_DATA_WIDTH > NCE_DATA_WIDTH)) begin : gen_axi_sdn

	atcsizedn300 #(
		.ADDR_WIDTH      (ADDR_WIDTH      ),
		.DS_DATA_WIDTH   (NCE_DATA_WIDTH  ),
		.ID_WIDTH        (BIU_ID_WIDTH+4  ),
		.US_DATA_WIDTH   (BIU_DATA_WIDTH  )
	) u_axi_sdn (
		.ds_bready (sdn2busdec_bready                    ),
		.ds_bresp  (sdn2busdec_bresp                     ),
		.ds_bvalid (sdn2busdec_bvalid                    ),
		.ds_rdata  (sdn2busdec_rdata                     ),
		.ds_rlast  (sdn2busdec_rlast                     ),
		.ds_rready (sdn2busdec_rready                    ),
		.ds_rresp  (sdn2busdec_rresp                     ),
		.ds_rvalid (sdn2busdec_rvalid                    ),
		.ds_wdata  (sdn2busdec_wdata                     ),
		.ds_wlast  (sdn2busdec_wlast                     ),
		.ds_wready (sdn2busdec_wready                    ),
		.ds_wstrb  (sdn2busdec_wstrb                     ),
		.ds_wvalid (sdn2busdec_wvalid                    ),
		.us_bid    ({inter2sdn_bid,inter2sdn_bid_dummy}  ),
		.us_bready (inter2sdn_bready                     ),
		.us_bresp  (inter2sdn_bresp                      ),
		.us_bvalid (inter2sdn_bvalid                     ),
		.us_rdata  (inter2sdn_rdata                      ),
		.us_rid    ({inter2sdn_rid,inter2sdn_rid_dummy}  ),
		.us_rlast  (inter2sdn_rlast                      ),
		.us_rready (inter2sdn_rready                     ),
		.us_rresp  (inter2sdn_rresp                      ),
		.us_rvalid (inter2sdn_rvalid                     ),
		.us_wdata  (inter2sdn_wdata                      ),
		.us_wlast  (inter2sdn_wlast                      ),
		.us_wready (inter2sdn_wready                     ),
		.us_wstrb  (inter2sdn_wstrb                      ),
		.us_wvalid (inter2sdn_wvalid                     ),
		.ds_arready(sdn2busdec_arready                   ),
		.aclk      (aclk                                 ),
		.aresetn   (aresetn                              ),
		.ds_awready(sdn2busdec_awready                   ),
		.ds_araddr (sdn2busdec_araddr                    ),
		.ds_arburst(sdn2busdec_arburst                   ),
		.ds_arcache(sdn2busdec_arcache                   ),
		.ds_arlen  (sdn2busdec_arlen                     ),
		.ds_arlock (sdn2busdec_arlock                    ),
		.ds_arprot (sdn2busdec_arprot                    ),
		.ds_arsize (sdn2busdec_arsize                    ),
		.ds_arvalid(sdn2busdec_arvalid                   ),
		.us_araddr (inter2sdn_araddr                     ),
		.us_arburst(inter2sdn_arburst                    ),
		.us_arcache(inter2sdn_arcache                    ),
		.us_arid   ({inter2sdn_arid,inter2sdn_arid_dummy}),
		.us_arlen  (inter2sdn_arlen                      ),
		.us_arlock (inter2sdn_arlock                     ),
		.us_arprot (inter2sdn_arprot                     ),
		.us_arready(inter2sdn_arready                    ),
		.us_arsize (inter2sdn_arsize                     ),
		.us_arvalid(inter2sdn_arvalid                    ),
		.ds_awaddr (sdn2busdec_awaddr                    ),
		.ds_awburst(sdn2busdec_awburst                   ),
		.ds_awcache(sdn2busdec_awcache                   ),
		.ds_awlen  (sdn2busdec_awlen                     ),
		.ds_awlock (sdn2busdec_awlock                    ),
		.ds_awprot (sdn2busdec_awprot                    ),
		.ds_awsize (sdn2busdec_awsize                    ),
		.ds_awvalid(sdn2busdec_awvalid                   ),
		.us_awaddr (inter2sdn_awaddr                     ),
		.us_awburst(inter2sdn_awburst                    ),
		.us_awcache(inter2sdn_awcache                    ),
		.us_awid   ({inter2sdn_awid,inter2sdn_awid_dummy}),
		.us_awlen  (inter2sdn_awlen                      ),
		.us_awlock (inter2sdn_awlock                     ),
		.us_awprot (inter2sdn_awprot                     ),
		.us_awready(inter2sdn_awready                    ),
		.us_awsize (inter2sdn_awsize                     ),
		.us_awvalid(inter2sdn_awvalid                    )
	);

end
endgenerate

atcbusdec301 #(
	.ADDR_WIDTH      (ADDR_WIDTH      ),
	.DATA_WIDTH      (NCE_DATA_WIDTH  ),
	.ID_WIDTH        (BIU_ID_WIDTH+4  )
) u_axi_busdec (
`ifdef ATCBUSDEC301_SLV1_SUPPORT
	.ds1_awvalid(plic_awvalid                           ),
	.ds1_awready(plic_awready                           ),
	.ds1_wvalid (plic_wvalid                            ),
	.ds1_wready (plic_wready                            ),
	.ds1_bresp  (plic_bresp                             ),
	.ds1_bvalid (plic_bvalid                            ),
	.ds1_bready (plic_bready                            ),
	.ds1_arvalid(plic_arvalid                           ),
	.ds1_arready(plic_arready                           ),
	.ds1_rdata  (plic_rdata                             ),
	.ds1_rresp  (plic_rresp                             ),
	.ds1_rlast  (plic_rlast                             ),
	.ds1_rvalid (plic_rvalid                            ),
	.ds1_rready (plic_rready                            ),
`endif
`ifdef ATCBUSDEC301_SLV2_SUPPORT
	.ds2_awvalid(plmt_awvalid                           ),
	.ds2_awready(plmt_awready                           ),
	.ds2_wvalid (plmt_wvalid                            ),
	.ds2_wready (plmt_wready                            ),
	.ds2_bresp  (plmt_bresp                             ),
	.ds2_bvalid (plmt_bvalid                            ),
	.ds2_bready (plmt_bready                            ),
	.ds2_arvalid(plmt_arvalid                           ),
	.ds2_arready(plmt_arready                           ),
	.ds2_rdata  (plmt_rdata                             ),
	.ds2_rresp  (plmt_rresp                             ),
	.ds2_rlast  (plmt_rlast                             ),
	.ds2_rvalid (plmt_rvalid                            ),
	.ds2_rready (plmt_rready                            ),
`endif
`ifdef ATCBUSDEC301_SLV3_SUPPORT
	.ds3_awvalid(plicsw_awvalid                         ),
	.ds3_awready(plicsw_awready                         ),
	.ds3_wvalid (plicsw_wvalid                          ),
	.ds3_wready (plicsw_wready                          ),
	.ds3_bresp  (plicsw_bresp                           ),
	.ds3_bvalid (plicsw_bvalid                          ),
	.ds3_bready (plicsw_bready                          ),
	.ds3_arvalid(plicsw_arvalid                         ),
	.ds3_arready(plicsw_arready                         ),
	.ds3_rdata  (plicsw_rdata                           ),
	.ds3_rresp  (plicsw_rresp                           ),
	.ds3_rlast  (plicsw_rlast                           ),
	.ds3_rvalid (plicsw_rvalid                          ),
	.ds3_rready (plicsw_rready                          ),
`endif
`ifdef ATCBUSDEC301_SLV4_SUPPORT
	.ds4_awvalid(dm_awvalid                             ),
	.ds4_awready(dm_awready                             ),
	.ds4_wvalid (dm_wvalid                              ),
	.ds4_wready (dm_wready                              ),
	.ds4_bresp  (dm_bresp                               ),
	.ds4_bvalid (dm_bvalid                              ),
	.ds4_bready (dm_bready                              ),
	.ds4_arvalid(dm_arvalid                             ),
	.ds4_arready(dm_arready                             ),
	.ds4_rdata  (dm_rdata                               ),
	.ds4_rresp  (dm_rresp                               ),
	.ds4_rlast  (dm_rlast                               ),
	.ds4_rvalid (dm_rvalid                              ),
	.ds4_rready (dm_rready                              ),
`endif
	.ds_awaddr  (busdec2nce_awaddr                      ),
	.ds_awlen   (busdec2nce_awlen                       ),
	.ds_awsize  (busdec2nce_awsize                      ),
	.ds_awburst (busdec2nce_awburst                     ),
	.ds_awlock  (busdec2nce_awlock                      ),
	.ds_awcache (busdec2nce_awcache                     ),
	.ds_awprot  (busdec2nce_awprot                      ),
	.ds_wdata   (busdec2nce_wdata                       ),
	.ds_wstrb   (busdec2nce_wstrb                       ),
	.ds_wlast   (busdec2nce_wlast                       ),
	.ds_araddr  (busdec2nce_araddr                      ),
	.ds_arlen   (busdec2nce_arlen                       ),
	.ds_arsize  (busdec2nce_arsize                      ),
	.ds_arburst (busdec2nce_arburst                     ),
	.ds_arlock  (busdec2nce_arlock                      ),
	.ds_arcache (busdec2nce_arcache                     ),
	.ds_arprot  (busdec2nce_arprot                      ),
	.us_awid    ({sdn2busdec_awid,sdn2busdec_awid_dummy}),
	.us_awaddr  (sdn2busdec_awaddr                      ),
	.us_awlen   (sdn2busdec_awlen                       ),
	.us_awsize  (sdn2busdec_awsize                      ),
	.us_awburst (sdn2busdec_awburst                     ),
	.us_awlock  (sdn2busdec_awlock                      ),
	.us_awcache (sdn2busdec_awcache                     ),
	.us_awprot  (sdn2busdec_awprot                      ),
	.us_awvalid (sdn2busdec_awvalid                     ),
	.us_awready (sdn2busdec_awready                     ),
	.us_wdata   (sdn2busdec_wdata                       ),
	.us_wstrb   (sdn2busdec_wstrb                       ),
	.us_wlast   (sdn2busdec_wlast                       ),
	.us_wvalid  (sdn2busdec_wvalid                      ),
	.us_wready  (sdn2busdec_wready                      ),
	.us_bid     ({sdn2busdec_bid,sdn2busdec_bid_dummy}  ),
	.us_bresp   (sdn2busdec_bresp                       ),
	.us_bvalid  (sdn2busdec_bvalid                      ),
	.us_bready  (sdn2busdec_bready                      ),
	.us_arid    ({sdn2busdec_arid,sdn2busdec_arid_dummy}),
	.us_araddr  (sdn2busdec_araddr                      ),
	.us_arlen   (sdn2busdec_arlen                       ),
	.us_arsize  (sdn2busdec_arsize                      ),
	.us_arburst (sdn2busdec_arburst                     ),
	.us_arlock  (sdn2busdec_arlock                      ),
	.us_arcache (sdn2busdec_arcache                     ),
	.us_arprot  (sdn2busdec_arprot                      ),
	.us_arvalid (sdn2busdec_arvalid                     ),
	.us_arready (sdn2busdec_arready                     ),
	.us_rid     ({sdn2busdec_rid,sdn2busdec_rid_dummy}  ),
	.us_rdata   (sdn2busdec_rdata                       ),
	.us_rresp   (sdn2busdec_rresp                       ),
	.us_rlast   (sdn2busdec_rlast                       ),
	.us_rvalid  (sdn2busdec_rvalid                      ),
	.us_rready  (sdn2busdec_rready                      ),
	.aclk       (aclk                                   ),
	.aresetn    (aresetn                                )
);

a45_core_top u_kv_core_top0 (
`ifdef NDS_IO_SLAVEPORT_COMMON_X2
	.slv1_araddr            ({BIU_ADDR_WIDTH{1'b0}}                    ),
	.slv1_arburst           (2'b0                                      ),
	.slv1_arcache           (4'b0                                      ),
	.slv1_arid              ({(SLVPORT_ID_WIDTH){1'b0}}                ),
	.slv1_arlen             (8'b0                                      ),
	.slv1_arlock            (1'b0                                      ),
	.slv1_arprot            (3'b0                                      ),
	.slv1_arready           (nds_unused_hart0_slv1_arready             ),
	.slv1_arsize            (3'b0                                      ),
	.slv1_aruser            (1'b0                                      ),
	.slv1_arvalid           (1'b0                                      ),
	.slv1_awaddr            ({(BIU_ADDR_WIDTH){1'b0}}                  ),
	.slv1_awburst           (2'b0                                      ),
	.slv1_awcache           (4'b0                                      ),
	.slv1_awid              ({(SLVPORT_ID_WIDTH){1'b0}}                ),
	.slv1_awlen             (8'b0                                      ),
	.slv1_awlock            (1'b0                                      ),
	.slv1_awprot            (3'b0                                      ),
	.slv1_awready           (nds_unused_hart0_slv1_awready             ),
	.slv1_awsize            (3'b0                                      ),
	.slv1_awuser            (1'b0                                      ),
	.slv1_awvalid           (1'b0                                      ),
	.slv1_bid               (nds_unused_hart0_slv1_bid                 ),
	.slv1_bready            (1'b0                                      ),
	.slv1_bresp             (nds_unused_hart0_slv1_bresp               ),
	.slv1_bvalid            (nds_unused_hart0_slv1_bvalid              ),
	.slv1_rdata             (nds_unused_hart0_slv1_rdata               ),
	.slv1_reset_n           (hart0_slv1_reset_n                        ),
	.slv1_rid               (nds_unused_hart0_slv1_rid                 ),
	.slv1_rlast             (nds_unused_hart0_slv1_rlast               ),
	.slv1_rready            (1'b0                                      ),
	.slv1_rresp             (nds_unused_hart0_slv1_rresp               ),
	.slv1_rvalid            (nds_unused_hart0_slv1_rvalid              ),
	.slv1_wdata             ({(BIU_DATA_WIDTH){1'b0}}                  ),
	.slv1_wlast             (1'b0                                      ),
	.slv1_wready            (nds_unused_hart0_slv1_wready              ),
	.slv1_wstrb             ({(BIU_DATA_WIDTH/8){1'b0}}                ),
	.slv1_wvalid            (1'b0                                      ),
`endif
`ifdef NDS_IO_LM
	.lm_local_int           (lm_local_int                              ),
	.lm_clk                 (hart0_lm_clk                              ),
`endif
`ifdef NDS_IO_SLAVEPORT_SYNC
	.slv_clk_en             (hart0_slv_clk_en                          ),
`endif
`ifdef NDS_IO_SLAVEPORT_ASYNC
	.slv_clk                (hart0_slv_clk                             ),
`endif
`ifdef NDS_IO_SLAVEPORT_SYNC_X2
	.slv1_clk_en            (hart0_slv1_clk_en                         ),
`endif
`ifdef NDS_IO_SLAVEPORT_ASYNC_X2
	.slv1_clk               (hart0_slv1_clk                            ),
`endif
`ifdef NDS_IO_BIU_AXI_ASYNC
	.bus_clk                (hart0_bus_clk                             ),
`endif
`ifdef NDS_IO_BIU_AXI_SYNC
	.bus_clk_en             (hart0_bus_clk_en                          ),
`endif
`ifdef NDS_IO_BIU_AXI_COMMON_X2
	.d_araddr               (hart0_d_araddr                            ),
	.d_arburst              (hart0_d_arburst                           ),
	.d_arcache              (hart0_d_arcache                           ),
	.d_arid                 (hart0_d_arid                              ),
	.d_arlen                (hart0_d_arlen                             ),
	.d_arlock               (hart0_d_arlock                            ),
	.d_arprot               (hart0_d_arprot                            ),
	.d_arready              (hart0_d_arready                           ),
	.d_arsize               (hart0_d_arsize                            ),
	.d_arvalid              (hart0_d_arvalid                           ),
	.d_awaddr               (hart0_d_awaddr                            ),
	.d_awburst              (hart0_d_awburst                           ),
	.d_awcache              (hart0_d_awcache                           ),
	.d_awid                 (hart0_d_awid                              ),
	.d_awlen                (hart0_d_awlen                             ),
	.d_awlock               (hart0_d_awlock                            ),
	.d_awprot               (hart0_d_awprot                            ),
	.d_awready              (hart0_d_awready                           ),
	.d_awsize               (hart0_d_awsize                            ),
	.d_awvalid              (hart0_d_awvalid                           ),
	.d_bid                  (hart0_d_bid                               ),
	.d_bready               (hart0_d_bready                            ),
	.d_bresp                (hart0_d_bresp                             ),
	.d_bvalid               (hart0_d_bvalid                            ),
	.d_rdata                (hart0_d_rdata                             ),
	.d_rid                  (hart0_d_rid                               ),
	.d_rlast                (hart0_d_rlast                             ),
	.d_rready               (hart0_d_rready                            ),
	.d_rresp                (hart0_d_rresp                             ),
	.d_rvalid               (hart0_d_rvalid                            ),
	.d_wdata                (hart0_d_wdata                             ),
	.d_wlast                (hart0_d_wlast                             ),
	.d_wready               (hart0_d_wready                            ),
	.d_wstrb                (hart0_d_wstrb                             ),
	.d_wvalid               (hart0_d_wvalid                            ),
	.i_araddr               (hart0_i_araddr                            ),
	.i_arburst              (hart0_i_arburst                           ),
	.i_arcache              (hart0_i_arcache                           ),
	.i_arid                 (hart0_i_arid                              ),
	.i_arlen                (hart0_i_arlen                             ),
	.i_arlock               (hart0_i_arlock                            ),
	.i_arprot               (hart0_i_arprot                            ),
	.i_arready              (hart0_i_arready                           ),
	.i_arsize               (hart0_i_arsize                            ),
	.i_arvalid              (hart0_i_arvalid                           ),
	.i_awaddr               (hart0_i_awaddr                            ),
	.i_awburst              (hart0_i_awburst                           ),
	.i_awcache              (hart0_i_awcache                           ),
	.i_awid                 (hart0_i_awid                              ),
	.i_awlen                (hart0_i_awlen                             ),
	.i_awlock               (hart0_i_awlock                            ),
	.i_awprot               (hart0_i_awprot                            ),
	.i_awready              (hart0_i_awready                           ),
	.i_awsize               (hart0_i_awsize                            ),
	.i_awvalid              (hart0_i_awvalid                           ),
	.i_bid                  (hart0_i_bid                               ),
	.i_bready               (hart0_i_bready                            ),
	.i_bresp                (hart0_i_bresp                             ),
	.i_bvalid               (hart0_i_bvalid                            ),
	.i_rdata                (hart0_i_rdata                             ),
	.i_rid                  (hart0_i_rid                               ),
	.i_rlast                (hart0_i_rlast                             ),
	.i_rready               (hart0_i_rready                            ),
	.i_rresp                (hart0_i_rresp                             ),
	.i_rvalid               (hart0_i_rvalid                            ),
	.i_wdata                (hart0_i_wdata                             ),
	.i_wlast                (hart0_i_wlast                             ),
	.i_wready               (hart0_i_wready                            ),
	.i_wstrb                (hart0_i_wstrb                             ),
	.i_wvalid               (hart0_i_wvalid                            ),
`endif
`ifdef NDS_IO_BIU_AXI_COMMON_X1
	.araddr                 (hart0_araddr                              ),
	.arburst                (hart0_arburst                             ),
	.arcache                (hart0_arcache                             ),
	.arid                   (hart0_arid                                ),
	.arlen                  (hart0_arlen                               ),
	.arlock                 (hart0_arlock                              ),
	.arprot                 (hart0_arprot                              ),
	.arready                (hart0_arready                             ),
	.arsize                 (hart0_arsize                              ),
	.arvalid                (hart0_arvalid                             ),
	.awaddr                 (hart0_awaddr                              ),
	.awburst                (hart0_awburst                             ),
	.awcache                (hart0_awcache                             ),
	.awid                   (hart0_awid                                ),
	.awlen                  (hart0_awlen                               ),
	.awlock                 (hart0_awlock                              ),
	.awprot                 (hart0_awprot                              ),
	.awready                (hart0_awready                             ),
	.awsize                 (hart0_awsize                              ),
	.awvalid                (hart0_awvalid                             ),
	.bid                    (hart0_bid                                 ),
	.bready                 (hart0_bready                              ),
	.bresp                  (hart0_bresp                               ),
	.bvalid                 (hart0_bvalid                              ),
	.rdata                  (hart0_rdata                               ),
	.rid                    (hart0_rid                                 ),
	.rlast                  (hart0_rlast                               ),
	.rready                 (hart0_rready                              ),
	.rresp                  (hart0_rresp                               ),
	.rvalid                 (hart0_rvalid                              ),
	.wdata                  (hart0_wdata                               ),
	.wlast                  (hart0_wlast                               ),
	.wready                 (hart0_wready                              ),
	.wstrb                  (hart0_wstrb                               ),
	.wvalid                 (hart0_wvalid                              ),
`endif
`ifdef NDS_IO_SLAVEPORT_COMMON_X1
	.slv_araddr             (slv_araddr                                ),
	.slv_arburst            (slv_arburst                               ),
	.slv_arcache            (slv_arcache                               ),
	.slv_arid               (hart0_slv_arid                            ),
	.slv_arlen              (slv_arlen                                 ),
	.slv_arlock             (slv_arlock                                ),
	.slv_arprot             (slv_arprot                                ),
	.slv_arready            (slv_arready                               ),
	.slv_arsize             (slv_arsize                                ),
	.slv_aruser             (slv_aruser                                ),
	.slv_arvalid            (slv_arvalid                               ),
	.slv_awaddr             (slv_awaddr                                ),
	.slv_awburst            (slv_awburst                               ),
	.slv_awcache            (slv_awcache                               ),
	.slv_awid               (hart0_slv_awid                            ),
	.slv_awlen              (slv_awlen                                 ),
	.slv_awlock             (slv_awlock                                ),
	.slv_awprot             (slv_awprot                                ),
	.slv_awready            (slv_awready                               ),
	.slv_awsize             (slv_awsize                                ),
	.slv_awuser             (slv_awuser                                ),
	.slv_awvalid            (slv_awvalid                               ),
	.slv_bid                (hart0_slv_bid                             ),
	.slv_bready             (slv_bready                                ),
	.slv_bresp              (slv_bresp                                 ),
	.slv_bvalid             (slv_bvalid                                ),
	.slv_rdata              (slv_rdata                                 ),
	.slv_rid                (hart0_slv_rid                             ),
	.slv_rlast              (slv_rlast                                 ),
	.slv_rready             (slv_rready                                ),
	.slv_rresp              (slv_rresp                                 ),
	.slv_rvalid             (slv_rvalid                                ),
	.slv_wdata              (slv_wdata                                 ),
	.slv_wlast              (slv_wlast                                 ),
	.slv_wready             (slv_wready                                ),
	.slv_wstrb              (slv_wstrb                                 ),
	.slv_wvalid             (slv_wvalid                                ),
	.slv_reset_n            (hart0_slv_reset_n                         ),
`endif
`ifdef NDS_IO_LM_RESET
	.lm_reset_n             (lm_reset_n                                ),
`endif
`ifdef NDS_IO_ILM_TL_UL
	.ilm_a_addr             (ilm_a_addr                                ),
	.ilm_a_data             (ilm_a_data                                ),
	.ilm_a_mask             (ilm_a_mask                                ),
	.ilm_a_opcode           (ilm_a_opcode                              ),
	.ilm_a_parity0          (ilm_a_parity0                             ),
	.ilm_a_parity1          (ilm_a_parity1                             ),
	.ilm_a_ready            (ilm_a_ready                               ),
	.ilm_a_size             (ilm_a_size                                ),
	.ilm_a_user             (ilm_a_user                                ),
	.ilm_a_valid            (ilm_a_valid                               ),
	.ilm_d_data             (ilm_d_data                                ),
	.ilm_d_denied           (ilm_d_denied                              ),
	.ilm_d_parity0          (ilm_d_parity0                             ),
	.ilm_d_parity1          (ilm_d_parity1                             ),
	.ilm_d_ready            (ilm_d_ready                               ),
	.ilm_d_valid            (ilm_d_valid                               ),
`endif
`ifdef NDS_IO_DLM_TL_UL
	.dlm_a_addr             (dlm_a_addr                                ),
	.dlm_a_data             (dlm_a_data                                ),
	.dlm_a_mask             (dlm_a_mask                                ),
	.dlm_a_opcode           (dlm_a_opcode                              ),
	.dlm_a_parity           (dlm_a_parity                              ),
	.dlm_a_ready            (dlm_a_ready                               ),
	.dlm_a_size             (dlm_a_size                                ),
	.dlm_a_user             (dlm_a_user                                ),
	.dlm_a_valid            (dlm_a_valid                               ),
	.dlm_d_data             (dlm_d_data                                ),
	.dlm_d_denied           (dlm_d_denied                              ),
	.dlm_d_parity           (dlm_d_parity                              ),
	.dlm_d_ready            (dlm_d_ready                               ),
	.dlm_d_valid            (dlm_d_valid                               ),
`endif
`ifdef NDS_IO_ICACHE0
	.icache_disable_init    (hart0_icache_disable_init                 ),
`endif
`ifdef NDS_IO_DCACHE0
	.dcache_disable_init    (hart0_dcache_disable_init                 ),
`endif
`ifdef NDS_IO_PROBING
	.core_current_pc        (hart0_probe_current_pc                    ),
	.core_gpr_index         (hart0_probe_gpr_index                     ),
	.core_selected_gpr_value(hart0_probe_selected_gpr_value            ),
`endif
`ifdef NDS_IO_SEIP
	.seip                   (hart0_seip                                ),
	.seiack                 (hart0_seiack                              ),
	.seiid                  (hart0_seiid                               ),
`endif
`ifdef NDS_IO_UEIP
	.ueip                   (1'b0                                      ),
	.ueiack                 (nds_unused_hart0_ueiack                   ),
	.ueiid                  (10'b0                                     ),
`endif
`ifdef NDS_IO_DEBUG
	.debugint               (hart0_debugint                            ),
	.resethaltreq           (hart0_resethaltreq                        ),
	.hart_unavail           (hart0_unavail                             ),
	.hart_halted            (nds_unused_hart0_hart_halted              ),
	.hart_under_reset       (hart0_under_reset                         ),
	.stoptime               (hart0_stoptime                            ),
`endif
`ifdef NDS_IO_TRACE_INSTR_GEN1
	.gen1_trace_enabled     (hart0_gen1_trace_enabled                  ),
	.gen1_trace_ivalid      (hart0_gen1_trace_ivalid                   ),
	.gen1_trace_iexception  (hart0_gen1_trace_iexception               ),
	.gen1_trace_interrupt   (hart0_gen1_trace_interrupt                ),
	.gen1_trace_cause       (hart0_gen1_trace_cause                    ),
	.gen1_trace_priv        (hart0_gen1_trace_priv                     ),
	.gen1_trace_tval        (hart0_gen1_trace_tval                     ),
	.gen1_trace_instr       (hart0_gen1_trace_instr                    ),
	.gen1_trace_iaddr       (hart0_gen1_trace_iaddr                    ),
`endif
`ifdef NDS_IO_TRACE_INSTR
	.trace_cause            (hart0_trace_cause                         ),
	.trace_enabled          (hart0_trace_enabled                       ),
	.trace_halted           (hart0_trace_halted                        ),
	.trace_iaddr            (hart0_trace_iaddr                         ),
	.trace_ilastsize        (hart0_trace_ilastsize                     ),
	.trace_iretire          (hart0_trace_iretire                       ),
	.trace_itype            (hart0_trace_itype                         ),
	.trace_priv             (hart0_trace_priv                          ),
	.trace_reset            (hart0_trace_reset                         ),
	.trace_trigger          (hart0_trace_trigger                       ),
	.trace_tval             (hart0_trace_tval                          ),
`endif
`ifdef NDS_IO_BTB_RAM_CTRL_IN
	.btb0_ctrl_in           ({`NDS_BTB_RAM_CTRL_IN_WIDTH{1'b0}}        ),
	.btb1_ctrl_in           ({`NDS_BTB_RAM_CTRL_IN_WIDTH{1'b0}}        ),
`endif
`ifdef NDS_IO_BTB_RAM_CTRL_OUT
	.btb0_ctrl_out          (nds_unused_btb0_ctrl_out                  ),
	.btb1_ctrl_out          (nds_unused_btb1_ctrl_out                  ),
`endif
`ifdef NDS_IO_DCACHE0_CTRL_IN
	.dcache_data0_ctrl_in   ({`NDS_DCACHE_DATA_RAM_CTRL_IN_WIDTH{1'b0}}),
	.dcache_data1_ctrl_in   ({`NDS_DCACHE_DATA_RAM_CTRL_IN_WIDTH{1'b0}}),
	.dcache_data2_ctrl_in   ({`NDS_DCACHE_DATA_RAM_CTRL_IN_WIDTH{1'b0}}),
	.dcache_data3_ctrl_in   ({`NDS_DCACHE_DATA_RAM_CTRL_IN_WIDTH{1'b0}}),
	.dcache_tag0_ctrl_in    ({`NDS_DCACHE_TAG_RAM_CTRL_IN_WIDTH{1'b0}} ),
`endif
`ifdef NDS_IO_DCACHE0_CTRL_OUT
	.dcache_data0_ctrl_out  (nds_unused_dcache_data0_ctrl_out          ),
	.dcache_data1_ctrl_out  (nds_unused_dcache_data1_ctrl_out          ),
	.dcache_data2_ctrl_out  (nds_unused_dcache_data2_ctrl_out          ),
	.dcache_data3_ctrl_out  (nds_unused_dcache_data3_ctrl_out          ),
	.dcache_tag0_ctrl_out   (nds_unused_dcache_tag0_ctrl_out           ),
`endif
`ifdef NDS_IO_DCACHE1_CTRL_IN
	.dcache_tag1_ctrl_in    ({`NDS_DCACHE_TAG_RAM_CTRL_IN_WIDTH{1'b0}} ),
`endif
`ifdef NDS_IO_DCACHE1_CTRL_OUT
	.dcache_tag1_ctrl_out   (nds_unused_dcache_tag1_ctrl_out           ),
`endif
`ifdef NDS_IO_DCACHE2_CTRL_IN
	.dcache_tag2_ctrl_in    ({`NDS_DCACHE_TAG_RAM_CTRL_IN_WIDTH{1'b0}} ),
	.dcache_tag3_ctrl_in    ({`NDS_DCACHE_TAG_RAM_CTRL_IN_WIDTH{1'b0}} ),
`endif
`ifdef NDS_IO_DCACHE2_CTRL_OUT
	.dcache_tag2_ctrl_out   (nds_unused_dcache_tag2_ctrl_out           ),
	.dcache_tag3_ctrl_out   (nds_unused_dcache_tag3_ctrl_out           ),
`endif
`ifdef NDS_IO_DLM_RAM0_CTRL_IN
	.dlm_ctrl_in            ({`NDS_DLM_RAM_CTRL_IN_WIDTH{1'b0}}        ),
`endif
`ifdef NDS_IO_DLM_RAM0_CTRL_OUT
	.dlm_ctrl_out           (nds_unused_dlm_ctrl_out                   ),
`endif
`ifdef NDS_IO_DLM_RAM1_CTRL_IN
	.dlm1_ctrl_in           ({`NDS_DLM_RAM_CTRL_IN_WIDTH{1'b0}}        ),
`endif
`ifdef NDS_IO_DLM_RAM1_CTRL_OUT
	.dlm1_ctrl_out          (nds_unused_dlm1_ctrl_out                  ),
`endif
`ifdef NDS_IO_DLM_RAM2_CTRL_IN
	.dlm2_ctrl_in           ({`NDS_DLM_RAM_CTRL_IN_WIDTH{1'b0}}        ),
`endif
`ifdef NDS_IO_DLM_RAM2_CTRL_OUT
	.dlm2_ctrl_out          (nds_unused_dlm2_ctrl_out                  ),
`endif
`ifdef NDS_IO_DLM_RAM3_CTRL_IN
	.dlm3_ctrl_in           ({`NDS_DLM_RAM_CTRL_IN_WIDTH{1'b0}}        ),
`endif
`ifdef NDS_IO_DLM_RAM3_CTRL_OUT
	.dlm3_ctrl_out          (nds_unused_dlm3_ctrl_out                  ),
`endif
`ifdef NDS_IO_ICACHE0_CTRL_IN
	.icache_data0_ctrl_in   ({`NDS_ICACHE_DATA_RAM_CTRL_IN_WIDTH{1'b0}}),
	.icache_data1_ctrl_in   ({`NDS_ICACHE_DATA_RAM_CTRL_IN_WIDTH{1'b0}}),
	.icache_data2_ctrl_in   ({`NDS_ICACHE_DATA_RAM_CTRL_IN_WIDTH{1'b0}}),
	.icache_data3_ctrl_in   ({`NDS_ICACHE_DATA_RAM_CTRL_IN_WIDTH{1'b0}}),
	.icache_data4_ctrl_in   ({`NDS_ICACHE_DATA_RAM_CTRL_IN_WIDTH{1'b0}}),
	.icache_data5_ctrl_in   ({`NDS_ICACHE_DATA_RAM_CTRL_IN_WIDTH{1'b0}}),
	.icache_data6_ctrl_in   ({`NDS_ICACHE_DATA_RAM_CTRL_IN_WIDTH{1'b0}}),
	.icache_data7_ctrl_in   ({`NDS_ICACHE_DATA_RAM_CTRL_IN_WIDTH{1'b0}}),
	.icache_tag0_ctrl_in    ({`NDS_ICACHE_TAG_RAM_CTRL_IN_WIDTH{1'b0}} ),
`endif
`ifdef NDS_IO_ICACHE0_CTRL_OUT
	.icache_data0_ctrl_out  (nds_unused_icache_data0_ctrl_out          ),
	.icache_data1_ctrl_out  (nds_unused_icache_data1_ctrl_out          ),
	.icache_data2_ctrl_out  (nds_unused_icache_data2_ctrl_out          ),
	.icache_data3_ctrl_out  (nds_unused_icache_data3_ctrl_out          ),
	.icache_data4_ctrl_out  (nds_unused_icache_data4_ctrl_out          ),
	.icache_data5_ctrl_out  (nds_unused_icache_data5_ctrl_out          ),
	.icache_data6_ctrl_out  (nds_unused_icache_data6_ctrl_out          ),
	.icache_data7_ctrl_out  (nds_unused_icache_data7_ctrl_out          ),
	.icache_tag0_ctrl_out   (nds_unused_icache_tag0_ctrl_out           ),
`endif
`ifdef NDS_IO_ICACHE1_CTRL_IN
	.icache_tag1_ctrl_in    ({`NDS_ICACHE_TAG_RAM_CTRL_IN_WIDTH{1'b0}} ),
`endif
`ifdef NDS_IO_ICACHE1_CTRL_OUT
	.icache_tag1_ctrl_out   (nds_unused_icache_tag1_ctrl_out           ),
`endif
`ifdef NDS_IO_ICACHE2_CTRL_IN
	.icache_tag2_ctrl_in    ({`NDS_ICACHE_TAG_RAM_CTRL_IN_WIDTH{1'b0}} ),
	.icache_tag3_ctrl_in    ({`NDS_ICACHE_TAG_RAM_CTRL_IN_WIDTH{1'b0}} ),
`endif
`ifdef NDS_IO_ICACHE2_CTRL_OUT
	.icache_tag2_ctrl_out   (nds_unused_icache_tag2_ctrl_out           ),
	.icache_tag3_ctrl_out   (nds_unused_icache_tag3_ctrl_out           ),
`endif
`ifdef NDS_IO_ILM_RAM0_CTRL_IN
	.ilm0_ctrl_in           ({`NDS_ILM_RAM_CTRL_IN_WIDTH{1'b0}}        ),
`endif
`ifdef NDS_IO_ILM_RAM0_CTRL_OUT
	.ilm0_ctrl_out          (nds_unused_ilm0_ctrl_out                  ),
`endif
`ifdef NDS_IO_ILM_RAM1_CTRL_IN
	.ilm1_ctrl_in           ({`NDS_ILM_RAM_CTRL_IN_WIDTH{1'b0}}        ),
`endif
`ifdef NDS_IO_ILM_RAM1_CTRL_OUT
	.ilm1_ctrl_out          (nds_unused_ilm1_ctrl_out                  ),
`endif
`ifdef NDS_IO_STLB_RAM_NECC_CTRL_IN
	.stlb0_ctrl_in          ({`NDS_STLB_RAM_CTRL_IN_WIDTH{1'b0}}       ),
	.stlb1_ctrl_in          ({`NDS_STLB_RAM_CTRL_IN_WIDTH{1'b0}}       ),
	.stlb2_ctrl_in          ({`NDS_STLB_RAM_CTRL_IN_WIDTH{1'b0}}       ),
	.stlb3_ctrl_in          ({`NDS_STLB_RAM_CTRL_IN_WIDTH{1'b0}}       ),
`endif
`ifdef NDS_IO_STLB_RAM_NECC_CTRL_OUT
	.stlb0_ctrl_out         (nds_unused_stlb0_ctrl_out                 ),
	.stlb1_ctrl_out         (nds_unused_stlb1_ctrl_out                 ),
	.stlb2_ctrl_out         (nds_unused_stlb2_ctrl_out                 ),
	.stlb3_ctrl_out         (nds_unused_stlb3_ctrl_out                 ),
`endif
`ifdef NDS_IO_STLB_RAM_ECC_CTRL_IN
	.stlb_data0_ctrl_in     ({`NDS_STLB_DATA_RAM_CTRL_IN_WIDTH{1'b0}}  ),
	.stlb_data1_ctrl_in     ({`NDS_STLB_DATA_RAM_CTRL_IN_WIDTH{1'b0}}  ),
	.stlb_data2_ctrl_in     ({`NDS_STLB_DATA_RAM_CTRL_IN_WIDTH{1'b0}}  ),
	.stlb_data3_ctrl_in     ({`NDS_STLB_DATA_RAM_CTRL_IN_WIDTH{1'b0}}  ),
	.stlb_tag0_ctrl_in      ({`NDS_STLB_TAG_RAM_CTRL_IN_WIDTH{1'b0}}   ),
	.stlb_tag1_ctrl_in      ({`NDS_STLB_TAG_RAM_CTRL_IN_WIDTH{1'b0}}   ),
	.stlb_tag2_ctrl_in      ({`NDS_STLB_TAG_RAM_CTRL_IN_WIDTH{1'b0}}   ),
	.stlb_tag3_ctrl_in      ({`NDS_STLB_TAG_RAM_CTRL_IN_WIDTH{1'b0}}   ),
`endif
`ifdef NDS_IO_STLB_RAM_ECC_CTRL_OUT
	.stlb_data0_ctrl_out    (nds_unused_stlb_data0_ctrl_out            ),
	.stlb_data1_ctrl_out    (nds_unused_stlb_data1_ctrl_out            ),
	.stlb_data2_ctrl_out    (nds_unused_stlb_data2_ctrl_out            ),
	.stlb_data3_ctrl_out    (nds_unused_stlb_data3_ctrl_out            ),
	.stlb_tag0_ctrl_out     (nds_unused_stlb_tag0_ctrl_out             ),
	.stlb_tag1_ctrl_out     (nds_unused_stlb_tag1_ctrl_out             ),
	.stlb_tag2_ctrl_out     (nds_unused_stlb_tag2_ctrl_out             ),
	.stlb_tag3_ctrl_out     (nds_unused_stlb_tag3_ctrl_out             ),
`endif
	.hart_id                (hart0_hart_id                             ),
	.core_clk               (hart0_core_clk                            ),
	.core_reset_n           (hart0_core_reset_n                        ),
	.test_mode              (test_mode                                 ),
	.scan_enable            (scan_enable                               ),
	.core_wfi_mode          (hart0_core_wfi_mode                       ),
	.reset_vector           (hart0_reset_vector                        ),
	.nmi                    (hart0_nmi                                 ),
	.meip                   (hart0_meip                                ),
	.meiack                 (hart0_meiack                              ),
	.meiid                  (hart0_meiid                               ),
	.mtip                   (hart0_mtip                                ),
	.msip                   (hart0_msip                                )
);

nceplmt100 #(
	.ADDR_WIDTH      (ADDR_WIDTH      ),
	.BUS_TYPE        ("axi"           ),
	.DATA_WIDTH      (NCE_DATA_WIDTH  ),
	.GRAY_WIDTH      (2               ),
	.NHART           (NHART           ),
	.SYNC_STAGE      (3               )
) u_plmt (
	.araddr   (plmt_araddr              ),
	.arburst  (plmt_arburst             ),
	.arcache  (plmt_arcache             ),
	.arid     (4'd0                     ),
	.arlen    (plmt_arlen               ),
	.arlock   (plmt_arlock              ),
	.arprot   (plmt_arprot              ),
	.arready  (plmt_arready             ),
	.arsize   (plmt_arsize              ),
	.arvalid  (plmt_arvalid             ),
	.awaddr   (plmt_awaddr              ),
	.awburst  (plmt_awburst             ),
	.awcache  (plmt_awcache             ),
	.awid     (4'd0                     ),
	.awlen    (plmt_awlen               ),
	.awlock   (plmt_awlock              ),
	.awprot   (plmt_awprot              ),
	.awready  (plmt_awready             ),
	.awsize   (plmt_awsize              ),
	.awvalid  (plmt_awvalid             ),
	.bid      (nds_unused_plmt_bid      ),
	.bready   (plmt_bready              ),
	.bresp    (plmt_bresp               ),
	.bvalid   (plmt_bvalid              ),
	.haddr    ({ADDR_WIDTH{1'b0}}       ),
	.hburst   (3'd0                     ),
	.hrdata   (nds_unused_plmt_hrdata   ),
	.hready   (1'd0                     ),
	.hreadyout(nds_unused_plmt_hreadyout),
	.hresp    (nds_unused_plmt_hresp    ),
	.hsel     (1'd0                     ),
	.hsize    (3'd0                     ),
	.htrans   (2'd0                     ),
	.hwdata   ({(NCE_DATA_WIDTH){1'b0}} ),
	.hwrite   (1'd0                     ),
	.mtip     (mtip                     ),
	.rdata    (plmt_rdata               ),
	.rid      (nds_unused_plmt_rid      ),
	.rlast    (plmt_rlast               ),
	.rready   (plmt_rready              ),
	.rresp    (plmt_rresp               ),
	.rvalid   (plmt_rvalid              ),
	.wdata    (plmt_wdata               ),
	.wlast    (plmt_wlast               ),
	.wready   (plmt_wready              ),
	.wstrb    (plmt_wstrb               ),
	.wvalid   (plmt_wvalid              ),
	.clk      (aclk                     ),
	.resetn   (aresetn                  ),
	.mtime_clk(mtime_clk                ),
	.por_rstn (por_rstn                 ),
	.test_mode(test_mode                ),
	.stoptime (stoptime                 )
);

`ifdef PLATFORM_DEBUG_SUBSYSTEM
ncepldm200 #(
	.ADDR_WIDTH      (ADDR_WIDTH      ),
	.DATA_WIDTH      (NCE_DATA_WIDTH  ),
	.HALTGROUP_COUNT (HALTGROUP_COUNT ),
	.NHART           (NHART           ),
	.PROGBUF_SIZE    (PROGBUF_SIZE    ),
	.RV_BUS_TYPE     ("axi"           ),
	.SYNC_STAGE      (3               ),
	.SYSTEM_BUS_ACCESS_SUPPORT(PLDM_SYS_BUS_ACCESS),
	.SYS_ADDR_WIDTH  (ADDR_WIDTH      ),
	.SYS_BUS_TYPE    ("axi"           ),
	.SYS_DATA_WIDTH  (DM_SYS_DATA_WIDTH),
	.SYS_ID_WIDTH    (BIU_ID_WIDTH    )
) u_pldm (
	.debugint        (dm_debugint              ),
	.resethaltreq    (dm_resethaltreq          ),
	.dmactive        (dmactive                 ),
	.ndmreset        (ndmreset                 ),
	.clk             (aclk                     ),
	.dmi_resetn      (dmi_resetn               ),
	.hart_unavail    (dm_hart_unavail          ),
	.hart_under_reset(dm_hart_under_reset      ),
	.bus_resetn      (aresetn                  ),
	.rv_haddr        ({ADDR_WIDTH{1'b0}}       ),
	.rv_htrans       (2'd0                     ),
	.rv_hwrite       (1'd0                     ),
	.rv_hsize        (3'd0                     ),
	.rv_hburst       (3'd0                     ),
	.rv_hprot        (4'd0                     ),
	.rv_hwdata       ({(NCE_DATA_WIDTH){1'b0}} ),
	.rv_hsel         (1'd0                     ),
	.rv_hready       (1'd0                     ),
	.rv_hrdata       (nds_unused_dm_hrdata     ),
	.rv_hreadyout    (nds_unused_dm_hreadyout  ),
	.rv_hresp        (nds_unused_dm_hresp      ),
	.rv_awid         (4'd0                     ),
	.rv_awaddr       (dm_awaddr                ),
	.rv_awlen        (dm_awlen                 ),
	.rv_awsize       (dm_awsize                ),
	.rv_awburst      (dm_awburst               ),
	.rv_awlock       (dm_awlock                ),
	.rv_awcache      (dm_awcache               ),
	.rv_awprot       (dm_awprot                ),
	.rv_awvalid      (dm_awvalid               ),
	.rv_awready      (dm_awready               ),
	.rv_wdata        (dm_wdata                 ),
	.rv_wstrb        (dm_wstrb                 ),
	.rv_wlast        (dm_wlast                 ),
	.rv_wvalid       (dm_wvalid                ),
	.rv_wready       (dm_wready                ),
	.rv_bid          (nds_unused_dm_bid        ),
	.rv_bresp        (dm_bresp                 ),
	.rv_bvalid       (dm_bvalid                ),
	.rv_bready       (dm_bready                ),
	.rv_arid         (4'd0                     ),
	.rv_araddr       (dm_araddr                ),
	.rv_arlen        (dm_arlen                 ),
	.rv_arsize       (dm_arsize                ),
	.rv_arburst      (dm_arburst               ),
	.rv_arlock       (dm_arlock                ),
	.rv_arcache      (dm_arcache               ),
	.rv_arprot       (dm_arprot                ),
	.rv_arvalid      (dm_arvalid               ),
	.rv_arready      (dm_arready               ),
	.rv_rid          (nds_unused_dm_rid        ),
	.rv_rdata        (dm_rdata                 ),
	.rv_rresp        (dm_rresp                 ),
	.rv_rlast        (dm_rlast                 ),
	.rv_rvalid       (dm_rvalid                ),
	.rv_rready       (dm_rready                ),
	.sys_awid        (dm_sup_awid              ),
	.sys_awaddr      (dm_sup_awaddr            ),
	.sys_awlen       (dm_sup_awlen             ),
	.sys_awsize      (dm_sup_awsize            ),
	.sys_awburst     (dm_sup_awburst           ),
	.sys_awlock      (dm_sup_awlock            ),
	.sys_awcache     (dm_sup_awcache           ),
	.sys_awprot      (dm_sup_awprot            ),
	.sys_awvalid     (dm_sup_awvalid           ),
	.sys_awready     (dm_sup_awready           ),
	.sys_wdata       (dm_sup_wdata             ),
	.sys_wstrb       (dm_sup_wstrb             ),
	.sys_wlast       (dm_sup_wlast             ),
	.sys_wvalid      (dm_sup_wvalid            ),
	.sys_wready      (dm_sup_wready            ),
	.sys_bid         (dm_sup_bid               ),
	.sys_bresp       (dm_sup_bresp             ),
	.sys_bvalid      (dm_sup_bvalid            ),
	.sys_bready      (dm_sup_bready            ),
	.sys_arid        (dm_sup_arid              ),
	.sys_araddr      (dm_sup_araddr            ),
	.sys_arlen       (dm_sup_arlen             ),
	.sys_arsize      (dm_sup_arsize            ),
	.sys_arburst     (dm_sup_arburst           ),
	.sys_arlock      (dm_sup_arlock            ),
	.sys_arcache     (dm_sup_arcache           ),
	.sys_arprot      (dm_sup_arprot            ),
	.sys_arvalid     (dm_sup_arvalid           ),
	.sys_arready     (dm_sup_arready           ),
	.sys_rid         (dm_sup_rid               ),
	.sys_rdata       (dm_sup_rdata             ),
	.sys_rresp       (dm_sup_rresp             ),
	.sys_rlast       (dm_sup_rlast             ),
	.sys_rvalid      (dm_sup_rvalid            ),
	.sys_rready      (dm_sup_rready            ),
	.sys_haddr       (nds_unused_dm_sup_haddr  ),
	.sys_htrans      (nds_unused_dm_sup_htrans ),
	.sys_hwrite      (nds_unused_dm_sup_hwrite ),
	.sys_hsize       (nds_unused_dm_sup_hsize  ),
	.sys_hburst      (nds_unused_dm_sup_hburst ),
	.sys_hprot       (nds_unused_dm_sup_hprot  ),
	.sys_hwdata      (nds_unused_dm_sup_hwdata ),
	.sys_hbusreq     (nds_unused_dm_sup_hbusreq),
	.sys_hrdata      ({DM_SYS_DATA_WIDTH{1'b0}}),
	.sys_hready      (1'b0                     ),
	.sys_hresp       (2'h0                     ),
	.sys_hgrant      (1'b0                     ),
	.dmi_haddr       (dmi_haddr                ),
	.dmi_htrans      (dmi_htrans               ),
	.dmi_hwrite      (dmi_hwrite               ),
	.dmi_hsize       (dmi_hsize                ),
	.dmi_hburst      (dmi_hburst               ),
	.dmi_hprot       (dmi_hprot                ),
	.dmi_hwdata      (dmi_hwdata               ),
	.dmi_hsel        (dmi_hsel                 ),
	.dmi_hready      (dmi_hready               ),
	.dmi_hrdata      (dmi_hrdata               ),
	.dmi_hreadyout   (dmi_hreadyout            ),
	.dmi_hresp       (dmi_hresp                )
);

generate
if ((BIU_DATA_WIDTH > DM_SYS_DATA_WIDTH)) begin : gen_axi_dm_sup

	atcsizeup300 #(
		.DS_DATA_WIDTH   (SIZEUP_DS_DATA_WIDTH),
		.ID_WIDTH        (BIU_ID_WIDTH    ),
		.US_DATA_WIDTH   (DM_SYS_DATA_WIDTH)
	) u_axi_dm_sup (
		.aclk      (aclk                            ),
		.aresetn   (aresetn                         ),
		.us_arvalid(dm_sup_arvalid                  ),
		.us_arid   (dm_sup_arid                     ),
		.us_araddr (dm_sup_araddr[SIZEUP_ADDR_MSB:0]),
		.us_arlen  (dm_sup_arlen[3:0]               ),
		.us_arsize (dm_sup_arsize                   ),
		.us_arburst(dm_sup_arburst                  ),
		.us_arready(dm_sup_arready                  ),
		.us_awvalid(dm_sup_awvalid                  ),
		.us_awid   (dm_sup_awid                     ),
		.us_awaddr (dm_sup_awaddr[SIZEUP_ADDR_MSB:0]),
		.us_awlen  (dm_sup_awlen[3:0]               ),
		.us_awsize (dm_sup_awsize                   ),
		.us_awburst(dm_sup_awburst                  ),
		.us_awready(dm_sup_awready                  ),
		.ds_arvalid(dm_sys_arvalid                  ),
		.ds_arready(dm_sys_arready                  ),
		.ds_awvalid(dm_sys_awvalid                  ),
		.ds_awready(dm_sys_awready                  ),
		.us_rid    (dm_sup_rid                      ),
		.us_rvalid (dm_sup_rvalid                   ),
		.us_rdata  (dm_sup_rdata                    ),
		.us_rready (dm_sup_rready                   ),
		.ds_rlast  (dm_sys_rlast                    ),
		.ds_rvalid (dm_sys_rvalid                   ),
		.ds_rdata  (dm_sys_rdata                    ),
		.ds_rready (dm_sys_rready                   ),
		.us_wstrb  (dm_sup_wstrb                    ),
		.us_wlast  (dm_sup_wlast                    ),
		.us_wvalid (dm_sup_wvalid                   ),
		.us_wdata  (dm_sup_wdata                    ),
		.us_wready (dm_sup_wready                   ),
		.ds_wstrb  (dm_sys_wstrb                    ),
		.ds_wvalid (dm_sys_wvalid                   ),
		.ds_wdata  (dm_sys_wdata                    ),
		.ds_wready (dm_sys_wready                   ),
		.ds_wlast  (dm_sys_wlast                    ),
		.us_rlast  (dm_sup_rlast                    ),
		.us_rresp  (dm_sup_rresp                    ),
		.ds_rresp  (dm_sys_rresp                    ),
		.us_bid    (dm_sup_bid                      ),
		.us_bvalid (dm_sup_bvalid                   ),
		.us_bready (dm_sup_bready                   ),
		.ds_bvalid (dm_sys_bvalid                   ),
		.ds_bready (dm_sys_bready                   )
	);

end
endgenerate

`endif
nceplic100 #(
	.ADDR_WIDTH      (ADDR_WIDTH      ),
	.ASYNC_INT       (1024'hc000000   ),
	.DATA_WIDTH      (NCE_DATA_WIDTH  ),
	.EDGE_TRIGGER    (1024'h0         ),
	.INT_NUM         (31              ),
	.MAX_PRIORITY    (3               ),
	.PLIC_BUS        ("axi"           ),
	.SYNC_STAGE      (3               ),
	.TARGET_NUM      (PLIC_HW_TARGET_NUM[5:0]),
	.VECTOR_PLIC_SUPPORT(VECTOR_PLIC_SUPPORT)
) u_plic (
	.araddr   (plic_araddr              ),
	.arburst  (plic_arburst             ),
	.arcache  (plic_arcache             ),
	.arid     (4'd0                     ),
	.arlen    (plic_arlen               ),
	.arlock   (plic_arlock              ),
	.arprot   (plic_arprot              ),
	.arready  (plic_arready             ),
	.arsize   (plic_arsize              ),
	.arvalid  (plic_arvalid             ),
	.awaddr   (plic_awaddr              ),
	.awburst  (plic_awburst             ),
	.awcache  (plic_awcache             ),
	.awid     (4'd0                     ),
	.awlen    (plic_awlen               ),
	.awlock   (plic_awlock              ),
	.awprot   (plic_awprot              ),
	.awready  (plic_awready             ),
	.awsize   (plic_awsize              ),
	.awvalid  (plic_awvalid             ),
	.bid      (nds_unused_plic_bid      ),
	.bready   (plic_bready              ),
	.bresp    (plic_bresp               ),
	.bvalid   (plic_bvalid              ),
	.haddr    ({ADDR_WIDTH{1'b0}}       ),
	.hburst   (3'd0                     ),
	.hrdata   (nds_unused_plic_hrdata   ),
	.hready   (1'b0                     ),
	.hreadyout(nds_unused_plic_hreadyout),
	.hresp    (nds_unused_plic_hresp    ),
	.hsel     (1'b0                     ),
	.hsize    (3'd0                     ),
	.htrans   (2'd0                     ),
	.hwdata   ({NCE_DATA_WIDTH{1'b0}}   ),
	.hwrite   (1'b0                     ),
	.rdata    (plic_rdata               ),
	.rid      (nds_unused_plic_rid      ),
	.rlast    (plic_rlast               ),
	.rready   (plic_rready              ),
	.rresp    (plic_rresp               ),
	.rvalid   (plic_rvalid              ),
	.wdata    (plic_wdata               ),
	.wlast    (plic_wlast               ),
	.wready   (plic_wready              ),
	.wstrb    (plic_wstrb               ),
	.wvalid   (plic_wvalid              ),
	.clk      (aclk                     ),
	.reset_n  (aresetn                  ),
	.int_src  (int_src                  ),
	.t0_eip   (plic_hart0_meip          ),
	.t0_eiid  (hart0_meiid              ),
	.t0_eiack (plic_hart0_meiack        ),
	.t1_eip   (plic_hart0_seip          ),
	.t1_eiid  (hart0_seiid              ),
	.t1_eiack (plic_hart0_seiack        ),
	.t2_eip   (nds_unused_plic_t2_eip   ),
	.t2_eiid  (nds_unused_plic_t2_eiid  ),
	.t2_eiack (1'b0                     ),
	.t3_eip   (nds_unused_plic_t3_eip   ),
	.t3_eiid  (nds_unused_plic_t3_eiid  ),
	.t3_eiack (1'b0                     ),
	.t4_eip   (nds_unused_plic_t4_eip   ),
	.t4_eiid  (nds_unused_plic_t4_eiid  ),
	.t4_eiack (1'b0                     ),
	.t5_eip   (nds_unused_plic_t5_eip   ),
	.t5_eiid  (nds_unused_plic_t5_eiid  ),
	.t5_eiack (1'b0                     ),
	.t6_eip   (nds_unused_plic_t6_eip   ),
	.t6_eiid  (nds_unused_plic_t6_eiid  ),
	.t6_eiack (1'b0                     ),
	.t7_eip   (nds_unused_plic_t7_eip   ),
	.t7_eiid  (nds_unused_plic_t7_eiid  ),
	.t7_eiack (1'b0                     ),
	.t8_eip   (nds_unused_plic_t8_eip   ),
	.t8_eiid  (nds_unused_plic_t8_eiid  ),
	.t8_eiack (1'b0                     ),
	.t9_eip   (nds_unused_plic_t9_eip   ),
	.t9_eiid  (nds_unused_plic_t9_eiid  ),
	.t9_eiack (1'b0                     ),
	.t10_eip  (nds_unused_plic_t10_eip  ),
	.t10_eiid (nds_unused_plic_t10_eiid ),
	.t10_eiack(1'b0                     ),
	.t11_eip  (nds_unused_plic_t11_eip  ),
	.t11_eiid (nds_unused_plic_t11_eiid ),
	.t11_eiack(1'b0                     ),
	.t12_eip  (nds_unused_plic_t12_eip  ),
	.t12_eiid (nds_unused_plic_t12_eiid ),
	.t12_eiack(1'b0                     ),
	.t13_eip  (nds_unused_plic_t13_eip  ),
	.t13_eiid (nds_unused_plic_t13_eiid ),
	.t13_eiack(1'b0                     ),
	.t14_eip  (nds_unused_plic_t14_eip  ),
	.t14_eiid (nds_unused_plic_t14_eiid ),
	.t14_eiack(1'b0                     ),
	.t15_eip  (nds_unused_plic_t15_eip  ),
	.t15_eiid (nds_unused_plic_t15_eiid ),
	.t15_eiack(1'b0                     )
);

`ifdef PLATFORM_NO_PLIC_SW
`else
nceplic100 #(
	.ADDR_WIDTH      (ADDR_WIDTH      ),
	.DATA_WIDTH      (NCE_DATA_WIDTH  ),
	.EDGE_TRIGGER    (1024'd0         ),
	.INT_NUM         (31              ),
	.MAX_PRIORITY    (3               ),
	.PLIC_BUS        ("axi"           ),
	.TARGET_NUM      (PLIC_SW_TARGET_NUM[5:0]),
	.VECTOR_PLIC_SUPPORT("no"            )
) u_plic_sw (
	.araddr   (plicsw_araddr              ),
	.arburst  (plicsw_arburst             ),
	.arcache  (plicsw_arcache             ),
	.arid     (4'd0                       ),
	.arlen    (plicsw_arlen               ),
	.arlock   (plicsw_arlock              ),
	.arprot   (plicsw_arprot              ),
	.arready  (plicsw_arready             ),
	.arsize   (plicsw_arsize              ),
	.arvalid  (plicsw_arvalid             ),
	.awaddr   (plicsw_awaddr              ),
	.awburst  (plicsw_awburst             ),
	.awcache  (plicsw_awcache             ),
	.awid     (4'd0                       ),
	.awlen    (plicsw_awlen               ),
	.awlock   (plicsw_awlock              ),
	.awprot   (plicsw_awprot              ),
	.awready  (plicsw_awready             ),
	.awsize   (plicsw_awsize              ),
	.awvalid  (plicsw_awvalid             ),
	.bid      (nds_unused_plicsw_bid      ),
	.bready   (plicsw_bready              ),
	.bresp    (plicsw_bresp               ),
	.bvalid   (plicsw_bvalid              ),
	.haddr    ({ADDR_WIDTH{1'b0}}         ),
	.hburst   (3'd0                       ),
	.hrdata   (nds_unused_plicsw_hrdata   ),
	.hready   (1'b0                       ),
	.hreadyout(nds_unused_plicsw_hreadyout),
	.hresp    (nds_unused_plicsw_hresp    ),
	.hsel     (1'b0                       ),
	.hsize    (3'd0                       ),
	.htrans   (2'd0                       ),
	.hwdata   ({NCE_DATA_WIDTH{1'b0}}     ),
	.hwrite   (1'b0                       ),
	.rdata    (plicsw_rdata               ),
	.rid      (nds_unused_plicsw_rid      ),
	.rlast    (plicsw_rlast               ),
	.rready   (plicsw_rready              ),
	.rresp    (plicsw_rresp               ),
	.rvalid   (plicsw_rvalid              ),
	.wdata    (plicsw_wdata               ),
	.wlast    (plicsw_wlast               ),
	.wready   (plicsw_wready              ),
	.wstrb    (plicsw_wstrb               ),
	.wvalid   (plicsw_wvalid              ),
	.clk      (aclk                       ),
	.reset_n  (aresetn                    ),
	.int_src  (31'd0                      ),
	.t0_eip   (plicsw_hart0_msip          ),
	.t0_eiid  (nds_unused_plicsw_t0_eiid  ),
	.t0_eiack (1'b0                       ),
	.t1_eip   (nds_unused_plicsw_t1_eip   ),
	.t1_eiid  (nds_unused_plicsw_t1_eiid  ),
	.t1_eiack (1'b0                       ),
	.t2_eip   (nds_unused_plicsw_t2_eip   ),
	.t2_eiid  (nds_unused_plicsw_t2_eiid  ),
	.t2_eiack (1'b0                       ),
	.t3_eip   (nds_unused_plicsw_t3_eip   ),
	.t3_eiid  (nds_unused_plicsw_t3_eiid  ),
	.t3_eiack (1'b0                       ),
	.t4_eip   (nds_unused_plicsw_t4_eip   ),
	.t4_eiid  (nds_unused_plicsw_t4_eiid  ),
	.t4_eiack (1'b0                       ),
	.t5_eip   (nds_unused_plicsw_t5_eip   ),
	.t5_eiid  (nds_unused_plicsw_t5_eiid  ),
	.t5_eiack (1'b0                       ),
	.t6_eip   (nds_unused_plicsw_t6_eip   ),
	.t6_eiid  (nds_unused_plicsw_t6_eiid  ),
	.t6_eiack (1'b0                       ),
	.t7_eip   (nds_unused_plicsw_t7_eip   ),
	.t7_eiid  (nds_unused_plicsw_t7_eiid  ),
	.t7_eiack (1'b0                       ),
	.t8_eip   (nds_unused_plicsw_t8_eip   ),
	.t8_eiid  (nds_unused_plicsw_t8_eiid  ),
	.t8_eiack (1'b0                       ),
	.t9_eip   (nds_unused_plicsw_t9_eip   ),
	.t9_eiid  (nds_unused_plicsw_t9_eiid  ),
	.t9_eiack (1'b0                       ),
	.t10_eip  (nds_unused_plicsw_t10_eip  ),
	.t10_eiid (nds_unused_plicsw_t10_eiid ),
	.t10_eiack(1'b0                       ),
	.t11_eip  (nds_unused_plicsw_t11_eip  ),
	.t11_eiid (nds_unused_plicsw_t11_eiid ),
	.t11_eiack(1'b0                       ),
	.t12_eip  (nds_unused_plicsw_t12_eip  ),
	.t12_eiid (nds_unused_plicsw_t12_eiid ),
	.t12_eiack(1'b0                       ),
	.t13_eip  (nds_unused_plicsw_t13_eip  ),
	.t13_eiid (nds_unused_plicsw_t13_eiid ),
	.t13_eiack(1'b0                       ),
	.t14_eip  (nds_unused_plicsw_t14_eip  ),
	.t14_eiid (nds_unused_plicsw_t14_eiid ),
	.t14_eiack(1'b0                       ),
	.t15_eip  (nds_unused_plicsw_t15_eip  ),
	.t15_eiid (nds_unused_plicsw_t15_eiid ),
	.t15_eiack(1'b0                       )
);

`endif
generate
if (BIU_ASYNC_SUPPORT == 1) begin : gen_debugint_sync

	kv_sync_l2l #(
		.RESET_VALUE     (1'b0            ),
		.SYNC_STAGE      (3               )
	) u_debugint_sync (
		.resetn(hart0_core_reset_n),
		.clk   (hart0_core_clk    ),
		.d     (dm_debugint[0]    ),
		.q     (hart0_debugint    )
	);

end
endgenerate

generate
if (BIU_ASYNC_SUPPORT == 1) begin : gen_resethaltreq_sync

	kv_sync_l2l #(
		.RESET_VALUE     (1'b0            ),
		.SYNC_STAGE      (3               )
	) u_resethaltreq_sync (
		.resetn(hart0_core_reset_n),
		.clk   (hart0_core_clk    ),
		.d     (dm_resethaltreq[0]),
		.q     (hart0_resethaltreq)
	);

end
endgenerate

generate
if (BIU_ASYNC_SUPPORT == 1) begin : gen_seip_sync

	kv_sync_l2l #(
		.RESET_VALUE     (1'b0            ),
		.SYNC_STAGE      (3               )
	) u_seip_sync (
		.resetn(hart0_core_reset_n),
		.clk   (hart0_core_clk    ),
		.d     (plic_hart0_seip   ),
		.q     (hart0_seip        )
	);

end
endgenerate

generate
if (BIU_ASYNC_SUPPORT == 1) begin : gen_seiack_sync

	kv_sync_l2l #(
		.RESET_VALUE     (1'b0            ),
		.SYNC_STAGE      (3               )
	) u_seiack_sync (
		.resetn(aresetn          ),
		.clk   (aclk             ),
		.d     (hart0_seiack     ),
		.q     (plic_hart0_seiack)
	);

end
endgenerate

generate
if (BIU_ASYNC_SUPPORT == 1) begin : gen_meip_sync

	kv_sync_l2l #(
		.RESET_VALUE     (1'b0            ),
		.SYNC_STAGE      (3               )
	) u_meip_sync (
		.resetn(hart0_core_reset_n),
		.clk   (hart0_core_clk    ),
		.d     (plic_hart0_meip   ),
		.q     (hart0_meip        )
	);

end
endgenerate

generate
if (BIU_ASYNC_SUPPORT == 1) begin : gen_meiack_sync

	kv_sync_l2l #(
		.RESET_VALUE     (1'b0            ),
		.SYNC_STAGE      (3               )
	) u_meiack_sync (
		.resetn(aresetn          ),
		.clk   (aclk             ),
		.d     (hart0_meiack     ),
		.q     (plic_hart0_meiack)
	);

end
endgenerate

generate
if (BIU_ASYNC_SUPPORT == 1) begin : gen_msip_sync

	kv_sync_l2l #(
		.RESET_VALUE     (1'b0            ),
		.SYNC_STAGE      (3               )
	) u_msip_sync (
		.resetn(hart0_core_reset_n),
		.clk   (hart0_core_clk    ),
		.d     (plicsw_hart0_msip ),
		.q     (hart0_msip        )
	);

end
endgenerate

generate
if (BIU_ASYNC_SUPPORT == 1) begin : gen_mtip_sync

	kv_sync_l2l #(
		.RESET_VALUE     (1'b0            ),
		.SYNC_STAGE      (3               )
	) u_mtip_sync (
		.resetn(hart0_core_reset_n),
		.clk   (hart0_core_clk    ),
		.d     (mtip[0]           ),
		.q     (hart0_mtip        )
	);

end
endgenerate

endmodule
