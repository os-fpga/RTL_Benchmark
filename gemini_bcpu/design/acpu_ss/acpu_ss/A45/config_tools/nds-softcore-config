#!/usr/bin/env wish
if {$tcl_version < 8.5} {
        puts "WARNING: Tcl/Tk version = $tcl_version. Please update your Tcl/Tk version to 8.5.\n"
} else {
        puts "INFO: Tcl/Tk version = $tcl_version.\n"
}


set out_fp ""
set row 0
set platform_row 0
set display_platform_option "on"
set color_customer_option {#cee6d1}
set color_customer_subtitle {#abd2b0}
set color_child_customer_option {#f7c3a5}
set color_child_customer_subtitle {#f79d6a}
set color_service_option {#dfc6db}
set color_service_subtitle {#d6b1c8}
set value ""
set parse_child 0
set child_option {}
set parent_name ""
set auto_dep_update_rules ""
set top_dep_rules {}
set child_dep_rules {}
set end_dep_rules {}
set option_list {}
set title_list {}
global o
set chg_macro ""
set chg_opt_macro ""
set col 8
set font_size 10
set opt_load_cfg_file ""
set opt_extra_tcl_file ""
set opt_generate 0
set opt_softconfig 0
set opt_debug 0
set gen_sid 0
set page_title_str ""
set combo_text ""
array set index {}
set index_count 0
set titles_only ""


if {![info exists NDS_HOME]} {
	if {![info exists ::env(NDS_HOME)]} {
		puts "ERROR: environment varaible NDS_HOME is not defined"
		exit
	}
	set NDS_HOME $::env(NDS_HOME)
}


proc get_opt_hex_val {option_name} {
	set val [selected $option_name]
 	check_verilog_number $val digits
	return $digits
}

proc set_opt_value {option_name val} {
	global o log_fp nogui const_opt fixed_options

	if {![info exists fixed_options($option_name)]} {
		set o($option_name) $val
	}
        if {$nogui} {                                                                              
		if {[info exists log_fp]} {
	                puts $log_fp "set_opt_value: $option_name = $val"
		}
        }
}

proc selected {option_name} {
	global o parent_name parse_child
	set option_str $option_name

	if {[info exists o($option_str)]} {
		return $o($option_str)
	}

	return ""
}

proc enable_child_option {option_name} {
	upvar #0 "option_${option_name}" option_var

	foreach children $option_var(child_opt) {
		enable ${option_name}_$children
	}
}

proc disable_child_option {option_name} {
	upvar #0 "option_${option_name}" option_var

	foreach children $option_var(child_opt) {
		disable ${option_name}_$children
	}
}

proc enable {option_name} {
	global nogui
	upvar #0 "option_${option_name}" option_var

        if {![info exists option_var(full_name)]} {
                return
        }
	set option_var(active) 1
	if {$nogui || $option_var(hidden) == "yes"} {
		return
	}
	if {$option_var(chk_button)} {
		foreach chk_button_name $option_var(chk_button_var) {
			upvar #0 "option_${chk_button_name}" option_chk_var
			if {$option_chk_var(active) == 0} {
				continue
			}
			if {[info exists option_var(platform_config)]} {
				if {[selected NDS_CONFIG_PLATFORM] == "ae350" && [regexp {BASE|RAMBRG_REGION_SIZE|NDS_RESET_VECTOR} $option_name]} {
					continue
				}
			}
			enable $chk_button_name
		}
		return
	}

	foreach var $option_var(button_var) {
		if {[info exists option_var(platform_config)]} {
			if {[selected NDS_CONFIG_PLATFORM] == "ae350" && [regexp {BASE|RAMBRG_REGION_SIZE|NDS_RESET_VECTOR} $option_name]} {
				continue
			}
		}
		$var configure -state normal
	}
	
}

proc disable {option_name} {
	global o nogui log_fp

	upvar #0 "option_${option_name}" option_var

        if {![info exists option_var(full_name)]} {
                return
        }
	set option_var(active) 0

	if {$nogui || $option_var(hidden) == "yes"} {
		return
	}
	foreach var $option_var(button_var) {
		$var configure -state disable
	}
}

proc enable_chk_var {option_name val_list} {
	global o nogui log_fp

	upvar #0 "option_${option_name}" option_var

        if {![info exists option_var(full_name)]} {
                return
        }

	if {$nogui || $option_var(hidden) == "yes"} {
		return
	}

	foreach val $val_list {
		set idx 0
		foreach var $option_var(button_var) {
			if [string equal $val [lindex $option_var(value) $idx]] {
				$var configure -state normal
			}
			incr idx
		}
	}
}

proc disable_chk_var {option_name val_list} {
	global o nogui log_fp

	upvar #0 "option_${option_name}" option_var

        if {![info exists option_var(full_name)]} {
                return
        }

	if {$nogui || $option_var(hidden) == "yes"} {
		return
	}

	foreach val $val_list {
		set idx 0
		foreach var $option_var(button_var) {
			if [string equal $val [lindex $option_var(value) $idx]] {
				$var configure -state disable
			}
			incr idx
		}
	}
}

proc page_title {args} {
	global page_title_str parse_child

	if {$parse_child > 0} {
		return
	}
	set page_title_str $args
}



proc title {args} {
	global color_customer_subtitle parse_child color_child_customer_subtitle 
	global title_list option_list nogui

	if {$nogui} {
		return
	}

	set text_str $args
	set color_subtitle $color_customer_subtitle 
	if {$parse_child > 0} {
		set text_str "    $args"
		set color_subtitle $color_child_customer_subtitle
	}

	set title_list [lappend title_list $text_str]
	set title_list [lappend title_list $color_subtitle]
	set option_list [lappend option_list "title_$args"]
}

proc delete_title {args} {
	global color_customer_subtitle parse_child color_child_customer_subtitle 
	global title_list option_list nogui

	if {$nogui} {
		return
	}

	set text_str $args
	set color_subtitle $color_customer_subtitle 
	if {$parse_child > 0} {
		set text_str "    $args"
		set color_subtitle $color_child_customer_subtitle
	}

	set m 0
	foreach i $title_list {
		if [string equal $args $i] {
			# Remove title string
			set title_list [lreplace $title_list $m $m]
			# Remove color_subtitle
			set title_list [lreplace $title_list $m $m]
		}
		incr m
	}

	set m 0
	foreach i $option_list {
		if [string equal "title_$args" $i] {
			# Remove title
			set option_list [lreplace $option_list $m $m]
		}
		incr m
	}
}

proc show_gui {} {
	global cur_wheight row config_file_name nogui

	if {$nogui} {
		return
	}

	update idletasks
	
	set width [expr [winfo reqwidth .config.canvas.o] + 1]
	set height [expr [winfo reqheight .config.canvas.o] + 1]
	.config.canvas create window 1 1 -anchor nw -window .config.canvas.o
	.config.canvas configure \
	        -width $width \
	        -scrollregion "0 0 $width $height"
	
	update
	set cur_wwidth [expr [winfo reqwidth .]]
	
	set wheight [expr $cur_wheight + $height]
	
	set maxy [expr [winfo screenh .] * 15 / 16]
	set miny [expr  $maxy * 1 / 2]
	
	if {$maxy > $wheight} {
	        set maxy $wheight
	}
	
	if {$miny > $wheight} {
	        set miny $wheight
	}
	set half_height [expr $wheight / 2]
	if {$half_height > $miny && $half_height < $maxy} {
	        set miny $half_height
	}
	
	set cheight [expr $maxy - $cur_wheight]
	set reqh [winfo reqheight .config.canvas]
	
	.config.canvas configure -height $cheight
	wm maxsize . $cur_wwidth $maxy
	wm minsize . $cur_wwidth $miny
	update
	wm deiconify .
}

proc design_option {option_name name_list definition} {
	global all_options  
	global parse_child child_option parent_name
	global chg_macro o  chg_opt_macro 
	global option_list

	set option_str $option_name

	if {$parse_child > 0} {
	#	set option_str "$parent_name\_$option_name"
		set child_option [lappend child_option $option_name]
	}

	if {![info exists all_options($option_str)]} {
		set option_list [lappend option_list $option_str]
	}

	upvar #0 "option_${option_str}" option_var
	set option_var(hidden) "no"

	array set option_var [list {*}$definition]
	set option_var(option_name) ${option_str}
	set option_var(selected) $option_var(default)
	set option_var(active) 1
	set option_var(chk_button) 0

	set o($option_str) $option_var(default)
	rename_to_define_script $option_str
	rename_post_randomize $option_str $name_list
	
	if {[info exists option_var(include)]} {
		set orig_chg_macro $chg_macro
		if {[info exists option_var(change_macro)]} {
			set chg_macro $option_var(change_macro)
		}
		set orig_chg_opt_macro $chg_opt_macro
		if {[info exists option_var(change_opt_macro)]} {
			set chg_opt_macro $option_var(change_opt_macro)
		}
		incr parse_child  
		set orig_child_option $child_option
		set child_option ""
		set orig_parent_name $parent_name
		set parent_name $option_var(option_name)

                # Use subst here to dereference the variables in include path
		set option_var(include) [subst $option_var(include)]
                puts "  - source softconfig file: $option_var(include)"
		source $option_var(include)
		set option_var(child_opt) $child_option
		set parent_name $orig_parent_name 
		set child_option $orig_child_option
		set parse_child [expr $parse_child - 1]
		set chg_macro $orig_chg_macro
		set chg_opt_macro $orig_chg_opt_macro
	}
	set all_options($option_str) 1
}

proc design_checkoption {option_name name_list definition} {
	global all_options color_customer_option
	global parse_child child_option parent_name
	global chg_macro o 
	global option_list

	set option_str $option_name

	if {$parse_child > 0} {
	#	set option_str "$parent_name\_$option_name"
		set child_option [lappend child_option $option_name]
	}
	if {![info exists all_options($option_str)]} {
		set option_list [lappend option_list $option_str]
	}

	upvar #0 "option_${option_str}" option_var
	set option_var(hidden) "no"

	array set option_var [list {*}$definition]
	set option_var(option_name) ${option_str}
	set option_var(selected) $option_var(default)
	set option_var(active) 1
	set option_var(chk_button) 1
	set text_str $option_var(full_name)
	set color_option $color_customer_option

	set o($option_str) 1
	foreach {val} $option_var(value) {
		set o(${option_str}_$val) 0
		upvar #0 "option_${option_str}_$val" option_chk_var
		set option_chk_var(active) 1
		set option_chk_var(default) 0
		set option_chk_var(chk_button) 0
		set option_var(chk_button_var) [lappend option_var(chk_button_var) ${option_str}_$val]
	}

	rename_to_define_script $option_str
	rename_post_randomize $option_str $name_list
	set all_options($option_str) 1
}	

proc rename_to_define_script {option_name} {
	global parse_child chg_macro all_options parent_name chg_opt_macro

	upvar #0 "option_${option_name}" option_var
	if {![info exists option_var(to_define)]} {
		return
	}

	set replaced_script $option_var(to_define)
	if {$parse_child > 0} {	
		set pattern ""
		if {$chg_macro != ""} {
			lappend pattern {*}$chg_macro
		}
		
		if {$chg_opt_macro != ""} {
			array set chg_opt_macro_var [list {*}$chg_opt_macro]	
			foreach {key value} [array get chg_opt_macro_var] {
				if {$key == $option_name} {
					lappend pattern {*}$value
					break
				}
			} 
			array unset chg_opt_macro_var *
		}

		set replaced_script [string map $pattern $option_var(to_define)]

		# Add parent name to selected option
		# set selected_pat [list "selected " "selected ${parent_name}_"]
		# set replaced_script [string map $selected_pat $replaced_script]
	}

	set option_var(to_define) $replaced_script  
}

proc delete_disable_value_from_list {opt_name val_list} {
	global disable_options nogui

	set new_val_list ""
	set disable_val_list $disable_options($opt_name)
	foreach val $val_list {
		set found 0
		foreach disable_val $disable_val_list {
			if {$val == $disable_val} {
				set found 1
				break
			}
		}
		if {!$found} {
			lappend new_val_list $val
		}
	}

	return $new_val_list
}

proc rename_post_randomize {option_name name_list} {
	global parse_child child_option parent_name 

	upvar #0 "option_${option_name}" option_var
	if {![info exists option_var(post_randomize)]} {
		return
	}

	set replaced_script $option_var(post_randomize)
	if {$parse_child > 0 && $child_option != ""} {	
		#foreach name $name_list {
		#	set pat [list " $name" " ${parent_name}_$name" "($name" "(${parent_name}_$name"]
		#	set replaced_script [string map $pat $replaced_script]

		#	# Add parent name to selected option
		#	set selected_pat [list "selected " "selected ${parent_name}_"]
		#	set replaced_script [string map $selected_pat $replaced_script]
		#}
		set option_var(post_randomize) $replaced_script
	}
}

proc get_checkbutton_list {option_name} {
	upvar #0 "option_${option_name}" option_var
	if {!$option_var(chk_button)} {
		return 0
	}
	return $option_var(chk_button_var)
}

proc set_default {} {
	global all_options o fixed_options default_options soft_config_options

	if {[info exists soft_config_options]} {
		foreach option_name [array names soft_config_options] {
			set_option_default_value $option_name $soft_config_options($option_name)
		}
	}

	if {[info exists default_options]} {
		foreach option_name [array names default_options] {
			upvar #0 "option_${option_name}" option_var
			set option_var(default) $default_options($option_name)
		}
	}

	foreach option_name [array names all_options] {
		upvar #0 "option_${option_name}" option_var
		if {$option_var(chk_button)} {
			foreach chk_btn $option_var(chk_button_var) {
				foreach default_val $option_var(default) {
					if {$chk_btn == "${option_name}_$default_val"} {
						set o($chk_btn) $default_val
						break
					}
				}
			}
		} else {
			set o($option_name) $option_var(default)
		}
	}

	if {![info exists fixed_options]} {
		return
	}

	foreach option_name [array names fixed_options] {
		set o($option_name) $fixed_options($option_name)
	}
}

proc design_option_set_platform_config {option_name config} {
	upvar #0 "option_${option_name}" option_var

	set option_var(platform_config) $config
}

proc init_dependency_check {} {
	global top_dep_rules child_dep_rules

	for {set dloop 0} {$dloop < 2} { incr dloop} {
		foreach top_dep_rule $top_dep_rules {
			set catch_ret [catch {uplevel #0 $top_dep_rule} result]
			if {$catch_ret==1} { # TCL_ERROR
				puts $::errorInfo
			}
		}
		foreach child_dep_rule $child_dep_rules {
			set catch_ret [catch {uplevel #0 $child_dep_rule} result]
			if {$catch_ret==1} { # TCL_ERROR
				puts $::errorInfo
			}
		}
	}

}

proc echo {line} {
	global out_fp value macro_configs nogui gen_config_inc outfile_format

	set pattern [list "\$value" "$value" "\${value}" "$value"]
	set line [string map $pattern $line]
	set macro_str ""
	set macro_val ""

	if {$nogui} {
		set tmp_line $line
		set tmp_line [regsub {\t} $tmp_line " "]
		regexp {.*define\s+(.*)} $tmp_line -> tmp_str
		if {![info exists tmp_str]} { 
			return
		}

		set space_idx [string first " " $tmp_str]
		if {$space_idx == -1} {
			set macro_str $tmp_str                                                       
			set macro_val ""
		} else {
			set macro_str [string range $tmp_str 0 [expr $space_idx - 1]]
			set macro_val [string range $tmp_str $space_idx end]
			regexp {\s*(\S+)\s*} $macro_val -> macro_val
		}
		
		set macro_configs($macro_str) $macro_val
	}

	if {$gen_config_inc} {
		if {$outfile_format == "list"} {
			puts $out_fp "$macro_str=$macro_val " nonewline
		} else {
			puts $out_fp $line
		}
	}
}

proc save_options {file_name} {
	global o
	global NDS_HOME ip_dir core_name

        if {[catch {
                set fd [open $file_name "w"]
                foreach {name value} [array get o] {
                        puts $fd "set o($name) {$value}"
                }
                close $fd
        } error]} {
                puts $error
        }

        if {[catch {
                # save CPU ID
		if {[info exists ip_dir] && [info exists core_name]} {
			set vc_core_v  "$NDS_HOME/andes_ip/$ip_dir/top/hdl/$core_name.v"
	        	set fp [open $vc_core_v "r"]
			while {![eof $fp]} {
				gets $fp data
				if {[regexp {localparam (MIMPID_(\w*)\s*=\s*\d+\'.[0-9a-f]+)} $data m0 m1]} {
					puts $fd "# $m1"
				}
			}
			close $fp
                }
        } error]} {
                puts $error
        }
}

proc save_options_cmd {} {
        set types {
                {{Config Files}      {.cfg}}
                {{All Files}        *     }
        }
        set file_name [tk_getSaveFile -title "Save current configurations" -filetypes $types -defaultextension ".cfg"]
        if {$file_name == ""} {
                return
        }

	save_options $file_name
}

proc load_cfg_file {file_name} {
	global option_list
	upvar #0 "o" real_options
        source $file_name

	set version_mismatch 0
	foreach option_name $option_list {
		if {[info exists o($option_name)]} {
			if {$option_name != "NDS_CPU_MIMPID"} {
				set real_options($option_name) $o($option_name)
			} elseif {$real_options($option_name) != $o($option_name)} {
				set version_mismatch 1
			}
		}
	}
	if {$version_mismatch} {
		show_msg_box "Warning" "loading ${file_name} was generated using a different CPU release. Please double check the final config." "warning" 
	}
}

proc load_options_cmd {} {
	set types {
		{{Config Files}      {.cfg}}
		{{All Files}        *     }
	}
	set file_name [tk_getOpenFile -title "Load saved configurations" -filetypes $types -defaultextension ".cfg"]
	if {$file_name == ""} {
		return
	}
	
	if {[catch {load_cfg_file $file_name} error]} {
		puts $error
	}
	
	# Excute all constraint when load cfg file
	init_dependency_check
}


proc check_end_dependency_checker {} {
	global end_dep_rules

	foreach end_dep_rule $end_dep_rules {
		set catch_ret [catch {uplevel #0 $end_dep_rule} result]
		if {$catch_ret != 0 && $catch_ret != 2} { # not TCL_OK or TCL_RETURN
			if {$catch_ret==1} { # TCL_ERROR
				puts $::errorInfo
			} else {
				puts "unexpected break/continue in $end_dep_rules"
			}
			return 0
		}

		if {$result==0} {
			return $result
		}
	}

	return 1
}

proc gen_config_cmd {} {
	global config_file_name  
	global ip_dir subsystem NDS_HOME opt_generate
	global option_list
	global edit_file_cache
	global gen_sid

	set result [init_dependency_check]
	if {$result == 0} {
		return
	} 
	set result [check_end_dependency_checker]
	if {$result == 0} {
		return
	} 

	foreach option_name $option_list {
		if { [regexp {title.*} $option_name]} {
			continue
		}
		if {[highlighted $option_name]} {
				show_error_highlight $option_name "Configuration issue of [selected_full_name $option_name] is not resolved!!!"
				return
		}
	}

        if {![info exists config_file_name] || $config_file_name == ""} {
                return
        }

	save_options "$NDS_HOME/last_config.cfg"

	if {![info exists subsystem]} {
		gen_config 
	} else {
		set config_file_name "$NDS_HOME/andes_ip/$ip_dir/top/hdl/config.inc"
		gen_config_subsystem 
	}

	foreach file_name [array names edit_file_cache] {
		array unset edit_file_cache $file_name
	}

	if {$gen_sid} {
		gen_sid_conf
	}

}

proc vlog2c_number {value} {
	regsub {\d+'h0*} $value {0x} value
	regsub {\d+'d} $value {} value
	if {$value == "0x"} {
		set value "0x0"
	}
	return $value
}
proc edit_define {macro value file_name {lang {verilog}}} {
	global edit_file_cache opt_debug

	if {[info exists edit_file_cache($file_name)]} {
		set content $edit_file_cache($file_name)
	} else {
		if {![file exists $file_name]} {
			return
		}

		if {[catch {set fp [open $file_name "r"]} err]} {
			puts $err
			return
		}
		set content {}
		while {[gets $fp line] >= 0} {
			lappend content $line
		}
		close $fp
		
		puts "INFO: editing $file_name"
	}

	if {$opt_debug} {
		global NDS_HOME
		set print_file_name $file_name
		if {[string first $NDS_HOME $file_name] == 0} {
			set print_file_name [string replace $file_name 0 [string length $NDS_HOME]-1 {$NDS_HOME}]
		}

		if {$value == "yes"} {
			puts "DEBUG: define $macro in $print_file_name"
		} elseif {$value == "no"} {
			puts "DEBUG: undef $macro in $print_file_name"
		} else {
			puts "DEBUG: define $macro=$value in $print_file_name"
		}
	}

	set done 0
	set tickhash {`}
	if {$lang=="c"} {
		set tickhash {#}
	}
	
	if {$value == "yes"} { # set
		for {set i 0} {$i < [llength $content]} {incr i} {
			set line [lindex $content $i]
			if {[regexp "^\\s*(//)?\\s*?\[#`\]define\\s+$macro\\M" $line m0 m1]} {
				if {$m1 == "//"} {
					regsub {\s*//} $line "" line
				}
				lset content $i $line
				set done 1
			}
		}
	} elseif {$value == "no"} { # unset
		for {set i 0} {$i < [llength $content]} {incr i} {
			set line [lindex $content $i]
			if {[regexp "^\\s*\[#`\]define\\s+$macro\\M" $line]} {
				regsub {\A} $line "// " line
				lset content $i $line
				set done 1
			}
		}
	} else { # set value
		for {set i 0} {$i < [llength $content]} {incr i} {
			set line [lindex $content $i]
			if {[regexp "^\\s*(\[`#\])define\\s+$macro\\s+\\S+" $line m0 tickhash]} {
				if {$tickhash == "#"} {
					set value [vlog2c_number $value]
				}
				regsub "(\[`#\]define\\s+$macro\\s+)\\S.*(//.*)?" $line "\\1$value\\2" line
				lset content $i $line
				set done 1
			} else {
				regexp "^\\s*(\[`#\])ifdef" $line m0 tickhash
			}
		}
	}

	if {!$done} {
		# insert
		set ins [expr [llength $content] - 1]
		while {$ins >= 0} {
			set line [lindex $content $ins]
			if {![regexp {^\s*(//.*)?$} $line]} {
				break
			}
			incr ins -1
		}
		if {$ins >= 0} {
			set line [lindex $content $ins]
			if {![regexp {^\s*([`#]endif)} $line]} {
				incr ins
			}
		}

		# ins is the insert point.
		if {$value == "yes"} { # set
			set content [linsert $content $ins "${tickhash}define $macro"]
		} elseif {$value == "no"} { # unset
			# unset: do nothing
		} else {
			if {$tickhash == "#"} {
				set value [vlog2c_number $value]
			}
			set content [linsert $content $ins "${tickhash}define $macro $value"]
		}
	}

	set edit_file_cache($file_name) $content
}

proc edit_ldscript {macro value file_name} {
	global edit_file_cache opt_debug

	if {[info exists edit_file_cache($file_name)]} {
		set content $edit_file_cache($file_name)
	} else {
		if {![file exists $file_name]} {
			return
		}

		if {[catch {set fp [open $file_name "r"]} err]} {
			puts $err
			return
		}

		set content {}
		while {[gets $fp line] >= 0} {
			lappend content $line
		}
		close $fp
		
	        puts "INFO: editing $file_name"
	}
	if {$opt_debug} {
		global NDS_HOME
		set print_file_name $file_name
		if {[string first $NDS_HOME $file_name] == 0} {
			set print_file_name [string replace $file_name 0 [string length $NDS_HOME]-1 {$NDS_HOME}]
		}

		puts "DEBUG: PROVIDE($macro = $value) in $print_file_name"
	}

	for {set i 0} {$i < [llength $content]} {incr i} {
		set line [lindex $content $i]
		if {[regexp "^\\s*PROVIDE\\s*\\(\\s*${macro}\\s*=\\s*(\[^\\s\\)]+).*\\)" $line]} {
			regsub "(\\(\\s*${macro}\\s*=\\s*)(\[^\\s\\)]+.*)\\)" $line "\\1$value)" line
			lset content $i $line
			break
		}
	}

	set edit_file_cache($file_name) $content
}

proc check_config {} {
        global o
} 

proc exec_simple {cmd {result_var ""}} {
	if {$result_var != ""} {
		upvar $result_var result
	}
	if {[catch {exec {*}$cmd} result option]} {
		set errorcode [dict get $option -errorcode]
		if {[lindex $errorcode 0] != "NONE"} {
			return 1
		}
	}
	return 0
}


proc gen_config_subsystem {} {
	global config_file_name
	global ip_dir subsystem cpu_name core_name product subsystem_incdirs cpu_name_incdirs product_mp NDS_HOME
	global nogui multiplatform ddr3_support
	global ipxact_top_v ipxact_top_xml ipxact_top

	if {$ddr3_support == "on"} {
            remapping_flist
	}
        if {$multiplatform == "on"} {
            set_subsystem
            remapping_files
        } 

        if {[catch {check_config} error]} {
                puts $error
                return
        }

	# set path
	set core_name_template		"${NDS_HOME}/config_tools/${core_name}.template"
	set core_name_v			"${NDS_HOME}/andes_ip/${ip_dir}/top/hdl/${core_name}.v"

	set cpu_name_template		"${NDS_HOME}/config_tools/${cpu_name}.template"
	set cpu_name_v			"${NDS_HOME}/andes_ip/${ip_dir}/top/hdl/${cpu_name}.v"

	set cpu_top_name		"${cpu_name}_top"
	set cpu_top_name_template	"${NDS_HOME}/config_tools/${cpu_top_name}.template"
	set cpu_top_name_v		"${NDS_HOME}/andes_ip/${ip_dir}/top/hdl/${cpu_top_name}.v"
	set cpu_top_name_xml		"${NDS_HOME}/andes_ip/${ip_dir}/top/hdl/${cpu_top_name}.xml"

	set subsystem_name_template	"${NDS_HOME}/config_tools/${subsystem}.template"
	set subsystem_name_v		"${NDS_HOME}/andes_ip/${ip_dir}/top/hdl/${subsystem}.v"

	set cluster_name		"${product}_cluster"
	set cluster_name_template	"${NDS_HOME}/config_tools/${cluster_name}.template"
	set cluster_name_v		"${NDS_HOME}/andes_ip/${ip_dir}/top/hdl/${cluster_name}.v"
	set cluster_name_xml		"${NDS_HOME}/andes_ip/${ip_dir}/top/hdl/${cluster_name}.xml"

	set l2_top_name			"${product}_l2_top"
	set l2_top_name_template	"${NDS_HOME}/config_tools/${l2_top_name}.template"
	set l2_top_name_v		"${NDS_HOME}/andes_ip/${ip_dir}/top/hdl/${l2_top_name}.v"

	#set l2c_ram_name		"${product}_l2c_ram"
	#set l2c_ram_name_template	"${NDS_HOME}/config_tools/${l2c_ram_name}.template"
	#set l2c_ram_name_v		"${NDS_HOME}/andes_ip/${ip_dir}/top/hdl/${l2c_ram_name}.v"

        set config_inc             	"${NDS_HOME}/andes_ip/${ip_dir}/top/hdl/config.inc"

	# Check template files
        if {[file exists "${core_name_template}"] == 0} {
                puts "ERROR: ${core_name_template} does not exist"
                return
        }
        if {[file exists "${cpu_name_template}"] == 0} {
                puts "ERROR: ${cpu_name_template} does not exist"
                return
        }
        if {[file exists "${cpu_top_name_template}"] == 0} {
                puts "ERROR: ${cpu_top_name_template} does not exist"
                return
        }
        if {[file exists "${subsystem_name_template}"] == 0} {
                puts "ERROR: ${subsystem_name_template} does not exist"
                return
        }
	if {$product_mp == "yes"} {
	        if {[file exists "${cluster_name_template}"] == 0} {
	                puts "ERROR: ${cluster_name_template} does not exist"
	                return
	        }
	        if {[file exists "${l2_top_name_template}"] == 0} {
	                puts "ERROR: ${l2_top_name_template} does not exist"
	                return
	        }
	        #if {[file exists "${l2c_ram_name_template}"] == 0} {
	        #        puts "ERROR: ${l2c_ram_name_template} does not exist"
	        #        return
	        #}
	}

	# print message
	set msg "\$NDS_HOME/andes_ip/$ip_dir/top/hdl\n\tconfig.inc\n\t${core_name}.v\n\t${cpu_name}.v\n\t${cpu_top_name}.v"

	if {$product_mp == "yes"} {
        	#set msg "$msg\n\t${cluster_name}.v\n\t${cluster_name}.xml\n\t${l2_top_name}.v\n\t${l2c_ram_name}.v"
        	set msg "$msg\n\t${cluster_name}.v\n\t${cluster_name}.xml\n\t${l2_top_name}.v"
	} else {
        	set msg "$msg\n\t${cpu_top_name}.xml"
	}
	set msg "$msg\n\t${subsystem}.v"

        if {!$nogui} {
            set answer [tk_messageBox -message $msg -title "Overwrite Files" -type okcancel]
            if {$answer != "ok"} {
                    return
            }
        }

        set systemTime [clock seconds]
        puts "Start customizing IP: [clock format $systemTime -format %H:%M:%S]"

        puts "INFO: generating $config_file_name"
        gen_config 
	gen_platform_config

        set incdir [file dirname ${config_inc}]
        cd $incdir

        puts "INFO: Start to generating $subsystem_name_v"
        if {[catch {
                exec $NDS_HOME/tools/bin/vundef -add-copyright -verilog $subsystem_name_template -o $subsystem_name_v {*}$subsystem_incdirs
        } error]} {
                puts "WARNING: Using template file as $subsystem_name_v"
                exec cp $subsystem_name_template $subsystem_name_v
        } else {
		puts "INFO: Vundef successful and generating $subsystem_name_v completed"
	}

	if {$product_mp == "yes"} {
		#if {[file exists $l2c_ram_name_v] != 0} {
		#	puts "INFO: generating $l2c_ram_name_v"
		#	if {[catch {
		#	        exec $NDS_HOME/tools/bin/vundef -add-copyright -verilog $l2c_ram_name_template -o $l2c_ram_name_v {*}$cpu_name_incdirs
		#	} error]} {
		#	        puts "WARNING: Using template file as $l2c_ram_name_v"
		#	        exec cp $l2c_ram_name_template $l2c_ram_name_v
		#	}
		#}
		if {[file exists $l2_top_name_v] != 0} {
			puts "INFO: Start to generating $l2_top_name_v"
			if {[catch {
			        exec $NDS_HOME/tools/bin/vundef -add-copyright -verilog $l2_top_name_template -o $l2_top_name_v {*}$cpu_name_incdirs
			} error]} {
			        puts "WARNING: Using template file as $l2_top_name_v"
			        exec cp $l2_top_name_template $l2_top_name_v
			} else {
				puts "INFO: Vundef successful and generating $l2_top_name_v completed"
			}
		}
		if {[file exists $cluster_name_v] != 0} {
			puts "INFO: Start to generating $cluster_name_v"
			if {[catch {
			        exec $NDS_HOME/tools/bin/vundef -add-copyright -verilog $cluster_name_template -o $cluster_name_v {*}$cpu_name_incdirs
			} error]} {
			        puts "WARNING: Using template file as $cluster_name_v"
			        exec cp $cluster_name_template $cluster_name_v
			} else {
				puts "INFO: Vundef successful and generating $cluster_name_v completed"
			}
		}
	}

        puts "INFO: Start to generating $cpu_top_name_v"
        if {[catch {
                exec $NDS_HOME/tools/bin/vundef -add-copyright -verilog $cpu_top_name_template -o $cpu_top_name_v {*}$cpu_name_incdirs
        } error]} {
                puts "WARNING: Using template file as $cpu_top_name_v"
                exec cp $cpu_top_name_template $cpu_top_name_v
        } else {
		puts "INFO: Vundef successful and generating $cpu_top_name_v completed"
	}

        puts "INFO: Start to generating $cpu_name_v"
        if {[catch {
                exec $NDS_HOME/tools/bin/vundef -add-copyright -verilog $cpu_name_template -o $cpu_name_v {*}$cpu_name_incdirs
        } error]} {
                puts "WARNING: Using template file as $cpu_name_v"
                exec cp $cpu_name_template $cpu_name_v
        } else {
		puts "INFO: Vundef successful and generating $cpu_name_v completed"
	}

        puts "INFO: Start to generating $core_name_v"
        if {[catch {
                exec $NDS_HOME/tools/bin/vundef -add-copyright -verilog $core_name_template -o $core_name_v {*}$cpu_name_incdirs
        } error]} {
                puts "WARNING: Using template file as $core_name_v"
                exec cp $core_name_template $core_name_v
        } else {
		puts "INFO: Vundef successful and generating $core_name_v completed"
	}

	# Check NDS_CPU_MIMPID
	if {[catch {
		set nds_cpu_mimpid [selected NDS_CPU_MIMPID]
		regsub {\d+'h} $nds_cpu_mimpid {0x} nds_cpu_mimpid
		set ipxact_version_ext	[expr $nds_cpu_mimpid % 16]
		set ipxact_version_minor [expr [expr $nds_cpu_mimpid / 16] %16]
		set ipxact_version_major [expr $nds_cpu_mimpid / [expr 16 * 16]]
		set ipxact_version "${ipxact_version_major}.${ipxact_version_minor}.${ipxact_version_ext}"

	} error]} {
		puts "WARNING: could not identify CPU mimpid from config.inc"
	}

        if {[info exists ipxact_top_v]} {
	        puts "INFO: generating $ipxact_top_xml"
	        if {[catch {
			if {[info exists ipxact_version]} {
	                	exec $NDS_HOME/tools/bin/vlog2ipxact --ipxact-version $ipxact_version -verilog $ipxact_top_v -top-module $ipxact_top -ipxact $ipxact_top_xml
			} else {
	                	exec $NDS_HOME/tools/bin/vlog2ipxact -verilog $ipxact_top_v -top-module $ipxact_top -ipxact $ipxact_top_xml
			}
	        } error]} {
	                puts "WARNING: cannot generate IP-XACT file $ipxact_top_xml"
	        }
	} else { 
	        puts "INFO: generating $cpu_top_name_xml"
	        if {[catch {
			if {[info exists ipxact_version]} {
		                exec $NDS_HOME/tools/bin/vlog2ipxact --ipxact-version $ipxact_version -verilog $cpu_top_name_v -top-module $cpu_top_name -ipxact $cpu_top_name_xml
			} else {
		                exec $NDS_HOME/tools/bin/vlog2ipxact -verilog $cpu_top_name_v -top-module $cpu_top_name -ipxact $cpu_top_name_xml
			}
	        } error]} {
	                puts "WARNING: cannot generate IP-XACT file $cpu_top_name_xml"
	        }
	}
	puts "Finished customizing IP"

        return 1
        
}

proc gen_config {} {
	global value outfile_format
	global out_fp config_file_name nogui
	global option_list gen_config_inc gen_button_str delete_options
	global NDS_HOME ip_dir core_name

	if {$nogui} {
		set i 0
		while {$i < 2} {
			init_dependency_check

			set result [check_end_dependency_checker]
			if {$result == 0} {
				return $result
			} 
			set i [expr $i + 1]
		}
	}

	if {$gen_config_inc} {
	        set guarding_macro [regsub {.*[/\\]} $config_file_name ""]
	        set guarding_macro [string toupper $guarding_macro]
	        set guarding_macro [regsub -all {[^A-Z0-9]} $guarding_macro "_"]
	        set guarding_macro [regsub {(^[0-9])} $guarding_macro {_\1}]
	        if {[catch {
			set out_fp [open $config_file_name "w"]
	        } error]} {
	                puts $error
			exit 
	        }
	
		if {$outfile_format != "list"} {
	        	puts $out_fp "// created on [clock format [clock seconds]]"
			if {[info exists ip_dir] && [info exists core_name]} {
				set vc_core_v  "$NDS_HOME/andes_ip/$ip_dir/top/hdl/$core_name.v"

	        		set fp [open $vc_core_v "r"]
				while {![eof $fp]} {
					gets $fp data
					if {[regexp {localparam (MIMPID_(\w*)\s*=\s*\d+\'.[0-9a-f]+)} $data m0 m1]} {
						puts $out_fp "// $m1"
					}
				}
				close $fp
			}

	        	puts $out_fp [format {`ifdef %s} $guarding_macro]
	        	puts $out_fp {`else}
	        	puts $out_fp [format {`define %s} $guarding_macro]
	        	puts $out_fp {}
		}
        }

	foreach option_name $option_list {
		upvar #0 "option_${option_name}" option_var

		if {[info exists delete_options]} {
			if {[info exists delete_options($option_name)]} {
				continue
			}
		}
		if {![info exists option_var(to_define)]} {
			continue
		}

		if {$option_var(chk_button)} {
		        foreach var $option_var(chk_button_var) {
				upvar #0 "option_${option_name}_${var}" option_chk_var
				if {$option_chk_var(active) == 0} {
					continue
				}
				if {![selected "${option_name}_${var}"]} {
					continue
				}
				set value $var
				uplevel #0 $option_var(to_define)
        		}
		} else {
			set value [selected $option_name]
			uplevel #0 $option_var(to_define)
		}
	}

	if {$gen_config_inc} {
        	puts $out_fp {}
		if {$outfile_format != "list"} {
        		puts $out_fp [format {`endif // %s} $guarding_macro]
		}
		close $out_fp
	}
	if {!$nogui} {
		show_information "$gen_button_str is generated successfully"
	}
	return 1
}

proc gen_platform_config {} {
	global value
	global out_fp nogui
	global option_list delete_options
	global NDS_HOME 
	global subsystem edit_file_cache

        if {[regexp "ae350" $subsystem]} {
            puts "INFO: generating $NDS_HOME/andes_ip/ae350/top/hdl/include/ae350_config.vh"
        } 
        if {[regexp "ae250" $subsystem]} {
            puts "INFO: generating $NDS_HOME/andes_ip/ae250/top/hdl/include/ae250_config.vh"
        } 

	foreach option_name $option_list {
		upvar #0 "option_${option_name}" option_var

		if {[info exists delete_options]} {
			if {[info exists delete_options($option_name)]} {
				continue
			}
		}
		if {![info exists option_var(platform_config)]} {
			continue
		}

		if {$option_var(chk_button)} {
		        foreach var $option_var(chk_button_var) {
				upvar #0 "option_${option_name}_${var}" option_chk_var
				if {$option_chk_var(active) == 0} {
					continue
				}
				if {![selected "${option_name}_${var}"]} {
					continue
				}
				set value $var
				if {[catch {uplevel #0 $option_var(platform_config)} result]} {
					puts $result
				}
        		}
		} else {
			set value [selected $option_name]
			if {[catch {uplevel #0 $option_var(platform_config)} result]} {
				puts $result
			}
		}
	}

	foreach file_name [array names edit_file_cache] {
		if {[catch {
			set fp [open $file_name "w"]
		} err]} {
			puts $err
			continue
		}
		set content $edit_file_cache($file_name)
		for {set i 0} {$i < [llength $content]} {incr i} {
			set line [lindex $content $i]
			puts $fp $line
		}
		close $fp
	}
}

proc set_default_platform_config {} {
	global option_list delete_options

	foreach option_name $option_list {
		upvar #0 "option_${option_name}" option_var

		if {[info exists delete_options]} {
			if {[info exists delete_options($option_name)]} {
				continue
			}
		}
		if {![info exists option_var(platform_config)]} {
			continue
		}
		if {[regexp {BASE|RAMBRG_REGION_SIZE|NDS_RESET_VECTOR} $option_name]} {
	                set dval [selected_default $option_name]
	                set_opt_value $option_name $dval
			disable $option_name
		}
	}
}

proc enable_platform_config {} {
	global option_list delete_options

	foreach option_name $option_list {
		upvar #0 "option_${option_name}" option_var

		if {[info exists delete_options]} {
			if {[info exists delete_options($option_name)]} {
				continue
			}
		}
		if {![info exists option_var(platform_config)]} {
			continue
		}
		enable $option_name
	}
}

proc end_dependency_checker {name_list definition} {
	global parent_name child_option
	global end_dep_rules

	set replaced_definition $definition

	set end_dep_rules [lappend end_dep_rules $replaced_definition]
}

proc constraint {option_name name_list definition} {
	global parent_name parse_child child_option
	global top_dep_rules child_dep_rules
	global o nogui 

	set option_str $option_name
	#if {$parse_child > 0} {
	#	set option_str "$parent_name\_$option_name"
	#}

	upvar #0 "option_${option_str}" option_var
	set replaced_definition $definition


	if {![info exists option_var(constraint)]} {
		if {$parse_child > 0} {	
			set child_dep_rules [lappend child_dep_rules $replaced_definition]
		} else {
			set top_dep_rules [lappend top_dep_rules $replaced_definition]
		}
	}

	set option_var(constraint) $replaced_definition
}

proc show_msg_box {box_title box_msg box_icon} {
	global nogui log_fp

	if {!$nogui} {
		tk_messageBox   -title $box_title \
			 	-message $box_msg \
			 	-type "ok" \
			 	-icon $box_icon
	} else {
		if {[info exists log_fp]} {
			puts $log_fp "$box_title: $box_msg"
		} else {
			puts "$box_title: $box_msg"
		}
	}
}

proc highlighted {option_name} {
	global nogui
	upvar #0 "option_${option_name}" option_var	

	if {$nogui} {
		return 0
	} elseif {$option_var(hidden)} {
		return 0
	}

	if {$option_var(textinput)} {
		set background [$option_var(button_var) cget -background]
		if {$background == "red"} {
			return 1
		}
	}

	return 0
}

proc enable_highlight {option_name} {
	global nogui
	upvar #0 "option_${option_name}" option_var	

	if {$nogui} {
		return
	} elseif {$option_var(hidden)} {
		return
	}

	if {$option_var(textinput)} {
		$option_var(button_var) configure -background red
	}
}

proc disable_highlight {option_name} {
	global nogui
	upvar #0 "option_${option_name}" option_var	
	if {$nogui} {
		return
	} elseif {$option_var(hidden)} {
		return
	}

	if {$option_var(textinput)} {
		$option_var(button_var) configure -background white
	}
}

proc show_error_highlight {option_name msg} {
	global nogui
	upvar #0 "option_${option_name}" option_var
	
	if {!$nogui} {
		if {$option_var(textinput)} {
			enable_highlight $option_name 
		}
	}
	show_msg_box "Error: [selected_full_name $option_name]" $msg "error" 
}

proc show_error {msg} {
	show_msg_box "Error" $msg "error" 
}

proc show_warning {msg} {
	show_msg_box "Warning" $msg "warning" 
}

proc show_information {msg} {
	show_msg_box "Info" $msg "info" 
}

proc dec2hex {num} {
	return [format %x $num]
}

proc extract_hex_digits {num_str} {
	regsub {^(0x|(\d*')?h)} $num_str "" digits
	regsub -all {_} $digits "" digits
	return $digits
}

proc check_verilog_number {num_str digits_var {width_var ""} {base_var ""}} {
	upvar $digits_var digits

	if {$width_var != ""} {
		upvar $width_var width
	}
	if {$base_var != ""} {
		upvar $base_var base
	}
	set digits ""
	set width ""
	set base ""
	set result [regexp {^\s*([0-9]*)'([dhob])([0-9a-fA-F_]*)\s*$} $num_str m0 width base digits]
	regsub -all {_} $digits "" digits

	if {$width == ""} {
		set width 64
	}
	if {$base == "d"} {
		set result [regexp {^[0-9]*$} $digits]
	} elseif {$base == "b"} {
		set result [regexp {^[0-1]*$} $digits]
	} elseif {$base == "o"} {
		set result [regexp {^[0-7]*$} $digits]
	}

	if {!$result} {
		set width 0
		set digits 0
	}
	return $result
}

proc validate_verilog_hex {val} {
	set result [check_verilog_number $val digits width radix_type]
	if {$radix_type != "h"} {
		set result 0
	}
	return $result
}

proc delete_option {opt_name} {
	global delete_options

	set delete_options($opt_name) 1
}

proc add_option_value {opt_name val_list} {
	global add_del_option_values

        foreach opt_val $val_list {
                set add_del_option_values($opt_name,$opt_val) "add"
        }
}

proc fixed_option {opt_name opt_val} {
	global fixed_options 

	set fixed_options($opt_name) $opt_val
}

proc disable_option_value {opt_name val_list} {
	global add_del_option_values

        foreach opt_val $val_list {
                set add_del_option_values($opt_name,$opt_val) "del"
        }
}

proc set_option_default_value {opt_name opt_val} {
	global default_options

	set default_options($opt_name) $opt_val
}

proc hidden_option {opt_name} {
        upvar #0 "option_${opt_name}" option_var
        set option_var(hidden) "yes"
}

proc open_file {name} {
	if {[catch {
	        return [open $name "w"]
	} error]} {
	        puts "Can not write to file $name"
	        exit
	}
}

proc selected_default {option_name} {
	global all_options o fixed_options default_options

	if {[info exists disable_options($option_name)]} {
		return $default_options($option_name)
	}

	upvar #0 "option_${option_name}" option_var
	if {$option_var(chk_button)} {
		foreach chk_btn $option_var(chk_button_var) {
			if {$chk_btn != $option_name} {
				continue
			}
			foreach default_val $option_var(default) {
				if {$chk_btn == "${option_name}_$default_val"} {
					return $default_val
				}
			}
		}
		return ""
	} 

	if {[info exists option_var(default)]} {
		return $option_var(default)
	}
	return ""
}

proc selected_full_name {option_name} {
	upvar #0 "option_${option_name}" option_var

	if {[info exists option_var(full_name)]} {
		return $option_var(full_name)
	}
	return ""
}


proc create_gui {} {
	global nogui option_list title_list
	global disable_options delete_options add_options add_del_option_values

        # Dispatch customized option values to add_options/disable_options
        # Must be called before applying added/disabled option values
        foreach opt_name_val [array names add_del_option_values] {
                set opt_name    ""
                set opt_val     ""
                set opt_val_op  $add_del_option_values($opt_name_val)
                regexp {(.*),(.*)} $opt_name_val -> opt_name opt_val
                if {$opt_val_op == "add"} {
                        lappend add_options($opt_name) $opt_val
                } elseif {$opt_val_op == "del"} {
                        lappend disable_options($opt_name) $opt_val
                }
        }
	
	if {[info exists delete_options]} {
		foreach del_opt [array names delete_options] {
			set idx [lsearch $option_list $del_opt]
			set option_list [lreplace $option_list $idx $idx]
		}
	}

	if {[info exists add_options]} {
		foreach add_opt_name [array names add_options] {
                        if {[lsearch $option_list $add_options($add_opt_name)] < 0} {
                                upvar #0 "option_${add_opt_name}" option_var
                                set option_var(value) [lappend option_var(value) $add_options($add_opt_name)]
                        }
		}
	}

	if {$nogui} {
		foreach opt_name $option_list {
			if {[info exists disable_options($opt_name)]} {
				upvar #0 "option_${opt_name}" option_var
				set option_var(value) [delete_disable_value_from_list $opt_name $option_var(value)]
			} 
		}
		return
	}

	show_page_title

	set cnt 0
	foreach opt_name $option_list {
		# if opt_name is title
		if { [regexp {title.*} $opt_name]} {
			show_title [lindex $title_list $cnt] [lindex $title_list [expr $cnt + 1]]
			set cnt [expr $cnt + 2]
			continue
		}

		upvar #0 "option_${opt_name}" option_var
		if {$option_var(chk_button)} {
			show_design_checkoption $opt_name
		} else {
			show_design_option $opt_name
		}
	}

	bind all <Button-4> {event generate [focus -displayof %W] <MouseWheel> -delta  120}
	bind all <Button-5> {event generate [focus -displayof %W] <MouseWheel> -delta -120}
	bind all <MouseWheel> {eval [.config.vscroll cget -command] scroll [expr {%D/-120}] units}
}

proc move_to_index {subject} {
	global index index_count combo_text
	.config.canvas yview moveto [expr double($index($subject)) / double($index_count)]

	# clear textbox to force unhighlight text in textbox
	set combo_text ""

	# set title
	set combo_text $subject
	
}

proc get_title_index {subject} {
	global titles_only
	foreach title $titles_only {
		if {$title == $subject} {
			return 
		}
	}
	return -1
}

proc show_page_title {} {
	global cur_wheight subsystem cpu_name page_title_str product subproduct title_list
	global gen_button_str
	global combo_text index index_count titles_only

	set text_str ""
	if {[info exists product]} {
		if {[info exists subproduct]} {
			set text_str "Andes [string toupper $product]-[string toupper $subproduct] $page_title_str"
		} else {
			set text_str "Andes [string toupper $product] $page_title_str"
		}
	} else {
		set text_str "Andes $page_title_str"
	}
	wm title . $text_str

	frame .commands
	if {![info exists subsystem]} {
		set gen_button_str "config.inc"
	} else {
		set gen_button_str $cpu_name	
	}

	button .commands.gen -text "Generate $gen_button_str" -command gen_config_cmd 
	button .commands.save -text "Save" -command save_options_cmd
	button .commands.load -text "Load" -command load_options_cmd
	button .commands.quit -text "Quit" -command exit

	label .commands.text -text "Go to "

	set titles_only ""
	set title_length 0
	for {set i 0} {$i < [llength $title_list]} {incr i 2} {
		if {[string length [lindex $title_list $i]] > $title_length} {
			set title_length [string length [lindex $title_list $i]]
		}
		lappend titles_only [lindex $title_list $i]
	}
	set combo_text [lindex $titles_only 0]
	ttk::combobox .commands.cb -textvariable combo_text \
		 -values $titles_only -background yellow -justify left -state readonly -width $title_length
	bind .commands.cb <<ComboboxSelected>> {
		set subject [%W get]
		move_to_index $subject
	}

	button .commands.btnfirst -text "First" -command { global titles_only; move_to_index [lindex $titles_only 0] }
	button .commands.btnlast -text "Last" -command { global titles_only; move_to_index [lindex $titles_only end] }
	button .commands.btnprev -text "Prev" -command { 
		global titles_only combo_text index
		if {[lsearch $titles_only $combo_text] == 0} { return }
		set subject [lindex $titles_only [expr [lsearch $titles_only $combo_text] - 1]]
		move_to_index $subject
	}
	button .commands.btnnext -text "Next" -command {
		global titles_only combo_text index
		if {[lsearch $titles_only $combo_text] == [expr [llength $titles_only] - 1]} { return }
		set subject [lindex $titles_only [expr [lsearch $titles_only $combo_text] + 1]]
		move_to_index $subject
	}
	pack .commands.gen .commands.save .commands.load -side left -fill none
	pack .commands.quit .commands.btnlast .commands.btnnext \
		.commands.cb .commands.btnprev .commands.btnfirst .commands.text -side right -fill none
	pack .commands -fill x 

	frame .config
	pack .config -fill both -expand on

	set cur_wheight [expr [winfo reqheight .] + 1]
	scrollbar .config.vscroll -command {.config.canvas yview} 
	pack .config.vscroll -side right -fill y -expand off
	
	canvas .config.canvas -height 1 \
	        -background white \
	        -relief flat -borderwidth 0 \
	        -yscrollcommand {.config.vscroll set} \
	        -width [expr [winfo screenwidth .] * 1 / 2 + 10]
	pack .config.canvas -side left -fill y

	frame .config.canvas.o -background white 
	pack .config.canvas.o 
	.config.canvas create window 1 1 -anchor nw -window .config.canvas.o
}

proc set_display_platform_option {state} {
	global row platform_row display_platform_option

	set width [expr [winfo reqwidth .config.canvas.o] + 1]
	set height [expr [winfo reqheight .config.canvas.o] + 1]
	set button_row [expr $platform_row - 1]

	if {$state == "on" || ($state == "toggle" && $display_platform_option == "off")} {
		.config.canvas configure \
			        -width $width \
			        -scrollregion "0 0 $width $height"
		set display_platform_option "on"
		return
	}
	if {$state == "off" || ($state == "toggle" && $display_platform_option == "on")} {
		.config.canvas configure \
		        -width $width \
		        -scrollregion "0 0 $width  [expr $height - ([lindex [grid bbox .config.canvas.o 1 $row] 1] - [lindex [grid bbox .config.canvas.o 1 $platform_row] 1]) + 2]"
		set display_platform_option "off"
		return
	}
}


proc show_title {text_str color} {
	global row platform_row
	global index index_count


	# Output GUI
	label .config.canvas.o.r$row -text $text_str -anchor w -relief groove -bg $color
	# -sticky we: fill x (like pack -fill x)
	grid .config.canvas.o.r$row -sticky we 
	set row [expr $row + 1]
	
	set index($text_str) $index_count
	incr index_count
}

proc defocus {arg} {
	if {$arg == "Return"} {
		focus .config.canvas.o
	}
}

proc show_design_option {option_name} {
	global all_options row color_customer_option color_child_customer_option 
	global parse_child 
	global o col 
	global fixed_options disable_options

	upvar #0 "option_${option_name}" option_var
	set text_str $option_var(full_name)
	set color_option $color_customer_option

	if {[info exists fixed_options($option_name)]} {
		set option_var(hidden) "yes"
	}	

	if {$option_var(hidden) == "yes"} {
		return
	}

	if {$parse_child > 0} {
		set text_str "        $option_var(full_name)"
		set color_option $color_child_customer_option
	}

	# Output GUI
	# full name
	show_option_full_name $text_str "r" $color_option 

	if {[info exists disable_options($option_name)]} {
		set option_var(value) [delete_disable_value_from_list $option_name $option_var(value)]
	} 
	# value (button)
	set cnt 1
	set row_str "r"
	foreach {val} $option_var(value) {
		# textinput: entry
		if {$val == "textinput"} {
			# use "Courier 10 bold" fixed width font for text inputs
			entry .config.canvas.o.r$row.c2.t$cnt -textvar o($option_name) -bg $color_option -validate $option_var(validate) -vcmd $option_var(vcmd) -font "Courier 10 bold" -width 25 -background white
			set option_var(button_var) [lappend option_var(button_var) .config.canvas.o.$row_str$row.c2.t$cnt]
			set option_var(textinput) 1
			grid .config.canvas.o.$row_str$row.c2.t$cnt -row $row -column $cnt
			bind .config.canvas.o.r$row.c2.t$cnt <KeyPress> {defocus %K}
			bind .config.canvas.o.r$row.c2.t$cnt <FocusOut> init_dependency_check
			set cnt [expr $cnt + 1]

			continue
		}

		set option_var(textinput) 0
		# check show value 
		set show_text $val
		if {[info exists option_var(show_value)]} {
			foreach {show_val show_str} $option_var(show_value) {
				if {$show_val == $val} {
					set show_text $show_str
					break
				}
			}
		}
		if {$cnt % [expr $col + 1] == 0} {
			append row_str "r"
			show_option_full_name "" $row_str $color_option 
		}
		radiobutton .config.canvas.o.$row_str$row.c2.t$cnt -text $show_text -value $val -variable o($option_name) -bg $color_option -highlightthickness 0 

		set option_var(button_var) [lappend option_var(button_var) .config.canvas.o.$row_str$row.c2.t$cnt]
		.config.canvas.o.$row_str$row.c2.t$cnt configure -command init_dependency_check
		grid .config.canvas.o.$row_str$row.c2.t$cnt -row $row -column $cnt
		set cnt [expr $cnt + 1]
	}

	set row [expr $row + 1]
}

proc show_design_checkoption {option_name} {
	global all_options row color_customer_option color_child_customer_option 
	global parse_child
	global o col
	global fixed_options disable_options

	upvar #0 "option_${option_name}" option_var
	if {[info exists fixed_options($option_name)]} {
		set option_var(hidden) "yes"
	}	

	if {$option_var(hidden) == "yes"} {
		return
	}

	set text_str $option_var(full_name)
	set color_option $color_customer_option

	if {$parse_child > 0} {
		set text_str "        $option_var(full_name)"
		set color_option $color_child_customer_option
	}
	# Output GUI
	# full name
	show_option_full_name $text_str "r" $color_option 

	if {[info exists disable_options($option_name)]} {
		set option_var(value) [delete_disable_value_from_list $option_name $option_var(value)]
	} 

	set cnt 1
	set row_str "r"
	foreach {val} $option_var(value) {
		set o(${option_name}_$val) 0
		upvar #0 "option_${option_name}_$val" option_chk_var
		set option_chk_var(active) 1
		set option_chk_var(default) 0
		if {$cnt % [expr $col + 1] == 0} {
			append row_str "r"
			show_option_full_name "" $row_str $color_option 
		}

		checkbutton .config.canvas.o.$row_str$row.c2.t$cnt -text "$val" -offvalue 0 -onvalue $val -variable o(${option_name}_$val) -bg $color_option

		set option_var(button_var) [lappend option_var(button_var) .config.canvas.o.$row_str$row.c2.t$cnt]
		set option_chk_var(button_var) [lappend option_chk_var(button_var) .config.canvas.o.$row_str$row.c2.t$cnt]
		if {[info exists option_var(constraint)]} {
			.config.canvas.o.$row_str$row.c2.t$cnt configure -command init_dependency_check
		}
		grid .config.canvas.o.$row_str$row.c2.t$cnt -row $row -column $cnt
		set cnt [expr $cnt + 1]
	}

	set row [expr $row + 1]
}	

proc show_option_full_name {full_name row_str color_option} {
	global row
	global index_count

	frame .config.canvas.o.$row_str$row -bg white 
	grid .config.canvas.o.$row_str$row -sticky we -pady 1
	label .config.canvas.o.$row_str$row.c0 -bg $color_option
	label .config.canvas.o.$row_str$row.c1 -text $full_name -anchor w -bg $color_option -width 50 
	frame .config.canvas.o.$row_str$row.c2 -bg $color_option
	grid .config.canvas.o.$row_str$row.c0 -row $row -column 1
	grid .config.canvas.o.$row_str$row.c1 -row $row -column 2
	grid .config.canvas.o.$row_str$row.c2 -sticky we -row $row -column 3 -padx 1
	grid columnconfigure .config.canvas.o.$row_str$row .config.canvas.o.$row_str$row.c2 -weight 1

	incr index_count
}

proc aligned_size_name {mask_digits} {
	set size_digits [expr "(0xFFFFFFFFFFFFFFFF ^ 0x${mask_digits}) +1"]
	if [expr "$size_digits >= (1*1024*1024*1024)"] {
		set name "[expr "$size_digits / (1*1024*1024*1024)"] GiB"
	} elseif [expr "$size_digits >= (1*1024*1024)"] {
		set name "[expr "$size_digits / (1*1024*1024)"] MiB"
	} elseif [expr "$size_digits >= (1*1024)"] {
		set name "[expr "$size_digits / (1*1024)"] KiB"
	} else {
		set name "$size_digits B"
	}
	set name_digits [format "0x%x" $size_digits]
	return "$name ($name_digits)"
}

proc check_device_region_base_valid {base_name} {
	if {[selected NDS_ISA_BASE] == "rv64i"} {
		set device_addr_limit [selected NDS_BIU_ADDR_WIDTH]
	} else {
		set device_addr_limit 32
	}
	set device_addr_limit_top [expr {2 ** $device_addr_limit}]
	set addr_width [selected NDS_BIU_ADDR_WIDTH]
	set top_addr [expr {2 ** $addr_width}]

        set base_sval [selected $base_name]
	set format_valid [check_verilog_number $base_sval base_addr bit_length radix_type]

	regsub -all {_BASE$} $base_name "_MASK" mask_name
	set mask_sval [selected $mask_name]

	if {($mask_sval == "") || ($base_name == $mask_name)} {
		regsub -all {(_REGS)?_BASE} $base_name "" base_name_short
		switch -regexp $base_name_short {
			(PLIC|PLIC_SW)	{
				set size [expr {4 * 1024 * 1024}]
			}
			(PLMT|PLDM|NDS_L2C|NDS_DFS)	{
				set size [expr {1 * 1024 * 1024}]
			}
			(NDS_DEBUG_VEC)	{
				set size [expr {4 * 1024}]
			}
			(NDS_RESET_VECTOR) {
				set size 4
			}
			RAMBRG {
				set size [expr {[selected RAMBRG_REGION_SIZE] * 1024 * 1024}]
			}
			SLVPORT_ILM {
				set size [expr {[selected SLVPORT_SIZE] * 1024 * 1024 * [selected NDS_NHART]}]
			}
			SLVPORT_DLM {
				set size [expr {[selected NDS_DLM_SIZE] * 1024}]
			}
			(BMC|AHBDEC|APBBRG|SMU|UART|UART|PIT|WDT|RTC|GPIO|I2C|SPI|DMAC|SPI2) {
				set size [expr {1 * 1024 * 1024}]
			}
		}
		if {[info exists size]} {
			set mask_sval [format "64'h%x" [expr {0xFFFFFFFFFFFFFFFF - ($size - 1)}]]
		}
	}

	check_verilog_number $mask_sval mask_digits

	if {$mask_digits == ""} {
		set mask_digits "0"
	} 
	if {[expr "0x${mask_digits} == 0x0"] || [expr "((0xFFFFFFFFFFFFFFFF ^ 0x${mask_digits}) & 0x${base_addr}) == 0x0"]} {
		set base_addr_aligned 1
	} else {
		set base_addr_aligned 0
	}

        if {!$format_valid || $radix_type != "h"} {
                show_error "ERROR: $base_sval is not a valid hex number"
		set_opt_value $base_name [selected_default $base_name]
        } elseif {!$base_addr_aligned} {
		# two entries are invoved: BASE & MASK values.
		# so it is not helpful to simply restore the defaul value.
		if {![highlighted $base_name]} {
			show_error_highlight $base_name "The value $base_sval does not aligned to [aligned_size_name $mask_digits]"
		}
        } elseif {[expr "(0x${base_addr} & 0x${mask_digits}) >= ${top_addr}"]} {
		# two entries are invoved: BASE & MASK values.
		# so it is not helpful to simply restore the defaul value.
		if {![highlighted $base_name]} {
			show_error_highlight $base_name "The value $base_sval is to large, it should be less than or equal to [format "$addr_width'h%X" [expr "(${top_addr} - 1) & 0x${mask_digits}"]])"
		}
        } elseif {[expr "(0x${base_addr} & 0x${mask_digits}) >= ${device_addr_limit_top}"]} {
		# two entries are invoved: BASE & MASK values.
		# so it is not helpful to simply restore the defaul value.
		if {![highlighted $base_name]} {
			show_error_highlight $base_name "The value $base_sval is to large, [string toupper [selected NDS_PLATFORM]] platform does not supports allocate the devices space over than [aligned_size_name [format "%X" [expr {~($device_addr_limit_top - 1)}]]], it should be less than or equal to [format "$device_addr_limit'h%X" [expr "(${device_addr_limit_top} - 1) & 0x${mask_digits}"]])"
		}
        } else {
		if {[info exists size]} {
			if {[in_device_region [extract_hex_digits [selected $base_name]] $size]} {
		                disable_highlight $base_name
			}
		} else {
		                disable_highlight $base_name
		}
        }
}


proc check_device_region_mask_valid {mask_name} {
        set mask_sval [selected $mask_name]
	set format_valid [check_verilog_number $mask_sval mask_digits bit_length radix_type]

	regsub -all {_MASK$} $mask_name "_BASE" base_name

        if {!$format_valid || $radix_type != "h"} {
                show_error "ERROR: $mask_sval is not a valid hex number"
		set_opt_value $mask_name [selected_default $mask_name]
                return
        } elseif {[expr "0x$mask_digits == 0"]} {
                disable_highlight $base_name
                disable_highlight $mask_name
                return
        }

	scan $mask_digits {%x} val
	for {set i [expr "$bit_length - 1"]} {$i > 0} {incr i -1} {
		set mask [expr "0x1 << $i"]
		if {($val & $mask) == 0} {
			break
		}

		# convert to hex numbers for unsigned operations
		set val [expr "[format "0x%x" $val] - $mask"]
	}
	if {$val != 0} {
                show_error "ERROR: \"$mask_sval\" is not a valid region mask"
		set default_val [selected_default $mask_name]
		set_opt_value $mask_name $default_val
		check_verilog_number $default_val mask_digits
		if {[expr "0x$mask_digits == 0"]} {
			# base_name entry may have been highlighted before we restore mask value
                	disable_highlight $base_name
		}
        } else {
                disable_highlight $mask_name
        }
}


proc check_overlap {regions} {
	set nregions [llength $regions]
	for {set i 0} {$i < $nregions} {incr i} {
		set i_list [lindex $regions $i]
		set i_name [lindex $i_list 0]
		set i_base [lindex $i_list 1]
		set i_mask [lindex $i_list 2]
		set i_end  [expr "0x${i_base} | $i_mask"]
		for {set j [expr "$i+1"]} {$j < $nregions} {incr j} {
			set j_list [lindex $regions $j]
			set j_name [lindex $j_list 0]
			set j_base [lindex $j_list 1]
			set j_mask [lindex $j_list 2]
			set j_end  [expr "0x${j_base} | $j_mask"]
			if {![expr "0x${i_base} > $j_end || $i_end < 0x${j_base}"]} {
				puts "WARNING: ${i_name} and ${j_name} overlaps with each other: \[0x${i_base}-[format "0x%X" $i_end]] and \[0x${j_base}-[format "0x%X" $j_end]]"
			}
		}
	}
	return 1
}

proc check_overlap_error {regions} {
	set nregions [llength $regions]
	for {set i 0} {$i < $nregions} {incr i} {
		set i_list [lindex $regions $i]
		set i_name [lindex $i_list 0]
		set i_display_name [selected_full_name $i_name]
		set i_base [lindex $i_list 1]
		set i_mask [lindex $i_list 2]
		set i_end  [expr "0x${i_base} | $i_mask"]
		upvar #0 "option_${i_name}" option_var
		for {set j [expr "$i+1"]} {$j < $nregions} {incr j} {
			set j_list [lindex $regions $j]
			set j_name [lindex $j_list 0]
			set j_display_name [selected_full_name $j_name]
			set j_base [lindex $j_list 1]
			set j_mask [lindex $j_list 2]
			set j_end  [expr "0x${j_base} | $j_mask"]
			if {![expr "0x${i_base} > $j_end || $i_end < 0x${j_base}"]} {
				show_error_highlight $i_name "ERROR: ${i_display_name} and ${j_display_name} overlaps with each other: \[0x${i_base}-[format "0x%X" $i_end]] and \[0x${j_base}-[format "0x%X" $j_end]]"
				show_error_highlight $j_name "ERROR: ${j_display_name} and ${i_display_name} overlaps with each other: \[0x${j_base}-[format "0x%X" $j_end]] and \[0x${i_base}-[format "0x%X" $i_end]]"
				return 0
			}
		}
	}
	return 1
}

proc show_help {} {
        global font_size
        global argv0
        set prog_name [lindex [file split $argv0] end]

        puts "Usage: 
        $prog_name \[--help\] \[-fs size\] \[--load file.cfg \] \[--generate\]
Arguments:
        --help          : show this help message
        --load file.cfg : load file.cfg
        --generate      : disable GUI and do batch mode configuration
	--soft-config	: disable GUI and do batch mode configuration
        --debug         : show debug info
        -fs, --font_size: setup GUI font size, $font_size by default
Example: 
        $prog_name
        $prog_name -fs 8
        $prog_name --load xxx.cfg --generate
	$prog_name --soft-config A=B C=D
"

        exit 0
}

proc getopt {} {
	global font_size nogui sys_tcl opt_load_cfg_file opt_generate opt_softconfig soft_config_options opt_extra_tcl_file opt_debug

        for {set i 0} {$i < $::argc} {incr i} {
                set var [lindex $::argv $i]
                switch -regexp $var {
                        -+h(elp)?  {show_help}
                        -+f(ont_)?s(ize)? {
                                incr i
                                set font_size [lindex $::argv $i]
                        }
                        -+(load|file|f) {
                                incr i
                                set opt_load_cfg_file [lindex $::argv $i]
			}
                        -+(extra|x) {
                                incr i
                                set opt_extra_tcl_file [lindex $::argv $i]
			}
                        -+gen(erate)?  {
				set opt_generate 1
				set nogui 1
				set sys_tcl ""
			}
                        -+soft-config  {
				set opt_generate 1
				set opt_softconfig 1
				set nogui 1
				set sys_tcl ""
			}
			(.+)=(.+) {
				if {$opt_softconfig == 1} {	
					set input_opt [split [lindex $::argv $i] =]
					set opt_name	[lindex $input_opt 0]
					set opt_val	[lindex $input_opt 1]
					switch -regexp $opt_name {
						(BASE|MASK|DEBUG_VEC|RESET_VEC) {
							if [regexp -nocase (^h)(.+) $opt_val match(full) match(sub1) match(sub2)] {
								set opt_val "64'h$match(sub2)"
							}
						}
						(CPUID) {
							if [regexp -nocase (^h)(.+) $opt_val match(full) match(sub1) match(sub2)] {
								set opt_val "16'h$match(sub2)"
							}
						}
						(MIMPID) {
							if [regexp -nocase (^h)(.+) $opt_val match(full) match(sub1) match(sub2)] {
								set opt_val "32'h$match(sub2)"
							}
						}
					}
					set soft_config_options($opt_name) $opt_val
				} else {
					show_help
				}
			}
                        -+debug  {
				set opt_debug 1
			}
                }
        }
}

proc remapping_flist {} {
	global NDS_HOME
	# Currently, this remapping flow is for DDR3 wrapper only
	# When DDR3 is included:
	#   core with AHB should apply ae350h_flist.in
	#   core with AXI should apply ae350x_flist.in
	set ae350h_flist "$NDS_HOME/config_tools/ae350h_flist.in"
	set ae350x_flist "$NDS_HOME/config_tools/ae350x_flist.in"
	set flist       "$NDS_HOME/flists/flist.in"
	
	if {[selected NDS_BIU_BUS] == "axi"} {
		puts "INFO: remapping flist.in"
		exec cp $ae350x_flist $flist
	}
	if {[selected NDS_BIU_BUS] == "ahb"} {
		puts "INFO: remapping flist.in"
		exec cp $ae350h_flist $flist
	}
}

proc set_subsystem {} {
    global subsystem subsystem_incdirs ip_dir NDS_HOME
    if {[selected NDS_PLATFORM] == "ae350"} {
        set subsystem "ae350_cpu_subsystem"
        set subsystem_incdirs "+incdir+$NDS_HOME/andes_ip/$ip_dir/top/hdl \
                               +incdir+$NDS_HOME/andes_ip/ae350/top/hdl/include \
                               +incdir+$NDS_HOME/andes_ip/ae350/define \
			       +incdir+$NDS_HOME/andes_ip/peripheral_ip/atcmstmux100_1/hdl/include \
	                       +incdir+$NDS_HOME/andes_ip/peripheral_ip/atcmstmux300_1/hdl/include \
                               +incdir+$NDS_HOME/andes_ip/peripheral_ip/atcbusdec350/hdl/include"
    }
    if {[selected NDS_PLATFORM] == "ae250"} {
        set subsystem "ae250_cpu_subsystem"
        set subsystem_incdirs "+incdir+$NDS_HOME/andes_ip/$ip_dir/top/hdl \
                               +incdir+$NDS_HOME/andes_ip/ae250/top/hdl/include \
                               +incdir+$NDS_HOME/andes_ip/ae250/define \
			       +incdir+$NDS_HOME/andes_ip/peripheral_ip/atcmstmux100_1/hdl/include"
    }
}

proc remapping_files {} {
    global subsystem subsystem_incdirs ip_dir NDS_HOME
    set ae250_platform "$NDS_HOME/config_tools/ae250/ae250_platform.h"
    set ae350_platform "$NDS_HOME/config_tools/ae350/ae350_platform.h"
    set platform       "$NDS_HOME/andes_vip/patterns/samples/include/platform.h"

    set ae250_flist    "$NDS_HOME/config_tools/ae250/fpu_ae250_flist.in"
    set ae350_flist    "$NDS_HOME/config_tools/ae350/fpu_ae350_flist.in"
    set flist          "$NDS_HOME/flists/flist.in"

    set ae250_makevars "$NDS_HOME/config_tools/ae250/ae250_Make.vars"
    set ae350_makevars "$NDS_HOME/config_tools/ae350/ae350_Make.vars"
    set makevars       "$NDS_HOME/andes_vip/patterns/samples/Make.vars"

    set ae250_xmr      "$NDS_HOME/config_tools/ae250/xmr_ae250.vh"
    set ae350_xmr      "$NDS_HOME/config_tools/ae350/xmr_ae350.vh"
    set xmr            "$NDS_HOME/testbench/xmr.vh"

    set ae250_core_env "$NDS_HOME/config_tools/ae250/ae250_core_env.tcl"
    set ae350_core_env "$NDS_HOME/config_tools/ae350/ae350_core_env.tcl"
    set core_env       "$NDS_HOME/andes_ip/$ip_dir/syn/core_env.tcl"

    set ae250_deep     "$NDS_HOME/config_tools/ae250/ae250_test_deep_sleep/"
    set ae350_deep     "$NDS_HOME/config_tools/ae350/ae350_test_deep_sleep/"
    set deep           "$NDS_HOME/andes_vip/patterns/samples/test_deep_sleep"

    set ae250_light    "$NDS_HOME/config_tools/ae250/ae250_test_light_sleep/"
    set ae350_light    "$NDS_HOME/config_tools/ae350/ae350_test_light_sleep/"
    set light          "$NDS_HOME/andes_vip/patterns/samples/test_light_sleep"

    # Synthesis script
    set ae250_syn_dc   "$NDS_HOME/config_tools/ae250/syn/ae250_dc.sh"
    set ae350_syn_dc   "$NDS_HOME/config_tools/ae350/syn/ae350_dc.sh"
    set syn_dc	       "$NDS_HOME/andes_ip/peripheral_ip/design_flow/samples/run_dc.sh"
    
    set ae250_syn_env  "$NDS_HOME/config_tools/ae250/syn/ae250_env.tcl"
    set ae350_syn_env  "$NDS_HOME/config_tools/ae350/syn/ae350_env.tcl"
    set syn_env	       "$NDS_HOME/andes_ip/peripheral_ip/design_flow/samples/ip_env.tcl"
    
    set ae250_syn_rc   "$NDS_HOME/config_tools/ae250/syn/ae250_rc.sh"
    set ae350_syn_rc   "$NDS_HOME/config_tools/ae350/syn/ae350_rc.sh"
    set syn_rc         "$NDS_HOME/andes_ip/peripheral_ip/design_flow/samples/run_rc.sh"
    
    set ae250_syn_genus	"$NDS_HOME/config_tools/ae250/syn/ae250_genus.sh"
    set ae350_syn_genus "$NDS_HOME/config_tools/ae350/syn/ae350_genus.sh"
    set syn_genus       "$NDS_HOME/andes_ip/peripheral_ip/design_flow/samples/run_genus.sh"

    # AE250 ONLY patterns
    set ae250_dmac100  "$NDS_HOME/config_tools/ae250/ae250_test_atcdmac100/"
    set dmac100        "$NDS_HOME/andes_vip/patterns/samples/test_atcdmac100/"

    set ae250_bmc200   "$NDS_HOME/config_tools/ae250/ae250_test_atcbmc200/"
    set bmc200         "$NDS_HOME/andes_vip/patterns/samples/test_atcbmc200/"

    # AE350 ONLY patterns
    set ae350_dmac300  "$NDS_HOME/config_tools/ae350/ae350_test_atcdmac300/"
    set dmac300        "$NDS_HOME/andes_vip/patterns/samples/test_atcdmac300/"

    set ae350_bmc300   "$NDS_HOME/config_tools/ae350/ae350_test_atcbmc300/"
    set bmc300         "$NDS_HOME/andes_vip/patterns/samples/test_atcbmc300/"


    if {$subsystem == "ae250_cpu_subsystem"} {
        puts "INFO: remove unused patterns"
        exec rm -rf $dmac100 $bmc200 $dmac300 $bmc300 $deep $light
        puts "INFO: remapping platform.h"
        exec cp $ae250_platform $platform
        puts "INFO: remapping flist"
        exec cp $ae250_flist    $flist
        puts "INFO: remapping Make.vars"
        exec cp $ae250_makevars $makevars
        puts "INFO: remapping xmr.vh"
        exec cp $ae250_xmr      $xmr
        puts "INFO: remapping core_env.tcl"
        exec cp $ae250_core_env $core_env
        puts "INFO: remapping test_deep_sleep"
        exec cp $ae250_deep     $deep  -r
        puts "INFO: remapping test_light_sleep"
        exec cp $ae250_light    $light -r
        puts "INFO: remapping test_atcdmac100"
        exec cp $ae250_dmac100  $dmac100 -r
        puts "INFO: remapping test_atcbmc200"
        exec cp $ae250_bmc200   $bmc200  -r
        puts "INFO: remapping synthesis script"
        exec cp $ae250_syn_dc		$syn_dc
        exec cp $ae250_syn_env		$syn_env
        exec cp $ae250_syn_rc		$syn_rc
        exec cp $ae250_syn_genus	$syn_genus
    }
    if {$subsystem == "ae350_cpu_subsystem"} {
        puts "INFO: remove unused patterns"
        exec rm -rf $dmac100 $bmc200 $dmac300 $bmc300 $deep $light
        puts "INFO: remapping platform.h"
        exec cp $ae350_platform $platform
        puts "INFO: remapping flist"
        exec cp $ae350_flist    $flist
        puts "INFO: remapping Make.vars"
        exec cp $ae350_makevars $makevars
        puts "INFO: remapping xmr.vh"
        exec cp $ae350_xmr      $xmr
        puts "INFO: remapping core_env.tcl"
        exec cp $ae350_core_env $core_env
        puts "INFO: remapping test_deep_sleep"
        exec cp $ae350_deep     $deep    -r
        puts "INFO: remapping test_light_sleep"
        exec cp $ae350_light    $light   -r
        puts "INFO: remapping test_atcdmac300"
        exec cp $ae350_dmac300  $dmac300 -r
        puts "INFO: remapping test_atcbmc300"
        exec cp $ae350_bmc300   $bmc300  -r
        puts "INFO: remapping synthesis script"
        exec cp $ae350_syn_dc		$syn_dc
        exec cp $ae350_syn_env		$syn_env
        exec cp $ae350_syn_rc		$syn_rc
        exec cp $ae350_syn_genus	$syn_genus
    }

	set NDS_PLATFORM_UCASE [string toupper [selected NDS_PLATFORM]]
	set files [glob $NDS_HOME/andes_vip/patterns/samples/test_*/Makefile]
	set replace_cmd [format {s/\(AE350\|AE250\)/%s/g} $NDS_PLATFORM_UCASE]
	foreach file $files {
		exec sed --in-place --follow-symlinks $replace_cmd $file
	}
}

proc file_grep {pattern file_name} {
	set status [catch {exec grep $pattern $file_name} result]
	if {$status != 0} {
		set result ""
	}
	return $result
}

proc edit_cheader {cmacro value} {
	global NDS_HOME subsystem multiplatform
	set config_vh ""
	
        if {[regexp "ae350" $subsystem]} {
		set c_header $NDS_HOME/andes_vip/patterns/samples/include/ae350.h
	}
        if {[regexp "ae250" $subsystem]} {
		set c_header $NDS_HOME/andes_vip/patterns/samples/include/ae250.h
	}
	if {$multiplatform == "off"} {
		set c_header $NDS_HOME/andes_vip/patterns/samples/include/platform.h
	}

	if {$c_header == ""} {
		return
	}

	set value [vlog2c_number $value]
	edit_define $cmacro $value  $c_header
}

proc edit_platform_config {macro value} {
	global NDS_HOME subsystem
	set config_vh ""
        if {[regexp "ae350" $subsystem]} {
		set config_vh $NDS_HOME/andes_ip/ae350/top/hdl/include/ae350_config.vh
	}
        if {[regexp "ae250" $subsystem]} {
		set config_vh $NDS_HOME/andes_ip/ae250/top/hdl/include/ae250_config.vh
	}

	if {$config_vh == ""} {
		return
	}
	
	edit_define $macro $value $config_vh

}

proc edit_apb_config {macro value} {
	global NDS_HOME subsystem
	set config_vh ""
        if {[regexp "ae350" $subsystem]} {
		set config_vh $NDS_HOME/andes_ip/ae350/top/hdl/include/ae350_config.vh
		set PREFIX "AE350"
	}
        if {[regexp "ae250" $subsystem]} {
		set config_vh $NDS_HOME/andes_ip/ae250/top/hdl/include/ae250_config.vh
		set PREFIX "AE250"
	}

	if {$config_vh == ""} {
		return
	}
	
	set platform_macro "${PREFIX}_$macro"
	edit_define $platform_macro $value  $config_vh
}

proc edit_apb_base {vmacro cmacro value} {
	global NDS_HOME subsystem multiplatform
	set config_vh ""
        if {[regexp "ae350" $subsystem]} {
		set config_vh $NDS_HOME/andes_ip/ae350/define/atcapbbrg100_config.vh
		set c_header $NDS_HOME/andes_vip/patterns/samples/include/ae350.h
	}
        if {[regexp "ae250" $subsystem]} {
		set config_vh $NDS_HOME/andes_ip/ae250/define/atcapbbrg100_config.vh
		set c_header $NDS_HOME/andes_vip/patterns/samples/include/ae250.h
	}
	if {$multiplatform == "off"} {
		set c_header $NDS_HOME/andes_vip/patterns/samples/include/platform.h
	}

	if {$config_vh == ""} {
		return
	}
	set offset_value [string range $value end-6 end]
	regsub {\d+'h} $offset_value {} offset_value
	set offset_value "`ATCAPBBRG100_ADDR_DECODE_WIDTH'h${offset_value}"
	edit_define $vmacro $offset_value $config_vh

	set value [vlog2c_number $value]
	edit_define $cmacro $value  $c_header
}

proc edit_smu_config {macro value} {
	global NDS_HOME subsystem
	set config_vh ""
        if {[regexp "ae350" $subsystem]} {
		if {[file exists "$NDS_HOME/andes_ip/peripheral_ip/atcsmu100/hdl/include/atcsmu100_const.vh"]} {
			set config_vh $NDS_HOME/andes_ip/peripheral_ip/atcsmu100/hdl/include/atcsmu100_const.vh
		} else {
			if {[file exists "$NDS_HOME/andes_ip/ae350/define/sample_ae350_smu_const.vh"]} {
				set config_vh $NDS_HOME/andes_ip/ae350/define/sample_ae350_smu_const.vh
			} else {
				set config_vh $NDS_HOME/andes_ip/ae350/define/ae350_smu_const.vh
			}
		}
		set vmacro $macro
	}
        if {[regexp "ae250" $subsystem]} {
		set config_vh $NDS_HOME/andes_ip/ae250/define/ae250_smu_const.vh
		set vmacro "AE250_$macro"
	}

	if {$config_vh == ""} {
		return
	}

	edit_define $vmacro $value $config_vh
}

if {![info exists nogui]} {
	global nogui gen_config_inc
	set nogui 0
	set gen_config_inc 1
	getopt

	if {!$nogui} {
		 # ----------- window layout --------------
		if {[catch {wm withdraw . }]} {
			puts "\nPlease setenv DISPLAY"
			exit 1
		}

		# setup font size
		foreach fontname [font names] {
			font configure $fontname -size $font_size
		 }
	}
                         
}

if {![info exists config_file_name] && $gen_config_inc} {
	set config_file_name "config.inc"
}

if {$nogui && ![info exists sys_tcl]} {
	puts stderr "ERROR: \$sys_tcl is not defined!"
	exit 1
}
if {$gen_config_inc && [info exists sys_tcl]} {
	if {$sys_tcl != ""} {
		puts "using softconfig file $sys_tcl"
	}
}

if {![info exists outfile_format]} {
	set outfile_format "def"
}

set col 8

page_title Softcore v13.0.0 Configure

design_option NDS_CPUID {} {
    full_name       {CPUID}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         16'h0a45
    hidden          yes
    to_define       {
        echo {`define NDS_CPUID   $value}
    }
}

design_option NDS_CPU_MIMPID {} {
    full_name       {CPU MIMPID}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         32'h00000d00
    hidden          yes
    to_define       {
        echo {`define NDS_CPU_MIMPID   $value}
    }
    post_randomize {
        set dval [selected_default NDS_CPU_MIMPID]
	set_opt_value NDS_CPU_MIMPID $dval
    }
}

design_option NDS_PLATFORM {} {
    full_name    {Platform}
    value        {ae350}
    default       ae350
    to_define    {
    }
}


design_option NDS_CFG_OPT {} {
    full_name {Andes String Conversion}
    value     {no}
    default   no
    hidden    yes
    to_define {
        echo {`define NDS_CFG_ADIQ       1}
        echo {`define NDS_CFG_DP_SUPPORT 2}
        echo {`define NDS_CFG_HP_SUPPORT 0}
        echo {`define NDS_CFG_SP_SUPPORT 1}
        echo {`define NDS_CFG_VDIQ       0}
        echo {`define NDS_CFG_AHB        1}
        echo {`define NDS_CFG_AHBLITE    1}
        echo {`define NDS_CFG_AXI        0}
        echo {`define NDS_CFG_BARE       0}
        echo {`define NDS_CFG_BTB128     3}
        echo {`define NDS_CFG_BTB256     4}
        echo {`define NDS_CFG_BTB512     5}
        echo {`define NDS_CFG_BTB32      1}
        echo {`define NDS_CFG_BTB64      2}
        echo {`define NDS_CFG_DATA       0}
        echo {`define NDS_CFG_DP         2}
        echo {`define NDS_CFG_ECC        2}
        echo {`define NDS_CFG_FAST       0}
        echo {`define NDS_CFG_INSTR      1}
        echo {`define NDS_CFG_NO         0}
        echo {`define NDS_CFG_NONE       0}
        echo {`define NDS_CFG_PARITY     1}
        echo {`define NDS_CFG_RADIX16    3}
        echo {`define NDS_CFG_RADIX2     1}
        echo {`define NDS_CFG_RADIX256   4}
        echo {`define NDS_CFG_RADIX4     2}
        echo {`define NDS_CFG_RAM        0}
        echo {`define NDS_CFG_RV32E      0}
        echo {`define NDS_CFG_RV32I      1}
        echo {`define NDS_CFG_RV64I      2}
        echo {`define NDS_CFG_SP         1}
        echo {`define NDS_CFG_STATIC     6}
        echo {`define NDS_CFG_SV32       1}
        echo {`define NDS_CFG_SV39       2}
        echo {`define NDS_CFG_SV48       3}
        echo {`define NDS_CFG_YES        1}
    }
}


design_option NDS_CLUSTER_SUPPORT {} {
    full_name    {Cluster Support}
    value        {no yes}
    default      no
    to_define    {
	echo {`define NDS_CLUSTER_SUPPORT "$value"}
        if {$value == "yes"} {
	    echo {`define NDS_CLUSTER_SUPPORT_INT 1}
            echo {`define NDS_IO_CLUSTER}
            echo {`define NDS_IO_L2}
	} else {
	    echo {`define NDS_CLUSTER_SUPPORT_INT 0}
	}

    }
}

design_option NDS_NHART {} {
    full_name	{Number of Processor Cores}
    value	{1 2 4 8}
    default	1
    to_define	{
	echo {`define NDS_NCORE_CLUSTER $value}
        if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
		echo {`define NDS_NHART $value}
		echo {`define NDS_IO_HART0}
		if {$value > 1} {
			echo {`define NDS_IO_HART1}
		}
		if {$value > 2} {
			echo {`define NDS_IO_HART2}
		}
		if {$value > 3} {
			echo {`define NDS_IO_HART3}
		}
		if {$value == 8} {
			echo {`define NDS_IO_HART4}
			echo {`define NDS_IO_HART5}
			echo {`define NDS_IO_HART6}
			echo {`define NDS_IO_HART7}
		}
	}
    }
}

design_option NDS_CORE_BRG_TYPE {} {
    full_name    {Core Interface}
    value        {0 1 2}
    default        0
    show_value   {
        0    {low-latency}
        1    {synchronous}
        2    {asynchronous}
    }
    to_define    {
        echo {`define NDS_CORE_BRG_TYPE $value}
        if {$value == 2} {
            echo {`define NDS_IO_CORE_BRG_ASYNC}
        }
    }
}

design_option NDS_CORE_TO_L2_SYNC_STAGE {} {
    full_name    {Core to L2 Clock Sync Stage}
    value        {2 3}
    default      2
    hidden       yes
    show_value   {
        2    {2}
        3    {3}
    }
    to_define    {
        echo {`define NDS_CORE_TO_L2_SYNC_STAGE $value}
    }
}

design_option NDS_L2_TO_CORE_SYNC_STAGE {} {
    full_name    {L2 to Core Clock Sync Stage}
    value        {2 3}
    default      2
    hidden       yes
    show_value   {
        2    {2}
        3    {3}
    }
    to_define    {
        echo {`define NDS_L2_TO_CORE_SYNC_STAGE $value}
    }
}

design_option NDS_L2_DATA_WIDTH {} {
    full_name    {L2 Data Width}
    value        {64 128 256}
    default      64
    hidden       yes
    to_define    {
        echo {`define NDS_L2_DATA_WIDTH $value}
    }
}


design_option NDS_L2C_CACHE_SIZE_KB {} {
	full_name	{L2C Cache Size}
        value		{0 128 256 512 1024 2048 4096 8192}
        show_value      {
                        0       {0 KiB}
                        128     {128 KiB}
                        256     {256 KiB}
                        512     {512 KiB}
                        1024    {1 MiB}
                        2048    {2 MiB}
                        4096    {4 MiB}
                        8192    {8 MiB}
        }
        default	256
        to_define	{
		echo {`define NDS_L2C_CACHE_SIZE_KB	$value}
                if {[selected NDS_L2C_CACHE_SIZE_KB] != 0} {
		    echo {`define NDS_IO_WPT}
		    echo {`define NDS_IO_L2C}
                    if {[selected NDS_L2C_BANKS] == 4} {
                        echo {`define NDS_IO_L2C_4BANK}
	            }
	            if {[selected NDS_RAM_CTRL_IN] == "yes"} {
	                echo {`define NDS_IO_WPT_RAM_CTRL_IN}
	                echo {`define NDS_IO_L2C_TAG_RAM_CTRL_IN}
	                echo {`define NDS_IO_L2C_DATA_RAM_CTRL_IN}
                        if {[selected NDS_L2C_BANKS] == 4} {
                            echo {`define NDS_IO_L2C_4BANK_TAG_RAM_CTRL_IN}
                            echo {`define NDS_IO_L2C_4BANK_DATA_RAM_CTRL_IN}
                        }
	            }
	            if {[selected NDS_RAM_CTRL_OUT] == "yes"} {
	                echo {`define NDS_IO_WPT_RAM_CTRL_OUT}
	                echo {`define NDS_IO_L2C_TAG_RAM_CTRL_OUT}
	                echo {`define NDS_IO_L2C_DATA_RAM_CTRL_OUT}
                        if {[selected NDS_L2C_BANKS] == 4} {
                            echo {`define NDS_IO_L2C_4BANK_TAG_RAM_CTRL_OUT}
                            echo {`define NDS_IO_L2C_4BANK_DATA_RAM_CTRL_OUT}
                        }
	            }
                }
	}
        post_randomize {
                if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
                        if {[selected NDS_L2C_CACHE_SIZE_KB] == 0} {
                                set_opt_value NDS_L2C_CACHE_SIZE_KB 128
                        }
                }
        }
}


design_option NDS_L2C_ECC_TYPE {} {
        full_name       {L2C Soft Error Protection}
        value           {0 1}
        show_value      {
                        0       {none}
                        1       {ecc}
        }
        default         0
        to_define	{
		if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
			echo {`define NDS_L2C_ECC_TYPE $value}
		}
	}
}

design_option NDS_L2C_REG_BASE {} {
        full_name       {L2C Register Base}
        value           {textinput}
        validate        {key}
        vcmd            {validate_verilog_hex %P}
        default         64'h00000000E0500000
        to_define       {
		echo {`define NDS_L2C_REG_BASE $value}
	}
        post_randomize {
                set dval [selected_default NDS_L2C_REG_BASE]
                set_opt_value NDS_L2C_REG_BASE $dval
        }
}

design_option NDS_L2C_HR_DEPTH {} {
	full_name	{Number of L2C Handling Registers}
        value		{16 32 64}
        default		32
	hidden		yes
        to_define	{
		if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
			echo {`define NDS_L2C_HR_DEPTH	$value}
		}
	}
}

design_option NDS_L2C_BANKS {} {
	full_name	{Number of L2C Banks}
        value		{2 4}
        default		2
        to_define	{
		if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
			echo {`define NDS_L2C_BANKS	$value}
		}
	}
}

design_option NDS_L2C_HPM_NUM {} {
	full_name	{Number of L2C Performance Counters}
        value		{0 2}
        default		0
        to_define	{
		if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
			echo {`define NDS_L2C_HPM_NUM	$value}
		}
	}
}

design_option NDS_L2C_TAG_RAM_AW {} {
        full_name       {L2C Tag RAM Depth}
        value           {5 6 7 8 9 10 11 12}
        show_value      {
            5       {32}
            6       {64}
            7       {128}
            8       {256}
            9       {512}
            10      {1024}
            11      {2048}
            12      {4096}
        }
        default         6
        to_define       {
                if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
		    define_l2c_tag_ram_width
                }
        }
}

design_option NDS_L2C_DATA_RAM_AW {} {
        full_name       {L2C Data RAM Depth}
        value           {9 10 11 12 13 14 15 16}
        show_value      {
            9       {512}
            10      {1024}
            11      {2048}
            12      {4096}
            13      {8192}
            14      {16384}
            15      {32768}
            16      {65536}
        }
        default         10
        to_define       {
                if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
		    define_l2c_data_ram_width
                }
        }
}


design_option NDS_L2C_TAG_RAM_SETUP_CYCLE {} {
	full_name	{L2C Tag RAM Setup Cycle}
        value		{1 2}
        default		1
        to_define	{
		if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
			echo {`define NDS_L2C_TAG_RAM_SETUP_CYCLE	$value}
		}
	}
}

design_option NDS_L2C_DATA_RAM_SETUP_CYCLE {} {
	full_name	{L2C Data RAM Setup Cycle}
        value		{1 2}
        default		1
        to_define	{
		if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
			echo {`define NDS_L2C_DATA_RAM_SETUP_CYCLE	$value}
        		echo {`define NDS_L2C_DATA_RAM_SETUP_CYCLE_$value}
		}
	}
}

design_option NDS_L2C_DATA_RAM_OUTPUT_CYCLE {} {
	full_name	{L2C Data RAM Output Cycle}
        value		{2 3}
        default		2
        to_define	{
		if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
			echo {`define NDS_L2C_DATA_RAM_OUTPUT_CYCLE	$value}
		}
	}
}

design_option NDS_CM_SUPPORT {} {
	full_name	{Coherence Manager Support}
        value		{no yes}
        default		no
	hidden		yes
        to_define	{
		print_integer_macro NDS_CM_SUPPORT $value
	}
}

design_option NDS_IOCP_NUM {} {
	full_name	{I/O Coherence Port (IOCP) Support}
        value		{0 1}
        default		0
        to_define	{
		echo {`define NDS_IOCP_NUM $value}
		if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
		        if {$value >= 1} {echo {`define NDS_IO_COHERENCE}}
		}
	}
}

design_option NDS_IOCP_ASYNC_SUPPORT {} {
	full_name	{IOCP Clock}
	value	{0 1}
	default	0
	hidden	yes
	show_value	{
		0	{synchronous}
		1	{asynchronous}
	}
	to_define	{
		if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
		    echo {`define NDS_IOCP_ASYNC_SUPPORT $value}
		    if {$value == 1} {
                         if {[selected NDS_IOCP_NUM] > 0} {echo {`define NDS_IO_COHERENCE_ASYNC}}
		    } else {
                         if {[selected NDS_IOCP_NUM] > 0} {echo {`define NDS_IO_COHERENCE_SYNC}}
                    }
		}
	}
}

design_option NDS_IOCP_ID_WIDTH {} {
    full_name    {IOCP ID Width}
    value        {4 5 6 7 8 9 10 11 12 13 14 15 16}
    default      10
    to_define    {
        echo {`define NDS_IOCP_ID_WIDTH    $value}
    }
}

design_option NDS_IOCP_TOTAL_OUTSTANDING {} {
    full_name    {Number of IOCP Outstanding Transactions}
    value        {1 2 4 8 16 32}
    default      16
    to_define    {
        echo {`define NDS_IOCP_TOTAL_OUTSTANDING    $value}
        if {$value == 1} {
            echo {`define NDS_IOCP_OUTSTANDING    1}
            echo {`define NDS_IOCP_CHANNEL_NUM    1}
	}
        if {$value == 2} {
            echo {`define NDS_IOCP_OUTSTANDING    1}
            echo {`define NDS_IOCP_CHANNEL_NUM    2}
	}
        if {$value == 4} {
            echo {`define NDS_IOCP_OUTSTANDING    1}
            echo {`define NDS_IOCP_CHANNEL_NUM    4}
	}
        if {$value == 8} {
            echo {`define NDS_IOCP_OUTSTANDING    2}
            echo {`define NDS_IOCP_CHANNEL_NUM    4}
	}
        if {$value == 16} {
            echo {`define NDS_IOCP_OUTSTANDING    4}
            echo {`define NDS_IOCP_CHANNEL_NUM    4}
	}
        if {$value == 32} {
            echo {`define NDS_IOCP_OUTSTANDING    8}
            echo {`define NDS_IOCP_CHANNEL_NUM    4}
	}
    }
}

title ISA

design_option NDS_ISA_BASE {} {
    full_name    {ISA base}
    value        {rv32e rv32i rv64i}
    default      rv64i
    to_define    {
        echo {`define NDS_ISA_BASE    "$value"}
	print_integer_macro NDS_ISA_BASE $value
    }
}

design_option NDS_RVC_SUPPORT {} {
    full_name    {RVC support}
    value        {no yes}
    default      no
    to_define    {
        echo {`define NDS_RVC_SUPPORT    "$value"}
	print_integer_macro NDS_RVC_SUPPORT $value
    }
}

design_option NDS_RVB_SUPPORT {} {
    full_name    {RVB support}
    value        {no yes}
    default      no
    to_define    {
        echo {`define NDS_RVB_SUPPORT    "$value"}
        if {$value == "yes"} {
	    echo {`define NDS_RVB_SUPPORT_INT 1}
        } else {
	    echo {`define NDS_RVB_SUPPORT_INT 0}
	}
    }
}

design_option NDS_RVA_SUPPORT {} {
    full_name    {RISC-V Atomic Instruction Extension}
    value        {no yes}
    default      no
    to_define    {
        echo {`define NDS_RVA_SUPPORT    "$value"}
        if {$value == "yes"} {
	    echo {`define NDS_RVA_SUPPORT_INT 1}
        } else {
	    echo {`define NDS_RVA_SUPPORT_INT 0}
	}
    }
}

design_option NDS_PUSHPOP_TYPE {} {
    full_name    {Andes CoDense2 Extension}
    value        {0 1 2}
    default      0
    show_value   {
        0   {none}
        1   {16-bit PUSH/POP}
        2   {32-bit PUSH/POP}
    }
    to_define    {
        echo {`define NDS_PUSHPOP_TYPE    $value}
    }
}

design_option NDS_FPU_TYPE {} {
    full_name    {RISC-V Floating-Point Extension}
    value        {none sp dp}
    default      none
    show_value   {
        sp    {single precision}
        dp    {double+single precision}
    }
    to_define    {
        echo {`define NDS_FPU_TYPE    "$value"}
	print_integer_macro NDS_FPU_TYPE $value
    }
}

design_option NDS_BFLOAT16_SUPPORT {} {
    full_name    {Andes FP16/BFLOAT16 Extension}
    value        {no yes}
    default      no
    hidden       yes
    to_define    {
        echo {`define NDS_FP16_SUPPORT    "$value"}
        echo {`define NDS_BFLOAT16_SUPPORT    "$value"}
	print_integer_macro NDS_FP16_SUPPORT $value
	print_integer_macro NDS_BFLOAT16_SUPPORT $value
    }
}

design_option NDS_RVV_SUPPORT {} {
    full_name    {RISC-V Vector Instruction Extension}
    value        {no yes}
    default      no
    hidden       yes
    to_define    {
        echo {`define NDS_RVV_SUPPORT    "$value"}
        if {$value == "yes"} {
	    echo {`define NDS_RVV_SUPPORT_INT 1}
            echo {`define NDS_IO_VPU}
            echo {`define NDS_IO_L2}
	} else {
	    echo {`define NDS_RVV_SUPPORT_INT 0}
	}
    }
}

design_option NDS_VLEN {} {
    full_name    {VLEN}
    value        {128 256 512 1024}
    default      512
    hidden       yes
    to_define    {
	echo {`define NDS_VLEN    $value}
    }
}

design_option NDS_ELEN {} {
    full_name    {ELEN}
    value        {32 64}
    default      32
    hidden       yes
    to_define    {
        if {[selected NDS_RVV_SUPPORT] == "yes"} {
		echo {`define NDS_ELEN    $value}
	}
    }
}

design_option NDS_DLEN {} {
    full_name    {SIMD Width}
    value        {128 256 512 1024}
    default      512
    hidden       yes
    to_define    {
        if {[selected NDS_RVV_SUPPORT] == "yes"} {
	    echo {`define NDS_DLEN $value}
	}
    }
}

design_option NDS_VLSU_MSHR_DEPTH {} {
    full_name    {Number of VLSU Requests}
    value        {4 8 16}
    default      16
    hidden       yes
    to_define    {
        if {[selected NDS_RVV_SUPPORT] == "yes"} {
	    echo {`define NDS_VLSU_MSHR_DEPTH $value}
	}
    }
}

design_option NDS_DSP_SUPPORT {} {
    full_name    {RISC-V P-extension (draft) DSP/SIMD ISA}
    value        {no yes}
    default      no
    to_define    {
        echo {`define NDS_DSP_SUPPORT    "$value"}
	print_integer_macro NDS_DSP_SUPPORT $value
    }
}

design_option NDS_ACE_SUPPORT {} {
    full_name    {Andes Custom Extension}
    value        {no yes}
    default      no
    to_define    {
        echo {`define NDS_ACE_SUPPORT    "$value"}
        if {[selected NDS_ACE_SUPPORT] == "yes"} {
            echo {`define NDS_IO_ACE}
        }
	print_integer_macro NDS_ACE_SUPPORT $value
    }
}

design_option NDS_ACE_STREAM_PORT {} {
    full_name    {ACE Streaming Port}
    value        {yes no}
    default      no
    hidden       yes
    to_define    {
        if {$value == "yes"} {
		echo {`define NDS_ACE_STREAM_PORT 1}
		echo {`define NDS_IO_ACE_STREAM_PORT}
	} else {
		echo {`define NDS_ACE_STREAM_PORT 0}
	}
    }
}

design_option NDS_ASP_DATA_WIDTH {} {
    full_name    {ACE Streaming Port Data Width}
    value        {64 128 256 512 1024}
    default      512
    hidden       yes
    to_define    {
	echo {`define NDS_ASP_DATA_WIDTH   $value}
    }
}


title Privilege Architecture

design_option NDS_NUM_PRIVILEGE_LEVELS {} {
    full_name    {Privilege Modes}
    value        {1 2 3}
    default      1
    show_value   {
        1    {Machine}
        2    {Machine + User}
        3    {Machine + Supervisor + User}
    }
    to_define    {
        echo {`define NDS_NUM_PRIVILEGE_LEVELS    $value}
        if {$value >= 3} {echo {`define NDS_IO_SEIP}}
    }
}

design_option NDS_MMU_SCHEME {} {
    full_name    {Page-Based Virtual Memory}
    value        {sv32 sv39 sv48 bare}
    default      bare
    to_define    {
        echo {`define NDS_MMU_SCHEME    "$value"}
        define_stlb_ram_width
	print_integer_macro NDS_MMU_SCHEME $value
    }
}

design_option NDS_STLB_ENTRIES {} {
    full_name    {Number of Shared TLB Entries}
    value        {0 32 64 128 256 512}
    default      32
    to_define    {
        echo {`define NDS_STLB_ENTRIES    $value}
    }
}

design_option NDS_STLB_ECC_TYPE {} {
        full_name       {Shared TLB Soft Error Protection}
        value           {0 1}
        show_value      {
                        0       {none}
                        1       {ecc}
        }
        default         0
        to_define	{
		echo {`define NDS_STLB_ECC_TYPE $value}
	}
}

design_option NDS_STLB_SP_ENTRIES {} {
	full_name	{Number of Shared TLB SP Entries}
	value		{0 4}
	default		4
	hidden		yes
	to_define	{
		echo {`define NDS_STLB_SP_ENTRIES    $value}
	}
}

design_option NDS_ITLB_ENTRIES {} {
    full_name    {Number of iTLB Entries}
    value        {0 4 8}
    default      4
    to_define    {
        echo {`define NDS_ITLB_ENTRIES    $value}
    }
}

design_option NDS_DTLB_ENTRIES {} {
    full_name    {Number of dTLB Entries}
    value        {0 4 8}
    default      8
    to_define    {
        echo {`define NDS_DTLB_ENTRIES    $value}
    }
}

design_option NDS_VTLB_ENTRIES {} {
    full_name    {Number of vTLB Entries}
    value        {0 8 12}
    default      8
    to_define    {
        if {[selected NDS_RVV_SUPPORT] == "yes"} {
	    echo {`define NDS_VTLB_ENTRIES $value}
	}
    }
}



design_option NDS_PMP_ENTRIES {} {
    full_name    {Number of PMP Entries}
    value        {0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32}
    default      0
    to_define    {
        echo {`define NDS_PMP_ENTRIES    $value}
    }
        post_randomize {
		set rval [selected NDS_PMP_ENTRIES]
	        set rval [expr $rval % 17]
                set_opt_value NDS_PMP_ENTRIES $rval
        }
}

design_option NDS_PMP_GRANULARITY {} {
    full_name    {PMP Granularity}
    value        {8 16 32 64 128 256 512 1024 2048 4096}
    default      8
    hidden       yes
    show_value   {
        8    {8 B}
        16    {16 B}
        32    {32 B}
        64    {64 B}
        128    {128 B}
        256    {256 B}
        512    {512 B}
        1024    {1 KiB}
        2048    {2 KiB}
        4096    {4 KiB}
    }
    to_define    {
        echo {`define NDS_PMP_GRANULARITY    $value}
    }
    post_randomize {
        set_opt_value NDS_PMP_GRANULARITY 8
    }
}


design_option NDS_PERFORMANCE_MONITOR {} {
    full_name    {Performance Monitors}
    value        {no yes}
    default      no
    to_define    {
        echo {`define NDS_PERFORMANCE_MONITOR    "$value"}
        if {$value == "yes"} {
	    echo {`define NDS_PERFORMANCE_MONITOR_INT 1}
        } else {
	    echo {`define NDS_PERFORMANCE_MONITOR_INT 0}
	}
    }
}


design_option NDS_UNALIGNED_ACCESS {} {
    full_name    {Misaligned Access}
    value        {no yes}
    default      yes
    hidden       yes
    to_define    {
        echo {`define NDS_UNALIGNED_ACCESS    "$value"}
	print_integer_macro NDS_UNALIGNED_ACCESS $value
    }
}


design_option NDS_RVN_SUPPORT {} {
    full_name    {RISC-V User-Level Interrupt Extension}
    value        {no yes}
    default      no
    to_define    {
        echo {`define NDS_RVN_SUPPORT    "$value"}
        if {$value == "yes"} {echo {`define NDS_IO_UEIP}}
	print_integer_macro NDS_RVN_SUPPORT $value
    }
}


design_option NDS_VECTOR_PLIC_SUPPORT {} {
    full_name    {Andes Vectored PLIC Extension}
    value        {no yes}
    default      no
    to_define    {
        echo {`define NDS_VECTOR_PLIC_SUPPORT    "$value"}
	print_integer_macro NDS_VECTOR_PLIC_SUPPORT $value
    }
}

design_option NDS_LOCALINT_SLPECC {} {
    full_name    {Localint SLPECC}
    value        {16}
    default      16
    hidden       yes
    to_define    {
        echo {`define NDS_LOCALINT_SLPECC    $value}
    }
}

design_option NDS_LOCALINT_SBE {} {
    full_name    {Localint SBE}
    value        {17}
    default      17
    hidden       yes
    to_define    {
        echo {`define NDS_LOCALINT_SBE    $value}
    }
}

design_option NDS_LOCALINT_HPMINT {} {
    full_name    {Localint HPMINT}
    value        {18}
    default      18
    hidden       yes
    to_define    {
        echo {`define NDS_LOCALINT_HPMINT    $value}
    }
}

design_option NDS_LOCALINT_ACEERR {} {
    full_name    {Localint ACEERR}
    value        {24}
    default      24
    hidden       yes
    to_define    {
        echo {`define NDS_LOCALINT_ACEERR    $value}
    }
}

design_option NDS_STACKSAFE_SUPPORT {} {
    full_name    {Andes StackSafe Extension}
    value        {no yes}
    default        no
    to_define    {
        echo {`define NDS_STACKSAFE_SUPPORT    "$value"}
	print_integer_macro NDS_STACKSAFE_SUPPORT $value
    }
}


design_option NDS_POWERBRAKE_SUPPORT {} {
    full_name    {Andes PowerBrake Extension}
    value        {no yes}
    default        no
    to_define    {
        echo {`define NDS_POWERBRAKE_SUPPORT    "$value"}
	print_integer_macro NDS_POWERBRAKE_SUPPORT $value
    }
}


design_option NDS_CODENSE_SUPPORT {} {
    full_name    {CODENSE support}
    value        {no yes}
    default       yes
    to_define    {
        echo {`define NDS_CODENSE_SUPPORT    "$value"}
	print_integer_macro NDS_CODENSE_SUPPORT $value
    }
}

title Bus Interface

design_option NDS_BIU_BUS {} {
    full_name    {Bus Type}
    value        {axi}
    default       axi
    to_define    {
        echo {`define NDS_BIU_BUS    "$value"}
        if {$value == "axi"} {
            echo {`define NDS_IO_AXI}
        }
        if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
            if {[selected NDS_BIU_ASYNC_SUPPORT] == 0} {
                echo {`define NDS_IO_MEM_SYNC}
                echo {`define NDS_IO_MMIO_SYNC}
            } elseif {[selected NDS_BIU_ASYNC_SUPPORT] == 1} {
                echo {`define NDS_IO_MEM_ASYNC}
                echo {`define NDS_IO_MMIO_ASYNC}
            }
        } elseif {[selected NDS_BIU_ASYNC_SUPPORT] == 0} {
            echo {`define NDS_IO_BIU_AXI_SYNC}
        } elseif {[selected NDS_BIU_ASYNC_SUPPORT] == 1} {
            echo {`define NDS_IO_BIU_AXI_ASYNC}
        }
        if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
        } elseif {[selected NDS_RVV_SUPPORT] == "yes"} {
        } elseif {[selected NDS_BIU_PATH_X2] == "yes"} {
	    echo {`define NDS_IO_BIU_AXI_COMMON_X2}
	} elseif {[selected NDS_BIU_PATH_X2] == "no"} {
            echo {`define NDS_IO_BIU_AXI_COMMON_X1}
        }
	print_integer_macro NDS_BIU_BUS $value
    }
}

design_option NDS_BIU_ASYNC_SUPPORT {} {
    full_name    {Bus Clock}
    value        {0 1}
    default        0
    show_value   {
        0    {synchronous}
        1    {asynchronous}
    }
    to_define    {
        echo {`define NDS_BIU_ASYNC_SUPPORT $value}
        if {$value == 1} {
            echo {`define NDS_BIU_ASYNC}
        }
    }
}

design_option NDS_BIU_PATH_X2 {} {
    full_name    {BIU Two-Port Structure}
    value        {no yes}
    default        no
    to_define    {
        echo {`define NDS_BIU_PATH_X2 "$value"}
        if {[selected NDS_BIU_PATH_X2] == "yes"} {
            echo {`define NDS_IO_BIU_X2}
        }
	print_integer_macro NDS_BIU_PATH_X2 $value
    }
}

design_option NDS_BIU_DATA_WIDTH {} {
    full_name    {Bus Data Width}
    value        {64 128 256}
    default        64
    to_define    {
        echo {`define NDS_BIU_DATA_WIDTH    $value}
        echo {`define NDS_BIU_DATA_WIDTH_$value}
	echo {`define NDS_SLAVE_PORT_DATA_WIDTH    $value}
    }
}

design_option NDS_BIU_ADDR_WIDTH {} {
	full_name	{Bus Address Width}
	value		{32 33 34}
	default		32
	to_define	{
		echo {`define NDS_BIU_ADDR_WIDTH	$value}
	}
}

design_option NDS_BIU_ID_WIDTH {} {
    full_name    {Bus ID Width}
    value        {4 5 6}
    default        4
    hidden       yes
    to_define    {
        echo {`define NDS_BIU_ID_WIDTH    $value}
    }
}

design_option NDS_AHB_LOW_LATENCY {} {
    full_name    {AHB Low Latency support}
    value        {no}
    default        no
    to_define    {
        echo {`define NDS_AHB_LOW_LATENCY    "$value"}
	print_integer_macro NDS_AHB_LOW_LATENCY $value
    }
}



title Micro-Architecture

design_option NDS_MULTIPLIER {} {
    full_name    {Multiplier Implementation}
    value        {radix2 radix4 radix16 radix256 fast}
    default        radix2
    to_define    {
        echo {`define NDS_MULTIPLIER    "$value"}
	print_integer_macro NDS_MULTIPLIER $value
    }
}

design_option NDS_BRANCH_PREDICTION {} {
    full_name    {Branch Prediction}
    value        {dynamic}
    default      dynamic
    to_define    {
        if {[selected NDS_BRANCH_PREDICTION] == "none" || [selected NDS_BRANCH_PREDICTION] == "static"} {
            echo {`define NDS_BRANCH_PREDICTION    "$value"}
            print_integer_macro NDS_BRANCH_PREDICTION $value
         }
    }
}

design_option NDS_BTB_SIZE {} {
    full_name    {Number of BTB Entries}
    value        {256 512}
    default        256
    to_define    {
        if {[selected NDS_BRANCH_PREDICTION] == "none" || [selected NDS_BRANCH_PREDICTION] == "static"} {
            echo {`define NDS_BTB_RAM_ADDR_WIDTH    1}
        } else {
            echo {`define NDS_IO_BTB_RAM}
	    if {[selected NDS_RAM_CTRL_IN] == "yes"} {
		echo {`define NDS_IO_BTB_RAM_CTRL_IN}
	    }
	    if {[selected NDS_RAM_CTRL_OUT] == "yes"} {
		echo {`define NDS_IO_BTB_RAM_CTRL_OUT}
	    }
            if {[selected NDS_BRANCH_PREDICTION] != "dynamic"} {
                set spec_btb [selected NDS_BRANCH_PREDICTION]
                set btb_val [regsub -all {btb} $spec_btb {}]
                set    value $btb_val
            }
            echo {`define NDS_BRANCH_PREDICTION    "btb$value"}
            print_integer_macro NDS_BRANCH_PREDICTION "btb$value"
        if {$value == 32}  {echo {`define NDS_BTB_RAM_ADDR_WIDTH    4}}
            if {$value == 64}  {echo {`define NDS_BTB_RAM_ADDR_WIDTH    5}}
            if {$value == 128} {echo {`define NDS_BTB_RAM_ADDR_WIDTH    6}}
            if {$value == 256} {echo {`define NDS_BTB_RAM_ADDR_WIDTH    7}}
            if {$value == 512} {echo {`define NDS_BTB_RAM_ADDR_WIDTH    8}}
        }
	set valen [selected NDS_VALEN]
	if {[selected NDS_RVC_SUPPORT] == "yes"} {
		if {$value == 256} {
			set btb_ram_dw [expr $valen - 1 - 7 + 10 + 6 + 16]
		} else {
			set btb_ram_dw [expr $valen - 1 - 8 + 10 + 6 + 16]
		}
	} else {
		if {$value == 256} {
			set btb_ram_dw [expr $valen - 2 - 7 + 10 + 6 + 16]
		} else {
			set btb_ram_dw [expr $valen - 2 - 8 + 10 + 6 + 16]
		}
	}
	set btb_ram_dw_macro "`define NDS_BTB_RAM_DATA_WIDTH    "
        append btb_ram_dw_macro $btb_ram_dw
	echo $btb_ram_dw_macro
    }
}

design_option NDS_FAST_DEVICE_SUPPORT {} {
    full_name    {Fast Device support}
    value        {no}
    default      no
    hidden	 yes
    to_define    {
        echo {`define NDS_FAST_DEVICE_SUPPORT    "$value"}
        print_integer_macro NDS_FAST_DEVICE_SUPPORT $value
    }
}
design_option NDS_NON_BLOCKING_SUPPORT {} {
    full_name    {Non-Block Load Store Support}
    value        {yes}
    default      yes
    hidden	 yes
    to_define    {
        echo {`define NDS_NON_BLOCKING_SUPPORT    "$value"}
	if {$value == "yes"} {echo {`define NDS_NB_SUPPORT}}
        print_integer_macro NDS_NON_BLOCKING_SUPPORT $value
    }
}
title Local Memory

design_option NDS_LM_INTERFACE {} {
    full_name    {Local Memory Interface}
    value        {ram}
    default      ram
    show_value    {
        ram    {ram}
    }
    hidden	 yes
    to_define    {
        echo {`define NDS_LM_INTERFACE    "$value"}
        print_integer_macro NDS_LM_INTERFACE $value
        if {[selected NDS_ISA_BASE] == "rv64i"} {
            echo {`define NDS_ILM_HDATA_WIDTH    64}
            echo {`define NDS_DLM_HDATA_WIDTH    64}
        } else {
            echo {`define NDS_ILM_HDATA_WIDTH    32}
            echo {`define NDS_DLM_HDATA_WIDTH    32}
        }

        if {[selected NDS_ILM_SIZE] != 0 || [selected NDS_DLM_SIZE] != 0} {
            echo {`define NDS_IO_LM}
        }
        if {[selected NDS_ILM_SIZE] != 0 && [selected NDS_ILM_WAIT_CYCLE] != 0} {
            echo {`define NDS_IO_LM_RESET}
	} elseif {[selected NDS_DLM_SIZE] != 0 && [selected NDS_DLM_WAIT_CYCLE] != 0} {
            echo {`define NDS_IO_LM_RESET}
	}
    }
    post_randomize {
        set dval [selected_default NDS_LM_INTERFACE]
        set_opt_value NDS_LM_INTERFACE $dval
    }
}

design_option NDS_LM_ENABLE_CTRL {} {
    full_name    {Enable Local Memory CTRL}
    value        {no yes}
    default      no
    to_define    {
        echo {`define NDS_LM_ENABLE_CTRL    "$value"}
        print_integer_macro NDS_LM_ENABLE_CTRL $value
    }
}


design_option NDS_ILM_SUPPORT {} {
    full_name    {ILM Support}
    value        {0 1}
    default      1
    hidden       yes
    to_define    {
    }
}

design_option NDS_ILM_SIZE {} {
    full_name    {ILM Size}
    value        {0 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384}
    default      1024
    show_value   {
        0    {0 KiB}
        4    {4 KiB}
        8    {8 KiB}
        16    {16 KiB}
        32    {32 KiB}
        64    {64 KiB}
        128    {128 KiB}
        256    {256 KiB}
        512    {512 KiB}
        1024    {1 MiB}
        2048    {2 MiB}
        4096    {4 MiB}
        8192    {8 MiB}
        16384    {16 MiB}
    }
    to_define    {

        if {[selected NDS_ILM_WAIT_CYCLE] == 1 && [selected NDS_LM_INTERFACE] == "ram" && $value != 0} {
	    echo {`define NDS_IO_ILM_TL_UL}
	}
	if {[selected NDS_ILM_WAIT_CYCLE] == 0 && [selected NDS_LM_INTERFACE] == "ram" && $value != 0} {
	    echo {`define NDS_IO_ILM_RAM0}
	    if {[selected NDS_RAM_CTRL_IN] == "yes"} {
		echo {`define NDS_IO_ILM_RAM0_CTRL_IN}
	    }
	    if {[selected NDS_RAM_CTRL_OUT] == "yes"} {
		echo {`define NDS_IO_ILM_RAM0_CTRL_OUT}
	    }
        }
        if {[selected NDS_ILM_WAIT_CYCLE] == 0 && [selected NDS_LM_INTERFACE] == "ram" && [selected NDS_ISA_BASE] != "rv64i" && $value != 0} {
            echo {`define NDS_IO_ILM_RAM1}
	    if {[selected NDS_RAM_CTRL_IN] == "yes"} {
		echo {`define NDS_IO_ILM_RAM1_CTRL_IN}
	    }
	    if {[selected NDS_RAM_CTRL_OUT] == "yes"} {
		echo {`define NDS_IO_ILM_RAM1_CTRL_OUT}
	    }
        }
        echo {`define NDS_ILM_SIZE_KB    $value}
        if {$value == 0}        {
            echo {`define NDS_ILM_RAM_AW    1}
            echo {`define NDS_ILM_AMSB      3}
        } else {
            set number [selected NDS_ILM_SIZE]
            set ilm_ram_aw [expr int(log($number) / log(2)) + 7]
            set ilm_amsb   [expr $ilm_ram_aw + 2]

            set macro_str "`define NDS_ILM_RAM_AW    "
            append macro_str $ilm_ram_aw
            echo $macro_str

            set macro_str "`define NDS_ILM_AMSB      "
            append macro_str $ilm_amsb
            echo $macro_str
        }

    }
}

design_option NDS_ILM_BASE {} {
    full_name       {ILM Base}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'h0000000010000000
    to_define       {
        echo {`define NDS_ILM_BASE $value}
    }
    post_randomize {
        set dval [selected_default NDS_ILM_BASE]
        set_opt_value NDS_ILM_BASE $dval
    }
}

design_option NDS_ILM_ECC_TYPE {} {
    full_name    {ILM Soft Error Protection}
    value        {none ecc}
    default      none
    to_define    {
        if {[selected NDS_ILM_SIZE] == 0} {
            echo {`define NDS_ILM_ECC_TYPE    "none"}
            echo {`define NDS_ILM_ECC_TYPE_INT 0}
            echo {`define NDS_ILM_RAM_DW    1}
            echo {`define NDS_ILM_RAM_BWEW    1}
        } else {
            echo {`define NDS_ILM_ECC_TYPE    "$value"}
	    if {$value == "none"} {
                echo {`define NDS_ILM_ECC_TYPE_INT 0}
	        if {[selected NDS_ISA_BASE] == "rv64i"} {
	    	echo {`define NDS_ILM_RAM_DW    64}
	        } else {
	    	echo {`define NDS_ILM_RAM_DW    32}
	        }
  	    }
            if {$value == "parity"} {
                echo {`define NDS_ILM_ECC_TYPE_INT 1}
	        if {[selected NDS_ISA_BASE] == "rv64i"} {
	    	echo {`define NDS_ILM_RAM_DW    72}
	        } else {
	    	echo {`define NDS_ILM_RAM_DW    36}
	        }
	    }
	    if {$value == "ecc"} {
                echo {`define NDS_ILM_ECC_TYPE_INT 2}
	        echo {`define NDS_IO_ILM_RAM_ECC}
	        if {[selected NDS_ISA_BASE] == "rv64i"} {
	    	echo {`define NDS_ILM_RAM_DW    72}
	        } else {
	    	echo {`define NDS_ILM_RAM_DW    39}
	        }
	    }
          if {[selected NDS_ISA_BASE] == "rv64i"} {
              echo {`define NDS_ILM_RAM_BWEW    8}
          } else {
              echo {`define NDS_ILM_RAM_BWEW    4}
          }
        }
    }
}

design_option NDS_ILM_WAIT_CYCLE {} {
    full_name    {ILM Wait Cycle}
    value        {0 1}
    default        0
    show_value   {
	        0    {no}
	        1    {yes}
    }
	to_define    {
		set ilm_wait_cycle_macro "`define NDS_ILM_WAIT_CYCLE    "
	        append ilm_wait_cycle_macro $value
		echo $ilm_wait_cycle_macro
	}
}

design_option NDS_DLM_SUPPORT {} {
    full_name    {DLM Support}
    value        {0 1}
    default      1
    hidden       yes
    to_define    {
    }
}

design_option NDS_NUM_DLM_BANKS {} {
    full_name    {Number of DLM Banks}
    value        {1 2 4}
    default      1
    to_define {
	 echo {`define NDS_NUM_DLM_BANKS  $value}
    }
}

design_option NDS_DLM_SIZE {} {
    full_name    {DLM Size}
    value        {0 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384}
    default      1024
    show_value   {
        0    {0 KiB}
        4    {4 KiB}
        8    {8 KiB}
        16    {16 KiB}
        32    {32 KiB}
        64    {64 KiB}
        128    {128 KiB}
        256    {256 KiB}
        512    {512 KiB}
        1024    {1 MiB}
        2048    {2 MiB}
        4096    {4 MiB}
        8192    {8 MiB}
        16384    {16 MiB}
    }
    to_define    {
        if {[selected NDS_DLM_WAIT_CYCLE] == 0 && $value != 0} {
            echo {`define NDS_IO_DLM_RAM0}
	    if {[selected NDS_RAM_CTRL_IN] == "yes"} {
		echo {`define NDS_IO_DLM_RAM0_CTRL_IN}
	    }
	    if {[selected NDS_RAM_CTRL_OUT] == "yes"} {
		echo {`define NDS_IO_DLM_RAM0_CTRL_OUT}
	    }
	    if {[selected NDS_NUM_DLM_BANKS] == 4 || [selected NDS_NUM_DLM_BANKS] == 2} {
		echo {`define NDS_IO_DLM_RAM1}
	        if {[selected NDS_RAM_CTRL_IN] == "yes"} {
	            echo {`define NDS_IO_DLM_RAM1_CTRL_IN}
	        }
	        if {[selected NDS_RAM_CTRL_OUT] == "yes"} {
	            echo {`define NDS_IO_DLM_RAM1_CTRL_OUT}
	        }
	    }
            if {[selected NDS_NUM_DLM_BANKS] == 4} {
		echo {`define NDS_IO_DLM_RAM2}
		echo {`define NDS_IO_DLM_RAM3}
	        if {[selected NDS_RAM_CTRL_IN] == "yes"} {
	            echo {`define NDS_IO_DLM_RAM2_CTRL_IN}
	            echo {`define NDS_IO_DLM_RAM3_CTRL_IN}
	        }
	        if {[selected NDS_RAM_CTRL_OUT] == "yes"} {
	            echo {`define NDS_IO_DLM_RAM2_CTRL_OUT}
	            echo {`define NDS_IO_DLM_RAM3_CTRL_OUT}
	        }
	    }
        }
        if {[selected NDS_DLM_WAIT_CYCLE] == 1 && $value != 0} {
            echo {`define NDS_IO_DLM_TL_UL}
        }
        echo {`define NDS_DLM_SIZE_KB    $value}
        if {$value == 0}        {
                echo {`define NDS_DLM_RAM_AW    1}
                if {[selected NDS_ISA_BASE] == "rv64i"} {
                    echo {`define NDS_DLM_AMSB      3}
                    echo {`define NDS_DLM_ALSB      3}
		} else {
                    echo {`define NDS_DLM_AMSB      2}
                    echo {`define NDS_DLM_ALSB      2}
		}
        } else {
            set number [selected NDS_DLM_SIZE]
	    set bank_number [selected NDS_NUM_DLM_BANKS]
            if {[selected NDS_ISA_BASE] == "rv64i"} {
	   	    set dlm_ram_aw [expr int(log($number) / log(2)) + 7 - int(log($bank_number) / log(2))]
            } else {
	            set dlm_ram_aw [expr int(log($number) / log(2)) + 8 - int(log($bank_number) / log(2))]
            }
            set macro_str "`define NDS_DLM_RAM_AW    "
            append macro_str $dlm_ram_aw
            echo $macro_str

            if {[selected NDS_ISA_BASE] == "rv64i"} {
	   	    set dlm_amsb [expr $dlm_ram_aw + 2]
		    echo {`define NDS_DLM_ALSB    3}
	    } else {
	   	    set dlm_amsb [expr $dlm_ram_aw + 1]
		    echo {`define NDS_DLM_ALSB    2}
	    }

            set macro_str "`define NDS_DLM_AMSB "
            append macro_str $dlm_amsb
            echo $macro_str
	    
        }
    }
}

design_option NDS_DLM_BASE {} {
    full_name       {DLM Base}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'h0000000020000000
    to_define       {
        echo {`define NDS_DLM_BASE $value}
    }
    post_randomize {
        set dval [selected_default NDS_DLM_BASE]
        set_opt_value NDS_DLM_BASE $dval
    }
}


design_option NDS_DLM_ECC_TYPE {} {
    full_name    {DLM Soft Error Protection}
    value        {none ecc}
    default      none
    to_define    {
        if {[selected NDS_DLM_SIZE] == 0} {
            echo {`define NDS_DLM_ECC_TYPE    "none"}
            echo {`define NDS_DLM_ECC_TYPE_INT 0}
            echo {`define NDS_DLM_RAM_DW    1}
            echo {`define NDS_DLM_RAM_BWEW    1}

        } else {
            echo {`define NDS_DLM_ECC_TYPE    "$value"}
            if {$value == "none"} {
                echo {`define NDS_DLM_ECC_TYPE_INT 0}
                if {[selected NDS_ISA_BASE] == "rv64i"} {
                    echo {`define NDS_DLM_RAM_DW    64}
                } else {
                    echo {`define NDS_DLM_RAM_DW    32}
                }
            }
            if {$value == "parity"} {
                echo {`define NDS_DLM_ECC_TYPE_INT 1}
                if {[selected NDS_ISA_BASE] == "rv64i"} {
                    echo {`define NDS_DLM_RAM_DW    72}
                } else {
                    echo {`define NDS_DLM_RAM_DW    36}
                }
            }
            if {$value == "ecc"} {
                echo {`define NDS_DLM_ECC_TYPE_INT 2}
                echo {`define NDS_IO_DLM_RAM_ECC}
                if {[selected NDS_ISA_BASE] == "rv64i"} {
                    echo {`define NDS_DLM_RAM_DW    72}
                } else {
                    echo {`define NDS_DLM_RAM_DW    39}
                }
            }
            if {[selected NDS_ISA_BASE] == "rv64i"} {
                echo {`define NDS_DLM_RAM_BWEW    8}
            } else {
                echo {`define NDS_DLM_RAM_BWEW    4}
            }
        }
    }
}

design_option NDS_DLM_WAIT_CYCLE {} {
    full_name    {DLM Wait Cycle}
    value        {0 1}
    default        0
    show_value   {
	        0    {no}
	        1    {yes}
    }
	to_define    {
            echo {`define NDS_DLM_WAIT_CYCLE $value}
	}
}


design_option NDS_SLAVE_PORT_SUPPORT {} {
    full_name    {Slave Port Support}
    value        {no yes}
    default      no
    to_define    {
        echo {`define NDS_SLAVE_PORT_SUPPORT    "$value"}
        print_integer_macro NDS_SLAVE_PORT_SUPPORT $value
    }
}

design_option NDS_SLAVE_PORT_PATH_X2 {} {
    full_name    {Two-Interface Slave Port}
    value        {no yes}
    default        no
    to_define    {
        echo {`define NDS_SLAVE_PORT_PATH_X2 "$value"}
	print_integer_macro NDS_SLAVE_PORT_PATH_X2 $value
        if {[selected NDS_SLAVE_PORT_SUPPORT] == "no"} {
        } else {
	    echo {`define NDS_IO_SLAVEPORT_COMMON_X1}
            if {$value == "yes"} {
                echo {`define NDS_IO_SLAVEPORT_COMMON_X2}
            }
        }
    }
}

design_option NDS_SLAVE_PORT_ASYNC_SUPPORT {} {
    full_name	{Slave Port Clock}
    value	{0 1}
    default	0
    hidden	yes
    show_value	{
        0	{synchronous}
        1	{asynchronous}
    }
    to_define	{
        echo {`define NDS_SLAVE_PORT_ASYNC_SUPPORT $value}
        if {[selected NDS_SLAVE_PORT_SUPPORT] == "no"} {
        } elseif {$value == 1} {
            echo {`define NDS_IO_SLAVEPORT_ASYNC}
            if {[selected NDS_SLAVE_PORT_PATH_X2] == "yes"} {
                echo {`define NDS_IO_SLAVEPORT_ASYNC_X2}
            }
        } else {
            echo {`define NDS_IO_SLAVEPORT_SYNC}
            if {[selected NDS_SLAVE_PORT_PATH_X2] == "yes"} {
                echo {`define NDS_IO_SLAVEPORT_SYNC_X2}
            }
        }
    }
}

design_option NDS_SLAVE_PORT_ID_WIDTH {} {
    full_name    {Slave Port ID Width}
    value        {4 5 6 7 8 9 10 11 12 13 14 15 16}
    default      10
    to_define    {
        echo {`define NDS_SLAVE_PORT_ID_WIDTH    $value}
    }
}


title Cache Configuration

design_option NDS_ICACHE_SUPPORT {} {
    full_name    {I-Cache Support}
    value        {0 1}
    default      1
    hidden       yes
    to_define    {
        define_icache_ram_width
    }
}

design_option NDS_CACHE_LINE_SIZE {} {
    full_name    {Cache line size}
    value        {64}
    default      64
    hidden       yes
    to_define    {
        echo {`define NDS_CACHE_LINE_SIZE    $value}
    }
}

design_option NDS_ICACHE_SIZE {} {
    full_name    {I-Cache Size}
    value        {0 8 16 32 64}
    default      32
    show_value   {
        0    {0 KiB}
        8    {8 KiB}
        16   {16 KiB}
        32   {32 KiB}
        64   {64 KiB}
    }
    to_define    {
        echo {`define NDS_ICACHE_SIZE_KB    $value}
    }
}

design_option NDS_ICACHE_WAY {} {
    full_name    {I-Cache Associativity}
    value        {1 2 4}
    default      2
    show_value   {
        1    {direct-mapped}
        2    {2-way}
        4    {4-way}
    }
    to_define    {
        echo {`define NDS_ICACHE_WAY    $value}
        if {[selected NDS_ICACHE_SIZE] != 0} {
	    echo {`define NDS_IO_ICACHE0}
	    if {[selected NDS_RAM_CTRL_IN] == "yes"} {
		echo {`define NDS_IO_ICACHE0_CTRL_IN}
	    }
	    if {[selected NDS_RAM_CTRL_OUT] == "yes"} {
		echo {`define NDS_IO_ICACHE0_CTRL_OUT}
	    }
	    if {$value > 1} {
	        echo {`define NDS_IO_ICACHE1}
	        if {[selected NDS_RAM_CTRL_IN] == "yes"} {
	            echo {`define NDS_IO_ICACHE1_CTRL_IN}
	        }
	        if {[selected NDS_RAM_CTRL_OUT] == "yes"} {
	            echo {`define NDS_IO_ICACHE1_CTRL_OUT}
	        }
            }
            if {$value > 2} {
	        echo {`define NDS_IO_ICACHE2}
	        echo {`define NDS_IO_ICACHE3}
	        if {[selected NDS_RAM_CTRL_IN] == "yes"} {
	            echo {`define NDS_IO_ICACHE2_CTRL_IN}
	        }
	        if {[selected NDS_RAM_CTRL_OUT] == "yes"} {
	            echo {`define NDS_IO_ICACHE2_CTRL_OUT}
	        }
            }
        }
    }
}

design_option NDS_ICACHE_LRU {} {
    full_name    {I-Cache Replacement Policy}
    value        {random lru}
    show_value   {
        lru    {pseudo-lru}
    }
    default      lru
    to_define    {
        echo {`define NDS_ICACHE_LRU    "$value"}
        if {$value == "lru"} {
	    echo {`define NDS_ICACHE_LRU_INT 0}
        } else {
	    echo {`define NDS_ICACHE_LRU_INT 1}
	}
    }
}

design_option NDS_ICACHE_ECC_TYPE {} {
    full_name    {I-Cache Soft Error Protection}
    value        {none parity ecc}
    default      none
    to_define    {
        echo {`define NDS_ICACHE_ECC_TYPE    "$value"}
        print_integer_macro NDS_ICACHE_ECC_TYPE $value
	if {$value == "none"} {
		echo {`define NDS_IO_ICACHE_RAM_NECC}
	}
	if {$value == "parity"} {
		echo {`define NDS_IO_ICACHE_RAM_PAR}
	}
	if {$value == "ecc"} {
		echo {`define NDS_IO_ICACHE_RAM_ECC}
	}
    }
}

design_option NDS_ICACHE_FIRST_WORD_FIRST {} {
    full_name    {I-Cache Cache-Line Filling Policy}
    value        {First-Word-First}
    default      First-Word-First
    hidden       yes
    to_define    {
	if {$value == "First-Word-First" } {
		echo {`define NDS_ICACHE_FIRST_WORD_FIRST    "yes"}
	        print_integer_macro NDS_ICACHE_FIRST_WORD_FIRST yes
	} else {
		echo {`define NDS_ICACHE_FIRST_WORD_FIRST    "no"}
	        print_integer_macro NDS_ICACHE_FIRST_WORD_FIRST no
	}
    }
}

design_option NDS_DCACHE_SUPPORT {} {
    full_name    {D-Cache Support}
    value        {0 1}
    default      1
    hidden        yes
    to_define    {
        define_dcache_ram_width
    }
}

design_option NDS_DCACHE_SIZE {} {
    full_name    {D-Cache Size}
    value        {0 8 16 32 64}
    default      32
    show_value   {
        0    {0 KiB}
        8    {8 KiB}
        16    {16 KiB}
        32    {32 KiB}
        64    {64 KiB}
    }
    to_define    {
        echo {`define NDS_DCACHE_SIZE_KB    $value}
    }
}

design_option NDS_DCACHE_WAY {} {
    full_name    {D-Cache Associativity}
    value        {1 2 4}
    default      1
    show_value   {
        1    {direct-mapped}
        2    {2-way}
        4    {4-way}
    }
    to_define    {
        echo {`define NDS_DCACHE_WAY    $value}
        if {[selected NDS_DCACHE_SIZE] != 0} {
            echo {`define NDS_IO_DCACHE0}
	    if {[selected NDS_RAM_CTRL_IN] == "yes"} {
		echo {`define NDS_IO_DCACHE0_CTRL_IN}
	    }
	    if {[selected NDS_RAM_CTRL_OUT] == "yes"} {
		echo {`define NDS_IO_DCACHE0_CTRL_OUT}
	    }
            if {$value > 1} {
                echo {`define NDS_IO_DCACHE1}
	        if {[selected NDS_RAM_CTRL_IN] == "yes"} {
	            echo {`define NDS_IO_DCACHE1_CTRL_IN}
	        }
	        if {[selected NDS_RAM_CTRL_OUT] == "yes"} {
	            echo {`define NDS_IO_DCACHE1_CTRL_OUT}
	        }
            }
            if {$value > 2} {
                echo {`define NDS_IO_DCACHE2}
                echo {`define NDS_IO_DCACHE3}
	        if {[selected NDS_RAM_CTRL_IN] == "yes"} {
	            echo {`define NDS_IO_DCACHE2_CTRL_IN}
	        }
	        if {[selected NDS_RAM_CTRL_OUT] == "yes"} {
	            echo {`define NDS_IO_DCACHE2_CTRL_OUT}
	        }
            }
        }
    }
}

design_option NDS_DCACHE_LRU {} {
    full_name    {D-Cache Replacement Policy}
    value        {random lru}
    show_value   {
        lru      {pseudo-lru}
    }
    default      lru
    to_define    {
        echo {`define NDS_DCACHE_LRU    "$value"}
        if {$value == "lru"} {
	    echo {`define NDS_DCACHE_LRU_INT 0}
        } else {
	    echo {`define NDS_DCACHE_LRU_INT 1}
	}
    }
}

design_option NDS_DCACHE_ECC_TYPE {} {
    full_name    {D-Cache Soft Error Protection}
    value        {none ecc}
    default      none
    to_define    {
        echo {`define NDS_DCACHE_ECC_TYPE    "$value"}
        if {$value == "ecc"} {
	    echo {`define NDS_DCACHE_ECC_TYPE_INT 2}
	    echo {`define NDS_IO_DCACHE_RAM_ECC}
        } else {
	    echo {`define NDS_DCACHE_ECC_TYPE_INT 0}
	}
    }
}

design_option NDS_MSHR_DEPTH {} {
    full_name    {D-Cache Outstanding Misses}
    value        {3 4 5 6 7 8}
    default      3
    to_define    {
        echo {`define NDS_MSHR_DEPTH    $value}
    }
}

design_option NDS_TL_SINK_WIDTH {} {
    full_name    {TileLink Sink Width}
    value        {2 3 4 5 6}
    default       2
    hidden       yes
    to_define    {
        echo {`define NDS_TL_SINK_WIDTH $value}
    }
}
design_option NDS_L2_SOURCE_WIDTH {} {
    full_name    {L2 Source Width}
    value        {3 4}
    default       3
    hidden       yes
    to_define    {
        echo {`define NDS_L2_SOURCE_WIDTH $value}
    }
}

design_option NDS_MSHR_FB_DEPTH {} {
    full_name    {Outstanding D-Cache Miss Capability}
    value        {0}
    default      0
    hidden       yes
    to_define    {
        echo {`define NDS_MSHR_FB_DEPTH    $value}
    }
}
design_option NDS_MSHR_SUB_BLOCK_DEPTH {} {
    full_name    {MSHR Sub-Block Entry Depth}
    value        {0}
    default      0
    hidden       yes
    to_define    {
        echo {`define NDS_MSHR_SUB_BLOCK_DEPTH    $value}
    }
}

design_option NDS_DCACHE_PREFETCH_SUPPORT {} {
    full_name    {D-Cache Prefetch Support}
    value        {no yes}
    default      no
    hidden       no
    to_define   {
    	echo {`define NDS_DCACHE_PREFETCH_SUPPORT "$value"}
        print_integer_macro NDS_DCACHE_PREFETCH_SUPPORT $value
    }
}

design_option NDS_WRITE_AROUND_SUPPORT {} {
    full_name    {D-Cache Write-Around Support}
    value        {no yes}
    default      no
    to_define    {
	echo {`define NDS_WRITE_AROUND_SUPPORT "$value"}
        if {$value == "yes"} {
	    echo {`define NDS_WRITE_AROUND_SUPPORT_INT 1}
        } else {
	    echo {`define NDS_WRITE_AROUND_SUPPORT_INT 0}
	}
    }
}

design_option NDS_DCACHE_FIRST_WORD_FIRST {} {
    full_name    {D-Cache Cache-Line Filling Policy}
    value        {First-Word-First}
    default      First-Word-First
    hidden       yes
    to_define    {
	if {$value == "First-Word-First" } {
		echo {`define NDS_DCACHE_FIRST_WORD_FIRST    "yes"}
	        print_integer_macro NDS_DCACHE_FIRST_WORD_FIRST yes
	} else {
		echo {`define NDS_DCACHE_FIRST_WORD_FIRST    "no"}
	        print_integer_macro NDS_DCACHE_FIRST_WORD_FIRST no
	}
    }
}

design_option NDS_BIU_PREFETCH {} {
    full_name    {Prefetch Support}
    value        {no}
    default      no
    hidden       yes
    to_define    {
        echo {`define NDS_BIU_PREFETCH    "$value"}
        print_integer_macro NDS_BIU_PREFETCH $value
    }
}

design_option NDS_FENCE_FLUSH_DCACHE {} {
    full_name    {NDS_FENCE_FLUSH_DCACHE}
    value        {no}
    default      no
    hidden       yes
    to_define    {
        echo {`define NDS_FENCE_FLUSH_DCACHE    "$value"}
        print_integer_macro NDS_FENCE_FLUSH_DCACHE $value
    }
}


title Debug and Trace

design_option NDS_DEBUG_SUPPORT {} {
    full_name    {Debug Support}
    value        {no yes}
    default      no
    to_define    {
        echo {`define NDS_DEBUG_SUPPORT    "$value"}
        print_integer_macro NDS_DEBUG_SUPPORT $value
        if {$value == "yes"} {echo {`define NDS_IO_DEBUG}}
    }
}

design_option NDS_DEBUG_VEC {} {
    full_name    {Debug Module Base}
    value        {textinput}
    validate     {key}
    vcmd         {validate_verilog_hex %P}
    default      64'h0000000000000088
    to_define    {
        echo {`define NDS_DEBUG_VEC $value}
    }
    post_randomize {
        set dval [selected_default NDS_DEBUG_VEC]
        set_opt_value NDS_DEBUG_VEC $dval
    }
}


design_option NDS_NUM_TRIGGER {} {
	full_name       {Number of Triggers}
	value		{2 4 8}
	default		2
	to_define	{
		if {[selected NDS_DEBUG_SUPPORT] == "yes"} {
			echo {`define NDS_NUM_TRIGGER   $value}
		} else {
			echo {`define NDS_NUM_TRIGGER   0}
		}
	}
}

design_option NDS_TRACE_INTERFACE {} {
    full_name    {Trace Interface}
    value        {none instr gen1}
    default      none
    show_value   {
        instr    {instruction-ratified}
	gen1     {instruction-gen1}
    }
    to_define    {
        echo {`define NDS_TRACE_INTERFACE    "$value"}
        if {$value == "none"} {
            echo {`define NDS_TRACE_INTERFACE_INT 0}
        }
        if {$value == "instr"} {
            echo {`define NDS_IO_TRACE_INSTR}
            echo {`define NDS_TRACE_INTERFACE_INT 1}
        }
        if {$value == "gen1"} {
            echo {`define NDS_IO_TRACE_INSTR_GEN1}
            echo {`define NDS_TRACE_INTERFACE_INT 2}
        }
    }
}

design_option NDS_PC_GPR_PROBING_SUPPORT {} {
    full_name    {Andes PC/GPR/CSR Probing Support}
    value        {no yes}
    default      no
    to_define    {
        echo {`define NDS_PC_GPR_PROBING_SUPPORT "$value"}
        if {[selected NDS_PC_GPR_PROBING_SUPPORT] == "yes"} {
            echo {`define NDS_IO_PROBING}
        }
	print_integer_macro NDS_PC_GPR_PROBING_SUPPORT $value
    }
}

title Physical Memory Attributes

design_option NDS_PMA_ENTRIES {} {
    full_name    {Number of Programmable PMA Entries}
    value        {0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16}
    default      0
    to_define    {
        echo {`define NDS_PMA_ENTRIES    $value}
    }
}

design_option NDS_DEVICE_REGION0_BASE {} {
    full_name       {Device Region0 Base}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'h00000000C0000000
    to_define       {
        echo {`define NDS_DEVICE_REGION0_BASE   $value}
    }
    post_randomize {
	set base_addr_digits [get_opt_hex_val NDS_DEVICE_REGION0_BASE]

        set dval [expr 0x$base_addr_digits % 2]
        if {$dval == 0} {
            set_opt_value NDS_DEVICE_REGION0_BASE "64'h0000000080000000"
        } else {
            set_opt_value NDS_DEVICE_REGION0_BASE "64'h00000000C0000000"
        }
    }
}

design_option NDS_DEVICE_REGION0_MASK {} {
    full_name       {Device Region0 Mask}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'hFFFFFFFFC0000000
    to_define       {
        echo {`define NDS_DEVICE_REGION0_MASK   $value}
    }
    post_randomize {
        if {[selected NDS_DEVICE_REGION0_BASE] == "64'h00000000C0000000"} {
            set_opt_value NDS_DEVICE_REGION0_MASK "64'hFFFFFFFFC0000000"
        }
        if {[selected NDS_DEVICE_REGION0_BASE] == "64'h0000000080000000"} {
            set_opt_value NDS_DEVICE_REGION0_MASK "64'hFFFFFFFF80000000"
        }
    }
}

design_option NDS_DEVICE_REGION1_BASE {} {
    full_name       {Device Region1 Base}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'hFFFFFFFFFFFFFFFF
    to_define       {
        echo {`define NDS_DEVICE_REGION1_BASE   $value}
    }
    post_randomize {
        set base_addr_digits [get_opt_hex_val NDS_DEVICE_REGION1_BASE]

        set dval [expr 0x$base_addr_digits % 2]
        if {$dval == 0} {
            set dval [selected_default NDS_DEVICE_REGION1_BASE]
            set_opt_value NDS_DEVICE_REGION1_BASE $dval
        } else {
            set_opt_value NDS_DEVICE_REGION1_BASE "64'h0000000000000000"
        }
    }
}

design_option NDS_DEVICE_REGION1_MASK {} {
    full_name       {Device Region1 Mask}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'h0000000000000000
    to_define       {
        echo {`define NDS_DEVICE_REGION1_MASK   $value}
    }
    post_randomize {
        if {[selected NDS_DEVICE_REGION1_BASE] == "64'h0000000000000000"} {
            set_opt_value NDS_DEVICE_REGION1_MASK "64'hFFFFFFFFFFFFF000"
        } else {
            set dval [selected_default NDS_DEVICE_REGION1_MASK]
            set_opt_value NDS_DEVICE_REGION1_MASK $dval
        }
    }
}

design_option NDS_DEVICE_REGION2_BASE {} {
    full_name       {Device Region2 Base}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'hFFFFFFFFFFFFFFFF
    to_define       {
        echo {`define NDS_DEVICE_REGION2_BASE   $value}
    }
    post_randomize {
        set dval [selected_default NDS_DEVICE_REGION2_BASE]
        set_opt_value NDS_DEVICE_REGION2_BASE $dval
    }
}

design_option NDS_DEVICE_REGION2_MASK {} {
    full_name       {Device Region2 Mask}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'h0000000000000000
    to_define       {
        echo {`define NDS_DEVICE_REGION2_MASK   $value}
    }
    post_randomize {
        set dval [selected_default NDS_DEVICE_REGION2_MASK]
        set_opt_value NDS_DEVICE_REGION2_MASK $dval
    }
}

design_option NDS_DEVICE_REGION3_BASE {} {
    full_name       {Device Region3 Base}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'hFFFFFFFFFFFFFFFF
    to_define       {
        echo {`define NDS_DEVICE_REGION3_BASE   $value}
    }
    post_randomize {
        set dval [selected_default NDS_DEVICE_REGION3_BASE]
        set_opt_value NDS_DEVICE_REGION3_BASE $dval
    }
}

design_option NDS_DEVICE_REGION3_MASK {} {
    full_name       {Device Region3 Mask}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'h0000000000000000
    to_define       {
        echo {`define NDS_DEVICE_REGION3_MASK   $value}
    }
    post_randomize {
        set dval [selected_default NDS_DEVICE_REGION3_MASK]
        set_opt_value NDS_DEVICE_REGION3_MASK $dval
    }
}

design_option NDS_DEVICE_REGION4_BASE {} {
    full_name       {Device Region4 Base}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'hFFFFFFFFFFFFFFFF
    to_define       {
        echo {`define NDS_DEVICE_REGION4_BASE   $value}
    }
    post_randomize {
        set dval [selected_default NDS_DEVICE_REGION4_BASE]
        set_opt_value NDS_DEVICE_REGION4_BASE $dval
    }
}

design_option NDS_DEVICE_REGION4_MASK {} {
    full_name       {Device Region4 Mask}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'h0000000000000000
    to_define       {
        echo {`define NDS_DEVICE_REGION4_MASK   $value}
    }
    post_randomize {
        set dval [selected_default NDS_DEVICE_REGION4_MASK]
        set_opt_value NDS_DEVICE_REGION4_MASK $dval
    }
}

design_option NDS_DEVICE_REGION5_BASE {} {
    full_name       {Device Region5 Base}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'hFFFFFFFFFFFFFFFF
    to_define       {
        echo {`define NDS_DEVICE_REGION5_BASE   $value}
    }
    post_randomize {
        set dval [selected_default NDS_DEVICE_REGION5_BASE]
        set_opt_value NDS_DEVICE_REGION5_BASE $dval
    }
}

design_option NDS_DEVICE_REGION5_MASK {} {
    full_name       {Device Region5 Mask}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'h0000000000000000
    to_define       {
        echo {`define NDS_DEVICE_REGION5_MASK   $value}
    }
    post_randomize {
        set dval [selected_default NDS_DEVICE_REGION5_MASK]
        set_opt_value NDS_DEVICE_REGION5_MASK $dval
    }
}

design_option NDS_DEVICE_REGION6_BASE {} {
    full_name       {Device Region6 Base}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'hFFFFFFFFFFFFFFFF
    to_define       {
        echo {`define NDS_DEVICE_REGION6_BASE   $value}
    }
    post_randomize {
        set dval [selected_default NDS_DEVICE_REGION6_BASE]
        set_opt_value NDS_DEVICE_REGION6_BASE $dval
    }
}

design_option NDS_DEVICE_REGION6_MASK {} {
    full_name       {Device Region6 Mask}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'h0000000000000000
    to_define       {
        echo {`define NDS_DEVICE_REGION6_MASK   $value}
    }
    post_randomize {
        set dval [selected_default NDS_DEVICE_REGION6_MASK]
        set_opt_value NDS_DEVICE_REGION6_MASK $dval
    }
}

design_option NDS_DEVICE_REGION7_BASE {} {
    full_name       {Device Region7 Base}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'hFFFFFFFFFFFFFFFF
    to_define       {
        echo {`define NDS_DEVICE_REGION7_BASE   $value}
    }
    post_randomize {
        set dval [selected_default NDS_DEVICE_REGION7_BASE]
        set_opt_value NDS_DEVICE_REGION7_BASE $dval
    }
}

design_option NDS_DEVICE_REGION7_MASK {} {
    full_name       {Device Region7 Mask}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'h0000000000000000
    to_define       {
        echo {`define NDS_DEVICE_REGION7_MASK   $value}
    }
    post_randomize {
        set dval [selected_default NDS_DEVICE_REGION7_MASK]
        set_opt_value NDS_DEVICE_REGION7_MASK $dval
    }
}


design_option NDS_WRITETHROUGH_REGION0_BASE {} {
    full_name       {Writethrough Region0 Base}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'h0000000040000000
    to_define       {
        echo {`define NDS_WRITETHROUGH_REGION0_BASE   $value}
    }
    post_randomize {
        set hex_digits [get_opt_hex_val NDS_WRITETHROUGH_REGION0_BASE]
        set dval [expr 0x$hex_digits % 2]
        if {$dval == 0} {
            set_opt_value NDS_WRITETHROUGH_REGION0_BASE "64'h0000000000000000"
        } else {
            set_opt_value NDS_WRITETHROUGH_REGION0_BASE "64'h0000000040000000"
        }
    }
}

design_option NDS_WRITETHROUGH_REGION0_MASK {} {
    full_name       {Writethrough Region0 Mask}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'hFFFFFFFFC0000000
    to_define       {
        echo {`define NDS_WRITETHROUGH_REGION0_MASK   $value}
    }
    post_randomize {
        if {[selected NDS_WRITETHROUGH_REGION0_BASE] == "64'h0000000000000000"} {
            set_opt_value NDS_WRITETHROUGH_REGION0_MASK "64'hFFFFFFFF80000000"
        }
        if {[selected NDS_WRITETHROUGH_REGION0_BASE] == "64'h0000000040000000"} {
            set_opt_value NDS_WRITETHROUGH_REGION0_MASK "64'hFFFFFFFFC0000000"
        }
    }
}

design_option NDS_WRITETHROUGH_REGION1_BASE {} {
    full_name       {Writethrough Region1 Base}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'hFFFFFFFFFFFFFFFF
    to_define       {
        echo {`define NDS_WRITETHROUGH_REGION1_BASE   $value}
    }
    post_randomize {
        set dval [selected_default NDS_WRITETHROUGH_REGION1_BASE]
        set_opt_value NDS_WRITETHROUGH_REGION1_BASE $dval
    }
}

design_option NDS_WRITETHROUGH_REGION1_MASK {} {
    full_name       {Writethrough Region1 Mask}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'h0000000000000000
    to_define       {
        echo {`define NDS_WRITETHROUGH_REGION1_MASK   $value}
    }
    post_randomize {
        set dval [selected_default NDS_WRITETHROUGH_REGION1_MASK]
        set_opt_value NDS_WRITETHROUGH_REGION1_MASK $dval
    }
}

design_option NDS_WRITETHROUGH_REGION2_BASE {} {
    full_name       {Writethrough Region2 Base}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'hFFFFFFFFFFFFFFFF
    to_define       {
        echo {`define NDS_WRITETHROUGH_REGION2_BASE   $value}
    }
    post_randomize {
        set dval [selected_default NDS_WRITETHROUGH_REGION2_BASE]
        set_opt_value NDS_WRITETHROUGH_REGION2_BASE $dval
    }
}

design_option NDS_WRITETHROUGH_REGION2_MASK {} {
    full_name       {Writethrough Region2 Mask}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'h0000000000000000
    to_define       {
        echo {`define NDS_WRITETHROUGH_REGION2_MASK   $value}
    }
    post_randomize {
        set dval [selected_default NDS_WRITETHROUGH_REGION2_MASK]
        set_opt_value NDS_WRITETHROUGH_REGION2_MASK $dval
    }
}

design_option NDS_WRITETHROUGH_REGION3_BASE {} {
    full_name       {Writethrough Region3 Base}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'hFFFFFFFFFFFFFFFF
    to_define       {
        echo {`define NDS_WRITETHROUGH_REGION3_BASE   $value}
    }
    post_randomize {
        set dval [selected_default NDS_WRITETHROUGH_REGION3_BASE]
        set_opt_value NDS_WRITETHROUGH_REGION3_BASE $dval
    }
}

design_option NDS_WRITETHROUGH_REGION3_MASK {} {
    full_name       {Writethrough Region3 Mask}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'h0000000000000000
    to_define       {
        echo {`define NDS_WRITETHROUGH_REGION3_MASK   $value}
    }
    post_randomize {
        set dval [selected_default NDS_WRITETHROUGH_REGION3_MASK]
        set_opt_value NDS_WRITETHROUGH_REGION3_MASK $dval
    }
}

design_option NDS_WRITETHROUGH_REGION4_BASE {} {
    full_name       {Writethrough Region4 Base}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'hFFFFFFFFFFFFFFFF
    to_define       {
        echo {`define NDS_WRITETHROUGH_REGION4_BASE   $value}
    }
    post_randomize {
        set dval [selected_default NDS_WRITETHROUGH_REGION4_BASE]
        set_opt_value NDS_WRITETHROUGH_REGION4_BASE $dval
    }
}

design_option NDS_WRITETHROUGH_REGION4_MASK {} {
    full_name       {Writethrough Region4 Mask}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'h0000000000000000
    to_define       {
        echo {`define NDS_WRITETHROUGH_REGION4_MASK   $value}
    }
    post_randomize {
        set dval [selected_default NDS_WRITETHROUGH_REGION4_MASK]
        set_opt_value NDS_WRITETHROUGH_REGION4_MASK $dval
    }
}

design_option NDS_WRITETHROUGH_REGION5_BASE {} {
    full_name       {Writethrough Region5 Base}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'hFFFFFFFFFFFFFFFF
    to_define       {
        echo {`define NDS_WRITETHROUGH_REGION5_BASE   $value}
    }
    post_randomize {
        set dval [selected_default NDS_WRITETHROUGH_REGION5_BASE]
        set_opt_value NDS_WRITETHROUGH_REGION5_BASE $dval
    }
}

design_option NDS_WRITETHROUGH_REGION5_MASK {} {
    full_name       {Writethrough Region5 Mask}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'h0000000000000000
    to_define       {
        echo {`define NDS_WRITETHROUGH_REGION5_MASK   $value}
    }
    post_randomize {
        set dval [selected_default NDS_WRITETHROUGH_REGION5_MASK]
        set_opt_value NDS_WRITETHROUGH_REGION5_MASK $dval
    }
}

design_option NDS_WRITETHROUGH_REGION6_BASE {} {
    full_name       {Writethrough Region6 Base}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'hFFFFFFFFFFFFFFFF
    to_define       {
        echo {`define NDS_WRITETHROUGH_REGION6_BASE   $value}
    }
    post_randomize {
        set dval [selected_default NDS_WRITETHROUGH_REGION6_BASE]
        set_opt_value NDS_WRITETHROUGH_REGION6_BASE $dval
    }
}

design_option NDS_WRITETHROUGH_REGION6_MASK {} {
    full_name       {Writethrough Region6 Mask}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'h0000000000000000
    to_define       {
        echo {`define NDS_WRITETHROUGH_REGION6_MASK   $value}
    }
    post_randomize {
        set dval [selected_default NDS_WRITETHROUGH_REGION6_MASK]
        set_opt_value NDS_WRITETHROUGH_REGION6_MASK $dval
    }
}

design_option NDS_WRITETHROUGH_REGION7_BASE {} {
    full_name       {Writethrough Region7 Base}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'hFFFFFFFFFFFFFFFF
    to_define       {
        echo {`define NDS_WRITETHROUGH_REGION7_BASE   $value}
    }
    post_randomize {
        set dval [selected_default NDS_WRITETHROUGH_REGION7_BASE]
        set_opt_value NDS_WRITETHROUGH_REGION7_BASE $dval
    }
}

design_option NDS_WRITETHROUGH_REGION7_MASK {} {
    full_name       {Writethrough Region7 Mask}
    value           {textinput}
    validate        {key}
    vcmd            {validate_verilog_hex %P}
    default         64'h0000000000000000
    to_define       {
        echo {`define NDS_WRITETHROUGH_REGION7_MASK   $value}
    }
    post_randomize {
        set dval [selected_default NDS_WRITETHROUGH_REGION7_MASK]
        set_opt_value NDS_WRITETHROUGH_REGION7_MASK $dval
    }
}

title Integration

design_option NDS_RAM_CTRL_IN {} {
    full_name    {RAM Control In}
    value        {no yes}
    default      no
    to_define    {
    }
}

design_option NDS_BTB_RAM_CTRL_IN_WIDTH {} {
    full_name   {BTB RAM Control In Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_BTB_RAM_CTRL_IN_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_BTB_RAM_CTRL_IN_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_BTB_RAM_CTRL_IN_WIDTH $rval
    }
}

design_option NDS_ILM_RAM_CTRL_IN_WIDTH {} {
    full_name   {ILM RAM Control In Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_ILM_RAM_CTRL_IN_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_ILM_RAM_CTRL_IN_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_ILM_RAM_CTRL_IN_WIDTH $rval
    }
}

design_option NDS_DLM_RAM_CTRL_IN_WIDTH {} {
    full_name   {DLM RAM Control In Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_DLM_RAM_CTRL_IN_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_DLM_RAM_CTRL_IN_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_DLM_RAM_CTRL_IN_WIDTH $rval
    }
}

design_option NDS_ICACHE_TAG_RAM_CTRL_IN_WIDTH {} {
    full_name   {I-Cache Tag RAM Control In Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_ICACHE_TAG_RAM_CTRL_IN_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_ICACHE_TAG_RAM_CTRL_IN_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_ICACHE_TAG_RAM_CTRL_IN_WIDTH $rval
    }
}

design_option NDS_ICACHE_DATA_RAM_CTRL_IN_WIDTH {} {
    full_name   {I-Cache Data RAM Control In Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_ICACHE_DATA_RAM_CTRL_IN_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_ICACHE_DATA_RAM_CTRL_IN_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_ICACHE_DATA_RAM_CTRL_IN_WIDTH $rval
    }
}

design_option NDS_DCACHE_TAG_RAM_CTRL_IN_WIDTH {} {
    full_name   {D-Cache Tag RAM Control In Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_DCACHE_TAG_RAM_CTRL_IN_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_DCACHE_TAG_RAM_CTRL_IN_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_DCACHE_TAG_RAM_CTRL_IN_WIDTH $rval
    }
}

design_option NDS_DCACHE_DATA_RAM_CTRL_IN_WIDTH {} {
    full_name   {D-Cache Data RAM Control In Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_DCACHE_DATA_RAM_CTRL_IN_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_DCACHE_DATA_RAM_CTRL_IN_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_DCACHE_DATA_RAM_CTRL_IN_WIDTH $rval
    }
}

design_option NDS_DCACHE_WPT_RAM_CTRL_IN_WIDTH {} {
    full_name   {D-Cache WPT RAM Control In Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_DCACHE_WPT_RAM_CTRL_IN_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_DCACHE_WPT_RAM_CTRL_IN_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_DCACHE_WPT_RAM_CTRL_IN_WIDTH $rval
    }
}

design_option NDS_STLB_RAM_CTRL_IN_WIDTH {} {
    full_name   {STLB RAM Control In Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_STLB_RAM_CTRL_IN_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_STLB_RAM_CTRL_IN_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_STLB_RAM_CTRL_IN_WIDTH $rval
    }
}

design_option NDS_STLB_TAG_RAM_CTRL_IN_WIDTH {} {
    full_name   {STLB Tag RAM Control In Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_STLB_TAG_RAM_CTRL_IN_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_STLB_TAG_RAM_CTRL_IN_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_STLB_TAG_RAM_CTRL_IN_WIDTH $rval
    }
}

design_option NDS_STLB_DATA_RAM_CTRL_IN_WIDTH {} {
    full_name   {STLB Data RAM Control In Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_STLB_DATA_RAM_CTRL_IN_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_STLB_DATA_RAM_CTRL_IN_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_STLB_DATA_RAM_CTRL_IN_WIDTH $rval
    }
}

design_option NDS_L2C_TAG_RAM_CTRL_IN_WIDTH {} {
    full_name   {L2C Tag RAM Control In Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_L2C_TAG_RAM_CTRL_IN_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_L2C_TAG_RAM_CTRL_IN_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_L2C_TAG_RAM_CTRL_IN_WIDTH $rval
    }
}

design_option NDS_L2C_DATA_RAM_CTRL_IN_WIDTH {} {
    full_name   {L2C Data RAM Control In Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_L2C_DATA_RAM_CTRL_IN_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_L2C_DATA_RAM_CTRL_IN_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_L2C_DATA_RAM_CTRL_IN_WIDTH $rval
    }
}

design_option NDS_RAM_CTRL_OUT {} {
    full_name    {RAM Control Out}
    value        {no yes}
    default      no
    to_define    {
    }
}

design_option NDS_BTB_RAM_CTRL_OUT_WIDTH {} {
    full_name   {BTB RAM Control Out Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_BTB_RAM_CTRL_OUT_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_BTB_RAM_CTRL_OUT_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_BTB_RAM_CTRL_OUT_WIDTH $rval
    }
}

design_option NDS_ILM_RAM_CTRL_OUT_WIDTH {} {
    full_name   {ILM RAM Control Out Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_ILM_RAM_CTRL_OUT_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_ILM_RAM_CTRL_OUT_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_ILM_RAM_CTRL_OUT_WIDTH $rval
    }
}

design_option NDS_DLM_RAM_CTRL_OUT_WIDTH {} {
    full_name   {DLM RAM Control Out Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_DLM_RAM_CTRL_OUT_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_DLM_RAM_CTRL_OUT_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_DLM_RAM_CTRL_OUT_WIDTH $rval
    }
}

design_option NDS_ICACHE_TAG_RAM_CTRL_OUT_WIDTH {} {
    full_name   {I-Cache Tag RAM Control Out Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_ICACHE_TAG_RAM_CTRL_OUT_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_ICACHE_TAG_RAM_CTRL_OUT_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_ICACHE_TAG_RAM_CTRL_OUT_WIDTH $rval
    }
}

design_option NDS_ICACHE_DATA_RAM_CTRL_OUT_WIDTH {} {
    full_name   {I-Cache Data RAM Control Out Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_ICACHE_DATA_RAM_CTRL_OUT_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_ICACHE_DATA_RAM_CTRL_OUT_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_ICACHE_DATA_RAM_CTRL_OUT_WIDTH $rval
    }
}

design_option NDS_DCACHE_TAG_RAM_CTRL_OUT_WIDTH {} {
    full_name   {D-Cache Tag RAM Control Out Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_DCACHE_TAG_RAM_CTRL_OUT_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_DCACHE_TAG_RAM_CTRL_OUT_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_DCACHE_TAG_RAM_CTRL_OUT_WIDTH $rval
    }
}

design_option NDS_DCACHE_DATA_RAM_CTRL_OUT_WIDTH {} {
    full_name   {D-Cache Data RAM Control Out Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_DCACHE_DATA_RAM_CTRL_OUT_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_DCACHE_DATA_RAM_CTRL_OUT_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_DCACHE_DATA_RAM_CTRL_OUT_WIDTH $rval
    }
}

design_option NDS_DCACHE_WPT_RAM_CTRL_OUT_WIDTH {} {
    full_name   {D-Cache WPT RAM Control Out Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_DCACHE_WPT_RAM_CTRL_OUT_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_DCACHE_WPT_RAM_CTRL_OUT_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_DCACHE_WPT_RAM_CTRL_OUT_WIDTH $rval
    }
}

design_option NDS_STLB_RAM_CTRL_OUT_WIDTH {} {
    full_name   {STLB RAM Control Out Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_STLB_RAM_CTRL_OUT_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_STLB_RAM_CTRL_OUT_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_STLB_RAM_CTRL_OUT_WIDTH $rval
    }
}

design_option NDS_STLB_TAG_RAM_CTRL_OUT_WIDTH {} {
    full_name   {STLB Tag RAM Control Out Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_STLB_TAG_RAM_CTRL_OUT_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_STLB_TAG_RAM_CTRL_OUT_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_STLB_TAG_RAM_CTRL_OUT_WIDTH $rval
    }
}

design_option NDS_STLB_DATA_RAM_CTRL_OUT_WIDTH {} {
    full_name   {STLB Data RAM Control Out Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_STLB_DATA_RAM_CTRL_OUT_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_STLB_DATA_RAM_CTRL_OUT_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_STLB_DATA_RAM_CTRL_OUT_WIDTH $rval
    }
}

design_option NDS_L2C_TAG_RAM_CTRL_OUT_WIDTH {} {
    full_name   {L2C Tag RAM Control Out Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_L2C_TAG_RAM_CTRL_OUT_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_L2C_TAG_RAM_CTRL_OUT_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_L2C_TAG_RAM_CTRL_OUT_WIDTH $rval
    }
}

design_option NDS_L2C_DATA_RAM_CTRL_OUT_WIDTH {} {
    full_name   {L2C Data RAM Control Out Width (1-128)}
    value       {textinput}
    validate    {key}
    vcmd        {string is int %P}
    default      1
    to_define    {
        echo {`define NDS_L2C_DATA_RAM_CTRL_OUT_WIDTH    $value}
    }
    post_randomize {
        set rval [selected NDS_L2C_DATA_RAM_CTRL_OUT_WIDTH]
        set rval [expr $rval % 128 + 1]
        set_opt_value NDS_L2C_DATA_RAM_CTRL_OUT_WIDTH $rval
    }
}

proc print_integer_macro {macro_name macro_value} {
	set print_info "`define ${macro_name}_INT `NDS_CFG_[string toupper $macro_value]"
	echo $print_info
}

proc define_l2c_tag_ram_width {} {
    set l2c_size [selected NDS_L2C_CACHE_SIZE_KB]
    set l2c_ecc_type [selected NDS_L2C_ECC_TYPE]
    set l2c_banks [selected NDS_L2C_BANKS]
    set tag_ram_aw [selected NDS_L2C_TAG_RAM_AW]
    set biu_addr_width [selected NDS_BIU_ADDR_WIDTH]
    set biu_data_width [selected NDS_BIU_DATA_WIDTH]
    set nhart [selected NDS_NHART]

    if {$l2c_size != 0} {
        set idx_lsb [expr 6 + int(log($l2c_banks)/log(2))]
        set idx_width [expr int(log($l2c_size*1024/16/64/$l2c_banks)/log(2))]
        set tag_lsb [expr $idx_lsb + $idx_width]
        set tag_msb [expr $biu_addr_width - 1]
        set tag_width [expr $tag_msb - $tag_lsb + 1]
        set tag_ram_insts_log2 [expr $idx_width - $tag_ram_aw + 4]
        set tag_ram_insts [expr int(pow(2,$tag_ram_insts_log2)) ]
        set tag_word_dw [expr 3 + $nhart + $tag_width]
        if {$l2c_ecc_type == 1} {
            if {$tag_word_dw > 32} {
                set tag_ram_dw [expr $tag_word_dw + 8]
            } else {
                set tag_ram_dw [expr $tag_word_dw + 7]
            }
        } else {
            set tag_ram_dw $tag_word_dw
        }
    } else {
        set tag_ram_dw 1
        set tag_ram_aw 1
        set tag_ram_insts 0
    }
   
    set l2c_size_macro "`define NDS_L2C_CACHE_SIZE_KB_"
    append l2c_size_macro $l2c_size
    echo $l2c_size_macro
    set tag_ram_dw_macro "`define NDS_L2C_TAG_RAM_DW    "
    append tag_ram_dw_macro $tag_ram_dw
    set tag_ram_aw_macro "`define NDS_L2C_TAG_RAM_AW    "
    append tag_ram_aw_macro $tag_ram_aw
    set tag_ram_insts_macro "`define NDS_L2C_BANK_TAG_RAM_INSTS    "
    append tag_ram_insts_macro $tag_ram_insts
    echo $tag_ram_dw_macro
    echo $tag_ram_aw_macro
    echo $tag_ram_insts_macro
}

proc define_l2c_data_ram_width {} {
    set l2c_size [selected NDS_L2C_CACHE_SIZE_KB]
    set l2c_banks [selected NDS_L2C_BANKS]

    if {$l2c_size != 0} {
        set l2c_ecc_type [selected NDS_L2C_ECC_TYPE]
        set data_ram_aw [selected NDS_L2C_DATA_RAM_AW]
        set biu_addr_width [selected NDS_BIU_ADDR_WIDTH]
        set biu_data_width [selected NDS_BIU_DATA_WIDTH]
        set nhart [selected NDS_NHART]

        set idx_width [expr int((log($l2c_size*1024/16/64/$l2c_banks)/log(2)))]
        set data_ram_insts_log2 [expr $idx_width - $data_ram_aw + 4]
        set data_ram_insts [expr int(pow(2,$data_ram_insts_log2)) ]
        set data_word_dw [expr 512]
        if {$l2c_ecc_type == 1} {
            set data_ram_dw [expr $data_word_dw + 64]
        } else {
            set data_ram_dw $data_word_dw
        }
        set data_ram_bwew [expr int($data_ram_dw/8)]
    } else {
        set data_ram_dw 8
        set data_ram_bwew 1
        set data_ram_aw 1
        set data_ram_insts 0
    }

    set data_ram_dw_macro "`define NDS_L2C_DATA_RAM_DW    "
    append data_ram_dw_macro $data_ram_dw
    set data_ram_bwew_macro "`define NDS_L2C_DATA_RAM_BWEW    "
    append data_ram_bwew_macro $data_ram_bwew
    set data_ram_aw_macro "`define NDS_L2C_DATA_RAM_AW    "
    append data_ram_aw_macro $data_ram_aw
    set data_ram_insts_macro "`define NDS_L2C_BANK_DATA_RAM_INSTS    "
    append data_ram_insts_macro $data_ram_insts
    echo $data_ram_dw_macro
    echo $data_ram_bwew_macro
    echo $data_ram_aw_macro
    echo $data_ram_insts_macro
}

proc define_icache_ram_width {} {
    if {[selected NDS_ICACHE_SIZE] == 0} {
        echo {`define NDS_ICACHE_TAG_RAM_AW    1}
        echo {`define NDS_ICACHE_TAG_RAM_DW    1}
        echo {`define NDS_ICACHE_DATA_RAM_AW    1}
        echo {`define NDS_ICACHE_DATA_RAM_DW    1}
    } else {
        set icache_size [selected NDS_ICACHE_SIZE]
        set icache_way [selected NDS_ICACHE_WAY]
        set icache_ecc_type [selected NDS_ICACHE_ECC_TYPE]
        set line_size [selected NDS_CACHE_LINE_SIZE]
        set biu_addr_width [selected NDS_BIU_ADDR_WIDTH]
        set mmu_scheme [selected NDS_MMU_SCHEME]
        set tag_ram_aw [expr int(log($icache_size * 1024 / $icache_way / $line_size) / log(2))]
        set tag_ram_aw_macro "`define NDS_ICACHE_TAG_RAM_AW    "
        append tag_ram_aw_macro $tag_ram_aw
        echo $tag_ram_aw_macro
        set tag_ram_dw 0
        if {[expr $icache_size / $icache_way] > 4} {
            set tag_ram_dw [expr $biu_addr_width + 3 - 12]
        } else {
            set tag_ram_dw [expr $biu_addr_width + 3 - int(log($icache_size * 1024 / $icache_way) / log(2))]
        }
        if {$icache_ecc_type == "none"} {
            set tag_ram_dw [expr $tag_ram_dw + 0]
        } elseif {$tag_ram_dw > 32} {
            set tag_ram_dw [expr $tag_ram_dw + 8]
        } elseif {$icache_ecc_type == "ecc"} {
            set tag_ram_dw [expr $tag_ram_dw + 7]
        } else {
            set tag_ram_dw [expr $tag_ram_dw + 4]
        }
        set tag_ram_dw_macro "`define NDS_ICACHE_TAG_RAM_DW    "
        append tag_ram_dw_macro $tag_ram_dw
        echo $tag_ram_dw_macro
        if {$icache_way == "4"} {
    	set data_ram_aw [expr int(log($icache_size * 1024 / $icache_way / 8) / log(2))]
        } elseif {$icache_way == "2"} {
    	set data_ram_aw [expr int(log($icache_size * 1024 / $icache_way / 8) / log(2)-1)]
        } else {
    	set data_ram_aw [expr int(log($icache_size * 1024 / $icache_way / 8) / log(2)-2)]
        }
        set data_ram_aw_macro "`define NDS_ICACHE_DATA_RAM_AW    "
        append data_ram_aw_macro $data_ram_aw
        echo $data_ram_aw_macro
        if {$icache_ecc_type == "none"} {
            echo {`define NDS_ICACHE_DATA_RAM_DW    32}
        } elseif {$icache_ecc_type == "parity"} {
            echo {`define NDS_ICACHE_DATA_RAM_DW    36}
        } else {
            echo {`define NDS_ICACHE_DATA_RAM_DW    39}
	}
    }
}

proc define_dcache_ram_width {} {
    if {[selected NDS_DCACHE_SIZE] == 0} {
        echo {`define NDS_DCACHE_TAG_RAM_AW    1}
        echo {`define NDS_DCACHE_TAG_RAM_DW    1}
        echo {`define NDS_DCACHE_DATA_RAM_AW    1}
        echo {`define NDS_DCACHE_DATA_RAM_DW    1}
        echo {`define NDS_DCACHE_DATA_RAM_BWEW    1}
        echo {`define NDS_DCACHE_WPT_RAM_AW    1}
        echo {`define NDS_DCACHE_WPT_RAM_DW    1}
        echo {`define NDS_DCACHE_WPT_RAM_BWEW    1}
    } else {
        set dcache_size [selected NDS_DCACHE_SIZE]
        set dcache_way [selected NDS_DCACHE_WAY]
        set dcache_ecc_type [selected NDS_DCACHE_ECC_TYPE]
        set line_size [selected NDS_CACHE_LINE_SIZE]
        set biu_addr_width [selected NDS_BIU_ADDR_WIDTH]
        set tag_ram_aw [expr int(log($dcache_size * 1024 / $dcache_way / $line_size) / log(2))]
        set tag_ram_aw_macro "`define NDS_DCACHE_TAG_RAM_AW    "
        append tag_ram_aw_macro $tag_ram_aw
        echo $tag_ram_aw_macro
        set tag_ram_dw [expr $biu_addr_width + 4 - int(log($dcache_size * 1024 / $dcache_way) / log(2))]
        if {$dcache_ecc_type == "none"} {
            set tag_ram_dw [expr $tag_ram_dw + 0]
        } elseif {$tag_ram_dw > 32} {
            set tag_ram_dw [expr $tag_ram_dw + 8]
        } elseif {$dcache_ecc_type == "ecc"} {
            set tag_ram_dw [expr $tag_ram_dw + 7]
        } else {
            set tag_ram_dw [expr $tag_ram_dw + 4]
        }
        set tag_ram_dw_macro "`define NDS_DCACHE_TAG_RAM_DW    "
        append tag_ram_dw_macro $tag_ram_dw
        echo $tag_ram_dw_macro
        if {[selected NDS_ISA_BASE] == "rv64i"} {
            set data_ram_aw [expr int(log($dcache_size * 1024 / 4 / 8) / log(2))]
            if {$dcache_ecc_type == "none"} {
                echo {`define NDS_DCACHE_DATA_RAM_DW    64}
            } elseif {$dcache_ecc_type == "parity"} {
                echo {`define NDS_DCACHE_DATA_RAM_DW    72}
            } else {
                echo {`define NDS_DCACHE_DATA_RAM_DW    72}
            }
            echo {`define NDS_DCACHE_DATA_RAM_BWEW    8}
        } else {
            set data_ram_aw [expr int(log($dcache_size * 1024 / 4 / 4) / log(2))]
            if {$dcache_ecc_type == "none"} {
                echo {`define NDS_DCACHE_DATA_RAM_DW    32}
            } elseif {$dcache_ecc_type == "parity"} {
                echo {`define NDS_DCACHE_DATA_RAM_DW    36}
            } else {
                echo {`define NDS_DCACHE_DATA_RAM_DW    39}
            }
            echo {`define NDS_DCACHE_DATA_RAM_BWEW    4}
        }
        set data_ram_aw_macro "`define NDS_DCACHE_DATA_RAM_AW    "
        append data_ram_aw_macro $data_ram_aw
        echo $data_ram_aw_macro
        if {[selected NDS_L2C_CACHE_SIZE_KB] != 0} {
            echo {`define NDS_DCACHE_WPT_RAM_AW    9}
            echo {`define NDS_DCACHE_WPT_RAM_DW   16}
            echo {`define NDS_DCACHE_WPT_RAM_BWEW  2}
        } else {
            echo {`define NDS_DCACHE_WPT_RAM_AW    1}
            echo {`define NDS_DCACHE_WPT_RAM_DW    1}
            echo {`define NDS_DCACHE_WPT_RAM_BWEW  1}
        }
    }
}

proc define_stlb_ram_width {} {
    if {[selected NDS_MMU_SCHEME] == "bare"} {
        echo {`define NDS_STLB_RAM_AW    1}
        echo {`define NDS_STLB_RAM_DW    1}
        echo {`define NDS_STLB_TAG_RAM_DW    1}
        echo {`define NDS_STLB_DATA_RAM_DW    1}
    } else {
        set stlb_entries [selected NDS_STLB_ENTRIES]
        set biu_addr_width [selected NDS_BIU_ADDR_WIDTH]
        set valen [selected NDS_VALEN]
        set stlb_ram_aw [expr int(log($stlb_entries / 4) / log(2))]
        echo "`define NDS_STLB_RAM_AW	$stlb_ram_aw"

        set stlb_tag_ram_dw [expr $valen - $stlb_ram_aw - 12 + 9 + 1]
        set stlb_data_ram_dw [expr 8 + $biu_addr_width -12]
	set stlb_ram_dw [expr $stlb_tag_ram_dw + $stlb_data_ram_dw]

	if {[selected NDS_STLB_ECC_TYPE] == 1} {
		if {${stlb_tag_ram_dw} > 32} {
		        set stlb_tag_ram_dw [expr ${stlb_tag_ram_dw} + 8]
		} else {
		        set stlb_tag_ram_dw [expr ${stlb_tag_ram_dw} + 7]
		}
		if {${stlb_data_ram_dw} > 32} {
		        set stlb_data_ram_dw [expr ${stlb_data_ram_dw} + 8]
		} else {
		        set stlb_data_ram_dw [expr ${stlb_data_ram_dw} + 7]
		}
	}
        echo "`define NDS_STLB_RAM_DW		$stlb_ram_dw"
        echo "`define NDS_STLB_TAG_RAM_DW	$stlb_tag_ram_dw"
        echo "`define NDS_STLB_DATA_RAM_DW	$stlb_data_ram_dw"
    }
}

design_option NDS_VALEN {} {
    full_name    {VALEN}
    value        {textinput}
    validate     {key}
    vcmd         {string is int %P}
    default      39
    hidden       yes
    to_define    {
        echo {`define NDS_VALEN    $value}
    }
    post_randomize {
        set rval [selected NDS_VALEN]
        set rval [expr $rval % 65]
        if {$rval < 32} {
            set rval [expr $rval + 32]
        }
        set_opt_value NDS_VALEN $rval
    }
}

design_option NDS_XLEN {} {
    full_name    {XLEN}
    value        {32 64}
    default      32
    hidden       yes
    to_define    {
        echo {`define NDS_XLEN    $value}
    }
}

design_option NDS_IO_STLB {} {
    full_name    {IO STLB}
    value        {0 1}
    default      0
    hidden       yes
    to_define    {
        if {$value == 1} {
            echo {`define NDS_IO_STLB}
	    if {[selected NDS_RAM_CTRL_IN] == "yes"} {
                if {[selected NDS_STLB_ECC_TYPE] == 1} {
                    echo {`define NDS_IO_STLB_RAM_ECC_CTRL_IN}
                } else {
                    echo {`define NDS_IO_STLB_RAM_NECC_CTRL_IN}
                }
	    }
	    if {[selected NDS_RAM_CTRL_OUT] == "yes"} {
                if {[selected NDS_STLB_ECC_TYPE] == 1} {
                    echo {`define NDS_IO_STLB_RAM_ECC_CTRL_OUT}
                } else {
                    echo {`define NDS_IO_STLB_RAM_NECC_CTRL_OUT}
                }
	    }
	    if {[selected NDS_STLB_ECC_TYPE] == 0} {
	    	echo {`define NDS_IO_STLB_RAM_NECC}
	    }
	    if {[selected NDS_STLB_ECC_TYPE] == 1} {
	    	echo {`define NDS_IO_STLB_RAM_ECC}
	    }
        }
    }
}

constraint NDS_RVV_SUPPORT {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
        set_opt_value NDS_RVV_SUPPORT "no"
    }
    if {[selected NDS_RVV_SUPPORT] == "yes"} {
        set_opt_value NDS_ISA_BASE "rv64i"
	set_opt_value NDS_BIU_BUS "axi"
	set_opt_value NDS_BIU_DATA_WIDTH 256
	set_opt_value NDS_CACHE_LINE_SIZE 32
	set_opt_value NDS_FAST_DEVICE_SUPPORT "no"
	set_opt_value NDS_NON_BLOCKING_SUPPORT "yes"

        disable NDS_ISA_BASE
	disable NDS_BIU_BUS
	disable NDS_BIU_DATA_WIDTH
	disable NDS_CACHE_LINE_SIZE
	disable NDS_FAST_DEVICE_SUPPORT
	disable NDS_NON_BLOCKING_SUPPORT
    } else {
        enable NDS_ISA_BASE
	enable NDS_BIU_BUS
	enable NDS_BIU_DATA_WIDTH
	enable NDS_CACHE_LINE_SIZE
	enable NDS_FAST_DEVICE_SUPPORT
	enable NDS_NON_BLOCKING_SUPPORT
    }
}

constraint NDS_DLEN {} {
    if {[selected NDS_DLEN] > [selected NDS_VLEN]} {
	set_opt_value NDS_DLEN [selected NDS_VLEN]
    }
}

constraint NDS_VTLB_ENTRIES {} {
    if {([selected NDS_RVV_SUPPORT] == "no") || (([selected NDS_PMA_ENTRIES] == 0) && ([selected NDS_PMP_ENTRIES] == 0) && ([selected NDS_MMU_SCHEME] == "bare"))} {
        set_opt_value NDS_VTLB_ENTRIES 0
        disable NDS_VTLB_ENTRIES
    } else {
        enable NDS_VTLB_ENTRIES
    }
}

constraint NDS_PMP_GRANULARITY {} {
    if {[selected NDS_RVV_SUPPORT] == "yes"} {
        set_opt_value NDS_PMP_GRANULARITY 4096
    }
}

constraint NDS_L2_SOURCE_WIDTH {} {
    if {[selected NDS_RVV_SUPPORT] == "yes"} {
        set_opt_value NDS_L2_SOURCE_WIDTH 4
    } else {
        set_opt_value NDS_L2_SOURCE_WIDTH 3
    }
}

constraint NDS_ILM_SUPPORT {} {
    if {[selected NDS_ILM_SUPPORT] == 0} {
        set_opt_value NDS_ILM_SIZE 0
        disable NDS_ILM_SIZE
    }
    if {[selected NDS_ILM_SUPPORT] == 0 && [selected NDS_DLM_SUPPORT] == 0} {
	disable NDS_LM_INTERFACE
    }
    if {[selected NDS_ILM_SUPPORT] != 0} {
        enable NDS_ILM_SIZE
	enable NDS_LM_INTERFACE
    }
}

constraint NDS_ILM_SIZE {} {
    if {[selected NDS_ILM_SIZE] == 0} {
        set_opt_value NDS_ILM_ECC_TYPE "none"
        disable NDS_ILM_BASE
        disable NDS_ILM_ECC_TYPE
	set_opt_value NDS_ILM_WAIT_CYCLE [selected_default NDS_ILM_WAIT_CYCLE]
	disable NDS_ILM_WAIT_CYCLE
    } else {
        enable NDS_ILM_BASE
	enable NDS_ILM_WAIT_CYCLE
    }
    if {[selected NDS_ILM_SIZE] != 0 && [selected NDS_LM_INTERFACE] == "ram"} {
        enable NDS_ILM_ECC_TYPE
        enable NDS_SLAVE_PORT_SUPPORT
    }
    if {[selected NDS_ILM_SIZE] == 0 && [selected NDS_DLM_SIZE] == 0} {
        set_opt_value NDS_SLAVE_PORT_SUPPORT "no"
        disable NDS_SLAVE_PORT_SUPPORT
    }
}

constraint NDS_ILM_BASE {} {
    if {[selected NDS_ILM_SIZE] != 0} {
        set ilm_sval [selected NDS_ILM_BASE]
        set format_valid [check_verilog_number $ilm_sval ilm_hval bit_length radix_type]
        if {[selected NDS_ISA_BASE] == "rv64i"} {
            set limit_len [selected NDS_BIU_ADDR_WIDTH]
        } else {
            set limit_len 32
        }
        set limit_size [expr [selected NDS_ILM_SIZE] * 1024]
        set limit_val [format %X [expr int(pow(2,$limit_len) - ($limit_size))]]
        set align_val [format %X [expr int(($limit_size) - 1)]]

        if {!$format_valid || $radix_type != "h"} {
            show_error "ERROR: $ilm_sval is not a valid hex number"
            set_opt_value NDS_ILM_BASE [selected_default NDS_ILM_BASE]
        } elseif {[expr 0x$ilm_hval > 0x$limit_val]} {
            show_error "The value $ilm_sval is to large, it should be less than or equal to $limit_len'h$limit_val"
            set_opt_value NDS_ILM_BASE [selected_default NDS_ILM_BASE]
        } elseif {[expr 0x$ilm_hval & 0x$align_val] != 0} {
		if {![highlighted NDS_ILM_BASE]} {
	    		show_error_highlight NDS_ILM_BASE "The value $ilm_sval should be align to $limit_len'h[format %X $limit_size]"
		}
	} else {
            disable_highlight NDS_ILM_BASE
        }
    }
}

constraint NDS_DLM_SUPPORT {} {
    if {[selected NDS_DLM_SUPPORT] == 0} {
        set_opt_value NDS_DLM_SIZE 0
        disable NDS_DLM_SIZE
    }
    if {[selected NDS_ILM_SUPPORT] == 0 && [selected NDS_DLM_SUPPORT] == 0} {
	disable NDS_LM_INTERFACE
    }
    if {[selected NDS_DLM_SUPPORT] != 0} {
        enable NDS_DLM_SIZE
        enable NDS_LM_INTERFACE
    }
}

constraint NDS_DLM_SIZE {} {
    if {[selected NDS_DLM_SIZE] == 0} {
        set_opt_value NDS_DLM_ECC_TYPE "none"
        set_opt_value NDS_NUM_DLM_BANKS 1
	set_opt_value NDS_DLM_WAIT_CYCLE 0
	disable NDS_DLM_BASE
        disable NDS_DLM_ECC_TYPE
        disable NDS_NUM_DLM_BANKS
	disable NDS_DLM_WAIT_CYCLE
    } else {
        enable NDS_DLM_BASE
	enable NDS_DLM_WAIT_CYCLE
        if {[selected NDS_DLM_WAIT_CYCLE] == 1} {
		set_opt_value NDS_NUM_DLM_BANKS 1
		disable NDS_NUM_DLM_BANKS
	} else {
		enable NDS_NUM_DLM_BANKS
	}
    }
    if {[selected NDS_DLM_SIZE] != 0 && [selected NDS_LM_INTERFACE] == "ram"} {
        enable NDS_DLM_ECC_TYPE
        enable NDS_SLAVE_PORT_SUPPORT
    }
    if {[selected NDS_ILM_SIZE] == 0 && [selected NDS_DLM_SIZE] == 0} {
        set_opt_value NDS_SLAVE_PORT_SUPPORT "no"
        disable NDS_SLAVE_PORT_SUPPORT
    }
}

constraint NDS_DLM_BASE {} {
    if {[selected NDS_DLM_SIZE] != 0} {
        set dlm_sval [selected NDS_DLM_BASE]
        set format_valid [check_verilog_number $dlm_sval dlm_hval bit_length radix_type]
        if {[selected NDS_ISA_BASE] == "rv64i"} {
            set limit_len [selected NDS_BIU_ADDR_WIDTH]
        } else {
            set limit_len 32
        }
        set limit_size [expr [selected NDS_DLM_SIZE] * 1024]
        set limit_val [format %X [expr int(pow(2,$limit_len) - ($limit_size))]]
        set align_val [format %X [expr int(($limit_size) - 1)]]

        if {!$format_valid} {
            show_error "ERROR: $dlm_sval is not a valid hex number"
            set_opt_value NDS_DLM_BASE [selected_default NDS_DLM_BASE]
        } elseif {[expr 0x$dlm_hval > 0x$limit_val]} {
            show_error "The value $dlm_sval is to large, it should be less than or equal to $limit_len'h$limit_val"
            set_opt_value NDS_DLM_BASE [selected_default NDS_DLM_BASE]
        } elseif {[expr 0x$dlm_hval & 0x$align_val] != 0} {
		if {![highlighted NDS_DLM_BASE]} {
			show_error_highlight NDS_DLM_BASE "The value $dlm_sval should be align to $limit_len'h[format %X $limit_size]"
		}
	} else {
            disable_highlight NDS_DLM_BASE
        }
    }
}

constraint NDS_WRITETHROUGH_REGION0_BASE {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
        set_opt_value NDS_WRITETHROUGH_REGION0_BASE "64'hFFFFFFFFFFFFFFFF"
    }
}
constraint NDS_WRITETHROUGH_REGION0_MASK {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
        set_opt_value NDS_WRITETHROUGH_REGION0_MASK "64'h0000000000000000"
    }
}

constraint NDS_WRITETHROUGH_REGION1_BASE {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
        set_opt_value NDS_WRITETHROUGH_REGION1_BASE "64'hFFFFFFFFFFFFFFFF"
    }
}
constraint NDS_WRITETHROUGH_REGION1_MASK {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
        set_opt_value NDS_WRITETHROUGH_REGION1_MASK "64'h0000000000000000"
    }
}

constraint NDS_WRITETHROUGH_REGION2_BASE {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
        set_opt_value NDS_WRITETHROUGH_REGION2_BASE "64'hFFFFFFFFFFFFFFFF"
    }
}
constraint NDS_WRITETHROUGH_REGION2_MASK {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
        set_opt_value NDS_WRITETHROUGH_REGION2_MASK "64'h0000000000000000"
    }
}

constraint NDS_WRITETHROUGH_REGION3_BASE {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
        set_opt_value NDS_WRITETHROUGH_REGION3_BASE "64'hFFFFFFFFFFFFFFFF"
    }
}
constraint NDS_WRITETHROUGH_REGION3_MASK {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
        set_opt_value NDS_WRITETHROUGH_REGION3_MASK "64'h0000000000000000"
    }
}

constraint NDS_WRITETHROUGH_REGION4_BASE {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
        set_opt_value NDS_WRITETHROUGH_REGION4_BASE "64'hFFFFFFFFFFFFFFFF"
    }
}
constraint NDS_WRITETHROUGH_REGION4_MASK {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
        set_opt_value NDS_WRITETHROUGH_REGION4_MASK "64'h0000000000000000"
    }
}

constraint NDS_WRITETHROUGH_REGION5_BASE {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
        set_opt_value NDS_WRITETHROUGH_REGION5_BASE "64'hFFFFFFFFFFFFFFFF"
    }
}
constraint NDS_WRITETHROUGH_REGION5_MASK {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
        set_opt_value NDS_WRITETHROUGH_REGION5_MASK "64'h0000000000000000"
    }
}

constraint NDS_WRITETHROUGH_REGION6_BASE {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
        set_opt_value NDS_WRITETHROUGH_REGION6_BASE "64'hFFFFFFFFFFFFFFFF"
    }
}
constraint NDS_WRITETHROUGH_REGION6_MASK {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
        set_opt_value NDS_WRITETHROUGH_REGION6_MASK "64'h0000000000000000"
    }
}

constraint NDS_WRITETHROUGH_REGION7_BASE {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
        set_opt_value NDS_WRITETHROUGH_REGION7_BASE "64'hFFFFFFFFFFFFFFFF"
    }
}
constraint NDS_WRITETHROUGH_REGION7_MASK {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
        set_opt_value NDS_WRITETHROUGH_REGION7_MASK "64'h0000000000000000"
    }
}

constraint NDS_SLAVE_PORT_SUPPORT {} {
    if {[selected NDS_ILM_SIZE] == 0 && [selected NDS_DLM_SIZE] == 0} {
        set_opt_value NDS_SLAVE_PORT_SUPPORT no
        disable NDS_SLAVE_PORT_SUPPORT
    }
    if {[selected NDS_LM_INTERFACE] == "ram"} {
        if {[selected NDS_ILM_SIZE] != 0 || [selected NDS_DLM_SIZE] != 0} {
            enable NDS_SLAVE_PORT_SUPPORT
        }
    }
}

constraint NDS_SLAVE_PORT_PATH_X2 {} {
    if {[selected NDS_SLAVE_PORT_SUPPORT] == "no"} {
        set_opt_value NDS_SLAVE_PORT_PATH_X2 no
        disable NDS_SLAVE_PORT_PATH_X2
    } else {
        enable NDS_SLAVE_PORT_PATH_X2
    }
}

constraint NDS_SLAVE_PORT_ID_WIDTH {} {
    if {[selected NDS_SLAVE_PORT_SUPPORT] == "no"} {
        set_opt_value NDS_SLAVE_PORT_ID_WIDTH [selected_default NDS_SLAVE_PORT_ID_WIDTH]
        disable NDS_SLAVE_PORT_ID_WIDTH
    } else {
        enable NDS_SLAVE_PORT_ID_WIDTH
    }
}


constraint NDS_ICACHE_SUPPORT {} {
    if {[selected NDS_ICACHE_SUPPORT] == 0} {
        set_opt_value NDS_ICACHE_SIZE 0
    }
}

constraint NDS_ICACHE_SIZE {} {
    if {[selected NDS_ICACHE_SIZE] == 0} {
        set_opt_value NDS_ICACHE_WAY 1
        set_opt_value NDS_ICACHE_ECC_TYPE "none"
        disable NDS_ICACHE_WAY
        disable NDS_ICACHE_LRU
        disable NDS_ICACHE_ECC_TYPE
    }
    if {[selected NDS_ICACHE_SIZE] != 0} {
        enable NDS_ICACHE_WAY
        enable NDS_ICACHE_LRU
        enable NDS_ICACHE_ECC_TYPE
    }
}

constraint NDS_DCACHE_SUPPORT {} {
    if {[selected NDS_DCACHE_SUPPORT] == 0} {
        set_opt_value NDS_DCACHE_SIZE 0
    }
}

constraint NDS_DCACHE_SIZE {} {
    if {[selected NDS_DCACHE_SIZE] == 0} {
        set_opt_value NDS_DCACHE_WAY 1
        set_opt_value NDS_DCACHE_ECC_TYPE "none"
	set_opt_value NDS_MSHR_DEPTH 3
	set_opt_value NDS_DCACHE_PREFETCH_SUPPORT "no"
	set_opt_value NDS_WRITE_AROUND_SUPPORT "no"
        disable NDS_DCACHE_WAY
        disable NDS_DCACHE_LRU
        disable NDS_DCACHE_ECC_TYPE
        disable NDS_MSHR_DEPTH
        disable NDS_DCACHE_PREFETCH_SUPPORT
        disable NDS_WRITE_AROUND_SUPPORT
    }
    if {[selected NDS_DCACHE_SIZE] != 0} {
        if {[selected NDS_BIU_DATA_WIDTH] == 256} {
            set_opt_value NDS_DCACHE_WAY 4
            disable NDS_DCACHE_WAY
        } else {
            enable NDS_DCACHE_WAY
        }
        enable NDS_DCACHE_LRU
        enable NDS_DCACHE_ECC_TYPE
        enable NDS_MSHR_DEPTH
        enable NDS_DCACHE_PREFETCH_SUPPORT
        enable NDS_WRITE_AROUND_SUPPORT
    }
}

constraint NDS_DCACHE_ECC_TYPE {} {
}

constraint NDS_BIU_PREFETCH {} {
    if {([selected NDS_DCACHE_SIZE] == 0) && ([selected NDS_ICACHE_SIZE] == 0)} {
        set_opt_value NDS_BIU_PREFETCH "no"
    }
}

constraint NDS_MSHR_FB_DEPTH {} {
    if {[selected NDS_MSHR_FB_DEPTH] > [selected NDS_MSHR_DEPTH] } {
        set_opt_value NDS_MSHR_FB_DEPTH [selected NDS_MSHR_DEPTH]
    }
}

constraint NDS_BRANCH_PREDICTION {} {
    if {[selected NDS_BRANCH_PREDICTION] == "dynamic"} {
        enable NDS_BTB_SIZE
    }
    if {[selected NDS_BRANCH_PREDICTION] != "dynamic"} {
        disable NDS_BTB_SIZE
    }
}

constraint NDS_NUM_TRIGGER {} {
    if {[selected NDS_DEBUG_SUPPORT] == "no"} {
        disable NDS_NUM_TRIGGER
	set_opt_value NDS_NUM_TRIGGER [selected_default NDS_NUM_TRIGGER]
    }
    if {[selected NDS_DEBUG_SUPPORT] == "yes"} {
        enable NDS_NUM_TRIGGER
    }
}

constraint NDS_DEBUG_VEC {} {
    if {[selected NDS_DEBUG_SUPPORT] == "no"} {
        disable NDS_DEBUG_VEC
	set_opt_value NDS_DEBUG_VEC [selected_default NDS_DEBUG_VEC]
    }
    if {[selected NDS_DEBUG_SUPPORT] == "yes"} {
        enable NDS_DEBUG_VEC
	if {[selected NDS_DEBUG_VEC] == [selected_default NDS_DEBUG_VEC]} {
		disable_highlight NDS_DEBUG_VEC
	} else {
		check_device_region_base_valid NDS_DEBUG_VEC
	}
    }
}

constraint NDS_MMU_SCHEME {} {
    if {[selected NDS_MMU_SCHEME] == "sv32"} {
        set_opt_value NDS_VALEN 32
    }
    if {[selected NDS_MMU_SCHEME] == "sv39"} {
        set_opt_value NDS_VALEN 39
    }
    if {[selected NDS_MMU_SCHEME] == "sv48"} {
        set_opt_value NDS_VALEN 48
    }
    if {[selected NDS_MMU_SCHEME] != "bare"} {
        set_opt_value NDS_FAST_DEVICE_SUPPORT "no"
    }
    if {[selected NDS_MMU_SCHEME] == "bare" || [selected NDS_NUM_PRIVILEGE_LEVELS] < 3} {
        if {[selected NDS_ISA_BASE] == "rv32i" || [selected NDS_ISA_BASE] == "rv32e"} {
            disable NDS_BIU_ADDR_WIDTH
        }
        set_opt_value NDS_VALEN [selected NDS_BIU_ADDR_WIDTH]
        set_opt_value NDS_ITLB_ENTRIES 0
        set_opt_value NDS_DTLB_ENTRIES 0
        set_opt_value NDS_STLB_ENTRIES 0
        set_opt_value NDS_STLB_SP_ENTRIES 0
        set_opt_value NDS_STLB_ECC_TYPE 0
        set_opt_value NDS_IO_STLB 0
        disable NDS_ITLB_ENTRIES
        disable NDS_DTLB_ENTRIES
        disable NDS_STLB_ENTRIES
        disable NDS_STLB_SP_ENTRIES
        disable NDS_STLB_ECC_TYPE
    } else {
        enable NDS_BIU_ADDR_WIDTH
        enable NDS_ITLB_ENTRIES
        enable NDS_DTLB_ENTRIES
        enable NDS_STLB_ENTRIES
        enable NDS_STLB_SP_ENTRIES
        enable NDS_STLB_ECC_TYPE
        enable NDS_IO_STLB
	disable_chk_var NDS_STLB_ENTRIES {0}
	disable_chk_var NDS_ITLB_ENTRIES {0}
	disable_chk_var NDS_DTLB_ENTRIES {0}
        set_opt_value NDS_IO_STLB 1
        if {[selected NDS_ITLB_ENTRIES] == 0} {
            set_opt_value NDS_ITLB_ENTRIES 4
        }
        if {[selected NDS_DTLB_ENTRIES] == 0} {
            set_opt_value NDS_DTLB_ENTRIES 8
        }
        if {[selected NDS_STLB_ENTRIES] == 0} {
            set_opt_value NDS_STLB_ENTRIES 32
        }
        if {[selected NDS_STLB_SP_ENTRIES] == 0} {
            set_opt_value NDS_STLB_SP_ENTRIES 4
        }
    }
}

constraint NDS_PMP_ENTRIES {} {
    if {[selected NDS_PMP_ENTRIES] != 0} {
        set_opt_value NDS_FAST_DEVICE_SUPPORT "no"
    }
}

constraint NDS_PMA_ENTRIES {} {
    if {[selected NDS_PMA_ENTRIES] != 0} {
        set_opt_value NDS_FAST_DEVICE_SUPPORT "no"
    }
}

constraint NDS_ISA_BASE {} {
    if {[selected NDS_ISA_BASE] == "rv64i"} {
        set_opt_value NDS_CACHE_LINE_SIZE 64
        set_opt_value NDS_XLEN 64
        disable NDS_CACHE_LINE_SIZE
        if {[selected NDS_MMU_SCHEME] == "sv32"} {
            set_opt_value NDS_MMU_SCHEME "sv39"
        }
    }
    if {[selected NDS_ISA_BASE] != "rv64i"} {
        set_opt_value NDS_XLEN 32
        enable NDS_CACHE_LINE_SIZE
        if {[selected NDS_MMU_SCHEME] == "sv39" || [selected NDS_MMU_SCHEME] == "sv48"} {
            set_opt_value NDS_MMU_SCHEME "sv32"
        }
    }
}

constraint NDS_NUM_PRIVILEGE_LEVELS {} {
    if {[selected NDS_NUM_PRIVILEGE_LEVELS] >= 3} {
        enable NDS_MMU_SCHEME
    }
    if {[selected NDS_NUM_PRIVILEGE_LEVELS] < 3} {
        set_opt_value NDS_MMU_SCHEME "bare"
        disable NDS_MMU_SCHEME
    }
    if {[selected NDS_NUM_PRIVILEGE_LEVELS] >= 2} {
        enable NDS_RVN_SUPPORT
    }
    if {[selected NDS_NUM_PRIVILEGE_LEVELS] < 2} {
        set_opt_value NDS_RVN_SUPPORT "no"
        disable NDS_RVN_SUPPORT
    }
}

constraint NDS_BIU_ADDR_WIDTH {} {
    if {[selected NDS_BIU_ADDR_WIDTH] > 64} {
        set_opt_value NDS_BIU_ADDR_WIDTH 64
    } elseif {[selected NDS_BIU_ADDR_WIDTH] < 32} {
        set_opt_value NDS_BIU_ADDR_WIDTH 32
    }
    if {[selected NDS_MMU_SCHEME] == "sv32"} {
        if {[selected NDS_BIU_ADDR_WIDTH] > 34} {
            set_opt_value NDS_BIU_ADDR_WIDTH 34
        } elseif {[selected NDS_BIU_ADDR_WIDTH] < 32} {
            set_opt_value NDS_BIU_ADDR_WIDTH 32
        }
    }
    if {[selected NDS_MMU_SCHEME] == "sv39"} {
        if {[selected NDS_BIU_ADDR_WIDTH] >= 39} {
            set_opt_value NDS_BIU_ADDR_WIDTH 38
        } elseif {[selected NDS_BIU_ADDR_WIDTH] < 32} {
            set_opt_value NDS_BIU_ADDR_WIDTH 32
        }
    }
    if {[selected NDS_MMU_SCHEME] == "sv48"} {
        if {[selected NDS_BIU_ADDR_WIDTH] >= 48} {
            set_opt_value NDS_BIU_ADDR_WIDTH 47
        } elseif {[selected NDS_BIU_ADDR_WIDTH] < 32} {
            set_opt_value NDS_BIU_ADDR_WIDTH 32
        }
    }
    if {[selected NDS_MMU_SCHEME] == "bare"} {
        if {[selected NDS_ISA_BASE] == "rv32i" || [selected NDS_ISA_BASE] == "rv32e"} {
            set_opt_value NDS_BIU_ADDR_WIDTH 32
        }
    }
}
constraint NDS_BIU_DATA_WIDTH {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {

        if {[selected NDS_BIU_DATA_WIDTH] == 64} {
	    set_opt_value NDS_BIU_DATA_WIDTH 128
	}

        if {[selected NDS_L2C_CACHE_SIZE_KB] == 0} {
            disable NDS_BIU_DATA_WIDTH 
	    set_opt_value NDS_BIU_DATA_WIDTH 128
	} else {
            enable NDS_BIU_DATA_WIDTH
        }
    }

    set_opt_value NDS_L2_DATA_WIDTH [selected NDS_BIU_DATA_WIDTH]
}

constraint NDS_BIU_ID_WIDTH {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes" || [selected NDS_RVV_SUPPORT] == "yes"} {
        if {[selected NDS_NHART] == 8} {
            set_opt_value NDS_BIU_ID_WIDTH 6
        } elseif {[selected NDS_IOCP_NUM] == 1 && [selected NDS_IOCP_TOTAL_OUTSTANDING] >= 32} {
            set_opt_value NDS_BIU_ID_WIDTH 6
        } else {
            set_opt_value NDS_BIU_ID_WIDTH 5
        }
    } else {
            set_opt_value NDS_BIU_ID_WIDTH 4
    }
}

constraint NDS_TL_SINK_WIDTH {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "no" && [selected NDS_MSHR_DEPTH] >= 4} {
	set_opt_value NDS_TL_SINK_WIDTH 3
    }
    if {[selected NDS_CLUSTER_SUPPORT] == "no" && [selected NDS_MSHR_DEPTH] < 4} {
	set_opt_value NDS_TL_SINK_WIDTH 2
    }
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
    }
}

constraint NDS_CLUSTER_SUPPORT {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
    }
    if {[selected NDS_CLUSTER_SUPPORT] == "no"} {
	set_opt_value NDS_NHART 1
        disable NDS_NHART
    }
}

constraint NDS_CORE_BRG_TYPE {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
        enable NDS_CORE_BRG_TYPE
    } else {
        set_opt_value NDS_CORE_BRG_TYPE 0
        disable NDS_CORE_BRG_TYPE
    }
}

constraint NDS_SLAVE_PORT_ASYNC_SUPPORT {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
        if {[selected NDS_CORE_BRG_TYPE] == 2} {
            set_opt_value NDS_SLAVE_PORT_ASYNC_SUPPORT 1
        } elseif {[selected NDS_BIU_ASYNC_SUPPORT] == 1} {
            set_opt_value NDS_SLAVE_PORT_ASYNC_SUPPORT 1
        } else {
            set_opt_value NDS_SLAVE_PORT_ASYNC_SUPPORT 0
        }
    } elseif {[selected NDS_BIU_ASYNC_SUPPORT] == 1} {
        set_opt_value NDS_SLAVE_PORT_ASYNC_SUPPORT 1
    } else {
        set_opt_value NDS_SLAVE_PORT_ASYNC_SUPPORT 0
    }
}

constraint NDS_CM_SUPPORT {} {
	if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
		if {[selected NDS_L2C_CACHE_SIZE_KB] != 0} {
			set_opt_value NDS_CM_SUPPORT "yes"
		} else {
			set_opt_value NDS_CM_SUPPORT "no"
		}
	} else {
		set_opt_value NDS_CM_SUPPORT "no"
	}
}

constraint NDS_IOCP_NUM {} {
	if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
		enable NDS_IOCP_NUM
	} else {
		set_opt_value NDS_IOCP_NUM [selected_default NDS_IOCP_NUM]
		disable NDS_IOCP_NUM
	}	
}

constraint NDS_IOCP_ID_WIDTH {} {
    if {[selected NDS_IOCP_NUM] == 0} {
        set_opt_value NDS_IOCP_ID_WIDTH [selected_default NDS_IOCP_ID_WIDTH]
        disable NDS_IOCP_ID_WIDTH
    } else {
        enable NDS_IOCP_ID_WIDTH
    }
}

constraint NDS_IOCP_TOTAL_OUTSTANDING {} {
    if {[selected NDS_IOCP_NUM] == 0} {
        set_opt_value NDS_IOCP_TOTAL_OUTSTANDING [selected_default NDS_IOCP_TOTAL_OUTSTANDING]
        disable NDS_IOCP_TOTAL_OUTSTANDING
    } else {
        enable NDS_IOCP_TOTAL_OUTSTANDING
    }
}

constraint NDS_IOCP_ASYNC_SUPPORT {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
        if {[selected NDS_BIU_ASYNC_SUPPORT] == 1} {
            set_opt_value NDS_IOCP_ASYNC_SUPPORT 1
        } else {
            set_opt_value NDS_IOCP_ASYNC_SUPPORT 0
        }
    } else {
        set_opt_value NDS_IOCP_ASYNC_SUPPORT 0
    }
}

constraint NDS_L2C_CACHE_SIZE_KB {} {
	if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
		enable NDS_L2C_CACHE_SIZE_KB
	} else {
		set_opt_value NDS_L2C_CACHE_SIZE_KB 0
	        disable NDS_L2C_CACHE_SIZE_KB
	}
	if {[selected NDS_L2C_CACHE_SIZE_KB] == 0} {
		set_opt_value NDS_L2C_ECC_TYPE [selected_default NDS_L2C_ECC_TYPE]
		disable NDS_L2C_ECC_TYPE
		set_opt_value NDS_L2C_REG_BASE [selected_default NDS_L2C_REG_BASE]
		disable NDS_L2C_REG_BASE
		set_opt_value NDS_L2C_HPM_NUM [selected_default NDS_L2C_HPM_NUM]
		disable NDS_L2C_HPM_NUM
                set_opt_value NDS_L2C_TAG_RAM_SETUP_CYCLE [selected_default NDS_L2C_TAG_RAM_SETUP_CYCLE]
                disable NDS_L2C_TAG_RAM_SETUP_CYCLE
                set_opt_value NDS_L2C_DATA_RAM_SETUP_CYCLE [selected_default NDS_L2C_DATA_RAM_SETUP_CYCLE]
                disable NDS_L2C_DATA_RAM_SETUP_CYCLE
                set_opt_value NDS_L2C_TAG_RAM_SETUP_CYCLE [selected_default NDS_L2C_TAG_RAM_SETUP_CYCLE]
                disable NDS_L2C_TAG_RAM_SETUP_CYCLE
                set_opt_value NDS_L2C_DATA_RAM_OUTPUT_CYCLE [selected_default NDS_L2C_DATA_RAM_OUTPUT_CYCLE]
                disable NDS_L2C_DATA_RAM_OUTPUT_CYCLE
                set_opt_value NDS_L2C_TAG_RAM_AW [selected_default NDS_L2C_TAG_RAM_AW]
                disable NDS_L2C_TAG_RAM_AW
                set_opt_value NDS_L2C_DATA_RAM_AW [selected_default NDS_L2C_DATA_RAM_AW]
                disable NDS_L2C_DATA_RAM_AW
	} else {
		enable NDS_L2C_ECC_TYPE
		enable NDS_L2C_REG_BASE
		enable NDS_L2C_HPM_NUM
                enable NDS_L2C_TAG_RAM_SETUP_CYCLE
                enable NDS_L2C_DATA_RAM_SETUP_CYCLE
                enable NDS_L2C_DATA_RAM_OUTPUT_CYCLE
		enable NDS_L2C_TAG_RAM_AW
		enable NDS_L2C_DATA_RAM_AW
		check_device_region_base_valid NDS_L2C_REG_BASE
	}
}

constraint NDS_L2C_TAG_RAM_AW {} {
    enable_chk_var NDS_L2C_TAG_RAM_AW {5 6 7 8 9 10 11 12}
    if {[selected NDS_L2C_CACHE_SIZE_KB] == 128} {
        if {[selected NDS_L2C_BANKS] == 4} {
            disable_chk_var NDS_L2C_TAG_RAM_AW {6 7 8 9 10 11 12}
            if {[selected NDS_L2C_TAG_RAM_AW] > 5} {
                set_opt_value NDS_L2C_TAG_RAM_AW 5
            }
        } else {
            disable_chk_var NDS_L2C_TAG_RAM_AW {5 7 8 9 10 11 12}
            if {[selected NDS_L2C_TAG_RAM_AW] > 6} {
                set_opt_value NDS_L2C_TAG_RAM_AW 6
            }
        }
    } elseif {[selected NDS_L2C_CACHE_SIZE_KB] == 256} {
        if {[selected NDS_L2C_BANKS] == 4} {
            disable_chk_var NDS_L2C_TAG_RAM_AW {5 7 8 9 10 11 12}
            if {[selected NDS_L2C_TAG_RAM_AW] > 6} {
                set_opt_value NDS_L2C_TAG_RAM_AW 6
            } elseif {[selected NDS_L2C_TAG_RAM_AW] < 6} {
                set_opt_value NDS_L2C_TAG_RAM_AW 6
            }
        } else {
            disable_chk_var NDS_L2C_TAG_RAM_AW {5 8 9 10 11 12}
            if {[selected NDS_L2C_TAG_RAM_AW] > 7} {
                set_opt_value NDS_L2C_TAG_RAM_AW 7
            } elseif {[selected NDS_L2C_TAG_RAM_AW] < 6} {
                set_opt_value NDS_L2C_TAG_RAM_AW 6
            }
        }
    } elseif {[selected NDS_L2C_CACHE_SIZE_KB] == 512} {
        if {[selected NDS_L2C_BANKS] == 4} {
            disable_chk_var NDS_L2C_TAG_RAM_AW {5 8 9 10 11 12}
            if {[selected NDS_L2C_TAG_RAM_AW] > 7} {
                set_opt_value NDS_L2C_TAG_RAM_AW 7
            } elseif {[selected NDS_L2C_TAG_RAM_AW] < 6} {
                set_opt_value NDS_L2C_TAG_RAM_AW 6
            }
        } else {
            disable_chk_var NDS_L2C_TAG_RAM_AW {5 9 10 11 12}
            if {[selected NDS_L2C_TAG_RAM_AW] > 8} {
                set_opt_value NDS_L2C_TAG_RAM_AW 8
            } elseif {[selected NDS_L2C_TAG_RAM_AW] < 6} {
                set_opt_value NDS_L2C_TAG_RAM_AW 6
            }
        }
    } elseif {[selected NDS_L2C_CACHE_SIZE_KB] == 1024} {
        if {[selected NDS_L2C_BANKS] == 4} {
            disable_chk_var NDS_L2C_TAG_RAM_AW {5 9 10 11 12}
            if {[selected NDS_L2C_TAG_RAM_AW] > 8} {
                set_opt_value NDS_L2C_TAG_RAM_AW 8
            } elseif {[selected NDS_L2C_TAG_RAM_AW] < 6} {
                set_opt_value NDS_L2C_TAG_RAM_AW 6
            }
        } else {
            disable_chk_var NDS_L2C_TAG_RAM_AW {5 10 11 12}
            if {[selected NDS_L2C_TAG_RAM_AW] > 9} {
                set_opt_value NDS_L2C_TAG_RAM_AW 9
            } elseif {[selected NDS_L2C_TAG_RAM_AW] < 6} {
                set_opt_value NDS_L2C_TAG_RAM_AW 6
            }
        }
    } elseif {[selected NDS_L2C_CACHE_SIZE_KB] == 2048} {
        if {[selected NDS_L2C_BANKS] == 4} {
            disable_chk_var NDS_L2C_TAG_RAM_AW {5 6 10 11 12}
            if {[selected NDS_L2C_TAG_RAM_AW] > 9} {
                set_opt_value NDS_L2C_TAG_RAM_AW 9
            } elseif {[selected NDS_L2C_TAG_RAM_AW] < 7} {
                set_opt_value NDS_L2C_TAG_RAM_AW 7
            }
        } else {
            disable_chk_var NDS_L2C_TAG_RAM_AW {5 6 11 12}
            if {[selected NDS_L2C_TAG_RAM_AW] > 10} {
                set_opt_value NDS_L2C_TAG_RAM_AW 10
            } elseif {[selected NDS_L2C_TAG_RAM_AW] < 7} {
                set_opt_value NDS_L2C_TAG_RAM_AW 7
            }
        }
    } elseif {[selected NDS_L2C_CACHE_SIZE_KB] == 4096} {
        if {[selected NDS_L2C_BANKS] == 4} {
            disable_chk_var NDS_L2C_TAG_RAM_AW {5 6 7 11 12}
            if {[selected NDS_L2C_TAG_RAM_AW] > 10} {
                set_opt_value NDS_L2C_TAG_RAM_AW 10
            } elseif {[selected NDS_L2C_TAG_RAM_AW] < 8} {
                set_opt_value NDS_L2C_TAG_RAM_AW 8
            }
        } else {
            disable_chk_var NDS_L2C_TAG_RAM_AW {5 6 7 12}
            if {[selected NDS_L2C_TAG_RAM_AW] > 11} {
                set_opt_value NDS_L2C_TAG_RAM_AW 11
            } elseif {[selected NDS_L2C_TAG_RAM_AW] < 8} {
                set_opt_value NDS_L2C_TAG_RAM_AW 8
            }
        }
    } elseif {[selected NDS_L2C_CACHE_SIZE_KB] == 8192} {
        if {[selected NDS_L2C_BANKS] == 4} {
            disable_chk_var NDS_L2C_TAG_RAM_AW {5 6 7 8 12}
            if {[selected NDS_L2C_TAG_RAM_AW] > 11} {
                set_opt_value NDS_L2C_TAG_RAM_AW 11
            } elseif {[selected NDS_L2C_TAG_RAM_AW] < 9} {
                set_opt_value NDS_L2C_TAG_RAM_AW 9
            }
        } else {
            disable_chk_var NDS_L2C_TAG_RAM_AW {5 6 7 8}
            if {[selected NDS_L2C_TAG_RAM_AW] < 9} {
                set_opt_value NDS_L2C_TAG_RAM_AW 9
            }
        }
    } else {
    }
}

constraint NDS_L2C_DATA_RAM_AW {} {
    enable_chk_var NDS_L2C_DATA_RAM_AW {9 10 11 12 13 14 15 16}
    if {[selected NDS_L2C_CACHE_SIZE_KB] == 128} {
        if {[selected NDS_L2C_BANKS] == 4} {
            disable_chk_var NDS_L2C_DATA_RAM_AW {10 11 12 13 14 15 16}
            if {[selected NDS_L2C_DATA_RAM_AW] > 9} {
                set_opt_value NDS_L2C_DATA_RAM_AW 9
            }
        } else {
            disable_chk_var NDS_L2C_DATA_RAM_AW {9 11 12 13 14 15 16}
            if {[selected NDS_L2C_DATA_RAM_AW] > 10} {
                set_opt_value NDS_L2C_DATA_RAM_AW 10
            } elseif {[selected NDS_L2C_DATA_RAM_AW] < 10} {
                set_opt_value NDS_L2C_DATA_RAM_AW 10
            }
        }
    } elseif {[selected NDS_L2C_CACHE_SIZE_KB] == 256} {
	disable_chk_var NDS_L2C_DATA_RAM_AW {9 12 13 14 15 16}
        if {[selected NDS_L2C_DATA_RAM_AW] > 11} {
            set_opt_value NDS_L2C_DATA_RAM_AW 11
        } elseif {[selected NDS_L2C_DATA_RAM_AW] < 10} {
            set_opt_value NDS_L2C_DATA_RAM_AW 10
        }
        if {[selected NDS_L2C_BANKS] == 4} {
            disable_chk_var NDS_L2C_DATA_RAM_AW {11}
            if {[selected NDS_L2C_DATA_RAM_AW] > 10} {
                set_opt_value NDS_L2C_DATA_RAM_AW 10
            }
        }
    } elseif {[selected NDS_L2C_CACHE_SIZE_KB] == 512} {
	disable_chk_var NDS_L2C_DATA_RAM_AW {9 13 14 15 16}
        if {[selected NDS_L2C_DATA_RAM_AW] > 12} {
            set_opt_value NDS_L2C_DATA_RAM_AW 12
        } elseif {[selected NDS_L2C_DATA_RAM_AW] < 10} {
            set_opt_value NDS_L2C_DATA_RAM_AW 10
        }
        if {[selected NDS_L2C_BANKS] == 4} {
            disable_chk_var NDS_L2C_DATA_RAM_AW {12}
            if {[selected NDS_L2C_DATA_RAM_AW] > 11} {
                set_opt_value NDS_L2C_DATA_RAM_AW 11
            }
        }
    } elseif {[selected NDS_L2C_CACHE_SIZE_KB] == 1024} {
	disable_chk_var NDS_L2C_DATA_RAM_AW {9 14 15 16}
        if {[selected NDS_L2C_DATA_RAM_AW] > 13} {
            set_opt_value NDS_L2C_DATA_RAM_AW 13
        } elseif {[selected NDS_L2C_DATA_RAM_AW] < 10} {
            set_opt_value NDS_L2C_DATA_RAM_AW 10
        }
        if {[selected NDS_L2C_BANKS] == 4} {
            disable_chk_var NDS_L2C_DATA_RAM_AW {13}
            if {[selected NDS_L2C_DATA_RAM_AW] > 12} {
                set_opt_value NDS_L2C_DATA_RAM_AW 12
            }
        }
    } elseif {[selected NDS_L2C_CACHE_SIZE_KB] == 2048} {
	disable_chk_var NDS_L2C_DATA_RAM_AW {9 15 16}
        if {[selected NDS_L2C_DATA_RAM_AW] > 14} {
            set_opt_value NDS_L2C_DATA_RAM_AW 14
        } elseif {[selected NDS_L2C_DATA_RAM_AW] < 10} {
            set_opt_value NDS_L2C_DATA_RAM_AW 10
        }
        if {[selected NDS_L2C_BANKS] == 4} {
            disable_chk_var NDS_L2C_DATA_RAM_AW {14}
            if {[selected NDS_L2C_DATA_RAM_AW] > 13} {
                set_opt_value NDS_L2C_DATA_RAM_AW 13
            }
        }
    } elseif {[selected NDS_L2C_CACHE_SIZE_KB] == 4096} {
	disable_chk_var NDS_L2C_DATA_RAM_AW {9 10 16}
        if {[selected NDS_L2C_DATA_RAM_AW] > 15} {
            set_opt_value NDS_L2C_DATA_RAM_AW 15
        } elseif {[selected NDS_L2C_DATA_RAM_AW] < 11} {
            set_opt_value NDS_L2C_DATA_RAM_AW 11
        }
        if {[selected NDS_L2C_BANKS] == 4} {
            disable_chk_var NDS_L2C_DATA_RAM_AW {15}
            if {[selected NDS_L2C_DATA_RAM_AW] > 14} {
                set_opt_value NDS_L2C_DATA_RAM_AW 14
            }
        }
    } elseif {[selected NDS_L2C_CACHE_SIZE_KB] == 8192} {
	disable_chk_var NDS_L2C_DATA_RAM_AW {9 10 11}
        if {[selected NDS_L2C_DATA_RAM_AW] < 12} {
            set_opt_value NDS_L2C_DATA_RAM_AW 12
        }
        if {[selected NDS_L2C_BANKS] == 4} {
            disable_chk_var NDS_L2C_DATA_RAM_AW {16}
            if {[selected NDS_L2C_DATA_RAM_AW] > 15} {
                set_opt_value NDS_L2C_DATA_RAM_AW 15
            }
        }
    } else {
    }
}

constraint NDS_L2C_HR_DEPTH {} {
    if {[selected NDS_CLUSTER_SUPPORT] == "yes"} {
        if {[selected NDS_NHART] == 1} {
            set_opt_value NDS_L2C_HR_DEPTH 16
            set_opt_value NDS_TL_SINK_WIDTH 4
        } elseif {[selected NDS_L2C_BANKS] == 2} {
            set_opt_value NDS_L2C_HR_DEPTH 32
            set_opt_value NDS_TL_SINK_WIDTH 5
        } else {
            set_opt_value NDS_L2C_HR_DEPTH 64
            set_opt_value NDS_TL_SINK_WIDTH 6
        }
    }
}

constraint NDS_L2C_BANKS {} {
    enable_chk_var NDS_L2C_BANKS {2 4}
    if {[selected NDS_NHART] == 8} {
    } else {
        disable_chk_var NDS_L2C_BANKS {4}
        set_opt_value NDS_L2C_BANKS 2
    }
}

constraint NDS_BTB_RAM_CTRL_IN_WIDTH {} {
    if {[selected NDS_RAM_CTRL_IN] == "yes"} {
        enable NDS_BTB_RAM_CTRL_IN_WIDTH
        if {[selected NDS_BTB_RAM_CTRL_IN_WIDTH] == 0} {
            set_opt_value NDS_BTB_RAM_CTRL_IN_WIDTH 1
        } elseif {[selected NDS_BTB_RAM_CTRL_IN_WIDTH] > 128} {
            set_opt_value NDS_BTB_RAM_CTRL_IN_WIDTH 128
        }
    } else {
        disable NDS_BTB_RAM_CTRL_IN_WIDTH
	set_opt_value NDS_BTB_RAM_CTRL_IN_WIDTH [selected_default NDS_BTB_RAM_CTRL_IN_WIDTH]
    }
}

constraint NDS_BTB_RAM_CTRL_OUT_WIDTH {} {
    if {[selected NDS_RAM_CTRL_OUT] == "yes"} {
        enable NDS_BTB_RAM_CTRL_OUT_WIDTH
        if {[selected NDS_BTB_RAM_CTRL_OUT_WIDTH] == 0} {
            set_opt_value NDS_BTB_RAM_CTRL_OUT_WIDTH 1
        } elseif {[selected NDS_BTB_RAM_CTRL_OUT_WIDTH] > 128} {
            set_opt_value NDS_BTB_RAM_CTRL_OUT_WIDTH 128
        }
    } else {
        disable NDS_BTB_RAM_CTRL_OUT_WIDTH
	set_opt_value NDS_BTB_RAM_CTRL_OUT_WIDTH [selected_default NDS_BTB_RAM_CTRL_OUT_WIDTH]
    }
}

constraint NDS_ILM_RAM_CTRL_IN_WIDTH {} {
    if {[selected NDS_ILM_SIZE] != 0 && [selected NDS_ILM_WAIT_CYCLE] == 0 && [selected NDS_RAM_CTRL_IN] == "yes"} {
        enable NDS_ILM_RAM_CTRL_IN_WIDTH
        if {[selected NDS_ILM_RAM_CTRL_IN_WIDTH] == 0} {
            set_opt_value NDS_ILM_RAM_CTRL_IN_WIDTH 1
        } elseif {[selected NDS_ILM_RAM_CTRL_IN_WIDTH] > 128} {
            set_opt_value NDS_ILM_RAM_CTRL_IN_WIDTH 128
        }
    } else {
        disable NDS_ILM_RAM_CTRL_IN_WIDTH
	set_opt_value NDS_ILM_RAM_CTRL_IN_WIDTH [selected_default NDS_ILM_RAM_CTRL_IN_WIDTH]
    }
}

constraint NDS_ILM_RAM_CTRL_OUT_WIDTH {} {
    if {[selected NDS_ILM_SIZE] != 0 && [selected NDS_ILM_WAIT_CYCLE] == 0 && [selected NDS_RAM_CTRL_OUT] == "yes"} {
        enable NDS_ILM_RAM_CTRL_OUT_WIDTH
        if {[selected NDS_ILM_RAM_CTRL_OUT_WIDTH] == 0} {
            set_opt_value NDS_ILM_RAM_CTRL_OUT_WIDTH 1
        } elseif {[selected NDS_ILM_RAM_CTRL_OUT_WIDTH] > 128} {
            set_opt_value NDS_ILM_RAM_CTRL_OUT_WIDTH 128
        }
    } else {
        disable NDS_ILM_RAM_CTRL_OUT_WIDTH
	set_opt_value NDS_ILM_RAM_CTRL_OUT_WIDTH [selected_default NDS_ILM_RAM_CTRL_OUT_WIDTH]
    }
}

constraint NDS_DLM_RAM_CTRL_IN_WIDTH {} {
    if {[selected NDS_DLM_SIZE] != 0 && [selected NDS_DLM_WAIT_CYCLE] == 0 && [selected NDS_RAM_CTRL_IN] == "yes"} {
        enable NDS_DLM_RAM_CTRL_IN_WIDTH
        if {[selected NDS_DLM_RAM_CTRL_IN_WIDTH] == 0} {
            set_opt_value NDS_DLM_RAM_CTRL_IN_WIDTH 1
        } elseif {[selected NDS_DLM_RAM_CTRL_IN_WIDTH] > 128} {
            set_opt_value NDS_DLM_RAM_CTRL_IN_WIDTH 128
        }
    } else {
        disable NDS_DLM_RAM_CTRL_IN_WIDTH
	set_opt_value NDS_DLM_RAM_CTRL_IN_WIDTH [selected_default NDS_DLM_RAM_CTRL_IN_WIDTH]
    }
}

constraint NDS_DLM_RAM_CTRL_OUT_WIDTH {} {
    if {[selected NDS_DLM_SIZE] != 0 && [selected NDS_DLM_WAIT_CYCLE] == 0 && [selected NDS_RAM_CTRL_OUT] == "yes"} {
        enable NDS_DLM_RAM_CTRL_OUT_WIDTH
        if {[selected NDS_DLM_RAM_CTRL_OUT_WIDTH] == 0} {
            set_opt_value NDS_DLM_RAM_CTRL_OUT_WIDTH 1
        } elseif {[selected NDS_DLM_RAM_CTRL_OUT_WIDTH] > 128} {
            set_opt_value NDS_DLM_RAM_CTRL_OUT_WIDTH 128
        }
    } else {
        disable NDS_DLM_RAM_CTRL_OUT_WIDTH
	set_opt_value NDS_DLM_RAM_CTRL_OUT_WIDTH [selected_default NDS_DLM_RAM_CTRL_OUT_WIDTH]
    }
}

constraint NDS_ICACHE_TAG_RAM_CTRL_IN_WIDTH {} {
    if {[selected NDS_ICACHE_SIZE] != 0 && [selected NDS_RAM_CTRL_IN] == "yes"} {
        enable NDS_ICACHE_TAG_RAM_CTRL_IN_WIDTH
        if {[selected NDS_ICACHE_TAG_RAM_CTRL_IN_WIDTH] == 0} {
            set_opt_value NDS_ICACHE_TAG_RAM_CTRL_IN_WIDTH 1
        } elseif {[selected NDS_ICACHE_TAG_RAM_CTRL_IN_WIDTH] > 128} {
            set_opt_value NDS_ICACHE_TAG_RAM_CTRL_IN_WIDTH 128
        }
    } else {
        disable NDS_ICACHE_TAG_RAM_CTRL_IN_WIDTH
	set_opt_value NDS_ICACHE_TAG_RAM_CTRL_IN_WIDTH [selected_default NDS_ICACHE_TAG_RAM_CTRL_IN_WIDTH]
    }
}

constraint NDS_ICACHE_TAG_RAM_CTRL_OUT_WIDTH {} {
    if {[selected NDS_ICACHE_SIZE] != 0 && [selected NDS_RAM_CTRL_OUT] == "yes"} {
        enable NDS_ICACHE_TAG_RAM_CTRL_OUT_WIDTH
        if {[selected NDS_ICACHE_TAG_RAM_CTRL_OUT_WIDTH] == 0} {
            set_opt_value NDS_ICACHE_TAG_RAM_CTRL_OUT_WIDTH 1
        } elseif {[selected NDS_ICACHE_TAG_RAM_CTRL_OUT_WIDTH] > 128} {
            set_opt_value NDS_ICACHE_TAG_RAM_CTRL_OUT_WIDTH 128
        }
    } else {
        disable NDS_ICACHE_TAG_RAM_CTRL_OUT_WIDTH
	set_opt_value NDS_ICACHE_TAG_RAM_CTRL_OUT_WIDTH [selected_default NDS_ICACHE_TAG_RAM_CTRL_OUT_WIDTH]
    }
}

constraint NDS_ICACHE_DATA_RAM_CTRL_IN_WIDTH {} {
    if {[selected NDS_ICACHE_SIZE] != 0 && [selected NDS_RAM_CTRL_IN] == "yes"} {
        enable NDS_ICACHE_DATA_RAM_CTRL_IN_WIDTH
        if {[selected NDS_ICACHE_DATA_RAM_CTRL_IN_WIDTH] == 0} {
            set_opt_value NDS_ICACHE_DATA_RAM_CTRL_IN_WIDTH 1
        } elseif {[selected NDS_ICACHE_DATA_RAM_CTRL_IN_WIDTH] > 128} {
            set_opt_value NDS_ICACHE_DATA_RAM_CTRL_IN_WIDTH 128
        }
    } else {
        disable NDS_ICACHE_DATA_RAM_CTRL_IN_WIDTH
	set_opt_value NDS_ICACHE_DATA_RAM_CTRL_IN_WIDTH [selected_default NDS_ICACHE_DATA_RAM_CTRL_IN_WIDTH]
    }
}

constraint NDS_ICACHE_DATA_RAM_CTRL_OUT_WIDTH {} {
    if {[selected NDS_ICACHE_SIZE] != 0 && [selected NDS_RAM_CTRL_OUT] == "yes"} {
        enable NDS_ICACHE_DATA_RAM_CTRL_OUT_WIDTH
        if {[selected NDS_ICACHE_DATA_RAM_CTRL_OUT_WIDTH] == 0} {
            set_opt_value NDS_ICACHE_DATA_RAM_CTRL_OUT_WIDTH 1
        } elseif {[selected NDS_ICACHE_DATA_RAM_CTRL_OUT_WIDTH] > 128} {
            set_opt_value NDS_ICACHE_DATA_RAM_CTRL_OUT_WIDTH 128
        }
    } else {
        disable NDS_ICACHE_DATA_RAM_CTRL_OUT_WIDTH
	set_opt_value NDS_ICACHE_DATA_RAM_CTRL_OUT_WIDTH [selected_default NDS_ICACHE_DATA_RAM_CTRL_OUT_WIDTH]
    }
}

constraint NDS_DCACHE_TAG_RAM_CTRL_IN_WIDTH {} {
    if {[selected NDS_DCACHE_SIZE] != 0 && [selected NDS_RAM_CTRL_IN] == "yes"} {
        enable NDS_DCACHE_TAG_RAM_CTRL_IN_WIDTH
        if {[selected NDS_DCACHE_TAG_RAM_CTRL_IN_WIDTH] == 0} {
            set_opt_value NDS_DCACHE_TAG_RAM_CTRL_IN_WIDTH 1
        } elseif {[selected NDS_DCACHE_TAG_RAM_CTRL_IN_WIDTH] > 128} {
            set_opt_value NDS_DCACHE_TAG_RAM_CTRL_IN_WIDTH 128
        }
    } else {
        disable NDS_DCACHE_TAG_RAM_CTRL_IN_WIDTH
	set_opt_value NDS_DCACHE_TAG_RAM_CTRL_IN_WIDTH [selected_default NDS_DCACHE_TAG_RAM_CTRL_IN_WIDTH]
    }
}

constraint NDS_DCACHE_TAG_RAM_CTRL_OUT_WIDTH {} {
    if {[selected NDS_DCACHE_SIZE] != 0 && [selected NDS_RAM_CTRL_OUT] == "yes"} {
        enable NDS_DCACHE_TAG_RAM_CTRL_OUT_WIDTH
        if {[selected NDS_DCACHE_TAG_RAM_CTRL_OUT_WIDTH] == 0} {
            set_opt_value NDS_DCACHE_TAG_RAM_CTRL_OUT_WIDTH 1
        } elseif {[selected NDS_DCACHE_TAG_RAM_CTRL_OUT_WIDTH] > 128} {
            set_opt_value NDS_DCACHE_TAG_RAM_CTRL_OUT_WIDTH 128
        }
    } else {
        disable NDS_DCACHE_TAG_RAM_CTRL_OUT_WIDTH
	set_opt_value NDS_DCACHE_TAG_RAM_CTRL_OUT_WIDTH [selected_default NDS_DCACHE_TAG_RAM_CTRL_OUT_WIDTH]
    }
}

constraint NDS_DCACHE_DATA_RAM_CTRL_IN_WIDTH {} {
    if {[selected NDS_DCACHE_SIZE] != 0 && [selected NDS_RAM_CTRL_IN] == "yes"} {
        enable NDS_DCACHE_DATA_RAM_CTRL_IN_WIDTH
        if {[selected NDS_DCACHE_DATA_RAM_CTRL_IN_WIDTH] == 0} {
            set_opt_value NDS_DCACHE_DATA_RAM_CTRL_IN_WIDTH 1
        } elseif {[selected NDS_DCACHE_DATA_RAM_CTRL_IN_WIDTH] > 128} {
            set_opt_value NDS_DCACHE_DATA_RAM_CTRL_IN_WIDTH 128
        }
    } else {
        disable NDS_DCACHE_DATA_RAM_CTRL_IN_WIDTH
	set_opt_value NDS_DCACHE_DATA_RAM_CTRL_IN_WIDTH [selected_default NDS_DCACHE_DATA_RAM_CTRL_IN_WIDTH]
    }
}

constraint NDS_DCACHE_DATA_RAM_CTRL_OUT_WIDTH {} {
    if {[selected NDS_DCACHE_SIZE] != 0 && [selected NDS_RAM_CTRL_OUT] == "yes"} {
        enable NDS_DCACHE_DATA_RAM_CTRL_OUT_WIDTH
        if {[selected NDS_DCACHE_DATA_RAM_CTRL_OUT_WIDTH] == 0} {
            set_opt_value NDS_DCACHE_DATA_RAM_CTRL_OUT_WIDTH 1
        } elseif {[selected NDS_DCACHE_DATA_RAM_CTRL_OUT_WIDTH] > 128} {
            set_opt_value NDS_DCACHE_DATA_RAM_CTRL_OUT_WIDTH 128
        }
    } else {
        disable NDS_DCACHE_DATA_RAM_CTRL_OUT_WIDTH
	set_opt_value NDS_DCACHE_DATA_RAM_CTRL_OUT_WIDTH [selected_default NDS_DCACHE_DATA_RAM_CTRL_OUT_WIDTH]
    }
}

constraint NDS_DCACHE_WPT_RAM_CTRL_IN_WIDTH {} {
    if {[selected NDS_DCACHE_SIZE] != 0 && [selected NDS_RAM_CTRL_IN] == "yes"} {
        enable NDS_DCACHE_WPT_RAM_CTRL_IN_WIDTH
        if {[selected NDS_DCACHE_WPT_RAM_CTRL_IN_WIDTH] == 0} {
            set_opt_value NDS_DCACHE_WPT_RAM_CTRL_IN_WIDTH 1
        } elseif {[selected NDS_DCACHE_WPT_RAM_CTRL_IN_WIDTH] > 128} {
            set_opt_value NDS_DCACHE_WPT_RAM_CTRL_IN_WIDTH 128
        }
    } else {
        disable NDS_DCACHE_WPT_RAM_CTRL_IN_WIDTH
	set_opt_value NDS_DCACHE_WPT_RAM_CTRL_IN_WIDTH [selected_default NDS_DCACHE_WPT_RAM_CTRL_IN_WIDTH]
    }
}

constraint NDS_DCACHE_WPT_RAM_CTRL_OUT_WIDTH {} {
    if {[selected NDS_DCACHE_SIZE] != 0 && [selected NDS_RAM_CTRL_OUT] == "yes"} {
        enable NDS_DCACHE_WPT_RAM_CTRL_OUT_WIDTH
        if {[selected NDS_DCACHE_WPT_RAM_CTRL_OUT_WIDTH] == 0} {
            set_opt_value NDS_DCACHE_WPT_RAM_CTRL_OUT_WIDTH 1
        } elseif {[selected NDS_DCACHE_WPT_RAM_CTRL_OUT_WIDTH] > 128} {
            set_opt_value NDS_DCACHE_WPT_RAM_CTRL_OUT_WIDTH 128
        }
    } else {
        disable NDS_DCACHE_WPT_RAM_CTRL_OUT_WIDTH
	set_opt_value NDS_DCACHE_WPT_RAM_CTRL_OUT_WIDTH [selected_default NDS_DCACHE_WPT_RAM_CTRL_OUT_WIDTH]
    }
}

constraint NDS_STLB_RAM_CTRL_IN_WIDTH {} {
    if {[selected NDS_MMU_SCHEME] != "bare" && [selected NDS_RAM_CTRL_IN] == "yes" && [selected NDS_STLB_ECC_TYPE] == 0} {
        enable NDS_STLB_RAM_CTRL_IN_WIDTH
        if {[selected NDS_STLB_RAM_CTRL_IN_WIDTH] == 0} {
            set_opt_value NDS_STLB_RAM_CTRL_IN_WIDTH 1
        } elseif {[selected NDS_STLB_RAM_CTRL_IN_WIDTH] > 128} {
            set_opt_value NDS_STLB_RAM_CTRL_IN_WIDTH 128
        }
    } else {
        disable NDS_STLB_RAM_CTRL_IN_WIDTH
	set_opt_value NDS_STLB_RAM_CTRL_IN_WIDTH [selected_default NDS_STLB_RAM_CTRL_IN_WIDTH]
    }
}

constraint NDS_STLB_TAG_RAM_CTRL_IN_WIDTH {} {
    if {[selected NDS_MMU_SCHEME] != "bare" && [selected NDS_RAM_CTRL_IN] == "yes"  && [selected NDS_STLB_ECC_TYPE] == 1} {
        enable NDS_STLB_TAG_RAM_CTRL_IN_WIDTH
        if {[selected NDS_STLB_TAG_RAM_CTRL_IN_WIDTH] == 0} {
            set_opt_value NDS_STLB_TAG_RAM_CTRL_IN_WIDTH 1
        } elseif {[selected NDS_STLB_TAG_RAM_CTRL_IN_WIDTH] > 128} {
            set_opt_value NDS_STLB_TAG_RAM_CTRL_IN_WIDTH 128
        }
    } else {
        disable NDS_STLB_TAG_RAM_CTRL_IN_WIDTH
	set_opt_value NDS_STLB_TAG_RAM_CTRL_IN_WIDTH [selected_default NDS_STLB_TAG_RAM_CTRL_IN_WIDTH]
    }
}

constraint NDS_STLB_DATA_RAM_CTRL_IN_WIDTH {} {
    if {[selected NDS_MMU_SCHEME] != "bare" && [selected NDS_RAM_CTRL_IN] == "yes"  && [selected NDS_STLB_ECC_TYPE] == 1} {
        enable NDS_STLB_DATA_RAM_CTRL_IN_WIDTH
        if {[selected NDS_STLB_DATA_RAM_CTRL_IN_WIDTH] == 0} {
            set_opt_value NDS_STLB_DATA_RAM_CTRL_IN_WIDTH 1
        } elseif {[selected NDS_STLB_DATA_RAM_CTRL_IN_WIDTH] > 128} {
            set_opt_value NDS_STLB_DATA_RAM_CTRL_IN_WIDTH 128
        }
    } else {
        disable NDS_STLB_DATA_RAM_CTRL_IN_WIDTH
	set_opt_value NDS_STLB_DATA_RAM_CTRL_IN_WIDTH [selected_default NDS_STLB_DATA_RAM_CTRL_IN_WIDTH]
    }
}

constraint NDS_STLB_RAM_CTRL_OUT_WIDTH {} {
    if {[selected NDS_MMU_SCHEME] != "bare" && [selected NDS_RAM_CTRL_OUT] == "yes" && [selected NDS_STLB_ECC_TYPE] == 0} {
        enable NDS_STLB_RAM_CTRL_OUT_WIDTH
        if {[selected NDS_STLB_RAM_CTRL_OUT_WIDTH] == 0} {
            set_opt_value NDS_STLB_RAM_CTRL_OUT_WIDTH 1
        } elseif {[selected NDS_STLB_RAM_CTRL_OUT_WIDTH] > 128} {
            set_opt_value NDS_STLB_RAM_CTRL_OUT_WIDTH 128
        }
    } else {
        disable NDS_STLB_RAM_CTRL_OUT_WIDTH
	set_opt_value NDS_STLB_RAM_CTRL_OUT_WIDTH [selected_default NDS_STLB_RAM_CTRL_OUT_WIDTH]
    }
}

constraint NDS_STLB_TAG_RAM_CTRL_OUT_WIDTH {} {
    if {[selected NDS_MMU_SCHEME] != "bare" && [selected NDS_RAM_CTRL_OUT] == "yes" && [selected NDS_STLB_ECC_TYPE] == 1} {
        enable NDS_STLB_TAG_RAM_CTRL_OUT_WIDTH
        if {[selected NDS_STLB_TAG_RAM_CTRL_OUT_WIDTH] == 0} {
            set_opt_value NDS_STLB_TAG_RAM_CTRL_OUT_WIDTH 1
        } elseif {[selected NDS_STLB_TAG_RAM_CTRL_OUT_WIDTH] > 128} {
            set_opt_value NDS_STLB_TAG_RAM_CTRL_OUT_WIDTH 128
        }
    } else {
        disable NDS_STLB_TAG_RAM_CTRL_OUT_WIDTH
	set_opt_value NDS_STLB_TAG_RAM_CTRL_OUT_WIDTH [selected_default NDS_STLB_TAG_RAM_CTRL_OUT_WIDTH]
    }
}

constraint NDS_STLB_DATA_RAM_CTRL_OUT_WIDTH {} {
    if {[selected NDS_MMU_SCHEME] != "bare" && [selected NDS_RAM_CTRL_OUT] == "yes" && [selected NDS_STLB_ECC_TYPE] == 1} {
        enable NDS_STLB_DATA_RAM_CTRL_OUT_WIDTH
        if {[selected NDS_STLB_DATA_RAM_CTRL_OUT_WIDTH] == 0} {
            set_opt_value NDS_STLB_DATA_RAM_CTRL_OUT_WIDTH 1
        } elseif {[selected NDS_STLB_DATA_RAM_CTRL_OUT_WIDTH] > 128} {
            set_opt_value NDS_STLB_DATA_RAM_CTRL_OUT_WIDTH 128
        }
    } else {
        disable NDS_STLB_DATA_RAM_CTRL_OUT_WIDTH
	set_opt_value NDS_STLB_DATA_RAM_CTRL_OUT_WIDTH [selected_default NDS_STLB_DATA_RAM_CTRL_OUT_WIDTH]
    }
}

constraint NDS_L2C_TAG_RAM_CTRL_IN_WIDTH {} {
    if {[selected NDS_L2C_CACHE_SIZE_KB] != 0 && [selected NDS_RAM_CTRL_IN] == "yes"} {
        enable NDS_L2C_TAG_RAM_CTRL_IN_WIDTH
        if {[selected NDS_L2C_TAG_RAM_CTRL_IN_WIDTH] == 0} {
            set_opt_value NDS_L2C_TAG_RAM_CTRL_IN_WIDTH 1
        } elseif {[selected NDS_L2C_TAG_RAM_CTRL_IN_WIDTH] > 128} {
            set_opt_value NDS_L2C_TAG_RAM_CTRL_IN_WIDTH 128
        }
    } else {
        disable NDS_L2C_TAG_RAM_CTRL_IN_WIDTH
	set_opt_value NDS_L2C_TAG_RAM_CTRL_IN_WIDTH [selected_default NDS_L2C_TAG_RAM_CTRL_IN_WIDTH]
    }
}

constraint NDS_L2C_TAG_RAM_CTRL_OUT_WIDTH {} {
    if {[selected NDS_L2C_CACHE_SIZE_KB] != 0 && [selected NDS_RAM_CTRL_OUT] == "yes"} {
        enable NDS_L2C_TAG_RAM_CTRL_OUT_WIDTH
        if {[selected NDS_L2C_TAG_RAM_CTRL_OUT_WIDTH] == 0} {
            set_opt_value NDS_L2C_TAG_RAM_CTRL_OUT_WIDTH 1
        } elseif {[selected NDS_L2C_TAG_RAM_CTRL_OUT_WIDTH] > 128} {
            set_opt_value NDS_L2C_TAG_RAM_CTRL_OUT_WIDTH 128
        }
    } else {
        disable NDS_L2C_TAG_RAM_CTRL_OUT_WIDTH
	set_opt_value NDS_L2C_TAG_RAM_CTRL_OUT_WIDTH [selected_default NDS_L2C_TAG_RAM_CTRL_OUT_WIDTH]
    }
}

constraint NDS_L2C_DATA_RAM_CTRL_IN_WIDTH {} {
    if {[selected NDS_L2C_CACHE_SIZE_KB] != 0 && [selected NDS_RAM_CTRL_IN] == "yes"} {
        enable NDS_L2C_DATA_RAM_CTRL_IN_WIDTH
        if {[selected NDS_L2C_DATA_RAM_CTRL_IN_WIDTH] == 0} {
            set_opt_value NDS_L2C_DATA_RAM_CTRL_IN_WIDTH 1
        } elseif {[selected NDS_L2C_DATA_RAM_CTRL_IN_WIDTH] > 128} {
            set_opt_value NDS_L2C_DATA_RAM_CTRL_IN_WIDTH 128
        }
    } else {
        disable NDS_L2C_DATA_RAM_CTRL_IN_WIDTH
	set_opt_value NDS_L2C_DATA_RAM_CTRL_IN_WIDTH [selected_default NDS_L2C_DATA_RAM_CTRL_IN_WIDTH]
    }
}

constraint NDS_L2C_DATA_RAM_CTRL_OUT_WIDTH {} {
    if {[selected NDS_L2C_CACHE_SIZE_KB] != 0 && [selected NDS_RAM_CTRL_OUT] == "yes"} {
        enable NDS_L2C_DATA_RAM_CTRL_OUT_WIDTH
        if {[selected NDS_L2C_DATA_RAM_CTRL_OUT_WIDTH] == 0} {
            set_opt_value NDS_L2C_DATA_RAM_CTRL_OUT_WIDTH 1
        } elseif {[selected NDS_L2C_DATA_RAM_CTRL_OUT_WIDTH] > 128} {
            set_opt_value NDS_L2C_DATA_RAM_CTRL_OUT_WIDTH 128
        }
    } else {
        disable NDS_L2C_DATA_RAM_CTRL_OUT_WIDTH
	set_opt_value NDS_L2C_DATA_RAM_CTRL_OUT_WIDTH [selected_default NDS_L2C_DATA_RAM_CTRL_OUT_WIDTH]
    }
}

constraint NDS_L2_SOURCE_WIDTH {} {
        if {[selected NDS_RVV_SUPPORT] == "yes"} {
            set_opt_value NDS_L2_SOURCE_WIDTH 4
	} else {
            set_opt_value NDS_L2_SOURCE_WIDTH 3
	}
}

constraint NDS_FPU_TYPE {} {
    if {[selected NDS_FPU_TYPE] == "dp" || [selected NDS_FPU_TYPE] == "sp"} {
	set_opt_value NDS_BFLOAT16_SUPPORT "yes"
    } else {
	set_opt_value NDS_BFLOAT16_SUPPORT "no"
    }

}

constraint NDS_UNALIGNED_ACCESS {} {
    if {[selected NDS_FPU_TYPE] == "dp" || [selected NDS_FPU_TYPE] == "sp"} {
        set_opt_value NDS_UNALIGNED_ACCESS "yes"
    }
}

foreach type {DEVICE WRITETHROUGH} {
	for {set i 0} {$i < 8} {incr i} {
		constraint NDS_${type}_REGION${i}_BASE {} [subst {
			check_device_region_base_valid NDS_${type}_REGION${i}_BASE
		}]

		constraint NDS_${type}_REGION${i}_MASK {} [subst {
			check_device_region_mask_valid NDS_${type}_REGION${i}_MASK
		}]
	}
}

constraint NDS_CODENSE_SUPPORT {} {
    if {[selected NDS_RVC_SUPPORT] == "no"} {
        set_opt_value NDS_CODENSE_SUPPORT "no"
    }
}

constraint NDS_ACE_SUPPORT {} {
    if {[selected NDS_ACE_SUPPORT] == "no" || ([selected NDS_RVV_SUPPORT] == "no" && [selected NDS_BFLOAT16_SUPPORT] == "no")} {
        set_opt_value NDS_ACE_STREAM_PORT "no"
        disable NDS_ACE_STREAM_PORT
    } else {
        enable NDS_ACE_STREAM_PORT
    }
}

constraint NDS_ASP_DATA_WIDTH {} {
    if {([selected NDS_ACE_SUPPORT] == "no") || ([selected NDS_ACE_STREAM_PORT] == "no")} {
        set_opt_value NDS_ASP_DATA_WIDTH 512
        disable NDS_ASP_DATA_WIDTH
    } else {
        enable NDS_ASP_DATA_WIDTH
    }
}


set NDS_HOME $::env(NDS_HOME)

set ip_dir "kv_core"
set subsystem "ae350_cpu_subsystem"
set cpu_name "a45_core"
set core_name "kv_core"
set product "a45"
set multiplatform "off"
set ddr3_support "off"
set product_mp "no"
set cpu_name_incdirs  "+incdir+$NDS_HOME/andes_ip/$ip_dir/top/hdl"
set subsystem_incdirs "+incdir+$NDS_HOME/andes_ip/$ip_dir/top/hdl \
                       +incdir+$NDS_HOME/andes_ip/ae350/top/hdl/include \
                       +incdir+$NDS_HOME/andes_ip/ae350/define"

set ipxact_top		"${cpu_name}_top"
set ipxact_top_v	"$NDS_HOME/andes_ip/$ip_dir/top/hdl/${ipxact_top}.v"
set ipxact_top_xml	"$NDS_HOME/andes_ip/$ip_dir/top/hdl/${ipxact_top}.xml"

# FIX for SP
fixed_option			NDS_CLUSTER_SUPPORT		{no}
fixed_option			NDS_NHART			{1}
fixed_option			NDS_CM_SUPPORT			{no}
fixed_option			NDS_IOCP_NUM			{0}
fixed_option			NDS_IOCP_ID_WIDTH		{9}
fixed_option			NDS_IOCP_TOTAL_OUTSTANDING	{8}
fixed_option			NDS_CORE_BRG_TYPE		{0}
fixed_option			NDS_DFS_REG_BASE		{64'h00000000C0200000}
#fixed_option                    NDS_DLM_WAIT_CYCLE              {0}  

# L2C500 feature
fixed_option			NDS_L2C_CACHE_SIZE_KB		{0}
fixed_option			NDS_L2C_ECC_TYPE		{0}
fixed_option			NDS_L2C_REG_BASE		{64'h00000000E0500000}
fixed_option			NDS_L2C_BANKS			{2}
fixed_option			NDS_L2C_HPM_NUM			{0}
fixed_option			NDS_L2C_TAG_RAM_SETUP_CYCLE	{1}
fixed_option			NDS_L2C_DATA_RAM_SETUP_CYCLE	{1}
fixed_option			NDS_L2C_DATA_RAM_OUTPUT_CYCLE	{2}
fixed_option 	   		NDS_L2C_TAG_RAM_AW 	        {6}            	
fixed_option 	   		NDS_L2C_DATA_RAM_AW  		{10}  
fixed_option		        NDS_L2C_TAG_RAM_CTRL_IN_WIDTH	{1}   	
fixed_option	    	        NDS_L2C_TAG_RAM_CTRL_OUT_WIDTH	{1} 	  	
fixed_option		        NDS_L2C_DATA_RAM_CTRL_IN_WIDTH	{1}   	
fixed_option	    	        NDS_L2C_DATA_RAM_CTRL_OUT_WIDTH	{1} 
fixed_option			NDS_DCACHE_WPT_RAM_CTRL_IN_WIDTH  {1}
fixed_option			NDS_DCACHE_WPT_RAM_CTRL_OUT_WIDTH {1}

# MTK feature
#fixed_option			NDS_BIU_ASYNC_SUPPORT		{0}
#fixed_option			NDS_NUM_DLM_BANKS		{1}
#fixed_option			NDS_PC_GPR_PROBING_SUPPORT	{no}
#disable_option_value		NDS_PMP_ENTRIES			{32}
#fixed_option			NDS_ILM_WAIT_CYCLE		{0}
fixed_option			NDS_SLAVE_PORT_PATH_X2		{no}
fixed_option			NDS_PUSHPOP_TYPE		{0}

# FIX unsupport
fixed_option			PLATFORM_PLDM_HALTGROUP_COUNT	{0}
fixed_option			NDS_BIU_BUS			{axi}
#fixed_option			NDS_BIU_DATA_WIDTH		{64}
disable_option_value		NDS_BIU_DATA_WIDTH		{256}
fixed_option			NDS_AHB_LOW_LATENCY		{no}
fixed_option			NDS_BRANCH_PREDICTION		{dynamic}
fixed_option			NDS_BTB_SIZE			{256}

# On-going features
fixed_option			NDS_RVB_SUPPORT			{no}
fixed_option			NDS_RVV_SUPPORT			{no}
fixed_option			NDS_VTLB_ENTRIES		{0}

# FIX for each product
fixed_option			NDS_ISA_BASE			{rv32i}
fixed_option			NDS_RVC_SUPPORT			{yes}
fixed_option			NDS_RVA_SUPPORT			{yes}
fixed_option			NDS_NUM_PRIVILEGE_LEVELS	{3}
fixed_option			NDS_CODENSE_SUPPORT		{yes}
fixed_option			NDS_XLEN			{32}
fixed_option			NDS_VALEN			{32}
fixed_option			NDS_UNALIGNED_ACCESS		{yes}

fixed_option			NDS_PMP_GRANULARITY		{8}
disable_option_value		NDS_PMP_ENTRIES			{1 3 5 6 7 9 10 11 12 13 14 15 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31}
fixed_option			NDS_MMU_SCHEME			{sv32}
disable_option_value		NDS_STLB_ENTRIES		{0}
disable_option_value		NDS_ITLB_ENTRIES		{0}
disable_option_value		NDS_DTLB_ENTRIES		{0}
fixed_option			NDS_LM_ENABLE_CTRL		{no}
fixed_option			NDS_CACHE_LINE_SIZE		{64}
delete_option			NDS_LSU_PREFETCH
set_option_default_value	NDS_DEBUG_SUPPORT		{yes}
set_option_default_value	NDS_ICACHE_LRU			{lru}
set_option_default_value	NDS_DCACHE_LRU			{lru}
set_option_default_value	NDS_ICACHE_SIZE			{32}
set_option_default_value	NDS_DCACHE_SIZE			{32}
set_option_default_value	NDS_ICACHE_WAY                  {2}
set_option_default_value	NDS_DCACHE_WAY                  {4}
set_option_default_value	NDS_SLAVE_PORT_SUPPORT		{yes}
set_option_default_value	NDS_SLAVE_PORT_ID_WIDTH         {8}
# misc
set_option_default_value	NDS_ILM_BASE			{64'h0000000000000000}
set_option_default_value	NDS_DLM_BASE			{64'h0000000000200000}
set_option_default_value	NDS_DEBUG_VEC			{64'h00000000E6800000}

# overwrite NDS_NUM_TRIGGER
constraint NDS_ICACHE_WAY {} {
	if {[selected NDS_ICACHE_WAY] == 1} {
		set_opt_value NDS_ICACHE_LRU "random"
		disable NDS_ICACHE_LRU
	} else {
		enable NDS_ICACHE_LRU
	}
}

constraint NDS_DCACHE_WAY {} {
	if {[selected NDS_DCACHE_WAY] == 1} {
		set_opt_value NDS_DCACHE_LRU "random"
		disable NDS_DCACHE_LRU
	} else {
		enable NDS_DCACHE_LRU
	}
}

#constraint NDS_BIU_BUS {} {
#	set_opt_value NDS_BIU_DATA_WIDTH 64
#	disable NDS_BIU_DATA_WIDTH
#}

# These options are not supported
fixed_option	NDS_L2C_TAG_RAM_CTRL_IN_WIDTH		1
fixed_option	NDS_L2C_TAG_RAM_CTRL_OUT_WIDTH		1
fixed_option	NDS_L2C_DATA_RAM_CTRL_IN_WIDTH		1
fixed_option	NDS_L2C_DATA_RAM_CTRL_OUT_WIDTH		1

source "$NDS_HOME/config_tools/platform_config.tcl"


constraint NDS_CPUID {} {
        set_opt_value NDS_CPUID [selected_default NDS_CPUID]
}

constraint NDS_CPU_MIMPID {} {
        set_opt_value NDS_CPU_MIMPID [selected_default NDS_CPU_MIMPID]
}

    

# --------------------------------------
end_dependency_checker {LM_REGION} {
        set l {}

        # get region: ILM, DLM, NDS_${type}_REGION${i}_BASE
        foreach type {ILM DLM} {
                set base [extract_hex_digits [selected NDS_${type}_BASE]]
                set size [selected NDS_${type}_SIZE]
                set mask [expr "$size * 1024 - 1"]
                lappend l [list [selected_full_name NDS_${type}_BASE] $base $mask]
        }
        foreach type {DEVICE WRITETHROUGH} {
                for {set i 0} {$i < 8} {incr i} {
                        set region_base [extract_hex_digits [selected NDS_${type}_REGION${i}_BASE]]
                        set region_mask [extract_hex_digits [selected NDS_${type}_REGION${i}_MASK]]
                        if { $region_mask != 0} {
                                set region_mask [expr [get_size_from_region_mask $region_mask] - 1]
                                lappend l [list [selected_full_name NDS_${type}_REGION${i}_BASE] $region_base $region_mask]
                        }
                }
        }

        # check overlap
        return [check_overlap $l]
}

end_dependency_checker {WRITETHROUGH_REGION} {
        set l {}

        foreach type {DEVICE WRITETHROUGH} {
                for {set i 0} {$i < 8} {incr i} {
                        set region_base [extract_hex_digits [selected NDS_${type}_REGION${i}_BASE]]
                        set region_mask [extract_hex_digits [selected NDS_${type}_REGION${i}_MASK]]
                        if { $region_mask != 0} {
                                set region_mask [expr [get_size_from_region_mask $region_mask] - 1]
                                lappend l [list [selected_full_name NDS_${type}_REGION${i}_BASE] $region_base $region_mask]
                        }
                }
        }

        # check overlap
        return [check_overlap $l]
}


proc get_size_from_region_mask {region_mask} {
        set mask [expr "0x$region_mask"]
        set size 1
        for {set i 0} {$i < 64} {incr i} {
                if {[expr "($mask & $size) == 0"]} {
                        set size [expr "$size << 1"]
                } else {
                        return [expr "$size - 1"]
                }
        }
}

    
if {[file exists "$NDS_HOME/andes_vip/scripts/nds-sid-config.tcl"]} {
	source "$NDS_HOME/andes_vip/scripts/nds-sid-config.tcl"
	set gen_sid $gen_config_inc
} elseif {[file exists "$NDS_HOME/config_tools/nds-sid-config.tcl"]} {
	source "$NDS_HOME/config_tools/nds-sid-config.tcl"
	set gen_sid $gen_config_inc
}

create_gui
set_default
if {$opt_load_cfg_file != ""} {
        if {[catch {load_cfg_file $opt_load_cfg_file} error]} {
		puts $error
		exit 1
	}
}
if {$opt_extra_tcl_file != ""} {
        if {[catch {load_cfg_file $opt_extra_tcl_file} error]} {
		puts $error
		exit 1
	}
}
init_dependency_check

if {$opt_generate} {
	gen_config_cmd
	exit 0
}
show_gui

