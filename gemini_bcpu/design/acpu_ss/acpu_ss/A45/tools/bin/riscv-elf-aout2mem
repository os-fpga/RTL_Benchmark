#!/usr/bin/perl
use Cwd;
$in = "a.out";
$out = "a.mem";
$listing = "a.list";
($objdump, $disassemble) = find_objdump_program();

$ilm_dat_file    = "ilm.dat";
$dlm_dat_file    = "dlm.dat";
$loader_dat_file = "loader.dat";

$with_source = 0;

$ace_support = 0;

# Check arguments.
@ARGV2 = ();
$i = 0;
while ($i <= $#ARGV) {
	if ($ARGV[$i] !~ /^-/) {
		# Not an option.
		push @ARGV2, $ARGV[$i];
	} elsif ($ARGV[$i] eq "-S") {
		# Intermix source code with disassembly.
		$with_source = 1;
	} else {
		printf "ERROR: aout2mem: unknown option \"$ARGV[$i]\"\n";
		exit(1);
	}
	$i++;
}

if (@ARGV2 == 2) {
	($in, $out) = @ARGV2;
	$listing = $out;
	$listing =~ s/(\.[^\.]+)?$/.list/;
}
elsif (@ARGV2 == 3) {
	($in, $out, $listing) = @ARGV2;
}

if (! -f $in or !open(IN, "<", $in)) {
	printf "ERROR: aout2mem: file \"$in\" does not exists\n";
	exit(1);
}
close(IN);

unlink($out);
unlink($listing);

check_ace_support();
convert_elf_to_mem($in, $out, $listing);

exit(0);

sub convert_elf_to_mem {
	my ($in, $out, $listing) = @_;
	my ($ifh, $lfh, $mem_fh, $ilm_fh, $dlm_fh, $loader_fh);
	my $disassemble_cmd;
	my $objdump_cmd;

	if ($ace_support) {
    $f = \&{'ace_get_disassemble_cmd'};
		$disassemble_cmd = $f->($disassemble,$in);
    $f = \&{'ace_get_objdump_cmd'};
    $objdump_cmd = $f->($objdump, $in);
	}
	else {
		$disassemble_cmd = "$disassemble -d $in";
		$objdump_cmd = "$objdump -sh $in";
	}
	my $line;

	if (!open($ifh, "$disassemble_cmd|")) {
		printf "ERROR: aout2mem: can not execute \"%s\"\n", $disassemble_cmd;
		close($ifh);
		exit(1);
	}

	if (!open($lfh, ">", $listing)) {
		printf "ERROR: aout2mem: can not write to %s\n", $listing;
		exit(1);
	}

	# log disassembled output to the listing file.
	while ($line = <$ifh>) {
		print $lfh $line;
	}
	close($ifh);
	# don't close $lfh, we'll need to also log data section.

	if (!open($ifh, "$objdump_cmd|")) {
		printf "ERROR: aout2mem: can not execute \"%s\"\n", $objdump_cmd;
		close($ifh);
		exit(1);
	}

	if (!open($mem_fh, ">", $out)) {
		printf "ERROR: aout2mem: can not write to %s\n", $out;
		exit(1);
	}

	if (!open($ilm_fh, ">", $ilm_dat_file)) {
		printf "ERROR: aout2mem: can not write to %s\n", $ilm_dat_file;
		exit(1);
	}

	if (!open($dlm_fh, ">", $dlm_dat_file)) {
		printf "ERROR: aout2mem: can not write to %s\n", $dlm_dat_file;
		exit(1);
	}
=pod

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00f9fef8  00000000  00000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00f9ff18  00f9ff18  00fa0f18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
...
Contents of section .text:
 8048074 5589e583 ec08c745 f8000000 00c745fc  U......E......E.
 8048084 00000000 837dfc63 7e02eb10 8b45fc8d  .......c~....E..
 8048094 55f80102 8d45fcff 00ebe990 8b45f889  U....E.......E..
 80480a4 c0c9c390                             ....            
Contents of section .data:
Contents of section .comment:
=cut

	my $log_section = 0;
	my $load_section = 0;
	my %load_attr;
	my $load_section_name;
	my %section_size;
	my %vma_base;
	my %lma_base;
	my $section;
	my $mem_start_lma;
	my $ilm_start_vma; # the address dumped out by objdump command is vma.
	my $dlm_start_vma;
	my $loader_start_vma;
	my $ofh;
	my $section_type = 0; # 0: mem, 1: d, 2: i, 3: loader
	my $has_unaligned_tail = 0;
	my $unaligned_line;
	my $next_line_addr;
	my $last_line_addr;

	while ($line = <$ifh>){  # search section to load to mem
		if (!defined($section)) {
			#0 .text         0000252c  0000000000000000  0000000000000000  00001000  2**2
			if ($line =~ m/^\s*\d+\s+(\S+)\s+([\da-fA-F]{8,16})\s+([\da-fA-F]{8,16})\s+([\da-fA-F]{8,16}).*\*\*/) {
				$load_section_name = $1;
				$section_size{$load_section_name} = hex($2);
				$vma_base{$load_section_name} = hex($3);
				$lma_base{$load_section_name} = hex($4);
				printf("section %-10s size=%08x vma=%08x lma=%08x\n", $load_section_name, $section_size{$load_section_name}, $vma_base{$load_section_name}, $lma_base{$load_section_name});

				$load_attr{$load_section_name} = 1 if ($load_section_name =~ m/^\.?[id]lm$/);
				next;
			}
			elsif ($line =~ /\bLOAD\b/ and !exists($load_attr{$load_section_name})) {
				$load_attr{$load_section_name} = 1;

				if ($section_size{$load_section_name} > 0 and $section_name !~ m/^\.?([idu]lm|loader)$/) {
					if (!defined($mem_start_lma)) {
						$mem_start_lma = $lma_base{$load_section_name}
					}
					elsif ($mem_start_lma > $lma_base{$load_section_name}) {
						$mem_start_lma = $lma_base{$load_section_name};
					}
				}
				next;
			}
		}

		if ($line =~ m/^Contents of section ([^:]*):/) {
			$section = $1;
			$section =~ s/^\.ulm$/^\.ilm/;
			$load_section = (exists $load_attr{$section} && $load_attr{$section});
			$log_section = $load_section && ($section !~ m/\.text/);
			if ($log_section) {
				print $lfh "\n";
				print $lfh $line;
			}

			# Note: $section_type is last section's type because it is not updated
			if ($section =~ m/^\.?[id]lm$/ or $section =~ m/\.?loader$/ or ($section_type > 0)) {
				if ($has_unaligned_tail) {
					$has_unaligned_tail = 0;
					printf $ofh "@%08x %s\n", $last_line_addr>>2, join(" ", @$unaligned_line);
				}
			}

			if ($section =~ m/^\.?ilm$/) {
				$section_type = 2;
				$ofh = $ilm_fh;
			}
			elsif ($section =~ m/^\.?dlm$/) {
				$section_type = 1;
				$ofh = $dlm_fh;
			}
			elsif ($section =~ m/^\.?loader$/) {
				$section_type = 3;

				# open loader_dat_file when loader section exists
				if (!open($loader_fh, ">", $loader_dat_file)) {
					printf "ERROR: aout2mem: can not write to %s\n", $loader_dat_file;
					exit(1);
				}

				$ofh = $loader_fh;
			}
			else {
				$section_type = 0;
				$ofh = $mem_fh;
			}

			next;
		}

		next if (!$load_section);

		print $lfh $line if ($log_section); # log data to listing file.

		substr($line, -19, 19) = "";	# delete ascii listings
		my (@w) = split(/\s+/, $line);
		my $addr = shift @w;

		if ($addr eq "") {
			$addr = shift(@w);
		}

		$addr = hex($addr);
		if ($section_type == 0) { # mem
			$addr = $addr - $vma_base{$section};
			$addr = $addr + $lma_base{$section} - $mem_start_lma;
			if ($addr < 0) {
				printf "invalid mem_start_lma:%x. section: %s vma_base:%x lma_base:%x is in front of mem_start_lma\n", $mem_start_lma, $section, $vma_base{$section}, $lma_base{$section};
				exit(1);
			}
		}
		elsif ($section_type == 3) { # loader
			$loader_start_vma = $addr if (!defined($loader_start_vma));
			$addr = $addr - $loader_start_vma;
		}
		elsif ($section_type == 2) { # ilm
			$ilm_start_vma = $addr if (!defined($ilm_start_vma));
			$addr = $addr - $ilm_start_vma;
		}
		elsif ($section_type == 1) { # dlm
			$dlm_start_vma = $addr if (!defined($dlm_start_vma));
			$addr = $addr - $dlm_start_vma;
		}

		my $byte_offset = $addr & 0x3;
		if ($byte_offset != 0) {
			# possibly data from unaligned section start
			if ($addr >= $next_line_addr) {
				my $new_line = join("", @w);
				@w = ();

				if ($has_unaligned_tail and (0xfffffffc & ($addr ^ $next_line_addr)) == 0x0) {
					# new addr overlaps with the last word of previous line
					# and the previous line has unaligned tail and not printed out yet.
					# -> move begining of current line ($new_line) to the previous line
					#    to make the previous line an aligned line.

					my $last_words = scalar(@{$unaligned_line});
					my $shift_nbytes = 4 - $byte_offset;
					my $shift_bytes = substr($new_line, 0, 2*$shift_nbytes, "");
					substr($unaligned_line->[$last_words-1], $byte_offset*2, 2*$shift_nbytes) = $shift_bytes;
					$addr = $addr + ((length($shift_bytes)+1) >> 1); # we've moved part of current line to the last $unaligned_line.

					for (my $i = $last_words; $i < 4; ++$i) {
						last if length($new_line) < 8;
						my $word = substr($new_line, 0, 8, "");
						push(@$unaligned_line, $word);
						$addr += 4;
					}

				}
				else { # non-continuous unaligned address - pad zeros in the front.
					$new_line = ("00" x $byte_offset) . $new_line;
					$addr = $addr & 0xfffffffc;
				}

				# recreate @w for the new_line.
				while (length($new_line) > 0) {
					my $word = substr($new_line, 0, 8, "");
					push(@w, $word);
				}
			}
			else {
				printf "ERROR: aout2mem: address 0x%08x is not word aligned\n", $addr;
				exit(1);
			}
		}

		if (scalar(@w) > 0) {
			if ($has_unaligned_tail) {
				# The previously line has unaligned tail and it has not been printed out yet.
				# it will become aligned if ($byte_offset != 0) for the new line by the previous
				# block. Otherwise, it is still unaligned and the current line is not a continuation
				# of the previous line.
				# in either case, we can print it out.
				printf $ofh "@%08x %s\n", $last_line_addr>>2, join(" ", @$unaligned_line);
				$unaligned_line = [];
				$has_unaligned_tail = 0;
			}

			$next_line_addr = $addr;
			$last_line_addr = $addr;
		}

		# objdump may not print out full 32-bit value
		# if the segment does not end rounded.
		foreach (@w) {
			my $len = length($_);
			$next_line_addr += int(($len+1)>>1);
			if ($len < 8) {
				$_ .= "0" x (8-$len);
				$has_unaligned_tail = 1;
			}
		}

		# assume unaligned tail will be at the last word in @w.
		# even if @w has unaligned tail, we'll make sure scalar(@w) <= 4
		# after this iteration finishes.
		while (scalar(@w) > 4) {
			printf $ofh "@%08x %s\n", $addr>>2, join(" ", @w[0..3]);
			@w = @w[4 .. $#w];
			$last_line_addr += 4*4;
			$addr += 4*4;
		}

		if (scalar(@w) > 0) {
			if ($has_unaligned_tail) {
				$unaligned_line = \@w;
			}
			else {
				$unaligned_line = undef;
				printf $ofh "@%08x %s\n", $addr>>2, join(" ", @w);
			}
		}
	}
	if ($has_unaligned_tail) {
		printf $ofh "@%08x %s\n", $last_line_addr>>2, join(" ", @$unaligned_line);
	}
	close($ifh);
	close($mem_fh);
	close($ilm_fh);
	close($dlm_fh);
	close($loader_fh);
}

sub find_objdump_program {
	# there is no real need to use riscv64-elf-objdump/riscv32-elf-objdump for this script.
	# but we still try heard to find it anyway..

	my $objdump;

	# search $ENV{PATH}
	my $env_path = $ENV{PATH};
	foreach my $dir (split(":", $env_path)) {
		$objdump = sprintf "%s/riscv64-elf-objdump", $dir;
		last if (-x $objdump);
		$objdump = sprintf "%s/riscv32-elf-objdump", $dir;
		last if (-x $objdump);
	}

	# not found
	if (!-x $objdump) {
		$objdump = "objdump";
	}

	foreach my $dir (split(":", $env_path)) {
		$disassemble = sprintf "%s/riscv64-elf-objdump", $dir;
		last if (-x $disassemble);
		$disassemble = sprintf "%s/riscv32-elf-objdump", $dir;
		last if (-x $disassemble);
		$disassemble = sprintf "%s/llvm-objdump", $dir;
		last if (-x $disassemble);
	}

	# not found
	if (!-x $disassemble) {
		$disassemble = "objdump";
	}
	else {
		if (determine_disassemble_cmd_llvm($disassemble)) {
			$disassemble .= " -riscv-no-aliases";
		}
		else { # GNU
			if ($with_source) {
				$disassemble .= " -Sl";
			}
			$disassemble .= " -Mno-aliases";
		}
	}

	return ($objdump, $disassemble);
}

# Determine disassemble toolchain version: GNU or LLVM
sub determine_disassemble_cmd_llvm {
	my ($cmd) = @_;
	($cmd) = split(/\s+/, $cmd);
	$cmd .= " --version";
        $out = `$cmd`;
	if ($out =~ m/LLVM/) {
		return 1;
	}
	else {
		return 0;
	}
}

sub check_ace_support {
  if (-e "./rtl/ace_plusdef_func") {
    require "./rtl/ace_plusdef_func";
    $ace_support = 1;
  }
  else {
    $ace_support = 0;
  }
} 


