export PATH := $(NDS_HOME)/tools/bin:$(NDS_TOOLCHAIN):$(PATH)

VERDI_LIB =  $(VERDI_HOME)/share/PLI/VCS/linux
VERDI_SETUP1 = -debug_access  -debug_region=lib
VERDI_SETUP2 = -P $(VERDI_LIB)/novas.tab  $(VERDI_LIB)/pli.a

#DUMP_TRN = +define+DUMP+TRN +access+rc
#DUMP_FSDB = +define+DUMP+FSDB $(VERDI_SETUP1)
#DLM_WAIT_CYCLES = +define+NDS_DLM_WAIT_CYCLES=1
VPLUSDEFINES = $(DUMP_TRN) $(DUMP_FSDB) $(DLM_WAIT_CYCLES)
VDEFAULTDEFINES =
VDEFINES = $(VPLUSDEFINES) $(VDEFAULTDEFINES)

CPLUSDEFINES =
CDEFAULTDEFINES =
CDEFINES = $(CPLUSDEFINES) $(CDEFAULTDEFINES)

#-----set toolchain-----# 
NDS_XLEN = $(shell cat $(NDS_HOME)/andes_ip/kv_core/top/hdl/config.inc | grep NDS_XLEN | sed 's/`define\s\+NDS_XLEN\s\+//g')

#-----set AE350 CPU subsystem-----# 
AE350_CPU_SUBSYSTEM = ae350_cpu_subsystem
NDS_CLUSTER_SUPPORT = $(shell cat $(NDS_HOME)/andes_ip/kv_core/top/hdl/config.inc | grep "NDS_CLUSTER_SUPPORT\s" | sed 's/`define\s\+NDS_CLUSTER_SUPPORT\s\+//g')
ifeq ($(NDS_CLUSTER_SUPPORT), "yes")
VDEFAULTDEFINES += +define+NDS_AE350_MULTI_HART +define+NDS_IPIPE_TIMEOUT=1500000
CDEFAULTDEFINES += -DNDS_AE350_MULTI_HART
AE350_CPU_SUBSYSTEM = ae350_cpu_cluster_subsystem
endif

#-----set L2C CCTL memory to V1-----# 
NDS_NHART = $(shell cat $(NDS_HOME)/andes_ip/kv_core/top/hdl/config.inc | grep NDS_NHART | sed 's/`define\s\+NDS_NHART\s\+//g')
ifeq ($(NDS_NHART), 8)
VDEFAULTDEFINES += +define+NDS_L2C_CCTL_MAP_V1
CDEFAULTDEFINES += -DNDS_L2C_CCTL_MAP_V1
endif

#-----------------------------------------#
RISCV_PREFIX ?= riscv$(NDS_XLEN)-elf-
CC            = $(RISCV_PREFIX)gcc
AR            = $(RISCV_PREFIX)ar

LDFLAGS = -nostartfiles -static -T../etc/script.ld -L. -ltest
CFLAGS = -c -O -Wall -mstrict-align -mcmodel=large -I. -I../include $(CDEFINES)
ARFLAGS = -c -r

OBJS = start.o program.o putchar.o
LIB_OBJS = ae350_isr.o ae350_init.o printf.o heap_init.o malloc.o free.o rand.o srand.o rand_seq.o interrupt.o cluster.o

TCF_SCOPE = system.ae350_chip.$(AE350_CPU_SUBSYSTEM)

#-----------------------------------------#
# Simulator
#VERILOG      = xrun
 VERILOG      = vcs

VERILOG_VERSION =
ifeq ($(VERILOG), xrun)
SIMULATION_COMMAND = xrun -64bit -xceligen on -l verilog.log -exit -licqueue +nowarn+CUVWSP +nowarn+LIBNOU +nowarn+SPDUSD $(VDEFINES)
POWER_RPT_COMMAND = -input setup_power_sim.tcl
VERILOG_VERSION = $(VERILOG) -version
else
ifeq ($(VERILOG), vcs)
SIMULATION_COMMAND = vcs -full64 -l verilog.log -lca -v2005 -R -sverilog +v2k +systemverilogext+sv -LDFLAGS -Wl,-E +vcs+lic+wait $(VDEFINES)
POWER_RPT_COMMAND = -debug_all -ucli -i setup_power_sim.ucli
VERILOG_VERSION = $(VERILOG) -ID
else
ifeq ($(VERILOG), qverilog)
SIMULATION_COMMAND = qverilog -l verilog.log -nodebug $(VDEFINES)
POWER_RPT_COMMAND = -input setup_power_sim.tcl
VERILOG_VERSION = $(VERILOG) -version
else
$(error the VERILOG variable defines an unknown Verilog simulator. Valid values are xrun and vcs)
endif
endif
endif

NOCOSIM =

ifneq ("$(wildcard $(NDS_HOME)/tools/bin/cosim)", "")
ifneq ($(NOCOSIM), 1)
ifeq ($(findstring dhrystone, $(CURDIR)), dhrystone)
SIMULATION_COMMAND := with_cosim $(SIMULATION_COMMAND)
else ifeq ($(findstring coremark, $(CURDIR)), coremark)
SIMULATION_COMMAND := with_cosim $(SIMULATION_COMMAND)
else ifeq ($(findstring whetstone, $(CURDIR)), whetstone)
SIMULATION_COMMAND := with_cosim $(SIMULATION_COMMAND)
else ifeq ($(findstring test_turbu, $(CURDIR)), test_turbu)
SIMULATION_COMMAND := with_cosim $(SIMULATION_COMMAND)
endif
endif
endif

ifeq ($(findstring with_cosim, $(SIMULATION_COMMAND)), with_cosim)
export COSIM := cosim
else
export NOCOSIM := 1
endif
