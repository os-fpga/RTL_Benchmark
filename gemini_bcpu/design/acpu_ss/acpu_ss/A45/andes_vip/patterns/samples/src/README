File Descriptions:
* start.S                  => startup code
* ae350_isr.c  => C code for handlers

The testbench generate NDSROM.dat/loader.dat images. The NDSROM.dat image consists
of the main test binary. The loader.dat image consists of the boot loader binary.

The compiled program layout will look like the table below. The boot_loader
binary will be loaded to the external flash model and the main test binary is
loaded to the ILM and SRAM by the testbench (ae350_tb.sv).
The input pin `reset_vector' of the processor defines the starting PC address
when the processor exits the reset state and it is defined to point to 0x80000000,
which is the base address of the SPI1 AHB memory for accessing the external
flash.

  |------------+---------+-------------------|
  | VMA        | LMA     | label             |
  |------------+---------+-------------------|
  | 0x0        | 0x0     | _trap_entry_vplic |
  | 0x80       | 0x80    | _start            |
  |            |         |                   |
  |------------+---------+-------------------|
  | 0x80000000 | 0x0     | boot_loader       |
  |------------+---------+-------------------|


------------------------------------------------------------------------------
Program Flow:
Execution starts from boot_loader() in ae350_isr.c. To save the
simulation cycle time, the boot_loader() code assumes that the data for the
main test binary have been copied to the proper location (ILM and SRAM) and
jumps directory to the entry point (_start) of the main test binary. The actual
copying is done by the Verilog testbench in ae350_tb.sv.

The main test binary starts at _start (0x80), and continue to _reset_handler
in start.S and reset_handler() in ae350_isr.c. Finally, control
flow is transfers to main() through the mret instruction.


------------------------------------------------------------------------------
Trap Handler Flow:
AndesCore processors support two kinds of trap handling schemes: standard
RISC-V scheme and the Andes Vectored PLIC extension scheme.

In standard RISC-V scheme, trap handling starts at m_trap_entry in start.S and
jumps to trap_handler() in ae350_isr.c, where all traps are handled.

In Andes Vectored PLIC extension scheme, the entry points are defined in the
_trap_entry_vplic table. Each of the _trap_entry_vplic entry defines the entry
points for external interrupts. There are no external interrupt 0, so entry 0
is used to hold the entry point for exceptions and non-external interrupts. The
address of trap_entry() is assigned to entry 0 of _trap_entry_vlic such that
the same function trap_handler() is shared for exception and non-external
interrupt handling regardless of the configured trap handling scheme. The
vectored external interrupt handlers all call vectored_machine_ei_handler() in
ae350_isr.c to have a centralized & simplified external interrupt
handling.

