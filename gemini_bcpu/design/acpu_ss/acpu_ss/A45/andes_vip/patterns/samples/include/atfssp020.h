#ifndef __ATFSSP020_H
#define __ATFSSP020_H

#include <inttypes.h>
#include "general.h"

// ======================================================
// ATFSSP020 register definition
// ======================================================
// ATFSSP020 registers
typedef struct {
	__IO uint32_t CR0;			// (0x00) SSP control register 0
	__IO uint32_t CR1;			// (0x04) SSP control register 1
	__IO uint32_t CR2;			// (0x08) SSP control register 2
	__I  uint32_t SR;			// (0x0c) SSP status register
	__IO uint32_t ICR;			// (0x10) SSP interrupt control register
	__IO uint32_t ISR;			// (0x14) SSP interrupt status register
	__IO uint32_t DR;			// (0x18) SSP data register
	__IO uint32_t RESERVED;			// (0x1c) reserved register
	__IO uint32_t ACTXVR;			// (0x20) AC-link Tx slot valid register
	__IO uint32_t ACRXVR;			// (0x24) AC-link Rx slot valid register
	__IO uint32_t ACCR;			// (0x28) AC-link Command register
	__IO uint32_t ACDR;			// (0x2c) AC-link Command Data Register
	__IO uint32_t RESERVED1[4];		// (0x30~0x3c) reserved registers
	__I  uint32_t REV;			// (0x40) SSP revision register
	__I  uint32_t FR;			// (0x44) SSP feature register
} ATFSSP020_RegDef;

// (0x00) SSP control register 0
#define ATFSSP020_CR0_NACE_MASK			(BIT_MASK(31, 30))	// Intel Audio selection
#define ATFSSP020_CR0_NACE_OFFSET		(30)
#define ATFSSP020_CR0_NACE_DEFAULT		(0)
#define ATFSSP020_CR0_FFMT_MASK			(BIT_MASK(14, 12))	// Frame format
#define ATFSSP020_CR0_FFMT_OFFSET		(12)
#define ATFSSP020_CR0_FFMT_DEFAULT		(0)
#define ATFSSP020_CR0_FSDIST_MASK		(BIT_MASK(9, 8))	// Frame/sync and data distance
#define ATFSSP020_CR0_FSDIST_OFFSET		(8)
#define ATFSSP020_CR0_FSDIST_DEFAULT		(1)
#define ATFSSP020_CR0_LBM_MASK			(BIT_MASK(7, 7))	// Loopback mode
#define ATFSSP020_CR0_LBM_OFFSET		(7)
#define ATFSSP020_CR0_LBM_DEFAULT		(0)
#define ATFSSP020_CR0_LSB_MASK			(BIT_MASK(6, 6))	// Bit sequence indicator
#define ATFSSP020_CR0_LSB_OFFSET		(6)
#define ATFSSP020_CR0_LSB_DEFAULT		(0)
#define ATFSSP020_CR0_FSPO_MASK			(BIT_MASK(5, 5))	// Frame/sync polarity
#define ATFSSP020_CR0_FSPO_OFFSET		(5)
#define ATFSSP020_CR0_FSPO_DEFAULT		(0)
#define ATFSSP020_CR0_FSJSTFY_MASK		(BIT_MASK(4, 4))	// Data justify
#define ATFSSP020_CR0_FSJSTFY_OFFSET		(4)
#define ATFSSP020_CR0_FSJSTFY_DEFAULT		(0)
#define ATFSSP020_CR0_OPM_MASK			(BIT_MASK(3, 2))	// Operation mode
#define ATFSSP020_CR0_OPM_OFFSET		(2)
#define ATFSSP020_CR0_OPM_DEFAULT		(3)
#define ATFSSP020_CR0_SCLKPO_MASK		(BIT_MASK(1, 1))	// SCLK polarity
#define ATFSSP020_CR0_SCLKPO_OFFSET		(1)
#define ATFSSP020_CR0_SCLKPO_DEFAULT		(0)
#define ATFSSP020_CR0_SCLKPH_MASK		(BIT_MASK(0, 0))	// SCLK phase
#define ATFSSP020_CR0_SCLKPH_OFFSET		(0)
#define ATFSSP020_CR0_SCLKPH_DEFAULT		(0)
#define ATFSSP020_CR0_DEFAULT			(\
						ATFSSP020_DEFAULT(CR0, NACE) |\
						ATFSSP020_DEFAULT(CR0, FFMT) |\
						ATFSSP020_DEFAULT(CR0, FSDIST) |\
						ATFSSP020_DEFAULT(CR0, LBM) |\
						ATFSSP020_DEFAULT(CR0, LSB) |\
						ATFSSP020_DEFAULT(CR0, FSPO) |\
						ATFSSP020_DEFAULT(CR0, FSJSTFY) |\
						ATFSSP020_DEFAULT(CR0, OPM) |\
						ATFSSP020_DEFAULT(CR0, SCLKPO) |\
						ATFSSP020_DEFAULT(CR0, SCLKPH) \
						)

// (0x04) SSP control register 1
#define ATFSSP020_CR1_PDL_MASK			(BIT_MASK(31, 24))	// Padding data length
#define ATFSSP020_CR1_PDL_OFFSET		(24)
#define ATFSSP020_CR1_PDL_DEFAULT		(0)
#define ATFSSP020_CR1_SDL_MASK			(BIT_MASK(20, 16))	// Serial data length
#define ATFSSP020_CR1_SDL_OFFSET		(16)
#define ATFSSP020_CR1_SDL_DEFAULT		(0x7)
#define ATFSSP020_CR1_SCLKDIV_MASK		(BIT_MASK(15, 0))	// SCLK divider
#define ATFSSP020_CR1_SCLKDIV_OFFSET		(0)
#define ATFSSP020_CR1_SCLKDIV_DEFAULT		(0x8000)
#define ATFSSP020_CR1_DEFAULT			(\
						ATFSSP020_DEFAULT(CR1, PDL) |\
						ATFSSP020_DEFAULT(CR1, SDL) |\
						ATFSSP020_DEFAULT(CR1, SCLKDIV) \
						)

// (0x08) SSP control register 2
#define ATFSSP020_CR2_RCNT_MASK			(BIT_MASK(15, 8))	// Reference counter
#define ATFSSP020_CR2_RCNT_OFFSET		(8)
#define ATFSSP020_CR2_RCNT_DEFAULT		(0x85)
#define ATFSSP020_CR2_SSPRST_MASK		(BIT_MASK(6, 6))	// SSP reset
#define ATFSSP020_CR2_SSPRST_OFFSET		(6)
#define ATFSSP020_CR2_SSPRST_DEFAULT		(0)
#define ATFSSP020_CR2_ACCRST_MASK		(BIT_MASK(5, 5))	// AC-link cold reset enable
#define ATFSSP020_CR2_ACCRST_OFFSET		(5)
#define ATFSSP020_CR2_ACCRST_DEFAULT		(0)
#define ATFSSP020_CR2_ACWRST_MASK		(BIT_MASK(4, 4))	// AC-link warm reset enable
#define ATFSSP020_CR2_ACWRST_OFFSET		(4)
#define ATFSSP020_CR2_ACWRST_DEFAULT		(0)
#define ATFSSP020_CR2_TXFCLR_MASK		(BIT_MASK(3, 3))	// Transmit FIFO clear
#define ATFSSP020_CR2_TXFCLR_OFFSET		(3)
#define ATFSSP020_CR2_TXFCLR_DEFAULT		(0)
#define ATFSSP020_CR2_RXFCLR_MASK		(BIT_MASK(2, 2))	// Receive FIFO clear
#define ATFSSP020_CR2_RXFCLR_OFFSET		(2)
#define ATFSSP020_CR2_RXFCLR_DEFAULT		(0)
#define ATFSSP020_CR2_TXDOE_MASK		(BIT_MASK(1, 1))	// Transmit data output enable
#define ATFSSP020_CR2_TXDOE_OFFSET		(1)
#define ATFSSP020_CR2_TXDOE_DEFAULT		(1)
#define ATFSSP020_CR2_SSPEN_MASK		(BIT_MASK(0, 0))	// The SSP enable
#define ATFSSP020_CR2_SSPEN_OFFSET		(0)
#define ATFSSP020_CR2_SSPEN_DEFAULT		(0)
#define ATFSSP020_CR2_DEFAULT			(\
						ATFSSP020_DEFAULT(CR2, RCNT) |\
						ATFSSP020_DEFAULT(CR2, SSPRST) |\
						ATFSSP020_DEFAULT(CR2, ACCRST) |\
						ATFSSP020_DEFAULT(CR2, ACWRST) |\
						ATFSSP020_DEFAULT(CR2, TXFCLR) |\
						ATFSSP020_DEFAULT(CR2, RXFCLR) |\
						ATFSSP020_DEFAULT(CR2, TXDOE) |\
						ATFSSP020_DEFAULT(CR2, SSPEN) \
						)

// (0x0c) SSP status register
#define ATFSSP020_SR_CRDY_MASK			(BIT_MASK(29, 29))	// Codec are all ready
#define ATFSSP020_SR_CRDY_OFFSET		(29)
#define ATFSSP020_SR_CRDY_DEFAULT		(0)
#define ATFSSP020_SR_RVAL_MASK			(BIT_MASK(28, 28))	// Read ACCMDR data valid
#define ATFSSP020_SR_RVAL_OFFSET		(28)
#define ATFSSP020_SR_RVAL_DEFAULT		(0)
#define ATFSSP020_SR_WBSY_MASK			(BIT_MASK(27, 27))	// Write command busy
#define ATFSSP020_SR_WBSY_OFFSET		(27)
#define ATFSSP020_SR_WBSY_DEFAULT		(0)
#define ATFSSP020_SR_AC_ACTIVE_MASK		(BIT_MASK(26, 26))	// AC Link interface is active
#define ATFSSP020_SR_AC_ACTIVE_OFFSET		(26)
#define ATFSSP020_SR_AC_ACTIVE_DEFAULT		(0)
#define ATFSSP020_SR_ACWPD_MASK			(BIT_MASK(25, 25))	// AC Link interface is waiting to powerdown
#define ATFSSP020_SR_ACWPD_OFFSET		(25)
#define ATFSSP020_SR_ACWPD_DEFAULT		(0)
#define ATFSSP020_SR_ACTXDATA_MASK		(BIT_MASK(24, 24))	// AC Link transfer buffer still has data
#define ATFSSP020_SR_ACTXDATA_OFFSET		(24)
#define ATFSSP020_SR_ACTXDATA_DEFAULT		(0)
#define ATFSSP020_SR_TFVE_MASK			(BIT_MASK(16, 12))	// Transmit FIFO valid entries
#define ATFSSP020_SR_TFVE_OFFSET		(12)
#define ATFSSP020_SR_TFVE_DEFAULT		(0)
#define ATFSSP020_SR_RFVE_MASK			(BIT_MASK(8, 4))	// Receive FIFO valid entries
#define ATFSSP020_SR_RFVE_OFFSET		(4)
#define ATFSSP020_SR_RFVE_DEFAULT		(0)
#define ATFSSP020_SR_BUSY_MASK			(BIT_MASK(2, 2))	// Busy indicator
#define ATFSSP020_SR_BUSY_OFFSET		(2)
#define ATFSSP020_SR_BUSY_DEFAULT		(0)
#define ATFSSP020_SR_TFNF_MASK			(BIT_MASK(1, 1))	// Transmit FIFO not full
#define ATFSSP020_SR_TFNF_OFFSET		(1)
#define ATFSSP020_SR_TFNF_DEFAULT		(1)
#define ATFSSP020_SR_RFF_MASK			(BIT_MASK(0, 0))	// Receive FIFO full
#define ATFSSP020_SR_RFF_OFFSET			(0)
#define ATFSSP020_SR_RFF_DEFAULT		(0)
#define ATFSSP020_SR_DEFAULT			(\
						ATFSSP020_DEFAULT(SR, CRDY) |\
						ATFSSP020_DEFAULT(SR, RVAL) |\
						ATFSSP020_DEFAULT(SR, WBSY) |\
						ATFSSP020_DEFAULT(SR, AC_ACTIVE) |\
						ATFSSP020_DEFAULT(SR, ACWPD) |\
						ATFSSP020_DEFAULT(SR, ACTXDATA) |\
						ATFSSP020_DEFAULT(SR, TFVE) |\
						ATFSSP020_DEFAULT(SR, RFVE) |\
						ATFSSP020_DEFAULT(SR, BUSY) |\
						ATFSSP020_DEFAULT(SR, TFNF) |\
						ATFSSP020_DEFAULT(SR, RFF) \
						)

// (0x10) SSP interrupt control register
#define ATFSSP020_ICR_AC97CDWKUPEN_MASK		(BIT_MASK(16, 16))	// AC97 Codec wakeup interrupt enable
#define ATFSSP020_ICR_AC97CDWKUPEN_OFFSET	(16)
#define ATFSSP020_ICR_AC97CDWKUPEN_DEFAULT	(0)
#define ATFSSP020_ICR_TFTHOD_MASK		(BIT_MASK(15, 12))	// Transmit FIFO threshold
#define ATFSSP020_ICR_TFTHOD_OFFSET		(12)
#define ATFSSP020_ICR_TFTHOD_DEFAULT		(4)
#define ATFSSP020_ICR_RFTHOD_MASK		(BIT_MASK(11, 8))	// Receive FIFO threshold
#define ATFSSP020_ICR_RFTHOD_OFFSET		(8)
#define ATFSSP020_ICR_RFTHOD_DEFAULT		(4)
#define ATFSSP020_ICR_AC97FCEN_MASK		(BIT_MASK(6, 6))	// AC97 frame complete
#define ATFSSP020_ICR_AC97FCEN_OFFSET		(6)
#define ATFSSP020_ICR_AC97FCEN_DEFAULT		(0)
#define ATFSSP020_ICR_TFDMAEN_MASK		(BIT_MASK(5, 5))	// Transmit DMA request enable
#define ATFSSP020_ICR_TFDMAEN_OFFSET		(5)
#define ATFSSP020_ICR_TFDMAEN_DEFAULT		(0)
#define ATFSSP020_ICR_RFDMAEN_MASK		(BIT_MASK(4, 4))	// Receive DMA request enable
#define ATFSSP020_ICR_RFDMAEN_OFFSET		(4)
#define ATFSSP020_ICR_RFDMAEN_DEFAULT		(0)
#define ATFSSP020_ICR_TFTHIEN_MASK		(BIT_MASK(3, 3))	// Transmit FIFO threshold interrupt enable
#define ATFSSP020_ICR_TFTHIEN_OFFSET		(3)
#define ATFSSP020_ICR_TFTHIEN_DEFAULT		(0)
#define ATFSSP020_ICR_RFTHIEN_MASK		(BIT_MASK(2, 2))	// Receive FIFO threshold interrupt enable
#define ATFSSP020_ICR_RFTHIEN_OFFSET		(2)
#define ATFSSP020_ICR_RFTHIEN_DEFAULT		(0)
#define ATFSSP020_ICR_TFURIEN_MASK		(BIT_MASK(1, 1))	// Transmit FIFO underrun interrupt enable
#define ATFSSP020_ICR_TFURIEN_OFFSET		(1)
#define ATFSSP020_ICR_TFURIEN_DEFAULT		(0)
#define ATFSSP020_ICR_RFORIEN_MASK		(BIT_MASK(0, 0))	// Receive FIFO overrun interrupt enable
#define ATFSSP020_ICR_RFORIEN_OFFSET		(0)
#define ATFSSP020_ICR_RFORIEN_DEFAULT		(0)
#define ATFSSP020_ICR_DEFAULT			(\
						ATFSSP020_DEFAULT(ICR, AC97CDWKUPEN) |\
						ATFSSP020_DEFAULT(ICR, TFTHOD) |\
						ATFSSP020_DEFAULT(ICR, RFTHOD) |\
						ATFSSP020_DEFAULT(ICR, AC97FCEN) |\
						ATFSSP020_DEFAULT(ICR, TFDMAEN) |\
						ATFSSP020_DEFAULT(ICR, RFDMAEN) |\
						ATFSSP020_DEFAULT(ICR, TFTHIEN) |\
						ATFSSP020_DEFAULT(ICR, RFTHIEN) |\
						ATFSSP020_DEFAULT(ICR, TFURIEN) |\
						ATFSSP020_DEFAULT(ICR, RFORIEN) \
						)
#define ATFSSP020_ICR_MASK			(\
						ATFSSP020_ICR_AC97CDWKUPEN_MASK |\
						ATFSSP020_ICR_TFTHOD_MASK |\
						ATFSSP020_ICR_RFTHOD_MASK |\
						ATFSSP020_ICR_AC97FCEN_MASK |\
						ATFSSP020_ICR_TFDMAEN_MASK |\
						ATFSSP020_ICR_RFDMAEN_MASK |\
						ATFSSP020_ICR_TFTHIEN_MASK |\
						ATFSSP020_ICR_RFTHIEN_MASK |\
						ATFSSP020_ICR_TFURIEN_MASK |\
						ATFSSP020_ICR_RFORIEN_MASK \
						)

// (0x14) SSP interrupt status register
#define ATFSSP020_ISR_AC97CDWKUPI_MASK		(BIT_MASK(5, 5))	// AC97 frame complete interrupt
#define ATFSSP020_ISR_AC97CDWKUPI_OFFSET	(5)
#define ATFSSP020_ISR_AC97CDWKUPI_DEFAULT	(0)
#define ATFSSP020_ISR_AC97FCI_MASK		(BIT_MASK(4, 4))	// AC97 frame complete interrupt
#define ATFSSP020_ISR_AC97FCI_OFFSET		(4)
#define ATFSSP020_ISR_AC97FCI_DEFAULT		(0)
#define ATFSSP020_ISR_TFTHI_MASK		(BIT_MASK(3, 3))	// Transmit FIFO threshold interrupt
#define ATFSSP020_ISR_TFTHI_OFFSET		(3)
#define ATFSSP020_ISR_TFTHI_DEFAULT		(1)
#define ATFSSP020_ISR_RFTHI_MASK		(BIT_MASK(2, 2))	// Receive FIFO threshold interrupt
#define ATFSSP020_ISR_RFTHI_OFFSET		(2)
#define ATFSSP020_ISR_RFTHI_DEFAULT		(0)
#define ATFSSP020_ISR_TFURI_MASK		(BIT_MASK(1, 1))	// Transmit FIFO underrun interrupt
#define ATFSSP020_ISR_TFURI_OFFSET		(1)
#define ATFSSP020_ISR_TFURI_DEFAULT		(0)
#define ATFSSP020_ISR_RFORI_MASK		(BIT_MASK(0, 0))	// Receive FIFO overrun interrupt
#define ATFSSP020_ISR_RFORI_OFFSET		(0)
#define ATFSSP020_ISR_RFORI_DEFAULT		(0)
#define ATFSSP020_ISR_DEFAULT			(\
						ATFSSP020_DEFAULT(ISR, AC97CDWKUPI) |\
						ATFSSP020_DEFAULT(ISR, AC97FCI) |\
						ATFSSP020_DEFAULT(ISR, TFTHI) |\
						ATFSSP020_DEFAULT(ISR, RFTHI) |\
						ATFSSP020_DEFAULT(ISR, TFURI) |\
						ATFSSP020_DEFAULT(ISR, RFORI) \
						)

// (0x18) SSP data register
#define ATFSSP020_DR_DATA_MASK			(BIT_MASK(31, 0))
#define ATFSSP020_DR_DATA_OFFSET		(0)
#define ATFSSP020_DR_DATA_DEFAULT		(0)
#define ATFSSP020_DR_DEFAULT			(ATFSSP020_DEFAULT(DR, DATA))

// (0x20) AC-link Tx slot valid register
#define ATFSSP020_ACTXVR_TXVRA_MASK		(BIT_MASK(20, 20))	// Transmit Variable Sample Rate enable
#define ATFSSP020_ACTXVR_TXVRA_OFFSET		(20)
#define ATFSSP020_ACTXVR_TXVRA_DEFAULT		(1)
#define ATFSSP020_ACTXVR_TXUNSIGNED_MASK	(BIT_MASK(19, 19))	// The transmit data format is unsigned
#define ATFSSP020_ACTXVR_TXUNSIGNED_OFFSET	(19)
#define ATFSSP020_ACTXVR_TXUNSIGNED_DEFAULT	(0)
#define ATFSSP020_ACTXVR_TXMONO_MASK		(BIT_MASK(18, 18))	// Transmit data is mono
#define ATFSSP020_ACTXVR_TXMONO_OFFSET		(18)
#define ATFSSP020_ACTXVR_TXMONO_DEFAULT		(0)
#define ATFSSP020_ACTXVR_TXRESO_MASK		(BIT_MASK(17, 16))	// Transmit resolution
#define ATFSSP020_ACTXVR_TXRESO_OFFSET		(16)
#define ATFSSP020_ACTXVR_TXRESO_DEFAULT		(0)
#define ATFSSP020_ACTXVR_RESERVED1_MASK		(BIT_MASK(15, 15))	// read as 1
#define ATFSSP020_ACTXVR_RESERVED1_OFFSET	(15)
#define ATFSSP020_ACTXVR_RESERVED1_DEFAULT	(1)
#define ATFSSP020_ACTXVR_SLOT1V_MASK		(BIT_MASK(14, 14))	// Enable the slot1 transmit
#define ATFSSP020_ACTXVR_SLOT1V_OFFSET		(14)
#define ATFSSP020_ACTXVR_SLOT1V_DEFAULT		(1)
#define ATFSSP020_ACTXVR_SLOT2V_MASK		(BIT_MASK(13, 13))	// Enable the slot2 transmit
#define ATFSSP020_ACTXVR_SLOT2V_OFFSET		(13)
#define ATFSSP020_ACTXVR_SLOT2V_DEFAULT		(1)
#define ATFSSP020_ACTXVR_SLOT3V_MASK		(BIT_MASK(12, 12))	// Enable the slot3 transmit
#define ATFSSP020_ACTXVR_SLOT3V_OFFSET		(12)
#define ATFSSP020_ACTXVR_SLOT3V_DEFAULT		(1)
#define ATFSSP020_ACTXVR_SLOT4V_MASK		(BIT_MASK(11, 11))	// Enable the slot4 transmit
#define ATFSSP020_ACTXVR_SLOT4V_OFFSET		(11)
#define ATFSSP020_ACTXVR_SLOT4V_DEFAULT		(1)
#define ATFSSP020_ACTXVR_SLOT5V_MASK		(BIT_MASK(10, 10))	// Enable the slot5 transmit
#define ATFSSP020_ACTXVR_SLOT5V_OFFSET		(10)
#define ATFSSP020_ACTXVR_SLOT5V_DEFAULT		(1)
#define ATFSSP020_ACTXVR_SLOT6V_MASK		(BIT_MASK(9, 9))	// Enable the slot6 transmit
#define ATFSSP020_ACTXVR_SLOT6V_OFFSET		(9)
#define ATFSSP020_ACTXVR_SLOT6V_DEFAULT		(1)
#define ATFSSP020_ACTXVR_SLOT7V_MASK		(BIT_MASK(8, 8))	// Enable the slot7 transmit
#define ATFSSP020_ACTXVR_SLOT7V_OFFSET		(8)
#define ATFSSP020_ACTXVR_SLOT7V_DEFAULT		(1)
#define ATFSSP020_ACTXVR_SLOT8V_MASK		(BIT_MASK(7, 7))	// Enable the slot8 transmit
#define ATFSSP020_ACTXVR_SLOT8V_OFFSET		(7)
#define ATFSSP020_ACTXVR_SLOT8V_DEFAULT		(1)
#define ATFSSP020_ACTXVR_SLOT9V_MASK		(BIT_MASK(6, 6))	// Enable the slot9 transmit
#define ATFSSP020_ACTXVR_SLOT9V_OFFSET		(6)
#define ATFSSP020_ACTXVR_SLOT9V_DEFAULT		(1)
#define ATFSSP020_ACTXVR_SLOT10V_MASK		(BIT_MASK(5, 5))	// Enable the slot10 transmit
#define ATFSSP020_ACTXVR_SLOT10V_OFFSET		(5)
#define ATFSSP020_ACTXVR_SLOT10V_DEFAULT	(1)
#define ATFSSP020_ACTXVR_SLOT11V_MASK		(BIT_MASK(4, 4))	// Enable the slot11 transmit
#define ATFSSP020_ACTXVR_SLOT11V_OFFSET		(4)
#define ATFSSP020_ACTXVR_SLOT11V_DEFAULT	(1)
#define ATFSSP020_ACTXVR_SLOT12V_MASK		(BIT_MASK(3, 3))	// Enable the slot12 transmit
#define ATFSSP020_ACTXVR_SLOT12V_OFFSET		(3)
#define ATFSSP020_ACTXVR_SLOT12V_DEFAULT	(1)
#define ATFSSP020_ACTXVR_CODECID_MASK		(BIT_MASK(1, 0))	// Codec ID, which will be shifted out at the tag slot
#define ATFSSP020_ACTXVR_CODECID_OFFSET		(0)
#define ATFSSP020_ACTXVR_CODECID_DEFAULT	(0)
#define ATFSSP020_ACTXVR_DEFAULT		(\
						ATFSSP020_DEFAULT(ACTXVR, TXVRA) |\
						ATFSSP020_DEFAULT(ACTXVR, TXUNSIGNED) |\
						ATFSSP020_DEFAULT(ACTXVR, TXMONO) |\
						ATFSSP020_DEFAULT(ACTXVR, TXRESO) |\
						ATFSSP020_DEFAULT(ACTXVR, RESERVED1) |\
						ATFSSP020_DEFAULT(ACTXVR, SLOT1V) |\
						ATFSSP020_DEFAULT(ACTXVR, SLOT2V) |\
						ATFSSP020_DEFAULT(ACTXVR, SLOT3V) |\
						ATFSSP020_DEFAULT(ACTXVR, SLOT4V) |\
						ATFSSP020_DEFAULT(ACTXVR, SLOT5V) |\
						ATFSSP020_DEFAULT(ACTXVR, SLOT6V) |\
						ATFSSP020_DEFAULT(ACTXVR, SLOT7V) |\
						ATFSSP020_DEFAULT(ACTXVR, SLOT8V) |\
						ATFSSP020_DEFAULT(ACTXVR, SLOT9V) |\
						ATFSSP020_DEFAULT(ACTXVR, SLOT10V) |\
						ATFSSP020_DEFAULT(ACTXVR, SLOT11V) |\
						ATFSSP020_DEFAULT(ACTXVR, SLOT12V) |\
						ATFSSP020_DEFAULT(ACTXVR, CODECID) \
						)
// Mask whe NACE=0
#define ATFSSP020_ACTXVR_MASK_NACE_0		(\
						ATFSSP020_ACTXVR_RESERVED1_MASK |\
						ATFSSP020_ACTXVR_SLOT1V_MASK |\
						ATFSSP020_ACTXVR_SLOT2V_MASK |\
						ATFSSP020_ACTXVR_SLOT3V_MASK |\
						ATFSSP020_ACTXVR_SLOT4V_MASK |\
						ATFSSP020_ACTXVR_SLOT5V_MASK |\
						ATFSSP020_ACTXVR_SLOT6V_MASK |\
						ATFSSP020_ACTXVR_SLOT7V_MASK |\
						ATFSSP020_ACTXVR_SLOT8V_MASK |\
						ATFSSP020_ACTXVR_SLOT9V_MASK |\
						ATFSSP020_ACTXVR_SLOT10V_MASK |\
						ATFSSP020_ACTXVR_SLOT11V_MASK |\
						ATFSSP020_ACTXVR_SLOT12V_MASK |\
						ATFSSP020_ACTXVR_CODECID_MASK \
						)
// Mask whe NACE=1
#define ATFSSP020_ACTXVR_MASK_NACE_1		(\
						ATFSSP020_ACTXVR_TXVRA_MASK |\
						ATFSSP020_ACTXVR_TXUNSIGNED_MASK |\
						ATFSSP020_ACTXVR_TXMONO_MASK |\
						ATFSSP020_ACTXVR_TXRESO_MASK |\
						ATFSSP020_ACTXVR_RESERVED1_MASK |\
						ATFSSP020_ACTXVR_SLOT1V_MASK |\
						ATFSSP020_ACTXVR_SLOT2V_MASK |\
						ATFSSP020_ACTXVR_SLOT3V_MASK |\
						ATFSSP020_ACTXVR_SLOT4V_MASK |\
						ATFSSP020_ACTXVR_SLOT5V_MASK |\
						ATFSSP020_ACTXVR_SLOT6V_MASK |\
						ATFSSP020_ACTXVR_SLOT7V_MASK |\
						ATFSSP020_ACTXVR_SLOT8V_MASK |\
						ATFSSP020_ACTXVR_SLOT9V_MASK |\
						ATFSSP020_ACTXVR_SLOT10V_MASK |\
						ATFSSP020_ACTXVR_SLOT11V_MASK |\
						ATFSSP020_ACTXVR_SLOT12V_MASK |\
						ATFSSP020_ACTXVR_CODECID_MASK \
						)

// (0x24) AC-link Rx slot valid register
#define ATFSSP020_ACRXVR_RXUNSIGNED_MASK	(BIT_MASK(19, 19))	// The receive data format is signed
#define ATFSSP020_ACRXVR_RXUNSIGNED_OFFSET	(19)
#define ATFSSP020_ACRXVR_RXUNSIGNED_DEFAULT	(0)
#define ATFSSP020_ACRXVR_RXRESO_MASK		(BIT_MASK(17, 16))	// Receive resolution
#define ATFSSP020_ACRXVR_RXRESO_OFFSET		(16)
#define ATFSSP020_ACRXVR_RXRESO_DEFAULT		(0)
#define ATFSSP020_ACRXVR_SLOT1V_MASK		(BIT_MASK(14, 14))	// Enable the slot1 transmit
#define ATFSSP020_ACRXVR_SLOT1V_OFFSET		(14)
#define ATFSSP020_ACRXVR_SLOT1V_DEFAULT		(0)
#define ATFSSP020_ACRXVR_SLOT2V_MASK		(BIT_MASK(13, 13))	// Enable the slot2 transmit
#define ATFSSP020_ACRXVR_SLOT2V_OFFSET		(13)
#define ATFSSP020_ACRXVR_SLOT2V_DEFAULT		(0)
#define ATFSSP020_ACRXVR_SLOT3V_MASK		(BIT_MASK(12, 12))	// Enable the slot3 transmit
#define ATFSSP020_ACRXVR_SLOT3V_OFFSET		(12)
#define ATFSSP020_ACRXVR_SLOT3V_DEFAULT		(0)
#define ATFSSP020_ACRXVR_SLOT4V_MASK		(BIT_MASK(11, 11))	// Enable the slot4 transmit
#define ATFSSP020_ACRXVR_SLOT4V_OFFSET		(11)
#define ATFSSP020_ACRXVR_SLOT4V_DEFAULT		(0)
#define ATFSSP020_ACRXVR_SLOT5V_MASK		(BIT_MASK(10, 10))	// Enable the slot5 transmit
#define ATFSSP020_ACRXVR_SLOT5V_OFFSET		(10)
#define ATFSSP020_ACRXVR_SLOT5V_DEFAULT		(0)
#define ATFSSP020_ACRXVR_SLOT6V_MASK		(BIT_MASK(9, 9))	// Enable the slot6 transmit
#define ATFSSP020_ACRXVR_SLOT6V_OFFSET		(9)
#define ATFSSP020_ACRXVR_SLOT6V_DEFAULT		(0)
#define ATFSSP020_ACRXVR_SLOT7V_MASK		(BIT_MASK(8, 8))	// Enable the slot7 transmit
#define ATFSSP020_ACRXVR_SLOT7V_OFFSET		(8)
#define ATFSSP020_ACRXVR_SLOT7V_DEFAULT		(0)
#define ATFSSP020_ACRXVR_SLOT8V_MASK		(BIT_MASK(7, 7))	// Enable the slot8 transmit
#define ATFSSP020_ACRXVR_SLOT8V_OFFSET		(7)
#define ATFSSP020_ACRXVR_SLOT8V_DEFAULT		(0)
#define ATFSSP020_ACRXVR_SLOT9V_MASK		(BIT_MASK(6, 6))	// Enable the slot9 transmit
#define ATFSSP020_ACRXVR_SLOT9V_OFFSET		(6)
#define ATFSSP020_ACRXVR_SLOT9V_DEFAULT		(0)
#define ATFSSP020_ACRXVR_SLOT10V_MASK		(BIT_MASK(5, 5))	// Enable the slot10 transmit
#define ATFSSP020_ACRXVR_SLOT10V_OFFSET		(5)
#define ATFSSP020_ACRXVR_SLOT10V_DEFAULT	(0)
#define ATFSSP020_ACRXVR_SLOT11V_MASK		(BIT_MASK(4, 4))	// Enable the slot11 transmit
#define ATFSSP020_ACRXVR_SLOT11V_OFFSET		(4)
#define ATFSSP020_ACRXVR_SLOT11V_DEFAULT	(0)
#define ATFSSP020_ACRXVR_SLOT12V_MASK		(BIT_MASK(3, 3))	// Enable the slot12 transmit
#define ATFSSP020_ACRXVR_SLOT12V_OFFSET		(3)
#define ATFSSP020_ACRXVR_SLOT12V_DEFAULT	(0)
#define ATFSSP020_ACRXVR_DEFAULT		(\
						ATFSSP020_DEFAULT(ACRXVR, RXUNSIGNED) |\
						ATFSSP020_DEFAULT(ACRXVR, RXRESO) |\
						ATFSSP020_DEFAULT(ACRXVR, SLOT1V) |\
						ATFSSP020_DEFAULT(ACRXVR, SLOT2V) |\
						ATFSSP020_DEFAULT(ACRXVR, SLOT3V) |\
						ATFSSP020_DEFAULT(ACRXVR, SLOT4V) |\
						ATFSSP020_DEFAULT(ACRXVR, SLOT5V) |\
						ATFSSP020_DEFAULT(ACRXVR, SLOT6V) |\
						ATFSSP020_DEFAULT(ACRXVR, SLOT7V) |\
						ATFSSP020_DEFAULT(ACRXVR, SLOT8V) |\
						ATFSSP020_DEFAULT(ACRXVR, SLOT9V) |\
						ATFSSP020_DEFAULT(ACRXVR, SLOT10V) |\
						ATFSSP020_DEFAULT(ACRXVR, SLOT11V) |\
						ATFSSP020_DEFAULT(ACRXVR, SLOT12V) \
						)
#define ATFSSP020_ACRXVR_MASK			(\
						ATFSSP020_ACRXVR_RXUNSIGNED_MASK |\
						ATFSSP020_ACRXVR_RXRESO_MASK |\
						ATFSSP020_ACRXVR_SLOT1V_MASK |\
						ATFSSP020_ACRXVR_SLOT2V_MASK |\
						ATFSSP020_ACRXVR_SLOT3V_MASK |\
						ATFSSP020_ACRXVR_SLOT4V_MASK |\
						ATFSSP020_ACRXVR_SLOT5V_MASK |\
						ATFSSP020_ACRXVR_SLOT6V_MASK |\
						ATFSSP020_ACRXVR_SLOT7V_MASK |\
						ATFSSP020_ACRXVR_SLOT8V_MASK |\
						ATFSSP020_ACRXVR_SLOT9V_MASK |\
						ATFSSP020_ACRXVR_SLOT10V_MASK |\
						ATFSSP020_ACRXVR_SLOT11V_MASK |\
						ATFSSP020_ACRXVR_SLOT12V_MASK \
						)

// (0x28) AC-link Command register
#define ATFSSP020_ACCR_CMDRW_MASK		(BIT_MASK(23, 23))	// Command read or write
#define ATFSSP020_ACCR_CMDRW_OFFSET		(23)
#define ATFSSP020_ACCR_CMDRW_DEFAULT		(0)
#define ATFSSP020_ACCR_AC_TADDR_MASK		(BIT_MASK(22, 16))	// AC DAC register Address transfer
#define ATFSSP020_ACCR_AC_TADDR_OFFSET		(16)
#define ATFSSP020_ACCR_AC_TADDR_DEFAULT		(0)
#define ATFSSP020_ACCR_AC_TDATA_MASK		(BIT_MASK(15, 0))	// AC DAC register Data transfer
#define ATFSSP020_ACCR_AC_TDATA_OFFSET		(0)
#define ATFSSP020_ACCR_AC_TDATA_DEFAULT		(0)
#define ATFSSP020_ACCR_DEFAULT			(\
						ATFSSP020_DEFAULT(ACCR, CMDRW) |\
						ATFSSP020_DEFAULT(ACCR, AC_TADDR) |\
						ATFSSP020_DEFAULT(ACCR, AC_TDATA) \
						)
#define ATFSSP020_ACCR_MASK			(\
						ATFSSP020_ACCR_CMDRW_MASK |\
						ATFSSP020_ACCR_AC_TADDR_MASK |\
						ATFSSP020_ACCR_AC_TDATA_MASK \
						)

// (0x2c) AC-link Command Data Register
#define ATFSSP020_ACDR_AC_RADDR_MASK		(BIT_MASK(22, 16))	// AC DAC register Address receive
#define ATFSSP020_ACDR_AC_RADDR_OFFSET		(16)
#define ATFSSP020_ACDR_AC_RADDR_DEFAULT		(0)
#define ATFSSP020_ACDR_AC_RDATA_MASK		(BIT_MASK(15, 0))	// AC DAC register Data receive
#define ATFSSP020_ACDR_AC_RDATA_OFFSET		(0)
#define ATFSSP020_ACDR_AC_RDATA_DEFAULT		(0)
#define ATFSSP020_ACDR_DEFAULT			(\
						ATFSSP020_DEFAULT(ACDR, AC_RADDR) |\
						ATFSSP020_DEFAULT(ACDR, AC_RDATA) \
						)

// (0x40) SSP revision register
#define ATFSSP020_REV_MAJOR_REV_MASK		(BIT_MASK(23, 16))	// Major revision number
#define ATFSSP020_REV_MAJOR_REV_OFFSET		(16)
#define ATFSSP020_REV_MAJOR_REV_DEFAULT		(0x1)
#define ATFSSP020_REV_MINOR_REV_MASK		(BIT_MASK(15, 8))	// Minor revision number
#define ATFSSP020_REV_MINOR_REV_OFFSET		(8)
#define ATFSSP020_REV_MINOR_REV_DEFAULT		(0x15)
#define ATFSSP020_REV_REL_REV_MASK		(BIT_MASK(7, 0))	// Release number
#define ATFSSP020_REV_REL_REV_OFFSET		(0)
#define ATFSSP020_REV_REL_REV_DEFAULT		(0x1)
#define ATFSSP020_REV_DEFAULT			(\
						ATFSSP020_DEFAULT(REV, MAJOR_REV) |\
						ATFSSP020_DEFAULT(REV, MINOR_REV) |\
						ATFSSP020_DEFAULT(REV, REL_REV) \
						)

// (0x44) SSP feature register
#define ATFSSP020_FR_AC97_EN_MASK		(BIT_MASK(28, 28))	// AC97-link enhance functional support
#define ATFSSP020_FR_AC97_EN_OFFSET		(28)
#define ATFSSP020_FR_AC97_EN_DEFAULT		(0)
#define ATFSSP020_FR_SSP_FCFG_MASK		(BIT_MASK(27, 27))	// TI's SSP functional configurations
#define ATFSSP020_FR_SSP_FCFG_OFFSET		(27)
#define ATFSSP020_FR_SSP_FCFG_DEFAULT		(0)
#define ATFSSP020_FR_SPIMWR_FCFG_MASK		(BIT_MASK(26, 26))	// Motorola's SPI and National Semiconductor?s MICROWIRE functional configurations
#define ATFSSP020_FR_SPIMWR_FCFG_OFFSET		(26)
#define ATFSSP020_FR_SPIMWR_FCFG_DEFAULT	(0)
#define ATFSSP020_FR_I2S_FCFG_MASK		(BIT_MASK(25, 25))	// Philip's I2S functional configurations
#define ATFSSP020_FR_I2S_FCFG_OFFSET		(25)
#define ATFSSP020_FR_I2S_FCFG_DEFAULT		(0)
#define ATFSSP020_FR_AC97_FCFG_MASK		(BIT_MASK(24, 24))	// Intel's AC-link functional configurations
#define ATFSSP020_FR_AC97_FCFG_OFFSET		(24)
#define ATFSSP020_FR_AC97_FCFG_DEFAULT		(0)
#define ATFSSP020_FR_TXFIFO_DEPTH_MASK		(BIT_MASK(23, 16))	// Transmit FIFO size configuration
#define ATFSSP020_FR_TXFIFO_DEPTH_OFFSET	(16)
#define ATFSSP020_FR_TXFIFO_DEPTH_DEFAULT	(0)
#define ATFSSP020_FR_RXFIFO_DEPTH_MASK		(BIT_MASK(15, 8))	// Receive FIFO size configuration
#define ATFSSP020_FR_RXFIFO_DEPTH_OFFSET	(8)
#define ATFSSP020_FR_RXFIFO_DEPTH_DEFAULT	(0)
#define ATFSSP020_FR_FIFO_WIDTH_MASK		(BIT_MASK(7, 0))	// Transmit/receive FIFO width
#define ATFSSP020_FR_FIFO_WIDTH_OFFSET		(0)
#define ATFSSP020_FR_FIFO_WIDTH_DEFAULT		(0)
#define ATFSSP020_FR_DEFAULT			(\
						ATFSSP020_DEFAULT(FR, AC97_EN) |\
						ATFSSP020_DEFAULT(FR, SSP_FCFG) |\
						ATFSSP020_DEFAULT(FR, SPIMWR_FCFG) |\
						ATFSSP020_DEFAULT(FR, I2S_FCFG) |\
						ATFSSP020_DEFAULT(FR, AC97_FCFG) |\
						ATFSSP020_DEFAULT(FR, TXFIFO_DEPTH) |\
						ATFSSP020_DEFAULT(FR, RXFIFO_DEPTH) |\
						ATFSSP020_DEFAULT(FR, FIFO_WIDTH) \
						)

// other macros
#define ATFSSP020_NACE_AC97		0x0	// Intel Audio selection: AC97-link
#define ATFSSP020_NACE_AC97_VSR		0x1	// Intel Audio selection: AC97-link with Variable Sample Rate(VSR) and immediately command function
#define ATFSSP020_FFMT_SSP		0x0	// Frame format: Texas Instrument's Synchronous Serial Port (SSP)
#define ATFSSP020_FFMT_SPI		0x1	// Frame format: Motorola's Serial Peripheral Interface (SPI)
#define ATFSSP020_FFMT_MICROWIRE	0x2	// Frame format: National Semiconductor's MICROWIRE
#define ATFSSP020_FFMT_I2S		0x3	// Frame format: Philips' I2S
#define ATFSSP020_FFMT_AC97		0x4	// Frame format: Intel's AC-link
#define ATFSSP020_MSB			0x0	// MSB
#define ATFSSP020_LSB			0x1	// LSB
#define ATFSSP020_FSPO_HIGH		0x0	// Frame/sync polarity: active high
#define ATFSSP020_FSPO_LOW		0x1	// Frame/sync polarity: active low
#define ATFSSP020_OPM_SLAVE		0x0	// Operation mode: slave mode
#define ATFSSP020_OPM_MASTER		0x2	// Operation mode: master mode
#define ATFSSP020_OPM_SLAVE_MONO	0x0	// Operation mode: slave mono mode for I2S
#define ATFSSP020_OPM_SLAVE_STEREO	0x1	// Operation mode: slave stereo mode for I2S
#define ATFSSP020_OPM_MASTER_MONO	0x2	// Operation mode: master mono mode for I2S
#define ATFSSP020_OPM_MASTER_STEREO	0x3	// Operation mode: master stereo mode for I2S

// ======================================================
// ATFSSP020 access macro 
// ======================================================
#define ATFSSP020_SET_FIELD(var, reg, field, value)	SET_FIELD(var, ATFSSP020_##reg##_##field##_##MASK, ATFSSP020_##reg##_##field##_##OFFSET, value)
#define ATFSSP020_GET_FIELD(var, reg, field)		GET_FIELD(var, ATFSSP020_##reg##_##field##_##MASK, ATFSSP020_##reg##_##field##_##OFFSET)
#define ATFSSP020_TEST_FIELD(var, reg, field)		TEST_FIELD(var, ATFSSP020_##reg##_##field##_##MASK)

#define ATFSSP020_TEST_BIT(reg, field, value)		VAR_TEST_BIT(value, ATFSSP020_##reg##_##field##_##MASK)

#define ATFSSP020_EXTRACT(reg, field, value)		EXTRACT_FIELD(value, ATFSSP020_##reg##_##field##_##MASK, ATFSSP020_##reg##_##field##_##OFFSET )
#define ATFSSP020_PREPARE(reg, field, value)		PREPARE_FIELD(value, ATFSSP020_##reg##_##field##_##MASK, ATFSSP020_##reg##_##field##_##OFFSET )

#define ATFSSP020_DEFAULT(reg, field)			PREPARE_FIELD(ATFSSP020_##reg##_##field##_##DEFAULT, ATFSSP020_##reg##_##field##_##MASK, ATFSSP020_##reg##_##field##_##OFFSET )

#endif // __ATFSSP020_H

