//------------------------------------------------------------------------------
// Copyright (c) 2018 Cadence Design Systems, Inc.
//
// The information herein (Cadence IP) contains confidential and proprietary
// information of Cadence Design Systems, Inc. Cadence IP may not be modified,
// copied, reproduced, distributed, or disclosed to third parties in any manner,
// medium, or form, in whole or in part, without the prior written consent of
// Cadence Design Systems Inc. Cadence IP is for use by Cadence Design Systems,
// Inc. customers only. Cadence Design Systems, Inc. reserves the right to make
// changes to Cadence IP at any time and without notice.
//------------------------------------------------------------------------------
//
//   Filename:           cdn_sd1000_t16ffc_01_vc176_2xa1xd4xe2r.sv
//   Module Name:        cdn_sd1000_t16ffc_01_vc176_2xa1xd4xe2r
//
//   Release Revision:   1p3
//   Release SVN Tag:    
//
//   IP Name:            cdn_sd1000_t16ffc_01_vc176_2xa1xd4xe2r
//   IP Part Number:     
//
//   Product Type:       Off-the-shelf
//   IP Type:            Hard IP
//   IP Family:          USB2
//   Technology:         16FFC
//   Protocol:           USB2
//   Architecture:       
//   Licensable IP:      
//
//------------------------------------------------------------------------------
//   Description: This is Verilog code for USB2 hard IP
//------------------------------------------------------------------------------

`timescale 1 ps / 1 ps  
module AFEPHY_CDRRXWRAP_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r
(
 rst480,
 clk480,
 afe_hsrx_rec_clk,
 afe_hsrx_rec_data,
 afe_hsrx_rec_data_valid,
 afe_hsrx_rec_decision_error,              
 rx_clk120,           
 rx_data_hs,          
 rx_valid_hs,
 rx_error_hs,
 testmode                
  );
  input                 rst480;
  input                 clk480;
  input                 afe_hsrx_rec_clk;            
  input                 afe_hsrx_rec_data;            
  input                 afe_hsrx_rec_data_valid;      
  input                 afe_hsrx_rec_decision_error;  
  output                rx_clk120;    
  reg                   rx_clk120;    
  output          [3:0] rx_data_hs;   
  reg             [3:0] rx_data_hs;   
  output                rx_valid_hs; 
  reg                   rx_valid_hs;
  output                rx_error_hs;
  reg                   rx_error_hs;
  input                 testmode; 
  wire                  rxclk;
  reg             [2:0] rx_data_hs_int;
  reg             [2:0] rx_valid_hs_int;
  wire                  rstrx, rec_valid;
  wire                  eop_rst;
  reg                   rx_clk240, rx_clk240_int, rec_valid_reg, rec_valid_reg_d, rec_valid_reg_2d, rec_valid_reg_3d;
  reg                   data_valid_sync0;   
  reg                   data_valid_sync1;    
  reg                   data_valid_sync2;
  reg			data_valid_sync_1d, data_valid_sync_2d, data_valid_sync_3d, data_valid_sync_4d,
  			data_valid_sync_5d, data_valid_sync_6d, data_valid_sync_7d;    
  assign rxclk = afe_hsrx_rec_clk;
  assign w_rstrx =  rst480 & ~eop_rst;
  scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_rstrx(
  .scan_mode_en_in(testmode),
  .scan_signal_in(rst480),
  .fcn_signal_in(w_rstrx),
  .fcn_signal_out(rstrx)
  );
  always @(posedge clk480 or negedge rst480)
    begin
    if (rst480 == 1'b0)
      begin
      data_valid_sync0 <= 1'b0;
      data_valid_sync1 <= 1'b0;
      data_valid_sync2 <= 1'b0;
      end
    else
      begin
      data_valid_sync0 <= afe_hsrx_rec_data_valid;
      data_valid_sync1 <= data_valid_sync0;
      data_valid_sync2 <= data_valid_sync1;
      end  
    end
  always @(posedge clk480 or negedge rst480)
    begin
    if (rst480 == 1'b0)
      begin
      data_valid_sync_1d <= 1'b0;
      data_valid_sync_2d <= 1'b0;
      data_valid_sync_3d <= 1'b0;
      data_valid_sync_4d <= 1'b0;
      data_valid_sync_5d <= 1'b0;
      data_valid_sync_6d <= 1'b0;
      data_valid_sync_7d <= 1'b0;
      end
    else
    begin
      data_valid_sync_1d <= data_valid_sync2;
      data_valid_sync_2d <= data_valid_sync_1d;
      data_valid_sync_3d <= data_valid_sync_2d;
      data_valid_sync_4d <= data_valid_sync_3d;
      data_valid_sync_5d <= data_valid_sync_4d;
      data_valid_sync_6d <= data_valid_sync_5d;
      data_valid_sync_7d <= data_valid_sync_6d;
      end
    end
  assign eop_rst = data_valid_sync_7d & ~data_valid_sync_6d; 
  assign rec_valid = afe_hsrx_rec_data_valid | rec_valid_reg_3d; 
  always @(posedge rxclk or negedge rstrx)
    begin
    if (rstrx == 1'b0)
      begin
      rx_data_hs_int[2:0]  <= 3'b000;
      rx_valid_hs_int[2:0] <= 3'b000;
      end
    else
      begin
      rx_data_hs_int[2:0]  <= {afe_hsrx_rec_data,rx_data_hs_int[2:1]};
      rx_valid_hs_int[2:0] <= {rec_valid,rx_valid_hs_int[2:1]};
      end  
    end
  always @(posedge rxclk or negedge rstrx)
    begin
    if (rstrx == 1'b0)
    begin
      rx_clk240_int <= 1'b0;
      rec_valid_reg <= 1'b0;
      rec_valid_reg_d <= 1'b0;
      rec_valid_reg_2d <= 1'b0;
      rec_valid_reg_3d <= 1'b0;
    end
    else
    begin 
      rx_clk240_int <= ~rx_clk240_int;
      rec_valid_reg <= afe_hsrx_rec_data_valid;
      rec_valid_reg_d <= rec_valid_reg;
      rec_valid_reg_2d <= rec_valid_reg_d;
      rec_valid_reg_3d <= rec_valid_reg_2d;
    end
    end
  always @(posedge rxclk or negedge rstrx)
    begin
    if (rstrx == 1'b0)
      begin
      rx_clk240 <= 1'b0;
      rx_clk120 <= 1'b0;
      end
    else 
      begin
      rx_clk240 <= rx_clk240_int;
      if (rx_clk240 == 1'b1)
        begin
        rx_clk120 <= ~rx_clk120;
        end
      end  
    end
  always @(posedge rxclk or negedge rstrx)
    begin
    if (rstrx == 1'b0)
      begin
      rx_data_hs  <= 4'b0000; 
      rx_valid_hs <= 1'b0;
      rx_error_hs <= 1'b0;
      end
    else if (rx_clk120 == 1'b1 && rx_clk240 == 1'b1)
      begin
      rx_data_hs  <= {afe_hsrx_rec_data,rx_data_hs_int};
      rx_valid_hs <= &{rec_valid,rx_valid_hs_int};
      rx_error_hs <= afe_hsrx_rec_decision_error;
      end  
    end
endmodule
module pll_reg_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
  PLL_REG0_initial_wait_time_OUT,
  PLL_REG1_rst_fdbk_div_delay_value_OUT,
  PLL_REG1_rst_fdbk_div_delay_en_OUT,
  PLL_REG1_fbdiv_en_OUT,
  PLL_REG1_initial_wait_time_en_OUT,
  PLL_REG2_unused_OUT,
  PLL_REG2_vco_settling_time_en_OUT,
  PLL_REG2_vco_settling_time_OUT,
  PLL_REG3_fbdiv_value_OUT,
  PLL_REG4_unused_OUT,
  PLL_REG4_pll_lock_time_15_OUT,
  PLL_REG4_pd_pfd_value_OUT,
  PLL_REG4_pd_pfd_en_OUT,
  PLL_REG4_pll_lock_en_OUT,
  PLL_REG4_pll_lock_value_OUT,
  PLL_REG4_coarsedone_en_OUT,
  PLL_REG4_coarsedone_value_OUT,
  PLL_REG5_startloop_en_4_0_OUT,
  PLL_REG5_startloop_en_5_OUT,
  PLL_REG5_startloop_5_OUT,
  PLL_REG5_startloop_4_0_OUT,
  PLL_REG6_unused_OUT,
  PLL_REG6_coarse_code_sel_OUT,
  PLL_REG6_lsb_error_0p5_OUT,
  PLL_REG6_big_jump_en_OUT,
  PLL_REG6_vco_cnt_window_value_OUT,
  PLL_REG6_vco_cnt_window_en_OUT,
  PLL_REG6_rst_fdbk_div_value_OUT,
  PLL_REG6_rst_fdbk_div_en_OUT,
  PLL_REG7_unused_OUT,
  PLL_REG7_refclk_sel_OUT,
  PLL_REG7_refclk_sel_en_OUT,
  PLL_REG8_coarse_code_OUT,
  PLL_REG9_coarse_code_OUT,
  PLL_REG9_V2I_code_en_OUT,
  PLL_REG9_V2I_code_OUT,
  PLL_REG10_unused_OUT,
  PLL_REG10_ipdiv_value_OUT,
  PLL_REG10_ipdiv_en_OUT,
  PLL_REG10_coarse_code_en_OUT,
  PLL_REG11_pll_standby_OUT,
  PLL_REG11_pll_standby_en_OUT,
  PLL_REG11_pll_pd_OUT,
  PLL_REG11_pll_pd_en_OUT,
  PLL_REG11_pll_pso_del_OUT,
  PLL_REG11_pll_pso_del_en_OUT,
  PLL_REG11_pll_pso_OUT,
  PLL_REG11_pll_pso_en_OUT,
  PLL_REG12_unused_OUT,
  PLL_REG12_pll_ldo_ref_en_OUT,
  PLL_REG12_pll_ldo_ref_en_en_OUT,
  PLL_REG12_pll_ldo_core_en_OUT,
  PLL_REG12_pll_ldo_core_en_en_OUT,
  PLL_REG12_pll_pd_ana_OUT,
  PLL_REG12_pll_pd_ana_en_OUT,
  PLL_REG13_pll_clkon_OUT,
  PLL_REG13_pll_ldo_ref_core_OUT,
  PLL_REG13_pll_ldo_ref_core_en_OUT,
  PLL_REG14_pll_ldo_cnt_threshold_OUT,
  PLL_REG14_pll_ldo_cnt_threshold_en_OUT,
  PLL_REG14_pll_ldo_iso_cnt_threshold_OUT,
  PLL_REG14_pll_ldo_iso_cnt_threshold_en_OUT,
  PLL_UNUSED_REG0_unused_OUT,
  PLL_UNUSED_REG1_unused_OUT,
  PLL_REG15_pll_lock_IN,
  PLL_REG15_coarsedone_IN,
  PLL_REG15_vco_cnt_win_IN,
  PLL_REG15_rst_fdbk_div_IN,
  PLL_REG15_unused_IN,
  PLL_REG15_pd_pfd_IN,
  PLL_REG15_startloop_IN,
  PLL_REG15_coarse_code_8_IN,
  PLL_REG16_coarse_code_IN,
  PLL_UNUSED_REG2_unused_IN,
  PRDATA,
  PADDR,
  PWDATA,
  PWRITE,
  PSELx,
  PENABLE,
  PCLK,
  PRESETn
);
output [7:0]   PRDATA;
input  [7:0]   PADDR;
input  [7:0]   PWDATA;
input          PWRITE;
input          PSELx;
input          PENABLE;
input          PCLK;
input          PRESETn;
output [7:0]   PLL_REG0_initial_wait_time_OUT;
output [4:0]   PLL_REG1_rst_fdbk_div_delay_value_OUT;
output         PLL_REG1_rst_fdbk_div_delay_en_OUT;
output         PLL_REG1_fbdiv_en_OUT;
output         PLL_REG1_initial_wait_time_en_OUT;
output         PLL_REG2_unused_OUT;
output         PLL_REG2_vco_settling_time_en_OUT;
output [5:0]   PLL_REG2_vco_settling_time_OUT;
output [7:0]   PLL_REG3_fbdiv_value_OUT;
output         PLL_REG4_unused_OUT;
output         PLL_REG4_pll_lock_time_15_OUT;
output         PLL_REG4_pd_pfd_value_OUT;
output         PLL_REG4_pd_pfd_en_OUT;
output         PLL_REG4_pll_lock_en_OUT;
output         PLL_REG4_pll_lock_value_OUT;
output         PLL_REG4_coarsedone_en_OUT;
output         PLL_REG4_coarsedone_value_OUT;
output         PLL_REG5_startloop_en_4_0_OUT;
output         PLL_REG5_startloop_en_5_OUT;
output         PLL_REG5_startloop_5_OUT;
output [4:0]   PLL_REG5_startloop_4_0_OUT;
output         PLL_REG6_unused_OUT;
output         PLL_REG6_coarse_code_sel_OUT;
output         PLL_REG6_lsb_error_0p5_OUT;
output         PLL_REG6_big_jump_en_OUT;
output         PLL_REG6_vco_cnt_window_value_OUT;
output         PLL_REG6_vco_cnt_window_en_OUT;
output         PLL_REG6_rst_fdbk_div_value_OUT;
output         PLL_REG6_rst_fdbk_div_en_OUT;
output [2:0]   PLL_REG7_unused_OUT;
output [3:0]   PLL_REG7_refclk_sel_OUT;
output         PLL_REG7_refclk_sel_en_OUT;
output [7:0]   PLL_REG8_coarse_code_OUT;
output         PLL_REG9_coarse_code_OUT;
output         PLL_REG9_V2I_code_en_OUT;
output [5:0]   PLL_REG9_V2I_code_OUT;
output         PLL_REG10_unused_OUT;
output [4:0]   PLL_REG10_ipdiv_value_OUT;
output         PLL_REG10_ipdiv_en_OUT;
output         PLL_REG10_coarse_code_en_OUT;
output         PLL_REG11_pll_standby_OUT;
output         PLL_REG11_pll_standby_en_OUT;
output         PLL_REG11_pll_pd_OUT;
output         PLL_REG11_pll_pd_en_OUT;
output         PLL_REG11_pll_pso_del_OUT;
output         PLL_REG11_pll_pso_del_en_OUT;
output         PLL_REG11_pll_pso_OUT;
output         PLL_REG11_pll_pso_en_OUT;
output [1:0]   PLL_REG12_unused_OUT;
output         PLL_REG12_pll_ldo_ref_en_OUT;
output         PLL_REG12_pll_ldo_ref_en_en_OUT;
output         PLL_REG12_pll_ldo_core_en_OUT;
output         PLL_REG12_pll_ldo_core_en_en_OUT;
output         PLL_REG12_pll_pd_ana_OUT;
output         PLL_REG12_pll_pd_ana_en_OUT;
output         PLL_REG13_pll_clkon_OUT;
output [5:0]   PLL_REG13_pll_ldo_ref_core_OUT;
output         PLL_REG13_pll_ldo_ref_core_en_OUT;
output [2:0]   PLL_REG14_pll_ldo_cnt_threshold_OUT;
output         PLL_REG14_pll_ldo_cnt_threshold_en_OUT;
output [2:0]   PLL_REG14_pll_ldo_iso_cnt_threshold_OUT;
output         PLL_REG14_pll_ldo_iso_cnt_threshold_en_OUT;
output [7:0]   PLL_UNUSED_REG0_unused_OUT;
output [7:0]   PLL_UNUSED_REG1_unused_OUT;
input          PLL_REG15_pll_lock_IN;
input          PLL_REG15_coarsedone_IN;
input          PLL_REG15_vco_cnt_win_IN;
input          PLL_REG15_rst_fdbk_div_IN;
input          PLL_REG15_unused_IN;
input          PLL_REG15_pd_pfd_IN;
input          PLL_REG15_startloop_IN;
input          PLL_REG15_coarse_code_8_IN;
input  [7:0]   PLL_REG16_coarse_code_IN;
input  [7:0]   PLL_UNUSED_REG2_unused_IN;
reg [7:0]   PRDATA;
reg [7:0]   PLL_REG0_initial_wait_time;
reg [4:0]   PLL_REG1_rst_fdbk_div_delay_value;
reg         PLL_REG1_rst_fdbk_div_delay_en;
reg         PLL_REG1_fbdiv_en;
reg         PLL_REG1_initial_wait_time_en;
reg         PLL_REG2_unused;
reg         PLL_REG2_vco_settling_time_en;
reg [5:0]   PLL_REG2_vco_settling_time;
reg [7:0]   PLL_REG3_fbdiv_value;
reg         PLL_REG4_unused;
reg         PLL_REG4_pll_lock_time_15;
reg         PLL_REG4_pd_pfd_value;
reg         PLL_REG4_pd_pfd_en;
reg         PLL_REG4_pll_lock_en;
reg         PLL_REG4_pll_lock_value;
reg         PLL_REG4_coarsedone_en;
reg         PLL_REG4_coarsedone_value;
reg         PLL_REG5_startloop_en_4_0;
reg         PLL_REG5_startloop_en_5;
reg         PLL_REG5_startloop_5;
reg [4:0]   PLL_REG5_startloop_4_0;
reg         PLL_REG6_unused;
reg         PLL_REG6_coarse_code_sel;
reg         PLL_REG6_lsb_error_0p5;
reg         PLL_REG6_big_jump_en;
reg         PLL_REG6_vco_cnt_window_value;
reg         PLL_REG6_vco_cnt_window_en;
reg         PLL_REG6_rst_fdbk_div_value;
reg         PLL_REG6_rst_fdbk_div_en;
reg [2:0]   PLL_REG7_unused;
reg [3:0]   PLL_REG7_refclk_sel;
reg         PLL_REG7_refclk_sel_en;
reg [7:0]   PLL_REG8_coarse_code;
reg         PLL_REG9_coarse_code;
reg         PLL_REG9_V2I_code_en;
reg [5:0]   PLL_REG9_V2I_code;
reg         PLL_REG10_unused;
reg [4:0]   PLL_REG10_ipdiv_value;
reg         PLL_REG10_ipdiv_en;
reg         PLL_REG10_coarse_code_en;
reg         PLL_REG11_pll_standby;
reg         PLL_REG11_pll_standby_en;
reg         PLL_REG11_pll_pd;
reg         PLL_REG11_pll_pd_en;
reg         PLL_REG11_pll_pso_del;
reg         PLL_REG11_pll_pso_del_en;
reg         PLL_REG11_pll_pso;
reg         PLL_REG11_pll_pso_en;
reg [1:0]   PLL_REG12_unused;
reg         PLL_REG12_pll_ldo_ref_en;
reg         PLL_REG12_pll_ldo_ref_en_en;
reg         PLL_REG12_pll_ldo_core_en;
reg         PLL_REG12_pll_ldo_core_en_en;
reg         PLL_REG12_pll_pd_ana;
reg         PLL_REG12_pll_pd_ana_en;
reg         PLL_REG13_pll_clkon;
reg [5:0]   PLL_REG13_pll_ldo_ref_core;
reg         PLL_REG13_pll_ldo_ref_core_en;
reg [2:0]   PLL_REG14_pll_ldo_cnt_threshold;
reg         PLL_REG14_pll_ldo_cnt_threshold_en;
reg [2:0]   PLL_REG14_pll_ldo_iso_cnt_threshold;
reg         PLL_REG14_pll_ldo_iso_cnt_threshold_en;
reg [7:0]   PLL_UNUSED_REG0_unused;
reg [7:0]   PLL_UNUSED_REG1_unused;
localparam PLL_REG0_REG_OFFSET = 8'b01000000;
localparam PLL_REG0_initial_wait_time_BIT_RESET = 8'b00000000;
localparam PLL_REG1_REG_OFFSET = 8'b01000001;
localparam PLL_REG1_rst_fdbk_div_delay_value_BIT_RESET = 5'b00000;
localparam PLL_REG1_rst_fdbk_div_delay_en_BIT_RESET = 1'b0;
localparam PLL_REG1_fbdiv_en_BIT_RESET = 1'b0;
localparam PLL_REG1_initial_wait_time_en_BIT_RESET = 1'b0;
localparam PLL_REG2_REG_OFFSET = 8'b01000010;
localparam PLL_REG2_unused_BIT_RESET = 1'b0;
localparam PLL_REG2_vco_settling_time_en_BIT_RESET = 1'b0;
localparam PLL_REG2_vco_settling_time_BIT_RESET = 6'b000000;
localparam PLL_REG3_REG_OFFSET = 8'b01000011;
localparam PLL_REG3_fbdiv_value_BIT_RESET = 8'b00000000;
localparam PLL_REG4_REG_OFFSET = 8'b01000100;
localparam PLL_REG4_unused_BIT_RESET = 1'b0;
localparam PLL_REG4_pll_lock_time_15_BIT_RESET = 1'b0;
localparam PLL_REG4_pd_pfd_value_BIT_RESET = 1'b0;
localparam PLL_REG4_pd_pfd_en_BIT_RESET = 1'b0;
localparam PLL_REG4_pll_lock_en_BIT_RESET = 1'b0;
localparam PLL_REG4_pll_lock_value_BIT_RESET = 1'b0;
localparam PLL_REG4_coarsedone_en_BIT_RESET = 1'b0;
localparam PLL_REG4_coarsedone_value_BIT_RESET = 1'b0;
localparam PLL_REG5_REG_OFFSET = 8'b01000101;
localparam PLL_REG5_startloop_en_4_0_BIT_RESET = 1'b0;
localparam PLL_REG5_startloop_en_5_BIT_RESET = 1'b0;
localparam PLL_REG5_startloop_5_BIT_RESET = 1'b0;
localparam PLL_REG5_startloop_4_0_BIT_RESET = 5'b00000;
localparam PLL_REG6_REG_OFFSET = 8'b01000110;
localparam PLL_REG6_unused_BIT_RESET = 1'b0;
localparam PLL_REG6_coarse_code_sel_BIT_RESET = 1'b0;
localparam PLL_REG6_lsb_error_0p5_BIT_RESET = 1'b0;
localparam PLL_REG6_big_jump_en_BIT_RESET = 1'b0;
localparam PLL_REG6_vco_cnt_window_value_BIT_RESET = 1'b0;
localparam PLL_REG6_vco_cnt_window_en_BIT_RESET = 1'b0;
localparam PLL_REG6_rst_fdbk_div_value_BIT_RESET = 1'b0;
localparam PLL_REG6_rst_fdbk_div_en_BIT_RESET = 1'b0;
localparam PLL_REG7_REG_OFFSET = 8'b01000111;
localparam PLL_REG7_unused_BIT_RESET = 3'b000;
localparam PLL_REG7_refclk_sel_BIT_RESET = 4'b0000;
localparam PLL_REG7_refclk_sel_en_BIT_RESET = 1'b0;
localparam PLL_REG8_REG_OFFSET = 8'b01001000;
localparam PLL_REG8_coarse_code_BIT_RESET = 8'b00000000;
localparam PLL_REG9_REG_OFFSET = 8'b01001001;
localparam PLL_REG9_coarse_code_BIT_RESET = 1'b0;
localparam PLL_REG9_V2I_code_en_BIT_RESET = 1'b0;
localparam PLL_REG9_V2I_code_BIT_RESET = 6'b000000;
localparam PLL_REG10_REG_OFFSET = 8'b01001010;
localparam PLL_REG10_unused_BIT_RESET = 1'b0;
localparam PLL_REG10_ipdiv_value_BIT_RESET = 5'b00000;
localparam PLL_REG10_ipdiv_en_BIT_RESET = 1'b0;
localparam PLL_REG10_coarse_code_en_BIT_RESET = 1'b0;
localparam PLL_REG11_REG_OFFSET = 8'b01001011;
localparam PLL_REG11_pll_standby_BIT_RESET = 1'b0;
localparam PLL_REG11_pll_standby_en_BIT_RESET = 1'b0;
localparam PLL_REG11_pll_pd_BIT_RESET = 1'b0;
localparam PLL_REG11_pll_pd_en_BIT_RESET = 1'b0;
localparam PLL_REG11_pll_pso_del_BIT_RESET = 1'b0;
localparam PLL_REG11_pll_pso_del_en_BIT_RESET = 1'b0;
localparam PLL_REG11_pll_pso_BIT_RESET = 1'b0;
localparam PLL_REG11_pll_pso_en_BIT_RESET = 1'b0;
localparam PLL_REG12_REG_OFFSET = 8'b01001100;
localparam PLL_REG12_unused_BIT_RESET = 2'b00;
localparam PLL_REG12_pll_ldo_ref_en_BIT_RESET = 1'b0;
localparam PLL_REG12_pll_ldo_ref_en_en_BIT_RESET = 1'b0;
localparam PLL_REG12_pll_ldo_core_en_BIT_RESET = 1'b0;
localparam PLL_REG12_pll_ldo_core_en_en_BIT_RESET = 1'b0;
localparam PLL_REG12_pll_pd_ana_BIT_RESET = 1'b0;
localparam PLL_REG12_pll_pd_ana_en_BIT_RESET = 1'b0;
localparam PLL_REG13_REG_OFFSET = 8'b01001101;
localparam PLL_REG13_pll_clkon_BIT_RESET = 1'b0;
localparam PLL_REG13_pll_ldo_ref_core_BIT_RESET = 6'b000000;
localparam PLL_REG13_pll_ldo_ref_core_en_BIT_RESET = 1'b0;
localparam PLL_REG14_REG_OFFSET = 8'b01001110;
localparam PLL_REG14_pll_ldo_cnt_threshold_BIT_RESET = 3'b000;
localparam PLL_REG14_pll_ldo_cnt_threshold_en_BIT_RESET = 1'b0;
localparam PLL_REG14_pll_ldo_iso_cnt_threshold_BIT_RESET = 3'b000;
localparam PLL_REG14_pll_ldo_iso_cnt_threshold_en_BIT_RESET = 1'b0;
localparam PLL_UNUSED_REG0_REG_OFFSET = 8'b01001111;
localparam PLL_UNUSED_REG0_unused_BIT_RESET = 8'b00000000;
localparam PLL_UNUSED_REG1_REG_OFFSET = 8'b01010000;
localparam PLL_UNUSED_REG1_unused_BIT_RESET = 8'b00000000;
localparam PLL_REG15_REG_OFFSET = 8'b01010001;
localparam PLL_REG15_pll_lock_BIT_RESET = 1'b0;
localparam PLL_REG15_coarsedone_BIT_RESET = 1'b0;
localparam PLL_REG15_vco_cnt_win_BIT_RESET = 1'b0;
localparam PLL_REG15_rst_fdbk_div_BIT_RESET = 1'b0;
localparam PLL_REG15_unused_BIT_RESET = 1'b0;
localparam PLL_REG15_pd_pfd_BIT_RESET = 1'b0;
localparam PLL_REG15_startloop_BIT_RESET = 1'b0;
localparam PLL_REG15_coarse_code_8_BIT_RESET = 1'b0;
localparam PLL_REG16_REG_OFFSET = 8'b01010010;
localparam PLL_REG16_coarse_code_BIT_RESET = 8'b00000000;
localparam PLL_UNUSED_REG2_REG_OFFSET = 8'b01010011;
localparam PLL_UNUSED_REG2_unused_BIT_RESET = 8'b00000000;
always @(posedge PCLK or negedge PRESETn)
begin
if(!PRESETn)
  begin
    PLL_REG0_initial_wait_time         <= PLL_REG0_initial_wait_time_BIT_RESET;
    PLL_REG1_rst_fdbk_div_delay_value  <= PLL_REG1_rst_fdbk_div_delay_value_BIT_RESET;
    PLL_REG1_rst_fdbk_div_delay_en     <= PLL_REG1_rst_fdbk_div_delay_en_BIT_RESET;
    PLL_REG1_fbdiv_en                  <= PLL_REG1_fbdiv_en_BIT_RESET;
    PLL_REG1_initial_wait_time_en      <= PLL_REG1_initial_wait_time_en_BIT_RESET;
    PLL_REG2_unused                    <= PLL_REG2_unused_BIT_RESET;
    PLL_REG2_vco_settling_time_en      <= PLL_REG2_vco_settling_time_en_BIT_RESET;
    PLL_REG2_vco_settling_time         <= PLL_REG2_vco_settling_time_BIT_RESET;
    PLL_REG3_fbdiv_value               <= PLL_REG3_fbdiv_value_BIT_RESET;
    PLL_REG4_unused                    <= PLL_REG4_unused_BIT_RESET;
    PLL_REG4_pll_lock_time_15          <= PLL_REG4_pll_lock_time_15_BIT_RESET;
    PLL_REG4_pd_pfd_value              <= PLL_REG4_pd_pfd_value_BIT_RESET;
    PLL_REG4_pd_pfd_en                 <= PLL_REG4_pd_pfd_en_BIT_RESET;
    PLL_REG4_pll_lock_en               <= PLL_REG4_pll_lock_en_BIT_RESET;
    PLL_REG4_pll_lock_value            <= PLL_REG4_pll_lock_value_BIT_RESET;
    PLL_REG4_coarsedone_en             <= PLL_REG4_coarsedone_en_BIT_RESET;
    PLL_REG4_coarsedone_value          <= PLL_REG4_coarsedone_value_BIT_RESET;
    PLL_REG5_startloop_en_4_0          <= PLL_REG5_startloop_en_4_0_BIT_RESET;
    PLL_REG5_startloop_en_5            <= PLL_REG5_startloop_en_5_BIT_RESET;
    PLL_REG5_startloop_5               <= PLL_REG5_startloop_5_BIT_RESET;
    PLL_REG5_startloop_4_0             <= PLL_REG5_startloop_4_0_BIT_RESET;
    PLL_REG6_unused                    <= PLL_REG6_unused_BIT_RESET;
    PLL_REG6_coarse_code_sel           <= PLL_REG6_coarse_code_sel_BIT_RESET;
    PLL_REG6_lsb_error_0p5             <= PLL_REG6_lsb_error_0p5_BIT_RESET;
    PLL_REG6_big_jump_en               <= PLL_REG6_big_jump_en_BIT_RESET;
    PLL_REG6_vco_cnt_window_value      <= PLL_REG6_vco_cnt_window_value_BIT_RESET;
    PLL_REG6_vco_cnt_window_en         <= PLL_REG6_vco_cnt_window_en_BIT_RESET;
    PLL_REG6_rst_fdbk_div_value        <= PLL_REG6_rst_fdbk_div_value_BIT_RESET;
    PLL_REG6_rst_fdbk_div_en           <= PLL_REG6_rst_fdbk_div_en_BIT_RESET;
    PLL_REG7_unused                    <= PLL_REG7_unused_BIT_RESET;
    PLL_REG7_refclk_sel                <= PLL_REG7_refclk_sel_BIT_RESET;
    PLL_REG7_refclk_sel_en             <= PLL_REG7_refclk_sel_en_BIT_RESET;
    PLL_REG8_coarse_code               <= PLL_REG8_coarse_code_BIT_RESET;
    PLL_REG9_coarse_code               <= PLL_REG9_coarse_code_BIT_RESET;
    PLL_REG9_V2I_code_en               <= PLL_REG9_V2I_code_en_BIT_RESET;
    PLL_REG9_V2I_code                  <= PLL_REG9_V2I_code_BIT_RESET;
    PLL_REG10_unused                   <= PLL_REG10_unused_BIT_RESET;
    PLL_REG10_ipdiv_value              <= PLL_REG10_ipdiv_value_BIT_RESET;
    PLL_REG10_ipdiv_en                 <= PLL_REG10_ipdiv_en_BIT_RESET;
    PLL_REG10_coarse_code_en           <= PLL_REG10_coarse_code_en_BIT_RESET;
    PLL_REG11_pll_standby              <= PLL_REG11_pll_standby_BIT_RESET;
    PLL_REG11_pll_standby_en           <= PLL_REG11_pll_standby_en_BIT_RESET;
    PLL_REG11_pll_pd                   <= PLL_REG11_pll_pd_BIT_RESET;
    PLL_REG11_pll_pd_en                <= PLL_REG11_pll_pd_en_BIT_RESET;
    PLL_REG11_pll_pso_del              <= PLL_REG11_pll_pso_del_BIT_RESET;
    PLL_REG11_pll_pso_del_en           <= PLL_REG11_pll_pso_del_en_BIT_RESET;
    PLL_REG11_pll_pso                  <= PLL_REG11_pll_pso_BIT_RESET;
    PLL_REG11_pll_pso_en               <= PLL_REG11_pll_pso_en_BIT_RESET;
    PLL_REG12_unused                   <= PLL_REG12_unused_BIT_RESET;
    PLL_REG12_pll_ldo_ref_en           <= PLL_REG12_pll_ldo_ref_en_BIT_RESET;
    PLL_REG12_pll_ldo_ref_en_en        <= PLL_REG12_pll_ldo_ref_en_en_BIT_RESET;
    PLL_REG12_pll_ldo_core_en          <= PLL_REG12_pll_ldo_core_en_BIT_RESET;
    PLL_REG12_pll_ldo_core_en_en       <= PLL_REG12_pll_ldo_core_en_en_BIT_RESET;
    PLL_REG12_pll_pd_ana               <= PLL_REG12_pll_pd_ana_BIT_RESET;
    PLL_REG12_pll_pd_ana_en            <= PLL_REG12_pll_pd_ana_en_BIT_RESET;
    PLL_REG13_pll_clkon                <= PLL_REG13_pll_clkon_BIT_RESET;
    PLL_REG13_pll_ldo_ref_core         <= PLL_REG13_pll_ldo_ref_core_BIT_RESET;
    PLL_REG13_pll_ldo_ref_core_en      <= PLL_REG13_pll_ldo_ref_core_en_BIT_RESET;
    PLL_REG14_pll_ldo_cnt_threshold    <= PLL_REG14_pll_ldo_cnt_threshold_BIT_RESET;
    PLL_REG14_pll_ldo_cnt_threshold_en <= PLL_REG14_pll_ldo_cnt_threshold_en_BIT_RESET;
    PLL_REG14_pll_ldo_iso_cnt_threshold <= PLL_REG14_pll_ldo_iso_cnt_threshold_BIT_RESET;
    PLL_REG14_pll_ldo_iso_cnt_threshold_en <= PLL_REG14_pll_ldo_iso_cnt_threshold_en_BIT_RESET;
    PLL_UNUSED_REG0_unused             <= PLL_UNUSED_REG0_unused_BIT_RESET;
    PLL_UNUSED_REG1_unused             <= PLL_UNUSED_REG1_unused_BIT_RESET;
  end
else  
  begin
    if ((PSELx == 1'b1) && (PWRITE == 1'b1) )
    begin  
      case (PADDR[7:0])
        PLL_REG0_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            PLL_REG0_initial_wait_time[7:0] <= PWDATA[7:0];
          end
        PLL_REG1_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            PLL_REG1_rst_fdbk_div_delay_value[4:0] <= PWDATA[7:3];
            PLL_REG1_rst_fdbk_div_delay_en <= PWDATA[2];
            PLL_REG1_fbdiv_en          <= PWDATA[1];
            PLL_REG1_initial_wait_time_en <= PWDATA[0];
          end
        PLL_REG2_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            PLL_REG2_unused            <= PWDATA[7];
            PLL_REG2_vco_settling_time_en <= PWDATA[6];
            PLL_REG2_vco_settling_time[5:0] <= PWDATA[5:0];
          end
        PLL_REG3_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            PLL_REG3_fbdiv_value[7:0]  <= PWDATA[7:0];
          end
        PLL_REG4_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            PLL_REG4_unused            <= PWDATA[7];
            PLL_REG4_pll_lock_time_15  <= PWDATA[6];
            PLL_REG4_pd_pfd_value      <= PWDATA[5];
            PLL_REG4_pd_pfd_en         <= PWDATA[4];
            PLL_REG4_pll_lock_en       <= PWDATA[3];
            PLL_REG4_pll_lock_value    <= PWDATA[2];
            PLL_REG4_coarsedone_en     <= PWDATA[1];
            PLL_REG4_coarsedone_value  <= PWDATA[0];
          end
        PLL_REG5_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            PLL_REG5_startloop_en_4_0  <= PWDATA[7];
            PLL_REG5_startloop_en_5    <= PWDATA[6];
            PLL_REG5_startloop_5       <= PWDATA[5];
            PLL_REG5_startloop_4_0[4:0] <= PWDATA[4:0];
          end
        PLL_REG6_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            PLL_REG6_unused            <= PWDATA[7];
            PLL_REG6_coarse_code_sel   <= PWDATA[6];
            PLL_REG6_lsb_error_0p5     <= PWDATA[5];
            PLL_REG6_big_jump_en       <= PWDATA[4];
            PLL_REG6_vco_cnt_window_value <= PWDATA[3];
            PLL_REG6_vco_cnt_window_en <= PWDATA[2];
            PLL_REG6_rst_fdbk_div_value <= PWDATA[1];
            PLL_REG6_rst_fdbk_div_en   <= PWDATA[0];
          end
        PLL_REG7_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            PLL_REG7_unused[2:0]       <= PWDATA[7:5];
            PLL_REG7_refclk_sel[3:0]   <= PWDATA[4:1];
            PLL_REG7_refclk_sel_en     <= PWDATA[0];
          end
        PLL_REG8_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            PLL_REG8_coarse_code[7:0]  <= PWDATA[7:0];
          end
        PLL_REG9_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            PLL_REG9_coarse_code       <= PWDATA[7];
            PLL_REG9_V2I_code_en       <= PWDATA[6];
            PLL_REG9_V2I_code[5:0]     <= PWDATA[5:0];
          end
        PLL_REG10_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            PLL_REG10_unused           <= PWDATA[7];
            PLL_REG10_ipdiv_value[4:0] <= PWDATA[6:2];
            PLL_REG10_ipdiv_en         <= PWDATA[1];
            PLL_REG10_coarse_code_en   <= PWDATA[0];
          end
        PLL_REG11_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            PLL_REG11_pll_standby      <= PWDATA[7];
            PLL_REG11_pll_standby_en   <= PWDATA[6];
            PLL_REG11_pll_pd           <= PWDATA[5];
            PLL_REG11_pll_pd_en        <= PWDATA[4];
            PLL_REG11_pll_pso_del      <= PWDATA[3];
            PLL_REG11_pll_pso_del_en   <= PWDATA[2];
            PLL_REG11_pll_pso          <= PWDATA[1];
            PLL_REG11_pll_pso_en       <= PWDATA[0];
          end
        PLL_REG12_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            PLL_REG12_unused[1:0]      <= PWDATA[7:6];
            PLL_REG12_pll_ldo_ref_en   <= PWDATA[5];
            PLL_REG12_pll_ldo_ref_en_en <= PWDATA[4];
            PLL_REG12_pll_ldo_core_en  <= PWDATA[3];
            PLL_REG12_pll_ldo_core_en_en <= PWDATA[2];
            PLL_REG12_pll_pd_ana       <= PWDATA[1];
            PLL_REG12_pll_pd_ana_en    <= PWDATA[0];
          end
        PLL_REG13_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            PLL_REG13_pll_clkon        <= PWDATA[7];
            PLL_REG13_pll_ldo_ref_core[5:0] <= PWDATA[6:1];
            PLL_REG13_pll_ldo_ref_core_en <= PWDATA[0];
          end
        PLL_REG14_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            PLL_REG14_pll_ldo_cnt_threshold[2:0] <= PWDATA[7:5];
            PLL_REG14_pll_ldo_cnt_threshold_en <= PWDATA[4];
            PLL_REG14_pll_ldo_iso_cnt_threshold[2:0] <= PWDATA[3:1];
            PLL_REG14_pll_ldo_iso_cnt_threshold_en <= PWDATA[0];
          end
        PLL_UNUSED_REG0_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            PLL_UNUSED_REG0_unused[7:0] <= PWDATA[7:0];
          end
        PLL_UNUSED_REG1_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            PLL_UNUSED_REG1_unused[7:0] <= PWDATA[7:0];
          end
        endcase
    end  
  end  
end  
always @(*)
begin
  PRDATA[7:0] = 8'h0;
    if ((PSELx == 1'b1) && (PWRITE == 1'b0))
    begin
      case (PADDR[7:0])
        PLL_REG0_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = PLL_REG0_initial_wait_time[7:0];
        end
        PLL_REG1_REG_OFFSET[7:0]: begin
          PRDATA[7:3] = PLL_REG1_rst_fdbk_div_delay_value[4:0];
          PRDATA[2] = PLL_REG1_rst_fdbk_div_delay_en;
          PRDATA[1] = PLL_REG1_fbdiv_en;
          PRDATA[0] = PLL_REG1_initial_wait_time_en;
        end
        PLL_REG2_REG_OFFSET[7:0]: begin
          PRDATA[7] = PLL_REG2_unused;
          PRDATA[6] = PLL_REG2_vco_settling_time_en;
          PRDATA[5:0] = PLL_REG2_vco_settling_time[5:0];
        end
        PLL_REG3_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = PLL_REG3_fbdiv_value[7:0];
        end
        PLL_REG4_REG_OFFSET[7:0]: begin
          PRDATA[7] = PLL_REG4_unused;
          PRDATA[6] = PLL_REG4_pll_lock_time_15;
          PRDATA[5] = PLL_REG4_pd_pfd_value;
          PRDATA[4] = PLL_REG4_pd_pfd_en;
          PRDATA[3] = PLL_REG4_pll_lock_en;
          PRDATA[2] = PLL_REG4_pll_lock_value;
          PRDATA[1] = PLL_REG4_coarsedone_en;
          PRDATA[0] = PLL_REG4_coarsedone_value;
        end
        PLL_REG5_REG_OFFSET[7:0]: begin
          PRDATA[7] = PLL_REG5_startloop_en_4_0;
          PRDATA[6] = PLL_REG5_startloop_en_5;
          PRDATA[5] = PLL_REG5_startloop_5;
          PRDATA[4:0] = PLL_REG5_startloop_4_0[4:0];
        end
        PLL_REG6_REG_OFFSET[7:0]: begin
          PRDATA[7] = PLL_REG6_unused;
          PRDATA[6] = PLL_REG6_coarse_code_sel;
          PRDATA[5] = PLL_REG6_lsb_error_0p5;
          PRDATA[4] = PLL_REG6_big_jump_en;
          PRDATA[3] = PLL_REG6_vco_cnt_window_value;
          PRDATA[2] = PLL_REG6_vco_cnt_window_en;
          PRDATA[1] = PLL_REG6_rst_fdbk_div_value;
          PRDATA[0] = PLL_REG6_rst_fdbk_div_en;
        end
        PLL_REG7_REG_OFFSET[7:0]: begin
          PRDATA[7:5] = PLL_REG7_unused[2:0];
          PRDATA[4:1] = PLL_REG7_refclk_sel[3:0];
          PRDATA[0] = PLL_REG7_refclk_sel_en;
        end
        PLL_REG8_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = PLL_REG8_coarse_code[7:0];
        end
        PLL_REG9_REG_OFFSET[7:0]: begin
          PRDATA[7] = PLL_REG9_coarse_code;
          PRDATA[6] = PLL_REG9_V2I_code_en;
          PRDATA[5:0] = PLL_REG9_V2I_code[5:0];
        end
        PLL_REG10_REG_OFFSET[7:0]: begin
          PRDATA[7] = PLL_REG10_unused;
          PRDATA[6:2] = PLL_REG10_ipdiv_value[4:0];
          PRDATA[1] = PLL_REG10_ipdiv_en;
          PRDATA[0] = PLL_REG10_coarse_code_en;
        end
        PLL_REG11_REG_OFFSET[7:0]: begin
          PRDATA[7] = PLL_REG11_pll_standby;
          PRDATA[6] = PLL_REG11_pll_standby_en;
          PRDATA[5] = PLL_REG11_pll_pd;
          PRDATA[4] = PLL_REG11_pll_pd_en;
          PRDATA[3] = PLL_REG11_pll_pso_del;
          PRDATA[2] = PLL_REG11_pll_pso_del_en;
          PRDATA[1] = PLL_REG11_pll_pso;
          PRDATA[0] = PLL_REG11_pll_pso_en;
        end
        PLL_REG12_REG_OFFSET[7:0]: begin
          PRDATA[7:6] = PLL_REG12_unused[1:0];
          PRDATA[5] = PLL_REG12_pll_ldo_ref_en;
          PRDATA[4] = PLL_REG12_pll_ldo_ref_en_en;
          PRDATA[3] = PLL_REG12_pll_ldo_core_en;
          PRDATA[2] = PLL_REG12_pll_ldo_core_en_en;
          PRDATA[1] = PLL_REG12_pll_pd_ana;
          PRDATA[0] = PLL_REG12_pll_pd_ana_en;
        end
        PLL_REG13_REG_OFFSET[7:0]: begin
          PRDATA[7] = PLL_REG13_pll_clkon;
          PRDATA[6:1] = PLL_REG13_pll_ldo_ref_core[5:0];
          PRDATA[0] = PLL_REG13_pll_ldo_ref_core_en;
        end
        PLL_REG14_REG_OFFSET[7:0]: begin
          PRDATA[7:5] = PLL_REG14_pll_ldo_cnt_threshold[2:0];
          PRDATA[4] = PLL_REG14_pll_ldo_cnt_threshold_en;
          PRDATA[3:1] = PLL_REG14_pll_ldo_iso_cnt_threshold[2:0];
          PRDATA[0] = PLL_REG14_pll_ldo_iso_cnt_threshold_en;
        end
        PLL_UNUSED_REG0_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = PLL_UNUSED_REG0_unused[7:0];
        end
        PLL_UNUSED_REG1_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = PLL_UNUSED_REG1_unused[7:0];
        end
        PLL_REG15_REG_OFFSET[7:0]: begin
          PRDATA[7] = PLL_REG15_pll_lock_IN;
          PRDATA[6] = PLL_REG15_coarsedone_IN;
          PRDATA[5] = PLL_REG15_vco_cnt_win_IN;
          PRDATA[4] = PLL_REG15_rst_fdbk_div_IN;
          PRDATA[3] = PLL_REG15_unused_IN;
          PRDATA[2] = PLL_REG15_pd_pfd_IN;
          PRDATA[1] = PLL_REG15_startloop_IN;
          PRDATA[0] = PLL_REG15_coarse_code_8_IN;
        end
        PLL_REG16_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = PLL_REG16_coarse_code_IN[7:0];
        end
        PLL_UNUSED_REG2_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = PLL_UNUSED_REG2_unused_IN[7:0];
        end
       default:
          PRDATA = 8'h0;
      endcase
    end  
end  
assign PLL_REG0_initial_wait_time_OUT[7:0] = PLL_REG0_initial_wait_time[7:0];
assign PLL_REG1_rst_fdbk_div_delay_value_OUT[4:0] = PLL_REG1_rst_fdbk_div_delay_value[4:0];
assign PLL_REG1_rst_fdbk_div_delay_en_OUT = PLL_REG1_rst_fdbk_div_delay_en;
assign PLL_REG1_fbdiv_en_OUT           = PLL_REG1_fbdiv_en;
assign PLL_REG1_initial_wait_time_en_OUT = PLL_REG1_initial_wait_time_en;
assign PLL_REG2_unused_OUT             = PLL_REG2_unused;
assign PLL_REG2_vco_settling_time_en_OUT = PLL_REG2_vco_settling_time_en;
assign PLL_REG2_vco_settling_time_OUT[5:0] = PLL_REG2_vco_settling_time[5:0];
assign PLL_REG3_fbdiv_value_OUT[7:0]   = PLL_REG3_fbdiv_value[7:0];
assign PLL_REG4_unused_OUT             = PLL_REG4_unused;
assign PLL_REG4_pll_lock_time_15_OUT   = PLL_REG4_pll_lock_time_15;
assign PLL_REG4_pd_pfd_value_OUT       = PLL_REG4_pd_pfd_value;
assign PLL_REG4_pd_pfd_en_OUT          = PLL_REG4_pd_pfd_en;
assign PLL_REG4_pll_lock_en_OUT        = PLL_REG4_pll_lock_en;
assign PLL_REG4_pll_lock_value_OUT     = PLL_REG4_pll_lock_value;
assign PLL_REG4_coarsedone_en_OUT      = PLL_REG4_coarsedone_en;
assign PLL_REG4_coarsedone_value_OUT   = PLL_REG4_coarsedone_value;
assign PLL_REG5_startloop_en_4_0_OUT   = PLL_REG5_startloop_en_4_0;
assign PLL_REG5_startloop_en_5_OUT     = PLL_REG5_startloop_en_5;
assign PLL_REG5_startloop_5_OUT        = PLL_REG5_startloop_5;
assign PLL_REG5_startloop_4_0_OUT[4:0] = PLL_REG5_startloop_4_0[4:0];
assign PLL_REG6_unused_OUT             = PLL_REG6_unused;
assign PLL_REG6_coarse_code_sel_OUT    = PLL_REG6_coarse_code_sel;
assign PLL_REG6_lsb_error_0p5_OUT      = PLL_REG6_lsb_error_0p5;
assign PLL_REG6_big_jump_en_OUT        = PLL_REG6_big_jump_en;
assign PLL_REG6_vco_cnt_window_value_OUT = PLL_REG6_vco_cnt_window_value;
assign PLL_REG6_vco_cnt_window_en_OUT  = PLL_REG6_vco_cnt_window_en;
assign PLL_REG6_rst_fdbk_div_value_OUT = PLL_REG6_rst_fdbk_div_value;
assign PLL_REG6_rst_fdbk_div_en_OUT    = PLL_REG6_rst_fdbk_div_en;
assign PLL_REG7_unused_OUT[2:0]        = PLL_REG7_unused[2:0];
assign PLL_REG7_refclk_sel_OUT[3:0]    = PLL_REG7_refclk_sel[3:0];
assign PLL_REG7_refclk_sel_en_OUT      = PLL_REG7_refclk_sel_en;
assign PLL_REG8_coarse_code_OUT[7:0]   = PLL_REG8_coarse_code[7:0];
assign PLL_REG9_coarse_code_OUT        = PLL_REG9_coarse_code;
assign PLL_REG9_V2I_code_en_OUT        = PLL_REG9_V2I_code_en;
assign PLL_REG9_V2I_code_OUT[5:0]      = PLL_REG9_V2I_code[5:0];
assign PLL_REG10_unused_OUT            = PLL_REG10_unused;
assign PLL_REG10_ipdiv_value_OUT[4:0]  = PLL_REG10_ipdiv_value[4:0];
assign PLL_REG10_ipdiv_en_OUT          = PLL_REG10_ipdiv_en;
assign PLL_REG10_coarse_code_en_OUT    = PLL_REG10_coarse_code_en;
assign PLL_REG11_pll_standby_OUT       = PLL_REG11_pll_standby;
assign PLL_REG11_pll_standby_en_OUT    = PLL_REG11_pll_standby_en;
assign PLL_REG11_pll_pd_OUT            = PLL_REG11_pll_pd;
assign PLL_REG11_pll_pd_en_OUT         = PLL_REG11_pll_pd_en;
assign PLL_REG11_pll_pso_del_OUT       = PLL_REG11_pll_pso_del;
assign PLL_REG11_pll_pso_del_en_OUT    = PLL_REG11_pll_pso_del_en;
assign PLL_REG11_pll_pso_OUT           = PLL_REG11_pll_pso;
assign PLL_REG11_pll_pso_en_OUT        = PLL_REG11_pll_pso_en;
assign PLL_REG12_unused_OUT[1:0]       = PLL_REG12_unused[1:0];
assign PLL_REG12_pll_ldo_ref_en_OUT    = PLL_REG12_pll_ldo_ref_en;
assign PLL_REG12_pll_ldo_ref_en_en_OUT = PLL_REG12_pll_ldo_ref_en_en;
assign PLL_REG12_pll_ldo_core_en_OUT   = PLL_REG12_pll_ldo_core_en;
assign PLL_REG12_pll_ldo_core_en_en_OUT = PLL_REG12_pll_ldo_core_en_en;
assign PLL_REG12_pll_pd_ana_OUT        = PLL_REG12_pll_pd_ana;
assign PLL_REG12_pll_pd_ana_en_OUT     = PLL_REG12_pll_pd_ana_en;
assign PLL_REG13_pll_clkon_OUT         = PLL_REG13_pll_clkon;
assign PLL_REG13_pll_ldo_ref_core_OUT[5:0] = PLL_REG13_pll_ldo_ref_core[5:0];
assign PLL_REG13_pll_ldo_ref_core_en_OUT = PLL_REG13_pll_ldo_ref_core_en;
assign PLL_REG14_pll_ldo_cnt_threshold_OUT[2:0] = PLL_REG14_pll_ldo_cnt_threshold[2:0];
assign PLL_REG14_pll_ldo_cnt_threshold_en_OUT = PLL_REG14_pll_ldo_cnt_threshold_en;
assign PLL_REG14_pll_ldo_iso_cnt_threshold_OUT[2:0] = PLL_REG14_pll_ldo_iso_cnt_threshold[2:0];
assign PLL_REG14_pll_ldo_iso_cnt_threshold_en_OUT = PLL_REG14_pll_ldo_iso_cnt_threshold_en;
assign PLL_UNUSED_REG0_unused_OUT[7:0] = PLL_UNUSED_REG0_unused[7:0];
assign PLL_UNUSED_REG1_unused_OUT[7:0] = PLL_UNUSED_REG1_unused[7:0];
endmodule
`timescale 1ns/1ps
module udc_rx_lsfs_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r ( 
byte_clock,		 
rstn_byte_clock,	 
lsfs_dll_soft_reset,	 
lsfs_dll_en,		 
txvalid,		 
lsfs_transmit,		 
loopback_lsfs,		 
ls_mode,		 
fs_mode_pre,		 
se0_detected,		 
afe_lsfsrx_ana,		 
afe_rxdp_ana,		 
afe_rxdm_ana,		 
lsfs_dll_se0,		 
lsfs_dll_data,		 
lsfs_dll_data_valid,	 
rxdp_dly3,		 
rxdm_dly3		 
);
input	byte_clock, rstn_byte_clock ;
input	lsfs_dll_soft_reset, lsfs_dll_en, ls_mode, fs_mode_pre, txvalid, lsfs_transmit, loopback_lsfs, se0_detected ;
input	afe_lsfsrx_ana, afe_rxdp_ana, afe_rxdm_ana ;
output	lsfs_dll_data, lsfs_dll_data_valid, rxdp_dly3, rxdm_dly3, lsfs_dll_se0 ;
reg		lsfs_dll_data, lsfs_dll_data_valid, rxrcv_dly3, rxdp_d, rxdm_d,
		ls_mode_d, delay_reset_d, delay_reset_2d ;
reg 	[5:0]	counter ;
wire		afe_lsfsrx_ana_loc, rxrcv_dly2, rxdp_dly2, rxdm_dly2, lsfs_dll_se0, data,
		data_valid, transition_detected, counter_en, mode_change, rxdp_dly3, rxdm_dly3,
		posedge_delay_reset ; 
wire 	[5:0]	terminal_count, transition_count ;
assign afe_lsfsrx_ana_loc	= (ls_mode) ? ~afe_lsfsrx_ana : afe_lsfsrx_ana ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b1)) c_lsfsrx_sync (
.clock		(byte_clock) ,
.reset_n	(rstn_byte_clock) ,
.d_in	        (afe_lsfsrx_ana_loc) ,
.d_out	        (rxrcv_dly2)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_rxdp_sync (
.clock		(byte_clock) ,
.reset_n	(rstn_byte_clock) ,
.d_in	        (afe_rxdp_ana) ,
.d_out	        (rxdp_dly2)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_rxdm_sync (
.clock		(byte_clock) ,
.reset_n	(rstn_byte_clock) ,
.d_in	        (afe_rxdm_ana) ,
.d_out	        (rxdm_dly2)
);
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
	if(~rstn_byte_clock)
	begin
		delay_reset_d	<= 1'b 0 ;
		delay_reset_2d	<= 1'b 0 ;
	end
	else
	begin
		delay_reset_d	<= 1'b 1 ;
		delay_reset_2d	<= delay_reset_d ;
	end
end
assign posedge_delay_reset = (delay_reset_d & ~delay_reset_2d) ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
	if(~rstn_byte_clock)
	begin
		rxrcv_dly3	<= 1'b1 ;
		rxdp_d		<= 1'b1 ;
		rxdm_d		<= 1'b0 ;
		ls_mode_d	<= 1'b0  ;
	end
	else if(posedge_delay_reset)
	begin
		rxrcv_dly3	<= 1'b1 ;
		rxdp_d		<= (ls_mode) ? 1'b 0 : 1'b1 ;
		rxdm_d		<= (ls_mode) ? 1'b 1 : 1'b0 ;
		ls_mode_d	<= 1'b0  ;
	end
	else
	begin
		rxrcv_dly3	<= rxrcv_dly2 ;
		rxdp_d		<= rxdp_dly2 ;
		rxdm_d		<= rxdm_dly2 ;
		ls_mode_d	<= (fs_mode_pre | ls_mode)  ;
	end
end
assign rxdp_dly3 = (ls_mode) ? ~rxdp_d : rxdp_d ;
assign rxdm_dly3 = (ls_mode) ? ~rxdm_d : rxdm_d ;
assign transition_detected = (rxrcv_dly2 ^ rxrcv_dly3) ;
assign counter_en	= loopback_lsfs ? lsfs_dll_en : (lsfs_dll_en & ~(txvalid | lsfs_transmit)) ;
assign mode_change	= ((fs_mode_pre | ls_mode) ^ ls_mode_d) ;
assign terminal_count 	= (fs_mode_pre | ls_mode) ? 6'd 39 : 6'd 4 ;
assign transition_count	= (fs_mode_pre | ls_mode) ? 6'd 19 : 6'd 1 ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
	if(~rstn_byte_clock)
		counter <= 6'd 4 ;
	else if(mode_change | lsfs_dll_soft_reset)
		counter <= terminal_count ;
	else if(counter_en)
	begin
		if(transition_detected)
			counter <= transition_count ;
		else if(counter == 6'd 0)
			counter <= terminal_count ;
		else 
			counter <= counter - 6'd 1 ;
	end
	else
		counter <= terminal_count ;
end
assign lsfs_dll_se0	= se0_detected ;
assign data_valid	= (counter == 6'd 0 & ~transition_detected) ;
assign data		= rxrcv_dly2 ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
	if(~rstn_byte_clock)
	begin
		lsfs_dll_data		<= 1'b1 ;
		lsfs_dll_data_valid	<= 1'b0 ;
	end
	else
	begin
		lsfs_dll_data		<= data ;
		lsfs_dll_data_valid	<= data_valid ;
	end
end
endmodule
`timescale 1 ps / 1 ps  
module AFEPHY_TXFIFO_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r
(
 rst480,                            
 clk480,                            
 tx_clk240,                         
 tx_data_hs,                        
 tx_enable_hs,                      
 hs_current_en,                     
 hsddi,                             
 hsdrv_en,                          
 hspredrv_en,                       
 testmode                           
  );
 input                             rst480;
 input                             tx_clk240;
 input                       [1:0] tx_data_hs;
 input                       [1:0] tx_enable_hs;
 input                             hs_current_en;
 input                             clk480;
 output                            hsddi;
 reg                               hsddi;
 output                            hsdrv_en;
 reg                               hsdrv_en;
 output                            hspredrv_en;
 wire                              hspredrv_en;
 input                             testmode;
 reg                          [3:0] data_buffer_l;
 reg                          [3:0] valid_buffer_l;
 reg                          [3:0] data_buffer_h;
 reg                          [3:0] valid_buffer_h;
 wire                               wren;
 reg                          [1:0] wr_ptr;
 reg                          [2:0] tx_cnt;
 reg                                hsdrv_en_r;
 wire                               hsdrv_en_fall;
 reg                                enable_tx;
 reg                                tx_fifo_clear;
 reg                                tx_fifo_clear_r;
 reg                                tx_fifo_clear_r2;
 wire                               tx_valid_rise;
 reg                                tx_valid_sync0;
 reg                                tx_valid_sync1;
 reg                                tx_valid_sync2;
 wire                               clk240, rst240;
 wire                         [7:0] data_buffer;
 wire                         [7:0] valid_buffer;
  assign clk240 = tx_clk240;
    assign w_rst240 = rst480 & ~tx_fifo_clear_r2;
  scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_rst240(
  .scan_mode_en_in(testmode),
  .scan_signal_in(rst480),
  .fcn_signal_in(w_rst240),
  .fcn_signal_out(rst240)
  );
  assign wren = |tx_enable_hs; 
   always @(posedge clk240 or negedge rst240)
   begin : WR_PTR_PROC
   if (rst240 == 1'b0)
     begin
     wr_ptr <= 2'b00 ; 
     end
   else
     begin
     if (wren == 1'b1) 
       begin
       wr_ptr <= wr_ptr + 1'b1;
       end
     end  
   end
  always @(posedge clk240 or negedge rst240)
  begin
    if (rst240 == 1'b0)
      begin
      data_buffer_l  <= 4'd0;
      data_buffer_h  <= 4'd0;
      valid_buffer_l <= 4'd0;
      valid_buffer_h <= 4'd0;
      end
    else
      begin
      data_buffer_l [wr_ptr] <= tx_data_hs[0];
      data_buffer_h [wr_ptr] <= tx_data_hs[1];
      valid_buffer_l[wr_ptr] <= tx_enable_hs[0];
      valid_buffer_h[wr_ptr] <= tx_enable_hs[1];
      end
  end
  assign data_buffer  = {data_buffer_h[3],data_buffer_l[3],
                         data_buffer_h[2],data_buffer_l[2],
                         data_buffer_h[1],data_buffer_l[1],
	                     data_buffer_h[0],data_buffer_l[0]};
  assign valid_buffer = {valid_buffer_h[3],valid_buffer_l[3],
                         valid_buffer_h[2],valid_buffer_l[2],
                         valid_buffer_h[1],valid_buffer_l[1],
	                     valid_buffer_h[0],valid_buffer_l[0]};
  always @(posedge clk480 or negedge rst480)
  begin
    if (rst480 == 1'b0)
      begin
      tx_valid_sync0 <= 1'b0;
      tx_valid_sync1 <= 1'b0;
      tx_valid_sync2 <= 1'b0;
      end
    else
      begin
      tx_valid_sync0 <= valid_buffer_l[0]; 
      tx_valid_sync1 <= tx_valid_sync0;
      tx_valid_sync2 <= tx_valid_sync1;
      end
  end
  assign tx_valid_rise = ~tx_valid_sync2 & tx_valid_sync1;
  always @(posedge clk480 or negedge rst480)
  begin
    if (rst480 == 1'b0)
      begin
      enable_tx <= 1'b0;
      end
    else if (tx_valid_rise == 1'b1 && 
             tx_fifo_clear == 1'b0 && 
             tx_fifo_clear_r == 1'b0)
      begin
      enable_tx <= 1'b1;
      end
    else if (hsdrv_en_fall == 1'b1 ||
             tx_fifo_clear == 1'b1 || 
             tx_fifo_clear_r == 1'b1)
      begin
      enable_tx <= 1'b0;
      end
  end
  always @(posedge clk480 or negedge rst480)
  begin
    if (rst480 == 1'b0)
      begin
      hsddi <= 1'b0;
      hsdrv_en <= 1'b0;
      tx_cnt <= 3'b000;
      end
    else if (enable_tx == 1'b1 && hsdrv_en_fall == 1'b0)
      begin
      hsddi <= data_buffer[tx_cnt];
      hsdrv_en <= valid_buffer[tx_cnt];
      tx_cnt <= tx_cnt + 1'b1;
      end
    else
      begin
      hsddi <= 1'b0;
      hsdrv_en <= 1'b0;
      tx_cnt <= 3'b000;
      end
  end
  always @(posedge clk480 or negedge rst480)
  begin
    if (rst480 == 1'b0)
      begin
      hsdrv_en_r <= 1'b0;
      end
    else
      begin
      hsdrv_en_r <= hsdrv_en;
      end
  end
  assign hsdrv_en_fall = hsdrv_en_r & ~hsdrv_en;
  always @(posedge clk480 or negedge rst480)
  begin
    if (rst480 == 1'b0)
      begin
      tx_fifo_clear   <= 1'b0;
      tx_fifo_clear_r <= 1'b0;
      tx_fifo_clear_r2 <= 1'b0;
      end
    else
      begin
      tx_fifo_clear   <= hsdrv_en_fall;
      tx_fifo_clear_r <= tx_fifo_clear;
      tx_fifo_clear_r2 <= tx_fifo_clear_r;
      end
  end
  assign hspredrv_en = hs_current_en | enable_tx;
endmodule
`timescale 1ps/1ps
module pwr_isl_ctrl_sm_v2_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r 
#( 
   parameter
      POWER_EN_POLARITY    = 1,
      TIMER_WIDTH          = 4,
      STATE_RET_SAVE_PULSE = 0
) (   
   input                    clock,
   input                    reset_n,
   input                    power_suspend_req,
   output                   power_suspend_ack,
   input                    power_recover_req,
   output                   power_recover_ack,
   output                   state_ret_save,
   output                   state_ret_restore,
   output                   power_en_ph_1,
   output                   power_en_ph_2,
   output                   power_isolation_en,
   output                   power_reset_n,
   input  [TIMER_WIDTH-1:0] power_en_ph_1_time,
   input  [TIMER_WIDTH-1:0] power_en_ph_2_time,
   input                    testmode
);
   reg                    timer_load_ph_1;
   reg                    timer_load_ph_2;
   reg                    timer_decrement;
   wire [TIMER_WIDTH-1:0] power_en_time;
   reg  [8:0] pwr_isl_ctrl_current_state, 
              pwr_isl_ctrl_next_state;    
   parameter [8:0]      
      PIC_ENABLED              = 9'b0_1_1_1_0_0_0_1_0, 
      PIC_ISO_ENABLE           = 9'b0_1_1_1_1_0_0_0_0, 
      PIC_SAVE_STATE           = 9'b0_1_1_1_1_0_1_0_0, 
      PIC_DIS_DELAY            = 9'b1_1_1_1_1_0_1_0_0, 
      PIC_DISABLED             = 9'b0_1_0_0_1_0_1_0_1, 
      PIC_PWR_ENABLE_PH_1      = 9'b0_0_0_1_1_0_1_0_0, 
      PIC_PWR_ENABLE_PH_2      = 9'b0_0_1_1_1_0_1_0_0, 
      PIC_RESTORE_STATE        = 9'b0_0_1_1_1_1_0_0_0,
      PIC_ISO_DISABLE          = 9'b0_0_1_1_0_0_0_0_0;
   wire state_ret_save_d0;
   reg  state_ret_save_d1;
   wire invert_power_en;
   assign power_en_time = timer_load_ph_1 ? power_en_ph_1_time : power_en_ph_2_time;
   gen_timer_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r 
   #( 
      .BIT_WIDTH   (TIMER_WIDTH),
      .RESET_VALUE ({TIMER_WIDTH{1'b0}})
   ) u_timer (
      .clock    (clock),
      .reset_n  (reset_n),
      .load     (timer_load_ph_1 || timer_load_ph_2),
      .load_val (power_en_time),
      .count    (timer_decrement),
      .zero     (timer_zero) 
   );
   always @(posedge clock or negedge reset_n) 
   begin
      if (!reset_n)
         pwr_isl_ctrl_current_state  <= PIC_DISABLED;
      else
         pwr_isl_ctrl_current_state  <= pwr_isl_ctrl_next_state;
   end    
   always@(*) 
   begin
      pwr_isl_ctrl_next_state = pwr_isl_ctrl_current_state;
      timer_load_ph_1 = 1'b0;
      timer_load_ph_2 = 1'b0;
      timer_decrement = 1'b0;
      case(pwr_isl_ctrl_current_state)
         PIC_ENABLED:
         begin
            if (power_suspend_req)
               pwr_isl_ctrl_next_state = PIC_ISO_ENABLE;
            else
               pwr_isl_ctrl_next_state = PIC_ENABLED;
         end
         PIC_ISO_ENABLE:
         begin
            pwr_isl_ctrl_next_state = PIC_SAVE_STATE;
         end
         PIC_SAVE_STATE:
         begin
            pwr_isl_ctrl_next_state = PIC_DIS_DELAY;
         end
         PIC_DIS_DELAY:
         begin
            pwr_isl_ctrl_next_state = PIC_DISABLED;
         end
         PIC_DISABLED:
         begin
            timer_load_ph_1 = 1'b1;
            if (power_recover_req)
               pwr_isl_ctrl_next_state = PIC_PWR_ENABLE_PH_1;
            else
               pwr_isl_ctrl_next_state = PIC_DISABLED;
         end
         PIC_PWR_ENABLE_PH_1:
         begin
            timer_decrement = 1'b1;
            if (timer_zero)
            begin
               timer_load_ph_2 = 1'b1;
               pwr_isl_ctrl_next_state = PIC_PWR_ENABLE_PH_2;
            end
            else
            begin
               pwr_isl_ctrl_next_state = PIC_PWR_ENABLE_PH_1;
            end
         end
         PIC_PWR_ENABLE_PH_2:
         begin
            timer_decrement = 1'b1;
            if (timer_zero)
               pwr_isl_ctrl_next_state = PIC_RESTORE_STATE;
            else
               pwr_isl_ctrl_next_state = PIC_PWR_ENABLE_PH_2;
         end
         PIC_RESTORE_STATE:
         begin
            pwr_isl_ctrl_next_state = PIC_ISO_DISABLE;
         end
         PIC_ISO_DISABLE:
         begin
            pwr_isl_ctrl_next_state = PIC_ENABLED;
         end
      endcase
   end
   generate
      if (POWER_EN_POLARITY == 1)
         assign invert_power_en = 1'b0;
      else
         assign invert_power_en = 1'b1;
   endgenerate
   assign power_suspend_ack  = pwr_isl_ctrl_current_state[0];
   assign power_recover_ack  = pwr_isl_ctrl_current_state[1];
   assign state_ret_save_d0  = pwr_isl_ctrl_current_state[2];
   assign state_ret_restore  = pwr_isl_ctrl_current_state[3]  && !testmode;
   assign power_isolation_en = pwr_isl_ctrl_current_state[4]  && !testmode;
   assign power_en_ph_1      = (pwr_isl_ctrl_current_state[5] ||  testmode) ^ invert_power_en;
   assign power_en_ph_2      = (pwr_isl_ctrl_current_state[6] ||  testmode) ^ invert_power_en;
   assign power_reset_n      = pwr_isl_ctrl_current_state[7]  ||  testmode;
   generate 
      if (STATE_RET_SAVE_PULSE == 1)
      begin
         always @(posedge clock or negedge reset_n) 
         begin
            if (!reset_n)
               state_ret_save_d1  <= 1'b1;
            else
               state_ret_save_d1  <= state_ret_save_d0;
         end    
         assign state_ret_save = state_ret_save_d0 && !state_ret_save_d1 && !testmode;
      end   
      else
      begin
         assign state_ret_save = state_ret_save_d0 && !testmode;
      end
   endgenerate
endmodule
`timescale 1ns/1ps
module udc_rx_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r ( 
hs_clock,			 
rstn_hs_clock,			 
hs_mode,			 
lsfs_dll_data,			 
lsfs_dll_data_valid,		 
lsfs_dll_se0,			 
hs_eb_data,			 
hs_eb_data_valid,		 
rx_data,			 
rx_data_valid			 
);
input	hs_clock, rstn_hs_clock ;
input	hs_mode ;
input	lsfs_dll_data, lsfs_dll_data_valid, lsfs_dll_se0 ;
input	hs_eb_data, hs_eb_data_valid ;
output	rx_data, rx_data_valid ;
reg	lsfs_dll_data_valid_d ;
wire	rx_data, rx_data_valid, lsfs_data_valid ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		lsfs_dll_data_valid_d <= 1'b0 ;
	else
		lsfs_dll_data_valid_d <= lsfs_dll_data_valid ;
end
assign lsfs_data_valid = (~lsfs_dll_se0 & lsfs_dll_data_valid & ~lsfs_dll_data_valid_d) ;
assign rx_data		= hs_mode ? hs_eb_data : lsfs_dll_data ;
assign rx_data_valid	= hs_mode ? hs_eb_data_valid : lsfs_data_valid ;
endmodule
module ana_misc_reg_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
  AFE_BG_REG0_bg_ana_reg0_OUT,
  AFE_BG_REG1_bg_ana_reg1_OUT,
  AFE_BG_REG2_bg_ana_reg2_OUT,
  AFE_BG_REG3_bg_ana_reg3_OUT,
  AFE_CALIB_REG0_calib_ana_reg0_OUT,
  AFE_BC_REG0_bc_ana_reg0_OUT,
  AFE_BC_REG1_bc_ana_reg1_OUT,
  AFE_BC_REG2_bc_ana_reg2_OUT,
  AFE_BC_REG3_bc_ana_reg3_OUT,
  AFE_BC_REG4_bc_ana_reg4_OUT,
  AFE_BC_REG5_bc_ana_reg5_OUT,
  AFE_BC_REG6_bc_ana_reg6_OUT,
  AFE_PLL_REG0_afe_pll_reg0_OUT,
  AFE_PLL_REG1_afe_pll_reg1_OUT,
  AFE_PLL_REG2_afe_pll_reg2_OUT,
  AFE_PLL_REG3_afe_pll_reg3_OUT,
  AFE_PLL_REG4_afe_pll_reg4_OUT,
  AFE_PLL_REG5_afe_pll_reg5_OUT,
  AFE_BG_REG4_bg_ana_reg4_IN,
  AFE_CALIB_REG1_calib_ana_reg1_IN,
  AFE_BC_REG7_bc_ana_reg7_IN,
  AFE_PLL_REG6_pll_ana_reg6_IN,
  AFE_UNUSED_REG2_unused_OUT,
  AFE_UNUSED_REG3_unused_OUT,
  PRDATA,
  PADDR,
  PWDATA,
  PWRITE,
  PSELx,
  PENABLE,
  PCLK,
  PRESETn
);
output [7:0]   PRDATA;
input  [7:0]   PADDR;
input  [7:0]   PWDATA;
input          PWRITE;
input          PSELx;
input          PENABLE;
input          PCLK;
input          PRESETn;
output [7:0]   AFE_BG_REG0_bg_ana_reg0_OUT;
output [7:0]   AFE_BG_REG1_bg_ana_reg1_OUT;
output [7:0]   AFE_BG_REG2_bg_ana_reg2_OUT;
output [7:0]   AFE_BG_REG3_bg_ana_reg3_OUT;
output [7:0]   AFE_CALIB_REG0_calib_ana_reg0_OUT;
output [7:0]   AFE_BC_REG0_bc_ana_reg0_OUT;
output [7:0]   AFE_BC_REG1_bc_ana_reg1_OUT;
output [7:0]   AFE_BC_REG2_bc_ana_reg2_OUT;
output [7:0]   AFE_BC_REG3_bc_ana_reg3_OUT;
output [7:0]   AFE_BC_REG4_bc_ana_reg4_OUT;
output [7:0]   AFE_BC_REG5_bc_ana_reg5_OUT;
output [7:0]   AFE_BC_REG6_bc_ana_reg6_OUT;
output [7:0]   AFE_PLL_REG0_afe_pll_reg0_OUT;
output [7:0]   AFE_PLL_REG1_afe_pll_reg1_OUT;
output [7:0]   AFE_PLL_REG2_afe_pll_reg2_OUT;
output [7:0]   AFE_PLL_REG3_afe_pll_reg3_OUT;
output [7:0]   AFE_PLL_REG4_afe_pll_reg4_OUT;
output [7:0]   AFE_PLL_REG5_afe_pll_reg5_OUT;
input  [7:0]   AFE_BG_REG4_bg_ana_reg4_IN;
input  [7:0]   AFE_CALIB_REG1_calib_ana_reg1_IN;
input  [7:0]   AFE_BC_REG7_bc_ana_reg7_IN;
input  [7:0]   AFE_PLL_REG6_pll_ana_reg6_IN;
output [7:0]   AFE_UNUSED_REG2_unused_OUT;
output [7:0]   AFE_UNUSED_REG3_unused_OUT;
reg [7:0]   PRDATA;
reg [7:0]   AFE_BG_REG0_bg_ana_reg0;
reg [7:0]   AFE_BG_REG1_bg_ana_reg1;
reg [7:0]   AFE_BG_REG2_bg_ana_reg2;
reg [7:0]   AFE_BG_REG3_bg_ana_reg3;
reg [7:0]   AFE_CALIB_REG0_calib_ana_reg0;
reg [7:0]   AFE_BC_REG0_bc_ana_reg0;
reg [7:0]   AFE_BC_REG1_bc_ana_reg1;
reg [7:0]   AFE_BC_REG2_bc_ana_reg2;
reg [7:0]   AFE_BC_REG3_bc_ana_reg3;
reg [7:0]   AFE_BC_REG4_bc_ana_reg4;
reg [7:0]   AFE_BC_REG5_bc_ana_reg5;
reg [7:0]   AFE_BC_REG6_bc_ana_reg6;
reg [7:0]   AFE_PLL_REG0_afe_pll_reg0;
reg [7:0]   AFE_PLL_REG1_afe_pll_reg1;
reg [7:0]   AFE_PLL_REG2_afe_pll_reg2;
reg [7:0]   AFE_PLL_REG3_afe_pll_reg3;
reg [7:0]   AFE_PLL_REG4_afe_pll_reg4;
reg [7:0]   AFE_PLL_REG5_afe_pll_reg5;
reg [7:0]   AFE_UNUSED_REG2_unused;
reg [7:0]   AFE_UNUSED_REG3_unused;
localparam AFE_BG_REG0_REG_OFFSET = 8'b00100000;
localparam AFE_BG_REG0_bg_ana_reg0_BIT_RESET = 8'b00000000;
localparam AFE_BG_REG1_REG_OFFSET = 8'b00100001;
localparam AFE_BG_REG1_bg_ana_reg1_BIT_RESET = 8'b00000000;
localparam AFE_BG_REG2_REG_OFFSET = 8'b00100010;
localparam AFE_BG_REG2_bg_ana_reg2_BIT_RESET = 8'b00000000;
localparam AFE_BG_REG3_REG_OFFSET = 8'b00100011;
localparam AFE_BG_REG3_bg_ana_reg3_BIT_RESET = 8'b00000010;
localparam AFE_CALIB_REG0_REG_OFFSET = 8'b00100100;
localparam AFE_CALIB_REG0_calib_ana_reg0_BIT_RESET = 8'b00000000;
localparam AFE_BC_REG0_REG_OFFSET = 8'b00100101;
localparam AFE_BC_REG0_bc_ana_reg0_BIT_RESET = 8'b00000000;
localparam AFE_BC_REG1_REG_OFFSET = 8'b00100110;
localparam AFE_BC_REG1_bc_ana_reg1_BIT_RESET = 8'b00000000;
localparam AFE_BC_REG2_REG_OFFSET = 8'b00100111;
localparam AFE_BC_REG2_bc_ana_reg2_BIT_RESET = 8'b00000000;
localparam AFE_BC_REG3_REG_OFFSET = 8'b00101000;
localparam AFE_BC_REG3_bc_ana_reg3_BIT_RESET = 8'b00000000;
localparam AFE_BC_REG4_REG_OFFSET = 8'b00101001;
localparam AFE_BC_REG4_bc_ana_reg4_BIT_RESET = 8'b00000000;
localparam AFE_BC_REG5_REG_OFFSET = 8'b00101010;
localparam AFE_BC_REG5_bc_ana_reg5_BIT_RESET = 8'b00000000;
localparam AFE_BC_REG6_REG_OFFSET = 8'b00101011;
localparam AFE_BC_REG6_bc_ana_reg6_BIT_RESET = 8'b00000000;
localparam AFE_PLL_REG0_REG_OFFSET = 8'b00101100;
localparam AFE_PLL_REG0_afe_pll_reg0_BIT_RESET = 8'b00000000;
localparam AFE_PLL_REG1_REG_OFFSET = 8'b00101101;
localparam AFE_PLL_REG1_afe_pll_reg1_BIT_RESET = 8'b00000000;
localparam AFE_PLL_REG2_REG_OFFSET = 8'b00101110;
localparam AFE_PLL_REG2_afe_pll_reg2_BIT_RESET = 8'b00000000;
localparam AFE_PLL_REG3_REG_OFFSET = 8'b00101111;
localparam AFE_PLL_REG3_afe_pll_reg3_BIT_RESET = 8'b00000000;
localparam AFE_PLL_REG4_REG_OFFSET = 8'b00110000;
localparam AFE_PLL_REG4_afe_pll_reg4_BIT_RESET = 8'b00000000;
localparam AFE_PLL_REG5_REG_OFFSET = 8'b00110001;
localparam AFE_PLL_REG5_afe_pll_reg5_BIT_RESET = 8'b00000000;
localparam AFE_BG_REG4_REG_OFFSET = 8'b00110010;
localparam AFE_BG_REG4_bg_ana_reg4_BIT_RESET = 8'b00000000;
localparam AFE_CALIB_REG1_REG_OFFSET = 8'b00110011;
localparam AFE_CALIB_REG1_calib_ana_reg1_BIT_RESET = 8'b00000000;
localparam AFE_BC_REG7_REG_OFFSET = 8'b00110100;
localparam AFE_BC_REG7_bc_ana_reg7_BIT_RESET = 8'b00000000;
localparam AFE_PLL_REG6_REG_OFFSET = 8'b00110101;
localparam AFE_PLL_REG6_pll_ana_reg6_BIT_RESET = 8'b00000000;
localparam AFE_UNUSED_REG2_REG_OFFSET = 8'b00110110;
localparam AFE_UNUSED_REG2_unused_BIT_RESET = 8'b00000000;
localparam AFE_UNUSED_REG3_REG_OFFSET = 8'b00110111;
localparam AFE_UNUSED_REG3_unused_BIT_RESET = 8'b00000000;
always @(posedge PCLK or negedge PRESETn)
begin
if(!PRESETn)
  begin
    AFE_BG_REG0_bg_ana_reg0            <= AFE_BG_REG0_bg_ana_reg0_BIT_RESET;
    AFE_BG_REG1_bg_ana_reg1            <= AFE_BG_REG1_bg_ana_reg1_BIT_RESET;
    AFE_BG_REG2_bg_ana_reg2            <= AFE_BG_REG2_bg_ana_reg2_BIT_RESET;
    AFE_BG_REG3_bg_ana_reg3            <= AFE_BG_REG3_bg_ana_reg3_BIT_RESET;
    AFE_CALIB_REG0_calib_ana_reg0      <= AFE_CALIB_REG0_calib_ana_reg0_BIT_RESET;
    AFE_BC_REG0_bc_ana_reg0            <= AFE_BC_REG0_bc_ana_reg0_BIT_RESET;
    AFE_BC_REG1_bc_ana_reg1            <= AFE_BC_REG1_bc_ana_reg1_BIT_RESET;
    AFE_BC_REG2_bc_ana_reg2            <= AFE_BC_REG2_bc_ana_reg2_BIT_RESET;
    AFE_BC_REG3_bc_ana_reg3            <= AFE_BC_REG3_bc_ana_reg3_BIT_RESET;
    AFE_BC_REG4_bc_ana_reg4            <= AFE_BC_REG4_bc_ana_reg4_BIT_RESET;
    AFE_BC_REG5_bc_ana_reg5            <= AFE_BC_REG5_bc_ana_reg5_BIT_RESET;
    AFE_BC_REG6_bc_ana_reg6            <= AFE_BC_REG6_bc_ana_reg6_BIT_RESET;
    AFE_PLL_REG0_afe_pll_reg0          <= AFE_PLL_REG0_afe_pll_reg0_BIT_RESET;
    AFE_PLL_REG1_afe_pll_reg1          <= AFE_PLL_REG1_afe_pll_reg1_BIT_RESET;
    AFE_PLL_REG2_afe_pll_reg2          <= AFE_PLL_REG2_afe_pll_reg2_BIT_RESET;
    AFE_PLL_REG3_afe_pll_reg3          <= AFE_PLL_REG3_afe_pll_reg3_BIT_RESET;
    AFE_PLL_REG4_afe_pll_reg4          <= AFE_PLL_REG4_afe_pll_reg4_BIT_RESET;
    AFE_PLL_REG5_afe_pll_reg5          <= AFE_PLL_REG5_afe_pll_reg5_BIT_RESET;
    AFE_UNUSED_REG2_unused             <= AFE_UNUSED_REG2_unused_BIT_RESET;
    AFE_UNUSED_REG3_unused             <= AFE_UNUSED_REG3_unused_BIT_RESET;
  end
else  
  begin
    if ((PSELx == 1'b1) && (PWRITE == 1'b1) )
    begin  
      case (PADDR[7:0])
        AFE_BG_REG0_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_BG_REG0_bg_ana_reg0[7:0] <= PWDATA[7:0];
          end
        AFE_BG_REG1_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_BG_REG1_bg_ana_reg1[7:0] <= PWDATA[7:0];
          end
        AFE_BG_REG2_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_BG_REG2_bg_ana_reg2[7:0] <= PWDATA[7:0];
          end
        AFE_BG_REG3_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_BG_REG3_bg_ana_reg3[7:0] <= PWDATA[7:0];
          end
        AFE_CALIB_REG0_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_CALIB_REG0_calib_ana_reg0[7:0] <= PWDATA[7:0];
          end
        AFE_BC_REG0_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_BC_REG0_bc_ana_reg0[7:0] <= PWDATA[7:0];
          end
        AFE_BC_REG1_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_BC_REG1_bc_ana_reg1[7:0] <= PWDATA[7:0];
          end
        AFE_BC_REG2_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_BC_REG2_bc_ana_reg2[7:0] <= PWDATA[7:0];
          end
        AFE_BC_REG3_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_BC_REG3_bc_ana_reg3[7:0] <= PWDATA[7:0];
          end
        AFE_BC_REG4_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_BC_REG4_bc_ana_reg4[7:0] <= PWDATA[7:0];
          end
        AFE_BC_REG5_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_BC_REG5_bc_ana_reg5[7:0] <= PWDATA[7:0];
          end
        AFE_BC_REG6_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_BC_REG6_bc_ana_reg6[7:0] <= PWDATA[7:0];
          end
        AFE_PLL_REG0_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_PLL_REG0_afe_pll_reg0[7:0] <= PWDATA[7:0];
          end
        AFE_PLL_REG1_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_PLL_REG1_afe_pll_reg1[7:0] <= PWDATA[7:0];
          end
        AFE_PLL_REG2_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_PLL_REG2_afe_pll_reg2[7:0] <= PWDATA[7:0];
          end
        AFE_PLL_REG3_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_PLL_REG3_afe_pll_reg3[7:0] <= PWDATA[7:0];
          end
        AFE_PLL_REG4_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_PLL_REG4_afe_pll_reg4[7:0] <= PWDATA[7:0];
          end
        AFE_PLL_REG5_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_PLL_REG5_afe_pll_reg5[7:0] <= PWDATA[7:0];
          end
        AFE_UNUSED_REG2_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_UNUSED_REG2_unused[7:0] <= PWDATA[7:0];
          end
        AFE_UNUSED_REG3_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_UNUSED_REG3_unused[7:0] <= PWDATA[7:0];
          end
        endcase
    end  
  end  
end  
always @(*)
begin
  PRDATA[7:0] = 8'h0;
    if ((PSELx == 1'b1) && (PWRITE == 1'b0))
    begin
      case (PADDR[7:0])
        AFE_BG_REG0_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_BG_REG0_bg_ana_reg0[7:0];
        end
        AFE_BG_REG1_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_BG_REG1_bg_ana_reg1[7:0];
        end
        AFE_BG_REG2_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_BG_REG2_bg_ana_reg2[7:0];
        end
        AFE_BG_REG3_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_BG_REG3_bg_ana_reg3[7:0];
        end
        AFE_CALIB_REG0_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_CALIB_REG0_calib_ana_reg0[7:0];
        end
        AFE_BC_REG0_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_BC_REG0_bc_ana_reg0[7:0];
        end
        AFE_BC_REG1_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_BC_REG1_bc_ana_reg1[7:0];
        end
        AFE_BC_REG2_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_BC_REG2_bc_ana_reg2[7:0];
        end
        AFE_BC_REG3_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_BC_REG3_bc_ana_reg3[7:0];
        end
        AFE_BC_REG4_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_BC_REG4_bc_ana_reg4[7:0];
        end
        AFE_BC_REG5_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_BC_REG5_bc_ana_reg5[7:0];
        end
        AFE_BC_REG6_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_BC_REG6_bc_ana_reg6[7:0];
        end
        AFE_PLL_REG0_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_PLL_REG0_afe_pll_reg0[7:0];
        end
        AFE_PLL_REG1_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_PLL_REG1_afe_pll_reg1[7:0];
        end
        AFE_PLL_REG2_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_PLL_REG2_afe_pll_reg2[7:0];
        end
        AFE_PLL_REG3_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_PLL_REG3_afe_pll_reg3[7:0];
        end
        AFE_PLL_REG4_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_PLL_REG4_afe_pll_reg4[7:0];
        end
        AFE_PLL_REG5_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_PLL_REG5_afe_pll_reg5[7:0];
        end
        AFE_BG_REG4_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_BG_REG4_bg_ana_reg4_IN[7:0];
        end
        AFE_CALIB_REG1_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_CALIB_REG1_calib_ana_reg1_IN[7:0];
        end
        AFE_BC_REG7_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_BC_REG7_bc_ana_reg7_IN[7:0];
        end
        AFE_PLL_REG6_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_PLL_REG6_pll_ana_reg6_IN[7:0];
        end
        AFE_UNUSED_REG2_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_UNUSED_REG2_unused[7:0];
        end
        AFE_UNUSED_REG3_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_UNUSED_REG3_unused[7:0];
        end
       default:
          PRDATA = 8'h0;
      endcase
    end  
end  
assign AFE_BG_REG0_bg_ana_reg0_OUT[7:0] = AFE_BG_REG0_bg_ana_reg0[7:0];
assign AFE_BG_REG1_bg_ana_reg1_OUT[7:0] = AFE_BG_REG1_bg_ana_reg1[7:0];
assign AFE_BG_REG2_bg_ana_reg2_OUT[7:0] = AFE_BG_REG2_bg_ana_reg2[7:0];
assign AFE_BG_REG3_bg_ana_reg3_OUT[7:0] = AFE_BG_REG3_bg_ana_reg3[7:0];
assign AFE_CALIB_REG0_calib_ana_reg0_OUT[7:0] = AFE_CALIB_REG0_calib_ana_reg0[7:0];
assign AFE_BC_REG0_bc_ana_reg0_OUT[7:0] = AFE_BC_REG0_bc_ana_reg0[7:0];
assign AFE_BC_REG1_bc_ana_reg1_OUT[7:0] = AFE_BC_REG1_bc_ana_reg1[7:0];
assign AFE_BC_REG2_bc_ana_reg2_OUT[7:0] = AFE_BC_REG2_bc_ana_reg2[7:0];
assign AFE_BC_REG3_bc_ana_reg3_OUT[7:0] = AFE_BC_REG3_bc_ana_reg3[7:0];
assign AFE_BC_REG4_bc_ana_reg4_OUT[7:0] = AFE_BC_REG4_bc_ana_reg4[7:0];
assign AFE_BC_REG5_bc_ana_reg5_OUT[7:0] = AFE_BC_REG5_bc_ana_reg5[7:0];
assign AFE_BC_REG6_bc_ana_reg6_OUT[7:0] = AFE_BC_REG6_bc_ana_reg6[7:0];
assign AFE_PLL_REG0_afe_pll_reg0_OUT[7:0] = AFE_PLL_REG0_afe_pll_reg0[7:0];
assign AFE_PLL_REG1_afe_pll_reg1_OUT[7:0] = AFE_PLL_REG1_afe_pll_reg1[7:0];
assign AFE_PLL_REG2_afe_pll_reg2_OUT[7:0] = AFE_PLL_REG2_afe_pll_reg2[7:0];
assign AFE_PLL_REG3_afe_pll_reg3_OUT[7:0] = AFE_PLL_REG3_afe_pll_reg3[7:0];
assign AFE_PLL_REG4_afe_pll_reg4_OUT[7:0] = AFE_PLL_REG4_afe_pll_reg4[7:0];
assign AFE_PLL_REG5_afe_pll_reg5_OUT[7:0] = AFE_PLL_REG5_afe_pll_reg5[7:0];
assign AFE_UNUSED_REG2_unused_OUT[7:0] = AFE_UNUSED_REG2_unused[7:0];
assign AFE_UNUSED_REG3_unused_OUT[7:0] = AFE_UNUSED_REG3_unused[7:0];
endmodule
`timescale 1ns/1ps
module udc_rx_nrzi_dec_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r ( 
hs_clock,		 
rstn_hs_clock,		 
nrzi_dec_soft_reset,	 
nrzi_dec_en,		 
hs_mode,		 
rxactive_off,		 
posedge_eop_detected,	 
rx_data,		 
rx_data_valid,		 
rx_nrzi_dec_data	 
);
input	hs_clock, rstn_hs_clock ;
input	nrzi_dec_soft_reset, hs_mode, nrzi_dec_en, rxactive_off, rx_data, rx_data_valid, posedge_eop_detected ;
output	rx_nrzi_dec_data ;
reg	rx_data_prev ;
wire	rx_nrzi_dec_data ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		rx_data_prev <= 1'b 1 ;
	else if(nrzi_dec_soft_reset | (hs_mode & posedge_eop_detected) | (~hs_mode & rxactive_off) | ~nrzi_dec_en)
		rx_data_prev <= 1'b 1 ;
	else if(rx_data_valid)
		rx_data_prev <= rx_data ;
end
assign rx_nrzi_dec_data = nrzi_dec_en ? (rx_data_valid & (rx_data_prev ~^ rx_data)) 
					: rx_data ;
endmodule
module ana_tx_rx_reg_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
  AFE_TX_REG0_tx_ana_reg0_OUT,
  AFE_TX_REG1_tx_ana_reg1_OUT,
  AFE_TX_REG2_tx_ana_reg2_OUT,
  AFE_TX_REG3_tx_ana_reg3_OUT,
  AFE_TX_REG4_tx_ana_reg4_OUT,
  AFE_TX_REG5_tx_ana_reg5_OUT,
  AFE_TX_REG6_tx_ana_reg6_OUT,
  AFE_TX_REG7_tx_ana_reg7_OUT,
  AFE_TX_REG8_tx_ana_reg8_OUT,
  AFE_TX_REG9_tx_ana_reg9_OUT,
  AFE_TX_REG10_tx_ana_reg10_OUT,
  AFE_TX_REG11_tx_ana_reg11_OUT,
  AFE_TX_REG12_tx_ana_reg12_OUT,
  AFE_RX_REG0_rx_ana_reg0_OUT,
  AFE_RX_REG1_rx_ana_reg1_OUT,
  AFE_RX_REG2_rx_ana_reg2_OUT,
  AFE_RX_REG3_rx_ana_reg3_OUT,
  AFE_RX_REG4_rx_ana_reg4_OUT,
  AFE_RX_REG5_rx_ana_reg5_OUT,
  AFE_RX_REG6_rx_ana_reg6_OUT,
  AFE_TX_REG13_tx_ana_reg13_IN,
  AFE_TX_REG14_tx_ana_reg14_IN,
  AFE_RX_REG7_rx_ana_reg7_IN,
  AFE_RX_REG8_rx_ana_reg8_IN,
  AFE_UNUSED_REG0_unused_OUT,
  AFE_UNUSED_REG1_unused_OUT,
  PRDATA,
  PADDR,
  PWDATA,
  PWRITE,
  PSELx,
  PENABLE,
  PCLK,
  PRESETn
);
output [7:0]   PRDATA;
input  [7:0]   PADDR;
input  [7:0]   PWDATA;
input          PWRITE;
input          PSELx;
input          PENABLE;
input          PCLK;
input          PRESETn;
output [7:0]   AFE_TX_REG0_tx_ana_reg0_OUT;
output [7:0]   AFE_TX_REG1_tx_ana_reg1_OUT;
output [7:0]   AFE_TX_REG2_tx_ana_reg2_OUT;
output [7:0]   AFE_TX_REG3_tx_ana_reg3_OUT;
output [7:0]   AFE_TX_REG4_tx_ana_reg4_OUT;
output [7:0]   AFE_TX_REG5_tx_ana_reg5_OUT;
output [7:0]   AFE_TX_REG6_tx_ana_reg6_OUT;
output [7:0]   AFE_TX_REG7_tx_ana_reg7_OUT;
output [7:0]   AFE_TX_REG8_tx_ana_reg8_OUT;
output [7:0]   AFE_TX_REG9_tx_ana_reg9_OUT;
output [7:0]   AFE_TX_REG10_tx_ana_reg10_OUT;
output [7:0]   AFE_TX_REG11_tx_ana_reg11_OUT;
output [7:0]   AFE_TX_REG12_tx_ana_reg12_OUT;
output [7:0]   AFE_RX_REG0_rx_ana_reg0_OUT;
output [7:0]   AFE_RX_REG1_rx_ana_reg1_OUT;
output [7:0]   AFE_RX_REG2_rx_ana_reg2_OUT;
output [7:0]   AFE_RX_REG3_rx_ana_reg3_OUT;
output [7:0]   AFE_RX_REG4_rx_ana_reg4_OUT;
output [7:0]   AFE_RX_REG5_rx_ana_reg5_OUT;
output [7:0]   AFE_RX_REG6_rx_ana_reg6_OUT;
input  [7:0]   AFE_TX_REG13_tx_ana_reg13_IN;
input  [7:0]   AFE_TX_REG14_tx_ana_reg14_IN;
input  [7:0]   AFE_RX_REG7_rx_ana_reg7_IN;
input  [7:0]   AFE_RX_REG8_rx_ana_reg8_IN;
output [7:0]   AFE_UNUSED_REG0_unused_OUT;
output [7:0]   AFE_UNUSED_REG1_unused_OUT;
reg [7:0]   PRDATA;
reg [7:0]   AFE_TX_REG0_tx_ana_reg0;
reg [7:0]   AFE_TX_REG1_tx_ana_reg1;
reg [7:0]   AFE_TX_REG2_tx_ana_reg2;
reg [7:0]   AFE_TX_REG3_tx_ana_reg3;
reg [7:0]   AFE_TX_REG4_tx_ana_reg4;
reg [7:0]   AFE_TX_REG5_tx_ana_reg5;
reg [7:0]   AFE_TX_REG6_tx_ana_reg6;
reg [7:0]   AFE_TX_REG7_tx_ana_reg7;
reg [7:0]   AFE_TX_REG8_tx_ana_reg8;
reg [7:0]   AFE_TX_REG9_tx_ana_reg9;
reg [7:0]   AFE_TX_REG10_tx_ana_reg10;
reg [7:0]   AFE_TX_REG11_tx_ana_reg11;
reg [7:0]   AFE_TX_REG12_tx_ana_reg12;
reg [7:0]   AFE_RX_REG0_rx_ana_reg0;
reg [7:0]   AFE_RX_REG1_rx_ana_reg1;
reg [7:0]   AFE_RX_REG2_rx_ana_reg2;
reg [7:0]   AFE_RX_REG3_rx_ana_reg3;
reg [7:0]   AFE_RX_REG4_rx_ana_reg4;
reg [7:0]   AFE_RX_REG5_rx_ana_reg5;
reg [7:0]   AFE_RX_REG6_rx_ana_reg6;
reg [7:0]   AFE_UNUSED_REG0_unused;
reg [7:0]   AFE_UNUSED_REG1_unused;
localparam AFE_TX_REG0_REG_OFFSET = 8'b00000000;
localparam AFE_TX_REG0_tx_ana_reg0_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG1_REG_OFFSET = 8'b00000001;
localparam AFE_TX_REG1_tx_ana_reg1_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG2_REG_OFFSET = 8'b00000010;
localparam AFE_TX_REG2_tx_ana_reg2_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG3_REG_OFFSET = 8'b00000011;
localparam AFE_TX_REG3_tx_ana_reg3_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG4_REG_OFFSET = 8'b00000100;
localparam AFE_TX_REG4_tx_ana_reg4_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG5_REG_OFFSET = 8'b00000101;
localparam AFE_TX_REG5_tx_ana_reg5_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG6_REG_OFFSET = 8'b00000110;
localparam AFE_TX_REG6_tx_ana_reg6_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG7_REG_OFFSET = 8'b00000111;
localparam AFE_TX_REG7_tx_ana_reg7_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG8_REG_OFFSET = 8'b00001000;
localparam AFE_TX_REG8_tx_ana_reg8_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG9_REG_OFFSET = 8'b00001001;
localparam AFE_TX_REG9_tx_ana_reg9_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG10_REG_OFFSET = 8'b00001010;
localparam AFE_TX_REG10_tx_ana_reg10_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG11_REG_OFFSET = 8'b00001011;
localparam AFE_TX_REG11_tx_ana_reg11_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG12_REG_OFFSET = 8'b00001100;
localparam AFE_TX_REG12_tx_ana_reg12_BIT_RESET = 8'b00000000;
localparam AFE_RX_REG0_REG_OFFSET = 8'b00001101;
localparam AFE_RX_REG0_rx_ana_reg0_BIT_RESET = 8'b00000000;
localparam AFE_RX_REG1_REG_OFFSET = 8'b00001110;
localparam AFE_RX_REG1_rx_ana_reg1_BIT_RESET = 8'b00000000;
localparam AFE_RX_REG2_REG_OFFSET = 8'b00001111;
localparam AFE_RX_REG2_rx_ana_reg2_BIT_RESET = 8'b00000000;
localparam AFE_RX_REG3_REG_OFFSET = 8'b00010000;
localparam AFE_RX_REG3_rx_ana_reg3_BIT_RESET = 8'b00000000;
localparam AFE_RX_REG4_REG_OFFSET = 8'b00010001;
localparam AFE_RX_REG4_rx_ana_reg4_BIT_RESET = 8'b00000000;
localparam AFE_RX_REG5_REG_OFFSET = 8'b00010010;
localparam AFE_RX_REG5_rx_ana_reg5_BIT_RESET = 8'b00000000;
localparam AFE_RX_REG6_REG_OFFSET = 8'b00010011;
localparam AFE_RX_REG6_rx_ana_reg6_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG13_REG_OFFSET = 8'b00010100;
localparam AFE_TX_REG13_tx_ana_reg13_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG14_REG_OFFSET = 8'b00010101;
localparam AFE_TX_REG14_tx_ana_reg14_BIT_RESET = 8'b00000000;
localparam AFE_RX_REG7_REG_OFFSET = 8'b00010110;
localparam AFE_RX_REG7_rx_ana_reg7_BIT_RESET = 8'b00000000;
localparam AFE_RX_REG8_REG_OFFSET = 8'b00010111;
localparam AFE_RX_REG8_rx_ana_reg8_BIT_RESET = 8'b00000000;
localparam AFE_UNUSED_REG0_REG_OFFSET = 8'b00011000;
localparam AFE_UNUSED_REG0_unused_BIT_RESET = 8'b00000000;
localparam AFE_UNUSED_REG1_REG_OFFSET = 8'b00011001;
localparam AFE_UNUSED_REG1_unused_BIT_RESET = 8'b00000000;
always @(posedge PCLK or negedge PRESETn)
begin
if(!PRESETn)
  begin
    AFE_TX_REG0_tx_ana_reg0            <= AFE_TX_REG0_tx_ana_reg0_BIT_RESET;
    AFE_TX_REG1_tx_ana_reg1            <= AFE_TX_REG1_tx_ana_reg1_BIT_RESET;
    AFE_TX_REG2_tx_ana_reg2            <= AFE_TX_REG2_tx_ana_reg2_BIT_RESET;
    AFE_TX_REG3_tx_ana_reg3            <= AFE_TX_REG3_tx_ana_reg3_BIT_RESET;
    AFE_TX_REG4_tx_ana_reg4            <= AFE_TX_REG4_tx_ana_reg4_BIT_RESET;
    AFE_TX_REG5_tx_ana_reg5            <= AFE_TX_REG5_tx_ana_reg5_BIT_RESET;
    AFE_TX_REG6_tx_ana_reg6            <= AFE_TX_REG6_tx_ana_reg6_BIT_RESET;
    AFE_TX_REG7_tx_ana_reg7            <= AFE_TX_REG7_tx_ana_reg7_BIT_RESET;
    AFE_TX_REG8_tx_ana_reg8            <= AFE_TX_REG8_tx_ana_reg8_BIT_RESET;
    AFE_TX_REG9_tx_ana_reg9            <= AFE_TX_REG9_tx_ana_reg9_BIT_RESET;
    AFE_TX_REG10_tx_ana_reg10          <= AFE_TX_REG10_tx_ana_reg10_BIT_RESET;
    AFE_TX_REG11_tx_ana_reg11          <= AFE_TX_REG11_tx_ana_reg11_BIT_RESET;
    AFE_TX_REG12_tx_ana_reg12          <= AFE_TX_REG12_tx_ana_reg12_BIT_RESET;
    AFE_RX_REG0_rx_ana_reg0            <= AFE_RX_REG0_rx_ana_reg0_BIT_RESET;
    AFE_RX_REG1_rx_ana_reg1            <= AFE_RX_REG1_rx_ana_reg1_BIT_RESET;
    AFE_RX_REG2_rx_ana_reg2            <= AFE_RX_REG2_rx_ana_reg2_BIT_RESET;
    AFE_RX_REG3_rx_ana_reg3            <= AFE_RX_REG3_rx_ana_reg3_BIT_RESET;
    AFE_RX_REG4_rx_ana_reg4            <= AFE_RX_REG4_rx_ana_reg4_BIT_RESET;
    AFE_RX_REG5_rx_ana_reg5            <= AFE_RX_REG5_rx_ana_reg5_BIT_RESET;
    AFE_RX_REG6_rx_ana_reg6            <= AFE_RX_REG6_rx_ana_reg6_BIT_RESET;
    AFE_UNUSED_REG0_unused             <= AFE_UNUSED_REG0_unused_BIT_RESET;
    AFE_UNUSED_REG1_unused             <= AFE_UNUSED_REG1_unused_BIT_RESET;
  end
else  
  begin
    if ((PSELx == 1'b1) && (PWRITE == 1'b1) )
    begin  
      case (PADDR[7:0])
        AFE_TX_REG0_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_TX_REG0_tx_ana_reg0[7:0] <= PWDATA[7:0];
          end
        AFE_TX_REG1_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_TX_REG1_tx_ana_reg1[7:0] <= PWDATA[7:0];
          end
        AFE_TX_REG2_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_TX_REG2_tx_ana_reg2[7:0] <= PWDATA[7:0];
          end
        AFE_TX_REG3_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_TX_REG3_tx_ana_reg3[7:0] <= PWDATA[7:0];
          end
        AFE_TX_REG4_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_TX_REG4_tx_ana_reg4[7:0] <= PWDATA[7:0];
          end
        AFE_TX_REG5_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_TX_REG5_tx_ana_reg5[7:0] <= PWDATA[7:0];
          end
        AFE_TX_REG6_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_TX_REG6_tx_ana_reg6[7:0] <= PWDATA[7:0];
          end
        AFE_TX_REG7_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_TX_REG7_tx_ana_reg7[7:0] <= PWDATA[7:0];
          end
        AFE_TX_REG8_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_TX_REG8_tx_ana_reg8[7:0] <= PWDATA[7:0];
          end
        AFE_TX_REG9_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_TX_REG9_tx_ana_reg9[7:0] <= PWDATA[7:0];
          end
        AFE_TX_REG10_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_TX_REG10_tx_ana_reg10[7:0] <= PWDATA[7:0];
          end
        AFE_TX_REG11_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_TX_REG11_tx_ana_reg11[7:0] <= PWDATA[7:0];
          end
        AFE_TX_REG12_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_TX_REG12_tx_ana_reg12[7:0] <= PWDATA[7:0];
          end
        AFE_RX_REG0_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_RX_REG0_rx_ana_reg0[7:0] <= PWDATA[7:0];
          end
        AFE_RX_REG1_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_RX_REG1_rx_ana_reg1[7:0] <= PWDATA[7:0];
          end
        AFE_RX_REG2_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_RX_REG2_rx_ana_reg2[7:0] <= PWDATA[7:0];
          end
        AFE_RX_REG3_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_RX_REG3_rx_ana_reg3[7:0] <= PWDATA[7:0];
          end
        AFE_RX_REG4_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_RX_REG4_rx_ana_reg4[7:0] <= PWDATA[7:0];
          end
        AFE_RX_REG5_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_RX_REG5_rx_ana_reg5[7:0] <= PWDATA[7:0];
          end
        AFE_RX_REG6_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_RX_REG6_rx_ana_reg6[7:0] <= PWDATA[7:0];
          end
        AFE_UNUSED_REG0_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_UNUSED_REG0_unused[7:0] <= PWDATA[7:0];
          end
        AFE_UNUSED_REG1_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            AFE_UNUSED_REG1_unused[7:0] <= PWDATA[7:0];
          end
        endcase
    end  
  end  
end  
always @(*)
begin
  PRDATA[7:0] = 8'h0;
    if ((PSELx == 1'b1) && (PWRITE == 1'b0))
    begin
      case (PADDR[7:0])
        AFE_TX_REG0_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_TX_REG0_tx_ana_reg0[7:0];
        end
        AFE_TX_REG1_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_TX_REG1_tx_ana_reg1[7:0];
        end
        AFE_TX_REG2_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_TX_REG2_tx_ana_reg2[7:0];
        end
        AFE_TX_REG3_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_TX_REG3_tx_ana_reg3[7:0];
        end
        AFE_TX_REG4_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_TX_REG4_tx_ana_reg4[7:0];
        end
        AFE_TX_REG5_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_TX_REG5_tx_ana_reg5[7:0];
        end
        AFE_TX_REG6_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_TX_REG6_tx_ana_reg6[7:0];
        end
        AFE_TX_REG7_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_TX_REG7_tx_ana_reg7[7:0];
        end
        AFE_TX_REG8_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_TX_REG8_tx_ana_reg8[7:0];
        end
        AFE_TX_REG9_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_TX_REG9_tx_ana_reg9[7:0];
        end
        AFE_TX_REG10_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_TX_REG10_tx_ana_reg10[7:0];
        end
        AFE_TX_REG11_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_TX_REG11_tx_ana_reg11[7:0];
        end
        AFE_TX_REG12_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_TX_REG12_tx_ana_reg12[7:0];
        end
        AFE_RX_REG0_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_RX_REG0_rx_ana_reg0[7:0];
        end
        AFE_RX_REG1_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_RX_REG1_rx_ana_reg1[7:0];
        end
        AFE_RX_REG2_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_RX_REG2_rx_ana_reg2[7:0];
        end
        AFE_RX_REG3_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_RX_REG3_rx_ana_reg3[7:0];
        end
        AFE_RX_REG4_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_RX_REG4_rx_ana_reg4[7:0];
        end
        AFE_RX_REG5_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_RX_REG5_rx_ana_reg5[7:0];
        end
        AFE_RX_REG6_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_RX_REG6_rx_ana_reg6[7:0];
        end
        AFE_TX_REG13_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_TX_REG13_tx_ana_reg13_IN[7:0];
        end
        AFE_TX_REG14_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_TX_REG14_tx_ana_reg14_IN[7:0];
        end
        AFE_RX_REG7_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_RX_REG7_rx_ana_reg7_IN[7:0];
        end
        AFE_RX_REG8_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_RX_REG8_rx_ana_reg8_IN[7:0];
        end
        AFE_UNUSED_REG0_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_UNUSED_REG0_unused[7:0];
        end
        AFE_UNUSED_REG1_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = AFE_UNUSED_REG1_unused[7:0];
        end
       default:
          PRDATA = 8'h0;
      endcase
    end  
end  
assign AFE_TX_REG0_tx_ana_reg0_OUT[7:0] = AFE_TX_REG0_tx_ana_reg0[7:0];
assign AFE_TX_REG1_tx_ana_reg1_OUT[7:0] = AFE_TX_REG1_tx_ana_reg1[7:0];
assign AFE_TX_REG2_tx_ana_reg2_OUT[7:0] = AFE_TX_REG2_tx_ana_reg2[7:0];
assign AFE_TX_REG3_tx_ana_reg3_OUT[7:0] = AFE_TX_REG3_tx_ana_reg3[7:0];
assign AFE_TX_REG4_tx_ana_reg4_OUT[7:0] = AFE_TX_REG4_tx_ana_reg4[7:0];
assign AFE_TX_REG5_tx_ana_reg5_OUT[7:0] = AFE_TX_REG5_tx_ana_reg5[7:0];
assign AFE_TX_REG6_tx_ana_reg6_OUT[7:0] = AFE_TX_REG6_tx_ana_reg6[7:0];
assign AFE_TX_REG7_tx_ana_reg7_OUT[7:0] = AFE_TX_REG7_tx_ana_reg7[7:0];
assign AFE_TX_REG8_tx_ana_reg8_OUT[7:0] = AFE_TX_REG8_tx_ana_reg8[7:0];
assign AFE_TX_REG9_tx_ana_reg9_OUT[7:0] = AFE_TX_REG9_tx_ana_reg9[7:0];
assign AFE_TX_REG10_tx_ana_reg10_OUT[7:0] = AFE_TX_REG10_tx_ana_reg10[7:0];
assign AFE_TX_REG11_tx_ana_reg11_OUT[7:0] = AFE_TX_REG11_tx_ana_reg11[7:0];
assign AFE_TX_REG12_tx_ana_reg12_OUT[7:0] = AFE_TX_REG12_tx_ana_reg12[7:0];
assign AFE_RX_REG0_rx_ana_reg0_OUT[7:0] = AFE_RX_REG0_rx_ana_reg0[7:0];
assign AFE_RX_REG1_rx_ana_reg1_OUT[7:0] = AFE_RX_REG1_rx_ana_reg1[7:0];
assign AFE_RX_REG2_rx_ana_reg2_OUT[7:0] = AFE_RX_REG2_rx_ana_reg2[7:0];
assign AFE_RX_REG3_rx_ana_reg3_OUT[7:0] = AFE_RX_REG3_rx_ana_reg3[7:0];
assign AFE_RX_REG4_rx_ana_reg4_OUT[7:0] = AFE_RX_REG4_rx_ana_reg4[7:0];
assign AFE_RX_REG5_rx_ana_reg5_OUT[7:0] = AFE_RX_REG5_rx_ana_reg5[7:0];
assign AFE_RX_REG6_rx_ana_reg6_OUT[7:0] = AFE_RX_REG6_rx_ana_reg6[7:0];
assign AFE_UNUSED_REG0_unused_OUT[7:0] = AFE_UNUSED_REG0_unused[7:0];
assign AFE_UNUSED_REG1_unused_OUT[7:0] = AFE_UNUSED_REG1_unused[7:0];
endmodule
`timescale 1ns/1ps
module udc_rx_shift_reg_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r ( 
hs_clock,		 
rstn_hs_clock,		 
shift_reg_soft_reset,	 
hs_mode,		 
rxactive_off,		 
posedge_eop_detected,	 
bitunstuff_data,	 
bitunstuff_data_valid,	 
bit_count,		 
byte_value,		 
byte_valid,		 
error_byte_valid	 
);
input	hs_clock, rstn_hs_clock ;
input	shift_reg_soft_reset, hs_mode, rxactive_off, bitunstuff_data, bitunstuff_data_valid, posedge_eop_detected ;
output		byte_valid, error_byte_valid ;
output	[2:0]	bit_count ;
output	[7:0]	byte_value ;
reg	[2:0]	bit_count ;
reg	[7:0]	shift_reg ;
wire		valid, byte_valid, error_byte_valid, bit_count_reached ;
wire	[7:0]	byte_value ;
assign valid = (bitunstuff_data_valid) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		shift_reg <= 8'd0;
	else if(shift_reg_soft_reset | (hs_mode & posedge_eop_detected) | (~hs_mode & rxactive_off) | byte_valid)
		shift_reg <= 8'd0;
	else if(valid)
		shift_reg <= {bitunstuff_data,shift_reg[7:1]} ;
end
assign bit_count_reached  = (bit_count == 3'd 7) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		bit_count <= 3'd 0;
	else if(shift_reg_soft_reset | (hs_mode & posedge_eop_detected) | (~hs_mode & rxactive_off) | byte_valid)
		bit_count <= 3'd 0;
	else if(valid)
		bit_count <= bit_count + 3'd 1;
end
assign byte_valid       = (bit_count_reached & valid) ;	 
assign error_byte_valid = (bit_count_reached) ;
assign byte_value       = {bitunstuff_data,shift_reg[7:1]};
endmodule
module apb_slave_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
  reg_rdata_mux_out_i,
  PRDATA,
  PSLVERR,
  PREADY,
  PWRITE,
  PSELx,
  PENABLE,
  PCLK,
  PRESETn
);
input [7:0]    reg_rdata_mux_out_i;
output [7:0]    PRDATA;
output          PSLVERR;
output          PREADY;
input           PWRITE;
input           PSELx;
input           PENABLE;
input           PCLK;
input           PRESETn;
reg [7:0]       PRDATA_REG;
reg             PREADY_REG;
always @(posedge PCLK or negedge PRESETn)
begin
if(!PRESETn)
  begin
    PRDATA_REG                         <= 8'd0;
    PREADY_REG                         <= 1'b0;
  end
else  
  begin
    PREADY_REG <= PSELx;   
    if ((PSELx == 1'b1) && (PWRITE == 1'b0))
      PRDATA_REG            <= reg_rdata_mux_out_i;
  end  
end  
assign PRDATA = PRDATA_REG;
assign PSLVERR = 1'b0;
assign PREADY = PREADY_REG;
endmodule
module squelch_filter_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
output reg  o_ana_ted_squelch,
input       i_ana_ted_squelch, 
input       i_ted_calib_done,  
input       i_ted_en,
input       i_calib_clk,
input       i_calib_rstb,
input [2:0] i_tm_squelch
);
reg        r_sql_del_done, r_ted_en_sync_del, r_sql_cnt_en;
reg  [7:0] r_sql_del_cnt, r_ted_del;
wire [7:0] r_20us_val, r_5us_val, r_10us_val, r_15us_val;
wire       pos_ted_en, ted_en_sync;
wire [1:0] w_del_sel;
parameter RESET_ZERO = 1'b0;
   assign w_del_en = i_tm_squelch[0];	 
   assign w_del_sel = i_tm_squelch[2:1];
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(RESET_ZERO)) c_ted_en_sync (
.clock  	      (i_calib_clk) ,
.reset_n      (i_calib_rstb) ,
.d_in	      (i_ted_en) ,
.d_out  	      (ted_en_sync)
);
always @(*)
begin
  if(i_ted_calib_done)
    if(i_ted_en && r_sql_del_done)
      o_ana_ted_squelch = i_ana_ted_squelch;
    else
      o_ana_ted_squelch = 1'b1;
  else
    o_ana_ted_squelch = 1'b1;
end
always @(posedge i_calib_clk or negedge i_calib_rstb)
if(~i_calib_rstb)
begin
  r_ted_en_sync_del 	<= 1'b0;
  r_sql_cnt_en 		<= 1'b0;
  r_sql_del_cnt 	<= 8'd0;
  r_sql_del_done 	<= 1'b0;
end
else
begin
  r_ted_en_sync_del <= ted_en_sync ;
  if(pos_ted_en)
    r_sql_cnt_en <= 1'b1;
  if(r_sql_cnt_en && (r_sql_del_cnt < r_ted_del))
    r_sql_del_cnt <= r_sql_del_cnt + 1'b1;
  if(r_sql_del_cnt == r_ted_del )
    r_sql_del_done <= 1'b1;
end
assign pos_ted_en = ted_en_sync & !r_ted_en_sync_del ;
assign r_5us_val = 8'd3;
assign r_10us_val = 8'd8;
assign r_15us_val = 8'd13;
assign r_20us_val = 8'd18;
always @(*)
begin
  if(w_del_en)
  begin
    if(w_del_sel == 2'b00)
      r_ted_del = r_5us_val;
    else if(w_del_sel == 2'b01)
      r_ted_del = r_10us_val;
    else if(w_del_sel == 2'b10)
      r_ted_del = r_15us_val;
    else
      r_ted_del = r_20us_val;
  end
  else
    r_ted_del = r_5us_val;
end          
endmodule
`timescale 1ns/1ps
module udc_rx_sync_det_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r ( 
hs_clock,			 
rstn_hs_clock,			 
sync_det_soft_reset,	 
hs_mode,		 
test_hs_sync_conf,	 
lsfs_dll_se0,		 
rxactive,		 
negedge_squelch,	 
i_bist_on,
rx_data,		 
rx_data_valid,		 
sync_detected		 
);
input	hs_clock, rstn_hs_clock ;
input	sync_det_soft_reset, hs_mode, test_hs_sync_conf, lsfs_dll_se0, rxactive, negedge_squelch ;
input	rx_data, rx_data_valid, i_bist_on ;
output	sync_detected ;
wire		negedge_rxactive, sync_detected, sync_detected_rst, rx_data_valid_loc ;
reg		sync_detected_d, rxactive_d ;
reg	[4:0]	shift_reg ;
assign rx_data_valid_loc = hs_mode ? rx_data_valid : (lsfs_dll_se0 ? 1'b 0 : rx_data_valid) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		shift_reg <= 5'h 1F ;
	else if(sync_det_soft_reset | sync_detected_rst | (~hs_mode & lsfs_dll_se0))
		shift_reg <= 5'h 1F ;
	else if(rx_data_valid_loc)
		shift_reg <= {shift_reg[3:0],rx_data} ;
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		rxactive_d <= 1'b 0 ;
	else 
		rxactive_d <= rxactive ;
end
assign negedge_rxactive = (~rxactive & rxactive_d) ;
assign sync_detected_rst = (sync_det_soft_reset | i_bist_on |(hs_mode ? negedge_squelch : negedge_rxactive)) ;
assign sync_detected = (sync_detected_rst ? 1'b 0 :
			((~sync_detected_d & rx_data_valid_loc) ?
				(test_hs_sync_conf ? 
					(shift_reg[2:0] == 3'b 010 & ~rx_data) : 
					(shift_reg[4:0] == 5'b 01010 & ~rx_data)) :
			sync_detected_d)) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		sync_detected_d <= 1'b 0 ;
	else 
		sync_detected_d <= sync_detected ;
end
endmodule
module async_apb_if_mst_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r 
#( 
   parameter
      ADDR_WIDTH = 16,
      DATA_WIDTH = 16
)(   
   input                       mst_clk,
   input                       mst_reset_n,
   input                       mst_req,
   output                      mst_ack,
   input      [ADDR_WIDTH-1:0] mst_addr,
   input                       mst_write,
   input      [DATA_WIDTH-1:0] mst_wdata,
   output reg [DATA_WIDTH-1:0] mst_rdata,
   output                      async_apb_req,
   output     [ADDR_WIDTH-1:0] async_apb_paddr,
   output                      async_apb_pwrite,
   output     [DATA_WIDTH-1:0] async_apb_pwdata,
   input      [DATA_WIDTH-1:0] async_apb_prdata,
   input                       async_apb_ack
);            
   async_ctrl_if_mst_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r u_async_ctrl_if_mst (
      .clock     (mst_clk),
      .reset_n   (mst_reset_n),
      .sync_req  (mst_req),
      .sync_ack  (mst_ack),
      .async_req (async_apb_req),
      .async_ack (async_apb_ack)
   );
   assign  async_apb_paddr  = mst_addr;
   assign  async_apb_pwrite = mst_write;
   assign  async_apb_pwdata = mst_wdata;
   always @(posedge mst_clk or negedge mst_reset_n)
   begin
      if (!mst_reset_n)
         mst_rdata <= {DATA_WIDTH{1'b0}};
      else
      begin
         if (mst_ack)
            mst_rdata <= async_apb_prdata;
         else 
            mst_rdata <= mst_rdata;
      end
   end
endmodule
module tap_complex_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
   input  tap_tdi,
   input  tap_tck,
   input  tap_tms,
   input  tap_trst_n,
   output tap_tdo,
   output tap_tdoen,
   input tx_bscan_tdo,
   output rx_bscan_tdi,
   output rx_bscan_clockdr  ,
   output tx_bscan_clockdr  ,
   output rx_bscan_shiftdr  ,
   output tx_bscan_shiftdr  ,
   output tx_bscan_updatedr ,
   output tx_bscan_mode_c   ,
   output tx_bscan_ac       ,
   output rx_bscan_ac       ,
   output rx_bscan_pc       ,
   output tx_bscan_acpulse  ,
   input   [7:0] async_apb_prdata,
   input          async_apb_ack,
   output         async_apb_req, 
   output  [7:0] async_apb_paddr, 
   output         async_apb_pwrite,
   output  [7:0] async_apb_pwdata,
   output  diag_apb_preset_n,       
   output  macro_isolation_mode_sel,
   output  macro_isolation_mode_en,
   input scanmode,
   input scanen,
   input scanen_cg,
   output JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_1,      
   output JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_2,      
   output JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_3,      
   output JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_4,      
   output JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_5,      
   output JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_6,      
   output JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_7,      
   output JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_8,      
   output JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_9,      
   output JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_10
);
  wire  [1:0]  custom_reg_1_out;
  wire  [1:0]  custom_reg_1_in;
  wire  [7:0] custom_reg_2_out;
  wire  [7:0] custom_reg_2_in;
  wire  [7:0] custom_reg_3_out;
  wire  [7:0] custom_reg_3_in;
  wire  [7:0] custom_reg_4_in;
  wire  [2:0]  custom_reg_5_out;
  wire  [2:0]  custom_reg_5_in;
  wire JTAG_BOUNDARY_CLOCKDR;
  wire JTAG_BOUNDARY_SHIFTDR;
  wire JTAG_BOUNDARY_UPDATEDR;
  wire JTAG_INSTRUCTION_DECODE_MODE_C;
  wire JTAG_INSTRUCTION_DECODE_HIGHZ;
  wire JTAG_ACDCSEL;
  wire JTAG_ACPSCLK;
  wire JTAG_ACPULSE;
  assign rx_bscan_clockdr  = JTAG_BOUNDARY_CLOCKDR;
  assign tx_bscan_clockdr  = JTAG_BOUNDARY_CLOCKDR;
  assign rx_bscan_shiftdr  = JTAG_BOUNDARY_SHIFTDR;
  assign tx_bscan_shiftdr  = JTAG_BOUNDARY_SHIFTDR;
  assign tx_bscan_updatedr = JTAG_BOUNDARY_UPDATEDR;
  assign tx_bscan_mode_c   = JTAG_INSTRUCTION_DECODE_MODE_C;
  assign tx_bscan_highz    = JTAG_INSTRUCTION_DECODE_HIGHZ;
  assign tx_bscan_ac       = JTAG_ACDCSEL;
  assign rx_bscan_ac       = JTAG_ACDCSEL;
  assign rx_bscan_pc       = JTAG_ACPSCLK;
  assign tx_bscan_acpulse  = JTAG_ACPULSE;
  assign rx_bscan_tdi = tap_tdi;
  assign JTAG_BOUNDARY_TDO = tx_bscan_tdo;
   JTAG_MACRO_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r u_JTAG_MACRO (
       .JTAG_SE                                      (scanen),
       .JTAG_SE_CG                                   (scanen_cg),
       .JTAG_TEST_CLOCK                              (tap_tck),
       .JTAG_TEST_ENABLE                             (scanmode),
       .JTAG_IOTEST                                  (1'b0),
       .JTAG_TDI                                     (tap_tdi), 
       .JTAG_TMS                                     (tap_tms), 
       .JTAG_TCK                                     (tap_tck), 
       .JTAG_TRST                                    (tap_trst_n),
       .JTAG_BOUNDARY_TDO                            (JTAG_BOUNDARY_TDO), 
       .JTAG_INSTR_CAPTURE_2                         (1'b0),
       .JTAG_INSTR_CAPTURE_3                         (1'b0),
       .JTAG_CUSTOM_REG_1_TDO                        (JTAG_CUSTOM_REG_1_TDO),
       .JTAG_CUSTOM_REG_2_TDO                        (JTAG_CUSTOM_REG_2_TDO),
       .JTAG_CUSTOM_REG_3_TDO                        (JTAG_CUSTOM_REG_3_TDO),
       .JTAG_CUSTOM_REG_4_TDO                        (JTAG_CUSTOM_REG_4_TDO),
       .JTAG_CUSTOM_REG_5_TDO                        (JTAG_CUSTOM_REG_5_TDO),
       .JTAG_CUSTOM_REG_6_TDO                        (1'b0),
       .JTAG_CUSTOM_REG_7_TDO                        (1'b0),
       .JTAG_CUSTOM_REG_8_TDO                        (1'b0),
       .JTAG_CUSTOM_REG_9_TDO                        (1'b0),
       .JTAG_CUSTOM_REG_10_TDO                       (1'b0),
       .JTAG_RESET                                   (),
       .JTAG_SHIFTDR                                 (JTAG_SHIFTDR),
       .JTAG_SHIFTDR_STATE                           (),
       .JTAG_BOUNDARY_SHIFTDR                        (JTAG_BOUNDARY_SHIFTDR), 
       .JTAG_RUNIDLE                                 (),
       .JTAG_RESET_STATE                             (),
       .JTAG_CAPTUREDR_STATE                         (JTAG_CAPTUREDR_STATE),
       .JTAG_UPDATEDR_STATE                          (),
       .JTAG_TDO                                     (tap_tdo), 
       .JTAG_ENABLE_TDO                              (tap_tdoen), 
       .JTAG_CLOCKDR                                 (JTAG_CLOCKDR),
       .JTAG_BOUNDARY_CLOCKDR                        (JTAG_BOUNDARY_CLOCKDR), 
       .JTAG_INSTRUCTION_DECODE_MODE_A               (),
       .JTAG_INSTRUCTION_DECODE_MODE_B               (),
       .JTAG_INSTRUCTION_DECODE_MODE_C               (JTAG_INSTRUCTION_DECODE_MODE_C), 
       .JTAG_INSTRUCTION_DECODE_CTRL_HIGHZ           (JTAG_INSTRUCTION_DECODE_HIGHZ),
       .JTAG_INSTRUCTION_DECODE_INCTRL               (),
       .JTAG_BOUNDARY_UPDATEDR                       (JTAG_BOUNDARY_UPDATEDR), 
       .JTAG_UPDATEDR                                (JTAG_UPDATEDR),
       .JTAG_INSTRUCTION_DECODE_EXTEST               (),
       .JTAG_INSTRUCTION_DECODE_SAMPLE               (),
       .JTAG_INSTRUCTION_DECODE_PRELOAD              (),
       .JTAG_INSTRUCTION_DECODE_EXTEST_TRAIN         (),
       .JTAG_INSTRUCTION_DECODE_EXTEST_PULSE         (),
       .JTAG_INSTRUCTION_DECODE_BYPASS               (),
       .JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_1       (JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_1),
       .JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_2       (JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_2),
       .JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_3       (JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_3),
       .JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_4       (JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_4),
       .JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_5       (JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_5),
       .JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_6       (JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_6),
       .JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_7       (JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_7),
       .JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_8       (JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_8),
       .JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_9       (JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_9),
       .JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_10      (JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_10),
       .JTAG_TDR_BOUNDARY                            (),
       .JTAG_TDR_BYPASS                              (),
       .JTAG_TDR_CUSTOM_REG_10                       (),
       .JTAG_TDR_CUSTOM_REG_1                        (),
       .JTAG_TDR_CUSTOM_REG_9                        (),
       .JTAG_TDR_CUSTOM_REG_5                        (),
       .JTAG_TDR_CUSTOM_REG_6                        (),
       .JTAG_TDR_CUSTOM_REG_2                        (),
       .JTAG_TDR_CUSTOM_REG_7                        (),
       .JTAG_TDR_CUSTOM_REG_3                        (),
       .JTAG_TDR_CUSTOM_REG_8                        (),
       .JTAG_TDR_CUSTOM_REG_4                        (),
       .JTAG_ACTRENBL                                (),
       .JTAG_ACDCSEL                                 (JTAG_ACDCSEL), 
       .JTAG_ACPSCLK                                 (JTAG_ACPSCLK), 
       .JTAG_ACPULSE                                 (JTAG_ACPULSE), 
       .JTAG_ACPSEN                                  ()
       );
    tap_custom_reg_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r 
     #(
        .WIDTH (2),
        .RESET_VALUE (2'b10)
      )
    u_diagnostic_ctrl_reg  
     (
       .pdo            (custom_reg_1_out[1:0]),
       .sdo            (JTAG_CUSTOM_REG_1_TDO),
       .pdi            (custom_reg_1_in),
       .sdi            (tap_tdi),
       .clockdr        (JTAG_CLOCKDR),
       .shiftdr        (JTAG_SHIFTDR),
       .updatedr       (JTAG_UPDATEDR),
       .capturedr      (JTAG_CAPTUREDR_STATE),
       .enable         (JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_1),
       .reset_n        (tap_trst_n)
     );
    assign diag_apb_preset_n        = scanmode ? 1'b1 : custom_reg_1_out[1];
    assign macro_isolation_mode_sel = scanmode ? 1'b0 : ~custom_reg_1_out[0];
    assign macro_isolation_mode_en  = scanmode ? 1'b0 : custom_reg_1_out[0];
    assign custom_reg_1_in[1]       = custom_reg_1_out[1];
    assign custom_reg_1_in[0]       = custom_reg_1_out[0];
    tap_custom_reg_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r 
     #(
        .WIDTH(8),
        .RESET_VALUE (8'h00)
      )
    u_diagnostic_apb_access_address_reg  
     (
       .pdo            (custom_reg_2_out[7:0]), 
       .sdo            (JTAG_CUSTOM_REG_2_TDO),
       .pdi            (custom_reg_2_in[7:0]),
       .sdi            (tap_tdi),
       .clockdr        (JTAG_CLOCKDR),
       .shiftdr        (JTAG_SHIFTDR),
       .updatedr       (JTAG_UPDATEDR),
       .capturedr      (JTAG_CAPTUREDR_STATE),
       .enable         (JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_2),
       .reset_n        (tap_trst_n)
     );
    assign custom_reg_2_in[7:0]     =      custom_reg_2_out[7:0];
    tap_custom_reg_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r 
     #(
        .WIDTH(8),
        .RESET_VALUE (8'h00)
      )
    u_diagnostic_apb_access_wr_data_reg  
     (
       .pdo            (custom_reg_3_out[7:0]), 
       .sdo            (JTAG_CUSTOM_REG_3_TDO),
       .pdi            (custom_reg_3_in[7:0]),
       .sdi            (tap_tdi),
       .clockdr        (JTAG_CLOCKDR),
       .shiftdr        (JTAG_SHIFTDR),
       .updatedr       (JTAG_UPDATEDR),
       .capturedr      (JTAG_CAPTUREDR_STATE),
       .enable         (JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_3),
       .reset_n        (tap_trst_n)
     );
    assign custom_reg_3_in[7:0]     =      custom_reg_3_out[7:0];
    tap_custom_reg_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r 
     #(
        .WIDTH(8),
        .RESET_VALUE (8'h00)
      )
    u_diagnostic_apb_access_rd_data_reg  
     (
       .pdo            (), 
       .sdo            (JTAG_CUSTOM_REG_4_TDO),
       .pdi            (custom_reg_4_in[7:0]),
       .sdi            (tap_tdi),
       .clockdr        (JTAG_CLOCKDR),
       .shiftdr        (JTAG_SHIFTDR),
       .updatedr       (JTAG_UPDATEDR),
       .capturedr      (JTAG_CAPTUREDR_STATE),
       .enable         (JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_4),
       .reset_n        (tap_trst_n)
     );
    tap_custom_reg_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r 
     #(
        .WIDTH(3),
        .RESET_VALUE (3'h0)
      )
    u_diagnostic_apb_access_control_reg  
     (
       .pdo            (custom_reg_5_out[2:0]), 
       .sdo            (JTAG_CUSTOM_REG_5_TDO),
       .pdi            (custom_reg_5_in[2:0]),
       .sdi            (tap_tdi),
       .clockdr        (JTAG_CLOCKDR),
       .shiftdr        (JTAG_SHIFTDR),
       .updatedr       (JTAG_UPDATEDR),
       .capturedr      (JTAG_CAPTUREDR_STATE),
       .enable         (JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_5),
       .reset_n        (tap_trst_n)
     );
    assign custom_reg_5_in[1]     =      custom_reg_5_out[1];
    assign custom_reg_5_in[2]     =      custom_reg_5_out[2];
   reset_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(
      .NUM_FLOPS (2)
   ) u_reset_sync_clk_div2 (
      .sync_clock_in       (tap_tck),
      .reset_in_n          (tap_trst_n),
      .reset_out_n         (tap_trst_n_synched), 
      .upstream_reset_in_n (1'b1),
      .scan_mode_en_in     (scanmode),
      .scan_reset_in_n     (tap_trst_n)
   );
  async_apb_if_mst_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r 
  #( 
      .ADDR_WIDTH(8),
      .DATA_WIDTH(8)
  ) u_async_apb_if_mst (   
    .mst_clk         (tap_tck),
    .mst_reset_n     (tap_trst_n_synched),
    .mst_req         (custom_reg_5_out[1]),
    .mst_write       (custom_reg_5_out[2]),
    .mst_addr        (custom_reg_2_out[7:0]),
    .mst_wdata       (custom_reg_3_out[7:0]),
    .mst_rdata       (custom_reg_4_in[7:0]),
    .mst_ack         (custom_reg_5_in[0]),
    .async_apb_prdata   (async_apb_prdata), 
    .async_apb_ack      (async_apb_ack), 
    .async_apb_req      (async_apb_req),
    .async_apb_paddr    (async_apb_paddr),
    .async_apb_pwrite   (async_apb_pwrite),
    .async_apb_pwdata   (async_apb_pwdata)
);
endmodule
`timescale 1ns/1ps
module udc_rx_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r ( 
afe_hsrx_rec_clk,	 
rstn_eb_async,		 
hs_clock,		 
rstn_hs_clock,		 
byte_clock,		 
rstn_byte_clock,	 
sieclock,		 
rstn_sieclock,		 
rx_hs_soft_reset,	 
lsfs_dll_soft_reset,	 
sync_det_soft_reset,	 
eop_det_soft_reset,	 
nrzi_dec_soft_reset,	 
bitunstuff_soft_reset,	 
shift_reg_soft_reset,	 
rx_cntrl_soft_reset,	 
test_hs_sync_conf,	 
test_fs_eop_se0_en,	 
test_ls_eop_se0_en,	 
test_eop_se0_fs,	 
test_eop_se0_ls,	 
test_timeout_all_enable, 
test_timeout_enable,	 
test_timeout_value,	 
test_hs_rx_err_reg,
fslsserialmode_sync,	 
squelch,		 
i_ted_squelch_ana,	 
hs_mode,		 
ls_mode,		 
fs_mode,		 
fs_mode_pre,		 
databus,		 
txvalid,		 
lsfs_transmit,		 
loopback_lsfs,		 
i_bist_on,
afe_hsrx_rec_data,	 
afe_hsrx_rec_data_valid, 
afe_hsrx_decision_error, 
afe_lsfsrx_ana,		 
afe_rxdp_ana,		 
afe_rxdm_ana,		 
se0_detected,		 
set1_dis,                
eb_reset_wr_ind,	 
rxactive,		 
rxvalid,		 
rxvalidh,		 
rxerror,		 
dataout,		 
hs_eb_data ,
hs_eb_data_valid ,
debug_eb_error,
debug_cdr_error,
debug_sync_detected,
debug_eop_detected,
debug_hs_eop_condition,
debug_normal_eop,
debug_alignment_error,
debug_no_eop,
debug_hs_eop_detected,
debug_se0_validated,
debug_lsfs_eop_detected,
debug_bitunstuff_error,
debug_bus_state,
debug_phy_cnt,
debug_sie_cnt,
debug_start_flag,
debug_rxactive_reg,
debug_deassert_rxactive_reg
);
input		afe_hsrx_rec_clk, rstn_eb_async, hs_clock, rstn_hs_clock, byte_clock, rstn_byte_clock, sieclock, i_ted_squelch_ana,
		rstn_sieclock, se0_detected, test_hs_rx_err_reg, i_bist_on ;
input		rx_hs_soft_reset, lsfs_dll_soft_reset, sync_det_soft_reset, eop_det_soft_reset, nrzi_dec_soft_reset,
		bitunstuff_soft_reset, shift_reg_soft_reset, rx_cntrl_soft_reset, squelch, hs_mode, ls_mode, fs_mode, 
		fs_mode_pre, databus, txvalid, test_hs_sync_conf, loopback_lsfs, test_timeout_all_enable, test_timeout_enable, 
		lsfs_transmit, test_fs_eop_se0_en, test_ls_eop_se0_en, fslsserialmode_sync ;
input		afe_hsrx_rec_data, afe_hsrx_rec_data_valid, afe_hsrx_decision_error ; 
input		afe_lsfsrx_ana, afe_rxdp_ana, afe_rxdm_ana ;
input	[1:0]	test_eop_se0_fs ;
input	[2:0]	test_timeout_value ;
input	[5:0]	test_eop_se0_ls ;
input       	set1_dis;
output		rxactive, rxvalid, rxvalidh, rxerror, eb_reset_wr_ind ;
output	[15:0]	dataout ;
output		debug_eb_error ;
output		debug_cdr_error ;
output		debug_sync_detected ;
output		debug_eop_detected ;
output		debug_normal_eop ;
output		debug_alignment_error ;
output		debug_hs_eop_detected ;
output		debug_se0_validated ;
output		debug_lsfs_eop_detected ;
output		debug_bitunstuff_error ;
output	[2:0]	debug_bus_state ;
output	[11:0]	debug_phy_cnt ;
output	[11:0]	debug_sie_cnt ;
output		debug_start_flag ;
output		debug_rxactive_reg ;
output		debug_deassert_rxactive_reg ;
output		hs_eb_data ;
output		hs_eb_data_valid ;
output		debug_no_eop ;
output		debug_hs_eop_condition ;
wire		sync_detected, eop_detected, no_eop_detected, rx_data, rx_data_valid, cdr_error, alignment_error, hs_eb_empty,
		bitunstuff_error, rxdp_dly3, rxdm_dly3, rxactive_off, rx_nrzi_dec_data, hs_eb_data,
		hs_eb_data_valid, lsfs_dll_data, lsfs_dll_data_valid, bitunstuff_flag, bitunstuff_data_valid,
		bitunstuff_data, byte_valid, error_byte_valid, lsfs_dll_en, negedge_squelch, bitunstuff_en,
		nrzi_dec_en, eb_reset_wr_ind, posedge_eop_detected, hs_rxactive_off, lsfs_dll_se0 ;
wire	[2:0]	bit_count ;
wire	[7:0]	byte_value ;
wire		rxactive_reg, eop_det ;
wire		debug_eb_error ;
wire		debug_cdr_error ;
wire 		debug_sync_detected ;
wire		debug_eop_detected ;
wire		debug_hs_eop_condition ;
wire		debug_normal_eop ;
wire		debug_alignment_error ;
wire		debug_no_eop ;
wire		debug_hs_eop_detected ;
wire		debug_se0_validated ;
wire		debug_lsfs_eop_detected ;
wire		debug_bitunstuff_error ;
wire	[2:0]	debug_bus_state ;
wire	[11:0]	debug_phy_cnt ;
wire	[11:0]	debug_sie_cnt ;
wire		debug_start_flag ;
wire		debug_rxactive_reg ;
wire		debug_deassert_rxactive_reg ;
assign debug_cdr_error = cdr_error ;
assign debug_sync_detected = sync_detected ;
assign debug_eop_detected = eop_detected ;
assign debug_alignment_error = alignment_error ;
assign debug_bitunstuff_error = bitunstuff_error ;
assign debug_rxactive_reg = rxactive_reg ;
assign eop_det = eop_detected | no_eop_detected;
udc_rx_hs_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r	 		c_udc_rx_hs ( 
.rec_clock			(afe_hsrx_rec_clk),	 
.rstn_eb_async			(rstn_eb_async),	 
.hs_clock			(hs_clock),		 
.rstn_hs_clock			(rstn_hs_clock),	 
.rxerror_ack                    (rxerror_ack),
.test_hs_rx_err_reg             (test_hs_rx_err_reg),
.hs_cdr_data			(afe_hsrx_rec_data),	 
.hs_cdr_data_valid		(afe_hsrx_rec_data_valid), 
.hs_cdr_decision_error		(afe_hsrx_decision_error), 
.rx_hs_soft_reset		(rx_hs_soft_reset),	 
.hs_mode			(hs_mode),		 
.squelch			(squelch),		 
.i_ted_squelch_ana		(i_ted_squelch_ana),	 
.eop_detected			(eop_det),		 
.set1_dis			(set1_dis),		 
.reset_wr_ind			(eb_reset_wr_ind),	 
.negedge_squelch		(negedge_squelch),	 
.cdr_error			(cdr_error),		 
.hs_eb_data			(hs_eb_data),		 
.hs_eb_data_valid		(hs_eb_data_valid),	 
.hs_eb_empty			(hs_eb_empty),		 
.debug_eb_error			(debug_eb_error)
);
udc_rx_lsfs_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r	 		c_udc_rx_lsfs ( 
.byte_clock			(byte_clock),		 
.rstn_byte_clock		(rstn_byte_clock),	 
.lsfs_dll_soft_reset		(lsfs_dll_soft_reset),	 
.lsfs_dll_en			(lsfs_dll_en),		 
.txvalid			(txvalid),		 
.lsfs_transmit                  (lsfs_transmit),         
.loopback_lsfs			(loopback_lsfs),	 
.ls_mode			(ls_mode),		 
.fs_mode_pre			(fs_mode_pre),		 
.se0_detected			(se0_detected),
.afe_lsfsrx_ana			(afe_lsfsrx_ana),	 
.afe_rxdp_ana			(afe_rxdp_ana),		 
.afe_rxdm_ana			(afe_rxdm_ana),		 
.lsfs_dll_se0			(lsfs_dll_se0),		 
.lsfs_dll_data			(lsfs_dll_data),	 
.lsfs_dll_data_valid		(lsfs_dll_data_valid),	 
.rxdp_dly3			(rxdp_dly3),		 
.rxdm_dly3			(rxdm_dly3)		 
);
udc_rx_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r	 		c_udc_rx_mux ( 
.hs_clock			(hs_clock),		 
.rstn_hs_clock			(rstn_hs_clock),	 
.hs_mode			(hs_mode),		 
.lsfs_dll_data			(lsfs_dll_data),	 
.lsfs_dll_data_valid		(lsfs_dll_data_valid),	 
.lsfs_dll_se0			(lsfs_dll_se0),		 
.hs_eb_data			(hs_eb_data),		 
.hs_eb_data_valid		(hs_eb_data_valid),	 
.rx_data			(rx_data),		 
.rx_data_valid			(rx_data_valid)		 
);
udc_rx_sync_det_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r 		c_udc_rx_sync_det ( 
.hs_clock			(hs_clock),		 
.rstn_hs_clock			(rstn_hs_clock),	 
.sync_det_soft_reset		(sync_det_soft_reset),	 
.hs_mode			(hs_mode),		 
.test_hs_sync_conf		(test_hs_sync_conf),	 
.lsfs_dll_se0			(lsfs_dll_se0),		 
.negedge_squelch		(negedge_squelch),	 
.rxactive			(rxactive),		 
.i_bist_on                      (i_bist_on),
.rx_data			(rx_data),		 
.rx_data_valid			(rx_data_valid),	 
.sync_detected			(sync_detected)		 
);
udc_rx_eop_det_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r	 		c_udc_rx_eop_det ( 
.hs_clock			(hs_clock),		 
.rstn_hs_clock			(rstn_hs_clock),	 
.byte_clock			(byte_clock),		 
.rstn_byte_clock		(rstn_byte_clock),	 
.eop_det_soft_reset		(eop_det_soft_reset),	 
.test_fs_eop_se0_en		(test_fs_eop_se0_en),	 
.test_ls_eop_se0_en		(test_ls_eop_se0_en),	 
.test_eop_se0_fs		(test_eop_se0_fs),	 
.test_eop_se0_ls		(test_eop_se0_ls),	 
.test_timeout_all_enable	(test_timeout_all_enable), 
.test_timeout_enable		(test_timeout_enable),	 
.test_timeout_value		(test_timeout_value),	 
.rxactive			(rxactive_reg),		 
.hs_mode			(hs_mode),		 
.fs_mode			(fs_mode),		 
.ls_mode			(ls_mode),		 
.fs_mode_pre			(fs_mode_pre),		 
.squelch			(squelch),		 
.cdr_eb_empty			(hs_eb_empty),		 
.cdr_error			(cdr_error),		 
.bitunstuff_error		(bitunstuff_error),	 
.alignment_error		(alignment_error),	 
.rxdp_dly3			(rxdp_dly3),		 
.rxdm_dly3			(rxdm_dly3),		 
.lsfs_dll_se0			(lsfs_dll_se0),		 
.rxactive_off			(rxactive_off),		 
.hs_rxactive_off		(hs_rxactive_off),	 
.eop_detected			(eop_detected),		 
.no_eop_detected		(no_eop_detected),	 
.debug_hs_eop_condition		(debug_hs_eop_condition),
.debug_normal_eop		(debug_normal_eop),
.debug_no_eop			(debug_no_eop),
.debug_hs_eop_detected		(debug_hs_eop_detected),
.debug_se0_validated		(debug_se0_validated),
.debug_lsfs_eop_detected	(debug_lsfs_eop_detected)
);
assign nrzi_dec_en = fslsserialmode_sync ? 1'b 0 : (hs_mode ? 1'b 1 : ~lsfs_dll_se0) ;
udc_rx_nrzi_dec_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r	 		c_udc_rx_nrzi_dec ( 
.hs_clock			(hs_clock),		 
.rstn_hs_clock			(rstn_hs_clock),	 
.nrzi_dec_soft_reset		(nrzi_dec_soft_reset),	 
.nrzi_dec_en			(nrzi_dec_en),		 
.hs_mode			(hs_mode),		 
.rxactive_off			(hs_rxactive_off),	 
.posedge_eop_detected		(posedge_eop_detected),	 
.rx_data			(rx_data),		 
.rx_data_valid			(rx_data_valid),	 
.rx_nrzi_dec_data		(rx_nrzi_dec_data)	 
);
assign bitunstuff_en = fslsserialmode_sync ? 1'b 0 : (hs_mode ? 1'b 1 : ~lsfs_dll_se0) ;
udc_rx_bitunstuff_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r	 	c_udc_rx_bitunstuff ( 
.hs_clock			(hs_clock),		 
.rstn_hs_clock			(rstn_hs_clock),	 
.bitunstuff_soft_reset		(bitunstuff_soft_reset), 
.bitunstuff_en			(bitunstuff_en),	 
.hs_mode			(hs_mode),		 
.rxactive_off			(hs_rxactive_off),	 
.sync_detected			(sync_detected),	 
.eop_detected			(eop_det),		 
.rx_nrzi_dec_data		(rx_nrzi_dec_data),	 
.rx_data_valid			(rx_data_valid),	 
.posedge_eop_detected		(posedge_eop_detected),	 
.bitunstuff_flag		(bitunstuff_flag),	 
.bitunstuff_error		(bitunstuff_error),	 
.bitunstuff_data		(bitunstuff_data),	 
.bitunstuff_data_valid		(bitunstuff_data_valid),	 
.debug_bus_state		(debug_bus_state)
);
udc_rx_shift_reg_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r	 	c_udc_rx_shift_reg ( 
.hs_clock			(hs_clock),		 
.rstn_hs_clock			(rstn_hs_clock),	 
.shift_reg_soft_reset		(shift_reg_soft_reset),	 
.hs_mode			(hs_mode),		 
.rxactive_off			(hs_rxactive_off),	 
.posedge_eop_detected		(posedge_eop_detected),	 
.bitunstuff_data		(bitunstuff_data),	 
.bitunstuff_data_valid		(bitunstuff_data_valid), 
.bit_count			(bit_count),		 
.byte_value			(byte_value),		 
.byte_valid			(byte_valid),		 
.error_byte_valid		(error_byte_valid)	 
);
udc_rx_cntrl_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r 			c_udc_rx_cntrl ( 
.hs_clock			(hs_clock),		 
.rstn_hs_clock			(rstn_hs_clock),	 
.sieclock			(sieclock),		 
.rstn_sieclock			(rstn_sieclock),	 
.test_hs_rx_err_reg             (test_hs_rx_err_reg),
.rx_cntrl_soft_reset		(rx_cntrl_soft_reset),	 
.hs_mode			(hs_mode),		 
.fslsserialmode_sync		(fslsserialmode_sync),		 
.databus			(databus),		 
.squelch			(squelch),		 
.negedge_squelch		(negedge_squelch),	 
.sync_detected			(sync_detected),	 
.eop_detected			(eop_detected),		 
.no_eop_detected		(no_eop_detected),	 
.bitunstuff_flag		(bitunstuff_flag),	 
.bitunstuff_error		(bitunstuff_error),	 
.cdr_error			(cdr_error),		 
.byte_value			(byte_value),			 
.byte_valid			(byte_valid),		 
.error_byte_valid		(error_byte_valid),	 
.bit_count			(bit_count),		 
.lsfs_dll_se0			(lsfs_dll_se0),		 
.i_bist_on                      (i_bist_on),
.rxerror_ack                    (rxerror_ack),           
.lsfs_dll_en			(lsfs_dll_en),		 
.alignment_error		(alignment_error),	 
.rxactive_off			(rxactive_off),		 
.hs_rxactive_off		(hs_rxactive_off),	 
.rxactive			(rxactive),		 
.rxactive_reg			(rxactive_reg),		 
.rxvalid			(rxvalid),		 
.rxvalidh			(rxvalidh),		 
.rxerror			(rxerror),		 
.dataout			(dataout),		 
.debug_phy_cnt			(debug_phy_cnt),
.debug_sie_cnt			(debug_sie_cnt),
.debug_start_flag		(debug_start_flag),
.debug_deassert_rxactive_reg	(debug_deassert_rxactive_reg)
);
endmodule
module async_apb_if_slv_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r 
#( 
   parameter
      ADDR_WIDTH = 16,
      DATA_WIDTH = 16
)(   
   input isolation_mode_en ,
   input                       pri_apb_pclk,
   input                       pri_apb_preset_n,
   input                       pri_apb_psel,
   input                       pri_apb_penable,
   input      [ADDR_WIDTH-1:0] pri_apb_paddr,
   input                       pri_apb_pwrite,
   input      [DATA_WIDTH-1:0] pri_apb_pwdata,
   output     [DATA_WIDTH-1:0] pri_apb_prdata,
   output                      pri_apb_pready,
   output                      int_apb_pclk,
   output                      int_apb_preset_n,
   output reg                  int_apb_psel,
   output reg                  int_apb_penable,
   output reg [ADDR_WIDTH-1:0] int_apb_paddr,
   output reg                  int_apb_pwrite,
   output reg [DATA_WIDTH-1:0] int_apb_pwdata,
   input      [DATA_WIDTH-1:0] int_apb_prdata,
   input                       int_apb_pready,
   input                       async_apb_pclk,
   input                       async_apb_preset_n,
   input                       async_apb_req,
   input      [ADDR_WIDTH-1:0] async_apb_paddr,
   input                       async_apb_pwrite,
   input      [DATA_WIDTH-1:0] async_apb_pwdata,
   output     [DATA_WIDTH-1:0] async_apb_prdata,
   output                      async_apb_ack,
   input                       scanclk_pclk,
   input                       scanen_pclk,
   input                       scanmode_pclk
);
   wire apb_pclk_selected;
   wire apb_pclk_scanned;
   wire apb_preset_selected_n;
   wire apb_preset_synced_n;
   wire                  iso_pri_apb_psel;
   wire                  iso_pri_apb_penable;
   wire [ADDR_WIDTH-1:0] iso_pri_apb_paddr;
   wire                  iso_pri_apb_pwrite;
   wire [DATA_WIDTH-1:0] iso_pri_apb_pwdata;
   wire [DATA_WIDTH-1:0] iso_pri_apb_prdata;
   wire                  iso_pri_apb_pready;
   wire select_async_apb;
   wire async_apb_psel;
   wire async_apb_penable;
   wire async_apb_pready;
   wire sync_apb_req;
   wire sync_apb_ack;
   reg  [DATA_WIDTH-1:0]  async_rdata;     
   reg [3:0]    st_current_state, st_next_state;    
   parameter [3:0]    
      ST_ACTRL_IDLE         = 4'b00_0_0, 
      ST_ACTRL_APB_IDLE     = 4'b00_0_1, 
      ST_ACTRL_APB_SETUP    = 4'b01_0_1, 
      ST_ACTRL_APB_ACCESS   = 4'b01_1_1, 
      ST_ACTRL_APB_COMPLETE = 4'b10_0_1; 
   clock_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r u_clock_mux_apb_pclk
   (
      .clk_in  ({async_apb_pclk, pri_apb_pclk}),
      .clk_sel (isolation_mode_en),
      .clk_out (apb_pclk_selected)
   );
   scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r u_scan_mux_apb_pclk (
      .scan_mode_en_in (scanmode_pclk),
      .scan_signal_in  (scanclk_pclk), 
      .fcn_signal_in   (apb_pclk_selected),  
      .fcn_signal_out  (apb_pclk_scanned) 
   );
   assign int_apb_pclk = apb_pclk_scanned;
   assign apb_preset_selected_n =  scanmode_pclk ? pri_apb_preset_n  : 
                                                   ( isolation_mode_en ?  async_apb_preset_n : (pri_apb_preset_n && async_apb_preset_n));
   reset_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r u_reset_sync_apb_preset (
      .sync_clock_in       (apb_pclk_scanned),      
      .reset_in_n          (apb_preset_selected_n),           
      .reset_out_n         (apb_preset_synced_n),          
      .upstream_reset_in_n (1'b1),  
      .scan_mode_en_in     (scanmode_pclk),    
      .scan_reset_in_n     (apb_preset_selected_n)       
   );
   assign int_apb_preset_n = apb_preset_synced_n;
   assign iso_pri_apb_psel    = pri_apb_psel    && !isolation_mode_en;
   assign iso_pri_apb_penable = pri_apb_penable && !isolation_mode_en;
   assign iso_pri_apb_paddr   = pri_apb_paddr;
   assign iso_pri_apb_pwrite  = pri_apb_pwrite;
   assign iso_pri_apb_pwdata  = pri_apb_pwdata;
   assign pri_apb_prdata = select_async_apb ? {DATA_WIDTH{1'b0}} : iso_pri_apb_prdata;
   assign pri_apb_pready = iso_pri_apb_pready  && !isolation_mode_en && !select_async_apb;
   always @(*)
   begin
      case (select_async_apb)
         1'b1 :
         begin
            int_apb_psel    = async_apb_psel;
            int_apb_penable = async_apb_penable;
            int_apb_paddr   = async_apb_paddr;
            int_apb_pwrite  = async_apb_pwrite;
            int_apb_pwdata  = async_apb_pwdata;
         end
         default :
         begin
            int_apb_psel    = iso_pri_apb_psel;
            int_apb_penable = iso_pri_apb_penable;
            int_apb_paddr   = iso_pri_apb_paddr;
            int_apb_pwrite  = iso_pri_apb_pwrite;
            int_apb_pwdata  = iso_pri_apb_pwdata;
         end
      endcase
   end
   assign iso_pri_apb_prdata = int_apb_prdata;
   assign iso_pri_apb_pready = int_apb_pready;
   data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r u_sync_async_req (
    .clock    (apb_pclk_scanned),
    .reset_n  (apb_preset_synced_n),
    .d_in     (async_apb_req),
    .d_out    (async_apb_req_sync)
   );
   always @(posedge apb_pclk_scanned or negedge apb_preset_synced_n) 
   begin
      if (!apb_preset_synced_n)
        async_rdata <= {DATA_WIDTH{1'b0}};
      else
        if (!async_apb_req_sync)
          async_rdata <= {DATA_WIDTH{1'b0}};
        else
          if (int_apb_pready && async_apb_penable)
            async_rdata <= int_apb_prdata;
          else
            async_rdata <= async_rdata;
   end
   assign async_apb_prdata = async_rdata;
   assign async_apb_pready = int_apb_pready;
   async_ctrl_if_slv_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r u_async_ctrl_if_slv (
      .clock     (apb_pclk_scanned),
      .reset_n   (apb_preset_synced_n),
      .sync_req  (sync_apb_req),
      .sync_ack  (sync_apb_ack),
      .async_req (async_apb_req),
      .async_ack (async_apb_ack)
   );
   always @(posedge apb_pclk_scanned or negedge apb_preset_synced_n) 
   begin
      if (!apb_preset_synced_n)
         st_current_state  <= ST_ACTRL_IDLE;
      else
         st_current_state  <= st_next_state;
   end    
   always @(*)
   begin
      st_next_state = st_current_state;
      case(st_current_state)
         ST_ACTRL_IDLE :
         begin
            if (sync_apb_req && !iso_pri_apb_penable)
               st_next_state = ST_ACTRL_APB_IDLE;
            else
               st_next_state = ST_ACTRL_IDLE;
         end
         ST_ACTRL_APB_IDLE :
         begin
            st_next_state = ST_ACTRL_APB_SETUP;
         end
         ST_ACTRL_APB_SETUP :
         begin
            st_next_state = ST_ACTRL_APB_ACCESS;
         end
         ST_ACTRL_APB_ACCESS :
         begin
            if (async_apb_pready)
               st_next_state = ST_ACTRL_APB_COMPLETE;
            else
               st_next_state = ST_ACTRL_APB_ACCESS;
         end
         ST_ACTRL_APB_COMPLETE :
         begin
            st_next_state = ST_ACTRL_IDLE;
         end
      endcase
   end
   assign select_async_apb  = st_current_state[0];
   assign async_apb_penable = st_current_state[1];
   assign async_apb_psel    = st_current_state[2];
   assign sync_apb_ack      = async_apb_pready && select_async_apb;
endmodule
module TAP_CONTROLLER_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r(TRST, TCK, NTCK, TMS, SE, RESET, RESET_STATE, SEL, ENABLE,
                      SHIFTIR, CLOCKIR, UPDATEIR, SHIFTDR, CLOCKDR, UPDATEDR, RUNIDLE,
                      SHIFTDR_STATE, SELECTDR_STATE, CAPTUREDR_STATE, UPDATEDR_STATE, EXIT1_DR_OR_EXIT2_DR);
   input  TRST;
   input  TCK;
   input  NTCK;
   input  TMS;
   input  SE;
   output RESET;
   output RESET_STATE;
   output SEL;
   output ENABLE;
   output SHIFTIR;
   output CLOCKIR;
   output UPDATEIR;
   output SHIFTDR;
   output CLOCKDR;
   output UPDATEDR;
   output RUNIDLE;
   output SHIFTDR_STATE;
   output SELECTDR_STATE;
   output CAPTUREDR_STATE;
   output UPDATEDR_STATE;
   output EXIT1_DR_OR_EXIT2_DR;
   wire TCS_TRST_INV;
   wire TCS_TCK;
   wire TCS_TCK_INV;
   wire TCS_TMS;
   wire TCS_SE;
   reg TCS_RESET;
   wire TCS_RESET_STATE;
   wire TCS_SELECT;
   reg TCS_ENABLE;
   wire TCS_SHIFTIR;
   wire TCS_CLOCKIR;
   wire TCS_UPDATEIR;
   wire TCS_SHIFTDR;
   wire TCS_CLOCKDR;
   wire TCS_UPDATEDR;
   wire TCS_RUNIDLE;
   wire SHIFTDR_STATE_S;
   wire SELECTDR_STATE_S;
   wire CAPTUREDR_STATE_S;
   wire UPDATEDR_STATE_S;
   wire TCS_TRST;
   reg TCS_A;
   wire TCS_NA;
   reg TCS_B;
   wire TCS_NB;
   reg TCS_C;
   wire TCS_NC;
   reg TCS_D;
   wire TCS_ND;
   wire TCS_A_INV;
   wire TCS_B_INV;
   wire TCS_C_INV;
   wire TCS_D_INV;
   wire TCS_NAND_RESET;
   wire TCS_NAND_SHIFTIR;
   wire TCS_NAND_SHIFTDR;
   wire TCS_NAND_ENABLE;
   reg TCS_SHIFTIR_INV;
   reg TCS_SHIFTDR_INV;
   wire TCS_UPDATEIR_STATE;
   wire CLOCKIRstate;
   wire CLOCKDRstate;
   wire TCS_TMS_INV;
   wire TCS_NA_1;
   wire TCS_NA_2;
   wire TCS_NA_3;
   wire TCS_NA_4;
   wire TCS_NB_1;
   wire TCS_NB_2;
   wire TCS_NB_3;
   wire TCS_NB_4;
   wire TCS_NB_5;
   wire TCS_NB_6;
   wire TCS_NC_1;
   wire TCS_NC_2;
   wire TCS_NC_3;
   wire TCS_ND_1;
   wire TCS_ND_2;
   wire TCS_ND_3;
   wire TCS_ND_4;
   assign TCS_TRST_INV = TRST;
   assign TCS_TCK = TCK;
   assign TCS_TCK_INV = NTCK;
   assign TCS_TMS = TMS;
   assign TCS_SE = SE;
   assign RESET = TCS_RESET;
   assign RESET_STATE = TCS_RESET_STATE;
   assign SEL = TCS_SELECT;
   assign ENABLE = TCS_ENABLE;
   assign SHIFTIR = TCS_SHIFTIR;
   assign CLOCKIR = TCS_CLOCKIR;
   assign UPDATEIR = TCS_UPDATEIR;
   assign SHIFTDR = TCS_SHIFTDR;
   assign CLOCKDR = TCS_CLOCKDR;
   assign UPDATEDR = TCS_UPDATEDR;
   assign RUNIDLE = TCS_RUNIDLE;
   assign SHIFTDR_STATE = SHIFTDR_STATE_S;
   assign SELECTDR_STATE = SELECTDR_STATE_S;
   assign CAPTUREDR_STATE = CAPTUREDR_STATE_S;
   assign UPDATEDR_STATE = UPDATEDR_STATE_S;
   assign TCS_TRST = ~(TCS_TRST_INV);
   always @(posedge TCS_TCK or posedge TCS_TRST)
     begin : TCB_LATCH_NA
       if (TCS_TRST)
         TCS_A <= 1'b1;
       else
         TCS_A <= TCS_NA;
     end
   always @(posedge TCS_TCK or posedge TCS_TRST)
     begin : TCB_LATCH_NB
       if (TCS_TRST)
         TCS_B <= 1'b1;
       else
         TCS_B <= TCS_NB;
     end
   always @(posedge TCS_TCK or posedge TCS_TRST)
     begin : TCB_LATCH_NC
       if (TCS_TRST)
         TCS_C <= 1'b1;
       else
         TCS_C <= TCS_NC;
     end
   always @(posedge TCS_TCK or posedge TCS_TRST)
     begin : TCB_LATCH_ND
       if (TCS_TRST)
         TCS_D <= 1'b1;
       else
         TCS_D <= TCS_ND;
     end
   assign TCS_A_INV = ~(TCS_A);
   assign TCS_B_INV = ~(TCS_B);
   assign TCS_C_INV = ~(TCS_C);
   assign TCS_D_INV = ~(TCS_D);
   assign TCS_SELECT = TCS_D;
   assign TCS_NAND_RESET = ~((((TCS_D & TCS_C) & TCS_B) & TCS_A));
   assign TCS_NAND_SHIFTIR = ~((((TCS_D & TCS_C_INV) & TCS_B) & TCS_A_INV));
   assign TCS_NAND_SHIFTDR = ~((((TCS_D_INV & TCS_C_INV) & TCS_B) & TCS_A_INV));
   assign EXIT1_DR_OR_EXIT2_DR = (((TCS_D_INV & TCS_C_INV) & TCS_B_INV));
   assign TCS_NAND_ENABLE = ~((TCS_NAND_SHIFTDR & TCS_NAND_SHIFTIR));
   always @(posedge TCS_TCK_INV or posedge TCS_TRST)
     begin : TCB_RESET
       if (TCS_TRST)
         TCS_RESET <= 1'b0;
       else
         TCS_RESET <= TCS_NAND_RESET;
     end
   always @(posedge TCS_TCK_INV or posedge TCS_TRST)
     begin : TCB_ENABLE
       if (TCS_TRST)
         TCS_ENABLE <= 1'b0;
       else
         TCS_ENABLE <= TCS_NAND_ENABLE;
     end
   always @(posedge TCS_TCK_INV or posedge TCS_TRST)
     begin : TCB_SHIFTIR
       if (TCS_TRST)
         TCS_SHIFTIR_INV <= 1'b1;
       else
         TCS_SHIFTIR_INV <= TCS_NAND_SHIFTIR;
     end
   always @(posedge TCS_TCK_INV or posedge TCS_TRST)
     begin : TCB_SHIFTDR
       if (TCS_TRST)
         TCS_SHIFTDR_INV <= 1'b1;
       else
         TCS_SHIFTDR_INV <= TCS_NAND_SHIFTDR;
     end
   assign TCS_SHIFTIR = ~(TCS_SHIFTIR_INV);
   assign TCS_SHIFTDR = ~(TCS_SHIFTDR_INV);
   assign TCS_UPDATEIR_STATE = (((TCS_D & TCS_C) & TCS_B_INV) & TCS_A);
   JTAG_CLOCK_GATE_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r JTAG_CLOCK_GATE_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r(
       .test(TCS_SE),
       .enable(TCS_UPDATEIR_STATE),
       .ck_in(TCS_TCK_INV),
       .ck_out(TCS_UPDATEIR)
   );
   assign TCS_RUNIDLE = (((TCS_D & TCS_C) & TCS_B_INV) & TCS_A_INV);
   assign CLOCKIRstate = ((TCS_D & TCS_B) & TCS_A_INV);
   assign CLOCKDRstate = ((TCS_D_INV & TCS_B) & TCS_A_INV);
   JTAG_CLOCK_GATE_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r JTAG_CLOCK_GATE_N19(
       .test(TCS_SE),
       .enable(CLOCKIRstate),
       .ck_in(TCS_TCK),
       .ck_out(TCS_CLOCKIR)
   );
   JTAG_CLOCK_GATE_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r JTAG_CLOCK_GATE_N20(
       .test(TCS_SE),
       .enable(CLOCKDRstate),
       .ck_in(TCS_TCK),
       .ck_out(TCS_CLOCKDR)
   );
   assign UPDATEDR_STATE_S = (((TCS_D_INV & TCS_C) & TCS_B_INV) & TCS_A);
   assign CAPTUREDR_STATE_S = (((TCS_D_INV & TCS_C) & TCS_B) & TCS_A_INV);
   assign SHIFTDR_STATE_S = (((TCS_D_INV & TCS_C_INV) & TCS_B) & TCS_A_INV);
   assign SELECTDR_STATE_S = (((TCS_D_INV & TCS_C) & TCS_B) & TCS_A);
   JTAG_CLOCK_GATE_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r JTAG_CLOCK_GATE_N21(
       .test(TCS_SE),
       .enable(UPDATEDR_STATE_S),
       .ck_in(TCS_TCK_INV),
       .ck_out(TCS_UPDATEDR)
   );
   assign TCS_TMS_INV = ~(TCS_TMS);
   assign TCS_NA_1 = ~(((TCS_C_INV & TCS_A) & TCS_TMS_INV));
   assign TCS_NA_2 = ~((TCS_B_INV & TCS_TMS));
   assign TCS_NA_3 = ~((TCS_A_INV & TCS_TMS));
   assign TCS_NA_4 = ~(((TCS_D & TCS_C) & TCS_TMS));
   assign TCS_NB_1 = ~(((TCS_B & TCS_A_INV) & TCS_TMS_INV));
   assign TCS_NB_2 = ~((TCS_C_INV & TCS_TMS_INV));
   assign TCS_NB_3 = ~(((TCS_D_INV & TCS_B) & TCS_TMS_INV));
   assign TCS_NB_4 = ~(((TCS_D_INV & TCS_A_INV) & TCS_TMS_INV));
   assign TCS_NB_5 = ~(((TCS_C & TCS_B_INV) & TCS_TMS));
   assign TCS_NB_6 = ~((((TCS_D & TCS_C) & TCS_A) & TCS_TMS));
   assign TCS_NC_1 = ~((TCS_C & TCS_B_INV));
   assign TCS_NC_2 = ~((TCS_C & TCS_A));
   assign TCS_NC_3 = ~((TCS_B_INV & TCS_TMS));
   assign TCS_ND_1 = ~((TCS_D & TCS_C_INV));
   assign TCS_ND_2 = ~((TCS_D & TCS_B));
   assign TCS_ND_3 = ~(((TCS_C & TCS_B_INV) & TCS_TMS_INV));
   assign TCS_ND_4 = ~((((TCS_D_INV & TCS_C) & TCS_B_INV) & TCS_A_INV));
   assign TCS_NA = ~((((TCS_NA_1 & TCS_NA_2) & TCS_NA_3) & TCS_NA_4));
   assign TCS_NB = ~((((((TCS_NB_1 & TCS_NB_2) & TCS_NB_3) & TCS_NB_4) & TCS_NB_5
          ) & TCS_NB_6));
   assign TCS_NC = ~(((TCS_NC_1 & TCS_NC_2) & TCS_NC_3));
   assign TCS_ND = ~((((TCS_ND_1 & TCS_ND_2) & TCS_ND_3) & TCS_ND_4));
   assign TCS_RESET_STATE = ~(TCS_NAND_RESET);
endmodule
module udc_scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r(
input         reset,
input         i_bist_mode_en,
input         iddq_mode,
input         scan_mode,
input         scan_ats_mode,
input         scan_clock,
input         scan_hsclock,
input         scan_sieclock,
input         rstn_ats_clkdiv,
input	      i_scan_en,
input         i_otgc_vbusvalid_en,
input         i_otgc_absvalid_en,
input         i_pll_standby,
input         i_pll_pso,
input         i_pll_pso_delay,
input         i_pll_pd,
input         i_pll_pd_ana,
input         i_pll_ldo_core_en,
input         i_pll_coarse_code_done_ana,
input         i_pll_ldo_ref_en,
input         i_ats_pll_ldo_ref_en,
input [5:0]   i_pll_ldo_ref_core,
input         i_ed_en,
input         i_ted_en,
input         i_hsrx_en,
input         i_hstx_en,
input         i_chirp_mode_en,
input         i_hspredrv_en,
input         i_hstx_en_delayed,
input         i_hsdrv_en,
input         i_hsddi,
input         i_lsfsrx_en,
input         i_fs_edge_sel,
input         i_lsfstx_en,
input         i_lsfsdrv_en,
input         i_lsfs_ddi,
input         i_assert_sezero,
input         i_afe_suspendm_rx,
input         i_afe_suspendm_tx,
input         i_afe_clipper_en,
input         i_bg_pd,
input         i_bg_pd_bg_ok,
input [5:0]   i_afe_fscalib_code,
input [5:0]   i_afe_hscalib_code,
input [5:0]   i_afe_bccalib_code,
input [8:0]   i_pll_coarse_code,
input         i_pll_startloop,
input         i_pll_pfd_pd,
input         i_div_refclock,
input         i_ted_calib_mode_down,
input         i_ted_calib_mode_up,
input [3:0]   i_ted_calib_code_up,
input [3:0]   i_ted_calib_code_down,
input         i_calib_pd_bias_comp,
input [5:0]   i_res_calib_code,
input         i_fb_clk,
input         i_afe_lsfsrx_ana,
input         i_adp_probe_en,
input         i_adp_sense_en,
input         i_adp_en,		
input         i_adp_probe_ana,		
input         i_adp_sense_ana,	
input         i_adp_sink_current_en,	
input         i_adp_source_current_en,
input         i_dp_vdat_ref_comp_sts,
input         i_dm_vdat_ref_comp_sts,
input         i_rid_float_a_comp_sts,
input         i_rid_b_c_comp_sts,
input         i_idp_src_en,	
input         i_idm_src_en,	
input         i_idp_sink_en,
input         i_idm_sink_en,	
input         i_vdp_src_en,	
input         i_vdm_src_en,	
input         i_dp_vdat_ref_comp_en,
input         i_dm_vdat_ref_comp_en,
input         i_rid_float_src_en,
input         i_rid_nonfloat_src_en,
input         i_rid_float_ref_en,
input         i_rid_a_ref_en,	
input         i_rid_b_ref_en,	
input         i_rid_c_ref_en,	
input         i_rid_float_a_comp_en,
input         i_rid_b_c_comp_en,
input         i_ded_ana,	
input         i_ted_comp_out_up,
input         i_ted_comp_out_down,
input         i_calib_cmp_out,
input         i_afe_hsrx_rec_clk,
input         i_hstx_boost_deemp_off,
input [7:0]   i_pll_fbdiv,
input [4:0]   i_pll_ipdiv,
input         i_bg_pd_toggle,
input [7:0]   i_afe_tx_reg0,
input [7:0]   i_afe_tx_reg1,
input [7:0]   i_afe_tx_reg2,
input [7:0]   i_afe_tx_reg3,
input [7:0]   i_afe_tx_reg4,
input [7:0]   i_afe_tx_reg5,
input [7:0]   i_afe_tx_reg6,
input [7:0]   i_afe_tx_reg7,
input [7:0]   i_afe_tx_reg8,
input [7:0]   i_afe_tx_reg9,
input [7:0]   i_afe_tx_reg10,
input [7:0]   i_afe_tx_reg11,
input [7:0]   i_afe_tx_reg12,
input [7:0]   i_afe_rx_reg0,
input [7:0]   i_afe_rx_reg1,
input [7:0]   i_afe_rx_reg2,
input [7:0]   i_afe_rx_reg3,
input [7:0]   i_afe_rx_reg4,
input [7:0]   i_afe_rx_reg5,
input [7:0]   i_afe_rx_reg6,
input [7:0]   i_afe_bc_reg0,
input [7:0]   i_afe_bc_reg1,
input [7:0]   i_afe_bc_reg2,
input [7:0]   i_afe_bc_reg3,
input [7:0]   i_afe_bc_reg4,
input [7:0]   i_afe_bc_reg5,
input [7:0]   i_afe_bc_reg6,
input [7:0]   i_afe_pll_reg0,
input [7:0]   i_afe_pll_reg1,
input [7:0]   i_afe_pll_reg2,
input [7:0]   i_afe_pll_reg3,
input [7:0]   i_afe_pll_reg4,
input [7:0]   i_afe_pll_reg5,
input [7:0]   i_afe_bg_reg0,
input [7:0]   i_afe_bg_reg1,
input [7:0]   i_afe_bg_reg2,
input [7:0]   i_afe_bg_reg3,
input [7:0]   i_afe_calib_reg0,
input [4:0]   i_tm_clk_gate_ovr,
output [4:0]  o_tm_clk_gate_ovr,
output        scan_mode_sel,
output	      o_scan_en,
output        o_otgc_vbusvalid_en,
output        o_otgc_absvalid_en,
output        o_pll_standby,
output        o_pll_pso,
output        o_pll_pso_delay,
output        o_pll_pd,
output        o_pll_pd_int,
output        o_pll_ldo_core_en,
output        o_pll_ldo_core_en_tx,
output        o_pll_ldo_ref_en,
output [5:0]  o_pll_ldo_ref_core,
output        o_pll_coarse_code_done_ana,
output        o_ed_en,
output        o_ted_en,
output        o_hsrx_en_clipper,
output        o_hstx_en,
output        o_chirp_mode_en,
output        o_chirp_mode_en_aon,
output        o_hspredrv_en,
output        o_hstx_en_delayed,
output        o_hsdrv_en,
output        o_hsddi,
output        o_lsfsrx_en,
output        o_fs_edge_sel,
output        o_lsfstx_en,
output        o_lsfsdrv_en,
output        o_lsfs_ddi,
output        o_assert_sezero,
output        o_afe_suspendm_rx,
output        o_afe_suspendm_tx,
output        o_afe_clipper_en,
output        o_bg_pd,
output        o_bg_pd_bg_ok,
output [5:0]  o_afe_fscalib_code,
output [5:0]  o_afe_hscalib_code,
output [5:0]  o_afe_bccalib_code,
output [8:0]  o_pll_coarse_code,
output        o_pll_startloop,
output        o_pll_pfd_pd,
output        o_div_refclock,
output        o_ted_calib_mode_down,
output        o_ted_calib_mode_up,
output [3:0]  o_ted_calib_code_up,
output [3:0]  o_ted_calib_code_down,
output        o_calib_pd_bias_comp,
output [5:0]  o_res_calib_code,
output        o_fb_clk,
output        scan_pll_startloop,
output        o_afe_lsfsrx_ana,
output        o_adp_probe_ana,
output        o_adp_sense_ana,
output        o_adp_en,		
output        o_adp_probe_en,		
output        o_adp_sense_en,	
output        o_adp_sink_current_en,	
output        o_adp_source_current_en,
output        o_dp_vdat_ref_comp_sts,
output        o_dm_vdat_ref_comp_sts,
output        o_rid_float_a_comp_sts,
output        o_rid_b_c_comp_sts,
output        o_idp_src_en,	
output        o_idm_src_en,	
output        o_idp_sink_en,
output        o_idm_sink_en,	
output        o_vdp_src_en,	
output        o_vdm_src_en,	
output        o_dp_vdat_ref_comp_en,
output        o_dm_vdat_ref_comp_en,
output        o_rid_float_src_en,
output        o_rid_nonfloat_src_en,
output        o_rid_float_ref_en,
output        o_rid_a_ref_en,	
output        o_rid_b_ref_en,	
output        o_rid_c_ref_en,	
output        o_rid_float_a_comp_en,
output        o_rid_b_c_comp_en,
output        o_ded_ana,	
output        o_ted_comp_out_up,
output        o_ted_comp_out_down,
output        o_calib_cmp_out,
output        o_afe_hsrx_rec_clk,
output        o_hstx_boost_deemp_off,
output [7:0]  o_pll_fbdiv,
output [4:0]  o_pll_ipdiv,
output [7:0]  o_afe_tx_reg0,
output [7:0]  o_afe_tx_reg1,
output [7:0]  o_afe_tx_reg2,
output [7:0]  o_afe_tx_reg3,
output [7:0]  o_afe_tx_reg4,
output [7:0]  o_afe_tx_reg5,
output [7:0]  o_afe_tx_reg6,
output [7:0]  o_afe_tx_reg7,
output [7:0]  o_afe_tx_reg8,
output [7:0]  o_afe_tx_reg9,
output [7:0]  o_afe_tx_reg10,
output [7:0]  o_afe_tx_reg11,
output [7:0]  o_afe_tx_reg12,
output [7:0]  o_afe_rx_reg0,
output [7:0]  o_afe_rx_reg1,
output [7:0]  o_afe_rx_reg2,
output [7:0]  o_afe_rx_reg3,
output [7:0]  o_afe_rx_reg4,
output [7:0]  o_afe_rx_reg5,
output [7:0]  o_afe_rx_reg6,
output [7:0]  o_afe_bc_reg0,
output [7:0]  o_afe_bc_reg1,
output [7:0]  o_afe_bc_reg2,
output [7:0]  o_afe_bc_reg3,
output [7:0]  o_afe_bc_reg4,
output [7:0]  o_afe_bc_reg5,
output [7:0]  o_afe_bc_reg6,
output [7:0]  o_afe_pll_reg0,
output [7:0]  o_afe_pll_reg1,
output [7:0]  o_afe_pll_reg2,
output [7:0]  o_afe_pll_reg3,
output [7:0]  o_afe_pll_reg4,
output [7:0]  o_afe_pll_reg5,
output [7:0]  o_afe_bg_reg0,
output [7:0]  o_afe_bg_reg1,
output [7:0]  o_afe_bg_reg2,
output [7:0]  o_afe_bg_reg3,
output [7:0]  o_afe_calib_reg0
);
wire scan_iddq_mode, scan_reset;
wire [19:0] w_dft_tp1, dft_tp1;
wire w_dft_tp2;
wire [5:0] dft_in_tp1;
dft_tp_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.WIDTH(20),.SCAN_MUX(0)) c_dft_tp1(
.clock        (scan_sieclock),
.reset_n      (scan_reset),
.scan_mode    (1'b0),
.fcn_signal_in(20'd0),
.d_in         (w_dft_tp1),
.d_out        (dft_tp1)
);
dft_tp_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.WIDTH(1),.SCAN_MUX(0)) c_dft_tp2(
.clock        (scan_hsclock),
.reset_n      (scan_reset),
.scan_mode    (1'b0),
.fcn_signal_in(1'b0),
.d_in         (w_dft_tp2),
.d_out        (dft_tp2)
);
assign w_dft_tp1[0] = i_hstx_boost_deemp_off ^ i_adp_en ^ i_adp_probe_en ^ i_adp_sense_en;
assign w_dft_tp1[1] = i_adp_sink_current_en ^ i_adp_source_current_en ^ i_idp_src_en ^ i_idm_src_en;
assign w_dft_tp1[2] = i_idp_sink_en ^ i_idm_sink_en ^ i_vdp_src_en ^ i_vdm_src_en;
assign w_dft_tp1[3] = i_dp_vdat_ref_comp_en ^ i_dm_vdat_ref_comp_en ^ i_rid_float_src_en ^ i_rid_nonfloat_src_en;
assign w_dft_tp1[4] = i_rid_float_ref_en ^ i_rid_a_ref_en ^ i_rid_b_ref_en ^ i_rid_c_ref_en;
assign w_dft_tp1[5] = i_rid_float_a_comp_en ^ i_rid_b_c_comp_en ^ i_otgc_vbusvalid_en ^ i_otgc_absvalid_en;
assign w_dft_tp1[6] = i_pll_standby ^ i_pll_pso ^ i_pll_pso_delay ^ i_pll_pd_ana;
assign w_dft_tp1[7] = i_pll_ldo_core_en ^ i_pll_ldo_ref_en ^ i_ed_en ^ i_ted_en;
assign w_dft_tp1[8] = ^i_pll_ldo_ref_core;
assign w_dft_tp1[9] = i_hsrx_en ^ i_hstx_en ^ i_chirp_mode_en ^ i_hspredrv_en;
assign w_dft_tp1[10] = ^i_res_calib_code;
assign w_dft_tp1[11] = i_lsfsrx_en ^ i_fs_edge_sel ^ i_lsfstx_en ^ i_lsfsdrv_en;
assign w_dft_tp1[12] = i_lsfs_ddi ^ i_assert_sezero ^ i_afe_suspendm_rx ^ i_afe_suspendm_tx;
assign w_dft_tp1[13] = i_afe_clipper_en ^ i_bg_pd ^ i_bg_pd_bg_ok ^ i_hstx_en_delayed;
assign w_dft_tp1[14] = ^i_afe_fscalib_code;
assign w_dft_tp1[15] = ^i_afe_hscalib_code;
assign w_dft_tp1[16] = ^i_afe_bccalib_code;
assign w_dft_tp1[17] = ^i_ted_calib_code_up;
assign w_dft_tp1[18] = ^i_ted_calib_code_down;
assign w_dft_tp1[19] = i_ted_calib_mode_down ^ i_ted_calib_mode_up;
assign w_dft_tp2 = i_hsdrv_en ^ i_hsddi;
assign scan_iddq_mode = scan_mode | iddq_mode;
assign scan_mode_sel  = scan_ats_mode ? 1'b0 : scan_mode;
assign scan_reset     = ~reset;
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_hsrx_rec_clk(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_hsclock),
.fcn_signal_in(i_afe_hsrx_rec_clk),
.fcn_signal_out(o_afe_hsrx_rec_clk)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_en(
.scan_mode_en_in(scan_ats_mode),
.scan_signal_in(1'b0),
.fcn_signal_in(i_scan_en),
.fcn_signal_out(o_scan_en)
);
dft_tp_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.WIDTH(6),.SCAN_MUX(0)) c_dft_in_tp1(
.clock        (scan_sieclock),
.reset_n      (scan_reset),
.scan_mode    (1'b0),
.fcn_signal_in(6'd0),
.d_in         (6'd0),
.d_out        (dft_in_tp1)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_adp_sense(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[0]),
.fcn_signal_in(i_adp_sense_ana),
.fcn_signal_out(o_adp_sense_ana)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_adp_probe(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[0]),
.fcn_signal_in(i_adp_probe_ana),
.fcn_signal_out(o_adp_probe_ana)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_afe_lsfsrx_ana(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[1]),
.fcn_signal_in(i_afe_lsfsrx_ana),
.fcn_signal_out(o_afe_lsfsrx_ana)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_dp_vdat_ref_comp_sts(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[1]),
.fcn_signal_in(i_dp_vdat_ref_comp_sts),
.fcn_signal_out(o_dp_vdat_ref_comp_sts)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_dm_vdat_ref_comp_sts(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[2]),
.fcn_signal_in(i_dm_vdat_ref_comp_sts),
.fcn_signal_out(o_dm_vdat_ref_comp_sts)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_rid_float_a_comp_sts(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[2]),
.fcn_signal_in(i_rid_float_a_comp_sts),
.fcn_signal_out(o_rid_float_a_comp_sts)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_rid_b_c_comp_sts(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[3]),
.fcn_signal_in(i_rid_b_c_comp_sts),
.fcn_signal_out(o_rid_b_c_comp_sts)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_ded_ana(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[3]),
.fcn_signal_in(i_ded_ana),
.fcn_signal_out(o_ded_ana)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_calib_cmp_out(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[4]),
.fcn_signal_in(i_calib_cmp_out),
.fcn_signal_out(o_calib_cmp_out)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_ted_comp_out_up(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[4]),
.fcn_signal_in(i_ted_comp_out_up),
.fcn_signal_out(o_ted_comp_out_up)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_ted_comp_out_down(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[5]),
.fcn_signal_in(i_ted_comp_out_down),
.fcn_signal_out(o_ted_comp_out_down)
);
assign o_hstx_boost_deemp_off = scan_iddq_mode ? 1'b0 : i_hstx_boost_deemp_off;
assign o_adp_en = scan_iddq_mode ? 1'd0: i_adp_en;	  
assign o_adp_probe_en = scan_iddq_mode ? 1'd0: i_adp_probe_en; 
assign o_adp_sense_en = scan_iddq_mode ? 1'd0: i_adp_sense_en;
assign o_adp_sink_current_en = scan_iddq_mode ? 1'd0: i_adp_sink_current_en;
assign o_adp_source_current_en = scan_iddq_mode ? 1'd0: i_adp_source_current_en;
assign o_idp_src_en= scan_iddq_mode ? 1'd0:i_idp_src_en;	
assign o_idm_src_en= scan_iddq_mode ? 1'd0:i_idm_src_en;
assign o_idp_sink_en= scan_iddq_mode ? 1'd0:i_idp_sink_en;
assign o_idm_sink_en= scan_iddq_mode ? 1'd0:i_idm_sink_en;	
assign o_vdp_src_en= scan_iddq_mode ? 1'd0:i_vdp_src_en;
assign o_vdm_src_en= scan_iddq_mode ? 1'd0:i_vdm_src_en;	
assign o_dp_vdat_ref_comp_en= scan_iddq_mode ? 1'd0:i_dp_vdat_ref_comp_en;
assign o_dm_vdat_ref_comp_en= scan_iddq_mode ? 1'd0:i_dm_vdat_ref_comp_en;
assign o_rid_float_src_en= scan_iddq_mode ? 1'd0:i_rid_float_src_en;
assign o_rid_nonfloat_src_en= scan_iddq_mode ? 1'd0:i_rid_nonfloat_src_en;
assign o_rid_float_ref_en= scan_iddq_mode ? 1'd0:i_rid_float_ref_en;
assign o_rid_a_ref_en= scan_iddq_mode ? 1'd0:i_rid_a_ref_en;	
assign o_rid_b_ref_en= scan_iddq_mode ? 1'd0:i_rid_b_ref_en;	
assign o_rid_c_ref_en= scan_iddq_mode ? 1'd0:i_rid_c_ref_en;
assign o_rid_float_a_comp_en= scan_iddq_mode ? 1'd0:i_rid_float_a_comp_en;
assign o_rid_b_c_comp_en = scan_iddq_mode ? 1'd0:i_rid_b_c_comp_en;
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_pll_pd_int1(
.scan_mode_en_in(scan_ats_mode),
.scan_signal_in(~rstn_ats_clkdiv),
.fcn_signal_in(w_pll_pd_int),
.fcn_signal_out(o_pll_pd_int)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_pll_pd_int2(
.scan_mode_en_in(scan_mode),
.scan_signal_in(reset),
.fcn_signal_in(i_pll_pd),
.fcn_signal_out(w_pll_pd_int)
);
assign o_fb_clk = scan_ats_mode ? i_fb_clk : scan_iddq_mode ? 1'b0 :  i_fb_clk;
assign o_otgc_vbusvalid_en = scan_iddq_mode ? 1'd0: i_otgc_vbusvalid_en;
assign o_otgc_absvalid_en = scan_iddq_mode ? 1'd0: i_otgc_absvalid_en;
assign o_pll_standby = (scan_ats_mode | scan_iddq_mode) ? 1'd0: i_pll_standby;
assign o_pll_pso = scan_ats_mode ? 1'b0 : scan_iddq_mode ? 1'b1 : i_pll_pso;
assign o_pll_pso_delay = scan_ats_mode ?  1'b0: scan_iddq_mode ? 1'b1 :i_pll_pso_delay;
assign o_pll_pd = scan_ats_mode ?  ~rstn_ats_clkdiv : scan_iddq_mode ? 1'b1: i_pll_pd_ana;
assign o_pll_ldo_core_en = scan_ats_mode ? rstn_ats_clkdiv : scan_iddq_mode ? 1'b 0 : i_pll_ldo_core_en;
assign o_pll_ldo_core_en_tx = o_pll_ldo_core_en;
assign o_pll_ldo_ref_en	= scan_ats_mode ? i_ats_pll_ldo_ref_en: scan_iddq_mode ? 1'b 0 : i_pll_ldo_ref_en;
assign o_pll_ldo_ref_core = (scan_ats_mode | scan_iddq_mode) ? 6'd0 : i_pll_ldo_ref_core;
assign o_ed_en = scan_iddq_mode ? 1'd0: i_ed_en;
assign o_ted_en = scan_iddq_mode ? 1'd0: i_ted_en;
assign o_hsrx_en_clipper = scan_iddq_mode ? 1'd0: i_hsrx_en;
assign o_hstx_en = scan_iddq_mode ? 1'd0: i_hstx_en;
assign o_chirp_mode_en = scan_iddq_mode ? 1'd0: i_chirp_mode_en;
assign o_chirp_mode_en_aon = scan_iddq_mode ? 1'd0: i_chirp_mode_en;
assign o_hspredrv_en = scan_iddq_mode ? 1'd0: i_hspredrv_en;
assign o_hstx_en_delayed = scan_iddq_mode ? 1'd0: i_hstx_en_delayed;
assign o_hsdrv_en = scan_iddq_mode ? 1'd0: i_hsdrv_en;
assign o_hsddi = scan_iddq_mode ? 1'd0: i_hsddi;
assign o_lsfsrx_en = scan_iddq_mode ? 1'd0: i_lsfsrx_en;
assign o_fs_edge_sel = scan_iddq_mode ? 1'b1 : i_fs_edge_sel;
assign o_lsfstx_en = scan_iddq_mode ? 1'd0: i_lsfstx_en;
assign o_lsfsdrv_en = scan_iddq_mode ? 1'd0: i_lsfsdrv_en;
assign o_lsfs_ddi = scan_iddq_mode ? 1'd0: i_lsfs_ddi;
assign o_assert_sezero = scan_iddq_mode ? 1'd0: i_assert_sezero;
assign o_afe_suspendm_rx = scan_iddq_mode ? 1'd0: i_afe_suspendm_rx;
assign o_afe_suspendm_tx = scan_iddq_mode ? 1'd0: i_afe_suspendm_tx;
assign o_afe_clipper_en = scan_iddq_mode ? 1'd0: i_afe_clipper_en;
assign o_bg_pd			= scan_ats_mode ? 1'b0 : (scan_iddq_mode ? 1'b 1 : (i_bist_mode_en ? i_bg_pd_toggle : i_bg_pd));
assign o_bg_pd_bg_ok		= scan_ats_mode ? 1'b0 : (scan_iddq_mode ? 1'b 1 : (i_bist_mode_en ? i_bg_pd_toggle : i_bg_pd_bg_ok));
assign o_afe_fscalib_code	= scan_iddq_mode ? 6'b100000: i_afe_fscalib_code;
assign o_afe_hscalib_code	= scan_iddq_mode ? 6'b100000: i_afe_hscalib_code;
assign o_afe_bccalib_code	= scan_iddq_mode ? 6'b100000: i_afe_bccalib_code;
assign o_pll_coarse_code = scan_ats_mode ? i_pll_coarse_code : scan_iddq_mode ? 9'b100000000 : i_pll_coarse_code;
assign o_pll_coarse_code_done_ana = scan_ats_mode ? i_pll_coarse_code_done_ana : scan_iddq_mode ? 1'b0 : i_pll_coarse_code_done_ana;
assign o_pll_pfd_pd = scan_ats_mode ? i_pll_pfd_pd : scan_iddq_mode ? 1'b1 : i_pll_pfd_pd;
assign o_pll_startloop = scan_ats_mode ? i_pll_startloop : (scan_mode | iddq_mode) ? 1'd0 : i_pll_startloop;
assign o_div_refclock = scan_ats_mode ? i_div_refclock : (scan_mode | iddq_mode) ? 1'b0 : i_div_refclock;
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_pll_startloop(
.scan_mode_en_in(scan_mode_sel),
.scan_signal_in(~reset),
.fcn_signal_in(i_pll_startloop),
.fcn_signal_out(scan_pll_startloop)
);
assign o_ted_calib_mode_down = scan_iddq_mode ? 1'b0 : i_ted_calib_mode_down;
assign o_ted_calib_mode_up = scan_iddq_mode ? 1'b1: i_ted_calib_mode_up;
assign o_ted_calib_code_up = scan_iddq_mode ? 4'b1000 : i_ted_calib_code_up;
assign o_ted_calib_code_down = scan_iddq_mode ? 4'b1000 : i_ted_calib_code_down;
assign o_calib_pd_bias_comp = scan_iddq_mode ? 1'b1 : i_calib_pd_bias_comp;
assign o_res_calib_code = scan_iddq_mode ? 6'b100000 : i_res_calib_code;
assign o_pll_fbdiv = scan_ats_mode ? 8'd0 : i_pll_fbdiv;
assign o_pll_ipdiv = scan_ats_mode ? 5'd0 : i_pll_ipdiv;
assign o_afe_tx_reg0 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_tx_reg0;
assign o_afe_tx_reg1 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_tx_reg1;
assign o_afe_tx_reg2 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_tx_reg2;
assign o_afe_tx_reg3 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_tx_reg3;
assign o_afe_tx_reg4 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_tx_reg4;
assign o_afe_tx_reg5 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_tx_reg5;
assign o_afe_tx_reg6 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_tx_reg6;
assign o_afe_tx_reg7 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_tx_reg7;
assign o_afe_tx_reg8 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_tx_reg8;
assign o_afe_tx_reg9 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_tx_reg9;
assign o_afe_tx_reg10 = (scan_iddq_mode | scan_ats_mode) ? 8'd0: i_afe_tx_reg10;
assign o_afe_tx_reg11 = (scan_iddq_mode | scan_ats_mode) ? 8'd0: i_afe_tx_reg11;
assign o_afe_tx_reg12 = (scan_iddq_mode | scan_ats_mode) ? 8'd0: i_afe_tx_reg12;
assign o_afe_rx_reg0 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_rx_reg0;
assign o_afe_rx_reg1 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_rx_reg1;
assign o_afe_rx_reg2 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_rx_reg2;
assign o_afe_rx_reg3 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_rx_reg3;
assign o_afe_rx_reg4 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_rx_reg4;
assign o_afe_rx_reg5 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_rx_reg5;
assign o_afe_rx_reg6 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_rx_reg6;
assign o_afe_bc_reg0 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_bc_reg0;
assign o_afe_bc_reg1 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_bc_reg1;
assign o_afe_bc_reg2 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_bc_reg2;
assign o_afe_bc_reg3 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_bc_reg3;
assign o_afe_bc_reg4 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_bc_reg4;
assign o_afe_bc_reg5 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_bc_reg5;
assign o_afe_bc_reg6 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_bc_reg6;
assign o_afe_pll_reg0 = (scan_iddq_mode | scan_ats_mode) ? 8'd0: i_afe_pll_reg0;
assign o_afe_pll_reg1 = (scan_iddq_mode | scan_ats_mode) ? 8'd0: i_afe_pll_reg1;
assign o_afe_pll_reg2 = (scan_iddq_mode | scan_ats_mode) ? 8'd0: i_afe_pll_reg2;
assign o_afe_pll_reg3 = (scan_iddq_mode | scan_ats_mode) ? 8'd0: i_afe_pll_reg3;
assign o_afe_pll_reg4 = (scan_iddq_mode | scan_ats_mode) ? 8'd0: i_afe_pll_reg4;
assign o_afe_pll_reg5 = (scan_iddq_mode | scan_ats_mode) ? 8'd0: i_afe_pll_reg5;
assign o_afe_bg_reg0 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_bg_reg0;
assign o_afe_bg_reg1 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_bg_reg1;
assign o_afe_bg_reg2 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_bg_reg2;
assign o_afe_bg_reg3 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_bg_reg3;
assign o_afe_calib_reg0 = (scan_iddq_mode | scan_ats_mode) ? 8'd0 : i_afe_calib_reg0;
assign o_tm_clk_gate_ovr = (scan_iddq_mode | scan_ats_mode) ? 5'd0 : i_tm_clk_gate_ovr;
endmodule
module async_ctrl_if_mst_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
   input            clock,
   input            reset_n,
   input            sync_req,
   output           sync_ack,
   output           async_req,
   input            async_ack
);
   wire async_ack_synced;
   reg  async_ack_synced_d1;
   wire async_ack_rising;
   reg [3:0]    st_current_state, st_next_state;    
   parameter [3:0]    
      ST_MST_ASYNC_ACK_FALL_WAIT = 4'b00_0_0, 
      ST_MST_IDLE                = 4'b01_0_0, 
      ST_MST_ASYNC_REQ           = 4'b00_0_1, 
      ST_MST_SYNC_REQ_WAIT       = 4'b00_1_1, 
      ST_MST_ASYNC_REQ_RELEASE   = 4'b10_0_0;
   phy_data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(
      .RESET_VALUE (1'b1)
   )
   u_phy_data_sync_async_ack
   (   
      .clock   (clock),
      .reset_n (reset_n),
      .d_in    (async_ack), 
      .d_out   (async_ack_synced) 
   );
   always @(posedge clock or negedge reset_n) 
   begin
      if (!reset_n)
         async_ack_synced_d1 <= 1'b1;
      else
         async_ack_synced_d1 <= async_ack_synced;
   end    
   assign async_ack_rising =  async_ack_synced && !async_ack_synced_d1;
   always @(posedge clock or negedge reset_n) 
   begin
      if (!reset_n)
         st_current_state  <= ST_MST_ASYNC_ACK_FALL_WAIT;
      else
         st_current_state  <= st_next_state;
   end    
   always @(*)
   begin
      st_next_state = st_current_state;
      case(st_current_state)
         ST_MST_ASYNC_ACK_FALL_WAIT :
         begin
            if (~async_ack_synced_d1)
               st_next_state = ST_MST_IDLE;
            else
               st_next_state = ST_MST_ASYNC_ACK_FALL_WAIT;
         end
         ST_MST_IDLE :
         begin
            if (sync_req)
               st_next_state = ST_MST_ASYNC_REQ;
            else 
               st_next_state = ST_MST_IDLE;
         end
         ST_MST_ASYNC_REQ :
         begin
            if (async_ack_rising)
               st_next_state = ST_MST_SYNC_REQ_WAIT;
            else
               st_next_state = ST_MST_ASYNC_REQ;
         end
         ST_MST_SYNC_REQ_WAIT :
         begin
            if (!sync_req)
               st_next_state = ST_MST_ASYNC_REQ_RELEASE;
            else
               st_next_state = ST_MST_SYNC_REQ_WAIT;
         end
         ST_MST_ASYNC_REQ_RELEASE :
         begin
            st_next_state = ST_MST_ASYNC_ACK_FALL_WAIT;
         end
      endcase
   end
   assign async_req = st_current_state[0];
   assign sync_ack  = st_current_state[1];
endmodule
module tap_custom_reg_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r 
#(
  parameter WIDTH = 4 ,
  parameter RESET_VALUE = 4'b0000
)(
 output reg [WIDTH-1:0] pdo,
 output                 sdo,
 input      [WIDTH-1:0] pdi,
 input                  sdi,
 input                  clockdr,
 input                  shiftdr,
 input                  updatedr,
 input                  capturedr,
 input                  enable,
 input                  reset_n
);
  reg [WIDTH-1:0] shiftreg;
  assign shiftdr_gated   = shiftdr   & enable;
  assign capturedr_gated = capturedr & enable;
  always@ (posedge clockdr or negedge reset_n )
    begin
       if (!reset_n) 
         begin
           shiftreg <= RESET_VALUE;
         end
       else if (shiftdr_gated)
         begin
           shiftreg <=  {sdi,shiftreg[WIDTH-1:1]};
         end
       else if (capturedr_gated)
         begin
           shiftreg <=  pdi;
         end
       else 
         begin
           shiftreg <= shiftreg ;
         end
    end
  always@ (posedge updatedr or negedge reset_n )
    begin
     if (!reset_n) 
       begin
         pdo     <= RESET_VALUE;
       end
     else 
       begin
         pdo     <= shiftreg ;
       end
    end
  assign sdo = shiftreg[0];
endmodule 
module udc_testmode_reg_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
  AFE_BG_REG0_bg_ana_reg0_OUT,
  AFE_BG_REG1_bg_ana_reg1_OUT,
  AFE_BG_REG2_bg_ana_reg2_OUT,
  AFE_BG_REG3_bg_ana_reg3_OUT,
  AFE_CALIB_REG0_calib_ana_reg0_OUT,
  AFE_BC_REG0_bc_ana_reg0_OUT,
  AFE_BC_REG1_bc_ana_reg1_OUT,
  AFE_BC_REG2_bc_ana_reg2_OUT,
  AFE_BC_REG3_bc_ana_reg3_OUT,
  AFE_BC_REG4_bc_ana_reg4_OUT,
  AFE_BC_REG5_bc_ana_reg5_OUT,
  AFE_BC_REG6_bc_ana_reg6_OUT,
  AFE_PLL_REG0_afe_pll_reg0_OUT,
  AFE_PLL_REG1_afe_pll_reg1_OUT,
  AFE_PLL_REG2_afe_pll_reg2_OUT,
  AFE_PLL_REG3_afe_pll_reg3_OUT,
  AFE_PLL_REG4_afe_pll_reg4_OUT,
  AFE_PLL_REG5_afe_pll_reg5_OUT,
  AFE_BG_REG4_bg_ana_reg4_IN,
  AFE_CALIB_REG1_calib_ana_reg1_IN,
  AFE_BC_REG7_bc_ana_reg7_IN,
  AFE_PLL_REG6_pll_ana_reg6_IN,
  AFE_UNUSED_REG2_unused_OUT,
  AFE_UNUSED_REG3_unused_OUT,
  AFE_TX_REG0_tx_ana_reg0_OUT,
  AFE_TX_REG1_tx_ana_reg1_OUT,
  AFE_TX_REG2_tx_ana_reg2_OUT,
  AFE_TX_REG3_tx_ana_reg3_OUT,
  AFE_TX_REG4_tx_ana_reg4_OUT,
  AFE_TX_REG5_tx_ana_reg5_OUT,
  AFE_TX_REG6_tx_ana_reg6_OUT,
  AFE_TX_REG7_tx_ana_reg7_OUT,
  AFE_TX_REG8_tx_ana_reg8_OUT,
  AFE_TX_REG9_tx_ana_reg9_OUT,
  AFE_TX_REG10_tx_ana_reg10_OUT,
  AFE_TX_REG11_tx_ana_reg11_OUT,
  AFE_TX_REG12_tx_ana_reg12_OUT,
  AFE_RX_REG0_rx_ana_reg0_OUT,
  AFE_RX_REG1_rx_ana_reg1_OUT,
  AFE_RX_REG2_rx_ana_reg2_OUT,
  AFE_RX_REG3_rx_ana_reg3_OUT,
  AFE_RX_REG4_rx_ana_reg4_OUT,
  AFE_RX_REG5_rx_ana_reg5_OUT,
  AFE_RX_REG6_rx_ana_reg6_OUT,
  AFE_TX_REG13_tx_ana_reg13_IN,
  AFE_TX_REG14_tx_ana_reg14_IN,
  AFE_RX_REG7_rx_ana_reg7_IN,
  AFE_RX_REG8_rx_ana_reg8_IN,
  AFE_UNUSED_REG0_unused_OUT,
  AFE_UNUSED_REG1_unused_OUT,
  CALIB_REG0_calib_clk_OUT,
  CALIB_REG0_calib_clk_en_OUT,
  CALIB_REG0_comp_out_OUT,
  CALIB_REG0_init_wait_ovr_OUT,
  CALIB_REG0_init_wait_ovr_en_OUT,
  CALIB_REG1_unused_OUT,
  CALIB_REG1_calib_code_OUT,
  CALIB_REG1_calib_code_en_OUT,
  BC_REG0_unused_OUT,
  BC_REG0_adp_en_OUT,
  BC_REG0_adp_en_en_OUT,
  BC_REG0_id_pullup_OUT,
  BC_REG0_id_pullup_en_OUT,
  BC_REG1_ADP_source_I_en_OUT,
  BC_REG1_ADP_source_I_en_ctrl_OUT,
  BC_REG1_ADP_sink_I_en_OUT,
  BC_REG1_ADP_sink_I_en_ctrl_OUT,
  BC_REG1_ADP_sense_en_OUT,
  BC_REG1_ADP_sense_en_ctrl_OUT,
  BC_REG1_ADP_probe_en_OUT,
  BC_REG1_ADP_probe_en_ctrl_OUT,
  BC_REG2_idm_sink_en_value_OUT,
  BC_REG2_idm_sink_en_cntrl_OUT,
  BC_REG2_idp_sink_en_value_OUT,
  BC_REG2_idp_sink_en_cntrl_OUT,
  BC_REG2_idp_src_en_value_OUT,
  BC_REG2_idp_src_en_cntrl_OUT,
  BC_REG2_bc_en_value_OUT,
  BC_REG2_bc_en_cntrl_OUT,
  BC_REG3_dm_vdat_ref_comp_en_value_OUT,
  BC_REG3_dm_vdat_ref_comp_en_cntrl_OUT,
  BC_REG3_dp_vdat_ref_comp_en_value_OUT,
  BC_REG3_dp_vdat_ref_comp_en_cntrl_OUT,
  BC_REG3_vdp_src_en_value_OUT,
  BC_REG3_vdp_src_en_cntrl_OUT,
  BC_REG3_vdm_src_en_value_OUT,
  BC_REG3_vdm_src_en_cntrl_OUT,
  BC_REG4_rid_a_ref_en_value_OUT,
  BC_REG4_rid_a_ref_en_cntrl_OUT,
  BC_REG4_rid_float_ref_en_value_OUT,
  BC_REG4_rid_float_ref_en_cntrl_OUT,
  BC_REG4_rid_nonfloat_comp_en_value_OUT,
  BC_REG4_rid_nonfloat_comp_en_cntrl_OUT,
  BC_REG4_rid_float_comp_en_value_OUT,
  BC_REG4_rid_float_comp_en_cntrl_OUT,
  BC_REG5_rid_b_c_comp_en_value_OUT,
  BC_REG5_rid_b_c_comp_en_cntrl_OUT,
  BC_REG5_rid_a_comp_en_value_OUT,
  BC_REG5_rid_a_comp_en_cntrl_OUT,
  BC_REG5_rid_c_ref_en_value_OUT,
  BC_REG5_rid_c_ref_en_cntrl_OUT,
  BC_REG5_rid_b_ref_en_value_OUT,
  BC_REG5_rid_b_ref_en_cntrl_OUT,
  BC_REG6_bc_delay_value_OUT,
  BC_REG6_bc_delay_en_OUT,
  BC_REG6_DM_vlgc_comp_en_value_OUT,
  BC_REG6_DM_vlgc_comp_en_cntrl_OUT,
  BC_REG7_rid_nonfloat_src_en_value_OUT,
  BC_REG7_rid_nonfloat_src_en_cntrl_OUT,
  BC_REG7_rid_float_src_en_value_OUT,
  BC_REG7_rid_float_src_en_cntrl_OUT,
  BC_REG7_reset_cntrl_OUT,
  BC_REG7_DM_current_src_en_value_OUT,
  BC_REG7_DM_current_src_en_cntrl_OUT,
  BC_REG7_unused_OUT,
  TED_REG0_calib_code_up_en_OUT,
  TED_REG0_Delay_value_OUT,
  TED_REG0_delay_en_OUT,
  TED_REG0_calib_done_OUT,
  TED_REG0_caliib_done_en_OUT,
  TED_REG0_comp_out_down_inv_OUT,
  TED_REG0_comp_out_up_inv_OUT,
  TED_REG1_calib_code_down_OUT,
  TED_REG1_calib_code_up_OUT,
  TED_REG2_unused_OUT,
  TED_REG2_calib_mode_dn_OUT,
  TED_REG2_calib_mode_dn_en_OUT,
  TED_REG2_calib_mode_up_OUT,
  TED_REG2_calib_mode_up_en_OUT,
  TED_REG2_calib_code_dn_en_OUT,
  CALIB_REG2_unused_IN,
  CALIB_REG2_calib_cmp_IN,
  CALIB_REG2_calib_pd_IN,
  CALIB_REG2_calib_clock_IN,
  CALIB_REG2_calib_done_IN,
  CALIB_REG3_unused_IN,
  CALIB_REG3_bg_unit_res_calib_IN,
  BC_REG8_dcd_comp_IN,
  BC_REG8_adp_sense_IN,
  BC_REG8_adp_probe_IN,
  BC_REG8_bvalid_IN,
  BC_REG8_vbusvalid_IN,
  BC_REG8_iddig_IN,
  BC_REG8_unused_IN,
  BC_REG9_o_dm_vdat_ref_comp_en_IN,
  BC_REG9_o_dp_vdat_ref_comp_en_IN,
  BC_REG9_o_vdm_src_en_IN,
  BC_REG9_o_vdp_src_en_IN,
  BC_REG9_o_idm_sink_en_IN,
  BC_REG9_o_idp_sink_en_IN,
  BC_REG9_o_idp_src_en_IN,
  BC_REG9_o_bc_en_IN,
  BC_REG10_o_rid_b_c_comp_en_IN,
  BC_REG10_o_rid_a_comp_en_IN,
  BC_REG10_o_rid_c_ref_en_IN,
  BC_REG10_o_rid_b_ref_en_IN,
  BC_REG10_o_rid_a_ref_en_IN,
  BC_REG10_o_rid_float_ref_en_IN,
  BC_REG10_o_rid_nonfloat_src_en_IN,
  BC_REG10_o_rid_float_src_en_IN,
  BC_REG11_o_idm_src_en_IN,
  BC_REG11_i_afe_rxdp_ana_IN,
  BC_REG11_i_afe_rxdm_ana_IN,
  BC_REG11_i_rid_b_c_comp_sts_IN,
  BC_REG11_i_rid_a_comp_sts_IN,
  BC_REG11_i_dm_vdat_ref_comp_sts_IN,
  BC_REG11_i_dp_vdat_ref_comp_sts_IN,
  BC_REG11_o_dm_vlgc_comp_en_IN,
  BC_REG12_rid_gnd_comp_sts_IN,
  BC_REG12_rid_float_comp_sts_IN,
  BC_REG12_rid_c_comp_sts_IN,
  BC_REG12_rid_b_comp_sts_IN,
  BC_REG12_rid_a_comp_sts_IN,
  BC_REG12_dm_vlgc_comp_sts_IN,
  BC_REG12_dm_vdat_ref_comp_sts_IN,
  BC_REG12_dp_vdat_ref_comp_sts_IN,
  TED_REG3_calib_code_down_IN,
  TED_REG3_comparator_down_IN,
  TED_REG3_calib_done_down_IN,
  TED_REG3_unused_IN,
  TED_REG4_calib_code_up_IN,
  TED_REG4_comparator_up_IN,
  TED_REG4_calib_done_up_IN,
  TED_REG4_unused_IN,
  DIG_UNUSED_REG0_unused_OUT,
  DIG_UNUSED_REG1_unused_OUT,
  DIG_UNUSED_REG2_unused_OUT,
  DIG_UNUSED_REG3_unused_OUT,
  INTERRUPT_REG1_irsr_OUT,
  INTERRUPT_REG1_isr_OUT,
  INTERRUPT_REG1_unused_OUT,
  INTERRUPT_REG2_unused_OUT,
  INTERRUPT_REG2_imr_OUT,
  i_irsr_in,
  i_isr_in,
  RX_REG0_fsls_no_eop_timeout_OUT,
  RX_REG0_fsls_timeout_en_OUT,
  RX_REG0_hs_sync_det_bits_OUT,
  RX_REG0_fs_eop_se0_threshold_OUT,
  RX_REG0_fs_eop_se0_en_OUT,
  RX_REG1_ls_eop_se0_threshold_OUT,
  RX_REG1_ls_eop_se0_en_OUT,
  RX_REG1_fs_no_eop_timeout_en_OUT,
  TX_REG0_unused_OUT,
  TX_REG0_fs_preamble_en_OUT,
  TX_REG0_sof_extension_OUT,
  TX_REG0_sof_extension_en_OUT,
  TX_REG1_preamble_value_OUT,
  CDR_REG0_unused_OUT,
  CDR_REG0_pll_clkdiv_OUT,
  CDR_REG0_pll_clkdiv_en_OUT,
  CDR_REG0_squelch_delay_OUT,
  CDR_REG0_squelch_delay_en_OUT,
  CDR_REG1_unused_OUT,
  CDR_REG1_calib_comp_out_OUT,
  CDR_REG1_calib_spc_threshold_OUT,
  CDR_REG1_calib_spc_threshold_en_OUT,
  CDR_REG1_calib_iteration_OUT,
  CDR_REG1_dynamic_calib_en_OUT,
  CDR_REG2_unused_OUT,
  CDR_REG2_hsrx_en_del_OUT,
  CDR_REG2_hsrx_en_del_en_OUT,
  CDR_REG2_hsrx_en_OUT,
  CDR_REG2_hsrx_en_en_OUT,
  CDR_REG2_calib_clock_OUT,
  CDR_REG2_calib_clock_en_OUT,
  CDR_REG2_calib_out_en_OUT,
  CDR_REG3_calib_active_OUT,
  CDR_REG3_calib_done_OUT,
  CDR_REG3_calib_code_OUT,
  CDR_REG4_clk_gate_value_OUT,
  CDR_REG4_clk_gate_en_OUT,
  CDR_REG4_clk_gate_sq_mask_OUT,
  CDR_REG4_latency_threshold_OUT,
  CDR_REG4_latency_threshold_en_OUT,
  CDR_REG4_decision_error_en_OUT,
  CDR_REG4_filter_en_OUT,
  CDR_REG5_unused_OUT,
  CDR_REG5_sample_5x_en_OUT,
  CDR_REG5_small_pulse_OUT,
  CDR_REG5_small_pulse_en_OUT,
  CDR_REG6_unused_OUT,
  CDR_REG7_unused_OUT,
  CDR_REG8_unused_OUT,
  RX_REG2_eb_error_IN,
  RX_REG2_cdr_error_IN,
  RX_REG2_sync_detected_IN,
  RX_REG2_eop_detected_IN,
  RX_REG2_hs_eop_condition_IN,
  RX_REG2_normal_eop_IN,
  RX_REG2_alignment_error_IN,
  RX_REG2_no_eop_IN,
  RX_REG3_hs_eop_detected_IN,
  RX_REG3_se0_validated_IN,
  RX_REG3_lsfs_eop_detected_IN,
  RX_REG3_bit_unstuff_error_IN,
  RX_REG3_rx_state_bitunstuff_IN,
  RX_REG3_start_flag_IN,
  RX_REG4_rxactive_reg_IN,
  RX_REG4_deassert_rxactive_reg_IN,
  RX_REG4_unused_IN,
  RX_REG5_sie_cnt_upper_IN,
  RX_REG6_phy_cnt_upper_IN,
  RX_REG7_phy_cnt_lower_IN,
  RX_REG7_sie_cnt_lower_IN,
  TX_REG2_tx_hs_state_IN,
  TX_REG2_eop_transmitted_IN,
  TX_REG2_hs_bitstuff_en_IN,
  TX_REG2_resume_eop_IN,
  TX_REG2_remote_wakeup_IN,
  TX_REG3_tx_lsfs_state_IN,
  TX_REG3_pd_state_IN,
  TX_REG3_preamble_sent_IN,
  TX_REG4_unused_IN,
  TX_REG4_lsfs_bitstuff_en_IN,
  TX_REG4_ls_keep_alive_IN,
  CDR_REG9_UNUSED_IN,
  CDR_REG9_i_ana_comp_out_IN,
  CDR_REG9_sampler_calib_done_IN,
  CDR_REG9_ana_calib_active_IN,
  CDR_REG10_unused_IN,
  CDR_REG10_calib_code_IN,
  CDR_REG11_small_pulse_IN,
  CDR_REG11_o_hsrx_rec_dicision_error_IN,
  CDR_REG11_o_ana_clk_gate_IN,
  CDR_REG11_receive_start_IN,
  CDR_REG11_i_ana_ted_squelch_IN,
  CDR_RE12_unused_IN,
  DIG_TXRX_UNUSED_REG0_unused_OUT,
  DIG_TXRX_UNUSED_REG1_unused_OUT,
  DIG_TXRX_UNUSED_REG2_unused_OUT,
  DIG_TXRX_UNUSED_REG3_unused_OUT,
  PLL_REG0_initial_wait_time_OUT,
  PLL_REG1_rst_fdbk_div_delay_value_OUT,
  PLL_REG1_rst_fdbk_div_delay_en_OUT,
  PLL_REG1_fbdiv_en_OUT,
  PLL_REG1_initial_wait_time_en_OUT,
  PLL_REG2_unused_OUT,
  PLL_REG2_vco_settling_time_en_OUT,
  PLL_REG2_vco_settling_time_OUT,
  PLL_REG3_fbdiv_value_OUT,
  PLL_REG4_unused_OUT,
  PLL_REG4_pll_lock_time_15_OUT,
  PLL_REG4_pd_pfd_value_OUT,
  PLL_REG4_pd_pfd_en_OUT,
  PLL_REG4_pll_lock_en_OUT,
  PLL_REG4_pll_lock_value_OUT,
  PLL_REG4_coarsedone_en_OUT,
  PLL_REG4_coarsedone_value_OUT,
  PLL_REG5_startloop_en_4_0_OUT,
  PLL_REG5_startloop_en_5_OUT,
  PLL_REG5_startloop_5_OUT,
  PLL_REG5_startloop_4_0_OUT,
  PLL_REG6_unused_OUT,
  PLL_REG6_coarse_code_sel_OUT,
  PLL_REG6_lsb_error_0p5_OUT,
  PLL_REG6_big_jump_en_OUT,
  PLL_REG6_vco_cnt_window_value_OUT,
  PLL_REG6_vco_cnt_window_en_OUT,
  PLL_REG6_rst_fdbk_div_value_OUT,
  PLL_REG6_rst_fdbk_div_en_OUT,
  PLL_REG7_unused_OUT,
  PLL_REG7_refclk_sel_OUT,
  PLL_REG7_refclk_sel_en_OUT,
  PLL_REG8_coarse_code_OUT,
  PLL_REG9_coarse_code_OUT,
  PLL_REG9_V2I_code_en_OUT,
  PLL_REG9_V2I_code_OUT,
  PLL_REG10_unused_OUT,
  PLL_REG10_ipdiv_value_OUT,
  PLL_REG10_ipdiv_en_OUT,
  PLL_REG10_coarse_code_en_OUT,
  PLL_REG11_pll_standby_OUT,
  PLL_REG11_pll_standby_en_OUT,
  PLL_REG11_pll_pd_OUT,
  PLL_REG11_pll_pd_en_OUT,
  PLL_REG11_pll_pso_del_OUT,
  PLL_REG11_pll_pso_del_en_OUT,
  PLL_REG11_pll_pso_OUT,
  PLL_REG11_pll_pso_en_OUT,
  PLL_REG12_unused_OUT,
  PLL_REG12_pll_ldo_ref_en_OUT,
  PLL_REG12_pll_ldo_ref_en_en_OUT,
  PLL_REG12_pll_ldo_core_en_OUT,
  PLL_REG12_pll_ldo_core_en_en_OUT,
  PLL_REG12_pll_pd_ana_OUT,
  PLL_REG12_pll_pd_ana_en_OUT,
  PLL_REG13_pll_clkon_OUT,
  PLL_REG13_pll_ldo_ref_core_OUT,
  PLL_REG13_pll_ldo_ref_core_en_OUT,
  PLL_REG14_pll_ldo_cnt_threshold_OUT,
  PLL_REG14_pll_ldo_cnt_threshold_en_OUT,
  PLL_REG14_pll_ldo_iso_cnt_threshold_OUT,
  PLL_REG14_pll_ldo_iso_cnt_threshold_en_OUT,
  PLL_UNUSED_REG0_unused_OUT,
  PLL_UNUSED_REG1_unused_OUT,
  PLL_REG15_pll_lock_IN,
  PLL_REG15_coarsedone_IN,
  PLL_REG15_vco_cnt_win_IN,
  PLL_REG15_rst_fdbk_div_IN,
  PLL_REG15_unused_IN,
  PLL_REG15_pd_pfd_IN,
  PLL_REG15_startloop_IN,
  PLL_REG15_coarse_code_8_IN,
  PLL_REG16_coarse_code_IN,
  PLL_UNUSED_REG2_unused_IN,
  UTMI_REG0_loopback_sel_OUT,
  UTMI_REG0_loopback_en_OUT,
  UTMI_REG0_bist_mode_sel_OUT,
  UTMI_REG0_bist_en_OUT,
  UTMI_REG1_bist_err_OUT,
  UTMI_REG1_bist_soft_rst_OUT,
  UTMI_REG1_tx_lsfs_soft_rst_OUT,
  UTMI_REG1_tx_hs_soft_rst_OUT,
  UTMI_REG1_clkdiv_soft_rst_OUT,
  UTMI_REG1_calib_soft_rst_OUT,
  UTMI_REG1_phy_soft_rst_OUT,
  UTMI_REG2_rx_cntrl_soft_rst_OUT,
  UTMI_REG2_shift_reg_soft_rst_OUT,
  UTMI_REG2_bitunstuff_soft_rst_OUT,
  UTMI_REG2_nrzi_dec_soft_rst_OUT,
  UTMI_REG2_eop_det_soft_rst_OUT,
  UTMI_REG2_sync_det_soft_rst_OUT,
  UTMI_REG2_lsfs_dll_soft_rst_OUT,
  UTMI_REG2_rx_hs_soft_rst_OUT,
  UTMI_REG3_hs_rx_err_OUT,
  UTMI_REG3_ls_linestate_fil_en_OUT,
  UTMI_REG3_fs_linestate_fil_cnt_OUT,
  UTMI_REG3_fs_linestate_fil_en_OUT,
  UTMI_REG4_ls_linestate_fil_cnt_OUT,
  UTMI_REG5_bist_mode_en_OUT,
  UTMI_REG5_bist_on_OUT,
  UTMI_REG5_hstx_boost_deamp_off_OUT,
  UTMI_REG5_hstx_boost_OUT,
  UTMI_REG5_hs_samp_OUT,
  UTMI_REG5_hs_samp_en_OUT,
  UTMI_REG5_hsrx_OUT,
  UTMI_REG5_hsrx_en_OUT,
  UTMI_REG6_vbusvalid_cntrl_OUT,
  UTMI_REG6_vbusvalid_l3_dev_en_OUT,
  UTMI_REG6_hs_drven_threshold_OUT,
  UTMI_REG6_hs_drven_th_en_OUT,
  UTMI_REG7_hstx_bc_mode_OUT,
  UTMI_REG7_hstx_bc_en_OUT,
  UTMI_REG7_hstx_chirp_mode_OUT,
  UTMI_REG7_hstx_chirp_en_OUT,
  UTMI_REG7_hstx_en_del_OUT,
  UTMI_REG7_hstx_en_del_en_OUT,
  UTMI_REG7_hstx_OUT,
  UTMI_REG7_hstx_en_OUT,
  UTMI_REG8_hs_term_OUT,
  UTMI_REG8_hs_term_en_OUT,
  UTMI_REG8_hstx_data_OUT,
  UTMI_REG8_hstx_data_en_OUT,
  UTMI_REG8_hstx_drv_OUT,
  UTMI_REG8_hstx_drv_en_OUT,
  UTMI_REG8_hstx_predrv_OUT,
  UTMI_REG8_hstx_predrv_en_OUT,
  UTMI_REG9_clkoff_en_OUT,
  UTMI_REG9_sdc_space_OUT,
  UTMI_REG9_sdc_space_en_OUT,
  UTMI_REG9_hstx_en_del_th_OUT,
  UTMI_REG9_hstx_en_del_th_en_OUT,
  UTMI_REG10_pll_clkon_OUT,
  UTMI_REG10_pll_clkon_en_OUT,
  UTMI_REG10_bg_pd_bg_ok_OUT,
  UTMI_REG10_bg_pd_bg_ok_en_OUT,
  UTMI_REG10_lsfs_serx_OUT,
  UTMI_REG10_lsfs_serx_en_OUT,
  UTMI_REG10_lsfs_rx_OUT,
  UTMI_REG10_lsfs_rx_en_OUT,
  UTMI_REG11_clean_linestate_serx_mask_en_OUT,
  UTMI_REG11_serx_mask_en_OUT,
  UTMI_REG11_serx_mask_threshold_OUT,
  UTMI_REG11_lsfs_tx_OUT,
  UTMI_REG11_lsfs_tx_en_OUT,
  UTMI_REG11_fsls_edgesel_OUT,
  UTMI_REG11_fsls_edgesel_en_OUT,
  UTMI_REG12_serx_bias_en_OUT,
  UTMI_REG12_fsls_tx_data_OUT,
  UTMI_REG12_fsls_tx_data_en_OUT,
  UTMI_REG12_fsls_tx_se0_OUT,
  UTMI_REG12_fsls_tx_se0_en_OUT,
  UTMI_REG12_fsls_tx_drv_OUT,
  UTMI_REG12_fsls_tx_drv_en_OUT,
  UTMI_REG13_fsls_serialmode_pullup2_OUT,
  UTMI_REG13_fsls_serialmode_pullup2_en_OUT,
  UTMI_REG13_dm_pulldown_OUT,
  UTMI_REG13_dm_pulldown_en_OUT,
  UTMI_REG13_dp_pulldown_OUT,
  UTMI_REG13_dp_pulldown_en_OUT,
  UTMI_REG13_lane_reverse_OUT,
  UTMI_REG13_lane_reverse_en_OUT,
  UTMI_REG14_dm_pullup2_OUT,
  UTMI_REG14_dm_pullup2_en_OUT,
  UTMI_REG14_dp_pullup2_OUT,
  UTMI_REG14_dp_pullup2_en_OUT,
  UTMI_REG14_dm_pullup1_OUT,
  UTMI_REG14_dm_pullup1_en_OUT,
  UTMI_REG14_dp_pullup1_OUT,
  UTMI_REG14_dp_pullup1_en_OUT,
  UTMI_REG15_txvalid_gate_threshold_fs_OUT,
  UTMI_REG15_txvalid_gate_threshold_hs_OUT,
  UTMI_REG15_ted_en_value_OUT,
  UTMI_REG15_ted_en_cnt_OUT,
  UTMI_REG15_ed_en_value_OUT,
  UTMI_REG15_ed_en_cnt_OUT,
  UTMI_REG16_unused_OUT,
  UTMI_REG17_squelch_count_idle_OUT,
  UTMI_REG17_squelch_count_idle_en_OUT,
  UTMI_REG17_tx_sq_cnt_OUT,
  UTMI_REG17_tx_sq_cnt_en_OUT,
  UTMI_REG18_sleep_value_OUT,
  UTMI_REG18_sleep_en_OUT,
  UTMI_REG18_bist_powerup_OUT,
  UTMI_REG18_bist_powerup_en_OUT,
  UTMI_REG18_powerup_en_OUT,
  UTMI_REG18_unused_OUT,
  UTMI_REG18_clipper_en_OUT,
  UTMI_REG18_clipper_en_en_OUT,
  UTMI_REG19_unused_OUT,
  UTMI_REG19_ted_sw_en_OUT,
  UTMI_REG20_hostdiscon_rst_reg_OUT,
  UTMI_REG20_hostdiscon_rst_reg_en_OUT,
  UTMI_REG20_calib_rst_dt_OUT,
  UTMI_REG20_calib_rst_dt_en_OUT,
  UTMI_REG21_calib_triger_posedge_OUT,
  UTMI_REG21_auto_cal_enable_OUT,
  UTMI_REG21_absvalid_OUT,
  UTMI_REG21_absvalid_en_OUT,
  UTMI_REG21_vbusvalid_OUT,
  UTMI_REG21_vbusvalid_en_OUT,
  UTMI_REG21_suspendm_OUT,
  UTMI_REG21_suspendm_en_OUT,
  UTMI_REG22_bccalib_offset_OUT,
  UTMI_REG23_hscalib_offset_OUT,
  UTMI_REG24_fscalib_offset_OUT,
  UTMI_REG25_unused_OUT,
  UTMI_REG25_hscalib_OUT,
  UTMI_REG26_unused_OUT,
  UTMI_REG26_fscalib_OUT,
  UTMI_REG27_unused_OUT,
  UTMI_REG27_bccalib_OUT,
  UTMI_REG28_cdr_eb_wr_reset_OUT,
  UTMI_REG28_unused_OUT,
  UTMI_REG29_unused_OUT,
  UTMI_REG29_pll_standalone_OUT,
  UTMI_REG29_pll_standalone_en_OUT,
  UTMI_REG29_spare_out_OUT,
  UTMI_REG30_unused_OUT,
  UTMI_REG30_pll_480_clock_gate_ovr_OUT,
  UTMI_REG30_scan_ats_hs_clock_gate_ovr_OUT,
  UTMI_REG30_vco_pll_clock_gate_ovr_OUT,
  UTMI_REG30_dig_div_refclock_gate_ovr_OUT,
  UTMI_REG30_fb_clock_gate_ovr_OUT,
  UTMI_REG30_ana_div_refclock_gate_ovr_OUT,
  UTMI_REG30_hs_clock_gate_ovr_OUT,
  UTMI_UNUSED_REG0_unused_OUT,
  UTMI_UNUSED_REG1_unused_OUT,
  UTMI_UNUSED_REG2_unused_OUT,
  UTMI_UNUSED_REG3_unused_OUT,
  UTMI_REG31_unused_IN,
  UTMI_REG31_bist_error_IN,
  UTMI_REG31_bist_complete_IN,
  UTMI_REG32_bist_err_count_IN,
  UTMI_REG33_bg_powergood_IN,
  UTMI_REG33_afe_hsrx_diff_data_IN,
  UTMI_REG33_hsrx_en_IN,
  UTMI_REG33_hsrx_sampler_enable_IN,
  UTMI_REG33_chirp_mode_en_IN,
  UTMI_REG33_hstx_en_IN,
  UTMI_REG33_hstx_en_delayed_IN,
  UTMI_REG33_hstx_boost_deamp_off_IN,
  UTMI_REG34_o_dprpu1_en_IN,
  UTMI_REG34_o_dmrpu1_en_IN,
  UTMI_REG34_o_dprpu2_en_IN,
  UTMI_REG34_o_dmrpu2_en_IN,
  UTMI_REG34_o_dprpd_en_IN,
  UTMI_REG34_o_dmrpd_en_IN,
  UTMI_REG34_o_otgc_id_pullup_en_IN,
  UTMI_REG34_o_fs_edge_sel_IN,
  UTMI_REG35_i_afe_lsfsrx_ana_IN,
  UTMI_REG35_o_lsfstx_en_IN,
  UTMI_REG35_o_lsfsdrv_en_IN,
  UTMI_REG35_o_lsfs_ddi_IN,
  UTMI_REG35_o_assert_sezero_IN,
  UTMI_REG35_o_lsfsrx_en_IN,
  UTMI_REG35_o_serx_en_IN,
  UTMI_REG35_o_serx_bias_en_IN,
  UTMI_REG36_o_pll_pso_IN,
  UTMI_REG36_o_pll_pso_delay_IN,
  UTMI_REG36_o_pll_pd_IN,
  UTMI_REG36_o_pll_ipdiv_IN,
  UTMI_REG37_o_pll_fbdiv_value_IN,
  UTMI_REG38_o_pll_standby_IN,
  UTMI_REG38_o_pll_ldo_core_en_IN,
  UTMI_REG38_o_pll_ldo_ref_en_IN,
  UTMI_REG38_o_afe_suspendm_IN,
  UTMI_REG38_o_otgc_vbusvalid_en_IN,
  UTMI_REG38_o_otgc_absvalid_en_IN,
  UTMI_REG38_o_afe_clipper_en_IN,
  UTMI_REG38_o_pll_ldo_isolation_cntrl_IN,
  UTMI_REG39_unused_IN,
  UTMI_REG40_unused_IN,
  UTMI_REG41_i_ted_squelch_ana_IN,
  UTMI_REG41_i_usb2_rescal_calib_done_IN,
  UTMI_REG41_hs_calib_code_IN,
  UTMI_REG42_hs_sof_IN,
  UTMI_REG42_all_calib_done_IN,
  UTMI_REG42_fs_calib_code_IN,
  UTMI_REG43_ls_mode_IN,
  UTMI_REG43_fs_mode_pre_IN,
  UTMI_REG43_bc_calib_code_IN,
  UTMI_REG44_rstn_refclock_IN,
  UTMI_REG44_rstn_hs_clock_IN,
  UTMI_REG44_rstn_hs_tx_clock_IN,
  UTMI_REG44_rstn_byte_clock_IN,
  UTMI_REG44_rstn_sieclock_IN,
  UTMI_REG44_rstn_clkdiv_IN,
  UTMI_REG44_rstn_calib_clkdiv_IN,
  UTMI_REG44_udc_rstn_cdr_async_IN,
  UTMI_REG45_udc_calib_rstn_IN,
  UTMI_REG45_udc_apb_rstn_IN,
  UTMI_REG45_o_rstn_cdr_async_IN,
  UTMI_REG45_o_pll_calib_rstn_IN,
  UTMI_REG45_bist_mode_rstn_IN,
  UTMI_REG45_o_usb2_calib_rstn_IN,
  UTMI_REG45_udc_bc_calib_rstn_IN,
  UTMI_REG45_global_resetn_IN,
  UTMI_REG46_unused_IN,
  UTMI_REG46_recovery_cnt_en_IN,
  UTMI_REG46_clean_linestate_IN,
  UTMI_REG46_bc_state_machine_status_IN,
  UTMI_REG47_filter_cnt_en_IN,
  UTMI_REG47_host_opmode_IN,
  UTMI_REG47_dev_opmode_IN,
  UTMI_REG47_i_ded_ana_IN,
  UTMI_REG47_hs_hostdisconnect_IN,
  UTMI_REG47_lsfs_hostdisconnect_IN,
  UTMI_REG48_bist_tx_state_IN,
  UTMI_REG48_data_cnt_tx_IN,
  UTMI_REG49_bist_rx_state_IN,
  UTMI_REG49_data_cnt_rx_IN,
  UTMI_REG50_bist_top_state_IN,
  UTMI_REG50_inc_data_cnt_tx_IN,
  UTMI_REG50_inc_data_cnt_rx_IN,
  UTMI_REG50_o_bg_pd_IN,
  UTMI_REG50_o_bg_pd_bg_ok_IN,
  UTMI_REG51_powerdown_IN,
  UTMI_REG51_reset_IN,
  UTMI_REG51_suspendm_IN,
  UTMI_REG51_termselect_IN,
  UTMI_REG51_databus16_8_IN,
  UTMI_REG51_dppulldown_IN,
  UTMI_REG51_dmpulldown_IN,
  UTMI_REG52_lane_reverse_IN,
  UTMI_REG52_txbitstuffenable_IN,
  UTMI_REG52_txbitstuffenableh_IN,
  UTMI_REG52_xcvrselect_IN,
  UTMI_REG52_linestate_IN,
  UTMI_REG52_hostdisconnect_IN,
  UTMI_REG53_fslsserialmode_IN,
  UTMI_REG53_tx_enable_n_IN,
  UTMI_REG53_tx_dat_IN,
  UTMI_REG53_tx_se0_IN,
  UTMI_REG53_sleepm_IN,
  UTMI_REG53_unused_IN,
  UTMI_REG53_opmode_IN,
  UTMI_REG54_rx_dp_IN,
  UTMI_REG54_rx_dm_IN,
  UTMI_REG54_rx_rcv_IN,
  UTMI_REG54_unused_IN,
  UTMI_REG55_txvalidh_IN,
  UTMI_REG55_txvalid_IN,
  UTMI_REG55_txready_IN,
  UTMI_REG55_rxvalidh_IN,
  UTMI_REG55_rxvalid_IN,
  UTMI_REG55_rxactive_IN,
  UTMI_REG55_rxerror_IN,
  UTMI_REG55_unused_IN,
  UTMI_REG56_datain_upper_IN,
  UTMI_REG57_datain_lower_IN,
  UTMI_REG58_dataout_upper_IN,
  UTMI_REG59_dataout_lower_IN,
  UTMI_UNUSED_REG6_unused_IN,
  UTMI_UNUSED_REG7_unused_IN,
  PRDATA,
  PADDR,
  PWDATA,
  PWRITE,
  PSELx,
  PENABLE,
  PCLK,
  PRESETn
);
output [7:0] AFE_BG_REG0_bg_ana_reg0_OUT;
output [7:0] AFE_BG_REG1_bg_ana_reg1_OUT;
output [7:0] AFE_BG_REG2_bg_ana_reg2_OUT;
output [7:0] AFE_BG_REG3_bg_ana_reg3_OUT;
output [7:0] AFE_CALIB_REG0_calib_ana_reg0_OUT;
output [7:0] AFE_BC_REG0_bc_ana_reg0_OUT;
output [7:0] AFE_BC_REG1_bc_ana_reg1_OUT;
output [7:0] AFE_BC_REG2_bc_ana_reg2_OUT;
output [7:0] AFE_BC_REG3_bc_ana_reg3_OUT;
output [7:0] AFE_BC_REG4_bc_ana_reg4_OUT;
output [7:0] AFE_BC_REG5_bc_ana_reg5_OUT;
output [7:0] AFE_BC_REG6_bc_ana_reg6_OUT;
output [7:0] AFE_PLL_REG0_afe_pll_reg0_OUT;
output [7:0] AFE_PLL_REG1_afe_pll_reg1_OUT;
output [7:0] AFE_PLL_REG2_afe_pll_reg2_OUT;
output [7:0] AFE_PLL_REG3_afe_pll_reg3_OUT;
output [7:0] AFE_PLL_REG4_afe_pll_reg4_OUT;
output [7:0] AFE_PLL_REG5_afe_pll_reg5_OUT;
input  [7:0] AFE_BG_REG4_bg_ana_reg4_IN;
input  [7:0] AFE_CALIB_REG1_calib_ana_reg1_IN;
input  [7:0] AFE_BC_REG7_bc_ana_reg7_IN;
input  [7:0] AFE_PLL_REG6_pll_ana_reg6_IN;
output [7:0] AFE_UNUSED_REG2_unused_OUT;
output [7:0] AFE_UNUSED_REG3_unused_OUT;
output [7:0] AFE_TX_REG0_tx_ana_reg0_OUT;
output [7:0] AFE_TX_REG1_tx_ana_reg1_OUT;
output [7:0] AFE_TX_REG2_tx_ana_reg2_OUT;
output [7:0] AFE_TX_REG3_tx_ana_reg3_OUT;
output [7:0] AFE_TX_REG4_tx_ana_reg4_OUT;
output [7:0] AFE_TX_REG5_tx_ana_reg5_OUT;
output [7:0] AFE_TX_REG6_tx_ana_reg6_OUT;
output [7:0] AFE_TX_REG7_tx_ana_reg7_OUT;
output [7:0] AFE_TX_REG8_tx_ana_reg8_OUT;
output [7:0] AFE_TX_REG9_tx_ana_reg9_OUT;
output [7:0] AFE_TX_REG10_tx_ana_reg10_OUT;
output [7:0] AFE_TX_REG11_tx_ana_reg11_OUT;
output [7:0] AFE_TX_REG12_tx_ana_reg12_OUT;
output [7:0] AFE_RX_REG0_rx_ana_reg0_OUT;
output [7:0] AFE_RX_REG1_rx_ana_reg1_OUT;
output [7:0] AFE_RX_REG2_rx_ana_reg2_OUT;
output [7:0] AFE_RX_REG3_rx_ana_reg3_OUT;
output [7:0] AFE_RX_REG4_rx_ana_reg4_OUT;
output [7:0] AFE_RX_REG5_rx_ana_reg5_OUT;
output [7:0] AFE_RX_REG6_rx_ana_reg6_OUT;
input [7:0] AFE_TX_REG13_tx_ana_reg13_IN;
input [7:0] AFE_TX_REG14_tx_ana_reg14_IN;
input [7:0] AFE_RX_REG7_rx_ana_reg7_IN;
input [7:0] AFE_RX_REG8_rx_ana_reg8_IN;
output [7:0] AFE_UNUSED_REG0_unused_OUT;
output [7:0] AFE_UNUSED_REG1_unused_OUT;
output         CALIB_REG0_calib_clk_OUT;
output         CALIB_REG0_calib_clk_en_OUT;
output         CALIB_REG0_comp_out_OUT;
output [3:0]   CALIB_REG0_init_wait_ovr_OUT;
output         CALIB_REG0_init_wait_ovr_en_OUT;
output         CALIB_REG1_unused_OUT;
output [5:0]   CALIB_REG1_calib_code_OUT;
output         CALIB_REG1_calib_code_en_OUT;
output [3:0]   BC_REG0_unused_OUT;
output         BC_REG0_adp_en_OUT;
output         BC_REG0_adp_en_en_OUT;
output         BC_REG0_id_pullup_OUT;
output         BC_REG0_id_pullup_en_OUT;
output         BC_REG1_ADP_source_I_en_OUT;
output         BC_REG1_ADP_source_I_en_ctrl_OUT;
output         BC_REG1_ADP_sink_I_en_OUT;
output         BC_REG1_ADP_sink_I_en_ctrl_OUT;
output         BC_REG1_ADP_sense_en_OUT;
output         BC_REG1_ADP_sense_en_ctrl_OUT;
output         BC_REG1_ADP_probe_en_OUT;
output         BC_REG1_ADP_probe_en_ctrl_OUT;
output         BC_REG2_idm_sink_en_value_OUT;
output         BC_REG2_idm_sink_en_cntrl_OUT;
output         BC_REG2_idp_sink_en_value_OUT;
output         BC_REG2_idp_sink_en_cntrl_OUT;
output         BC_REG2_idp_src_en_value_OUT;
output         BC_REG2_idp_src_en_cntrl_OUT;
output         BC_REG2_bc_en_value_OUT;
output         BC_REG2_bc_en_cntrl_OUT;
output         BC_REG3_dm_vdat_ref_comp_en_value_OUT;
output         BC_REG3_dm_vdat_ref_comp_en_cntrl_OUT;
output         BC_REG3_dp_vdat_ref_comp_en_value_OUT;
output         BC_REG3_dp_vdat_ref_comp_en_cntrl_OUT;
output         BC_REG3_vdp_src_en_value_OUT;
output         BC_REG3_vdp_src_en_cntrl_OUT;
output         BC_REG3_vdm_src_en_value_OUT;
output         BC_REG3_vdm_src_en_cntrl_OUT;
output         BC_REG4_rid_a_ref_en_value_OUT;
output         BC_REG4_rid_a_ref_en_cntrl_OUT;
output         BC_REG4_rid_float_ref_en_value_OUT;
output         BC_REG4_rid_float_ref_en_cntrl_OUT;
output         BC_REG4_rid_nonfloat_comp_en_value_OUT;
output         BC_REG4_rid_nonfloat_comp_en_cntrl_OUT;
output         BC_REG4_rid_float_comp_en_value_OUT;
output         BC_REG4_rid_float_comp_en_cntrl_OUT;
output         BC_REG5_rid_b_c_comp_en_value_OUT;
output         BC_REG5_rid_b_c_comp_en_cntrl_OUT;
output         BC_REG5_rid_a_comp_en_value_OUT;
output         BC_REG5_rid_a_comp_en_cntrl_OUT;
output         BC_REG5_rid_c_ref_en_value_OUT;
output         BC_REG5_rid_c_ref_en_cntrl_OUT;
output         BC_REG5_rid_b_ref_en_value_OUT;
output         BC_REG5_rid_b_ref_en_cntrl_OUT;
output [4:0]   BC_REG6_bc_delay_value_OUT;
output         BC_REG6_bc_delay_en_OUT;
output         BC_REG6_DM_vlgc_comp_en_value_OUT;
output         BC_REG6_DM_vlgc_comp_en_cntrl_OUT;
output         BC_REG7_rid_nonfloat_src_en_value_OUT;
output         BC_REG7_rid_nonfloat_src_en_cntrl_OUT;
output         BC_REG7_rid_float_src_en_value_OUT;
output         BC_REG7_rid_float_src_en_cntrl_OUT;
output         BC_REG7_reset_cntrl_OUT;
output         BC_REG7_DM_current_src_en_value_OUT;
output         BC_REG7_DM_current_src_en_cntrl_OUT;
output         BC_REG7_unused_OUT;
output         TED_REG0_calib_code_up_en_OUT;
output [1:0]   TED_REG0_Delay_value_OUT;
output         TED_REG0_delay_en_OUT;
output         TED_REG0_calib_done_OUT;
output         TED_REG0_caliib_done_en_OUT;
output         TED_REG0_comp_out_down_inv_OUT;
output         TED_REG0_comp_out_up_inv_OUT;
output [3:0]   TED_REG1_calib_code_down_OUT;
output [3:0]   TED_REG1_calib_code_up_OUT;
output [2:0]   TED_REG2_unused_OUT;
output         TED_REG2_calib_mode_dn_OUT;
output         TED_REG2_calib_mode_dn_en_OUT;
output         TED_REG2_calib_mode_up_OUT;
output         TED_REG2_calib_mode_up_en_OUT;
output         TED_REG2_calib_code_dn_en_OUT;
input  [3:0]   CALIB_REG2_unused_IN;
input          CALIB_REG2_calib_cmp_IN;
input          CALIB_REG2_calib_pd_IN;
input          CALIB_REG2_calib_clock_IN;
input          CALIB_REG2_calib_done_IN;
input  [2:0]   CALIB_REG3_unused_IN;
input  [4:0]   CALIB_REG3_bg_unit_res_calib_IN;
input          BC_REG8_dcd_comp_IN;
input          BC_REG8_adp_sense_IN;
input          BC_REG8_adp_probe_IN;
input          BC_REG8_bvalid_IN;
input          BC_REG8_vbusvalid_IN;
input          BC_REG8_iddig_IN;
input  [1:0]   BC_REG8_unused_IN;
input          BC_REG9_o_dm_vdat_ref_comp_en_IN;
input          BC_REG9_o_dp_vdat_ref_comp_en_IN;
input          BC_REG9_o_vdm_src_en_IN;
input          BC_REG9_o_vdp_src_en_IN;
input          BC_REG9_o_idm_sink_en_IN;
input          BC_REG9_o_idp_sink_en_IN;
input          BC_REG9_o_idp_src_en_IN;
input          BC_REG9_o_bc_en_IN;
input          BC_REG10_o_rid_b_c_comp_en_IN;
input          BC_REG10_o_rid_a_comp_en_IN;
input          BC_REG10_o_rid_c_ref_en_IN;
input          BC_REG10_o_rid_b_ref_en_IN;
input          BC_REG10_o_rid_a_ref_en_IN;
input          BC_REG10_o_rid_float_ref_en_IN;
input          BC_REG10_o_rid_nonfloat_src_en_IN;
input          BC_REG10_o_rid_float_src_en_IN;
input          BC_REG11_o_idm_src_en_IN;
input          BC_REG11_i_afe_rxdp_ana_IN;
input          BC_REG11_i_afe_rxdm_ana_IN;
input          BC_REG11_i_rid_b_c_comp_sts_IN;
input          BC_REG11_i_rid_a_comp_sts_IN;
input          BC_REG11_i_dm_vdat_ref_comp_sts_IN;
input          BC_REG11_i_dp_vdat_ref_comp_sts_IN;
input          BC_REG11_o_dm_vlgc_comp_en_IN;
input          BC_REG12_rid_gnd_comp_sts_IN;
input          BC_REG12_rid_float_comp_sts_IN;
input          BC_REG12_rid_c_comp_sts_IN;
input          BC_REG12_rid_b_comp_sts_IN;
input          BC_REG12_rid_a_comp_sts_IN;
input          BC_REG12_dm_vlgc_comp_sts_IN;
input          BC_REG12_dm_vdat_ref_comp_sts_IN;
input          BC_REG12_dp_vdat_ref_comp_sts_IN;
input  [3:0]   TED_REG3_calib_code_down_IN;
input          TED_REG3_comparator_down_IN;
input          TED_REG3_calib_done_down_IN;
input  [1:0]   TED_REG3_unused_IN;
input  [3:0]   TED_REG4_calib_code_up_IN;
input          TED_REG4_comparator_up_IN;
input          TED_REG4_calib_done_up_IN;
input  [1:0]   TED_REG4_unused_IN;
output [7:0]   DIG_UNUSED_REG0_unused_OUT;
output [7:0]   DIG_UNUSED_REG1_unused_OUT;
output [7:0]   DIG_UNUSED_REG2_unused_OUT;
output [7:0]   DIG_UNUSED_REG3_unused_OUT;
output         INTERRUPT_REG1_irsr_OUT;
output         INTERRUPT_REG1_isr_OUT;
output [5:0]   INTERRUPT_REG1_unused_OUT;
output [6:0]   INTERRUPT_REG2_unused_OUT;
output         INTERRUPT_REG2_imr_OUT;
input          i_irsr_in;
input          i_isr_in;
output [2:0]   RX_REG0_fsls_no_eop_timeout_OUT;
output         RX_REG0_fsls_timeout_en_OUT;
output         RX_REG0_hs_sync_det_bits_OUT;
output [1:0]   RX_REG0_fs_eop_se0_threshold_OUT;
output         RX_REG0_fs_eop_se0_en_OUT;
output [5:0]   RX_REG1_ls_eop_se0_threshold_OUT;
output         RX_REG1_ls_eop_se0_en_OUT;
output         RX_REG1_fs_no_eop_timeout_en_OUT;
output [3:0]   TX_REG0_unused_OUT;
output         TX_REG0_fs_preamble_en_OUT;
output [1:0]   TX_REG0_sof_extension_OUT;
output         TX_REG0_sof_extension_en_OUT;
output [7:0]   TX_REG1_preamble_value_OUT;
output [1:0]   CDR_REG0_unused_OUT;
output [1:0]   CDR_REG0_pll_clkdiv_OUT;
output         CDR_REG0_pll_clkdiv_en_OUT;
output [1:0]   CDR_REG0_squelch_delay_OUT;
output         CDR_REG0_squelch_delay_en_OUT;
output         CDR_REG1_unused_OUT;
output         CDR_REG1_calib_comp_out_OUT;
output [2:0]   CDR_REG1_calib_spc_threshold_OUT;
output         CDR_REG1_calib_spc_threshold_en_OUT;
output         CDR_REG1_calib_iteration_OUT;
output         CDR_REG1_dynamic_calib_en_OUT;
output         CDR_REG2_unused_OUT;
output         CDR_REG2_hsrx_en_del_OUT;
output         CDR_REG2_hsrx_en_del_en_OUT;
output         CDR_REG2_hsrx_en_OUT;
output         CDR_REG2_hsrx_en_en_OUT;
output         CDR_REG2_calib_clock_OUT;
output         CDR_REG2_calib_clock_en_OUT;
output         CDR_REG2_calib_out_en_OUT;
output         CDR_REG3_calib_active_OUT;
output         CDR_REG3_calib_done_OUT;
output [5:0]   CDR_REG3_calib_code_OUT;
output         CDR_REG4_clk_gate_value_OUT;
output         CDR_REG4_clk_gate_en_OUT;
output         CDR_REG4_clk_gate_sq_mask_OUT;
output [1:0]   CDR_REG4_latency_threshold_OUT;
output         CDR_REG4_latency_threshold_en_OUT;
output         CDR_REG4_decision_error_en_OUT;
output         CDR_REG4_filter_en_OUT;
output [4:0]   CDR_REG5_unused_OUT;
output         CDR_REG5_sample_5x_en_OUT;
output         CDR_REG5_small_pulse_OUT;
output         CDR_REG5_small_pulse_en_OUT;
output [7:0]   CDR_REG6_unused_OUT;
output [7:0]   CDR_REG7_unused_OUT;
output [7:0]   CDR_REG8_unused_OUT;
input          RX_REG2_eb_error_IN;
input          RX_REG2_cdr_error_IN;
input          RX_REG2_sync_detected_IN;
input          RX_REG2_eop_detected_IN;
input          RX_REG2_hs_eop_condition_IN;
input          RX_REG2_normal_eop_IN;
input          RX_REG2_alignment_error_IN;
input          RX_REG2_no_eop_IN;
input          RX_REG3_hs_eop_detected_IN;
input          RX_REG3_se0_validated_IN;
input          RX_REG3_lsfs_eop_detected_IN;
input          RX_REG3_bit_unstuff_error_IN;
input  [2:0]   RX_REG3_rx_state_bitunstuff_IN;
input          RX_REG3_start_flag_IN;
input          RX_REG4_rxactive_reg_IN;
input          RX_REG4_deassert_rxactive_reg_IN;
input  [5:0]   RX_REG4_unused_IN;
input  [7:0]   RX_REG5_sie_cnt_upper_IN;
input  [7:0]   RX_REG6_phy_cnt_upper_IN;
input  [3:0]   RX_REG7_phy_cnt_lower_IN;
input  [3:0]   RX_REG7_sie_cnt_lower_IN;
input  [3:0]   TX_REG2_tx_hs_state_IN;
input          TX_REG2_eop_transmitted_IN;
input          TX_REG2_hs_bitstuff_en_IN;
input          TX_REG2_resume_eop_IN;
input          TX_REG2_remote_wakeup_IN;
input  [3:0]   TX_REG3_tx_lsfs_state_IN;
input  [2:0]   TX_REG3_pd_state_IN;
input          TX_REG3_preamble_sent_IN;
input  [5:0]   TX_REG4_unused_IN;
input          TX_REG4_lsfs_bitstuff_en_IN;
input          TX_REG4_ls_keep_alive_IN;
input  [4:0]   CDR_REG9_UNUSED_IN;
input          CDR_REG9_i_ana_comp_out_IN;
input          CDR_REG9_sampler_calib_done_IN;
input          CDR_REG9_ana_calib_active_IN;
input  [1:0]   CDR_REG10_unused_IN;
input  [5:0]   CDR_REG10_calib_code_IN;
input  [3:0]   CDR_REG11_small_pulse_IN;
input          CDR_REG11_o_hsrx_rec_dicision_error_IN;
input          CDR_REG11_o_ana_clk_gate_IN;
input          CDR_REG11_receive_start_IN;
input          CDR_REG11_i_ana_ted_squelch_IN;
input  [7:0]   CDR_RE12_unused_IN;
output [7:0]   DIG_TXRX_UNUSED_REG0_unused_OUT;
output [7:0]   DIG_TXRX_UNUSED_REG1_unused_OUT;
output [7:0]   DIG_TXRX_UNUSED_REG2_unused_OUT;
output [7:0]   DIG_TXRX_UNUSED_REG3_unused_OUT;
output [7:0]   PLL_REG0_initial_wait_time_OUT;
output [4:0]   PLL_REG1_rst_fdbk_div_delay_value_OUT;
output         PLL_REG1_rst_fdbk_div_delay_en_OUT;
output         PLL_REG1_fbdiv_en_OUT;
output         PLL_REG1_initial_wait_time_en_OUT;
output         PLL_REG2_unused_OUT;
output         PLL_REG2_vco_settling_time_en_OUT;
output [5:0]   PLL_REG2_vco_settling_time_OUT;
output [7:0]   PLL_REG3_fbdiv_value_OUT;
output         PLL_REG4_unused_OUT;
output         PLL_REG4_pll_lock_time_15_OUT;
output         PLL_REG4_pd_pfd_value_OUT;
output         PLL_REG4_pd_pfd_en_OUT;
output         PLL_REG4_pll_lock_en_OUT;
output         PLL_REG4_pll_lock_value_OUT;
output         PLL_REG4_coarsedone_en_OUT;
output         PLL_REG4_coarsedone_value_OUT;
output         PLL_REG5_startloop_en_4_0_OUT;
output         PLL_REG5_startloop_en_5_OUT;
output         PLL_REG5_startloop_5_OUT;
output [4:0]   PLL_REG5_startloop_4_0_OUT;
output         PLL_REG6_unused_OUT;
output         PLL_REG6_coarse_code_sel_OUT;
output         PLL_REG6_lsb_error_0p5_OUT;
output         PLL_REG6_big_jump_en_OUT;
output         PLL_REG6_vco_cnt_window_value_OUT;
output         PLL_REG6_vco_cnt_window_en_OUT;
output         PLL_REG6_rst_fdbk_div_value_OUT;
output         PLL_REG6_rst_fdbk_div_en_OUT;
output [2:0]   PLL_REG7_unused_OUT;
output [3:0]   PLL_REG7_refclk_sel_OUT;
output         PLL_REG7_refclk_sel_en_OUT;
output [7:0]   PLL_REG8_coarse_code_OUT;
output         PLL_REG9_coarse_code_OUT;
output         PLL_REG9_V2I_code_en_OUT;
output [5:0]   PLL_REG9_V2I_code_OUT;
output         PLL_REG10_unused_OUT;
output [4:0]   PLL_REG10_ipdiv_value_OUT;
output         PLL_REG10_ipdiv_en_OUT;
output         PLL_REG10_coarse_code_en_OUT;
output         PLL_REG11_pll_standby_OUT;
output         PLL_REG11_pll_standby_en_OUT;
output         PLL_REG11_pll_pd_OUT;
output         PLL_REG11_pll_pd_en_OUT;
output         PLL_REG11_pll_pso_del_OUT;
output         PLL_REG11_pll_pso_del_en_OUT;
output         PLL_REG11_pll_pso_OUT;
output         PLL_REG11_pll_pso_en_OUT;
output [1:0]   PLL_REG12_unused_OUT;
output         PLL_REG12_pll_ldo_ref_en_OUT;
output         PLL_REG12_pll_ldo_ref_en_en_OUT;
output         PLL_REG12_pll_ldo_core_en_OUT;
output         PLL_REG12_pll_ldo_core_en_en_OUT;
output         PLL_REG12_pll_pd_ana_OUT;
output         PLL_REG12_pll_pd_ana_en_OUT;
output         PLL_REG13_pll_clkon_OUT;
output [5:0]   PLL_REG13_pll_ldo_ref_core_OUT;
output         PLL_REG13_pll_ldo_ref_core_en_OUT;
output [2:0]   PLL_REG14_pll_ldo_cnt_threshold_OUT;
output         PLL_REG14_pll_ldo_cnt_threshold_en_OUT;
output [2:0]   PLL_REG14_pll_ldo_iso_cnt_threshold_OUT;
output         PLL_REG14_pll_ldo_iso_cnt_threshold_en_OUT;
output [7:0]   PLL_UNUSED_REG0_unused_OUT;
output [7:0]   PLL_UNUSED_REG1_unused_OUT;
input          PLL_REG15_pll_lock_IN;
input          PLL_REG15_coarsedone_IN;
input          PLL_REG15_vco_cnt_win_IN;
input          PLL_REG15_rst_fdbk_div_IN;
input          PLL_REG15_unused_IN;
input          PLL_REG15_pd_pfd_IN;
input          PLL_REG15_startloop_IN;
input          PLL_REG15_coarse_code_8_IN;
input  [7:0]   PLL_REG16_coarse_code_IN;
input  [7:0]   PLL_UNUSED_REG2_unused_IN;
output [1:0]   UTMI_REG0_loopback_sel_OUT;
output         UTMI_REG0_loopback_en_OUT;
output [3:0]   UTMI_REG0_bist_mode_sel_OUT;
output         UTMI_REG0_bist_en_OUT;
output [1:0]   UTMI_REG1_bist_err_OUT;
output         UTMI_REG1_bist_soft_rst_OUT;
output         UTMI_REG1_tx_lsfs_soft_rst_OUT;
output         UTMI_REG1_tx_hs_soft_rst_OUT;
output         UTMI_REG1_clkdiv_soft_rst_OUT;
output         UTMI_REG1_calib_soft_rst_OUT;
output         UTMI_REG1_phy_soft_rst_OUT;
output         UTMI_REG2_rx_cntrl_soft_rst_OUT;
output         UTMI_REG2_shift_reg_soft_rst_OUT;
output         UTMI_REG2_bitunstuff_soft_rst_OUT;
output         UTMI_REG2_nrzi_dec_soft_rst_OUT;
output         UTMI_REG2_eop_det_soft_rst_OUT;
output         UTMI_REG2_sync_det_soft_rst_OUT;
output         UTMI_REG2_lsfs_dll_soft_rst_OUT;
output         UTMI_REG2_rx_hs_soft_rst_OUT;
output         UTMI_REG3_hs_rx_err_OUT;
output         UTMI_REG3_ls_linestate_fil_en_OUT;
output [4:0]   UTMI_REG3_fs_linestate_fil_cnt_OUT;
output         UTMI_REG3_fs_linestate_fil_en_OUT;
output [7:0]   UTMI_REG4_ls_linestate_fil_cnt_OUT;
output         UTMI_REG5_bist_mode_en_OUT;
output         UTMI_REG5_bist_on_OUT;
output         UTMI_REG5_hstx_boost_deamp_off_OUT;
output         UTMI_REG5_hstx_boost_OUT;
output         UTMI_REG5_hs_samp_OUT;
output         UTMI_REG5_hs_samp_en_OUT;
output         UTMI_REG5_hsrx_OUT;
output         UTMI_REG5_hsrx_en_OUT;
output         UTMI_REG6_vbusvalid_cntrl_OUT;
output         UTMI_REG6_vbusvalid_l3_dev_en_OUT;
output [4:0]   UTMI_REG6_hs_drven_threshold_OUT;
output         UTMI_REG6_hs_drven_th_en_OUT;
output         UTMI_REG7_hstx_bc_mode_OUT;
output         UTMI_REG7_hstx_bc_en_OUT;
output         UTMI_REG7_hstx_chirp_mode_OUT;
output         UTMI_REG7_hstx_chirp_en_OUT;
output         UTMI_REG7_hstx_en_del_OUT;
output         UTMI_REG7_hstx_en_del_en_OUT;
output         UTMI_REG7_hstx_OUT;
output         UTMI_REG7_hstx_en_OUT;
output         UTMI_REG8_hs_term_OUT;
output         UTMI_REG8_hs_term_en_OUT;
output         UTMI_REG8_hstx_data_OUT;
output         UTMI_REG8_hstx_data_en_OUT;
output         UTMI_REG8_hstx_drv_OUT;
output         UTMI_REG8_hstx_drv_en_OUT;
output         UTMI_REG8_hstx_predrv_OUT;
output         UTMI_REG8_hstx_predrv_en_OUT;
output         UTMI_REG9_clkoff_en_OUT;
output [2:0]   UTMI_REG9_sdc_space_OUT;
output         UTMI_REG9_sdc_space_en_OUT;
output [1:0]   UTMI_REG9_hstx_en_del_th_OUT;
output         UTMI_REG9_hstx_en_del_th_en_OUT;
output         UTMI_REG10_pll_clkon_OUT;
output         UTMI_REG10_pll_clkon_en_OUT;
output         UTMI_REG10_bg_pd_bg_ok_OUT;
output         UTMI_REG10_bg_pd_bg_ok_en_OUT;
output         UTMI_REG10_lsfs_serx_OUT;
output         UTMI_REG10_lsfs_serx_en_OUT;
output         UTMI_REG10_lsfs_rx_OUT;
output         UTMI_REG10_lsfs_rx_en_OUT;
output         UTMI_REG11_clean_linestate_serx_mask_en_OUT;
output         UTMI_REG11_serx_mask_en_OUT;
output [1:0]   UTMI_REG11_serx_mask_threshold_OUT;
output         UTMI_REG11_lsfs_tx_OUT;
output         UTMI_REG11_lsfs_tx_en_OUT;
output         UTMI_REG11_fsls_edgesel_OUT;
output         UTMI_REG11_fsls_edgesel_en_OUT;
output [1:0]   UTMI_REG12_serx_bias_en_OUT;
output         UTMI_REG12_fsls_tx_data_OUT;
output         UTMI_REG12_fsls_tx_data_en_OUT;
output         UTMI_REG12_fsls_tx_se0_OUT;
output         UTMI_REG12_fsls_tx_se0_en_OUT;
output         UTMI_REG12_fsls_tx_drv_OUT;
output         UTMI_REG12_fsls_tx_drv_en_OUT;
output         UTMI_REG13_fsls_serialmode_pullup2_OUT;
output         UTMI_REG13_fsls_serialmode_pullup2_en_OUT;
output         UTMI_REG13_dm_pulldown_OUT;
output         UTMI_REG13_dm_pulldown_en_OUT;
output         UTMI_REG13_dp_pulldown_OUT;
output         UTMI_REG13_dp_pulldown_en_OUT;
output         UTMI_REG13_lane_reverse_OUT;
output         UTMI_REG13_lane_reverse_en_OUT;
output         UTMI_REG14_dm_pullup2_OUT;
output         UTMI_REG14_dm_pullup2_en_OUT;
output         UTMI_REG14_dp_pullup2_OUT;
output         UTMI_REG14_dp_pullup2_en_OUT;
output         UTMI_REG14_dm_pullup1_OUT;
output         UTMI_REG14_dm_pullup1_en_OUT;
output         UTMI_REG14_dp_pullup1_OUT;
output         UTMI_REG14_dp_pullup1_en_OUT;
output [1:0]   UTMI_REG15_txvalid_gate_threshold_fs_OUT;
output [1:0]   UTMI_REG15_txvalid_gate_threshold_hs_OUT;
output         UTMI_REG15_ted_en_value_OUT;
output         UTMI_REG15_ted_en_cnt_OUT;
output         UTMI_REG15_ed_en_value_OUT;
output         UTMI_REG15_ed_en_cnt_OUT;
output [7:0]   UTMI_REG16_unused_OUT;
output [1:0]   UTMI_REG17_squelch_count_idle_OUT;
output         UTMI_REG17_squelch_count_idle_en_OUT;
output [3:0]   UTMI_REG17_tx_sq_cnt_OUT;
output         UTMI_REG17_tx_sq_cnt_en_OUT;
output         UTMI_REG18_sleep_value_OUT;
output         UTMI_REG18_sleep_en_OUT;
output         UTMI_REG18_bist_powerup_OUT;
output         UTMI_REG18_bist_powerup_en_OUT;
output         UTMI_REG18_powerup_en_OUT;
output         UTMI_REG18_unused_OUT;
output         UTMI_REG18_clipper_en_OUT;
output         UTMI_REG18_clipper_en_en_OUT;
output [6:0]   UTMI_REG19_unused_OUT;
output         UTMI_REG19_ted_sw_en_OUT;
output         UTMI_REG20_hostdiscon_rst_reg_OUT;
output         UTMI_REG20_hostdiscon_rst_reg_en_OUT;
output [4:0]   UTMI_REG20_calib_rst_dt_OUT;
output         UTMI_REG20_calib_rst_dt_en_OUT;
output         UTMI_REG21_calib_triger_posedge_OUT;
output         UTMI_REG21_auto_cal_enable_OUT;
output         UTMI_REG21_absvalid_OUT;
output         UTMI_REG21_absvalid_en_OUT;
output         UTMI_REG21_vbusvalid_OUT;
output         UTMI_REG21_vbusvalid_en_OUT;
output         UTMI_REG21_suspendm_OUT;
output         UTMI_REG21_suspendm_en_OUT;
output [7:0]   UTMI_REG22_bccalib_offset_OUT;
output [7:0]   UTMI_REG23_hscalib_offset_OUT;
output [7:0]   UTMI_REG24_fscalib_offset_OUT;
output         UTMI_REG25_unused_OUT;
output [6:0]   UTMI_REG25_hscalib_OUT;
output         UTMI_REG26_unused_OUT;
output [6:0]   UTMI_REG26_fscalib_OUT;
output         UTMI_REG27_unused_OUT;
output [6:0]   UTMI_REG27_bccalib_OUT;
output         UTMI_REG28_cdr_eb_wr_reset_OUT;
output [6:0]   UTMI_REG28_unused_OUT;
output [1:0]   UTMI_REG29_unused_OUT;
output         UTMI_REG29_pll_standalone_OUT;
output         UTMI_REG29_pll_standalone_en_OUT;
output [3:0]   UTMI_REG29_spare_out_OUT;
output         UTMI_REG30_unused_OUT;
output         UTMI_REG30_pll_480_clock_gate_ovr_OUT;
output         UTMI_REG30_scan_ats_hs_clock_gate_ovr_OUT;
output         UTMI_REG30_vco_pll_clock_gate_ovr_OUT;
output         UTMI_REG30_dig_div_refclock_gate_ovr_OUT;
output         UTMI_REG30_fb_clock_gate_ovr_OUT;
output         UTMI_REG30_ana_div_refclock_gate_ovr_OUT;
output         UTMI_REG30_hs_clock_gate_ovr_OUT;
output [7:0]   UTMI_UNUSED_REG0_unused_OUT;
output [7:0]   UTMI_UNUSED_REG1_unused_OUT;
output [7:0]   UTMI_UNUSED_REG2_unused_OUT;
output [7:0]   UTMI_UNUSED_REG3_unused_OUT;
input  [5:0]   UTMI_REG31_unused_IN;
input          UTMI_REG31_bist_error_IN;
input          UTMI_REG31_bist_complete_IN;
input  [7:0]   UTMI_REG32_bist_err_count_IN;
input          UTMI_REG33_bg_powergood_IN;
input          UTMI_REG33_afe_hsrx_diff_data_IN;
input          UTMI_REG33_hsrx_en_IN;
input          UTMI_REG33_hsrx_sampler_enable_IN;
input          UTMI_REG33_chirp_mode_en_IN;
input          UTMI_REG33_hstx_en_IN;
input          UTMI_REG33_hstx_en_delayed_IN;
input          UTMI_REG33_hstx_boost_deamp_off_IN;
input          UTMI_REG34_o_dprpu1_en_IN;
input          UTMI_REG34_o_dmrpu1_en_IN;
input          UTMI_REG34_o_dprpu2_en_IN;
input          UTMI_REG34_o_dmrpu2_en_IN;
input          UTMI_REG34_o_dprpd_en_IN;
input          UTMI_REG34_o_dmrpd_en_IN;
input          UTMI_REG34_o_otgc_id_pullup_en_IN;
input          UTMI_REG34_o_fs_edge_sel_IN;
input          UTMI_REG35_i_afe_lsfsrx_ana_IN;
input          UTMI_REG35_o_lsfstx_en_IN;
input          UTMI_REG35_o_lsfsdrv_en_IN;
input          UTMI_REG35_o_lsfs_ddi_IN;
input          UTMI_REG35_o_assert_sezero_IN;
input          UTMI_REG35_o_lsfsrx_en_IN;
input          UTMI_REG35_o_serx_en_IN;
input          UTMI_REG35_o_serx_bias_en_IN;
input          UTMI_REG36_o_pll_pso_IN;
input          UTMI_REG36_o_pll_pso_delay_IN;
input          UTMI_REG36_o_pll_pd_IN;
input  [4:0]   UTMI_REG36_o_pll_ipdiv_IN;
input  [7:0]   UTMI_REG37_o_pll_fbdiv_value_IN;
input          UTMI_REG38_o_pll_standby_IN;
input          UTMI_REG38_o_pll_ldo_core_en_IN;
input          UTMI_REG38_o_pll_ldo_ref_en_IN;
input          UTMI_REG38_o_afe_suspendm_IN;
input          UTMI_REG38_o_otgc_vbusvalid_en_IN;
input          UTMI_REG38_o_otgc_absvalid_en_IN;
input          UTMI_REG38_o_afe_clipper_en_IN;
input          UTMI_REG38_o_pll_ldo_isolation_cntrl_IN;
input  [7:0]   UTMI_REG39_unused_IN;
input  [7:0]   UTMI_REG40_unused_IN;
input          UTMI_REG41_i_ted_squelch_ana_IN;
input          UTMI_REG41_i_usb2_rescal_calib_done_IN;
input  [5:0]   UTMI_REG41_hs_calib_code_IN;
input          UTMI_REG42_hs_sof_IN;
input          UTMI_REG42_all_calib_done_IN;
input  [5:0]   UTMI_REG42_fs_calib_code_IN;
input          UTMI_REG43_ls_mode_IN;
input          UTMI_REG43_fs_mode_pre_IN;
input  [5:0]   UTMI_REG43_bc_calib_code_IN;
input          UTMI_REG44_rstn_refclock_IN;
input          UTMI_REG44_rstn_hs_clock_IN;
input          UTMI_REG44_rstn_hs_tx_clock_IN;
input          UTMI_REG44_rstn_byte_clock_IN;
input          UTMI_REG44_rstn_sieclock_IN;
input          UTMI_REG44_rstn_clkdiv_IN;
input          UTMI_REG44_rstn_calib_clkdiv_IN;
input          UTMI_REG44_udc_rstn_cdr_async_IN;
input          UTMI_REG45_udc_calib_rstn_IN;
input          UTMI_REG45_udc_apb_rstn_IN;
input          UTMI_REG45_o_rstn_cdr_async_IN;
input          UTMI_REG45_o_pll_calib_rstn_IN;
input          UTMI_REG45_bist_mode_rstn_IN;
input          UTMI_REG45_o_usb2_calib_rstn_IN;
input          UTMI_REG45_udc_bc_calib_rstn_IN;
input          UTMI_REG45_global_resetn_IN;
input          UTMI_REG46_unused_IN;
input          UTMI_REG46_recovery_cnt_en_IN;
input  [1:0]   UTMI_REG46_clean_linestate_IN;
input  [3:0]   UTMI_REG46_bc_state_machine_status_IN;
input          UTMI_REG47_filter_cnt_en_IN;
input  [1:0]   UTMI_REG47_host_opmode_IN;
input  [1:0]   UTMI_REG47_dev_opmode_IN;
input          UTMI_REG47_i_ded_ana_IN;
input          UTMI_REG47_hs_hostdisconnect_IN;
input          UTMI_REG47_lsfs_hostdisconnect_IN;
input  [1:0]   UTMI_REG48_bist_tx_state_IN;
input  [5:0]   UTMI_REG48_data_cnt_tx_IN;
input  [1:0]   UTMI_REG49_bist_rx_state_IN;
input  [5:0]   UTMI_REG49_data_cnt_rx_IN;
input  [3:0]   UTMI_REG50_bist_top_state_IN;
input          UTMI_REG50_inc_data_cnt_tx_IN;
input          UTMI_REG50_inc_data_cnt_rx_IN;
input          UTMI_REG50_o_bg_pd_IN;
input          UTMI_REG50_o_bg_pd_bg_ok_IN;
input  [1:0]   UTMI_REG51_powerdown_IN;
input          UTMI_REG51_reset_IN;
input          UTMI_REG51_suspendm_IN;
input          UTMI_REG51_termselect_IN;
input          UTMI_REG51_databus16_8_IN;
input          UTMI_REG51_dppulldown_IN;
input          UTMI_REG51_dmpulldown_IN;
input          UTMI_REG52_lane_reverse_IN;
input          UTMI_REG52_txbitstuffenable_IN;
input          UTMI_REG52_txbitstuffenableh_IN;
input  [1:0]   UTMI_REG52_xcvrselect_IN;
input  [1:0]   UTMI_REG52_linestate_IN;
input          UTMI_REG52_hostdisconnect_IN;
input          UTMI_REG53_fslsserialmode_IN;
input          UTMI_REG53_tx_enable_n_IN;
input          UTMI_REG53_tx_dat_IN;
input          UTMI_REG53_tx_se0_IN;
input          UTMI_REG53_sleepm_IN;
input          UTMI_REG53_unused_IN;
input  [1:0]   UTMI_REG53_opmode_IN;
input          UTMI_REG54_rx_dp_IN;
input          UTMI_REG54_rx_dm_IN;
input          UTMI_REG54_rx_rcv_IN;
input  [4:0]   UTMI_REG54_unused_IN;
input          UTMI_REG55_txvalidh_IN;
input          UTMI_REG55_txvalid_IN;
input          UTMI_REG55_txready_IN;
input          UTMI_REG55_rxvalidh_IN;
input          UTMI_REG55_rxvalid_IN;
input          UTMI_REG55_rxactive_IN;
input          UTMI_REG55_rxerror_IN;
input          UTMI_REG55_unused_IN;
input  [7:0]   UTMI_REG56_datain_upper_IN;
input  [7:0]   UTMI_REG57_datain_lower_IN;
input  [7:0]   UTMI_REG58_dataout_upper_IN;
input  [7:0]   UTMI_REG59_dataout_lower_IN;
input  [7:0]   UTMI_UNUSED_REG6_unused_IN;
input  [7:0]   UTMI_UNUSED_REG7_unused_IN;
output [7:0]   PRDATA;
input  [7:0]   PADDR;
input  [7:0]   PWDATA;
input          PWRITE;
input          PSELx;
input          PENABLE;
input          PCLK;
input          PRESETn;
localparam AFE_BG_REG0_REG_OFFSET = 8'b00100000;
localparam AFE_BG_REG0_bg_ana_reg0_BIT_RESET = 8'b00000000;
localparam AFE_BG_REG1_REG_OFFSET = 8'b00100001;
localparam AFE_BG_REG1_bg_ana_reg1_BIT_RESET = 8'b00000000;
localparam AFE_BG_REG2_REG_OFFSET = 8'b00100010;
localparam AFE_BG_REG2_bg_ana_reg2_BIT_RESET = 8'b00000000;
localparam AFE_BG_REG3_REG_OFFSET = 8'b00100011;
localparam AFE_BG_REG3_bg_ana_reg3_BIT_RESET = 8'b00000010;
localparam AFE_CALIB_REG0_REG_OFFSET = 8'b00100100;
localparam AFE_CALIB_REG0_calib_ana_reg0_BIT_RESET = 8'b00000000;
localparam AFE_BC_REG0_REG_OFFSET = 8'b00100101;
localparam AFE_BC_REG0_bc_ana_reg0_BIT_RESET = 8'b00000000;
localparam AFE_BC_REG1_REG_OFFSET = 8'b00100110;
localparam AFE_BC_REG1_bc_ana_reg1_BIT_RESET = 8'b00000000;
localparam AFE_BC_REG2_REG_OFFSET = 8'b00100111;
localparam AFE_BC_REG2_bc_ana_reg2_BIT_RESET = 8'b00000000;
localparam AFE_BC_REG3_REG_OFFSET = 8'b00101000;
localparam AFE_BC_REG3_bc_ana_reg3_BIT_RESET = 8'b00000000;
localparam AFE_BC_REG4_REG_OFFSET = 8'b00101001;
localparam AFE_BC_REG4_bc_ana_reg4_BIT_RESET = 8'b00000000;
localparam AFE_BC_REG5_REG_OFFSET = 8'b00101010;
localparam AFE_BC_REG5_bc_ana_reg5_BIT_RESET = 8'b00000000;
localparam AFE_BC_REG6_REG_OFFSET = 8'b00101011;
localparam AFE_BC_REG6_bc_ana_reg6_BIT_RESET = 8'b00000000;
localparam AFE_PLL_REG0_REG_OFFSET = 8'b00101100;
localparam AFE_PLL_REG0_afe_pll_reg0_BIT_RESET = 8'b00000000;
localparam AFE_PLL_REG1_REG_OFFSET = 8'b00101101;
localparam AFE_PLL_REG1_afe_pll_reg1_BIT_RESET = 8'b00000000;
localparam AFE_PLL_REG2_REG_OFFSET = 8'b00101110;
localparam AFE_PLL_REG2_afe_pll_reg2_BIT_RESET = 8'b00000000;
localparam AFE_PLL_REG3_REG_OFFSET = 8'b00101111;
localparam AFE_PLL_REG3_afe_pll_reg3_BIT_RESET = 8'b00000000;
localparam AFE_PLL_REG4_REG_OFFSET = 8'b00110000;
localparam AFE_PLL_REG4_afe_pll_reg4_BIT_RESET = 8'b00000000;
localparam AFE_PLL_REG5_REG_OFFSET = 8'b00110001;
localparam AFE_PLL_REG5_afe_pll_reg5_BIT_RESET = 8'b00000000;
localparam AFE_BG_REG4_REG_OFFSET = 8'b00110010;
localparam AFE_BG_REG4_bg_ana_reg4_BIT_RESET = 8'b00000000;
localparam AFE_CALIB_REG1_REG_OFFSET = 8'b00110011;
localparam AFE_CALIB_REG1_calib_ana_reg1_BIT_RESET = 8'b00000000;
localparam AFE_BC_REG7_REG_OFFSET = 8'b00110100;
localparam AFE_BC_REG7_bc_ana_reg7_BIT_RESET = 8'b00000000;
localparam AFE_PLL_REG6_REG_OFFSET = 8'b00110101;
localparam AFE_PLL_REG6_pll_ana_reg6_BIT_RESET = 8'b00000000;
localparam AFE_UNUSED_REG2_REG_OFFSET = 8'b00110110;
localparam AFE_UNUSED_REG2_unused_BIT_RESET = 8'b00000000;
localparam AFE_UNUSED_REG3_REG_OFFSET = 8'b00110111;
localparam AFE_UNUSED_REG3_unused_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG0_REG_OFFSET = 8'b00000000;
localparam AFE_TX_REG0_tx_ana_reg0_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG1_REG_OFFSET = 8'b00000001;
localparam AFE_TX_REG1_tx_ana_reg1_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG2_REG_OFFSET = 8'b00000010;
localparam AFE_TX_REG2_tx_ana_reg2_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG3_REG_OFFSET = 8'b00000011;
localparam AFE_TX_REG3_tx_ana_reg3_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG4_REG_OFFSET = 8'b00000100;
localparam AFE_TX_REG4_tx_ana_reg4_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG5_REG_OFFSET = 8'b00000101;
localparam AFE_TX_REG5_tx_ana_reg5_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG6_REG_OFFSET = 8'b00000110;
localparam AFE_TX_REG6_tx_ana_reg6_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG7_REG_OFFSET = 8'b00000111;
localparam AFE_TX_REG7_tx_ana_reg7_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG8_REG_OFFSET = 8'b00001000;
localparam AFE_TX_REG8_tx_ana_reg8_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG9_REG_OFFSET = 8'b00001001;
localparam AFE_TX_REG9_tx_ana_reg9_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG10_REG_OFFSET = 8'b00001010;
localparam AFE_TX_REG10_tx_ana_reg10_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG11_REG_OFFSET = 8'b00001011;
localparam AFE_TX_REG11_tx_ana_reg11_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG12_REG_OFFSET = 8'b00001100;
localparam AFE_TX_REG12_tx_ana_reg12_BIT_RESET = 8'b00000000;
localparam AFE_RX_REG0_REG_OFFSET = 8'b00001101;
localparam AFE_RX_REG0_rx_ana_reg0_BIT_RESET = 8'b00000000;
localparam AFE_RX_REG1_REG_OFFSET = 8'b00001110;
localparam AFE_RX_REG1_rx_ana_reg1_BIT_RESET = 8'b00000000;
localparam AFE_RX_REG2_REG_OFFSET = 8'b00001111;
localparam AFE_RX_REG2_rx_ana_reg2_BIT_RESET = 8'b00000000;
localparam AFE_RX_REG3_REG_OFFSET = 8'b00010000;
localparam AFE_RX_REG3_rx_ana_reg3_BIT_RESET = 8'b00000000;
localparam AFE_RX_REG4_REG_OFFSET = 8'b00010001;
localparam AFE_RX_REG4_rx_ana_reg4_BIT_RESET = 8'b00000000;
localparam AFE_RX_REG5_REG_OFFSET = 8'b00010010;
localparam AFE_RX_REG5_rx_ana_reg5_BIT_RESET = 8'b00000000;
localparam AFE_RX_REG6_REG_OFFSET = 8'b00010011;
localparam AFE_RX_REG6_rx_ana_reg6_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG13_REG_OFFSET = 8'b00010100;
localparam AFE_TX_REG13_tx_ana_reg13_BIT_RESET = 8'b00000000;
localparam AFE_TX_REG14_REG_OFFSET = 8'b00010101;
localparam AFE_TX_REG14_tx_ana_reg14_BIT_RESET = 8'b00000000;
localparam AFE_RX_REG7_REG_OFFSET = 8'b00010110;
localparam AFE_RX_REG7_rx_ana_reg7_BIT_RESET = 8'b00000000;
localparam AFE_RX_REG8_REG_OFFSET = 8'b00010111;
localparam AFE_RX_REG8_rx_ana_reg8_BIT_RESET = 8'b00000000;
localparam AFE_UNUSED_REG0_REG_OFFSET = 8'b00011000;
localparam AFE_UNUSED_REG0_unused_BIT_RESET = 8'b00000000;
localparam AFE_UNUSED_REG1_REG_OFFSET = 8'b00011001;
localparam AFE_UNUSED_REG1_unused_BIT_RESET = 8'b00000000;
localparam CALIB_REG0_REG_OFFSET = 8'b01100000;
localparam CALIB_REG0_calib_clk_BIT_RESET = 1'b0;
localparam CALIB_REG0_calib_clk_en_BIT_RESET = 1'b0;
localparam CALIB_REG0_comp_out_BIT_RESET = 1'b0;
localparam CALIB_REG0_init_wait_ovr_BIT_RESET = 4'b0000;
localparam CALIB_REG0_init_wait_ovr_en_BIT_RESET = 1'b0;
localparam CALIB_REG1_REG_OFFSET = 8'b01100001;
localparam CALIB_REG1_unused_BIT_RESET = 1'b0;
localparam CALIB_REG1_calib_code_BIT_RESET = 6'b000000;
localparam CALIB_REG1_calib_code_en_BIT_RESET = 1'b0;
localparam BC_REG0_REG_OFFSET = 8'b01100010;
localparam BC_REG0_unused_BIT_RESET = 4'b0000;
localparam BC_REG0_adp_en_BIT_RESET = 1'b0;
localparam BC_REG0_adp_en_en_BIT_RESET = 1'b0;
localparam BC_REG0_id_pullup_BIT_RESET = 1'b0;
localparam BC_REG0_id_pullup_en_BIT_RESET = 1'b0;
localparam BC_REG1_REG_OFFSET = 8'b01100011;
localparam BC_REG1_ADP_source_I_en_BIT_RESET = 1'b0;
localparam BC_REG1_ADP_source_I_en_ctrl_BIT_RESET = 1'b0;
localparam BC_REG1_ADP_sink_I_en_BIT_RESET = 1'b0;
localparam BC_REG1_ADP_sink_I_en_ctrl_BIT_RESET = 1'b0;
localparam BC_REG1_ADP_sense_en_BIT_RESET = 1'b0;
localparam BC_REG1_ADP_sense_en_ctrl_BIT_RESET = 1'b0;
localparam BC_REG1_ADP_probe_en_BIT_RESET = 1'b0;
localparam BC_REG1_ADP_probe_en_ctrl_BIT_RESET = 1'b0;
localparam BC_REG2_REG_OFFSET = 8'b01100100;
localparam BC_REG2_idm_sink_en_value_BIT_RESET = 1'b0;
localparam BC_REG2_idm_sink_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG2_idp_sink_en_value_BIT_RESET = 1'b0;
localparam BC_REG2_idp_sink_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG2_idp_src_en_value_BIT_RESET = 1'b0;
localparam BC_REG2_idp_src_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG2_bc_en_value_BIT_RESET = 1'b0;
localparam BC_REG2_bc_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG3_REG_OFFSET = 8'b01100101;
localparam BC_REG3_dm_vdat_ref_comp_en_value_BIT_RESET = 1'b0;
localparam BC_REG3_dm_vdat_ref_comp_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG3_dp_vdat_ref_comp_en_value_BIT_RESET = 1'b0;
localparam BC_REG3_dp_vdat_ref_comp_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG3_vdp_src_en_value_BIT_RESET = 1'b0;
localparam BC_REG3_vdp_src_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG3_vdm_src_en_value_BIT_RESET = 1'b0;
localparam BC_REG3_vdm_src_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG4_REG_OFFSET = 8'b01100110;
localparam BC_REG4_rid_a_ref_en_value_BIT_RESET = 1'b0;
localparam BC_REG4_rid_a_ref_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG4_rid_float_ref_en_value_BIT_RESET = 1'b0;
localparam BC_REG4_rid_float_ref_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG4_rid_nonfloat_comp_en_value_BIT_RESET = 1'b0;
localparam BC_REG4_rid_nonfloat_comp_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG4_rid_float_comp_en_value_BIT_RESET = 1'b0;
localparam BC_REG4_rid_float_comp_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG5_REG_OFFSET = 8'b01100111;
localparam BC_REG5_rid_b_c_comp_en_value_BIT_RESET = 1'b0;
localparam BC_REG5_rid_b_c_comp_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG5_rid_a_comp_en_value_BIT_RESET = 1'b0;
localparam BC_REG5_rid_a_comp_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG5_rid_c_ref_en_value_BIT_RESET = 1'b0;
localparam BC_REG5_rid_c_ref_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG5_rid_b_ref_en_value_BIT_RESET = 1'b0;
localparam BC_REG5_rid_b_ref_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG6_REG_OFFSET = 8'b01101000;
localparam BC_REG6_bc_delay_value_BIT_RESET = 5'b00000;
localparam BC_REG6_bc_delay_en_BIT_RESET = 1'b0;
localparam BC_REG6_DM_vlgc_comp_en_value_BIT_RESET = 1'b0;
localparam BC_REG6_DM_vlgc_comp_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG7_REG_OFFSET = 8'b01101001;
localparam BC_REG7_rid_nonfloat_src_en_value_BIT_RESET = 1'b0;
localparam BC_REG7_rid_nonfloat_src_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG7_rid_float_src_en_value_BIT_RESET = 1'b0;
localparam BC_REG7_rid_float_src_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG7_reset_cntrl_BIT_RESET = 1'b0;
localparam BC_REG7_DM_current_src_en_value_BIT_RESET = 1'b0;
localparam BC_REG7_DM_current_src_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG7_unused_BIT_RESET = 1'b0;
localparam TED_REG0_REG_OFFSET = 8'b01101010;
localparam TED_REG0_calib_code_up_en_BIT_RESET = 1'b0;
localparam TED_REG0_Delay_value_BIT_RESET = 2'b00;
localparam TED_REG0_delay_en_BIT_RESET = 1'b0;
localparam TED_REG0_calib_done_BIT_RESET = 1'b0;
localparam TED_REG0_caliib_done_en_BIT_RESET = 1'b0;
localparam TED_REG0_comp_out_down_inv_BIT_RESET = 1'b0;
localparam TED_REG0_comp_out_up_inv_BIT_RESET = 1'b0;
localparam TED_REG1_REG_OFFSET = 8'b01101011;
localparam TED_REG1_calib_code_down_BIT_RESET = 4'b0000;
localparam TED_REG1_calib_code_up_BIT_RESET = 4'b0000;
localparam TED_REG2_REG_OFFSET = 8'b01101100;
localparam TED_REG2_unused_BIT_RESET = 3'b000;
localparam TED_REG2_calib_mode_dn_BIT_RESET = 1'b0;
localparam TED_REG2_calib_mode_dn_en_BIT_RESET = 1'b0;
localparam TED_REG2_calib_mode_up_BIT_RESET = 1'b0;
localparam TED_REG2_calib_mode_up_en_BIT_RESET = 1'b0;
localparam TED_REG2_calib_code_dn_en_BIT_RESET = 1'b0;
localparam CALIB_REG2_REG_OFFSET = 8'b01101101;
localparam CALIB_REG2_unused_BIT_RESET = 4'b0000;
localparam CALIB_REG2_calib_cmp_BIT_RESET = 1'b0;
localparam CALIB_REG2_calib_pd_BIT_RESET = 1'b0;
localparam CALIB_REG2_calib_clock_BIT_RESET = 1'b0;
localparam CALIB_REG2_calib_done_BIT_RESET = 1'b0;
localparam CALIB_REG3_REG_OFFSET = 8'b01101110;
localparam CALIB_REG3_unused_BIT_RESET = 3'b000;
localparam CALIB_REG3_bg_unit_res_calib_BIT_RESET = 5'b00000;
localparam BC_REG8_REG_OFFSET = 8'b01101111;
localparam BC_REG8_dcd_comp_BIT_RESET = 1'b0;
localparam BC_REG8_adp_sense_BIT_RESET = 1'b0;
localparam BC_REG8_adp_probe_BIT_RESET = 1'b0;
localparam BC_REG8_bvalid_BIT_RESET = 1'b0;
localparam BC_REG8_vbusvalid_BIT_RESET = 1'b0;
localparam BC_REG8_iddig_BIT_RESET = 1'b0;
localparam BC_REG8_unused_BIT_RESET = 2'b00;
localparam BC_REG9_REG_OFFSET = 8'b01110000;
localparam BC_REG9_o_dm_vdat_ref_comp_en_BIT_RESET = 1'b0;
localparam BC_REG9_o_dp_vdat_ref_comp_en_BIT_RESET = 1'b0;
localparam BC_REG9_o_vdm_src_en_BIT_RESET = 1'b0;
localparam BC_REG9_o_vdp_src_en_BIT_RESET = 1'b0;
localparam BC_REG9_o_idm_sink_en_BIT_RESET = 1'b0;
localparam BC_REG9_o_idp_sink_en_BIT_RESET = 1'b0;
localparam BC_REG9_o_idp_src_en_BIT_RESET = 1'b0;
localparam BC_REG9_o_bc_en_BIT_RESET = 1'b0;
localparam BC_REG10_REG_OFFSET = 8'b01110001;
localparam BC_REG10_o_rid_b_c_comp_en_BIT_RESET = 1'b0;
localparam BC_REG10_o_rid_a_comp_en_BIT_RESET = 1'b0;
localparam BC_REG10_o_rid_c_ref_en_BIT_RESET = 1'b0;
localparam BC_REG10_o_rid_b_ref_en_BIT_RESET = 1'b0;
localparam BC_REG10_o_rid_a_ref_en_BIT_RESET = 1'b0;
localparam BC_REG10_o_rid_float_ref_en_BIT_RESET = 1'b0;
localparam BC_REG10_o_rid_nonfloat_src_en_BIT_RESET = 1'b0;
localparam BC_REG10_o_rid_float_src_en_BIT_RESET = 1'b0;
localparam BC_REG11_REG_OFFSET = 8'b01110010;
localparam BC_REG11_o_idm_src_en_BIT_RESET = 1'b0;
localparam BC_REG11_i_afe_rxdp_ana_BIT_RESET = 1'b0;
localparam BC_REG11_i_afe_rxdm_ana_BIT_RESET = 1'b0;
localparam BC_REG11_i_rid_b_c_comp_sts_BIT_RESET = 1'b0;
localparam BC_REG11_i_rid_a_comp_sts_BIT_RESET = 1'b0;
localparam BC_REG11_i_dm_vdat_ref_comp_sts_BIT_RESET = 1'b0;
localparam BC_REG11_i_dp_vdat_ref_comp_sts_BIT_RESET = 1'b0;
localparam BC_REG11_o_dm_vlgc_comp_en_BIT_RESET = 1'b0;
localparam BC_REG12_REG_OFFSET = 8'b01110011;
localparam BC_REG12_rid_gnd_comp_sts_BIT_RESET = 1'b0;
localparam BC_REG12_rid_float_comp_sts_BIT_RESET = 1'b0;
localparam BC_REG12_rid_c_comp_sts_BIT_RESET = 1'b0;
localparam BC_REG12_rid_b_comp_sts_BIT_RESET = 1'b0;
localparam BC_REG12_rid_a_comp_sts_BIT_RESET = 1'b0;
localparam BC_REG12_dm_vlgc_comp_sts_BIT_RESET = 1'b0;
localparam BC_REG12_dm_vdat_ref_comp_sts_BIT_RESET = 1'b0;
localparam BC_REG12_dp_vdat_ref_comp_sts_BIT_RESET = 1'b0;
localparam TED_REG3_REG_OFFSET = 8'b01110100;
localparam TED_REG3_calib_code_down_BIT_RESET = 4'b0000;
localparam TED_REG3_comparator_down_BIT_RESET = 1'b0;
localparam TED_REG3_calib_done_down_BIT_RESET = 1'b0;
localparam TED_REG3_unused_BIT_RESET = 2'b00;
localparam TED_REG4_REG_OFFSET = 8'b01110101;
localparam TED_REG4_calib_code_up_BIT_RESET = 4'b0000;
localparam TED_REG4_comparator_up_BIT_RESET = 1'b0;
localparam TED_REG4_calib_done_up_BIT_RESET = 1'b0;
localparam TED_REG4_unused_BIT_RESET = 2'b00;
localparam DIG_UNUSED_REG0_REG_OFFSET = 8'b01110110;
localparam DIG_UNUSED_REG0_unused_BIT_RESET = 8'b00000000;
localparam DIG_UNUSED_REG1_REG_OFFSET = 8'b01110111;
localparam DIG_UNUSED_REG1_unused_BIT_RESET = 8'b00000000;
localparam DIG_UNUSED_REG2_REG_OFFSET = 8'b01111000;
localparam DIG_UNUSED_REG2_unused_BIT_RESET = 8'b00000000;
localparam DIG_UNUSED_REG3_REG_OFFSET = 8'b01111001;
localparam DIG_UNUSED_REG3_unused_BIT_RESET = 8'b00000000;
localparam INTERRUPT_REG1_REG_OFFSET = 8'b01111010;
localparam INTERRUPT_REG1_irsr_BIT_RESET = 1'b0;
localparam INTERRUPT_REG1_isr_BIT_RESET = 1'b0;
localparam INTERRUPT_REG1_unused_BIT_RESET = 6'b000000;
localparam INTERRUPT_REG2_REG_OFFSET = 8'b01111011;
localparam INTERRUPT_REG2_unused_BIT_RESET = 7'b0000000;
localparam INTERRUPT_REG2_imr_BIT_RESET = 1'b1;
localparam RX_REG0_REG_OFFSET = 8'b10000000;
localparam RX_REG0_fsls_no_eop_timeout_BIT_RESET = 3'b000;
localparam RX_REG0_fsls_timeout_en_BIT_RESET = 1'b0;
localparam RX_REG0_hs_sync_det_bits_BIT_RESET = 1'b0;
localparam RX_REG0_fs_eop_se0_threshold_BIT_RESET = 2'b00;
localparam RX_REG0_fs_eop_se0_en_BIT_RESET = 1'b0;
localparam RX_REG1_REG_OFFSET = 8'b10000001;
localparam RX_REG1_ls_eop_se0_threshold_BIT_RESET = 6'b000000;
localparam RX_REG1_ls_eop_se0_en_BIT_RESET = 1'b0;
localparam RX_REG1_fs_no_eop_timeout_en_BIT_RESET = 1'b0;
localparam TX_REG0_REG_OFFSET = 8'b10000010;
localparam TX_REG0_unused_BIT_RESET = 4'b0000;
localparam TX_REG0_fs_preamble_en_BIT_RESET = 1'b0;
localparam TX_REG0_sof_extension_BIT_RESET = 2'b00;
localparam TX_REG0_sof_extension_en_BIT_RESET = 1'b0;
localparam TX_REG1_REG_OFFSET = 8'b10000011;
localparam TX_REG1_preamble_value_BIT_RESET = 8'b00000000;
localparam CDR_REG0_REG_OFFSET = 8'b10000100;
localparam CDR_REG0_unused_BIT_RESET = 2'b00;
localparam CDR_REG0_pll_clkdiv_BIT_RESET = 2'b00;
localparam CDR_REG0_pll_clkdiv_en_BIT_RESET = 1'b0;
localparam CDR_REG0_squelch_delay_BIT_RESET = 2'b00;
localparam CDR_REG0_squelch_delay_en_BIT_RESET = 1'b0;
localparam CDR_REG1_REG_OFFSET = 8'b10000101;
localparam CDR_REG1_unused_BIT_RESET = 1'b0;
localparam CDR_REG1_calib_comp_out_BIT_RESET = 1'b0;
localparam CDR_REG1_calib_spc_threshold_BIT_RESET = 3'b000;
localparam CDR_REG1_calib_spc_threshold_en_BIT_RESET = 1'b0;
localparam CDR_REG1_calib_iteration_BIT_RESET = 1'b0;
localparam CDR_REG1_dynamic_calib_en_BIT_RESET = 1'b0;
localparam CDR_REG2_REG_OFFSET = 8'b10000110;
localparam CDR_REG2_unused_BIT_RESET = 1'b0;
localparam CDR_REG2_hsrx_en_del_BIT_RESET = 1'b0;
localparam CDR_REG2_hsrx_en_del_en_BIT_RESET = 1'b0;
localparam CDR_REG2_hsrx_en_BIT_RESET = 1'b0;
localparam CDR_REG2_hsrx_en_en_BIT_RESET = 1'b0;
localparam CDR_REG2_calib_clock_BIT_RESET = 1'b0;
localparam CDR_REG2_calib_clock_en_BIT_RESET = 1'b0;
localparam CDR_REG2_calib_out_en_BIT_RESET = 1'b0;
localparam CDR_REG3_REG_OFFSET = 8'b10000111;
localparam CDR_REG3_calib_active_BIT_RESET = 1'b0;
localparam CDR_REG3_calib_done_BIT_RESET = 1'b0;
localparam CDR_REG3_calib_code_BIT_RESET = 6'b000000;
localparam CDR_REG4_REG_OFFSET = 8'b10001000;
localparam CDR_REG4_clk_gate_value_BIT_RESET = 1'b0;
localparam CDR_REG4_clk_gate_en_BIT_RESET = 1'b0;
localparam CDR_REG4_clk_gate_sq_mask_BIT_RESET = 1'b0;
localparam CDR_REG4_latency_threshold_BIT_RESET = 2'b00;
localparam CDR_REG4_latency_threshold_en_BIT_RESET = 1'b0;
localparam CDR_REG4_decision_error_en_BIT_RESET = 1'b0;
localparam CDR_REG4_filter_en_BIT_RESET = 1'b0;
localparam CDR_REG5_REG_OFFSET = 8'b10001001;
localparam CDR_REG5_unused_BIT_RESET = 5'b00000;
localparam CDR_REG5_sample_5x_en_BIT_RESET = 1'b0;
localparam CDR_REG5_small_pulse_BIT_RESET = 1'b0;
localparam CDR_REG5_small_pulse_en_BIT_RESET = 1'b0;
localparam CDR_REG6_REG_OFFSET = 8'b10001010;
localparam CDR_REG6_unused_BIT_RESET = 8'b00000000;
localparam CDR_REG7_REG_OFFSET = 8'b10001011;
localparam CDR_REG7_unused_BIT_RESET = 8'b00000000;
localparam CDR_REG8_REG_OFFSET = 8'b10001100;
localparam CDR_REG8_unused_BIT_RESET = 8'b00000000;
localparam RX_REG2_REG_OFFSET = 8'b10001101;
localparam RX_REG2_eb_error_BIT_RESET = 1'b0;
localparam RX_REG2_cdr_error_BIT_RESET = 1'b0;
localparam RX_REG2_sync_detected_BIT_RESET = 1'b0;
localparam RX_REG2_eop_detected_BIT_RESET = 1'b0;
localparam RX_REG2_hs_eop_condition_BIT_RESET = 1'b0;
localparam RX_REG2_normal_eop_BIT_RESET = 1'b0;
localparam RX_REG2_alignment_error_BIT_RESET = 1'b0;
localparam RX_REG2_no_eop_BIT_RESET = 1'b0;
localparam RX_REG3_REG_OFFSET = 8'b10001110;
localparam RX_REG3_hs_eop_detected_BIT_RESET = 1'b0;
localparam RX_REG3_se0_validated_BIT_RESET = 1'b0;
localparam RX_REG3_lsfs_eop_detected_BIT_RESET = 1'b0;
localparam RX_REG3_bit_unstuff_error_BIT_RESET = 1'b0;
localparam RX_REG3_rx_state_bitunstuff_BIT_RESET = 3'b000;
localparam RX_REG3_start_flag_BIT_RESET = 1'b0;
localparam RX_REG4_REG_OFFSET = 8'b10001111;
localparam RX_REG4_rxactive_reg_BIT_RESET = 1'b0;
localparam RX_REG4_deassert_rxactive_reg_BIT_RESET = 1'b0;
localparam RX_REG4_unused_BIT_RESET = 6'b000000;
localparam RX_REG5_REG_OFFSET = 8'b10010000;
localparam RX_REG5_sie_cnt_upper_BIT_RESET = 8'b00000000;
localparam RX_REG6_REG_OFFSET = 8'b10010001;
localparam RX_REG6_phy_cnt_upper_BIT_RESET = 8'b00000000;
localparam RX_REG7_REG_OFFSET = 8'b10010010;
localparam RX_REG7_phy_cnt_lower_BIT_RESET = 4'b0000;
localparam RX_REG7_sie_cnt_lower_BIT_RESET = 4'b0000;
localparam TX_REG2_REG_OFFSET = 8'b10010011;
localparam TX_REG2_tx_hs_state_BIT_RESET = 4'b0000;
localparam TX_REG2_eop_transmitted_BIT_RESET = 1'b0;
localparam TX_REG2_hs_bitstuff_en_BIT_RESET = 1'b0;
localparam TX_REG2_resume_eop_BIT_RESET = 1'b0;
localparam TX_REG2_remote_wakeup_BIT_RESET = 1'b0;
localparam TX_REG3_REG_OFFSET = 8'b10010100;
localparam TX_REG3_tx_lsfs_state_BIT_RESET = 4'b0000;
localparam TX_REG3_pd_state_BIT_RESET = 3'b000;
localparam TX_REG3_preamble_sent_BIT_RESET = 1'b0;
localparam TX_REG4_REG_OFFSET = 8'b10010101;
localparam TX_REG4_unused_BIT_RESET = 6'b000000;
localparam TX_REG4_lsfs_bitstuff_en_BIT_RESET = 1'b0;
localparam TX_REG4_ls_keep_alive_BIT_RESET = 1'b0;
localparam CDR_REG9_REG_OFFSET = 8'b10010110;
localparam CDR_REG9_UNUSED_BIT_RESET = 5'b00000;
localparam CDR_REG9_i_ana_comp_out_BIT_RESET = 1'b0;
localparam CDR_REG9_sampler_calib_done_BIT_RESET = 1'b0;
localparam CDR_REG9_ana_calib_active_BIT_RESET = 1'b0;
localparam CDR_REG10_REG_OFFSET = 8'b10010111;
localparam CDR_REG10_unused_BIT_RESET = 2'b00;
localparam CDR_REG10_calib_code_BIT_RESET = 6'b000000;
localparam CDR_REG11_REG_OFFSET = 8'b10011000;
localparam CDR_REG11_small_pulse_BIT_RESET = 4'b0000;
localparam CDR_REG11_o_hsrx_rec_dicision_error_BIT_RESET = 1'b0;
localparam CDR_REG11_o_ana_clk_gate_BIT_RESET = 1'b0;
localparam CDR_REG11_receive_start_BIT_RESET = 1'b0;
localparam CDR_REG11_i_ana_ted_squelch_BIT_RESET = 1'b0;
localparam CDR_RE12_REG_OFFSET = 8'b10011001;
localparam CDR_RE12_unused_BIT_RESET = 8'b00000000;
localparam DIG_TXRX_UNUSED_REG0_REG_OFFSET = 8'b10011010;
localparam DIG_TXRX_UNUSED_REG0_unused_BIT_RESET = 8'b00000000;
localparam DIG_TXRX_UNUSED_REG1_REG_OFFSET = 8'b10011011;
localparam DIG_TXRX_UNUSED_REG1_unused_BIT_RESET = 8'b00000000;
localparam DIG_TXRX_UNUSED_REG2_REG_OFFSET = 8'b10011100;
localparam DIG_TXRX_UNUSED_REG2_unused_BIT_RESET = 8'b00000000;
localparam DIG_TXRX_UNUSED_REG3_REG_OFFSET = 8'b10011101;
localparam DIG_TXRX_UNUSED_REG3_unused_BIT_RESET = 8'b00000000;
localparam PLL_REG0_REG_OFFSET = 8'b01000000;
localparam PLL_REG0_initial_wait_time_BIT_RESET = 8'b00000000;
localparam PLL_REG1_REG_OFFSET = 8'b01000001;
localparam PLL_REG1_rst_fdbk_div_delay_value_BIT_RESET = 5'b00000;
localparam PLL_REG1_rst_fdbk_div_delay_en_BIT_RESET = 1'b0;
localparam PLL_REG1_fbdiv_en_BIT_RESET = 1'b0;
localparam PLL_REG1_initial_wait_time_en_BIT_RESET = 1'b0;
localparam PLL_REG2_REG_OFFSET = 8'b01000010;
localparam PLL_REG2_unused_BIT_RESET = 1'b0;
localparam PLL_REG2_vco_settling_time_en_BIT_RESET = 1'b0;
localparam PLL_REG2_vco_settling_time_BIT_RESET = 6'b000000;
localparam PLL_REG3_REG_OFFSET = 8'b01000011;
localparam PLL_REG3_fbdiv_value_BIT_RESET = 8'b00000000;
localparam PLL_REG4_REG_OFFSET = 8'b01000100;
localparam PLL_REG4_unused_BIT_RESET = 1'b0;
localparam PLL_REG4_pll_lock_time_15_BIT_RESET = 1'b0;
localparam PLL_REG4_pd_pfd_value_BIT_RESET = 1'b0;
localparam PLL_REG4_pd_pfd_en_BIT_RESET = 1'b0;
localparam PLL_REG4_pll_lock_en_BIT_RESET = 1'b0;
localparam PLL_REG4_pll_lock_value_BIT_RESET = 1'b0;
localparam PLL_REG4_coarsedone_en_BIT_RESET = 1'b0;
localparam PLL_REG4_coarsedone_value_BIT_RESET = 1'b0;
localparam PLL_REG5_REG_OFFSET = 8'b01000101;
localparam PLL_REG5_startloop_en_4_0_BIT_RESET = 1'b0;
localparam PLL_REG5_startloop_en_5_BIT_RESET = 1'b0;
localparam PLL_REG5_startloop_5_BIT_RESET = 1'b0;
localparam PLL_REG5_startloop_4_0_BIT_RESET = 5'b00000;
localparam PLL_REG6_REG_OFFSET = 8'b01000110;
localparam PLL_REG6_unused_BIT_RESET = 1'b0;
localparam PLL_REG6_coarse_code_sel_BIT_RESET = 1'b0;
localparam PLL_REG6_lsb_error_0p5_BIT_RESET = 1'b0;
localparam PLL_REG6_big_jump_en_BIT_RESET = 1'b0;
localparam PLL_REG6_vco_cnt_window_value_BIT_RESET = 1'b0;
localparam PLL_REG6_vco_cnt_window_en_BIT_RESET = 1'b0;
localparam PLL_REG6_rst_fdbk_div_value_BIT_RESET = 1'b0;
localparam PLL_REG6_rst_fdbk_div_en_BIT_RESET = 1'b0;
localparam PLL_REG7_REG_OFFSET = 8'b01000111;
localparam PLL_REG7_unused_BIT_RESET = 3'b000;
localparam PLL_REG7_refclk_sel_BIT_RESET = 4'b0000;
localparam PLL_REG7_refclk_sel_en_BIT_RESET = 1'b0;
localparam PLL_REG8_REG_OFFSET = 8'b01001000;
localparam PLL_REG8_coarse_code_BIT_RESET = 8'b00000000;
localparam PLL_REG9_REG_OFFSET = 8'b01001001;
localparam PLL_REG9_coarse_code_BIT_RESET = 1'b0;
localparam PLL_REG9_V2I_code_en_BIT_RESET = 1'b0;
localparam PLL_REG9_V2I_code_BIT_RESET = 6'b000000;
localparam PLL_REG10_REG_OFFSET = 8'b01001010;
localparam PLL_REG10_unused_BIT_RESET = 1'b0;
localparam PLL_REG10_ipdiv_value_BIT_RESET = 5'b00000;
localparam PLL_REG10_ipdiv_en_BIT_RESET = 1'b0;
localparam PLL_REG10_coarse_code_en_BIT_RESET = 1'b0;
localparam PLL_REG11_REG_OFFSET = 8'b01001011;
localparam PLL_REG11_pll_standby_BIT_RESET = 1'b0;
localparam PLL_REG11_pll_standby_en_BIT_RESET = 1'b0;
localparam PLL_REG11_pll_pd_BIT_RESET = 1'b0;
localparam PLL_REG11_pll_pd_en_BIT_RESET = 1'b0;
localparam PLL_REG11_pll_pso_del_BIT_RESET = 1'b0;
localparam PLL_REG11_pll_pso_del_en_BIT_RESET = 1'b0;
localparam PLL_REG11_pll_pso_BIT_RESET = 1'b0;
localparam PLL_REG11_pll_pso_en_BIT_RESET = 1'b0;
localparam PLL_REG12_REG_OFFSET = 8'b01001100;
localparam PLL_REG12_unused_BIT_RESET = 2'b00;
localparam PLL_REG12_pll_ldo_ref_en_BIT_RESET = 1'b0;
localparam PLL_REG12_pll_ldo_ref_en_en_BIT_RESET = 1'b0;
localparam PLL_REG12_pll_ldo_core_en_BIT_RESET = 1'b0;
localparam PLL_REG12_pll_ldo_core_en_en_BIT_RESET = 1'b0;
localparam PLL_REG12_pll_pd_ana_BIT_RESET = 1'b0;
localparam PLL_REG12_pll_pd_ana_en_BIT_RESET = 1'b0;
localparam PLL_REG13_REG_OFFSET = 8'b01001101;
localparam PLL_REG13_pll_clkon_BIT_RESET = 1'b0;
localparam PLL_REG13_pll_ldo_ref_core_BIT_RESET = 6'b000000;
localparam PLL_REG13_pll_ldo_ref_core_en_BIT_RESET = 1'b0;
localparam PLL_REG14_REG_OFFSET = 8'b01001110;
localparam PLL_REG14_pll_ldo_cnt_threshold_BIT_RESET = 3'b000;
localparam PLL_REG14_pll_ldo_cnt_threshold_en_BIT_RESET = 1'b0;
localparam PLL_REG14_pll_ldo_iso_cnt_threshold_BIT_RESET = 3'b000;
localparam PLL_REG14_pll_ldo_iso_cnt_threshold_en_BIT_RESET = 1'b0;
localparam PLL_UNUSED_REG0_REG_OFFSET = 8'b01001111;
localparam PLL_UNUSED_REG0_unused_BIT_RESET = 8'b00000000;
localparam PLL_UNUSED_REG1_REG_OFFSET = 8'b01010000;
localparam PLL_UNUSED_REG1_unused_BIT_RESET = 8'b00000000;
localparam PLL_REG15_REG_OFFSET = 8'b01010001;
localparam PLL_REG15_pll_lock_BIT_RESET = 1'b0;
localparam PLL_REG15_coarsedone_BIT_RESET = 1'b0;
localparam PLL_REG15_vco_cnt_win_BIT_RESET = 1'b0;
localparam PLL_REG15_rst_fdbk_div_BIT_RESET = 1'b0;
localparam PLL_REG15_unused_BIT_RESET = 1'b0;
localparam PLL_REG15_pd_pfd_BIT_RESET = 1'b0;
localparam PLL_REG15_startloop_BIT_RESET = 1'b0;
localparam PLL_REG15_coarse_code_8_BIT_RESET = 1'b0;
localparam PLL_REG16_REG_OFFSET = 8'b01010010;
localparam PLL_REG16_coarse_code_BIT_RESET = 8'b00000000;
localparam PLL_UNUSED_REG2_REG_OFFSET = 8'b01010011;
localparam PLL_UNUSED_REG2_unused_BIT_RESET = 8'b00000000;
localparam UTMI_REG0_REG_OFFSET = 8'b10100000;
localparam UTMI_REG0_loopback_sel_BIT_RESET = 2'b00;
localparam UTMI_REG0_loopback_en_BIT_RESET = 1'b0;
localparam UTMI_REG0_bist_mode_sel_BIT_RESET = 4'b0000;
localparam UTMI_REG0_bist_en_BIT_RESET = 1'b0;
localparam UTMI_REG1_REG_OFFSET = 8'b10100001;
localparam UTMI_REG1_bist_err_BIT_RESET = 2'b00;
localparam UTMI_REG1_bist_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG1_tx_lsfs_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG1_tx_hs_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG1_clkdiv_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG1_calib_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG1_phy_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG2_REG_OFFSET = 8'b10100010;
localparam UTMI_REG2_rx_cntrl_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG2_shift_reg_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG2_bitunstuff_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG2_nrzi_dec_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG2_eop_det_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG2_sync_det_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG2_lsfs_dll_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG2_rx_hs_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG3_REG_OFFSET = 8'b10100011;
localparam UTMI_REG3_hs_rx_err_BIT_RESET = 1'b0;
localparam UTMI_REG3_ls_linestate_fil_en_BIT_RESET = 1'b0;
localparam UTMI_REG3_fs_linestate_fil_cnt_BIT_RESET = 5'b00000;
localparam UTMI_REG3_fs_linestate_fil_en_BIT_RESET = 1'b0;
localparam UTMI_REG4_REG_OFFSET = 8'b10100100;
localparam UTMI_REG4_ls_linestate_fil_cnt_BIT_RESET = 8'b00000000;
localparam UTMI_REG5_REG_OFFSET = 8'b10100101;
localparam UTMI_REG5_bist_mode_en_BIT_RESET = 1'b0;
localparam UTMI_REG5_bist_on_BIT_RESET = 1'b0;
localparam UTMI_REG5_hstx_boost_deamp_off_BIT_RESET = 1'b0;
localparam UTMI_REG5_hstx_boost_BIT_RESET = 1'b0;
localparam UTMI_REG5_hs_samp_BIT_RESET = 1'b0;
localparam UTMI_REG5_hs_samp_en_BIT_RESET = 1'b0;
localparam UTMI_REG5_hsrx_BIT_RESET = 1'b0;
localparam UTMI_REG5_hsrx_en_BIT_RESET = 1'b0;
localparam UTMI_REG6_REG_OFFSET = 8'b10100110;
localparam UTMI_REG6_vbusvalid_cntrl_BIT_RESET = 1'b0;
localparam UTMI_REG6_vbusvalid_l3_dev_en_BIT_RESET = 1'b0;
localparam UTMI_REG6_hs_drven_threshold_BIT_RESET = 5'b00000;
localparam UTMI_REG6_hs_drven_th_en_BIT_RESET = 1'b0;
localparam UTMI_REG7_REG_OFFSET = 8'b10100111;
localparam UTMI_REG7_hstx_bc_mode_BIT_RESET = 1'b0;
localparam UTMI_REG7_hstx_bc_en_BIT_RESET = 1'b0;
localparam UTMI_REG7_hstx_chirp_mode_BIT_RESET = 1'b0;
localparam UTMI_REG7_hstx_chirp_en_BIT_RESET = 1'b0;
localparam UTMI_REG7_hstx_en_del_BIT_RESET = 1'b0;
localparam UTMI_REG7_hstx_en_del_en_BIT_RESET = 1'b0;
localparam UTMI_REG7_hstx_BIT_RESET = 1'b0;
localparam UTMI_REG7_hstx_en_BIT_RESET = 1'b0;
localparam UTMI_REG8_REG_OFFSET = 8'b10101000;
localparam UTMI_REG8_hs_term_BIT_RESET = 1'b0;
localparam UTMI_REG8_hs_term_en_BIT_RESET = 1'b0;
localparam UTMI_REG8_hstx_data_BIT_RESET = 1'b0;
localparam UTMI_REG8_hstx_data_en_BIT_RESET = 1'b0;
localparam UTMI_REG8_hstx_drv_BIT_RESET = 1'b0;
localparam UTMI_REG8_hstx_drv_en_BIT_RESET = 1'b0;
localparam UTMI_REG8_hstx_predrv_BIT_RESET = 1'b0;
localparam UTMI_REG8_hstx_predrv_en_BIT_RESET = 1'b0;
localparam UTMI_REG9_REG_OFFSET = 8'b10101001;
localparam UTMI_REG9_clkoff_en_BIT_RESET = 1'b0;
localparam UTMI_REG9_sdc_space_BIT_RESET = 3'b000;
localparam UTMI_REG9_sdc_space_en_BIT_RESET = 1'b0;
localparam UTMI_REG9_hstx_en_del_th_BIT_RESET = 2'b00;
localparam UTMI_REG9_hstx_en_del_th_en_BIT_RESET = 1'b0;
localparam UTMI_REG10_REG_OFFSET = 8'b10101010;
localparam UTMI_REG10_pll_clkon_BIT_RESET = 1'b0;
localparam UTMI_REG10_pll_clkon_en_BIT_RESET = 1'b0;
localparam UTMI_REG10_bg_pd_bg_ok_BIT_RESET = 1'b0;
localparam UTMI_REG10_bg_pd_bg_ok_en_BIT_RESET = 1'b0;
localparam UTMI_REG10_lsfs_serx_BIT_RESET = 1'b0;
localparam UTMI_REG10_lsfs_serx_en_BIT_RESET = 1'b0;
localparam UTMI_REG10_lsfs_rx_BIT_RESET = 1'b0;
localparam UTMI_REG10_lsfs_rx_en_BIT_RESET = 1'b0;
localparam UTMI_REG11_REG_OFFSET = 8'b10101011;
localparam UTMI_REG11_clean_linestate_serx_mask_en_BIT_RESET = 1'b0;
localparam UTMI_REG11_serx_mask_en_BIT_RESET = 1'b0;
localparam UTMI_REG11_serx_mask_threshold_BIT_RESET = 2'b00;
localparam UTMI_REG11_lsfs_tx_BIT_RESET = 1'b0;
localparam UTMI_REG11_lsfs_tx_en_BIT_RESET = 1'b0;
localparam UTMI_REG11_fsls_edgesel_BIT_RESET = 1'b0;
localparam UTMI_REG11_fsls_edgesel_en_BIT_RESET = 1'b0;
localparam UTMI_REG12_REG_OFFSET = 8'b10101100;
localparam UTMI_REG12_serx_bias_en_BIT_RESET = 2'b00;
localparam UTMI_REG12_fsls_tx_data_BIT_RESET = 1'b0;
localparam UTMI_REG12_fsls_tx_data_en_BIT_RESET = 1'b0;
localparam UTMI_REG12_fsls_tx_se0_BIT_RESET = 1'b0;
localparam UTMI_REG12_fsls_tx_se0_en_BIT_RESET = 1'b0;
localparam UTMI_REG12_fsls_tx_drv_BIT_RESET = 1'b0;
localparam UTMI_REG12_fsls_tx_drv_en_BIT_RESET = 1'b0;
localparam UTMI_REG13_REG_OFFSET = 8'b10101101;
localparam UTMI_REG13_fsls_serialmode_pullup2_BIT_RESET = 1'b0;
localparam UTMI_REG13_fsls_serialmode_pullup2_en_BIT_RESET = 1'b0;
localparam UTMI_REG13_dm_pulldown_BIT_RESET = 1'b0;
localparam UTMI_REG13_dm_pulldown_en_BIT_RESET = 1'b0;
localparam UTMI_REG13_dp_pulldown_BIT_RESET = 1'b0;
localparam UTMI_REG13_dp_pulldown_en_BIT_RESET = 1'b0;
localparam UTMI_REG13_lane_reverse_BIT_RESET = 1'b0;
localparam UTMI_REG13_lane_reverse_en_BIT_RESET = 1'b0;
localparam UTMI_REG14_REG_OFFSET = 8'b10101110;
localparam UTMI_REG14_dm_pullup2_BIT_RESET = 1'b0;
localparam UTMI_REG14_dm_pullup2_en_BIT_RESET = 1'b0;
localparam UTMI_REG14_dp_pullup2_BIT_RESET = 1'b0;
localparam UTMI_REG14_dp_pullup2_en_BIT_RESET = 1'b0;
localparam UTMI_REG14_dm_pullup1_BIT_RESET = 1'b0;
localparam UTMI_REG14_dm_pullup1_en_BIT_RESET = 1'b0;
localparam UTMI_REG14_dp_pullup1_BIT_RESET = 1'b0;
localparam UTMI_REG14_dp_pullup1_en_BIT_RESET = 1'b0;
localparam UTMI_REG15_REG_OFFSET = 8'b10101111;
localparam UTMI_REG15_txvalid_gate_threshold_fs_BIT_RESET = 2'b00;
localparam UTMI_REG15_txvalid_gate_threshold_hs_BIT_RESET = 2'b00;
localparam UTMI_REG15_ted_en_value_BIT_RESET = 1'b0;
localparam UTMI_REG15_ted_en_cnt_BIT_RESET = 1'b0;
localparam UTMI_REG15_ed_en_value_BIT_RESET = 1'b0;
localparam UTMI_REG15_ed_en_cnt_BIT_RESET = 1'b0;
localparam UTMI_REG16_REG_OFFSET = 8'b10110000;
localparam UTMI_REG16_unused_BIT_RESET = 8'b00000000;
localparam UTMI_REG17_REG_OFFSET = 8'b10110001;
localparam UTMI_REG17_squelch_count_idle_BIT_RESET = 2'b00;
localparam UTMI_REG17_squelch_count_idle_en_BIT_RESET = 1'b0;
localparam UTMI_REG17_tx_sq_cnt_BIT_RESET = 4'b0000;
localparam UTMI_REG17_tx_sq_cnt_en_BIT_RESET = 1'b0;
localparam UTMI_REG18_REG_OFFSET = 8'b10110010;
localparam UTMI_REG18_sleep_value_BIT_RESET = 1'b0;
localparam UTMI_REG18_sleep_en_BIT_RESET = 1'b0;
localparam UTMI_REG18_bist_powerup_BIT_RESET = 1'b0;
localparam UTMI_REG18_bist_powerup_en_BIT_RESET = 1'b0;
localparam UTMI_REG18_powerup_en_BIT_RESET = 1'b0;
localparam UTMI_REG18_unused_BIT_RESET = 1'b0;
localparam UTMI_REG18_clipper_en_BIT_RESET = 1'b0;
localparam UTMI_REG18_clipper_en_en_BIT_RESET = 1'b0;
localparam UTMI_REG19_REG_OFFSET = 8'b10110011;
localparam UTMI_REG19_unused_BIT_RESET = 7'b0000000;
localparam UTMI_REG19_ted_sw_en_BIT_RESET = 1'b0;
localparam UTMI_REG20_REG_OFFSET = 8'b10110100;
localparam UTMI_REG20_hostdiscon_rst_reg_BIT_RESET = 1'b0;
localparam UTMI_REG20_hostdiscon_rst_reg_en_BIT_RESET = 1'b0;
localparam UTMI_REG20_calib_rst_dt_BIT_RESET = 5'b00000;
localparam UTMI_REG20_calib_rst_dt_en_BIT_RESET = 1'b0;
localparam UTMI_REG21_REG_OFFSET = 8'b10110101;
localparam UTMI_REG21_calib_triger_posedge_BIT_RESET = 1'b0;
localparam UTMI_REG21_auto_cal_enable_BIT_RESET = 1'b0;
localparam UTMI_REG21_absvalid_BIT_RESET = 1'b0;
localparam UTMI_REG21_absvalid_en_BIT_RESET = 1'b0;
localparam UTMI_REG21_vbusvalid_BIT_RESET = 1'b0;
localparam UTMI_REG21_vbusvalid_en_BIT_RESET = 1'b0;
localparam UTMI_REG21_suspendm_BIT_RESET = 1'b0;
localparam UTMI_REG21_suspendm_en_BIT_RESET = 1'b0;
localparam UTMI_REG22_REG_OFFSET = 8'b10110110;
localparam UTMI_REG22_bccalib_offset_BIT_RESET = 8'b00000000;
localparam UTMI_REG23_REG_OFFSET = 8'b10110111;
localparam UTMI_REG23_hscalib_offset_BIT_RESET = 8'b00000000;
localparam UTMI_REG24_REG_OFFSET = 8'b10111000;
localparam UTMI_REG24_fscalib_offset_BIT_RESET = 8'b00000000;
localparam UTMI_REG25_REG_OFFSET = 8'b10111001;
localparam UTMI_REG25_unused_BIT_RESET = 1'b0;
localparam UTMI_REG25_hscalib_BIT_RESET = 7'b0000000;
localparam UTMI_REG26_REG_OFFSET = 8'b10111010;
localparam UTMI_REG26_unused_BIT_RESET = 1'b0;
localparam UTMI_REG26_fscalib_BIT_RESET = 7'b0000000;
localparam UTMI_REG27_REG_OFFSET = 8'b10111011;
localparam UTMI_REG27_unused_BIT_RESET = 1'b0;
localparam UTMI_REG27_bccalib_BIT_RESET = 7'b0000000;
localparam UTMI_REG28_REG_OFFSET = 8'b10111100;
localparam UTMI_REG28_cdr_eb_wr_reset_BIT_RESET = 1'b0;
localparam UTMI_REG28_unused_BIT_RESET = 7'b0000000;
localparam UTMI_REG29_REG_OFFSET = 8'b10111101;
localparam UTMI_REG29_unused_BIT_RESET = 2'b00;
localparam UTMI_REG29_pll_standalone_BIT_RESET = 1'b0;
localparam UTMI_REG29_pll_standalone_en_BIT_RESET = 1'b0;
localparam UTMI_REG29_spare_out_BIT_RESET = 4'b0000;
localparam UTMI_REG30_REG_OFFSET = 8'b10111110;
localparam UTMI_REG30_unused_BIT_RESET = 1'b0;
localparam UTMI_REG30_pll_480_clock_gate_ovr_BIT_RESET = 1'b0;
localparam UTMI_REG30_scan_ats_hs_clock_gate_ovr_BIT_RESET = 1'b0;
localparam UTMI_REG30_vco_pll_clock_gate_ovr_BIT_RESET = 1'b0;
localparam UTMI_REG30_dig_div_refclock_gate_ovr_BIT_RESET = 1'b0;
localparam UTMI_REG30_fb_clock_gate_ovr_BIT_RESET = 1'b0;
localparam UTMI_REG30_ana_div_refclock_gate_ovr_BIT_RESET = 1'b0;
localparam UTMI_REG30_hs_clock_gate_ovr_BIT_RESET = 1'b0;
localparam UTMI_UNUSED_REG0_REG_OFFSET = 8'b10111111;
localparam UTMI_UNUSED_REG0_unused_BIT_RESET = 8'b00000000;
localparam UTMI_UNUSED_REG1_REG_OFFSET = 8'b11000000;
localparam UTMI_UNUSED_REG1_unused_BIT_RESET = 8'b00000000;
localparam UTMI_UNUSED_REG2_REG_OFFSET = 8'b11000001;
localparam UTMI_UNUSED_REG2_unused_BIT_RESET = 8'b00000000;
localparam UTMI_UNUSED_REG3_REG_OFFSET = 8'b11000010;
localparam UTMI_UNUSED_REG3_unused_BIT_RESET = 8'b00000000;
localparam UTMI_REG31_REG_OFFSET = 8'b11000011;
localparam UTMI_REG31_unused_BIT_RESET = 6'b000000;
localparam UTMI_REG31_bist_error_BIT_RESET = 1'b0;
localparam UTMI_REG31_bist_complete_BIT_RESET = 1'b0;
localparam UTMI_REG32_REG_OFFSET = 8'b11000100;
localparam UTMI_REG32_bist_err_count_BIT_RESET = 8'b00000000;
localparam UTMI_REG33_REG_OFFSET = 8'b11000101;
localparam UTMI_REG33_bg_powergood_BIT_RESET = 1'b0;
localparam UTMI_REG33_afe_hsrx_diff_data_BIT_RESET = 1'b0;
localparam UTMI_REG33_hsrx_en_BIT_RESET = 1'b0;
localparam UTMI_REG33_hsrx_sampler_enable_BIT_RESET = 1'b0;
localparam UTMI_REG33_chirp_mode_en_BIT_RESET = 1'b0;
localparam UTMI_REG33_hstx_en_BIT_RESET = 1'b0;
localparam UTMI_REG33_hstx_en_delayed_BIT_RESET = 1'b0;
localparam UTMI_REG33_hstx_boost_deamp_off_BIT_RESET = 1'b0;
localparam UTMI_REG34_REG_OFFSET = 8'b11000110;
localparam UTMI_REG34_o_dprpu1_en_BIT_RESET = 1'b0;
localparam UTMI_REG34_o_dmrpu1_en_BIT_RESET = 1'b0;
localparam UTMI_REG34_o_dprpu2_en_BIT_RESET = 1'b0;
localparam UTMI_REG34_o_dmrpu2_en_BIT_RESET = 1'b0;
localparam UTMI_REG34_o_dprpd_en_BIT_RESET = 1'b0;
localparam UTMI_REG34_o_dmrpd_en_BIT_RESET = 1'b0;
localparam UTMI_REG34_o_otgc_id_pullup_en_BIT_RESET = 1'b0;
localparam UTMI_REG34_o_fs_edge_sel_BIT_RESET = 1'b0;
localparam UTMI_REG35_REG_OFFSET = 8'b11000111;
localparam UTMI_REG35_i_afe_lsfsrx_ana_BIT_RESET = 1'b0;
localparam UTMI_REG35_o_lsfstx_en_BIT_RESET = 1'b0;
localparam UTMI_REG35_o_lsfsdrv_en_BIT_RESET = 1'b0;
localparam UTMI_REG35_o_lsfs_ddi_BIT_RESET = 1'b0;
localparam UTMI_REG35_o_assert_sezero_BIT_RESET = 1'b0;
localparam UTMI_REG35_o_lsfsrx_en_BIT_RESET = 1'b0;
localparam UTMI_REG35_o_serx_en_BIT_RESET = 1'b0;
localparam UTMI_REG35_o_serx_bias_en_BIT_RESET = 1'b0;
localparam UTMI_REG36_REG_OFFSET = 8'b11001000;
localparam UTMI_REG36_o_pll_pso_BIT_RESET = 1'b0;
localparam UTMI_REG36_o_pll_pso_delay_BIT_RESET = 1'b0;
localparam UTMI_REG36_o_pll_pd_BIT_RESET = 1'b0;
localparam UTMI_REG36_o_pll_ipdiv_BIT_RESET = 5'b00000;
localparam UTMI_REG37_REG_OFFSET = 8'b11001001;
localparam UTMI_REG37_o_pll_fbdiv_value_BIT_RESET = 8'b00000000;
localparam UTMI_REG38_REG_OFFSET = 8'b11001010;
localparam UTMI_REG38_o_pll_standby_BIT_RESET = 1'b0;
localparam UTMI_REG38_o_pll_ldo_core_en_BIT_RESET = 1'b0;
localparam UTMI_REG38_o_pll_ldo_ref_en_BIT_RESET = 1'b0;
localparam UTMI_REG38_o_afe_suspendm_BIT_RESET = 1'b0;
localparam UTMI_REG38_o_otgc_vbusvalid_en_BIT_RESET = 1'b0;
localparam UTMI_REG38_o_otgc_absvalid_en_BIT_RESET = 1'b0;
localparam UTMI_REG38_o_afe_clipper_en_BIT_RESET = 1'b0;
localparam UTMI_REG38_o_pll_ldo_isolation_cntrl_BIT_RESET = 1'b0;
localparam UTMI_REG39_REG_OFFSET = 8'b11001011;
localparam UTMI_REG39_unused_BIT_RESET = 8'b00000000;
localparam UTMI_REG40_REG_OFFSET = 8'b11001100;
localparam UTMI_REG40_unused_BIT_RESET = 8'b00000000;
localparam UTMI_REG41_REG_OFFSET = 8'b11001101;
localparam UTMI_REG41_i_ted_squelch_ana_BIT_RESET = 1'b0;
localparam UTMI_REG41_i_usb2_rescal_calib_done_BIT_RESET = 1'b0;
localparam UTMI_REG41_hs_calib_code_BIT_RESET = 6'b000000;
localparam UTMI_REG42_REG_OFFSET = 8'b11001110;
localparam UTMI_REG42_hs_sof_BIT_RESET = 1'b0;
localparam UTMI_REG42_all_calib_done_BIT_RESET = 1'b0;
localparam UTMI_REG42_fs_calib_code_BIT_RESET = 6'b000000;
localparam UTMI_REG43_REG_OFFSET = 8'b11001111;
localparam UTMI_REG43_ls_mode_BIT_RESET = 1'b0;
localparam UTMI_REG43_fs_mode_pre_BIT_RESET = 1'b0;
localparam UTMI_REG43_bc_calib_code_BIT_RESET = 6'b000000;
localparam UTMI_REG44_REG_OFFSET = 8'b11010000;
localparam UTMI_REG44_rstn_refclock_BIT_RESET = 1'b0;
localparam UTMI_REG44_rstn_hs_clock_BIT_RESET = 1'b0;
localparam UTMI_REG44_rstn_hs_tx_clock_BIT_RESET = 1'b0;
localparam UTMI_REG44_rstn_byte_clock_BIT_RESET = 1'b0;
localparam UTMI_REG44_rstn_sieclock_BIT_RESET = 1'b0;
localparam UTMI_REG44_rstn_clkdiv_BIT_RESET = 1'b0;
localparam UTMI_REG44_rstn_calib_clkdiv_BIT_RESET = 1'b0;
localparam UTMI_REG44_udc_rstn_cdr_async_BIT_RESET = 1'b0;
localparam UTMI_REG45_REG_OFFSET = 8'b11010001;
localparam UTMI_REG45_udc_calib_rstn_BIT_RESET = 1'b0;
localparam UTMI_REG45_udc_apb_rstn_BIT_RESET = 1'b0;
localparam UTMI_REG45_o_rstn_cdr_async_BIT_RESET = 1'b0;
localparam UTMI_REG45_o_pll_calib_rstn_BIT_RESET = 1'b0;
localparam UTMI_REG45_bist_mode_rstn_BIT_RESET = 1'b0;
localparam UTMI_REG45_o_usb2_calib_rstn_BIT_RESET = 1'b0;
localparam UTMI_REG45_udc_bc_calib_rstn_BIT_RESET = 1'b0;
localparam UTMI_REG45_global_resetn_BIT_RESET = 1'b0;
localparam UTMI_REG46_REG_OFFSET = 8'b11010010;
localparam UTMI_REG46_unused_BIT_RESET = 1'b0;
localparam UTMI_REG46_recovery_cnt_en_BIT_RESET = 1'b0;
localparam UTMI_REG46_clean_linestate_BIT_RESET = 2'b00;
localparam UTMI_REG46_bc_state_machine_status_BIT_RESET = 4'b0000;
localparam UTMI_REG47_REG_OFFSET = 8'b11010011;
localparam UTMI_REG47_filter_cnt_en_BIT_RESET = 1'b0;
localparam UTMI_REG47_host_opmode_BIT_RESET = 2'b00;
localparam UTMI_REG47_dev_opmode_BIT_RESET = 2'b00;
localparam UTMI_REG47_i_ded_ana_BIT_RESET = 1'b0;
localparam UTMI_REG47_hs_hostdisconnect_BIT_RESET = 1'b0;
localparam UTMI_REG47_lsfs_hostdisconnect_BIT_RESET = 1'b0;
localparam UTMI_REG48_REG_OFFSET = 8'b11010100;
localparam UTMI_REG48_bist_tx_state_BIT_RESET = 2'b00;
localparam UTMI_REG48_data_cnt_tx_BIT_RESET = 6'b000000;
localparam UTMI_REG49_REG_OFFSET = 8'b11010101;
localparam UTMI_REG49_bist_rx_state_BIT_RESET = 2'b00;
localparam UTMI_REG49_data_cnt_rx_BIT_RESET = 6'b000000;
localparam UTMI_REG50_REG_OFFSET = 8'b11010110;
localparam UTMI_REG50_bist_top_state_BIT_RESET = 4'b0000;
localparam UTMI_REG50_inc_data_cnt_tx_BIT_RESET = 1'b0;
localparam UTMI_REG50_inc_data_cnt_rx_BIT_RESET = 1'b0;
localparam UTMI_REG50_o_bg_pd_BIT_RESET = 1'b0;
localparam UTMI_REG50_o_bg_pd_bg_ok_BIT_RESET = 1'b0;
localparam UTMI_REG51_REG_OFFSET = 8'b11010111;
localparam UTMI_REG51_powerdown_BIT_RESET = 2'b00;
localparam UTMI_REG51_reset_BIT_RESET = 1'b0;
localparam UTMI_REG51_suspendm_BIT_RESET = 1'b0;
localparam UTMI_REG51_termselect_BIT_RESET = 1'b0;
localparam UTMI_REG51_databus16_8_BIT_RESET = 1'b0;
localparam UTMI_REG51_dppulldown_BIT_RESET = 1'b0;
localparam UTMI_REG51_dmpulldown_BIT_RESET = 1'b0;
localparam UTMI_REG52_REG_OFFSET = 8'b11011000;
localparam UTMI_REG52_lane_reverse_BIT_RESET = 1'b0;
localparam UTMI_REG52_txbitstuffenable_BIT_RESET = 1'b0;
localparam UTMI_REG52_txbitstuffenableh_BIT_RESET = 1'b0;
localparam UTMI_REG52_xcvrselect_BIT_RESET = 2'b00;
localparam UTMI_REG52_linestate_BIT_RESET = 2'b00;
localparam UTMI_REG52_hostdisconnect_BIT_RESET = 1'b0;
localparam UTMI_REG53_REG_OFFSET = 8'b11011001;
localparam UTMI_REG53_fslsserialmode_BIT_RESET = 1'b0;
localparam UTMI_REG53_tx_enable_n_BIT_RESET = 1'b0;
localparam UTMI_REG53_tx_dat_BIT_RESET = 1'b0;
localparam UTMI_REG53_tx_se0_BIT_RESET = 1'b0;
localparam UTMI_REG53_sleepm_BIT_RESET = 1'b0;
localparam UTMI_REG53_unused_BIT_RESET = 1'b0;
localparam UTMI_REG53_opmode_BIT_RESET = 2'b00;
localparam UTMI_REG54_REG_OFFSET = 8'b11011010;
localparam UTMI_REG54_rx_dp_BIT_RESET = 1'b0;
localparam UTMI_REG54_rx_dm_BIT_RESET = 1'b0;
localparam UTMI_REG54_rx_rcv_BIT_RESET = 1'b0;
localparam UTMI_REG54_unused_BIT_RESET = 5'b00000;
localparam UTMI_REG55_REG_OFFSET = 8'b11011011;
localparam UTMI_REG55_txvalidh_BIT_RESET = 1'b0;
localparam UTMI_REG55_txvalid_BIT_RESET = 1'b0;
localparam UTMI_REG55_txready_BIT_RESET = 1'b0;
localparam UTMI_REG55_rxvalidh_BIT_RESET = 1'b0;
localparam UTMI_REG55_rxvalid_BIT_RESET = 1'b0;
localparam UTMI_REG55_rxactive_BIT_RESET = 1'b0;
localparam UTMI_REG55_rxerror_BIT_RESET = 1'b0;
localparam UTMI_REG55_unused_BIT_RESET = 1'b0;
localparam UTMI_REG56_REG_OFFSET = 8'b11011100;
localparam UTMI_REG56_datain_upper_BIT_RESET = 8'b00000000;
localparam UTMI_REG57_REG_OFFSET = 8'b11011101;
localparam UTMI_REG57_datain_lower_BIT_RESET = 8'b00000000;
localparam UTMI_REG58_REG_OFFSET = 8'b11011110;
localparam UTMI_REG58_dataout_upper_BIT_RESET = 8'b00000000;
localparam UTMI_REG59_REG_OFFSET = 8'b11011111;
localparam UTMI_REG59_dataout_lower_BIT_RESET = 8'b00000000;
localparam UTMI_UNUSED_REG6_REG_OFFSET = 8'b11100000;
localparam UTMI_UNUSED_REG6_unused_BIT_RESET = 8'b00000000;
localparam UTMI_UNUSED_REG7_REG_OFFSET = 8'b11100001;
localparam UTMI_UNUSED_REG7_unused_BIT_RESET = 8'b00000000;
reg [7:0]   PRDATA;
wire [7:0] PRDATA_ana_misc, PRDATA_ana_tx_rx, PRDATA_dig_misc, PRDATA_dig_tx_rx, PRDATA_pll, PRDATA_utmi;
always@(*)
begin
PRDATA = 8'd0;
if(PADDR >=AFE_BG_REG0_REG_OFFSET && PADDR <=AFE_UNUSED_REG3_REG_OFFSET)
	PRDATA = PRDATA_ana_misc;
else if(PADDR >=AFE_TX_REG0_REG_OFFSET && PADDR <=AFE_UNUSED_REG1_REG_OFFSET)
	PRDATA = PRDATA_ana_tx_rx;
else if(PADDR >=CALIB_REG0_REG_OFFSET && PADDR <=INTERRUPT_REG2_REG_OFFSET)
	PRDATA = PRDATA_dig_misc;
else if(PADDR >=RX_REG0_REG_OFFSET && PADDR <=DIG_TXRX_UNUSED_REG3_REG_OFFSET)
	PRDATA = PRDATA_dig_tx_rx;
else if(PADDR >=PLL_REG0_REG_OFFSET && PADDR <=PLL_UNUSED_REG2_REG_OFFSET)
	 PRDATA = PRDATA_pll;
else if(PADDR >=UTMI_REG0_REG_OFFSET && PADDR <=UTMI_UNUSED_REG7_REG_OFFSET)
	PRDATA = PRDATA_utmi;
else
	PRDATA = 8'd0;
end
ana_misc_reg_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r ana_misc_reg_inst (
  .AFE_BG_REG0_bg_ana_reg0_OUT(AFE_BG_REG0_bg_ana_reg0_OUT),
  .AFE_BG_REG1_bg_ana_reg1_OUT(AFE_BG_REG1_bg_ana_reg1_OUT),
  .AFE_BG_REG2_bg_ana_reg2_OUT(AFE_BG_REG2_bg_ana_reg2_OUT),
  .AFE_BG_REG3_bg_ana_reg3_OUT(AFE_BG_REG3_bg_ana_reg3_OUT),
  .AFE_CALIB_REG0_calib_ana_reg0_OUT(AFE_CALIB_REG0_calib_ana_reg0_OUT),
  .AFE_BC_REG0_bc_ana_reg0_OUT(AFE_BC_REG0_bc_ana_reg0_OUT),
  .AFE_BC_REG1_bc_ana_reg1_OUT(AFE_BC_REG1_bc_ana_reg1_OUT),
  .AFE_BC_REG2_bc_ana_reg2_OUT(AFE_BC_REG2_bc_ana_reg2_OUT),
  .AFE_BC_REG3_bc_ana_reg3_OUT(AFE_BC_REG3_bc_ana_reg3_OUT),
  .AFE_BC_REG4_bc_ana_reg4_OUT(AFE_BC_REG4_bc_ana_reg4_OUT),
  .AFE_BC_REG5_bc_ana_reg5_OUT(AFE_BC_REG5_bc_ana_reg5_OUT),
  .AFE_BC_REG6_bc_ana_reg6_OUT(AFE_BC_REG6_bc_ana_reg6_OUT),
  .AFE_PLL_REG0_afe_pll_reg0_OUT(AFE_PLL_REG0_afe_pll_reg0_OUT),
  .AFE_PLL_REG1_afe_pll_reg1_OUT(AFE_PLL_REG1_afe_pll_reg1_OUT),
  .AFE_PLL_REG2_afe_pll_reg2_OUT(AFE_PLL_REG2_afe_pll_reg2_OUT),
  .AFE_PLL_REG3_afe_pll_reg3_OUT(AFE_PLL_REG3_afe_pll_reg3_OUT),
  .AFE_PLL_REG4_afe_pll_reg4_OUT(AFE_PLL_REG4_afe_pll_reg4_OUT),
  .AFE_PLL_REG5_afe_pll_reg5_OUT(AFE_PLL_REG5_afe_pll_reg5_OUT),
  .AFE_BG_REG4_bg_ana_reg4_IN(AFE_BG_REG4_bg_ana_reg4_IN),
  .AFE_CALIB_REG1_calib_ana_reg1_IN(AFE_CALIB_REG1_calib_ana_reg1_IN),
  .AFE_BC_REG7_bc_ana_reg7_IN(AFE_BC_REG7_bc_ana_reg7_IN),
  .AFE_PLL_REG6_pll_ana_reg6_IN(AFE_PLL_REG6_pll_ana_reg6_IN),
  .AFE_UNUSED_REG2_unused_OUT(AFE_UNUSED_REG2_unused_OUT),
  .AFE_UNUSED_REG3_unused_OUT(AFE_UNUSED_REG3_unused_OUT),
  .PRDATA(PRDATA_ana_misc),
  .PADDR(PADDR),
  .PWDATA(PWDATA),
  .PWRITE(PWRITE),
  .PSELx(PSELx),
  .PENABLE(PENABLE),
  .PCLK(PCLK),
  .PRESETn(PRESETn)
);
ana_tx_rx_reg_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r ana_tx_rx_reg_inst (
  .AFE_TX_REG0_tx_ana_reg0_OUT(AFE_TX_REG0_tx_ana_reg0_OUT),
  .AFE_TX_REG1_tx_ana_reg1_OUT(AFE_TX_REG1_tx_ana_reg1_OUT),
  .AFE_TX_REG2_tx_ana_reg2_OUT(AFE_TX_REG2_tx_ana_reg2_OUT),
  .AFE_TX_REG3_tx_ana_reg3_OUT(AFE_TX_REG3_tx_ana_reg3_OUT),
  .AFE_TX_REG4_tx_ana_reg4_OUT(AFE_TX_REG4_tx_ana_reg4_OUT),
  .AFE_TX_REG5_tx_ana_reg5_OUT(AFE_TX_REG5_tx_ana_reg5_OUT),
  .AFE_TX_REG6_tx_ana_reg6_OUT(AFE_TX_REG6_tx_ana_reg6_OUT),
  .AFE_TX_REG7_tx_ana_reg7_OUT(AFE_TX_REG7_tx_ana_reg7_OUT),
  .AFE_TX_REG8_tx_ana_reg8_OUT(AFE_TX_REG8_tx_ana_reg8_OUT),
  .AFE_TX_REG9_tx_ana_reg9_OUT(AFE_TX_REG9_tx_ana_reg9_OUT),
  .AFE_TX_REG10_tx_ana_reg10_OUT(AFE_TX_REG10_tx_ana_reg10_OUT),
  .AFE_TX_REG11_tx_ana_reg11_OUT(AFE_TX_REG11_tx_ana_reg11_OUT),
  .AFE_TX_REG12_tx_ana_reg12_OUT(AFE_TX_REG12_tx_ana_reg12_OUT),
  .AFE_RX_REG0_rx_ana_reg0_OUT(AFE_RX_REG0_rx_ana_reg0_OUT),
  .AFE_RX_REG1_rx_ana_reg1_OUT(AFE_RX_REG1_rx_ana_reg1_OUT),
  .AFE_RX_REG2_rx_ana_reg2_OUT(AFE_RX_REG2_rx_ana_reg2_OUT),
  .AFE_RX_REG3_rx_ana_reg3_OUT(AFE_RX_REG3_rx_ana_reg3_OUT),
  .AFE_RX_REG4_rx_ana_reg4_OUT(AFE_RX_REG4_rx_ana_reg4_OUT),
  .AFE_RX_REG5_rx_ana_reg5_OUT(AFE_RX_REG5_rx_ana_reg5_OUT),
  .AFE_RX_REG6_rx_ana_reg6_OUT(AFE_RX_REG6_rx_ana_reg6_OUT),
  .AFE_TX_REG13_tx_ana_reg13_IN(AFE_TX_REG13_tx_ana_reg13_IN),
  .AFE_TX_REG14_tx_ana_reg14_IN(AFE_TX_REG14_tx_ana_reg14_IN),
  .AFE_RX_REG7_rx_ana_reg7_IN(AFE_RX_REG7_rx_ana_reg7_IN),
  .AFE_RX_REG8_rx_ana_reg8_IN(AFE_RX_REG8_rx_ana_reg8_IN),
  .AFE_UNUSED_REG0_unused_OUT(AFE_UNUSED_REG0_unused_OUT),
  .AFE_UNUSED_REG1_unused_OUT(AFE_UNUSED_REG1_unused_OUT),
  .PRDATA(PRDATA_ana_tx_rx),
  .PADDR(PADDR),
  .PWDATA(PWDATA),
  .PWRITE(PWRITE),
  .PSELx(PSELx),
  .PENABLE(PENABLE),
  .PCLK(PCLK),
  .PRESETn(PRESETn)
);
dig_misc_reg_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r dig_misc_reg_inst(
  .CALIB_REG0_calib_clk_OUT(CALIB_REG0_calib_clk_OUT),
  .CALIB_REG0_calib_clk_en_OUT(CALIB_REG0_calib_clk_en_OUT),
  .CALIB_REG0_comp_out_OUT(CALIB_REG0_comp_out_OUT),
  .CALIB_REG0_init_wait_ovr_OUT(CALIB_REG0_init_wait_ovr_OUT),
  .CALIB_REG0_init_wait_ovr_en_OUT(CALIB_REG0_init_wait_ovr_en_OUT),
  .CALIB_REG1_unused_OUT(CALIB_REG1_unused_OUT),
  .CALIB_REG1_calib_code_OUT(CALIB_REG1_calib_code_OUT),
  .CALIB_REG1_calib_code_en_OUT(CALIB_REG1_calib_code_en_OUT),
  .BC_REG0_unused_OUT(BC_REG0_unused_OUT),
  .BC_REG0_adp_en_OUT(BC_REG0_adp_en_OUT),
  .BC_REG0_adp_en_en_OUT(BC_REG0_adp_en_en_OUT),
  .BC_REG0_id_pullup_OUT(BC_REG0_id_pullup_OUT),
  .BC_REG0_id_pullup_en_OUT(BC_REG0_id_pullup_en_OUT),
  .BC_REG1_ADP_source_I_en_OUT(BC_REG1_ADP_source_I_en_OUT),
  .BC_REG1_ADP_source_I_en_ctrl_OUT(BC_REG1_ADP_source_I_en_ctrl_OUT),
  .BC_REG1_ADP_sink_I_en_OUT(BC_REG1_ADP_sink_I_en_OUT),
  .BC_REG1_ADP_sink_I_en_ctrl_OUT(BC_REG1_ADP_sink_I_en_ctrl_OUT),
  .BC_REG1_ADP_sense_en_OUT(BC_REG1_ADP_sense_en_OUT),
  .BC_REG1_ADP_sense_en_ctrl_OUT(BC_REG1_ADP_sense_en_ctrl_OUT),
  .BC_REG1_ADP_probe_en_OUT(BC_REG1_ADP_probe_en_OUT),
  .BC_REG1_ADP_probe_en_ctrl_OUT(BC_REG1_ADP_probe_en_ctrl_OUT),
  .BC_REG2_idm_sink_en_value_OUT(BC_REG2_idm_sink_en_value_OUT),
  .BC_REG2_idm_sink_en_cntrl_OUT(BC_REG2_idm_sink_en_cntrl_OUT),
  .BC_REG2_idp_sink_en_value_OUT(BC_REG2_idp_sink_en_value_OUT),
  .BC_REG2_idp_sink_en_cntrl_OUT(BC_REG2_idp_sink_en_cntrl_OUT),
  .BC_REG2_idp_src_en_value_OUT(BC_REG2_idp_src_en_value_OUT),
  .BC_REG2_idp_src_en_cntrl_OUT(BC_REG2_idp_src_en_cntrl_OUT),
  .BC_REG2_bc_en_value_OUT(BC_REG2_bc_en_value_OUT),
  .BC_REG2_bc_en_cntrl_OUT(BC_REG2_bc_en_cntrl_OUT),
  .BC_REG3_dm_vdat_ref_comp_en_value_OUT(BC_REG3_dm_vdat_ref_comp_en_value_OUT),
  .BC_REG3_dm_vdat_ref_comp_en_cntrl_OUT(BC_REG3_dm_vdat_ref_comp_en_cntrl_OUT),
  .BC_REG3_dp_vdat_ref_comp_en_value_OUT(BC_REG3_dp_vdat_ref_comp_en_value_OUT),
  .BC_REG3_dp_vdat_ref_comp_en_cntrl_OUT(BC_REG3_dp_vdat_ref_comp_en_cntrl_OUT),
  .BC_REG3_vdp_src_en_value_OUT(BC_REG3_vdp_src_en_value_OUT),
  .BC_REG3_vdp_src_en_cntrl_OUT(BC_REG3_vdp_src_en_cntrl_OUT),
  .BC_REG3_vdm_src_en_value_OUT(BC_REG3_vdm_src_en_value_OUT),
  .BC_REG3_vdm_src_en_cntrl_OUT(BC_REG3_vdm_src_en_cntrl_OUT),
  .BC_REG4_rid_a_ref_en_value_OUT(BC_REG4_rid_a_ref_en_value_OUT),
  .BC_REG4_rid_a_ref_en_cntrl_OUT(BC_REG4_rid_a_ref_en_cntrl_OUT),
  .BC_REG4_rid_float_ref_en_value_OUT(BC_REG4_rid_float_ref_en_value_OUT),
  .BC_REG4_rid_float_ref_en_cntrl_OUT(BC_REG4_rid_float_ref_en_cntrl_OUT),
  .BC_REG4_rid_nonfloat_comp_en_value_OUT(BC_REG4_rid_nonfloat_comp_en_value_OUT),
  .BC_REG4_rid_nonfloat_comp_en_cntrl_OUT(BC_REG4_rid_nonfloat_comp_en_cntrl_OUT),
  .BC_REG4_rid_float_comp_en_value_OUT(BC_REG4_rid_float_comp_en_value_OUT),
  .BC_REG4_rid_float_comp_en_cntrl_OUT(BC_REG4_rid_float_comp_en_cntrl_OUT),
  .BC_REG5_rid_b_c_comp_en_value_OUT(BC_REG5_rid_b_c_comp_en_value_OUT),
  .BC_REG5_rid_b_c_comp_en_cntrl_OUT(BC_REG5_rid_b_c_comp_en_cntrl_OUT),
  .BC_REG5_rid_a_comp_en_value_OUT(BC_REG5_rid_a_comp_en_value_OUT),
  .BC_REG5_rid_a_comp_en_cntrl_OUT(BC_REG5_rid_a_comp_en_cntrl_OUT),
  .BC_REG5_rid_c_ref_en_value_OUT(BC_REG5_rid_c_ref_en_value_OUT),
  .BC_REG5_rid_c_ref_en_cntrl_OUT(BC_REG5_rid_c_ref_en_cntrl_OUT),
  .BC_REG5_rid_b_ref_en_value_OUT(BC_REG5_rid_b_ref_en_value_OUT),
  .BC_REG5_rid_b_ref_en_cntrl_OUT(BC_REG5_rid_b_ref_en_cntrl_OUT),
  .BC_REG6_bc_delay_value_OUT(BC_REG6_bc_delay_value_OUT),
  .BC_REG6_bc_delay_en_OUT(BC_REG6_bc_delay_en_OUT),
  .BC_REG6_DM_vlgc_comp_en_value_OUT(BC_REG6_DM_vlgc_comp_en_value_OUT),
  .BC_REG6_DM_vlgc_comp_en_cntrl_OUT(BC_REG6_DM_vlgc_comp_en_cntrl_OUT),
  .BC_REG7_rid_nonfloat_src_en_value_OUT(BC_REG7_rid_nonfloat_src_en_value_OUT),
  .BC_REG7_rid_nonfloat_src_en_cntrl_OUT(BC_REG7_rid_nonfloat_src_en_cntrl_OUT),
  .BC_REG7_rid_float_src_en_value_OUT(BC_REG7_rid_float_src_en_value_OUT),
  .BC_REG7_rid_float_src_en_cntrl_OUT(BC_REG7_rid_float_src_en_cntrl_OUT),
  .BC_REG7_reset_cntrl_OUT(BC_REG7_reset_cntrl_OUT),
  .BC_REG7_DM_current_src_en_value_OUT(BC_REG7_DM_current_src_en_value_OUT),
  .BC_REG7_DM_current_src_en_cntrl_OUT(BC_REG7_DM_current_src_en_cntrl_OUT),
  .BC_REG7_unused_OUT(BC_REG7_unused_OUT),
  .TED_REG0_calib_code_up_en_OUT(TED_REG0_calib_code_up_en_OUT),
  .TED_REG0_Delay_value_OUT(TED_REG0_Delay_value_OUT),
  .TED_REG0_delay_en_OUT(TED_REG0_delay_en_OUT),
  .TED_REG0_calib_done_OUT(TED_REG0_calib_done_OUT),
  .TED_REG0_caliib_done_en_OUT(TED_REG0_caliib_done_en_OUT),
  .TED_REG0_comp_out_down_inv_OUT(TED_REG0_comp_out_down_inv_OUT),
  .TED_REG0_comp_out_up_inv_OUT(TED_REG0_comp_out_up_inv_OUT),
  .TED_REG1_calib_code_down_OUT(TED_REG1_calib_code_down_OUT),
  .TED_REG1_calib_code_up_OUT(TED_REG1_calib_code_up_OUT),
  .TED_REG2_unused_OUT(TED_REG2_unused_OUT),
  .TED_REG2_calib_mode_dn_OUT(TED_REG2_calib_mode_dn_OUT),
  .TED_REG2_calib_mode_dn_en_OUT(TED_REG2_calib_mode_dn_en_OUT),
  .TED_REG2_calib_mode_up_OUT(TED_REG2_calib_mode_up_OUT),
  .TED_REG2_calib_mode_up_en_OUT(TED_REG2_calib_mode_up_en_OUT),
  .TED_REG2_calib_code_dn_en_OUT(TED_REG2_calib_code_dn_en_OUT),
  .CALIB_REG2_unused_IN(CALIB_REG2_unused_IN),
  .CALIB_REG2_calib_cmp_IN(CALIB_REG2_calib_cmp_IN),
  .CALIB_REG2_calib_pd_IN(CALIB_REG2_calib_pd_IN),
  .CALIB_REG2_calib_clock_IN(CALIB_REG2_calib_clock_IN),
  .CALIB_REG2_calib_done_IN(CALIB_REG2_calib_done_IN),
  .CALIB_REG3_unused_IN(CALIB_REG3_unused_IN),
  .CALIB_REG3_bg_unit_res_calib_IN(CALIB_REG3_bg_unit_res_calib_IN),
  .BC_REG8_dcd_comp_IN(BC_REG8_dcd_comp_IN),
  .BC_REG8_adp_sense_IN(BC_REG8_adp_sense_IN),
  .BC_REG8_adp_probe_IN(BC_REG8_adp_probe_IN),
  .BC_REG8_bvalid_IN(BC_REG8_bvalid_IN),
  .BC_REG8_vbusvalid_IN(BC_REG8_vbusvalid_IN),
  .BC_REG8_iddig_IN(BC_REG8_iddig_IN),
  .BC_REG8_unused_IN(BC_REG8_unused_IN),
  .BC_REG9_o_dm_vdat_ref_comp_en_IN(BC_REG9_o_dm_vdat_ref_comp_en_IN),
  .BC_REG9_o_dp_vdat_ref_comp_en_IN(BC_REG9_o_dp_vdat_ref_comp_en_IN),
  .BC_REG9_o_vdm_src_en_IN(BC_REG9_o_vdm_src_en_IN),
  .BC_REG9_o_vdp_src_en_IN(BC_REG9_o_vdp_src_en_IN),
  .BC_REG9_o_idm_sink_en_IN(BC_REG9_o_idm_sink_en_IN),
  .BC_REG9_o_idp_sink_en_IN(BC_REG9_o_idp_sink_en_IN),
  .BC_REG9_o_idp_src_en_IN(BC_REG9_o_idp_src_en_IN),
  .BC_REG9_o_bc_en_IN(BC_REG9_o_bc_en_IN),
  .BC_REG10_o_rid_b_c_comp_en_IN(BC_REG10_o_rid_b_c_comp_en_IN),
  .BC_REG10_o_rid_a_comp_en_IN(BC_REG10_o_rid_a_comp_en_IN),
  .BC_REG10_o_rid_c_ref_en_IN(BC_REG10_o_rid_c_ref_en_IN),
  .BC_REG10_o_rid_b_ref_en_IN(BC_REG10_o_rid_b_ref_en_IN),
  .BC_REG10_o_rid_a_ref_en_IN(BC_REG10_o_rid_a_ref_en_IN),
  .BC_REG10_o_rid_float_ref_en_IN(BC_REG10_o_rid_float_ref_en_IN),
  .BC_REG10_o_rid_nonfloat_src_en_IN(BC_REG10_o_rid_nonfloat_src_en_IN),
  .BC_REG10_o_rid_float_src_en_IN(BC_REG10_o_rid_float_src_en_IN),
  .BC_REG11_o_idm_src_en_IN(BC_REG11_o_idm_src_en_IN),
  .BC_REG11_i_afe_rxdp_ana_IN(BC_REG11_i_afe_rxdp_ana_IN),
  .BC_REG11_i_afe_rxdm_ana_IN(BC_REG11_i_afe_rxdm_ana_IN),
  .BC_REG11_i_rid_b_c_comp_sts_IN(BC_REG11_i_rid_b_c_comp_sts_IN),
  .BC_REG11_i_rid_a_comp_sts_IN(BC_REG11_i_rid_a_comp_sts_IN),
  .BC_REG11_i_dm_vdat_ref_comp_sts_IN(BC_REG11_i_dm_vdat_ref_comp_sts_IN),
  .BC_REG11_i_dp_vdat_ref_comp_sts_IN(BC_REG11_i_dp_vdat_ref_comp_sts_IN),
  .BC_REG11_o_dm_vlgc_comp_en_IN(BC_REG11_o_dm_vlgc_comp_en_IN),
  .BC_REG12_rid_gnd_comp_sts_IN(BC_REG12_rid_gnd_comp_sts_IN),
  .BC_REG12_rid_float_comp_sts_IN(BC_REG12_rid_float_comp_sts_IN),
  .BC_REG12_rid_c_comp_sts_IN(BC_REG12_rid_c_comp_sts_IN),
  .BC_REG12_rid_b_comp_sts_IN(BC_REG12_rid_b_comp_sts_IN),
  .BC_REG12_rid_a_comp_sts_IN(BC_REG12_rid_a_comp_sts_IN),
  .BC_REG12_dm_vlgc_comp_sts_IN(BC_REG12_dm_vlgc_comp_sts_IN),
  .BC_REG12_dm_vdat_ref_comp_sts_IN(BC_REG12_dm_vdat_ref_comp_sts_IN),
  .BC_REG12_dp_vdat_ref_comp_sts_IN(BC_REG12_dp_vdat_ref_comp_sts_IN),
  .TED_REG3_calib_code_down_IN(TED_REG3_calib_code_down_IN),
  .TED_REG3_comparator_down_IN(TED_REG3_comparator_down_IN),
  .TED_REG3_calib_done_down_IN(TED_REG3_calib_done_down_IN),
  .TED_REG3_unused_IN(TED_REG3_unused_IN),
  .TED_REG4_calib_code_up_IN(TED_REG4_calib_code_up_IN),
  .TED_REG4_comparator_up_IN(TED_REG4_comparator_up_IN),
  .TED_REG4_calib_done_up_IN(TED_REG4_calib_done_up_IN),
  .TED_REG4_unused_IN(TED_REG4_unused_IN),
  .DIG_UNUSED_REG0_unused_OUT(DIG_UNUSED_REG0_unused_OUT),
  .DIG_UNUSED_REG1_unused_OUT(DIG_UNUSED_REG1_unused_OUT),
  .DIG_UNUSED_REG2_unused_OUT(DIG_UNUSED_REG2_unused_OUT),
  .DIG_UNUSED_REG3_unused_OUT(DIG_UNUSED_REG3_unused_OUT),
  .INTERRUPT_REG1_irsr_OUT(INTERRUPT_REG1_irsr_OUT),
  .INTERRUPT_REG1_isr_OUT(INTERRUPT_REG1_isr_OUT),
  .INTERRUPT_REG1_unused_OUT(INTERRUPT_REG1_unused_OUT),
  .INTERRUPT_REG2_unused_OUT(INTERRUPT_REG2_unused_OUT),
  .INTERRUPT_REG2_imr_OUT(INTERRUPT_REG2_imr_OUT),
  .i_irsr_in(i_irsr_in),
  .i_isr_in(i_isr_in),
  .PRDATA(PRDATA_dig_misc),
  .PADDR(PADDR),
  .PWDATA(PWDATA),
  .PWRITE(PWRITE),
  .PSELx(PSELx),
  .PENABLE(PENABLE),
  .PCLK(PCLK),
  .PRESETn(PRESETn)
);
dig_tx_rx_reg_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r dig_tx_rx_reg_inst(
  .RX_REG0_fsls_no_eop_timeout_OUT(RX_REG0_fsls_no_eop_timeout_OUT),
  .RX_REG0_fsls_timeout_en_OUT(RX_REG0_fsls_timeout_en_OUT),
  .RX_REG0_hs_sync_det_bits_OUT(RX_REG0_hs_sync_det_bits_OUT),
  .RX_REG0_fs_eop_se0_threshold_OUT(RX_REG0_fs_eop_se0_threshold_OUT),
  .RX_REG0_fs_eop_se0_en_OUT(RX_REG0_fs_eop_se0_en_OUT),
  .RX_REG1_ls_eop_se0_threshold_OUT(RX_REG1_ls_eop_se0_threshold_OUT),
  .RX_REG1_ls_eop_se0_en_OUT(RX_REG1_ls_eop_se0_en_OUT),
  .RX_REG1_fs_no_eop_timeout_en_OUT(RX_REG1_fs_no_eop_timeout_en_OUT),
  .TX_REG0_unused_OUT(TX_REG0_unused_OUT),
  .TX_REG0_fs_preamble_en_OUT(TX_REG0_fs_preamble_en_OUT),
  .TX_REG0_sof_extension_OUT(TX_REG0_sof_extension_OUT),
  .TX_REG0_sof_extension_en_OUT(TX_REG0_sof_extension_en_OUT),
  .TX_REG1_preamble_value_OUT(TX_REG1_preamble_value_OUT),
  .CDR_REG0_unused_OUT(CDR_REG0_unused_OUT),
  .CDR_REG0_pll_clkdiv_OUT(CDR_REG0_pll_clkdiv_OUT),
  .CDR_REG0_pll_clkdiv_en_OUT(CDR_REG0_pll_clkdiv_en_OUT),
  .CDR_REG0_squelch_delay_OUT(CDR_REG0_squelch_delay_OUT),
  .CDR_REG0_squelch_delay_en_OUT(CDR_REG0_squelch_delay_en_OUT),
  .CDR_REG1_unused_OUT(CDR_REG1_unused_OUT),
  .CDR_REG1_calib_comp_out_OUT(CDR_REG1_calib_comp_out_OUT),
  .CDR_REG1_calib_spc_threshold_OUT(CDR_REG1_calib_spc_threshold_OUT),
  .CDR_REG1_calib_spc_threshold_en_OUT(CDR_REG1_calib_spc_threshold_en_OUT),
  .CDR_REG1_calib_iteration_OUT(CDR_REG1_calib_iteration_OUT),
  .CDR_REG1_dynamic_calib_en_OUT(CDR_REG1_dynamic_calib_en_OUT),
  .CDR_REG2_unused_OUT(CDR_REG2_unused_OUT),
  .CDR_REG2_hsrx_en_del_OUT(CDR_REG2_hsrx_en_del_OUT),
  .CDR_REG2_hsrx_en_del_en_OUT(CDR_REG2_hsrx_en_del_en_OUT),
  .CDR_REG2_hsrx_en_OUT(CDR_REG2_hsrx_en_OUT),
  .CDR_REG2_hsrx_en_en_OUT(CDR_REG2_hsrx_en_en_OUT),
  .CDR_REG2_calib_clock_OUT(CDR_REG2_calib_clock_OUT),
  .CDR_REG2_calib_clock_en_OUT(CDR_REG2_calib_clock_en_OUT),
  .CDR_REG2_calib_out_en_OUT(CDR_REG2_calib_out_en_OUT),
  .CDR_REG3_calib_active_OUT(CDR_REG3_calib_active_OUT),
  .CDR_REG3_calib_done_OUT(CDR_REG3_calib_done_OUT),
  .CDR_REG3_calib_code_OUT(CDR_REG3_calib_code_OUT),
  .CDR_REG4_clk_gate_value_OUT(CDR_REG4_clk_gate_value_OUT),
  .CDR_REG4_clk_gate_en_OUT(CDR_REG4_clk_gate_en_OUT),
  .CDR_REG4_clk_gate_sq_mask_OUT(CDR_REG4_clk_gate_sq_mask_OUT),
  .CDR_REG4_latency_threshold_OUT(CDR_REG4_latency_threshold_OUT),
  .CDR_REG4_latency_threshold_en_OUT(CDR_REG4_latency_threshold_en_OUT),
  .CDR_REG4_decision_error_en_OUT(CDR_REG4_decision_error_en_OUT),
  .CDR_REG4_filter_en_OUT(CDR_REG4_filter_en_OUT),
  .CDR_REG5_unused_OUT(CDR_REG5_unused_OUT),
  .CDR_REG5_sample_5x_en_OUT(CDR_REG5_sample_5x_en_OUT),
  .CDR_REG5_small_pulse_OUT(CDR_REG5_small_pulse_OUT),
  .CDR_REG5_small_pulse_en_OUT(CDR_REG5_small_pulse_en_OUT),
  .CDR_REG6_unused_OUT(CDR_REG6_unused_OUT),
  .CDR_REG7_unused_OUT(CDR_REG7_unused_OUT),
  .CDR_REG8_unused_OUT(CDR_REG8_unused_OUT),
  .RX_REG2_eb_error_IN(RX_REG2_eb_error_IN),
  .RX_REG2_cdr_error_IN(RX_REG2_cdr_error_IN),
  .RX_REG2_sync_detected_IN(RX_REG2_sync_detected_IN),
  .RX_REG2_eop_detected_IN(RX_REG2_eop_detected_IN),
  .RX_REG2_hs_eop_condition_IN(RX_REG2_hs_eop_condition_IN),
  .RX_REG2_normal_eop_IN(RX_REG2_normal_eop_IN),
  .RX_REG2_alignment_error_IN(RX_REG2_alignment_error_IN),
  .RX_REG2_no_eop_IN(RX_REG2_no_eop_IN),
  .RX_REG3_hs_eop_detected_IN(RX_REG3_hs_eop_detected_IN),
  .RX_REG3_se0_validated_IN(RX_REG3_se0_validated_IN),
  .RX_REG3_lsfs_eop_detected_IN(RX_REG3_lsfs_eop_detected_IN),
  .RX_REG3_bit_unstuff_error_IN(RX_REG3_bit_unstuff_error_IN),
  .RX_REG3_rx_state_bitunstuff_IN(RX_REG3_rx_state_bitunstuff_IN),
  .RX_REG3_start_flag_IN(RX_REG3_start_flag_IN),
  .RX_REG4_rxactive_reg_IN(RX_REG4_rxactive_reg_IN),
  .RX_REG4_deassert_rxactive_reg_IN(RX_REG4_deassert_rxactive_reg_IN),
  .RX_REG4_unused_IN(RX_REG4_unused_IN),
  .RX_REG5_sie_cnt_upper_IN(RX_REG5_sie_cnt_upper_IN),
  .RX_REG6_phy_cnt_upper_IN(RX_REG6_phy_cnt_upper_IN),
  .RX_REG7_phy_cnt_lower_IN(RX_REG7_phy_cnt_lower_IN),
  .RX_REG7_sie_cnt_lower_IN(RX_REG7_sie_cnt_lower_IN),
  .TX_REG2_tx_hs_state_IN(TX_REG2_tx_hs_state_IN),
  .TX_REG2_eop_transmitted_IN(TX_REG2_eop_transmitted_IN),
  .TX_REG2_hs_bitstuff_en_IN(TX_REG2_hs_bitstuff_en_IN),
  .TX_REG2_resume_eop_IN(TX_REG2_resume_eop_IN),
  .TX_REG2_remote_wakeup_IN(TX_REG2_remote_wakeup_IN),
  .TX_REG3_tx_lsfs_state_IN(TX_REG3_tx_lsfs_state_IN),
  .TX_REG3_pd_state_IN(TX_REG3_pd_state_IN),
  .TX_REG3_preamble_sent_IN(TX_REG3_preamble_sent_IN),
  .TX_REG4_unused_IN(TX_REG4_unused_IN),
  .TX_REG4_lsfs_bitstuff_en_IN(TX_REG4_lsfs_bitstuff_en_IN),
  .TX_REG4_ls_keep_alive_IN(TX_REG4_ls_keep_alive_IN),
  .CDR_REG9_UNUSED_IN(CDR_REG9_UNUSED_IN),
  .CDR_REG9_i_ana_comp_out_IN(CDR_REG9_i_ana_comp_out_IN),
  .CDR_REG9_sampler_calib_done_IN(CDR_REG9_sampler_calib_done_IN),
  .CDR_REG9_ana_calib_active_IN(CDR_REG9_ana_calib_active_IN),
  .CDR_REG10_unused_IN(CDR_REG10_unused_IN),
  .CDR_REG10_calib_code_IN(CDR_REG10_calib_code_IN),
  .CDR_REG11_small_pulse_IN(CDR_REG11_small_pulse_IN),
  .CDR_REG11_o_hsrx_rec_dicision_error_IN(CDR_REG11_o_hsrx_rec_dicision_error_IN),
  .CDR_REG11_o_ana_clk_gate_IN(CDR_REG11_o_ana_clk_gate_IN),
  .CDR_REG11_receive_start_IN(CDR_REG11_receive_start_IN),
  .CDR_REG11_i_ana_ted_squelch_IN(CDR_REG11_i_ana_ted_squelch_IN),
  .CDR_RE12_unused_IN(CDR_RE12_unused_IN),
  .DIG_TXRX_UNUSED_REG0_unused_OUT(DIG_TXRX_UNUSED_REG0_unused_OUT),
  .DIG_TXRX_UNUSED_REG1_unused_OUT(DIG_TXRX_UNUSED_REG1_unused_OUT),
  .DIG_TXRX_UNUSED_REG2_unused_OUT(DIG_TXRX_UNUSED_REG2_unused_OUT),
  .DIG_TXRX_UNUSED_REG3_unused_OUT(DIG_TXRX_UNUSED_REG3_unused_OUT),
  .PRDATA(PRDATA_dig_tx_rx),
  .PADDR(PADDR),
  .PWDATA(PWDATA),
  .PWRITE(PWRITE),
  .PSELx(PSELx),
  .PENABLE(PENABLE),
  .PCLK(PCLK),
  .PRESETn(PRESETn)
);
pll_reg_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r pll_reg_inst(
  .PLL_REG0_initial_wait_time_OUT(PLL_REG0_initial_wait_time_OUT),
  .PLL_REG1_rst_fdbk_div_delay_value_OUT(PLL_REG1_rst_fdbk_div_delay_value_OUT),
  .PLL_REG1_rst_fdbk_div_delay_en_OUT(PLL_REG1_rst_fdbk_div_delay_en_OUT),
  .PLL_REG1_fbdiv_en_OUT(PLL_REG1_fbdiv_en_OUT),
  .PLL_REG1_initial_wait_time_en_OUT(PLL_REG1_initial_wait_time_en_OUT),
  .PLL_REG2_unused_OUT(PLL_REG2_unused_OUT),
  .PLL_REG2_vco_settling_time_en_OUT(PLL_REG2_vco_settling_time_en_OUT),
  .PLL_REG2_vco_settling_time_OUT(PLL_REG2_vco_settling_time_OUT),
  .PLL_REG3_fbdiv_value_OUT(PLL_REG3_fbdiv_value_OUT),
  .PLL_REG4_unused_OUT(PLL_REG4_unused_OUT),
  .PLL_REG4_pll_lock_time_15_OUT(PLL_REG4_pll_lock_time_15_OUT),
  .PLL_REG4_pd_pfd_value_OUT(PLL_REG4_pd_pfd_value_OUT),
  .PLL_REG4_pd_pfd_en_OUT(PLL_REG4_pd_pfd_en_OUT),
  .PLL_REG4_pll_lock_en_OUT(PLL_REG4_pll_lock_en_OUT),
  .PLL_REG4_pll_lock_value_OUT(PLL_REG4_pll_lock_value_OUT),
  .PLL_REG4_coarsedone_en_OUT(PLL_REG4_coarsedone_en_OUT),
  .PLL_REG4_coarsedone_value_OUT(PLL_REG4_coarsedone_value_OUT),
  .PLL_REG5_startloop_en_4_0_OUT(PLL_REG5_startloop_en_4_0_OUT),
  .PLL_REG5_startloop_en_5_OUT(PLL_REG5_startloop_en_5_OUT),
  .PLL_REG5_startloop_5_OUT(PLL_REG5_startloop_5_OUT),
  .PLL_REG5_startloop_4_0_OUT(PLL_REG5_startloop_4_0_OUT),
  .PLL_REG6_unused_OUT(PLL_REG6_unused_OUT),
  .PLL_REG6_coarse_code_sel_OUT(PLL_REG6_coarse_code_sel_OUT),
  .PLL_REG6_lsb_error_0p5_OUT(PLL_REG6_lsb_error_0p5_OUT),
  .PLL_REG6_big_jump_en_OUT(PLL_REG6_big_jump_en_OUT),
  .PLL_REG6_vco_cnt_window_value_OUT(PLL_REG6_vco_cnt_window_value_OUT),
  .PLL_REG6_vco_cnt_window_en_OUT(PLL_REG6_vco_cnt_window_en_OUT),
  .PLL_REG6_rst_fdbk_div_value_OUT(PLL_REG6_rst_fdbk_div_value_OUT),
  .PLL_REG6_rst_fdbk_div_en_OUT(PLL_REG6_rst_fdbk_div_en_OUT),
  .PLL_REG7_unused_OUT(PLL_REG7_unused_OUT),
  .PLL_REG7_refclk_sel_OUT(PLL_REG7_refclk_sel_OUT),
  .PLL_REG7_refclk_sel_en_OUT(PLL_REG7_refclk_sel_en_OUT),
  .PLL_REG8_coarse_code_OUT(PLL_REG8_coarse_code_OUT),
  .PLL_REG9_coarse_code_OUT(PLL_REG9_coarse_code_OUT),
  .PLL_REG9_V2I_code_en_OUT(PLL_REG9_V2I_code_en_OUT),
  .PLL_REG9_V2I_code_OUT(PLL_REG9_V2I_code_OUT),
  .PLL_REG10_unused_OUT(PLL_REG10_unused_OUT),
  .PLL_REG10_ipdiv_value_OUT(PLL_REG10_ipdiv_value_OUT),
  .PLL_REG10_ipdiv_en_OUT(PLL_REG10_ipdiv_en_OUT),
  .PLL_REG10_coarse_code_en_OUT(PLL_REG10_coarse_code_en_OUT),
  .PLL_REG11_pll_standby_OUT(PLL_REG11_pll_standby_OUT),
  .PLL_REG11_pll_standby_en_OUT(PLL_REG11_pll_standby_en_OUT),
  .PLL_REG11_pll_pd_OUT(PLL_REG11_pll_pd_OUT),
  .PLL_REG11_pll_pd_en_OUT(PLL_REG11_pll_pd_en_OUT),
  .PLL_REG11_pll_pso_del_OUT(PLL_REG11_pll_pso_del_OUT),
  .PLL_REG11_pll_pso_del_en_OUT(PLL_REG11_pll_pso_del_en_OUT),
  .PLL_REG11_pll_pso_OUT(PLL_REG11_pll_pso_OUT),
  .PLL_REG11_pll_pso_en_OUT(PLL_REG11_pll_pso_en_OUT),
  .PLL_REG12_unused_OUT(PLL_REG12_unused_OUT),
  .PLL_REG12_pll_ldo_ref_en_OUT(PLL_REG12_pll_ldo_ref_en_OUT),
  .PLL_REG12_pll_ldo_ref_en_en_OUT(PLL_REG12_pll_ldo_ref_en_en_OUT),
  .PLL_REG12_pll_ldo_core_en_OUT(PLL_REG12_pll_ldo_core_en_OUT),
  .PLL_REG12_pll_ldo_core_en_en_OUT(PLL_REG12_pll_ldo_core_en_en_OUT),
  .PLL_REG12_pll_pd_ana_OUT(PLL_REG12_pll_pd_ana_OUT),
  .PLL_REG12_pll_pd_ana_en_OUT(PLL_REG12_pll_pd_ana_en_OUT),
  .PLL_REG13_pll_clkon_OUT(PLL_REG13_pll_clkon_OUT),
  .PLL_REG13_pll_ldo_ref_core_OUT(PLL_REG13_pll_ldo_ref_core_OUT),
  .PLL_REG13_pll_ldo_ref_core_en_OUT(PLL_REG13_pll_ldo_ref_core_en_OUT),
  .PLL_REG14_pll_ldo_cnt_threshold_OUT(PLL_REG14_pll_ldo_cnt_threshold_OUT),
  .PLL_REG14_pll_ldo_cnt_threshold_en_OUT(PLL_REG14_pll_ldo_cnt_threshold_en_OUT),
  .PLL_REG14_pll_ldo_iso_cnt_threshold_OUT(PLL_REG14_pll_ldo_iso_cnt_threshold_OUT),
  .PLL_REG14_pll_ldo_iso_cnt_threshold_en_OUT(PLL_REG14_pll_ldo_iso_cnt_threshold_en_OUT),
  .PLL_UNUSED_REG0_unused_OUT(PLL_UNUSED_REG0_unused_OUT),
  .PLL_UNUSED_REG1_unused_OUT(PLL_UNUSED_REG1_unused_OUT),
  .PLL_REG15_pll_lock_IN(PLL_REG15_pll_lock_IN),
  .PLL_REG15_coarsedone_IN(PLL_REG15_coarsedone_IN),
  .PLL_REG15_vco_cnt_win_IN(PLL_REG15_vco_cnt_win_IN),
  .PLL_REG15_rst_fdbk_div_IN(PLL_REG15_rst_fdbk_div_IN),
  .PLL_REG15_unused_IN(PLL_REG15_unused_IN),
  .PLL_REG15_pd_pfd_IN(PLL_REG15_pd_pfd_IN),
  .PLL_REG15_startloop_IN(PLL_REG15_startloop_IN),
  .PLL_REG15_coarse_code_8_IN(PLL_REG15_coarse_code_8_IN),
  .PLL_REG16_coarse_code_IN(PLL_REG16_coarse_code_IN),
  .PLL_UNUSED_REG2_unused_IN(PLL_UNUSED_REG2_unused_IN),
  .PRDATA(PRDATA_pll),
  .PADDR(PADDR),
  .PWDATA(PWDATA),
  .PWRITE(PWRITE),
  .PSELx(PSELx),
  .PENABLE(PENABLE),
  .PCLK(PCLK),
  .PRESETn(PRESETn)
);
utmi_reg_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r utmi_reg_inst (
  .UTMI_REG0_loopback_sel_OUT(UTMI_REG0_loopback_sel_OUT),
  .UTMI_REG0_loopback_en_OUT(UTMI_REG0_loopback_en_OUT),
  .UTMI_REG0_bist_mode_sel_OUT(UTMI_REG0_bist_mode_sel_OUT),
  .UTMI_REG0_bist_en_OUT(UTMI_REG0_bist_en_OUT),
  .UTMI_REG1_bist_err_OUT(UTMI_REG1_bist_err_OUT),
  .UTMI_REG1_bist_soft_rst_OUT(UTMI_REG1_bist_soft_rst_OUT),
  .UTMI_REG1_tx_lsfs_soft_rst_OUT(UTMI_REG1_tx_lsfs_soft_rst_OUT),
  .UTMI_REG1_tx_hs_soft_rst_OUT(UTMI_REG1_tx_hs_soft_rst_OUT),
  .UTMI_REG1_clkdiv_soft_rst_OUT(UTMI_REG1_clkdiv_soft_rst_OUT),
  .UTMI_REG1_calib_soft_rst_OUT(UTMI_REG1_calib_soft_rst_OUT),
  .UTMI_REG1_phy_soft_rst_OUT(UTMI_REG1_phy_soft_rst_OUT),
  .UTMI_REG2_rx_cntrl_soft_rst_OUT(UTMI_REG2_rx_cntrl_soft_rst_OUT),
  .UTMI_REG2_shift_reg_soft_rst_OUT(UTMI_REG2_shift_reg_soft_rst_OUT),
  .UTMI_REG2_bitunstuff_soft_rst_OUT(UTMI_REG2_bitunstuff_soft_rst_OUT),
  .UTMI_REG2_nrzi_dec_soft_rst_OUT(UTMI_REG2_nrzi_dec_soft_rst_OUT),
  .UTMI_REG2_eop_det_soft_rst_OUT(UTMI_REG2_eop_det_soft_rst_OUT),
  .UTMI_REG2_sync_det_soft_rst_OUT(UTMI_REG2_sync_det_soft_rst_OUT),
  .UTMI_REG2_lsfs_dll_soft_rst_OUT(UTMI_REG2_lsfs_dll_soft_rst_OUT),
  .UTMI_REG2_rx_hs_soft_rst_OUT(UTMI_REG2_rx_hs_soft_rst_OUT),
  .UTMI_REG3_hs_rx_err_OUT(UTMI_REG3_hs_rx_err_OUT),
  .UTMI_REG3_ls_linestate_fil_en_OUT(UTMI_REG3_ls_linestate_fil_en_OUT),
  .UTMI_REG3_fs_linestate_fil_cnt_OUT(UTMI_REG3_fs_linestate_fil_cnt_OUT),
  .UTMI_REG3_fs_linestate_fil_en_OUT(UTMI_REG3_fs_linestate_fil_en_OUT),
  .UTMI_REG4_ls_linestate_fil_cnt_OUT(UTMI_REG4_ls_linestate_fil_cnt_OUT),
  .UTMI_REG5_bist_mode_en_OUT(UTMI_REG5_bist_mode_en_OUT),
  .UTMI_REG5_bist_on_OUT(UTMI_REG5_bist_on_OUT),
  .UTMI_REG5_hstx_boost_deamp_off_OUT(UTMI_REG5_hstx_boost_deamp_off_OUT),
  .UTMI_REG5_hstx_boost_OUT(UTMI_REG5_hstx_boost_OUT),
  .UTMI_REG5_hs_samp_OUT(UTMI_REG5_hs_samp_OUT),
  .UTMI_REG5_hs_samp_en_OUT(UTMI_REG5_hs_samp_en_OUT),
  .UTMI_REG5_hsrx_OUT(UTMI_REG5_hsrx_OUT),
  .UTMI_REG5_hsrx_en_OUT(UTMI_REG5_hsrx_en_OUT),
  .UTMI_REG6_vbusvalid_cntrl_OUT(UTMI_REG6_vbusvalid_cntrl_OUT),
  .UTMI_REG6_vbusvalid_l3_dev_en_OUT(UTMI_REG6_vbusvalid_l3_dev_en_OUT),
  .UTMI_REG6_hs_drven_threshold_OUT(UTMI_REG6_hs_drven_threshold_OUT),
  .UTMI_REG6_hs_drven_th_en_OUT(UTMI_REG6_hs_drven_th_en_OUT),
  .UTMI_REG7_hstx_bc_mode_OUT(UTMI_REG7_hstx_bc_mode_OUT),
  .UTMI_REG7_hstx_bc_en_OUT(UTMI_REG7_hstx_bc_en_OUT),
  .UTMI_REG7_hstx_chirp_mode_OUT(UTMI_REG7_hstx_chirp_mode_OUT),
  .UTMI_REG7_hstx_chirp_en_OUT(UTMI_REG7_hstx_chirp_en_OUT),
  .UTMI_REG7_hstx_en_del_OUT(UTMI_REG7_hstx_en_del_OUT),
  .UTMI_REG7_hstx_en_del_en_OUT(UTMI_REG7_hstx_en_del_en_OUT),
  .UTMI_REG7_hstx_OUT(UTMI_REG7_hstx_OUT),
  .UTMI_REG7_hstx_en_OUT(UTMI_REG7_hstx_en_OUT),
  .UTMI_REG8_hs_term_OUT(UTMI_REG8_hs_term_OUT),
  .UTMI_REG8_hs_term_en_OUT(UTMI_REG8_hs_term_en_OUT),
  .UTMI_REG8_hstx_data_OUT(UTMI_REG8_hstx_data_OUT),
  .UTMI_REG8_hstx_data_en_OUT(UTMI_REG8_hstx_data_en_OUT),
  .UTMI_REG8_hstx_drv_OUT(UTMI_REG8_hstx_drv_OUT),
  .UTMI_REG8_hstx_drv_en_OUT(UTMI_REG8_hstx_drv_en_OUT),
  .UTMI_REG8_hstx_predrv_OUT(UTMI_REG8_hstx_predrv_OUT),
  .UTMI_REG8_hstx_predrv_en_OUT(UTMI_REG8_hstx_predrv_en_OUT),
  .UTMI_REG9_clkoff_en_OUT(UTMI_REG9_clkoff_en_OUT),
  .UTMI_REG9_sdc_space_OUT(UTMI_REG9_sdc_space_OUT),
  .UTMI_REG9_sdc_space_en_OUT(UTMI_REG9_sdc_space_en_OUT),
  .UTMI_REG9_hstx_en_del_th_OUT(UTMI_REG9_hstx_en_del_th_OUT),
  .UTMI_REG9_hstx_en_del_th_en_OUT(UTMI_REG9_hstx_en_del_th_en_OUT),
  .UTMI_REG10_pll_clkon_OUT(UTMI_REG10_pll_clkon_OUT),
  .UTMI_REG10_pll_clkon_en_OUT(UTMI_REG10_pll_clkon_en_OUT),
  .UTMI_REG10_bg_pd_bg_ok_OUT(UTMI_REG10_bg_pd_bg_ok_OUT),
  .UTMI_REG10_bg_pd_bg_ok_en_OUT(UTMI_REG10_bg_pd_bg_ok_en_OUT),
  .UTMI_REG10_lsfs_serx_OUT(UTMI_REG10_lsfs_serx_OUT),
  .UTMI_REG10_lsfs_serx_en_OUT(UTMI_REG10_lsfs_serx_en_OUT),
  .UTMI_REG10_lsfs_rx_OUT(UTMI_REG10_lsfs_rx_OUT),
  .UTMI_REG10_lsfs_rx_en_OUT(UTMI_REG10_lsfs_rx_en_OUT),
  .UTMI_REG11_clean_linestate_serx_mask_en_OUT(UTMI_REG11_clean_linestate_serx_mask_en_OUT),
  .UTMI_REG11_serx_mask_en_OUT(UTMI_REG11_serx_mask_en_OUT),
  .UTMI_REG11_serx_mask_threshold_OUT(UTMI_REG11_serx_mask_threshold_OUT),
  .UTMI_REG11_lsfs_tx_OUT(UTMI_REG11_lsfs_tx_OUT),
  .UTMI_REG11_lsfs_tx_en_OUT(UTMI_REG11_lsfs_tx_en_OUT),
  .UTMI_REG11_fsls_edgesel_OUT(UTMI_REG11_fsls_edgesel_OUT),
  .UTMI_REG11_fsls_edgesel_en_OUT(UTMI_REG11_fsls_edgesel_en_OUT),
  .UTMI_REG12_serx_bias_en_OUT(UTMI_REG12_serx_bias_en_OUT),
  .UTMI_REG12_fsls_tx_data_OUT(UTMI_REG12_fsls_tx_data_OUT),
  .UTMI_REG12_fsls_tx_data_en_OUT(UTMI_REG12_fsls_tx_data_en_OUT),
  .UTMI_REG12_fsls_tx_se0_OUT(UTMI_REG12_fsls_tx_se0_OUT),
  .UTMI_REG12_fsls_tx_se0_en_OUT(UTMI_REG12_fsls_tx_se0_en_OUT),
  .UTMI_REG12_fsls_tx_drv_OUT(UTMI_REG12_fsls_tx_drv_OUT),
  .UTMI_REG12_fsls_tx_drv_en_OUT(UTMI_REG12_fsls_tx_drv_en_OUT),
  .UTMI_REG13_fsls_serialmode_pullup2_OUT(UTMI_REG13_fsls_serialmode_pullup2_OUT),
  .UTMI_REG13_fsls_serialmode_pullup2_en_OUT(UTMI_REG13_fsls_serialmode_pullup2_en_OUT),
  .UTMI_REG13_dm_pulldown_OUT(UTMI_REG13_dm_pulldown_OUT),
  .UTMI_REG13_dm_pulldown_en_OUT(UTMI_REG13_dm_pulldown_en_OUT),
  .UTMI_REG13_dp_pulldown_OUT(UTMI_REG13_dp_pulldown_OUT),
  .UTMI_REG13_dp_pulldown_en_OUT(UTMI_REG13_dp_pulldown_en_OUT),
  .UTMI_REG13_lane_reverse_OUT(UTMI_REG13_lane_reverse_OUT),
  .UTMI_REG13_lane_reverse_en_OUT(UTMI_REG13_lane_reverse_en_OUT),
  .UTMI_REG14_dm_pullup2_OUT(UTMI_REG14_dm_pullup2_OUT),
  .UTMI_REG14_dm_pullup2_en_OUT(UTMI_REG14_dm_pullup2_en_OUT),
  .UTMI_REG14_dp_pullup2_OUT(UTMI_REG14_dp_pullup2_OUT),
  .UTMI_REG14_dp_pullup2_en_OUT(UTMI_REG14_dp_pullup2_en_OUT),
  .UTMI_REG14_dm_pullup1_OUT(UTMI_REG14_dm_pullup1_OUT),
  .UTMI_REG14_dm_pullup1_en_OUT(UTMI_REG14_dm_pullup1_en_OUT),
  .UTMI_REG14_dp_pullup1_OUT(UTMI_REG14_dp_pullup1_OUT),
  .UTMI_REG14_dp_pullup1_en_OUT(UTMI_REG14_dp_pullup1_en_OUT),
  .UTMI_REG15_txvalid_gate_threshold_fs_OUT(UTMI_REG15_txvalid_gate_threshold_fs_OUT),
  .UTMI_REG15_txvalid_gate_threshold_hs_OUT(UTMI_REG15_txvalid_gate_threshold_hs_OUT),
  .UTMI_REG15_ted_en_value_OUT(UTMI_REG15_ted_en_value_OUT),
  .UTMI_REG15_ted_en_cnt_OUT(UTMI_REG15_ted_en_cnt_OUT),
  .UTMI_REG15_ed_en_value_OUT(UTMI_REG15_ed_en_value_OUT),
  .UTMI_REG15_ed_en_cnt_OUT(UTMI_REG15_ed_en_cnt_OUT),
  .UTMI_REG16_unused_OUT(UTMI_REG16_unused_OUT),
  .UTMI_REG17_squelch_count_idle_OUT(UTMI_REG17_squelch_count_idle_OUT),
  .UTMI_REG17_squelch_count_idle_en_OUT(UTMI_REG17_squelch_count_idle_en_OUT),
  .UTMI_REG17_tx_sq_cnt_OUT(UTMI_REG17_tx_sq_cnt_OUT),
  .UTMI_REG17_tx_sq_cnt_en_OUT(UTMI_REG17_tx_sq_cnt_en_OUT),
  .UTMI_REG18_sleep_value_OUT(UTMI_REG18_sleep_value_OUT),
  .UTMI_REG18_sleep_en_OUT(UTMI_REG18_sleep_en_OUT),
  .UTMI_REG18_bist_powerup_OUT(UTMI_REG18_bist_powerup_OUT),
  .UTMI_REG18_bist_powerup_en_OUT(UTMI_REG18_bist_powerup_en_OUT),
  .UTMI_REG18_powerup_en_OUT(UTMI_REG18_powerup_en_OUT),
  .UTMI_REG18_unused_OUT(UTMI_REG18_unused_OUT),
  .UTMI_REG18_clipper_en_OUT(UTMI_REG18_clipper_en_OUT),
  .UTMI_REG18_clipper_en_en_OUT(UTMI_REG18_clipper_en_en_OUT),
  .UTMI_REG19_unused_OUT(UTMI_REG19_unused_OUT),
  .UTMI_REG19_ted_sw_en_OUT(UTMI_REG19_ted_sw_en_OUT),
  .UTMI_REG20_hostdiscon_rst_reg_OUT(UTMI_REG20_hostdiscon_rst_reg_OUT),
  .UTMI_REG20_hostdiscon_rst_reg_en_OUT(UTMI_REG20_hostdiscon_rst_reg_en_OUT),
  .UTMI_REG20_calib_rst_dt_OUT(UTMI_REG20_calib_rst_dt_OUT),
  .UTMI_REG20_calib_rst_dt_en_OUT(UTMI_REG20_calib_rst_dt_en_OUT),
  .UTMI_REG21_calib_triger_posedge_OUT(UTMI_REG21_calib_triger_posedge_OUT),
  .UTMI_REG21_auto_cal_enable_OUT(UTMI_REG21_auto_cal_enable_OUT),
  .UTMI_REG21_absvalid_OUT(UTMI_REG21_absvalid_OUT),
  .UTMI_REG21_absvalid_en_OUT(UTMI_REG21_absvalid_en_OUT),
  .UTMI_REG21_vbusvalid_OUT(UTMI_REG21_vbusvalid_OUT),
  .UTMI_REG21_vbusvalid_en_OUT(UTMI_REG21_vbusvalid_en_OUT),
  .UTMI_REG21_suspendm_OUT(UTMI_REG21_suspendm_OUT),
  .UTMI_REG21_suspendm_en_OUT(UTMI_REG21_suspendm_en_OUT),
  .UTMI_REG22_bccalib_offset_OUT(UTMI_REG22_bccalib_offset_OUT),
  .UTMI_REG23_hscalib_offset_OUT(UTMI_REG23_hscalib_offset_OUT),
  .UTMI_REG24_fscalib_offset_OUT(UTMI_REG24_fscalib_offset_OUT),
  .UTMI_REG25_unused_OUT(UTMI_REG25_unused_OUT),
  .UTMI_REG25_hscalib_OUT(UTMI_REG25_hscalib_OUT),
  .UTMI_REG26_unused_OUT(UTMI_REG26_unused_OUT),
  .UTMI_REG26_fscalib_OUT(UTMI_REG26_fscalib_OUT),
  .UTMI_REG27_unused_OUT(UTMI_REG27_unused_OUT),
  .UTMI_REG27_bccalib_OUT(UTMI_REG27_bccalib_OUT),
  .UTMI_REG28_cdr_eb_wr_reset_OUT(UTMI_REG28_cdr_eb_wr_reset_OUT),
  .UTMI_REG28_unused_OUT(UTMI_REG28_unused_OUT),
  .UTMI_REG29_unused_OUT(UTMI_REG29_unused_OUT),
  .UTMI_REG29_pll_standalone_OUT(UTMI_REG29_pll_standalone_OUT),
  .UTMI_REG29_pll_standalone_en_OUT(UTMI_REG29_pll_standalone_en_OUT),
  .UTMI_REG29_spare_out_OUT(UTMI_REG29_spare_out_OUT),
  .UTMI_REG30_unused_OUT(UTMI_REG30_unused_OUT),
  .UTMI_REG30_pll_480_clock_gate_ovr_OUT(UTMI_REG30_pll_480_clock_gate_ovr_OUT),
  .UTMI_REG30_scan_ats_hs_clock_gate_ovr_OUT(UTMI_REG30_scan_ats_hs_clock_gate_ovr_OUT),
  .UTMI_REG30_vco_pll_clock_gate_ovr_OUT(UTMI_REG30_vco_pll_clock_gate_ovr_OUT),
  .UTMI_REG30_dig_div_refclock_gate_ovr_OUT(UTMI_REG30_dig_div_refclock_gate_ovr_OUT),
  .UTMI_REG30_fb_clock_gate_ovr_OUT(UTMI_REG30_fb_clock_gate_ovr_OUT),
  .UTMI_REG30_ana_div_refclock_gate_ovr_OUT(UTMI_REG30_ana_div_refclock_gate_ovr_OUT),
  .UTMI_REG30_hs_clock_gate_ovr_OUT(UTMI_REG30_hs_clock_gate_ovr_OUT),
  .UTMI_UNUSED_REG0_unused_OUT(UTMI_UNUSED_REG0_unused_OUT),
  .UTMI_UNUSED_REG1_unused_OUT(UTMI_UNUSED_REG1_unused_OUT),
  .UTMI_UNUSED_REG2_unused_OUT(UTMI_UNUSED_REG2_unused_OUT),
  .UTMI_UNUSED_REG3_unused_OUT(UTMI_UNUSED_REG3_unused_OUT),
  .UTMI_REG31_unused_IN(UTMI_REG31_unused_IN),
  .UTMI_REG31_bist_error_IN(UTMI_REG31_bist_error_IN),
  .UTMI_REG31_bist_complete_IN(UTMI_REG31_bist_complete_IN),
  .UTMI_REG32_bist_err_count_IN(UTMI_REG32_bist_err_count_IN),
  .UTMI_REG33_bg_powergood_IN(UTMI_REG33_bg_powergood_IN),
  .UTMI_REG33_afe_hsrx_diff_data_IN(UTMI_REG33_afe_hsrx_diff_data_IN),
  .UTMI_REG33_hsrx_en_IN(UTMI_REG33_hsrx_en_IN),
  .UTMI_REG33_hsrx_sampler_enable_IN(UTMI_REG33_hsrx_sampler_enable_IN),
  .UTMI_REG33_chirp_mode_en_IN(UTMI_REG33_chirp_mode_en_IN),
  .UTMI_REG33_hstx_en_IN(UTMI_REG33_hstx_en_IN),
  .UTMI_REG33_hstx_en_delayed_IN(UTMI_REG33_hstx_en_delayed_IN),
  .UTMI_REG33_hstx_boost_deamp_off_IN(UTMI_REG33_hstx_boost_deamp_off_IN),
  .UTMI_REG34_o_dprpu1_en_IN(UTMI_REG34_o_dprpu1_en_IN),
  .UTMI_REG34_o_dmrpu1_en_IN(UTMI_REG34_o_dmrpu1_en_IN),
  .UTMI_REG34_o_dprpu2_en_IN(UTMI_REG34_o_dprpu2_en_IN),
  .UTMI_REG34_o_dmrpu2_en_IN(UTMI_REG34_o_dmrpu2_en_IN),
  .UTMI_REG34_o_dprpd_en_IN(UTMI_REG34_o_dprpd_en_IN),
  .UTMI_REG34_o_dmrpd_en_IN(UTMI_REG34_o_dmrpd_en_IN),
  .UTMI_REG34_o_otgc_id_pullup_en_IN(UTMI_REG34_o_otgc_id_pullup_en_IN),
  .UTMI_REG34_o_fs_edge_sel_IN(UTMI_REG34_o_fs_edge_sel_IN),
  .UTMI_REG35_i_afe_lsfsrx_ana_IN(UTMI_REG35_i_afe_lsfsrx_ana_IN),
  .UTMI_REG35_o_lsfstx_en_IN(UTMI_REG35_o_lsfstx_en_IN),
  .UTMI_REG35_o_lsfsdrv_en_IN(UTMI_REG35_o_lsfsdrv_en_IN),
  .UTMI_REG35_o_lsfs_ddi_IN(UTMI_REG35_o_lsfs_ddi_IN),
  .UTMI_REG35_o_assert_sezero_IN(UTMI_REG35_o_assert_sezero_IN),
  .UTMI_REG35_o_lsfsrx_en_IN(UTMI_REG35_o_lsfsrx_en_IN),
  .UTMI_REG35_o_serx_en_IN(UTMI_REG35_o_serx_en_IN),
  .UTMI_REG35_o_serx_bias_en_IN(UTMI_REG35_o_serx_bias_en_IN),
  .UTMI_REG36_o_pll_pso_IN(UTMI_REG36_o_pll_pso_IN),
  .UTMI_REG36_o_pll_pso_delay_IN(UTMI_REG36_o_pll_pso_delay_IN),
  .UTMI_REG36_o_pll_pd_IN(UTMI_REG36_o_pll_pd_IN),
  .UTMI_REG36_o_pll_ipdiv_IN(UTMI_REG36_o_pll_ipdiv_IN),
  .UTMI_REG37_o_pll_fbdiv_value_IN(UTMI_REG37_o_pll_fbdiv_value_IN),
  .UTMI_REG38_o_pll_standby_IN(UTMI_REG38_o_pll_standby_IN),
  .UTMI_REG38_o_pll_ldo_core_en_IN(UTMI_REG38_o_pll_ldo_core_en_IN),
  .UTMI_REG38_o_pll_ldo_ref_en_IN(UTMI_REG38_o_pll_ldo_ref_en_IN),
  .UTMI_REG38_o_afe_suspendm_IN(UTMI_REG38_o_afe_suspendm_IN),
  .UTMI_REG38_o_otgc_vbusvalid_en_IN(UTMI_REG38_o_otgc_vbusvalid_en_IN),
  .UTMI_REG38_o_otgc_absvalid_en_IN(UTMI_REG38_o_otgc_absvalid_en_IN),
  .UTMI_REG38_o_afe_clipper_en_IN(UTMI_REG38_o_afe_clipper_en_IN),
  .UTMI_REG38_o_pll_ldo_isolation_cntrl_IN(UTMI_REG38_o_pll_ldo_isolation_cntrl_IN),
  .UTMI_REG39_unused_IN(UTMI_REG39_unused_IN),
  .UTMI_REG40_unused_IN(UTMI_REG40_unused_IN),
  .UTMI_REG41_i_ted_squelch_ana_IN(UTMI_REG41_i_ted_squelch_ana_IN),
  .UTMI_REG41_i_usb2_rescal_calib_done_IN(UTMI_REG41_i_usb2_rescal_calib_done_IN),
  .UTMI_REG41_hs_calib_code_IN(UTMI_REG41_hs_calib_code_IN),
  .UTMI_REG42_hs_sof_IN(UTMI_REG42_hs_sof_IN),
  .UTMI_REG42_all_calib_done_IN(UTMI_REG42_all_calib_done_IN),
  .UTMI_REG42_fs_calib_code_IN(UTMI_REG42_fs_calib_code_IN),
  .UTMI_REG43_ls_mode_IN(UTMI_REG43_ls_mode_IN),
  .UTMI_REG43_fs_mode_pre_IN(UTMI_REG43_fs_mode_pre_IN),
  .UTMI_REG43_bc_calib_code_IN(UTMI_REG43_bc_calib_code_IN),
  .UTMI_REG44_rstn_refclock_IN(UTMI_REG44_rstn_refclock_IN),
  .UTMI_REG44_rstn_hs_clock_IN(UTMI_REG44_rstn_hs_clock_IN),
  .UTMI_REG44_rstn_hs_tx_clock_IN(UTMI_REG44_rstn_hs_tx_clock_IN),
  .UTMI_REG44_rstn_byte_clock_IN(UTMI_REG44_rstn_byte_clock_IN),
  .UTMI_REG44_rstn_sieclock_IN(UTMI_REG44_rstn_sieclock_IN),
  .UTMI_REG44_rstn_clkdiv_IN(UTMI_REG44_rstn_clkdiv_IN),
  .UTMI_REG44_rstn_calib_clkdiv_IN(UTMI_REG44_rstn_calib_clkdiv_IN),
  .UTMI_REG44_udc_rstn_cdr_async_IN(UTMI_REG44_udc_rstn_cdr_async_IN),
  .UTMI_REG45_udc_calib_rstn_IN(UTMI_REG45_udc_calib_rstn_IN),
  .UTMI_REG45_udc_apb_rstn_IN(UTMI_REG45_udc_apb_rstn_IN),
  .UTMI_REG45_o_rstn_cdr_async_IN(UTMI_REG45_o_rstn_cdr_async_IN),
  .UTMI_REG45_o_pll_calib_rstn_IN(UTMI_REG45_o_pll_calib_rstn_IN),
  .UTMI_REG45_bist_mode_rstn_IN(UTMI_REG45_bist_mode_rstn_IN),
  .UTMI_REG45_o_usb2_calib_rstn_IN(UTMI_REG45_o_usb2_calib_rstn_IN),
  .UTMI_REG45_udc_bc_calib_rstn_IN(UTMI_REG45_udc_bc_calib_rstn_IN),
  .UTMI_REG45_global_resetn_IN(UTMI_REG45_global_resetn_IN),
  .UTMI_REG46_unused_IN(UTMI_REG46_unused_IN),
  .UTMI_REG46_recovery_cnt_en_IN(UTMI_REG46_recovery_cnt_en_IN),
  .UTMI_REG46_clean_linestate_IN(UTMI_REG46_clean_linestate_IN),
  .UTMI_REG46_bc_state_machine_status_IN(UTMI_REG46_bc_state_machine_status_IN),
  .UTMI_REG47_filter_cnt_en_IN(UTMI_REG47_filter_cnt_en_IN),
  .UTMI_REG47_host_opmode_IN(UTMI_REG47_host_opmode_IN),
  .UTMI_REG47_dev_opmode_IN(UTMI_REG47_dev_opmode_IN),
  .UTMI_REG47_i_ded_ana_IN(UTMI_REG47_i_ded_ana_IN),
  .UTMI_REG47_hs_hostdisconnect_IN(UTMI_REG47_hs_hostdisconnect_IN),
  .UTMI_REG47_lsfs_hostdisconnect_IN(UTMI_REG47_lsfs_hostdisconnect_IN),
  .UTMI_REG48_bist_tx_state_IN(UTMI_REG48_bist_tx_state_IN),
  .UTMI_REG48_data_cnt_tx_IN(UTMI_REG48_data_cnt_tx_IN),
  .UTMI_REG49_bist_rx_state_IN(UTMI_REG49_bist_rx_state_IN),
  .UTMI_REG49_data_cnt_rx_IN(UTMI_REG49_data_cnt_rx_IN),
  .UTMI_REG50_bist_top_state_IN(UTMI_REG50_bist_top_state_IN),
  .UTMI_REG50_inc_data_cnt_tx_IN(UTMI_REG50_inc_data_cnt_tx_IN),
  .UTMI_REG50_inc_data_cnt_rx_IN(UTMI_REG50_inc_data_cnt_rx_IN),
  .UTMI_REG50_o_bg_pd_IN(UTMI_REG50_o_bg_pd_IN),
  .UTMI_REG50_o_bg_pd_bg_ok_IN(UTMI_REG50_o_bg_pd_bg_ok_IN),
  .UTMI_REG51_powerdown_IN(UTMI_REG51_powerdown_IN),
  .UTMI_REG51_reset_IN(UTMI_REG51_reset_IN),
  .UTMI_REG51_suspendm_IN(UTMI_REG51_suspendm_IN),
  .UTMI_REG51_termselect_IN(UTMI_REG51_termselect_IN),
  .UTMI_REG51_databus16_8_IN(UTMI_REG51_databus16_8_IN),
  .UTMI_REG51_dppulldown_IN(UTMI_REG51_dppulldown_IN),
  .UTMI_REG51_dmpulldown_IN(UTMI_REG51_dmpulldown_IN),
  .UTMI_REG52_lane_reverse_IN(UTMI_REG52_lane_reverse_IN),
  .UTMI_REG52_txbitstuffenable_IN(UTMI_REG52_txbitstuffenable_IN),
  .UTMI_REG52_txbitstuffenableh_IN(UTMI_REG52_txbitstuffenableh_IN),
  .UTMI_REG52_xcvrselect_IN(UTMI_REG52_xcvrselect_IN),
  .UTMI_REG52_linestate_IN(UTMI_REG52_linestate_IN),
  .UTMI_REG52_hostdisconnect_IN(UTMI_REG52_hostdisconnect_IN),
  .UTMI_REG53_fslsserialmode_IN(UTMI_REG53_fslsserialmode_IN),
  .UTMI_REG53_tx_enable_n_IN(UTMI_REG53_tx_enable_n_IN),
  .UTMI_REG53_tx_dat_IN(UTMI_REG53_tx_dat_IN),
  .UTMI_REG53_tx_se0_IN(UTMI_REG53_tx_se0_IN),
  .UTMI_REG53_sleepm_IN(UTMI_REG53_sleepm_IN),
  .UTMI_REG53_unused_IN(UTMI_REG53_unused_IN),
  .UTMI_REG53_opmode_IN(UTMI_REG53_opmode_IN),
  .UTMI_REG54_rx_dp_IN(UTMI_REG54_rx_dp_IN),
  .UTMI_REG54_rx_dm_IN(UTMI_REG54_rx_dm_IN),
  .UTMI_REG54_rx_rcv_IN(UTMI_REG54_rx_rcv_IN),
  .UTMI_REG54_unused_IN(UTMI_REG54_unused_IN),
  .UTMI_REG55_txvalidh_IN(UTMI_REG55_txvalidh_IN),
  .UTMI_REG55_txvalid_IN(UTMI_REG55_txvalid_IN),
  .UTMI_REG55_txready_IN(UTMI_REG55_txready_IN),
  .UTMI_REG55_rxvalidh_IN(UTMI_REG55_rxvalidh_IN),
  .UTMI_REG55_rxvalid_IN(UTMI_REG55_rxvalid_IN),
  .UTMI_REG55_rxactive_IN(UTMI_REG55_rxactive_IN),
  .UTMI_REG55_rxerror_IN(UTMI_REG55_rxerror_IN),
  .UTMI_REG55_unused_IN(UTMI_REG55_unused_IN),
  .UTMI_REG56_datain_upper_IN(UTMI_REG56_datain_upper_IN),
  .UTMI_REG57_datain_lower_IN(UTMI_REG57_datain_lower_IN),
  .UTMI_REG58_dataout_upper_IN(UTMI_REG58_dataout_upper_IN),
  .UTMI_REG59_dataout_lower_IN(UTMI_REG59_dataout_lower_IN),
  .UTMI_UNUSED_REG6_unused_IN(UTMI_UNUSED_REG6_unused_IN),
  .UTMI_UNUSED_REG7_unused_IN(UTMI_UNUSED_REG7_unused_IN),
  .PRDATA(PRDATA_utmi),
  .PADDR(PADDR),
  .PWDATA(PWDATA),
  .PWRITE(PWRITE),
  .PSELx(PSELx),
  .PENABLE(PENABLE),
  .PCLK(PCLK),
  .PRESETn(PRESETn)
);
endmodule
module async_ctrl_if_slv_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
   input            clock,
   input            reset_n,
   output           sync_req,
   input            sync_ack,
   input            async_req,
   output           async_ack
);
   wire async_req_synced;
   reg  async_req_synced_d1;
   wire async_req_pulse;
   reg [1:0]    st_current_state, st_next_state;    
   parameter [1:0]    
      ST_SLV_IDLE      = 2'b0_0, 
      ST_SLV_SYNC_REQ  = 2'b0_1, 
      ST_SLV_ASYNC_ACK = 2'b1_0;
   phy_data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(
      .RESET_VALUE (1'b1)
   )
   u_phy_data_sync_async_req
   (   
      .clock   (clock),
      .reset_n (reset_n),
      .d_in    (async_req), 
      .d_out   (async_req_synced) 
   );
   always @(posedge clock or negedge reset_n) 
   begin
      if (!reset_n)
         async_req_synced_d1 <= 1'b1;
      else
         async_req_synced_d1 <= async_req_synced;
   end    
   assign async_req_pulse = async_req_synced && !async_req_synced_d1;
   always @(posedge clock or negedge reset_n) 
   begin
      if (!reset_n)
         st_current_state  <= ST_SLV_IDLE;
      else
         st_current_state  <= st_next_state;
   end    
   always @(*)
   begin
      st_next_state = st_current_state;
      case(st_current_state)
         ST_SLV_IDLE :
         begin
            if (async_req_pulse)
               st_next_state = ST_SLV_SYNC_REQ;
            else
               st_next_state = ST_SLV_IDLE;
         end
         ST_SLV_SYNC_REQ :
         begin
            if (sync_ack)
               st_next_state = ST_SLV_ASYNC_ACK;
            else
               st_next_state = ST_SLV_SYNC_REQ;
         end
         ST_SLV_ASYNC_ACK :
         begin
            if (!async_req_synced)
               st_next_state = ST_SLV_IDLE;
            else
               st_next_state = ST_SLV_ASYNC_ACK;
         end
      endcase
   end
   assign sync_req  = st_current_state[0];
   assign async_ack = st_current_state[1];
endmodule
`timescale 1ns / 1ps 
module tap_wrapper_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r 
  (
   input            i_scan_clk, 
   input            i_scan_rstb, 
   input            i_scan_mode, 
   input            i_scan_en, 
   input            i_scan_en_cg, 
   output [7:0]     o_apb_prdata, 
   output           o_apb_pready, 
   output           o_apb_pslverr,
   input            i_apb_pclk, 
   input            i_apb_penable, 
   input  [7:0]     i_apb_paddr, 
   input            i_apb_presetn, 
   input            i_apb_psel,
   input  [7:0]     i_apb_pwdata, 
   input            i_apb_pwrite, 
   input            i_tap_tdi,
   input            i_tap_tck,
   input            i_tap_tms,
   input            i_tap_trst_n,
   output           o_tap_tdo,
   output           o_tap_tdoen,
   input [7:0]      i_int_apb_prdata, 
   input            i_int_apb_pready, 
   input            i_int_apb_pslverr,
   output           o_int_apb_pclk, 
   output           o_int_apb_penable, 
   output [7:0]     o_int_apb_paddr, 
   output           o_int_apb_presetn, 
   output           o_int_apb_psel,
   output [7:0]     o_int_apb_pwdata, 
   output           o_int_apb_pwrite 
 );
  wire              w_tap_tck_scanned;
  wire              w_tap_trst_n_scanned;
  wire              w_diag_apb_preset_n;
  wire              w_macro_isolation_mode_en;
  wire    [7:0]    w_async_apb_prdata;
  wire              w_async_apb_ack;
  wire              w_async_apb_req;
  wire    [7:0]    w_async_apb_paddr;
  wire              w_async_apb_pwrite;
  wire    [7:0]    w_async_apb_pwdata;
  assign o_apb_pslverr = 1'b0;
  scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r C_scan_mux_tap_tck
     (
      .scan_mode_en_in (i_scan_mode),
      .scan_signal_in  (i_scan_clk), 
      .fcn_signal_in   (i_tap_tck),  
      .fcn_signal_out  (w_tap_tck_scanned) 
      );
  scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r C_scan_mux_tap_rst_n
     (
      .scan_mode_en_in (i_scan_mode),
      .scan_signal_in  (i_scan_rstb),
      .fcn_signal_in   (i_tap_trst_n),  
      .fcn_signal_out  (w_tap_trst_n_scanned) 
      );
  tap_complex_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r u_tap_complex (
    .scanen                   (i_scan_en),
    .scanen_cg                (i_scan_en_cg),
    .scanmode                 (i_scan_mode),
    .tap_tdi                  (i_tap_tdi),
    .tap_tck                  (w_tap_tck_scanned),
    .tap_tms                  (i_tap_tms),
    .tap_trst_n               (w_tap_trst_n_scanned),
    .tap_tdo                  (o_tap_tdo),
    .tap_tdoen                (o_tap_tdoen),
    .tx_bscan_tdo             (1'b0),
    .rx_bscan_tdi             ( ),
    .rx_bscan_clockdr         ( ),
    .tx_bscan_clockdr         ( ),
    .rx_bscan_shiftdr         ( ),
    .tx_bscan_shiftdr         ( ),
    .tx_bscan_updatedr        ( ),
    .tx_bscan_mode_c          ( ),
    .tx_bscan_ac              ( ),
    .rx_bscan_ac              ( ),
    .rx_bscan_pc              ( ),
    .tx_bscan_acpulse         ( ),
    .async_apb_prdata         (w_async_apb_prdata),
    .async_apb_ack            (w_async_apb_ack),
    .async_apb_req            (w_async_apb_req), 
    .async_apb_paddr          (w_async_apb_paddr), 
    .async_apb_pwrite         (w_async_apb_pwrite),
    .async_apb_pwdata         (w_async_apb_pwdata),
    .diag_apb_preset_n        (w_diag_apb_preset_n),       
    .macro_isolation_mode_sel (),
    .macro_isolation_mode_en  (w_macro_isolation_mode_en),
    .JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_1  ( ),
    .JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_2  ( ),
    .JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_3  ( ),
    .JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_4  ( ),
    .JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_5  ( ),
    .JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_6  ( ),
    .JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_7  ( ),
    .JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_8  ( ),
    .JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_9  ( ),
    .JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_10 ( )
  );
  async_apb_if_slv_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r 
     #( 
        .ADDR_WIDTH (8),
        .DATA_WIDTH (8)
     ) u_async_apb_if_slv (   
        .isolation_mode_en  (w_macro_isolation_mode_en),
        .pri_apb_pclk       (i_apb_pclk),
        .pri_apb_preset_n   (i_apb_presetn),
        .pri_apb_psel       (i_apb_psel),
        .pri_apb_penable    (i_apb_penable),
        .pri_apb_paddr      (i_apb_paddr),
        .pri_apb_pwrite     (i_apb_pwrite),
        .pri_apb_pwdata     (i_apb_pwdata),
        .pri_apb_prdata     (o_apb_prdata),
        .pri_apb_pready     (o_apb_pready),
        .int_apb_pclk       (o_int_apb_pclk),
        .int_apb_preset_n   (o_int_apb_presetn),
        .int_apb_psel       (o_int_apb_psel),
        .int_apb_penable    (o_int_apb_penable),
        .int_apb_paddr      (o_int_apb_paddr),
        .int_apb_pwrite     (o_int_apb_pwrite),
        .int_apb_pwdata     (o_int_apb_pwdata),
        .int_apb_prdata     (i_int_apb_prdata),
        .int_apb_pready     (i_int_apb_pready),
        .async_apb_pclk     (i_tap_tck),
        .async_apb_preset_n (w_diag_apb_preset_n),
        .async_apb_req      (w_async_apb_req),
        .async_apb_paddr    (w_async_apb_paddr),
        .async_apb_pwrite   (w_async_apb_pwrite),
        .async_apb_pwdata   (w_async_apb_pwdata),
        .async_apb_prdata   (w_async_apb_prdata),
        .async_apb_ack      (w_async_apb_ack),
        .scanclk_pclk       (i_scan_clk),  
        .scanen_pclk        (i_scan_en),
        .scanmode_pclk      (i_scan_mode)
     );
endmodule
module udc_test_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r
(
input                    i_afe_rxdp_ana ,
input                    i_afe_rxdm_ana ,
input                    usb2_calib_clock,
input                    udc_bc_calib_rstn ,
input                    refclock       ,
input                    scan_hsclock   ,
input                    scan_mode      ,
input                    i_bist_rstn    ,
input                    i_sieclk       ,
input                    i_databus      ,
input                    i_bist_on      ,
input [3:0]              i_bist_mode_sel,
input [1:0]              i_loopback     ,
input                    i_tx_valid     ,
input                    i_tx_validh    ,
input [15:0]             i_datain       ,
input                    i_tx_ready     ,
input [7:0]              i_rx_data      ,
input [7:0]              i_rx_datah     ,
input                    i_rx_valid     ,
input                    i_rx_validh    ,
input                    i_rx_active    ,
input                    sleepm         ,       
input                    pll_clkon      ,
input                    pll_standalone ,
input                    i_lane_reverse ,
input                    i_hstx_en_delayed,
input                    i_bist_mode_en,
input                    bist_ana_powerup,
input                    rstn_bist_mode,
input                   adp_en,
input                   adp_probe_en,
input                   adp_sense_en,
input                   adp_sink_en,
input                   adp_source_en,
input                   bc_en,  
input                   idp_src_en,
input                   idp_sink_en,
input                   idm_sink_en,
input                   vdp_src_en,
input                   vdm_src_en,
input                   dp_vdat_ref_comp_en,
input                   dm_vdat_ref_comp_en,
input                   dm_vlgc_comp_en,
input                   rid_float_comp_en,
input                   rid_nonfloat_comp_en,
input                   i_otgc_vbusvalid_ana,
input                   i_otgc_bvalid_ana,
input                   i_otgc_id_ana,
input                   i_adp_probe_ana,
input                   i_adp_sense_ana,
input                   i_dp_vdat_ref_comp_sts,
input                   i_dm_vdat_ref_comp_sts,
input                   i_rid_float_a_comp_sts,
input                   i_rid_b_c_comp_sts,
input                   pclk          ,
input                   presetn       ,
input                   pwrite        ,
input                   penable       ,
input                   pselx         ,
input [7:0]             pwdata        ,
input [7:0]             paddr         ,
input           [7:0]   debug_calib,
input           [7:0]   debug_res_calib_code,
input           [7:0]   tm_ted_reg3,
input           [7:0]   tm_ted_reg4,
input           [7:0]   tm_pll_reg15,
input           [7:0]   tm_pll_reg16,
input           [7:0]   tm_cdr_reg9,
input           [7:0]   tm_cdr_reg10,
input           [7:0]   tm_cdr_reg11,
input           [7:0]   tm_cdr_reg12,
input                   debug_eb_error         ,
input                   debug_cdr_error        ,
input                   debug_sync_detected    ,
input                   debug_eop_detected     ,
input                   debug_hs_eop_condition ,
input                   debug_normal_eop       ,
input                   debug_alignment_error  ,
input                   debug_no_eop           ,
input                   debug_hs_eop_detected  ,
input                   debug_se0_validated    ,
input                   debug_lsfs_eop_detected,
input                   debug_bitunstuff_error ,
input   [2:0]           debug_bus_state        ,
input                   debug_start_flag       ,
input                   debug_rxactive_reg     ,
input                   debug_deassert_rxactive_reg,
input   [11:0]          debug_phy_cnt          ,
input   [11:0]          debug_sie_cnt          ,
input   [3:0]           debug_tx_hs_state      ,
input                   debug_eop_transmitted  ,
input                   debug_hs_bitstuff_en   ,
input                   debug_resume_eop       ,
input                   debug_remote_wakeup    ,
input   [3:0]           debug_tx_lsfs_state    ,
input   [2:0]           debug_pd_state         ,
input                   debug_preamble_sent    ,
input                   debug_lsfs_bitstuff_en ,
input                   debug_ls_keep_alive    ,
input                   debug_bg_powergood      ,
input                   debug_afe_hsrx_diff_data ,
input                   debug_hsrx_en           ,
input                   debug_hsrx_sampler_enable,
input                   debug_chirp_mode_en     ,
input                   debug_hstx_en           ,
input                   debug_hstx_en_delayed   ,
input                   debug_hstx_boost_deamp_off      ,
input                   debug_dprpu1_en         ,
input                   debug_dmrpu1_en         ,
input                   debug_dprpu2_en         ,
input                   debug_dmrpu2_en         ,
input                   debug_dprpd_en          ,
input                   debug_dmrpd_en          ,
input                   debug_otgc_id_pullup_en,
input                   debug_fs_edge_sel       ,
input                   debug_afe_lsfsrx_ana    ,
input                   debug_lsfstx_en         ,
input                   debug_lsfsdrv_en        ,
input                   debug_lsfs_ddi          ,
input                   debug_assert_sezero     ,
input                   debug_lsfsrx_en         ,
input                   debug_serx_en           ,
input                   debug_pll_pso           ,
input                   debug_pll_pso_delay     ,
input                   debug_pll_pd            ,
input   [4:0]           debug_pll_ipdiv         ,
input   [7:0]           debug_pll_fbdiv         ,
input                   debug_pll_standby       ,
input                   debug_pll_ldo_core_en   ,
input                   debug_pll_ldo_isolation_cntrl   ,
input                   debug_pll_ldo_ref_en    ,
input                   debug_afe_suspendm,     
input                   debug_otgc_vbusvalid_en,        
input                   debug_otgc_absvalid_en, 
input                   debug_afe_clipper_en,
input                   debug_serx_bias_en,
input                   debug_ted_squelch_ana   ,
input                   debug_ded_ana           ,
input                   debug_usb2_rescal_calib_done,
input   [5:0]           debug_hscalib_code,
input                   debug_hs_sof           ,
input                   debug_hs_hostdisconnect ,
input                   debug_all_calib_done   ,
input   [5:0]           debug_fscalib_code,
input                   debug_lsfs_hostdisconnect,
input                   debug_fs_mode_pre      ,
input                   debug_ls_mode          ,
input   [5:0]           debug_bccalib_code,
input                   debug_rstn_refclock    ,
input                   debug_rstn_hs_clock    ,
input                   debug_rstn_hs_tx_clock ,
input                   debug_rstn_byte_clock  ,
input                   debug_rstn_sieclock    ,
input                   debug_rstn_clkdiv      ,
input                   debug_rstn_calib_clkdiv ,
input                   debug_udc_rstn_cdr_async,
input                   debug_udc_calib_rstn   ,
input                   debug_udc_apb_resetn  ,
input                   debug_o_rstn_cdr_async ,
input                   debug_o_pll_calib_rstn_int ,
input                   debug_o_usb2_calib_rstn ,
input                   debug_global_resetn    ,
input                   debug_rstn_bist_mode   ,
input                   debug_recovery_cnt_en  ,
input   [1:0]           debug_clean_linestate  ,
input                   debug_filter_cnt_en    ,
input   [1:0]           debug_host_opmode      ,
input   [1:0]           debug_dev_opmode        ,       
input                   debug_o_bg_pd,          
input                   debug_o_bg_pd_bg_ok,            
input   [1:0]           debug_powerdown        ,
input                   reset                  ,
input                   debug_suspendm         ,
input                   debug_termselect       ,
input                   debug_databus16_8      ,
input                   debug_dppulldown       ,
input                   debug_dmpulldown       ,
input                   debug_lane_reverse     ,
input                   debug_txbitstuffenable ,
input                   debug_txbitstuffenableh ,
input   [1:0]           debug_xcvrselect       ,
input   [1:0]           debug_linestate        ,
input                   debug_hostdisconnect   ,
input                   debug_fslsserialmode   ,
input                   debug_tx_enable_n      ,
input                   debug_tx_dat           ,
input                   debug_tx_se0           ,
input                   debug_sleepm           ,
input   [1:0]           debug_opmode           ,
input                   debug_rx_dp            ,
input                   debug_rx_dm            ,
input                   debug_rx_rcv           ,
input                   debug_txvalid          ,
input                   debug_txvalidh         ,
input                   debug_txready          ,
input                   debug_rxactive         ,
input                   debug_rxvalid          ,
input                   debug_rxvalidh         ,
input                   debug_rxerror          ,
input   [15:0]          debug_datain           ,
input   [15:0]          debug_dataout          ,
output  wire            o_bc_en,    
output  wire            o_bist_complete,
output  wire            o_bist_error,
output  wire    [7:0]   o_bist_error_count,
output  wire            mux_txvalid,
output  wire            mux_txvalidh,
output  wire [15:0]     mux_datain,
output  wire            bist_speed_sel,
output  wire            bist_interface_sel,
output  wire            loopback_ls,
output  wire            loopback_fs,
output  wire            loopback_hs,
output  wire            o_sleepm,
output  wire            adp_probe_sts,
output  wire            adp_sense_sts,
output  wire            dcd_comp_sts,
output  wire            dp_vdat_ref_comp_sts,
output  wire            dm_vdat_ref_comp_sts,
output  wire            dm_vlgc_comp_sts,
output  wire            rid_a_comp_sts,
output  wire            rid_b_comp_sts,
output  wire            rid_c_comp_sts,
output  wire            rid_float_comp_sts,
output  wire            rid_gnd_comp_sts,
output  wire            bc_hstx_en,
output  wire            o_bist_on_pulse,
output  wire            bist_hostdevice_sel,
output  wire            phy_soft_reset,          
output  wire            clkdiv_soft_reset,       
output  wire            calib_soft_reset,        
output  wire            tx_hs_soft_reset,        
output  wire            tx_lsfs_soft_reset,      
output  wire            rx_hs_soft_reset,        
output  wire            lsfs_dll_soft_reset,     
output  wire            sync_det_soft_reset,     
output  wire            eop_det_soft_reset,      
output  wire            nrzi_dec_soft_reset,     
output  wire            bitunstuff_soft_reset,   
output  wire            shift_reg_soft_reset,    
output  wire            rx_cntrl_soft_reset,     
output wire     [7:0]   prdata       ,
output wire             pslverr      ,
output wire             pready       ,
output  wire            o_adp_en,
output  wire            o_adp_probe_en,
output  wire            o_adp_sense_en,
output  wire            o_adp_sink_current_en,
output  wire            o_adp_source_current_en,
output  wire            o_idp_src_en,
output  wire            o_idm_src_en,
output  wire            o_idp_sink_en,
output  wire            o_idm_sink_en,
output  wire            o_vdp_src_en,
output  wire            o_vdm_src_en,
output  wire            o_dp_vdat_ref_comp_en,
output  wire            o_dm_vdat_ref_comp_en,
output  wire            o_rid_float_src_en,
output  wire            o_rid_nonfloat_src_en,
output  wire            o_rid_float_ref_en,
output  wire            o_rid_a_ref_en,
output  wire            o_rid_b_ref_en,
output  wire            o_rid_c_ref_en,
output  wire            o_rid_float_a_comp_en,
output  wire            o_rid_b_c_comp_en,
output  wire            o_bist_mode_en,
output  wire            o_bg_pd_toggle,
output  wire            o_bist_mux_resets,
output  wire            tm_eb_wr_rst_sel,
output wire     [7:0]   o_afe_tx_reg0  ,
output wire     [7:0]   o_afe_tx_reg1  ,
output wire     [7:0]   o_afe_tx_reg2  ,
output wire     [7:0]   o_afe_tx_reg3  ,
output wire     [7:0]   o_afe_tx_reg4  ,
output wire     [7:0]   o_afe_tx_reg5  ,
output wire     [7:0]   o_afe_tx_reg6  ,
output wire     [7:0]   o_afe_tx_reg7  ,
output wire     [7:0]   o_afe_tx_reg8  ,
output wire     [7:0]   o_afe_tx_reg9  ,
output wire     [7:0]   o_afe_tx_reg10  ,
output wire     [7:0]   o_afe_tx_reg11  ,
output wire     [7:0]   o_afe_tx_reg12  ,
output wire     [7:0]   o_afe_rx_reg0  ,
output wire     [7:0]   o_afe_rx_reg1  ,
output wire     [7:0]   o_afe_rx_reg2  ,
output wire     [7:0]   o_afe_rx_reg3  ,
output wire     [7:0]   o_afe_rx_reg4  ,
output wire     [7:0]   o_afe_rx_reg5  ,
output wire     [7:0]   o_afe_rx_reg6  ,
output wire     [7:0]   o_afe_bg_reg0,
output wire     [7:0]   o_afe_bg_reg1,
output wire     [7:0]   o_afe_bg_reg2,
output wire     [7:0]   o_afe_bg_reg3,
output wire     [7:0]   o_afe_calib_reg0,
output wire     [7:0]   o_afe_bc_reg0,
output wire     [7:0]   o_afe_bc_reg1,
output wire     [7:0]   o_afe_bc_reg2,
output wire     [7:0]   o_afe_bc_reg3,
output wire     [7:0]   o_afe_bc_reg4,
output wire     [7:0]   o_afe_bc_reg5,
output wire     [7:0]   o_afe_bc_reg6,
output wire     [7:0]   o_afe_pll_reg0,
output wire     [7:0]   o_afe_pll_reg1,
output wire     [7:0]   o_afe_pll_reg2,
output wire     [7:0]   o_afe_pll_reg3,
output wire     [7:0]   o_afe_pll_reg4,
output wire     [7:0]   o_afe_pll_reg5,
output wire     [9:0]   threshold_ovr_value,
output wire             threshold_ovr_en,
output wire             glitch_filter_en,
output wire             set1_dis,
output wire     [1:0]   tm_calib_clk_ovr,
output wire             tm_calib_cmp_override,
output wire     [3:0]   tm_calib_init_wait_ovr,
output wire             tm_calib_init_wait_ovr_en,
output wire     [6:0]   tm_res_calib_code,
output wire     [7:0]   tm_ted_reg0  ,
output wire     [7:0]   tm_ted_reg1  ,
output wire     [7:0]   tm_ted_reg2  ,
output wire     [7:0]   tm_pll_reg0  ,
output wire     [7:0]   tm_pll_reg1  ,
output wire     [7:0]   tm_pll_reg2  ,
output wire     [7:0]   tm_pll_reg3  ,
output wire     [7:0]   tm_pll_reg4  ,
output wire     [7:0]   tm_pll_reg5  ,
output wire     [7:0]   tm_pll_reg6  ,
output wire     [7:0]   tm_pll_reg7  ,
output wire     [7:0]   tm_pll_reg8  ,
output wire     [7:0]   tm_pll_reg9  ,
output wire     [7:0]   tm_pll_reg10 ,
output wire     [7:0]   tm_cdr_reg0  ,
output wire     [7:0]   tm_cdr_reg1  ,
output wire     [7:0]   tm_cdr_reg2  ,
output wire     [7:0]   tm_cdr_reg3  , 
output wire     [7:0]   tm_cdr_reg4  ,
output wire     [7:0]   tm_cdr_reg5  ,
output wire     [7:0]   tm_cdr_reg6  ,  
output  wire    [1:0]   tm_idpullup,
output  wire    [2:0]   tm_timeout_value,        
output  wire            tm_timeout_all_enable,   
output  wire            tm_timeout_enable,       
output  wire            tm_hs_sync_conf,         
output  wire    [3:0]   tm_txvalid_ungate,
output  wire    [3:0]   tm_spare_out,
output  wire            tm_serx_en_cntrl_opmode01,
output  wire            tm_hs_rx_err_reg,
output  wire            tm_linestate_fs_cnt_en,  
output  wire            tm_linestate_ls_cnt_en,  
output  wire    [7:0]   tm_linestate_ls_cnt,     
output  wire    [4:0]   tm_linestate_fs_cnt,     
output  wire    [5:0]   tm_hsrx_reg1,            
output  wire    [7:0]   tm_hsrx_reg2,            
output  wire    [7:0]   tm_hstx_reg1,            
output  wire    [7:0]   tm_hstx_reg2,            
output  wire    [7:0]   tm_hstx_reg3,            
output  wire    [7:0]   tm_lsfs_rx_reg,          
output  wire            tm_pll_clkon,
output  wire            pll_standalone_testmuxed,
output  wire    [7:0]   tm_lsfs_tx_reg1,         
output  wire    [5:0]   tm_lsfs_tx_reg2,         
output  wire    [7:0]   tm_afe_common_reg1,      
output  wire    [7:0]   tm_afe_common_reg2,      
output  wire    [3:0]   tm_afe_common_reg3,      
output  wire    [7:0]   tm_pll_reg11,            
output  wire    [7:0]   tm_pll_reg12,            
output  wire    [7:0]   tm_pll_reg13,            
output  wire    [7:0]   tm_pll_reg14,            
output  wire    [2:0]   tm_ana_powerup,
output  wire    [1:0]   tm_clipper_en,
output  wire    [1:0]   tm_hostdiscon_rst_reg,
output  wire    [4:0]   tm_tx_sq_cnt,
output  wire    [5:0]   tm_calib_rstn_dt,
output  wire    [7:0]   tm_ana_block_en,
output  wire    [6:0]   tm_clk_gate_ovr,
output  wire            tm_clk_gate_mask,
output  wire    [2:0]   tm_hs_sof_reg,
output  wire    [7:0]   tm_fs_preamble,
output  wire            tm_fs_preamble_en,
output  wire            tm_fs_eop_se0_en,
output  wire            tm_ls_eop_se0_en,
output  wire    [1:0]   tm_eop_se0_fs, tm_serx_bias_en,
output  wire    [5:0]   tm_eop_se0_ls,
output  wire    [2:0]   tm_squelch_count_idle,
output  wire    [3:0]   debug_bc_state,
output  wire            bc_delay_cnt_reached_10us,
output  wire            bc_delay_reached,
output  wire    [7:0]   tm_hscalib_offset,
output  wire    [7:0]   tm_fscalib_offset,
output  wire    [7:0]   tm_bccalib_offset,
output  wire    [6:0]   tm_hscalib,
output  wire    [6:0]   tm_fscalib,
output  wire    [6:0]   tm_bccalib,
input   wire            interrupt_in,
output  wire            interrupt_reg1_isr_out
);
wire [7:0] afe_bg_reg4_bg_ana_reg4_in;
wire [7:0] afe_calib_reg1_calib_ana_reg1_in;
wire [7:0] afe_bc_reg7_bc_ana_reg7_in;
wire [7:0] afe_pll_reg6_pll_ana_reg6_in;
wire [7:0] afe_tx_reg13_tx_ana_reg13_in;
wire [7:0] afe_tx_reg14_tx_ana_reg14_in;
wire [7:0] afe_rx_reg7_rx_ana_reg7_in;
wire [7:0] afe_rx_reg8_rx_ana_reg8_in;
wire [7:0] afe_unused_reg0_unused_out;
wire [7:0] afe_unused_reg1_unused_out;
wire [7:0] afe_unused_reg2_unused_out;
wire [7:0] afe_unused_reg3_unused_out;
wire [7:0] pll_unused_reg0;
wire [7:0] pll_unused_reg1;
wire [7:0] pll_unused_reg2;
wire       calib_reg1_unused_out;
wire [7:0] cdr_reg7_unused_out;
wire [7:0] cdr_reg8_unused_out;
wire [3:0] bc_reg0_unused_out;
wire       bc_reg7_unused_out;
wire [6:0] dig_unused_reg0_unused_out;
wire [4:0] dig_unused_reg1_unused_out;
wire [7:0] dig_unused_reg3_unused_out;
wire [7:0] dig_txrx_unused_reg0_unused_out;
wire [7:0] dig_txrx_unused_reg1_unused_out;
wire [7:0] dig_txrx_unused_reg2_unused_out;
wire [7:0] dig_txrx_unused_reg3_unused_out;
wire [3:0] tx_reg0_unused_out;
wire [7:0] utmi_unused_reg0_unused_out; 
wire [7:0] utmi_unused_reg1_unused_out;
wire [7:0] utmi_unused_reg2_unused_out;
wire [7:0] utmi_unused_reg3_unused_out;
wire [7:0] utmi_unused_reg4_unused_out;
wire [7:0] utmi_unused_reg5_unused_out;
wire [7:0] utmi_reg16_unused_out;
wire       utmi_reg18_unused_out;
wire [6:0] utmi_reg19_unused_out;
wire       utmi_reg25_unused_out;
wire       utmi_reg26_unused_out;
wire       utmi_reg27_unused_out;
wire [5:0] utmi_reg28_unused_out;
wire [1:0] utmi_reg29_unused_out;
wire [5:0] rx_reg4_unused_in;
wire [5:0] tx_reg4_unused_in;
wire [5:0] utmi_reg29_unused_in;
wire [7:0] utmi_reg39_unused_in;
wire [7:0] utmi_reg40_unused_in;
wire       utmi_reg46_unused_in;
wire       utmi_reg53_unused_in;
wire [4:0] utmi_reg54_unused_in;
wire       utmi_reg55_unused_in;
wire [7:0] utmi_unused_reg6_unused_in;
wire [7:0] utmi_unused_reg7_unused_in;
wire       adp_en_out;
wire       adp_en_en_out;
wire       id_pullup_out;
wire       id_pullup_en_out;
wire       adp_source_i_en_out;
wire       adp_source_i_en_ctrl_out;
wire       adp_sink_i_en_out;
wire       adp_sink_i_en_ctrl_out;
wire       adp_sense_en_out;
wire       adp_sense_en_ctrl_out;
wire       adp_probe_en_out;
wire       adp_probe_en_ctrl_out;
wire       idm_sink_en_value_out;
wire       idm_sink_en_cntrl_out;
wire       idp_sink_en_value_out;
wire       idp_sink_en_cntrl_out;
wire       idp_src_en_value_out;
wire       idp_src_en_cntrl_out;
wire       bc_en_value_out;
wire       bc_en_cntrl_out;
wire       dm_vdat_ref_comp_en_value_out;
wire       dm_vdat_ref_comp_en_cntrl_out;
wire       dp_vdat_ref_comp_en_value_out;
wire       dp_vdat_ref_comp_en_cntrl_out;
wire       vdp_src_en_value_out;
wire       vdp_src_en_cntrl_out;
wire       vdm_src_en_value_out;
wire       vdm_src_en_cntrl_out;
wire       rid_a_ref_en_value_out;
wire       rid_a_ref_en_cntrl_out;
wire       rid_float_ref_en_value_out;
wire       rid_float_ref_en_cntrl_out;
wire       rid_nonfloat_comp_en_value_out;
wire       rid_nonfloat_comp_en_cntrl_out;
wire       rid_float_comp_en_value_out;
wire       rid_float_comp_en_cntrl_out;
wire       rid_b_c_comp_en_value_out;
wire       rid_b_c_comp_en_cntrl_out;
wire       rid_a_comp_en_value_out;
wire       rid_a_comp_en_cntrl_out;
wire       rid_c_ref_en_value_out;
wire       rid_c_ref_en_cntrl_out;
wire       rid_b_ref_en_value_out;
wire       rid_b_ref_en_cntrl_out;
wire       dm_current_src_en_value_out;
wire       dm_current_src_en_cntrl_out;
wire       dm_vlgc_comp_en_value_out;
wire       dm_vlgc_comp_en_cntrl_out;
wire       rid_nonfloat_src_en_value_out;
wire       rid_nonfloat_src_en_cntrl_out;
wire       rid_float_src_en_value_out;
wire       rid_float_src_en_cntrl_out;
wire       reset_cntrl_out;
wire       bc_reg8_dcd_comp_in;
wire [1:0] bc_reg8_unused_in;
wire       bc_reg9_o_dm_vdat_ref_comp_en_in;
wire       bc_reg9_o_dp_vdat_ref_comp_en_in;
wire       bc_reg9_o_vdm_src_en_in;
wire       bc_reg9_o_vdp_src_en_in;
wire       bc_reg9_o_idm_sink_en_in;
wire       bc_reg9_o_idp_sink_en_in;
wire       bc_reg9_o_idp_src_en_in;
wire       bc_reg9_o_bc_en_in;
wire       bc_reg10_o_rid_b_c_comp_en_in;
wire       bc_reg10_o_rid_a_comp_en_in;
wire       bc_reg10_o_rid_c_ref_en_in;
wire       bc_reg10_o_rid_b_ref_en_in;
wire       bc_reg10_o_rid_a_ref_en_in;
wire       bc_reg10_o_rid_float_ref_en_in;
wire       bc_reg10_o_rid_nonfloat_src_en_in;
wire       bc_reg10_o_rid_float_src_en_in;
wire       bc_reg11_o_idm_src_en_in;
wire       bc_reg12_rid_gnd_comp_sts_in;
wire       bc_reg12_rid_float_comp_sts_in;
wire       bc_reg12_rid_c_comp_sts_in;
wire       bc_reg12_rid_b_comp_sts_in;
wire       bc_reg12_rid_a_comp_sts_in;
wire       bc_reg12_dm_vlgc_comp_sts_in;
wire       bc_reg12_dm_vdat_ref_comp_sts_in;
wire       bc_reg12_dp_vdat_ref_comp_sts_in;
wire       fsls_timeout_en;
wire       hs_sync_det_bits_out;
wire       fs_eop_se0_en_out;
wire       ls_eop_se0_en_out;
wire       fs_no_eop_timeout_en_out;
wire       fs_preamble_en_out;
wire [1:0] loopback_sel_out;
wire       loopback_en_out;
wire [3:0] bist_mode_sel_out;
wire       bist_en_out;
wire [1:0] bist_err_out;
wire       bist_soft_rst_out;
wire       tx_lsfs_soft_rst_out;
wire       tx_hs_soft_rst_out;
wire       rx_cntrl_soft_rst_out;
wire       shift_reg_soft_rst_out;
wire       bitunstuff_soft_rst_out;
wire       nrzi_dec_soft_rst_out;
wire       eop_det_soft_rst_out;
wire       sync_det_soft_rst_out;
wire       lsfs_dll_soft_rst_out;
wire       rx_hs_soft_rst_out;
wire       ls_linestate_fil_en_out;
wire       fs_linestate_fil_en_out;
wire       bist_mode_en_out; 
wire       bist_on_out; 
wire       hstx_boost_deamp_off_out; 
wire       hstx_boost_out; 
wire       hs_samp_out; 
wire       hs_samp_en_out; 
wire       hsrx_out; 
wire       hsrx_en_out;
wire       vbusvalid_cntrl_out;    
wire       vbusvalid_l3_dev_en_out; 
wire [4:0] hs_drven_th_out;
wire       hs_drven_th_en_out;
wire       hstx_bc_mode_out;
wire       hstx_bc_en_out;
wire       hstx_chirp_mode_out;
wire       hstx_chirp_en_out;
wire       hstx_en_del_out;
wire       hstx_en_del_en_out;
wire       hstx_out;
wire       hstx_en_out;
wire       hs_term_out;
wire       hs_term_en_out;
wire       hstx_data_out;
wire       hstx_data_en_out;
wire       hstx_drv_out;
wire       hstx_drv_en_out;
wire       hstx_predrv_out;
wire       hstx_predrv_en_out;
wire       clkoff_en_out;
wire [2:0] sdc_space_out;
wire       sdc_space_en_out;
wire [1:0] hstx_en_del_th_out;
wire       hstx_en_del_th_en_out;
wire       pll_clkon_out;
wire       tm_pll_clkon_out;
wire       pll_clkon_en_out;
wire       bg_pd_bg_ok_out;    
wire       bg_pd_bg_ok_en_out; 
wire       lsfs_serx_out;      
wire       lsfs_serx_en_out;   
wire       lsfs_rx_out;        
wire       lsfs_rx_en_out;     
wire       clean_linestate_serx_mask_en_out;
wire       serx_mask_en_out;
wire [1:0] serx_mask_threshold_out;
wire       fsls_tx_out;
wire       fsls_tx_en_out;
wire       fsls_edgesel_out;
wire       fsls_edgesel_en_out;
wire       fsls_tx_se0_out;
wire       fsls_tx_se0_en_out;
wire       fsls_tx_data_out;
wire       fsls_tx_data_en_out;
wire       fsls_tx_drv_out;
wire       fsls_tx_drv_en_out;
wire       fsls_serialmode_pullup2_out;
wire       fsls_serialmode_pullup2_en_out;
wire       dm_pulldown_out;
wire       dm_pulldown_en_out;
wire       dp_pulldown_out;
wire       dp_pulldown_en_out;
wire       lane_reverse_out;
wire       lane_reverse_en_out;
wire       dm_pullup2_out;
wire       dm_pullup2_en_out;
wire       dp_pullup2_out;
wire       dp_pullup2_en_out;
wire       dm_pullup1_out;
wire       dm_pullup1_en_out;
wire       dp_pullup1_out;
wire       dp_pullup1_en_out;
wire [1:0] txvalid_gate_threshold_fs_out;
wire [1:0] txvalid_gate_threshold_hs_out;
wire       ted_en_value_out;
wire       ted_en_cnt_out;
wire       ed_en_value_out;
wire       ed_en_cnt_out;
wire       pll_standby_out;
wire       pll_standby_en_out;
wire       pll_pd_out;
wire       pll_pd_en_out;
wire       pll_pso_del_out;
wire       pll_pso_del_en_out;
wire       pll_pso_out;
wire       pll_pso_en_out;
wire       pll_ldo_delay_5us_out;
wire [1:0] squelch_count_idle_out;
wire       squelch_count_idle_en_out;
wire [1:0] pll_unused_reg12;
wire       pll_ldo_ref_en_out,
           pll_ldo_ref_en_en_out, pll_ldo_core_en_out, pll_ldo_core_en_en_out, pll_pd_ana_out, pll_pd_ana_en_out;
wire [5:0] pll_ldo_ref_core_out;
wire       pll_ldo_ref_core_en_out;
wire [2:0] pll_ldo_cnt_threshold_out, pll_ldo_iso_cnt_threshold_out;
wire       pll_ldo_cnt_threshold_en_out, pll_ldo_iso_cnt_threshold_en_out;
wire       sleep_value_out;
wire       sleep_en_out;
wire       p3_comp_inv_out;
wire       calib_triger_posedge_out;
wire       auto_cal_enable_n;
wire       absvalid_out;
wire       absvalid_en_out;
wire       vbusvalid_out;
wire       vbusvalid_en_out;
wire       suspendm_out;
wire       suspendm_en_out;
wire       pll_480_clock_gate_ovr_out;
wire       scan_ats_hs_clock_gate_ovr_out;
wire       vco_pll_clock_gate_ovr_out;
wire       dig_div_refclock_gate_ovr_out;
wire       fb_clock_gate_ovr_out;
wire       ana_div_refclock_gate_ovr_out;
wire       hs_clock_gate_ovr_out;
wire       bist_tx_valid;
wire       bist_tx_validh;
wire       bist_soft_rst;
wire       o_bist_on;
wire       o_dm_vlgc_comp_en;
wire       rid_float_ref_en_dig;
wire       rid_a_ref_en_dig;
wire       rid_b_ref_en_dig;
wire       rid_c_ref_en_dig;
wire       rid_float_a_comp_en_dig;
wire       rid_b_c_comp_en_dig;
wire       bc_en_sync;
wire       idp_sink_en_loc;
wire       idm_sink_en_loc;
wire       vdp_src_en_loc;
wire       vdp_src_en_sync;
wire       vdm_src_en_loc;
wire       vdm_src_en_sync;
wire       dp_vdat_ref_comp_en_loc;
wire       dp_vdat_ref_comp_en_sync;
wire       dm_vdat_ref_comp_en_loc;
wire       dm_vdat_ref_comp_en_sync;
wire       hstx_en_delayed_2d;
wire       rid_float_comp_en_dig;
wire       rid_nonfloat_comp_en_dig;
wire       rid_float_comp_en_loc;
wire       rid_nonfloat_comp_en_loc;
wire       bist_on;
wire [7:0] bist_data, bist_datah, prdata_udc;
wire [3:0] debug_r_state_bist_top;
wire [1:0] debug_r_state_rx, debug_r_state_tx;
wire       tm_pll_standalone, tm_pll_standalone_en;
wire [5:0] debug_data_cnt_rx, debug_data_cnt_tx;
wire       debug_inc_data_cnt_rx, debug_inc_data_cnt_tx;
wire [3:0] bist_mode_sel;
wire [5:0] tm_bc_delay;
wire       dft_in_tp1;
wire       scan_reset;
wire       ted_sw_en_out;
wire       w_irsr_in, w_isr_in, interrupt_reg2_imr_out;
wire       interrupt_reg1_irsr_out;
wire [6:0] interrupt_reg2_unused_out;
wire [5:0] interrupt_reg1_unused_out;
assign   afe_bg_reg4_bg_ana_reg4_in       = 8'd0;
assign   afe_calib_reg1_calib_ana_reg1_in = 8'd0;
assign   afe_bc_reg7_bc_ana_reg7_in       = 8'd0;
assign   afe_pll_reg6_pll_ana_reg6_in     = 8'd0;
assign   afe_tx_reg13_tx_ana_reg13_in     = 8'd0;
assign   afe_tx_reg14_tx_ana_reg14_in     = 8'd0;
assign   afe_rx_reg7_rx_ana_reg7_in       = 8'd0;
assign   afe_rx_reg8_rx_ana_reg8_in       = 8'd0;
assign   rx_reg4_unused_in          = 6'd0;
assign   tx_reg4_unused_in          = 6'd0;
assign   utmi_reg29_unused_in       = 6'd0;
assign   utmi_reg39_unused_in       = 8'd0;
assign   utmi_reg40_unused_in       = 8'd0;
assign   utmi_reg46_unused_in       = 1'd0;
assign   utmi_reg53_unused_in       = 1'd0;
assign   utmi_reg54_unused_in       = 5'd0;
assign   utmi_reg55_unused_in       = 1'd0;
assign   utmi_unused_reg6_unused_in = 8'd0;
assign   utmi_unused_reg7_unused_in = 8'd0;
assign   pll_unused_reg2            = 8'd0;
assign tm_idpullup              = {id_pullup_out,id_pullup_en_out};
assign o_adp_en                 = adp_en_en_out ? adp_en_out : adp_en ;
assign o_adp_probe_en           = adp_probe_en_ctrl_out ? adp_probe_en_out : adp_probe_en ;
assign o_adp_sense_en           = adp_sense_en_ctrl_out ? adp_sense_en_out : adp_sense_en ;
assign o_adp_sink_current_en    = adp_sink_i_en_ctrl_out ? adp_sink_i_en_out : adp_sink_en ;
assign o_adp_source_current_en  = adp_source_i_en_ctrl_out ? adp_source_i_en_out : adp_source_en ;
assign o_bc_en                  = bc_en_cntrl_out ? bc_en_value_out : bc_en ;
assign idp_sink_en_loc          = bc_en_sync & (idp_sink_en_cntrl_out ? idp_sink_en_value_out : idp_sink_en) ;
assign idm_sink_en_loc          = bc_en_sync & (idm_sink_en_cntrl_out ? idm_sink_en_value_out : idm_sink_en) ;
assign o_idp_src_en             = bc_en_sync & (idp_src_en_cntrl_out ? idp_src_en_value_out : (~i_lane_reverse & idp_src_en)) ;
assign o_idp_sink_en            = hstx_en_delayed_2d & (i_lane_reverse ? idm_sink_en_loc : idp_sink_en_loc) ;
assign o_idm_sink_en            = hstx_en_delayed_2d & (i_lane_reverse ? idp_sink_en_loc : idm_sink_en_loc) ;
assign vdm_src_en_loc           = (bc_en_sync & (vdm_src_en_cntrl_out ? vdm_src_en_value_out : vdm_src_en)) ;
assign vdp_src_en_loc           = (bc_en_sync & (vdp_src_en_cntrl_out ? vdp_src_en_value_out : vdp_src_en)) ;
assign dp_vdat_ref_comp_en_loc  = (bc_en_sync & (dp_vdat_ref_comp_en_cntrl_out ? dp_vdat_ref_comp_en_value_out : dp_vdat_ref_comp_en)) ;
assign dm_vdat_ref_comp_en_loc  = (bc_en_sync & (dm_vdat_ref_comp_en_cntrl_out ? dm_vdat_ref_comp_en_value_out : dm_vdat_ref_comp_en)) ;
assign rid_float_comp_en_loc    = rid_float_comp_en_cntrl_out ? rid_float_comp_en_value_out : rid_float_comp_en;
assign rid_nonfloat_comp_en_loc = rid_nonfloat_comp_en_cntrl_out ? rid_nonfloat_comp_en_value_out : rid_nonfloat_comp_en;
assign tm_txvalid_ungate        = {txvalid_gate_threshold_fs_out, txvalid_gate_threshold_hs_out};
assign scan_reset = ~reset;
dft_tp_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.WIDTH(1),.SCAN_MUX(0)) c_dft_in_tp1(
.clock        (scan_hsclock),
.reset_n      (scan_reset),
.scan_mode    (1'b0),
.fcn_signal_in(1'b0),
.d_in         (1'b0),
.d_out        (dft_in_tp1)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_debug_reset(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1),
.fcn_signal_in(reset),
.fcn_signal_out(debug_reset)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_udc_bc_calib_rstn(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1),
.fcn_signal_in(udc_bc_calib_rstn),
.fcn_signal_out(debug_udc_bc_calib_rstn)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_bc_vdp_src_en_sync (
.clock          (usb2_calib_clock) ,
.reset_n        (udc_bc_calib_rstn) ,
.d_in           (vdp_src_en_loc) ,
.d_out          (vdp_src_en_sync)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_bc_vdm_src_en_sync (
.clock          (usb2_calib_clock) ,
.reset_n        (udc_bc_calib_rstn) ,
.d_in           (vdm_src_en_loc) ,
.d_out          (vdm_src_en_sync)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_bc_dp_vdat_ref_comp_en_sync (
.clock          (usb2_calib_clock) ,
.reset_n        (udc_bc_calib_rstn) ,
.d_in           (dp_vdat_ref_comp_en_loc) ,
.d_out          (dp_vdat_ref_comp_en_sync)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_bc_dm_vdat_ref_comp_en_sync (
.clock          (usb2_calib_clock) ,
.reset_n        (udc_bc_calib_rstn) ,
.d_in           (dm_vdat_ref_comp_en_loc) ,
.d_out          (dm_vdat_ref_comp_en_sync)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_bc_hstx_en_delayed_sync (
.clock          (usb2_calib_clock) ,
.reset_n        (udc_bc_calib_rstn) ,
.d_in           (i_hstx_en_delayed) ,
.d_out          (hstx_en_delayed_2d)
);
assign bc_hstx_en               = bc_en_sync;
assign o_vdp_src_en             = hstx_en_delayed_2d & (i_lane_reverse ? vdm_src_en_sync : vdp_src_en_sync) ;
assign o_vdm_src_en             = hstx_en_delayed_2d & (i_lane_reverse ? vdp_src_en_sync : vdm_src_en_sync) ;
assign o_dp_vdat_ref_comp_en    = hstx_en_delayed_2d & (i_lane_reverse ? dm_vdat_ref_comp_en_sync : dp_vdat_ref_comp_en_sync) ;
assign o_dm_vdat_ref_comp_en    = hstx_en_delayed_2d & (i_lane_reverse ? dp_vdat_ref_comp_en_sync : dm_vdat_ref_comp_en_sync) ;
assign o_rid_float_ref_en       = bc_en_sync & (rid_float_ref_en_cntrl_out ? rid_float_ref_en_value_out : rid_float_ref_en_dig) ;
assign o_rid_a_ref_en           = bc_en_sync & (rid_a_ref_en_cntrl_out ? rid_a_ref_en_value_out : rid_a_ref_en_dig) ;
assign o_rid_b_ref_en           = bc_en_sync & (rid_b_ref_en_cntrl_out ? rid_b_ref_en_value_out : rid_b_ref_en_dig) ;
assign o_rid_c_ref_en           = bc_en_sync & (rid_c_ref_en_cntrl_out ? rid_c_ref_en_value_out : rid_c_ref_en_dig) ;
assign o_rid_float_a_comp_en    = bc_en_sync & (rid_a_comp_en_cntrl_out ? rid_a_comp_en_value_out : rid_float_a_comp_en_dig) ;
assign o_rid_b_c_comp_en        = bc_en_sync & (rid_b_c_comp_en_cntrl_out ? rid_b_c_comp_en_value_out : rid_b_c_comp_en_dig) ;
assign o_dm_vlgc_comp_en        = bc_en_sync & (dm_vlgc_comp_en_cntrl_out ? dm_vlgc_comp_en_value_out : dm_vlgc_comp_en) ;
assign o_idm_src_en             = bc_en_sync & (dm_current_src_en_cntrl_out ? dm_current_src_en_value_out : ( i_lane_reverse & idp_src_en)) ;
assign o_rid_float_src_en       = bc_en_sync & (rid_float_src_en_cntrl_out ? rid_float_src_en_value_out : rid_float_comp_en_dig) ;
assign o_rid_nonfloat_src_en    = bc_en_sync & (rid_nonfloat_src_en_cntrl_out ? rid_nonfloat_src_en_value_out : rid_nonfloat_comp_en_dig) ;
assign dp_vdat_ref_comp_sts     = (o_dp_vdat_ref_comp_en         & (i_lane_reverse ? i_dm_vdat_ref_comp_sts : i_dp_vdat_ref_comp_sts)) ;
assign dm_vdat_ref_comp_sts     = (o_dm_vdat_ref_comp_en         & (i_lane_reverse ? i_dp_vdat_ref_comp_sts : i_dm_vdat_ref_comp_sts)) ;
assign dcd_comp_sts             = ((o_idp_src_en | o_idm_src_en) & (i_lane_reverse ? i_afe_rxdm_ana : i_afe_rxdp_ana)) ;
assign dm_vlgc_comp_sts         = (o_dm_vlgc_comp_en             & (i_lane_reverse ? i_afe_rxdp_ana : i_afe_rxdm_ana)) ;
assign adp_probe_sts            = i_adp_probe_ana ;
assign adp_sense_sts            = i_adp_sense_ana ;
assign bc_reg8_dcd_comp_in                = dcd_comp_sts;
assign bc_reg8_unused_in                  = 2'd0;
assign bc_reg9_o_dm_vdat_ref_comp_en_in   = o_dm_vdat_ref_comp_en;
assign bc_reg9_o_dp_vdat_ref_comp_en_in   = o_dp_vdat_ref_comp_en;
assign bc_reg9_o_vdm_src_en_in            = o_vdm_src_en;
assign bc_reg9_o_vdp_src_en_in            = o_vdp_src_en;
assign bc_reg9_o_idm_sink_en_in           = o_idm_sink_en;
assign bc_reg9_o_idp_sink_en_in           = o_idp_sink_en;
assign bc_reg9_o_idp_src_en_in            = o_idp_src_en;
assign bc_reg9_o_bc_en_in                 = o_bc_en;
assign bc_reg10_o_rid_b_c_comp_en_in      = o_rid_b_c_comp_en;
assign bc_reg10_o_rid_a_comp_en_in        = o_rid_float_a_comp_en;
assign bc_reg10_o_rid_c_ref_en_in         = o_rid_c_ref_en;
assign bc_reg10_o_rid_b_ref_en_in         = o_rid_b_ref_en;
assign bc_reg10_o_rid_a_ref_en_in         = o_rid_a_ref_en;
assign bc_reg10_o_rid_float_ref_en_in     = o_rid_float_ref_en;
assign bc_reg10_o_rid_nonfloat_src_en_in  = o_rid_nonfloat_src_en;
assign bc_reg10_o_rid_float_src_en_in     = o_rid_float_src_en;
assign bc_reg11_o_idm_src_en_in           = o_idm_src_en;
assign bc_reg12_rid_gnd_comp_sts_in       = rid_gnd_comp_sts;
assign bc_reg12_rid_float_comp_sts_in     = rid_float_comp_sts;
assign bc_reg12_rid_c_comp_sts_in         = rid_c_comp_sts;
assign bc_reg12_rid_b_comp_sts_in         = rid_b_comp_sts;
assign bc_reg12_rid_a_comp_sts_in         = rid_a_comp_sts;
assign bc_reg12_dm_vlgc_comp_sts_in       = dm_vlgc_comp_sts;
assign bc_reg12_dm_vdat_ref_comp_sts_in   = dm_vdat_ref_comp_sts;
assign bc_reg12_dp_vdat_ref_comp_sts_in   = dp_vdat_ref_comp_sts;
udc_bc_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r   c_udc_bc ( 
.usb2_calib_clock               (usb2_calib_clock),              
.udc_calib_rstn                 (udc_bc_calib_rstn),             
.i_bc_en                        (o_bc_en),                       
.i_rid_float_comp_en            (rid_float_comp_en_loc),         
.i_rid_nonfloat_comp_en         (rid_nonfloat_comp_en_loc),      
.i_rid_float_a_comp_sts         (i_rid_float_a_comp_sts),        
.i_rid_b_c_comp_sts             (i_rid_b_c_comp_sts),            
.i_tm_otg_adp_bc_reset_cntrl    (reset_cntrl_out),               
.i_tm_bc_delay                  (tm_bc_delay),
.bc_en                          (bc_en_sync),                    
.o_rid_float_comp_en_dig        (rid_float_comp_en_dig),         
.o_rid_nonfloat_comp_en_dig     (rid_nonfloat_comp_en_dig),      
.o_rid_float_ref_en_dig         (rid_float_ref_en_dig),          
.o_rid_a_ref_en_dig             (rid_a_ref_en_dig),              
.o_rid_b_ref_en_dig             (rid_b_ref_en_dig),              
.o_rid_c_ref_en_dig             (rid_c_ref_en_dig),              
.o_rid_float_a_comp_en_dig      (rid_float_a_comp_en_dig),       
.o_rid_b_c_comp_en_dig          (rid_b_c_comp_en_dig),           
.o_rid_a_comp_sts               (rid_a_comp_sts),                
.o_rid_b_comp_sts               (rid_b_comp_sts),                
.o_rid_c_comp_sts               (rid_c_comp_sts),                
.o_rid_float_comp_sts           (rid_float_comp_sts),            
.o_rid_gnd_comp_sts             (rid_gnd_comp_sts),              
.bc_delay_cnt_reached_10us	(bc_delay_cnt_reached_10us),
.bc_delay_reached		(bc_delay_reached),
.debug_bc_state                 (debug_bc_state)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_tm_lsfs_eop_all_en_sync (
.clock          (i_sieclk) ,
.reset_n        (i_bist_rstn) ,
.d_in           (fsls_timeout_en) ,
.d_out          (tm_timeout_all_enable)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_tm_lsfs_timeout_en_sync (
.clock          (i_sieclk) ,
.reset_n        (i_bist_rstn) ,
.d_in           (fs_no_eop_timeout_en_out) ,
.d_out          (tm_timeout_enable)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_tm_hs_sync_conf_sync (
.clock          (i_sieclk) ,
.reset_n        (i_bist_rstn) ,
.d_in           (hs_sync_det_bits_out) ,
.d_out          (tm_hs_sync_conf)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_tm_fs_eop_se0_en_sync (
.clock          (i_sieclk) ,
.reset_n        (i_bist_rstn) ,
.d_in           (fs_eop_se0_en_out) ,
.d_out          (tm_fs_eop_se0_en)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_tm_ls_eop_se0_en_sync (
.clock          (i_sieclk) ,
.reset_n        (i_bist_rstn) ,
.d_in           (ls_eop_se0_en_out) ,
.d_out          (tm_ls_eop_se0_en)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_tm_fs_preamble_en_sync (
.clock          (i_sieclk) ,
.reset_n        (i_bist_rstn) ,
.d_in           (fs_preamble_en_out) ,
.d_out          (tm_fs_preamble_en)
);
assign o_bist_mode_en      = bist_en_out ? bist_mode_en_out  : i_bist_mode_en;
assign bist_on             = bist_en_out ? bist_on_out       : i_bist_on ;
assign bist_mode_sel       = bist_en_out ? bist_mode_sel_out : i_bist_mode_sel[3:0] ;
assign bist_soft_rst       = bist_en_out ? bist_soft_rst_out : 1'b0 ;
assign bist_hostdevice_sel = bist_mode_sel[1];
assign bist_speed_sel      = bist_mode_sel[0];
assign bist_interface_sel  = bist_mode_sel[3];
assign loopback_ls  = loopback_en_out ? (loopback_sel_out == 2'b 01) : (i_loopback == 2'b 01) ;
assign loopback_fs  = loopback_en_out ? (loopback_sel_out == 2'b 10) : (i_loopback == 2'b 10) ;
assign loopback_hs  = loopback_en_out ? (loopback_sel_out == 2'b 11) : (i_loopback == 2'b 11) ;
assign mux_txvalid  = o_bist_on ? bist_tx_valid          : i_tx_valid ;
assign mux_txvalidh = o_bist_on ? bist_tx_validh         : i_tx_validh ;
assign mux_datain   = o_bist_on ? {bist_datah,bist_data} : i_datain ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_tx_hs_soft_reset_sync (
.clock          (i_sieclk) ,
.reset_n        (i_bist_rstn) ,
.d_in           (tx_hs_soft_rst_out) ,
.d_out          (tx_hs_soft_reset)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_tx_lsfs_soft_reset_sync (
.clock          (i_sieclk) ,
.reset_n        (i_bist_rstn) ,
.d_in           (tx_lsfs_soft_rst_out) ,
.d_out          (tx_lsfs_soft_reset)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_rx_hs_soft_reset_sync (
.clock          (i_sieclk) ,
.reset_n        (i_bist_rstn) ,
.d_in           (rx_hs_soft_rst_out) ,
.d_out          (rx_hs_soft_reset)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_lsfs_dll_soft_reset_sync (
.clock          (i_sieclk) ,
.reset_n        (i_bist_rstn) ,
.d_in           (lsfs_dll_soft_rst_out) ,
.d_out          (lsfs_dll_soft_reset)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_sync_det_soft_reset_sync (
.clock          (i_sieclk) ,
.reset_n        (i_bist_rstn) ,
.d_in           (sync_det_soft_rst_out) ,
.d_out          (sync_det_soft_reset)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_eop_det_soft_reset_sync (
.clock          (i_sieclk) ,
.reset_n        (i_bist_rstn) ,
.d_in           (eop_det_soft_rst_out) ,
.d_out          (eop_det_soft_reset)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_nrzi_dec_soft_reset_sync (
.clock          (i_sieclk) ,
.reset_n        (i_bist_rstn) ,
.d_in           (nrzi_dec_soft_rst_out) ,
.d_out          (nrzi_dec_soft_reset)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_bitunstuff_soft_reset_sync (
.clock          (i_sieclk) ,
.reset_n        (i_bist_rstn) ,
.d_in           (bitunstuff_soft_rst_out) ,
.d_out          (bitunstuff_soft_reset)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_shift_reg_soft_reset_sync (
.clock          (i_sieclk) ,
.reset_n        (i_bist_rstn) ,
.d_in           (shift_reg_soft_rst_out) ,
.d_out          (shift_reg_soft_reset)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_rx_cntrl_soft_reset_sync (
.clock          (i_sieclk) ,
.reset_n        (i_bist_rstn) ,
.d_in           (rx_cntrl_soft_rst_out) ,
.d_out          (rx_cntrl_soft_reset)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_tm_linestate_fs_cnt_en_sync (
.clock          (i_sieclk) ,
.reset_n        (i_bist_rstn) ,
.d_in           (fs_linestate_fil_en_out) ,
.d_out          (tm_linestate_fs_cnt_en)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_tm_linestate_ls_cnt_en_sync (
.clock          (i_sieclk) ,
.reset_n        (i_bist_rstn) ,
.d_in           (ls_linestate_fil_en_out) ,
.d_out          (tm_linestate_ls_cnt_en)
);
assign tm_hsrx_reg1       = {hstx_boost_deamp_off_out, hstx_boost_out, hs_samp_out, hs_samp_en_out, hsrx_out, hsrx_en_out } ;
assign tm_hsrx_reg2       = {vbusvalid_cntrl_out, vbusvalid_l3_dev_en_out, hs_drven_th_out, hs_drven_th_en_out} ;
assign tm_hstx_reg1       = {hstx_bc_mode_out, hstx_bc_en_out, hstx_chirp_mode_out, hstx_chirp_en_out,
                             hstx_en_del_out, hstx_en_del_en_out, hstx_out, hstx_en_out} ;
assign tm_hstx_reg2       = {hs_term_out, hs_term_en_out, hstx_data_out, hstx_data_en_out,
                             hstx_drv_out, hstx_drv_en_out, hstx_predrv_out, hstx_predrv_en_out} ;
assign tm_hstx_reg3       = {ted_sw_en_out, sdc_space_out[2:0], sdc_space_en_out, hstx_en_del_th_out[1:0], hstx_en_del_th_en_out} ;
assign tm_lsfs_rx_reg     = {bg_pd_bg_ok_out, bg_pd_bg_ok_en_out, bg_pd_bg_ok_out, bg_pd_bg_ok_en_out,
                             lsfs_serx_out, lsfs_serx_en_out, lsfs_rx_out, lsfs_rx_en_out};
assign tm_lsfs_tx_reg1    = {clean_linestate_serx_mask_en_out, serx_mask_en_out, serx_mask_threshold_out,
                             fsls_tx_out, fsls_tx_en_out, fsls_edgesel_out,fsls_edgesel_en_out};
assign tm_lsfs_tx_reg2    = {fsls_tx_data_out, fsls_tx_data_en_out, fsls_tx_se0_out, fsls_tx_se0_en_out,
                             fsls_tx_drv_out, fsls_tx_drv_en_out} ;
assign tm_afe_common_reg1 = {fsls_serialmode_pullup2_out, fsls_serialmode_pullup2_en_out, dm_pulldown_out, dm_pulldown_en_out,
                             dp_pulldown_out, dp_pulldown_en_out, lane_reverse_out, lane_reverse_en_out} ;
assign tm_afe_common_reg2 = {dm_pullup2_out, dm_pullup2_en_out, dp_pullup2_out, dp_pullup2_en_out,
                             dm_pullup1_out, dm_pullup1_en_out, dp_pullup1_out, dp_pullup1_en_out} ;
assign tm_afe_common_reg3 = {ted_en_value_out, ted_en_cnt_out, ed_en_value_out, ed_en_cnt_out} ;
assign tm_pll_reg11       = {pll_standby_out, pll_standby_en_out, pll_pd_out, pll_pd_en_out,
                             pll_pso_del_out, pll_pso_del_en_out, pll_pso_out, pll_pso_en_out};
assign tm_pll_reg12       = {pll_unused_reg12, pll_ldo_ref_en_out, pll_ldo_ref_en_en_out,
                             pll_ldo_core_en_out, pll_ldo_core_en_en_out, pll_pd_ana_out, pll_pd_ana_en_out};
assign tm_pll_reg13       = {tm_pll_clkon_out, pll_ldo_ref_core_out, pll_ldo_ref_core_en_out};
assign tm_pll_reg14       = {pll_ldo_cnt_threshold_out, pll_ldo_cnt_threshold_en_out, pll_ldo_iso_cnt_threshold_out, pll_ldo_iso_cnt_threshold_en_out};
assign tm_squelch_count_idle = {squelch_count_idle_out, squelch_count_idle_en_out};
assign tm_ana_block_en    = {calib_triger_posedge_out, auto_cal_enable_n, absvalid_out, absvalid_en_out,
                             vbusvalid_out, vbusvalid_en_out, suspendm_out, suspendm_en_out} ;
assign tm_clk_gate_ovr    = {pll_480_clock_gate_ovr_out, scan_ats_hs_clock_gate_ovr_out, vco_pll_clock_gate_ovr_out, dig_div_refclock_gate_ovr_out,
                             fb_clock_gate_ovr_out, ana_div_refclock_gate_ovr_out, hs_clock_gate_ovr_out };
assign o_sleepm                 = sleep_en_out         ? sleep_value_out   : sleepm ;
assign tm_pll_clkon             = pll_clkon_en_out     ? pll_clkon_out     : pll_clkon ;
assign pll_standalone_testmuxed = tm_pll_standalone_en ? tm_pll_standalone : pll_standalone;
assign w_isr_in  = ~interrupt_reg2_imr_out & interrupt_in;
assign w_irsr_in = interrupt_in;
udc_bist_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_bist_top(
  .i_rstn                       (i_bist_rstn),
  .refclock                     (refclock),
  .i_sieclk                     (i_sieclk),
  .i_databus                    (i_databus),
  .i_bist_on                    (bist_on),
  .i_bist_mode_sel              (bist_mode_sel[0]),
  .i_err_inj_en                 (bist_mode_sel[2]),
  .i_soft_rst                   (bist_soft_rst),
  .i_tx_ready                   (i_tx_ready),
  .i_rx_data                    (i_rx_data),
  .i_rx_datah                   (i_rx_datah),
  .i_rx_valid                   (i_rx_valid),
  .i_rx_validh                  (i_rx_validh),
  .i_rx_active                  (i_rx_active),
  .i_bist_ana_powerup           (bist_ana_powerup),
  .i_rstn_bist_mode             (rstn_bist_mode),
  .o_bist_data                  (bist_data),
  .o_bist_datah                 (bist_datah),
  .o_bist_tx_valid              (bist_tx_valid),
  .o_bist_tx_validh             (bist_tx_validh),
  .o_bist_complete              (o_bist_complete),
  .o_bist_error                 (o_bist_error),
  .o_bist_on                    (o_bist_on),
  .o_bist_on_pulse              (o_bist_on_pulse),
  .o_bist_mux_resets            (o_bist_mux_resets),
  .o_bg_pd_toggle               (o_bg_pd_toggle),
  .o_bist_error_count           (o_bist_error_count),
  .i_err_inj_packet_sel         (bist_err_out),
  .debug_r_state_bist_top       (debug_r_state_bist_top),
  .debug_r_state_rx             (debug_r_state_rx),
  .debug_data_cnt_rx            (debug_data_cnt_rx),
  .debug_inc_data_cnt_rx        (debug_inc_data_cnt_rx),
  .debug_r_state_tx             (debug_r_state_tx),
  .debug_data_cnt_tx            (debug_data_cnt_tx),
  .debug_inc_data_cnt_tx        (debug_inc_data_cnt_tx)
);
apb_slave_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_apb_interface(
.reg_rdata_mux_out_i (prdata_udc),
.PRDATA              (prdata),
.PSLVERR             (pslverr),
.PREADY              (pready),
.PWRITE              (pwrite),
.PSELx               (pselx),
.PENABLE             (penable),
.PCLK                (pclk),
.PRESETn             (presetn)
);
udc_testmode_reg_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_test_regs (
  .AFE_BG_REG0_bg_ana_reg0_OUT                 (o_afe_bg_reg0),
  .AFE_BG_REG1_bg_ana_reg1_OUT                 (o_afe_bg_reg1),
  .AFE_BG_REG2_bg_ana_reg2_OUT                 (o_afe_bg_reg2),
  .AFE_BG_REG3_bg_ana_reg3_OUT                 (o_afe_bg_reg3),
  .AFE_CALIB_REG0_calib_ana_reg0_OUT           (o_afe_calib_reg0),
  .AFE_BC_REG0_bc_ana_reg0_OUT                 (o_afe_bc_reg0),
  .AFE_BC_REG1_bc_ana_reg1_OUT                 (o_afe_bc_reg1),
  .AFE_BC_REG2_bc_ana_reg2_OUT                 (o_afe_bc_reg2),
  .AFE_BC_REG3_bc_ana_reg3_OUT                 (o_afe_bc_reg3),
  .AFE_BC_REG4_bc_ana_reg4_OUT                 (o_afe_bc_reg4),
  .AFE_BC_REG5_bc_ana_reg5_OUT                 (o_afe_bc_reg5),
  .AFE_BC_REG6_bc_ana_reg6_OUT                 (o_afe_bc_reg6),
  .AFE_PLL_REG0_afe_pll_reg0_OUT               (o_afe_pll_reg0),
  .AFE_PLL_REG1_afe_pll_reg1_OUT               (o_afe_pll_reg1),
  .AFE_PLL_REG2_afe_pll_reg2_OUT               (o_afe_pll_reg2),
  .AFE_PLL_REG3_afe_pll_reg3_OUT               (o_afe_pll_reg3),
  .AFE_PLL_REG4_afe_pll_reg4_OUT               (o_afe_pll_reg4),
  .AFE_PLL_REG5_afe_pll_reg5_OUT               (o_afe_pll_reg5),
  .AFE_BG_REG4_bg_ana_reg4_IN                  (afe_bg_reg4_bg_ana_reg4_in),
  .AFE_CALIB_REG1_calib_ana_reg1_IN            (afe_calib_reg1_calib_ana_reg1_in),
  .AFE_BC_REG7_bc_ana_reg7_IN                  (afe_bc_reg7_bc_ana_reg7_in),
  .AFE_PLL_REG6_pll_ana_reg6_IN                (afe_pll_reg6_pll_ana_reg6_in),
  .AFE_UNUSED_REG2_unused_OUT                  (afe_unused_reg2_unused_out),
  .AFE_UNUSED_REG3_unused_OUT                  (afe_unused_reg3_unused_out),
  .AFE_TX_REG0_tx_ana_reg0_OUT                 (o_afe_tx_reg0),
  .AFE_TX_REG1_tx_ana_reg1_OUT                 (o_afe_tx_reg1),
  .AFE_TX_REG2_tx_ana_reg2_OUT                 (o_afe_tx_reg2),
  .AFE_TX_REG3_tx_ana_reg3_OUT                 (o_afe_tx_reg3),
  .AFE_TX_REG4_tx_ana_reg4_OUT                 (o_afe_tx_reg4),
  .AFE_TX_REG5_tx_ana_reg5_OUT                 (o_afe_tx_reg5),
  .AFE_TX_REG6_tx_ana_reg6_OUT                 (o_afe_tx_reg6),
  .AFE_TX_REG7_tx_ana_reg7_OUT                 (o_afe_tx_reg7),
  .AFE_TX_REG8_tx_ana_reg8_OUT                 (o_afe_tx_reg8),
  .AFE_TX_REG9_tx_ana_reg9_OUT                 (o_afe_tx_reg9),
  .AFE_TX_REG10_tx_ana_reg10_OUT               (o_afe_tx_reg10),
  .AFE_TX_REG11_tx_ana_reg11_OUT               (o_afe_tx_reg11),
  .AFE_TX_REG12_tx_ana_reg12_OUT               (o_afe_tx_reg12),
  .AFE_RX_REG0_rx_ana_reg0_OUT                 (o_afe_rx_reg0),
  .AFE_RX_REG1_rx_ana_reg1_OUT                 (o_afe_rx_reg1),
  .AFE_RX_REG2_rx_ana_reg2_OUT                 (o_afe_rx_reg2),
  .AFE_RX_REG3_rx_ana_reg3_OUT                 (o_afe_rx_reg3),
  .AFE_RX_REG4_rx_ana_reg4_OUT                 (o_afe_rx_reg4),
  .AFE_RX_REG5_rx_ana_reg5_OUT                 (o_afe_rx_reg5),
  .AFE_RX_REG6_rx_ana_reg6_OUT                 (o_afe_rx_reg6),
  .AFE_TX_REG13_tx_ana_reg13_IN                (afe_tx_reg13_tx_ana_reg13_in),
  .AFE_TX_REG14_tx_ana_reg14_IN                (afe_tx_reg14_tx_ana_reg14_in),
  .AFE_RX_REG7_rx_ana_reg7_IN                  (afe_rx_reg7_rx_ana_reg7_in),
  .AFE_RX_REG8_rx_ana_reg8_IN                  (afe_rx_reg8_rx_ana_reg8_in),
  .AFE_UNUSED_REG0_unused_OUT                  (afe_unused_reg0_unused_out),
  .AFE_UNUSED_REG1_unused_OUT                  (afe_unused_reg1_unused_out),
  .CALIB_REG0_calib_clk_OUT                    (tm_calib_clk_ovr[1]),
  .CALIB_REG0_calib_clk_en_OUT                 (tm_calib_clk_ovr[0]),
  .CALIB_REG0_comp_out_OUT                     (tm_calib_cmp_override),
  .CALIB_REG0_init_wait_ovr_OUT                (tm_calib_init_wait_ovr),
  .CALIB_REG0_init_wait_ovr_en_OUT             (tm_calib_init_wait_ovr_en),
  .CALIB_REG1_unused_OUT                       (calib_reg1_unused_out),
  .CALIB_REG1_calib_code_OUT                   (tm_res_calib_code[6:1]),
  .CALIB_REG1_calib_code_en_OUT                (tm_res_calib_code[0]),
  .BC_REG0_unused_OUT                          (bc_reg0_unused_out),
  .BC_REG0_adp_en_OUT                          (adp_en_out),
  .BC_REG0_adp_en_en_OUT                       (adp_en_en_out),
  .BC_REG0_id_pullup_OUT                       (id_pullup_out),
  .BC_REG0_id_pullup_en_OUT                    (id_pullup_en_out),
  .BC_REG1_ADP_source_I_en_OUT                 (adp_source_i_en_out),
  .BC_REG1_ADP_source_I_en_ctrl_OUT            (adp_source_i_en_ctrl_out),
  .BC_REG1_ADP_sink_I_en_OUT                   (adp_sink_i_en_out),
  .BC_REG1_ADP_sink_I_en_ctrl_OUT              (adp_sink_i_en_ctrl_out),
  .BC_REG1_ADP_sense_en_OUT                    (adp_sense_en_out),
  .BC_REG1_ADP_sense_en_ctrl_OUT               (adp_sense_en_ctrl_out),
  .BC_REG1_ADP_probe_en_OUT                    (adp_probe_en_out),
  .BC_REG1_ADP_probe_en_ctrl_OUT               (adp_probe_en_ctrl_out),
  .BC_REG2_idm_sink_en_value_OUT               (idm_sink_en_value_out),
  .BC_REG2_idm_sink_en_cntrl_OUT               (idm_sink_en_cntrl_out),
  .BC_REG2_idp_sink_en_value_OUT               (idp_sink_en_value_out),
  .BC_REG2_idp_sink_en_cntrl_OUT               (idp_sink_en_cntrl_out),
  .BC_REG2_idp_src_en_value_OUT                (idp_src_en_value_out),
  .BC_REG2_idp_src_en_cntrl_OUT                (idp_src_en_cntrl_out),
  .BC_REG2_bc_en_value_OUT                     (bc_en_value_out),
  .BC_REG2_bc_en_cntrl_OUT                     (bc_en_cntrl_out),
  .BC_REG3_dm_vdat_ref_comp_en_value_OUT       (dm_vdat_ref_comp_en_value_out),
  .BC_REG3_dm_vdat_ref_comp_en_cntrl_OUT       (dm_vdat_ref_comp_en_cntrl_out),
  .BC_REG3_dp_vdat_ref_comp_en_value_OUT       (dp_vdat_ref_comp_en_value_out),
  .BC_REG3_dp_vdat_ref_comp_en_cntrl_OUT       (dp_vdat_ref_comp_en_cntrl_out),
  .BC_REG3_vdp_src_en_value_OUT                (vdp_src_en_value_out),
  .BC_REG3_vdp_src_en_cntrl_OUT                (vdp_src_en_cntrl_out),
  .BC_REG3_vdm_src_en_value_OUT                (vdm_src_en_value_out),
  .BC_REG3_vdm_src_en_cntrl_OUT                (vdm_src_en_cntrl_out),
  .BC_REG4_rid_a_ref_en_value_OUT              (rid_a_ref_en_value_out),
  .BC_REG4_rid_a_ref_en_cntrl_OUT              (rid_a_ref_en_cntrl_out),
  .BC_REG4_rid_float_ref_en_value_OUT          (rid_float_ref_en_value_out),
  .BC_REG4_rid_float_ref_en_cntrl_OUT          (rid_float_ref_en_cntrl_out),
  .BC_REG4_rid_nonfloat_comp_en_value_OUT      (rid_nonfloat_comp_en_value_out),
  .BC_REG4_rid_nonfloat_comp_en_cntrl_OUT      (rid_nonfloat_comp_en_cntrl_out),
  .BC_REG4_rid_float_comp_en_value_OUT         (rid_float_comp_en_value_out),
  .BC_REG4_rid_float_comp_en_cntrl_OUT         (rid_float_comp_en_cntrl_out),
  .BC_REG5_rid_b_c_comp_en_value_OUT           (rid_b_c_comp_en_value_out),
  .BC_REG5_rid_b_c_comp_en_cntrl_OUT           (rid_b_c_comp_en_cntrl_out),
  .BC_REG5_rid_a_comp_en_value_OUT             (rid_a_comp_en_value_out),
  .BC_REG5_rid_a_comp_en_cntrl_OUT             (rid_a_comp_en_cntrl_out),
  .BC_REG5_rid_c_ref_en_value_OUT              (rid_c_ref_en_value_out),
  .BC_REG5_rid_c_ref_en_cntrl_OUT              (rid_c_ref_en_cntrl_out),
  .BC_REG5_rid_b_ref_en_value_OUT              (rid_b_ref_en_value_out),
  .BC_REG5_rid_b_ref_en_cntrl_OUT              (rid_b_ref_en_cntrl_out),
  .BC_REG6_bc_delay_value_OUT                  (tm_bc_delay[5:1]),
  .BC_REG6_bc_delay_en_OUT                     (tm_bc_delay[0]),
  .BC_REG6_DM_vlgc_comp_en_value_OUT           (dm_vlgc_comp_en_value_out),
  .BC_REG6_DM_vlgc_comp_en_cntrl_OUT           (dm_vlgc_comp_en_cntrl_out),
  .BC_REG7_rid_nonfloat_src_en_value_OUT       (rid_nonfloat_src_en_value_out),
  .BC_REG7_rid_nonfloat_src_en_cntrl_OUT       (rid_nonfloat_src_en_cntrl_out),
  .BC_REG7_rid_float_src_en_value_OUT          (rid_float_src_en_value_out),
  .BC_REG7_rid_float_src_en_cntrl_OUT          (rid_float_src_en_cntrl_out),
  .BC_REG7_reset_cntrl_OUT                     (reset_cntrl_out),
  .BC_REG7_DM_current_src_en_value_OUT         (dm_current_src_en_value_out),
  .BC_REG7_DM_current_src_en_cntrl_OUT         (dm_current_src_en_cntrl_out),
  .BC_REG7_unused_OUT                          (bc_reg7_unused_out),
  .TED_REG0_calib_code_up_en_OUT               (tm_ted_reg0[7]),
  .TED_REG0_Delay_value_OUT                    (tm_ted_reg0[6:5]),
  .TED_REG0_delay_en_OUT                       (tm_ted_reg0[4]),
  .TED_REG0_calib_done_OUT                     (tm_ted_reg0[3]),
  .TED_REG0_caliib_done_en_OUT                 (tm_ted_reg0[2]),
  .TED_REG0_comp_out_down_inv_OUT              (tm_ted_reg0[1]),
  .TED_REG0_comp_out_up_inv_OUT                (tm_ted_reg0[0]),
  .TED_REG1_calib_code_down_OUT                (tm_ted_reg1[7:4]),
  .TED_REG1_calib_code_up_OUT                  (tm_ted_reg1[3:0]),
  .TED_REG2_unused_OUT                         (tm_ted_reg2[7:5]),
  .TED_REG2_calib_mode_dn_OUT                  (tm_ted_reg2[4]),
  .TED_REG2_calib_mode_dn_en_OUT               (tm_ted_reg2[3]),
  .TED_REG2_calib_mode_up_OUT                  (tm_ted_reg2[2]),
  .TED_REG2_calib_mode_up_en_OUT               (tm_ted_reg2[1]),
  .TED_REG2_calib_code_dn_en_OUT               (tm_ted_reg2[0]),
  .CALIB_REG2_unused_IN                        (debug_calib[7:4]),
  .CALIB_REG2_calib_cmp_IN                     (debug_calib[3]),
  .CALIB_REG2_calib_pd_IN                      (debug_calib[2]),
  .CALIB_REG2_calib_clock_IN                   (debug_calib[1]),
  .CALIB_REG2_calib_done_IN                    (debug_calib[0]),
  .CALIB_REG3_unused_IN                        (debug_res_calib_code[7:5]),
  .CALIB_REG3_bg_unit_res_calib_IN             (debug_res_calib_code[4:0]),
  .BC_REG8_dcd_comp_IN                         (bc_reg8_dcd_comp_in),
  .BC_REG8_adp_sense_IN                        (i_adp_sense_ana),
  .BC_REG8_adp_probe_IN                        (i_adp_probe_ana),
  .BC_REG8_bvalid_IN                           (i_otgc_bvalid_ana),
  .BC_REG8_vbusvalid_IN                        (i_otgc_vbusvalid_ana),
  .BC_REG8_iddig_IN                            (i_otgc_id_ana),
  .BC_REG8_unused_IN                           (bc_reg8_unused_in),
  .BC_REG9_o_dm_vdat_ref_comp_en_IN            (bc_reg9_o_dm_vdat_ref_comp_en_in),
  .BC_REG9_o_dp_vdat_ref_comp_en_IN            (bc_reg9_o_dp_vdat_ref_comp_en_in),
  .BC_REG9_o_vdm_src_en_IN                     (bc_reg9_o_vdm_src_en_in),
  .BC_REG9_o_vdp_src_en_IN                     (bc_reg9_o_vdp_src_en_in),
  .BC_REG9_o_idm_sink_en_IN                    (bc_reg9_o_idm_sink_en_in),
  .BC_REG9_o_idp_sink_en_IN                    (bc_reg9_o_idp_sink_en_in),
  .BC_REG9_o_idp_src_en_IN                     (bc_reg9_o_idp_src_en_in),
  .BC_REG9_o_bc_en_IN                          (bc_reg9_o_bc_en_in),
  .BC_REG10_o_rid_b_c_comp_en_IN               (bc_reg10_o_rid_b_c_comp_en_in),
  .BC_REG10_o_rid_a_comp_en_IN                 (bc_reg10_o_rid_a_comp_en_in),
  .BC_REG10_o_rid_c_ref_en_IN                  (bc_reg10_o_rid_c_ref_en_in),
  .BC_REG10_o_rid_b_ref_en_IN                  (bc_reg10_o_rid_b_ref_en_in),
  .BC_REG10_o_rid_a_ref_en_IN                  (bc_reg10_o_rid_a_ref_en_in),
  .BC_REG10_o_rid_float_ref_en_IN              (bc_reg10_o_rid_float_ref_en_in),
  .BC_REG10_o_rid_nonfloat_src_en_IN           (bc_reg10_o_rid_nonfloat_src_en_in),
  .BC_REG10_o_rid_float_src_en_IN              (bc_reg10_o_rid_float_src_en_in),
  .BC_REG11_o_idm_src_en_IN                    (bc_reg11_o_idm_src_en_in),
  .BC_REG11_i_afe_rxdp_ana_IN                  (i_afe_rxdp_ana),
  .BC_REG11_i_afe_rxdm_ana_IN                  (i_afe_rxdm_ana),
  .BC_REG11_i_rid_b_c_comp_sts_IN              (i_rid_b_c_comp_sts),
  .BC_REG11_i_rid_a_comp_sts_IN                (i_rid_float_a_comp_sts),
  .BC_REG11_i_dm_vdat_ref_comp_sts_IN          (i_dm_vdat_ref_comp_sts),
  .BC_REG11_i_dp_vdat_ref_comp_sts_IN          (i_dp_vdat_ref_comp_sts),
  .BC_REG11_o_dm_vlgc_comp_en_IN               (o_dm_vlgc_comp_en),
  .BC_REG12_rid_gnd_comp_sts_IN                (bc_reg12_rid_gnd_comp_sts_in),
  .BC_REG12_rid_float_comp_sts_IN              (bc_reg12_rid_float_comp_sts_in),
  .BC_REG12_rid_c_comp_sts_IN                  (bc_reg12_rid_c_comp_sts_in),
  .BC_REG12_rid_b_comp_sts_IN                  (bc_reg12_rid_b_comp_sts_in),
  .BC_REG12_rid_a_comp_sts_IN                  (bc_reg12_rid_a_comp_sts_in),
  .BC_REG12_dm_vlgc_comp_sts_IN                (bc_reg12_dm_vlgc_comp_sts_in),
  .BC_REG12_dm_vdat_ref_comp_sts_IN            (bc_reg12_dm_vdat_ref_comp_sts_in),
  .BC_REG12_dp_vdat_ref_comp_sts_IN            (bc_reg12_dp_vdat_ref_comp_sts_in),
  .TED_REG3_calib_code_down_IN                 (tm_ted_reg3[7:4]),
  .TED_REG3_comparator_down_IN                 (tm_ted_reg3[3]),
  .TED_REG3_calib_done_down_IN                 (tm_ted_reg3[2]),
  .TED_REG3_unused_IN                          (tm_ted_reg3[1:0]),
  .TED_REG4_calib_code_up_IN                   (tm_ted_reg4[7:4]),
  .TED_REG4_comparator_up_IN                   (tm_ted_reg4[3]),
  .TED_REG4_calib_done_up_IN                   (tm_ted_reg4[2]),
  .TED_REG4_unused_IN                          (tm_ted_reg4[1:0]),
  .DIG_UNUSED_REG0_unused_OUT                  ({glitch_filter_en , dig_unused_reg0_unused_out[6:1], set1_dis}),
  .DIG_UNUSED_REG1_unused_OUT                  ({dig_unused_reg1_unused_out, threshold_ovr_value[9:8], threshold_ovr_en}),
  .DIG_UNUSED_REG2_unused_OUT                  (threshold_ovr_value[7:0]),
  .DIG_UNUSED_REG3_unused_OUT                  (dig_unused_reg3_unused_out),
  .INTERRUPT_REG1_irsr_OUT                     (interrupt_reg1_irsr_out),
  .INTERRUPT_REG1_isr_OUT                      (interrupt_reg1_isr_out),
  .INTERRUPT_REG1_unused_OUT                   (interrupt_reg1_unused_out),
  .INTERRUPT_REG2_unused_OUT                   (interrupt_reg2_unused_out),
  .INTERRUPT_REG2_imr_OUT                      (interrupt_reg2_imr_out),
  .i_irsr_in                                   (w_irsr_in),
  .i_isr_in                                    (w_isr_in),
  .RX_REG0_fsls_no_eop_timeout_OUT             (tm_timeout_value),
  .RX_REG0_fsls_timeout_en_OUT                 (fsls_timeout_en),
  .RX_REG0_hs_sync_det_bits_OUT                (hs_sync_det_bits_out),
  .RX_REG0_fs_eop_se0_threshold_OUT            (tm_eop_se0_fs),
  .RX_REG0_fs_eop_se0_en_OUT                   (fs_eop_se0_en_out),
  .RX_REG1_ls_eop_se0_threshold_OUT            (tm_eop_se0_ls),
  .RX_REG1_ls_eop_se0_en_OUT                   (ls_eop_se0_en_out),
  .RX_REG1_fs_no_eop_timeout_en_OUT            (fs_no_eop_timeout_en_out),
  .TX_REG0_unused_OUT                          (tx_reg0_unused_out),
  .TX_REG0_fs_preamble_en_OUT                  (fs_preamble_en_out),
  .TX_REG0_sof_extension_OUT                   (tm_hs_sof_reg[2:1]),
  .TX_REG0_sof_extension_en_OUT                (tm_hs_sof_reg[0]),
  .TX_REG1_preamble_value_OUT                  (tm_fs_preamble),
  .CDR_REG0_unused_OUT                         (tm_cdr_reg0[7:6]),
  .CDR_REG0_pll_clkdiv_OUT                     (tm_cdr_reg0[5:4]),
  .CDR_REG0_pll_clkdiv_en_OUT                  (tm_cdr_reg0[3]),
  .CDR_REG0_squelch_delay_OUT                  (tm_cdr_reg0[2:1]),
  .CDR_REG0_squelch_delay_en_OUT               (tm_cdr_reg0[0]),
  .CDR_REG1_unused_OUT                         (tm_cdr_reg1[7]),
  .CDR_REG1_calib_comp_out_OUT                 (tm_cdr_reg1[6]),
  .CDR_REG1_calib_spc_threshold_OUT            (tm_cdr_reg1[5:3]),
  .CDR_REG1_calib_spc_threshold_en_OUT         (tm_cdr_reg1[2]),
  .CDR_REG1_calib_iteration_OUT                (tm_cdr_reg1[1]),
  .CDR_REG1_dynamic_calib_en_OUT               (tm_cdr_reg1[0]),
  .CDR_REG2_unused_OUT                         (tm_cdr_reg2[7]),
  .CDR_REG2_hsrx_en_del_OUT                    (tm_cdr_reg2[6]),
  .CDR_REG2_hsrx_en_del_en_OUT                 (tm_cdr_reg2[5]),
  .CDR_REG2_hsrx_en_OUT                        (tm_cdr_reg2[4]),
  .CDR_REG2_hsrx_en_en_OUT                     (tm_cdr_reg2[3]),
  .CDR_REG2_calib_clock_OUT                    (tm_cdr_reg2[2]),
  .CDR_REG2_calib_clock_en_OUT                 (tm_cdr_reg2[1]),
  .CDR_REG2_calib_out_en_OUT                   (tm_cdr_reg2[0]),
  .CDR_REG3_calib_active_OUT                   (tm_cdr_reg3[7]),
  .CDR_REG3_calib_done_OUT                     (tm_cdr_reg3[6]),
  .CDR_REG3_calib_code_OUT                     (tm_cdr_reg3[5:0]),
  .CDR_REG4_clk_gate_value_OUT                 (tm_cdr_reg4[7]),
  .CDR_REG4_clk_gate_en_OUT                    (tm_cdr_reg4[6]),
  .CDR_REG4_clk_gate_sq_mask_OUT               (tm_cdr_reg4[5]),
  .CDR_REG4_latency_threshold_OUT              (tm_cdr_reg4[4:3]),
  .CDR_REG4_latency_threshold_en_OUT           (tm_cdr_reg4[2]),
  .CDR_REG4_decision_error_en_OUT              (tm_cdr_reg4[1]),
  .CDR_REG4_filter_en_OUT                      (tm_cdr_reg4[0]),
  .CDR_REG5_unused_OUT                         (tm_cdr_reg5[7:3]),
  .CDR_REG5_sample_5x_en_OUT                   (tm_cdr_reg5[2]),
  .CDR_REG5_small_pulse_OUT                    (tm_cdr_reg5[1]),
  .CDR_REG5_small_pulse_en_OUT                 (tm_cdr_reg5[0]),
  .CDR_REG6_unused_OUT                         (tm_cdr_reg6),
  .CDR_REG7_unused_OUT                         (cdr_reg7_unused_out),
  .CDR_REG8_unused_OUT                         (cdr_reg8_unused_out),
  .RX_REG2_eb_error_IN                         (debug_eb_error),
  .RX_REG2_cdr_error_IN                        (debug_cdr_error),
  .RX_REG2_sync_detected_IN                    (debug_sync_detected),
  .RX_REG2_eop_detected_IN                     (debug_eop_detected),
  .RX_REG2_hs_eop_condition_IN                 (debug_hs_eop_condition),
  .RX_REG2_normal_eop_IN                       (debug_normal_eop),
  .RX_REG2_alignment_error_IN                  (debug_alignment_error),
  .RX_REG2_no_eop_IN                           (debug_no_eop),
  .RX_REG3_hs_eop_detected_IN                  (debug_hs_eop_detected),
  .RX_REG3_se0_validated_IN                    (debug_se0_validated),
  .RX_REG3_lsfs_eop_detected_IN                (debug_lsfs_eop_detected),
  .RX_REG3_bit_unstuff_error_IN                (debug_bitunstuff_error),
  .RX_REG3_rx_state_bitunstuff_IN              (debug_bus_state),
  .RX_REG3_start_flag_IN                       (debug_start_flag),
  .RX_REG4_rxactive_reg_IN                     (debug_rxactive_reg),
  .RX_REG4_deassert_rxactive_reg_IN            (debug_deassert_rxactive_reg),
  .RX_REG4_unused_IN                           (rx_reg4_unused_in),
  .RX_REG5_sie_cnt_upper_IN                    (debug_sie_cnt[11:4]),
  .RX_REG6_phy_cnt_upper_IN                    (debug_phy_cnt[11:4]),
  .RX_REG7_phy_cnt_lower_IN                    (debug_phy_cnt[3:0]),
  .RX_REG7_sie_cnt_lower_IN                    (debug_sie_cnt[3:0]),
  .TX_REG2_tx_hs_state_IN                      (debug_tx_hs_state),
  .TX_REG2_eop_transmitted_IN                  (debug_eop_transmitted),
  .TX_REG2_hs_bitstuff_en_IN                   (debug_hs_bitstuff_en),
  .TX_REG2_resume_eop_IN                       (debug_resume_eop),
  .TX_REG2_remote_wakeup_IN                    (debug_remote_wakeup),
  .TX_REG3_tx_lsfs_state_IN                    (debug_tx_lsfs_state),
  .TX_REG3_pd_state_IN                         (debug_pd_state),
  .TX_REG3_preamble_sent_IN                    (debug_preamble_sent),
  .TX_REG4_unused_IN                           (tx_reg4_unused_in),
  .TX_REG4_lsfs_bitstuff_en_IN                 (debug_lsfs_bitstuff_en),
  .TX_REG4_ls_keep_alive_IN                    (debug_ls_keep_alive),
  .CDR_REG9_UNUSED_IN                          (tm_cdr_reg9[7:3]),
  .CDR_REG9_i_ana_comp_out_IN                  (tm_cdr_reg9[2]),
  .CDR_REG9_sampler_calib_done_IN              (tm_cdr_reg9[1]),
  .CDR_REG9_ana_calib_active_IN                (tm_cdr_reg9[0]),
  .CDR_REG10_unused_IN                         (tm_cdr_reg10[7:6]),
  .CDR_REG10_calib_code_IN                     (tm_cdr_reg10[5:0]),
  .CDR_REG11_small_pulse_IN                    (tm_cdr_reg11[7:4]),
  .CDR_REG11_o_hsrx_rec_dicision_error_IN      (tm_cdr_reg11[3]),
  .CDR_REG11_o_ana_clk_gate_IN                 (tm_cdr_reg11[2]),
  .CDR_REG11_receive_start_IN                  (tm_cdr_reg11[1]),
  .CDR_REG11_i_ana_ted_squelch_IN              (tm_cdr_reg11[0]),
  .CDR_RE12_unused_IN                          (tm_cdr_reg12),
  .DIG_TXRX_UNUSED_REG0_unused_OUT             (dig_txrx_unused_reg0_unused_out),
  .DIG_TXRX_UNUSED_REG1_unused_OUT             (dig_txrx_unused_reg1_unused_out),
  .DIG_TXRX_UNUSED_REG2_unused_OUT             (dig_txrx_unused_reg2_unused_out),
  .DIG_TXRX_UNUSED_REG3_unused_OUT             (dig_txrx_unused_reg3_unused_out),
  .PLL_REG0_initial_wait_time_OUT              (tm_pll_reg0),
  .PLL_REG1_rst_fdbk_div_delay_value_OUT       (tm_pll_reg1[7:3]),
  .PLL_REG1_rst_fdbk_div_delay_en_OUT          (tm_pll_reg1[2]),
  .PLL_REG1_fbdiv_en_OUT                       (tm_pll_reg1[1]),
  .PLL_REG1_initial_wait_time_en_OUT           (tm_pll_reg1[0]),
  .PLL_REG2_unused_OUT                         (tm_pll_reg2[7]),
  .PLL_REG2_vco_settling_time_en_OUT           (tm_pll_reg2[6]),
  .PLL_REG2_vco_settling_time_OUT              (tm_pll_reg2[5:0]),
  .PLL_REG3_fbdiv_value_OUT                    (tm_pll_reg3),
  .PLL_REG4_unused_OUT                         (tm_pll_reg4[7]),
  .PLL_REG4_pll_lock_time_15_OUT               (tm_pll_reg4[6]),
  .PLL_REG4_pd_pfd_value_OUT                   (tm_pll_reg4[5]),
  .PLL_REG4_pd_pfd_en_OUT                      (tm_pll_reg4[4]),
  .PLL_REG4_pll_lock_en_OUT                    (tm_pll_reg4[3]),
  .PLL_REG4_pll_lock_value_OUT                 (tm_pll_reg4[2]),
  .PLL_REG4_coarsedone_en_OUT                  (tm_pll_reg4[1]),
  .PLL_REG4_coarsedone_value_OUT               (tm_pll_reg4[0]),
  .PLL_REG5_startloop_en_4_0_OUT               (tm_pll_reg5[7]),
  .PLL_REG5_startloop_en_5_OUT                 (tm_pll_reg5[6]),
  .PLL_REG5_startloop_5_OUT                    (tm_pll_reg5[5]),
  .PLL_REG5_startloop_4_0_OUT                  (tm_pll_reg5[4:0]),
  .PLL_REG6_unused_OUT                         (tm_pll_reg6[7]),
  .PLL_REG6_coarse_code_sel_OUT                (tm_pll_reg6[6]),
  .PLL_REG6_lsb_error_0p5_OUT                  (tm_pll_reg6[5]),
  .PLL_REG6_big_jump_en_OUT                    (tm_pll_reg6[4]),
  .PLL_REG6_vco_cnt_window_value_OUT           (tm_pll_reg6[3]),
  .PLL_REG6_vco_cnt_window_en_OUT              (tm_pll_reg6[2]),
  .PLL_REG6_rst_fdbk_div_value_OUT             (tm_pll_reg6[1]),
  .PLL_REG6_rst_fdbk_div_en_OUT                (tm_pll_reg6[0]),
  .PLL_REG7_unused_OUT                         (tm_pll_reg7[7:5]),
  .PLL_REG7_refclk_sel_OUT                     (tm_pll_reg7[4:1]),
  .PLL_REG7_refclk_sel_en_OUT                  (tm_pll_reg7[0]),
  .PLL_REG8_coarse_code_OUT                    (tm_pll_reg8),
  .PLL_REG9_coarse_code_OUT                    (tm_pll_reg9[7]),
  .PLL_REG9_V2I_code_en_OUT                    (tm_pll_reg9[6]),
  .PLL_REG9_V2I_code_OUT                       (tm_pll_reg9[5:0]),
  .PLL_REG10_unused_OUT                        (tm_pll_reg10[7]),
  .PLL_REG10_ipdiv_value_OUT                   (tm_pll_reg10[6:2]),
  .PLL_REG10_ipdiv_en_OUT                      (tm_pll_reg10[1]),
  .PLL_REG10_coarse_code_en_OUT                (tm_pll_reg10[0]),
  .PLL_REG11_pll_standby_OUT                   (pll_standby_out),
  .PLL_REG11_pll_standby_en_OUT                (pll_standby_en_out),
  .PLL_REG11_pll_pd_OUT                        (pll_pd_out),
  .PLL_REG11_pll_pd_en_OUT                     (pll_pd_en_out),
  .PLL_REG11_pll_pso_del_OUT                   (pll_pso_del_out),
  .PLL_REG11_pll_pso_del_en_OUT                (pll_pso_del_en_out),
  .PLL_REG11_pll_pso_OUT                       (pll_pso_out),
  .PLL_REG11_pll_pso_en_OUT                    (pll_pso_en_out),
  .PLL_REG12_unused_OUT                        (pll_unused_reg12),
  .PLL_REG12_pll_ldo_ref_en_OUT                (pll_ldo_ref_en_out),
  .PLL_REG12_pll_ldo_ref_en_en_OUT             (pll_ldo_ref_en_en_out),
  .PLL_REG12_pll_ldo_core_en_OUT               (pll_ldo_core_en_out),
  .PLL_REG12_pll_ldo_core_en_en_OUT            (pll_ldo_core_en_en_out),
  .PLL_REG12_pll_pd_ana_OUT                    (pll_pd_ana_out),
  .PLL_REG12_pll_pd_ana_en_OUT                 (pll_pd_ana_en_out),
  .PLL_REG13_pll_clkon_OUT                     (tm_pll_clkon_out),
  .PLL_REG13_pll_ldo_ref_core_OUT              (pll_ldo_ref_core_out),
  .PLL_REG13_pll_ldo_ref_core_en_OUT           (pll_ldo_ref_core_en_out),
  .PLL_REG14_pll_ldo_cnt_threshold_OUT         (pll_ldo_cnt_threshold_out),
  .PLL_REG14_pll_ldo_cnt_threshold_en_OUT      (pll_ldo_cnt_threshold_en_out),
  .PLL_REG14_pll_ldo_iso_cnt_threshold_OUT     (pll_ldo_iso_cnt_threshold_out),
  .PLL_REG14_pll_ldo_iso_cnt_threshold_en_OUT  (pll_ldo_iso_cnt_threshold_en_out),
  .PLL_UNUSED_REG0_unused_OUT                  (pll_unused_reg0),
  .PLL_UNUSED_REG1_unused_OUT                  (pll_unused_reg1),
  .PLL_REG15_pll_lock_IN                       (tm_pll_reg15[7]),
  .PLL_REG15_coarsedone_IN                     (tm_pll_reg15[6]),
  .PLL_REG15_vco_cnt_win_IN                    (tm_pll_reg15[5]),
  .PLL_REG15_rst_fdbk_div_IN                   (tm_pll_reg15[4]),
  .PLL_REG15_unused_IN                         (tm_pll_reg15[3]),
  .PLL_REG15_pd_pfd_IN                         (tm_pll_reg15[2]),
  .PLL_REG15_startloop_IN                      (tm_pll_reg15[1]),
  .PLL_REG15_coarse_code_8_IN                  (tm_pll_reg15[0]),
  .PLL_REG16_coarse_code_IN                    (tm_pll_reg16),
  .PLL_UNUSED_REG2_unused_IN                   (pll_unused_reg2),
  .UTMI_REG0_loopback_sel_OUT                  (loopback_sel_out),
  .UTMI_REG0_loopback_en_OUT                   (loopback_en_out),
  .UTMI_REG0_bist_mode_sel_OUT                 (bist_mode_sel_out),
  .UTMI_REG0_bist_en_OUT                       (bist_en_out),
  .UTMI_REG1_bist_err_OUT                      (bist_err_out),
  .UTMI_REG1_bist_soft_rst_OUT                 (bist_soft_rst_out),
  .UTMI_REG1_tx_lsfs_soft_rst_OUT              (tx_lsfs_soft_rst_out),
  .UTMI_REG1_tx_hs_soft_rst_OUT                (tx_hs_soft_rst_out),
  .UTMI_REG1_clkdiv_soft_rst_OUT               (clkdiv_soft_reset),
  .UTMI_REG1_calib_soft_rst_OUT                (calib_soft_reset),
  .UTMI_REG1_phy_soft_rst_OUT                  (phy_soft_reset),
  .UTMI_REG2_rx_cntrl_soft_rst_OUT             (rx_cntrl_soft_rst_out),
  .UTMI_REG2_shift_reg_soft_rst_OUT            (shift_reg_soft_rst_out),
  .UTMI_REG2_bitunstuff_soft_rst_OUT           (bitunstuff_soft_rst_out),
  .UTMI_REG2_nrzi_dec_soft_rst_OUT             (nrzi_dec_soft_rst_out),
  .UTMI_REG2_eop_det_soft_rst_OUT              (eop_det_soft_rst_out),
  .UTMI_REG2_sync_det_soft_rst_OUT             (sync_det_soft_rst_out),
  .UTMI_REG2_lsfs_dll_soft_rst_OUT             (lsfs_dll_soft_rst_out),
  .UTMI_REG2_rx_hs_soft_rst_OUT                (rx_hs_soft_rst_out),
  .UTMI_REG3_hs_rx_err_OUT                     (tm_hs_rx_err_reg),
  .UTMI_REG3_ls_linestate_fil_en_OUT           (ls_linestate_fil_en_out),
  .UTMI_REG3_fs_linestate_fil_cnt_OUT          (tm_linestate_fs_cnt),
  .UTMI_REG3_fs_linestate_fil_en_OUT           (fs_linestate_fil_en_out),
  .UTMI_REG4_ls_linestate_fil_cnt_OUT          (tm_linestate_ls_cnt),
  .UTMI_REG5_bist_mode_en_OUT                  (bist_mode_en_out),
  .UTMI_REG5_bist_on_OUT                       (bist_on_out),
  .UTMI_REG5_hstx_boost_deamp_off_OUT          (hstx_boost_deamp_off_out),
  .UTMI_REG5_hstx_boost_OUT                    (hstx_boost_out),
  .UTMI_REG5_hs_samp_OUT                       (hs_samp_out),
  .UTMI_REG5_hs_samp_en_OUT                    (hs_samp_en_out),
  .UTMI_REG5_hsrx_OUT                          (hsrx_out),
  .UTMI_REG5_hsrx_en_OUT                       (hsrx_en_out),
  .UTMI_REG6_vbusvalid_cntrl_OUT               (vbusvalid_cntrl_out),
  .UTMI_REG6_vbusvalid_l3_dev_en_OUT           (vbusvalid_l3_dev_en_out),
  .UTMI_REG6_hs_drven_threshold_OUT            (hs_drven_th_out),
  .UTMI_REG6_hs_drven_th_en_OUT                (hs_drven_th_en_out),
  .UTMI_REG7_hstx_bc_mode_OUT                  (hstx_bc_mode_out),
  .UTMI_REG7_hstx_bc_en_OUT                    (hstx_bc_en_out),
  .UTMI_REG7_hstx_chirp_mode_OUT               (hstx_chirp_mode_out),
  .UTMI_REG7_hstx_chirp_en_OUT                 (hstx_chirp_en_out),
  .UTMI_REG7_hstx_en_del_OUT                   (hstx_en_del_out),
  .UTMI_REG7_hstx_en_del_en_OUT                (hstx_en_del_en_out),
  .UTMI_REG7_hstx_OUT                          (hstx_out),
  .UTMI_REG7_hstx_en_OUT                       (hstx_en_out),
  .UTMI_REG8_hs_term_OUT                       (hs_term_out),
  .UTMI_REG8_hs_term_en_OUT                    (hs_term_en_out),
  .UTMI_REG8_hstx_data_OUT                     (hstx_data_out),
  .UTMI_REG8_hstx_data_en_OUT                  (hstx_data_en_out),
  .UTMI_REG8_hstx_drv_OUT                      (hstx_drv_out),
  .UTMI_REG8_hstx_drv_en_OUT                   (hstx_drv_en_out),
  .UTMI_REG8_hstx_predrv_OUT                   (hstx_predrv_out),
  .UTMI_REG8_hstx_predrv_en_OUT                (hstx_predrv_en_out),
  .UTMI_REG9_clkoff_en_OUT                     (tm_clk_gate_mask),
  .UTMI_REG9_sdc_space_OUT                     (sdc_space_out),
  .UTMI_REG9_sdc_space_en_OUT                  (sdc_space_en_out),
  .UTMI_REG9_hstx_en_del_th_OUT                (hstx_en_del_th_out),
  .UTMI_REG9_hstx_en_del_th_en_OUT             (hstx_en_del_th_en_out),
  .UTMI_REG10_pll_clkon_OUT                    (pll_clkon_out),
  .UTMI_REG10_pll_clkon_en_OUT                 (pll_clkon_en_out),
  .UTMI_REG10_bg_pd_bg_ok_OUT                  (bg_pd_bg_ok_out),
  .UTMI_REG10_bg_pd_bg_ok_en_OUT               (bg_pd_bg_ok_en_out),
  .UTMI_REG10_lsfs_serx_OUT                    (lsfs_serx_out),
  .UTMI_REG10_lsfs_serx_en_OUT                 (lsfs_serx_en_out),
  .UTMI_REG10_lsfs_rx_OUT                      (lsfs_rx_out),
  .UTMI_REG10_lsfs_rx_en_OUT                   (lsfs_rx_en_out),
  .UTMI_REG11_clean_linestate_serx_mask_en_OUT (clean_linestate_serx_mask_en_out),
  .UTMI_REG11_serx_mask_en_OUT                 (serx_mask_en_out),
  .UTMI_REG11_serx_mask_threshold_OUT          (serx_mask_threshold_out),
  .UTMI_REG11_lsfs_tx_OUT                      (fsls_tx_out),
  .UTMI_REG11_lsfs_tx_en_OUT                   (fsls_tx_en_out),
  .UTMI_REG11_fsls_edgesel_OUT                 (fsls_edgesel_out),
  .UTMI_REG11_fsls_edgesel_en_OUT              (fsls_edgesel_en_out),
  .UTMI_REG12_serx_bias_en_OUT                 (tm_serx_bias_en),
  .UTMI_REG12_fsls_tx_data_OUT                 (fsls_tx_data_out),
  .UTMI_REG12_fsls_tx_data_en_OUT              (fsls_tx_data_en_out),
  .UTMI_REG12_fsls_tx_se0_OUT                  (fsls_tx_se0_out),
  .UTMI_REG12_fsls_tx_se0_en_OUT               (fsls_tx_se0_en_out),
  .UTMI_REG12_fsls_tx_drv_OUT                  (fsls_tx_drv_out),
  .UTMI_REG12_fsls_tx_drv_en_OUT               (fsls_tx_drv_en_out),
  .UTMI_REG13_fsls_serialmode_pullup2_OUT      (fsls_serialmode_pullup2_out),
  .UTMI_REG13_fsls_serialmode_pullup2_en_OUT   (fsls_serialmode_pullup2_en_out),
  .UTMI_REG13_dm_pulldown_OUT                  (dm_pulldown_out),
  .UTMI_REG13_dm_pulldown_en_OUT               (dm_pulldown_en_out),
  .UTMI_REG13_dp_pulldown_OUT                  (dp_pulldown_out),
  .UTMI_REG13_dp_pulldown_en_OUT               (dp_pulldown_en_out),
  .UTMI_REG13_lane_reverse_OUT                 (lane_reverse_out),
  .UTMI_REG13_lane_reverse_en_OUT              (lane_reverse_en_out),
  .UTMI_REG14_dm_pullup2_OUT                   (dm_pullup2_out),
  .UTMI_REG14_dm_pullup2_en_OUT                (dm_pullup2_en_out),
  .UTMI_REG14_dp_pullup2_OUT                   (dp_pullup2_out),
  .UTMI_REG14_dp_pullup2_en_OUT                (dp_pullup2_en_out),
  .UTMI_REG14_dm_pullup1_OUT                   (dm_pullup1_out),
  .UTMI_REG14_dm_pullup1_en_OUT                (dm_pullup1_en_out),
  .UTMI_REG14_dp_pullup1_OUT                   (dp_pullup1_out),
  .UTMI_REG14_dp_pullup1_en_OUT                (dp_pullup1_en_out),
  .UTMI_REG15_txvalid_gate_threshold_fs_OUT    (txvalid_gate_threshold_fs_out),
  .UTMI_REG15_txvalid_gate_threshold_hs_OUT    (txvalid_gate_threshold_hs_out),
  .UTMI_REG15_ted_en_value_OUT                 (ted_en_value_out),
  .UTMI_REG15_ted_en_cnt_OUT                   (ted_en_cnt_out),
  .UTMI_REG15_ed_en_value_OUT                  (ed_en_value_out),
  .UTMI_REG15_ed_en_cnt_OUT                    (ed_en_cnt_out),
  .UTMI_REG16_unused_OUT                       (utmi_reg16_unused_out),
  .UTMI_REG17_squelch_count_idle_OUT           (squelch_count_idle_out),
  .UTMI_REG17_squelch_count_idle_en_OUT        (squelch_count_idle_en_out),
  .UTMI_REG17_tx_sq_cnt_OUT                    (tm_tx_sq_cnt[4:1]),
  .UTMI_REG17_tx_sq_cnt_en_OUT                 (tm_tx_sq_cnt[0]),
  .UTMI_REG18_sleep_value_OUT                  (sleep_value_out),
  .UTMI_REG18_sleep_en_OUT                     (sleep_en_out),
  .UTMI_REG18_bist_powerup_OUT                 (tm_ana_powerup[2]),
  .UTMI_REG18_bist_powerup_en_OUT              (tm_ana_powerup[1]),
  .UTMI_REG18_powerup_en_OUT                   (tm_ana_powerup[0]),
  .UTMI_REG18_unused_OUT                       (utmi_reg18_unused_out),
  .UTMI_REG18_clipper_en_OUT                   (tm_clipper_en[1]),
  .UTMI_REG18_clipper_en_en_OUT                (tm_clipper_en[0]),
  .UTMI_REG19_unused_OUT                       (utmi_reg19_unused_out),
  .UTMI_REG19_ted_sw_en_OUT                    (ted_sw_en_out),
  .UTMI_REG20_hostdiscon_rst_reg_OUT           (tm_hostdiscon_rst_reg[1]),
  .UTMI_REG20_hostdiscon_rst_reg_en_OUT        (tm_hostdiscon_rst_reg[0]),
  .UTMI_REG20_calib_rst_dt_OUT                 (tm_calib_rstn_dt[5:1]),
  .UTMI_REG20_calib_rst_dt_en_OUT              (tm_calib_rstn_dt[0]),
  .UTMI_REG21_calib_triger_posedge_OUT         (calib_triger_posedge_out),
  .UTMI_REG21_auto_cal_enable_OUT              (auto_cal_enable_n),
  .UTMI_REG21_absvalid_OUT                     (absvalid_out),
  .UTMI_REG21_absvalid_en_OUT                  (absvalid_en_out),
  .UTMI_REG21_vbusvalid_OUT                    (vbusvalid_out),
  .UTMI_REG21_vbusvalid_en_OUT                 (vbusvalid_en_out),
  .UTMI_REG21_suspendm_OUT                     (suspendm_out),
  .UTMI_REG21_suspendm_en_OUT                  (suspendm_en_out),
  .UTMI_REG22_bccalib_offset_OUT               (tm_bccalib_offset),
  .UTMI_REG23_hscalib_offset_OUT               (tm_hscalib_offset),
  .UTMI_REG24_fscalib_offset_OUT               (tm_fscalib_offset),
  .UTMI_REG25_unused_OUT                       (utmi_reg25_unused_out),
  .UTMI_REG25_hscalib_OUT                      (tm_hscalib),
  .UTMI_REG26_unused_OUT                       (utmi_reg26_unused_out),
  .UTMI_REG26_fscalib_OUT                      (tm_fscalib),
  .UTMI_REG27_unused_OUT                       (utmi_reg27_unused_out),
  .UTMI_REG27_bccalib_OUT                      (tm_bccalib),
  .UTMI_REG28_cdr_eb_wr_reset_OUT              (tm_eb_wr_rst_sel),
  .UTMI_REG28_unused_OUT                       ({utmi_reg28_unused_out , tm_serx_en_cntrl_opmode01}),
  .UTMI_REG29_unused_OUT                       (utmi_reg29_unused_out),
  .UTMI_REG29_pll_standalone_OUT               (tm_pll_standalone),
  .UTMI_REG29_pll_standalone_en_OUT            (tm_pll_standalone_en),
  .UTMI_REG29_spare_out_OUT                    (tm_spare_out),
  .UTMI_REG30_unused_OUT                       (utmi_reg30_unused_out),
  .UTMI_REG30_pll_480_clock_gate_ovr_OUT       (pll_480_clock_gate_ovr_out),
  .UTMI_REG30_scan_ats_hs_clock_gate_ovr_OUT   (scan_ats_hs_clock_gate_ovr_out),
  .UTMI_REG30_vco_pll_clock_gate_ovr_OUT       (vco_pll_clock_gate_ovr_out),
  .UTMI_REG30_dig_div_refclock_gate_ovr_OUT    (dig_div_refclock_gate_ovr_out),
  .UTMI_REG30_fb_clock_gate_ovr_OUT            (fb_clock_gate_ovr_out),
  .UTMI_REG30_ana_div_refclock_gate_ovr_OUT    (ana_div_refclock_gate_ovr_out),
  .UTMI_REG30_hs_clock_gate_ovr_OUT            (hs_clock_gate_ovr_out),
  .UTMI_UNUSED_REG0_unused_OUT                 (utmi_unused_reg0_unused_out),
  .UTMI_UNUSED_REG1_unused_OUT                 (utmi_unused_reg1_unused_out),
  .UTMI_UNUSED_REG2_unused_OUT                 (utmi_unused_reg2_unused_out),
  .UTMI_UNUSED_REG3_unused_OUT                 (utmi_unused_reg3_unused_out),
  .UTMI_REG31_unused_IN                        (utmi_reg29_unused_in),
  .UTMI_REG31_bist_error_IN                    (o_bist_error),
  .UTMI_REG31_bist_complete_IN                 (o_bist_complete),
  .UTMI_REG32_bist_err_count_IN                (o_bist_error_count),
  .UTMI_REG33_bg_powergood_IN                  (debug_bg_powergood),
  .UTMI_REG33_afe_hsrx_diff_data_IN            (debug_afe_hsrx_diff_data),
  .UTMI_REG33_hsrx_en_IN                       (debug_hsrx_en),
  .UTMI_REG33_hsrx_sampler_enable_IN           (debug_hsrx_sampler_enable),
  .UTMI_REG33_chirp_mode_en_IN                 (debug_chirp_mode_en),
  .UTMI_REG33_hstx_en_IN                       (debug_hstx_en),
  .UTMI_REG33_hstx_en_delayed_IN               (debug_hstx_en_delayed),
  .UTMI_REG33_hstx_boost_deamp_off_IN          (debug_hstx_boost_deamp_off),
  .UTMI_REG34_o_dprpu1_en_IN                   (debug_dprpu1_en),
  .UTMI_REG34_o_dmrpu1_en_IN                   (debug_dmrpu1_en),
  .UTMI_REG34_o_dprpu2_en_IN                   (debug_dprpu2_en),
  .UTMI_REG34_o_dmrpu2_en_IN                   (debug_dmrpu2_en),
  .UTMI_REG34_o_dprpd_en_IN                    (debug_dprpd_en),
  .UTMI_REG34_o_dmrpd_en_IN                    (debug_dmrpd_en),
  .UTMI_REG34_o_otgc_id_pullup_en_IN           (debug_otgc_id_pullup_en),
  .UTMI_REG34_o_fs_edge_sel_IN                 (debug_fs_edge_sel),
  .UTMI_REG35_i_afe_lsfsrx_ana_IN              (debug_afe_lsfsrx_ana),
  .UTMI_REG35_o_lsfstx_en_IN                   (debug_lsfstx_en),
  .UTMI_REG35_o_lsfsdrv_en_IN                  (debug_lsfsdrv_en),
  .UTMI_REG35_o_lsfs_ddi_IN                    (debug_lsfs_ddi),
  .UTMI_REG35_o_assert_sezero_IN               (debug_assert_sezero),
  .UTMI_REG35_o_lsfsrx_en_IN                   (debug_lsfsrx_en),
  .UTMI_REG35_o_serx_en_IN                     (debug_serx_en),
  .UTMI_REG35_o_serx_bias_en_IN                (debug_serx_bias_en),
  .UTMI_REG36_o_pll_pso_IN                     (debug_pll_pso),
  .UTMI_REG36_o_pll_pso_delay_IN               (debug_pll_pso_delay),
  .UTMI_REG36_o_pll_pd_IN                      (debug_pll_pd),
  .UTMI_REG36_o_pll_ipdiv_IN                   (debug_pll_ipdiv),
  .UTMI_REG37_o_pll_fbdiv_value_IN             (debug_pll_fbdiv),
  .UTMI_REG38_o_pll_standby_IN                 (debug_pll_standby),
  .UTMI_REG38_o_pll_ldo_core_en_IN             (debug_pll_ldo_core_en),
  .UTMI_REG38_o_pll_ldo_ref_en_IN              (debug_pll_ldo_ref_en),
  .UTMI_REG38_o_afe_suspendm_IN                (debug_afe_suspendm),
  .UTMI_REG38_o_otgc_vbusvalid_en_IN           (debug_otgc_vbusvalid_en),
  .UTMI_REG38_o_otgc_absvalid_en_IN            (debug_otgc_absvalid_en),
  .UTMI_REG38_o_afe_clipper_en_IN              (debug_afe_clipper_en),
  .UTMI_REG38_o_pll_ldo_isolation_cntrl_IN     (debug_pll_ldo_isolation_cntrl),
  .UTMI_REG39_unused_IN                        (utmi_reg39_unused_in),
  .UTMI_REG40_unused_IN                        (utmi_reg40_unused_in),
  .UTMI_REG41_i_ted_squelch_ana_IN             (debug_ted_squelch_ana),
  .UTMI_REG41_i_usb2_rescal_calib_done_IN      (debug_usb2_rescal_calib_done),
  .UTMI_REG41_hs_calib_code_IN                 (debug_hscalib_code),
  .UTMI_REG42_hs_sof_IN                        (debug_hs_sof),
  .UTMI_REG42_all_calib_done_IN                (debug_all_calib_done),
  .UTMI_REG42_fs_calib_code_IN                 (debug_fscalib_code),
  .UTMI_REG43_ls_mode_IN                       (debug_ls_mode),
  .UTMI_REG43_fs_mode_pre_IN                   (debug_fs_mode_pre),
  .UTMI_REG43_bc_calib_code_IN                 (debug_bccalib_code),
  .UTMI_REG44_rstn_refclock_IN                 (debug_rstn_refclock),
  .UTMI_REG44_rstn_hs_clock_IN                 (debug_rstn_hs_clock),
  .UTMI_REG44_rstn_hs_tx_clock_IN              (debug_rstn_hs_tx_clock),
  .UTMI_REG44_rstn_byte_clock_IN               (debug_rstn_byte_clock),
  .UTMI_REG44_rstn_sieclock_IN                 (debug_rstn_sieclock),
  .UTMI_REG44_rstn_clkdiv_IN                   (debug_rstn_clkdiv),
  .UTMI_REG44_rstn_calib_clkdiv_IN             (debug_rstn_calib_clkdiv),
  .UTMI_REG44_udc_rstn_cdr_async_IN            (debug_udc_rstn_cdr_async),
  .UTMI_REG45_udc_calib_rstn_IN                (debug_udc_calib_rstn),
  .UTMI_REG45_udc_apb_rstn_IN                  (debug_udc_apb_resetn),
  .UTMI_REG45_o_rstn_cdr_async_IN              (debug_o_rstn_cdr_async),
  .UTMI_REG45_o_pll_calib_rstn_IN              (debug_o_pll_calib_rstn_int),
  .UTMI_REG45_bist_mode_rstn_IN                (debug_rstn_bist_mode),  
  .UTMI_REG45_o_usb2_calib_rstn_IN             (debug_o_usb2_calib_rstn),
  .UTMI_REG45_udc_bc_calib_rstn_IN             (debug_udc_bc_calib_rstn),
  .UTMI_REG45_global_resetn_IN                 (debug_global_resetn),
  .UTMI_REG46_unused_IN                        (utmi_reg46_unused_in),
  .UTMI_REG46_recovery_cnt_en_IN               (debug_recovery_cnt_en),
  .UTMI_REG46_clean_linestate_IN               (debug_clean_linestate),
  .UTMI_REG46_bc_state_machine_status_IN       (debug_bc_state),
  .UTMI_REG47_filter_cnt_en_IN                 (debug_filter_cnt_en),
  .UTMI_REG47_host_opmode_IN                   (debug_host_opmode),
  .UTMI_REG47_dev_opmode_IN                    (debug_dev_opmode),
  .UTMI_REG47_i_ded_ana_IN                     (debug_ded_ana),
  .UTMI_REG47_hs_hostdisconnect_IN             (debug_hs_hostdisconnect),
  .UTMI_REG47_lsfs_hostdisconnect_IN           (debug_lsfs_hostdisconnect),
  .UTMI_REG48_bist_tx_state_IN                 (debug_r_state_tx),
  .UTMI_REG48_data_cnt_tx_IN                   (debug_data_cnt_tx),
  .UTMI_REG49_bist_rx_state_IN                 (debug_r_state_rx),
  .UTMI_REG49_data_cnt_rx_IN                   (debug_data_cnt_rx),
  .UTMI_REG50_bist_top_state_IN                (debug_r_state_bist_top),
  .UTMI_REG50_inc_data_cnt_tx_IN               (debug_inc_data_cnt_tx),
  .UTMI_REG50_inc_data_cnt_rx_IN               (debug_inc_data_cnt_rx),
  .UTMI_REG50_o_bg_pd_IN                       (debug_o_bg_pd),
  .UTMI_REG50_o_bg_pd_bg_ok_IN                 (debug_o_bg_pd_bg_ok),
  .UTMI_REG51_powerdown_IN                     (debug_powerdown),
  .UTMI_REG51_reset_IN                         (debug_reset),
  .UTMI_REG51_suspendm_IN                      (debug_suspendm),
  .UTMI_REG51_termselect_IN                    (debug_termselect),
  .UTMI_REG51_databus16_8_IN                   (debug_databus16_8),
  .UTMI_REG51_dppulldown_IN                    (debug_dppulldown),
  .UTMI_REG51_dmpulldown_IN                    (debug_dmpulldown),
  .UTMI_REG52_lane_reverse_IN                  (debug_lane_reverse),
  .UTMI_REG52_txbitstuffenable_IN              (debug_txbitstuffenable),
  .UTMI_REG52_txbitstuffenableh_IN             (debug_txbitstuffenableh),
  .UTMI_REG52_xcvrselect_IN                    (debug_xcvrselect),
  .UTMI_REG52_linestate_IN                     (debug_linestate),
  .UTMI_REG52_hostdisconnect_IN                (debug_hostdisconnect),
  .UTMI_REG53_fslsserialmode_IN                (debug_fslsserialmode),
  .UTMI_REG53_tx_enable_n_IN                   (debug_tx_enable_n),
  .UTMI_REG53_tx_dat_IN                        (debug_tx_dat),
  .UTMI_REG53_tx_se0_IN                        (debug_tx_se0),
  .UTMI_REG53_sleepm_IN                        (debug_sleepm),
  .UTMI_REG53_unused_IN                        (utmi_reg53_unused_in),
  .UTMI_REG53_opmode_IN                        (debug_opmode),
  .UTMI_REG54_rx_dp_IN                         (debug_rx_dp),
  .UTMI_REG54_rx_dm_IN                         (debug_rx_dm),
  .UTMI_REG54_rx_rcv_IN                        (debug_rx_rcv),
  .UTMI_REG54_unused_IN                        (utmi_reg54_unused_in),
  .UTMI_REG55_txvalidh_IN                      (debug_txvalidh),
  .UTMI_REG55_txvalid_IN                       (debug_txvalid),
  .UTMI_REG55_txready_IN                       (debug_txready),
  .UTMI_REG55_rxvalidh_IN                      (debug_rxvalidh),
  .UTMI_REG55_rxvalid_IN                       (debug_rxvalid),
  .UTMI_REG55_rxactive_IN                      (debug_rxactive),
  .UTMI_REG55_rxerror_IN                       (debug_rxerror),
  .UTMI_REG55_unused_IN                        (utmi_reg55_unused_in),
  .UTMI_REG56_datain_upper_IN                  (debug_datain[15:8]),
  .UTMI_REG57_datain_lower_IN                  (debug_datain[7:0]),
  .UTMI_REG58_dataout_upper_IN                 (debug_dataout[15:8]),
  .UTMI_REG59_dataout_lower_IN                 (debug_dataout[7:0]),
  .UTMI_UNUSED_REG6_unused_IN                  (utmi_unused_reg6_unused_in),
  .UTMI_UNUSED_REG7_unused_IN                  (utmi_unused_reg7_unused_in),
  .PRDATA                                      (prdata_udc),
  .PADDR                                       (paddr),
  .PWDATA                                      (pwdata),
  .PWRITE                                      (pwrite),
  .PSELx                                       (pselx),
  .PENABLE                                     (penable),
  .PCLK                                        (pclk),
  .PRESETn                                     (presetn)
);
endmodule
module BYPASS_REGISTER_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r(TDI, SHIFTDR, CLOCKDR, TDO);
   input  TDI;
   input  SHIFTDR;
   input  CLOCKDR;
   output TDO;
   wire TBS_TDI;
   wire TBS_SHIFTDR;
   wire TBS_CLOCKDR;
   reg TBS_TDO;
   wire TBS_AND;
   assign TBS_TDI = TDI;
   assign TBS_SHIFTDR = SHIFTDR;
   assign TBS_CLOCKDR = CLOCKDR;
   assign TDO = TBS_TDO;
   always @(posedge TBS_CLOCKDR)
     begin : TBB_TDO
       TBS_TDO <= TBS_AND;
     end
   assign TBS_AND = (TBS_TDI & TBS_SHIFTDR);
endmodule
`timescale 1ns/1ps
module ted_calib_core_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
		       i_rstn,
		       i_calib,
		       i_clk,
		       i_calib_done,
		       i_calib_code,
		       o_sar_en,
		       o_calib_code,
		       o_calib_done
		       );
   parameter 	p_init_wait_time = 3'd1;
   parameter 	p_code_len = 4;
   localparam 	p_IDLE = 2'd0;
   localparam 	p_INIT_WAIT = 2'd1;
   localparam 	p_CALIB = 2'd2;
   input                   i_rstn;
   input 		   i_calib;
   input 		   i_clk;
   input 		   i_calib_done;
   input [p_code_len-1:0]  i_calib_code;
   output 		   o_sar_en;
   output [p_code_len-1:0] o_calib_code;
   output 		   o_calib_done;
   wire 		   w_count_done;
   reg [p_code_len-1:0]    o_calib_code;
   reg [p_code_len-1:0]    r_code_latch;
   reg [2:0] 		   r_count;
   reg [1:0] 		   state;
   reg [1:0] 		   next_state;
   reg 			   r_calib_done;
   assign o_sar_en = (state == p_CALIB);
   assign o_calib_done = i_calib_done | r_calib_done;
   always @(posedge i_clk or negedge i_rstn)
     if (~i_rstn)
       state <= p_IDLE;
     else
       state <= next_state;
   always @(*)
     begin
	next_state = state;
	case (state)
	  p_IDLE :
	    if (i_calib && ~o_calib_done)
	      next_state = p_INIT_WAIT;
	  p_INIT_WAIT :
	    if (w_count_done)
	      next_state = p_CALIB;
	  p_CALIB:
	    if (i_calib_done)
	      next_state = p_IDLE;
	  default :
	    next_state = p_IDLE;
	endcase  
     end  
   assign w_count_done = (r_count == p_init_wait_time);
   always @(posedge i_clk or negedge i_rstn)
     if (~i_rstn)
       begin
	  r_count <= 3'd0;
	  r_calib_done <= 1'b0;
       end
     else
       begin
	  if (next_state == p_INIT_WAIT)
	    r_count <= r_count + 1'b1;
	  else
	    r_count <= 3'd0;
	  if (i_calib_done)
	    r_calib_done <= 1'b1;	  
       end  
   always @(posedge i_clk or negedge i_rstn)
     if (~i_rstn)
       r_code_latch <= 4'b1000;
     else 
       if (i_calib_done)
	 r_code_latch <= i_calib_code;
   always @(*)
   begin
     if(state == p_IDLE)
       o_calib_code = r_code_latch;
     else
       o_calib_code = i_calib_code;
   end
endmodule 
`timescale 1ns/1ps
module udc_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r ( 
cdr_eb_wr_reset,
i_cdr_test_digout,
scan_en_ats,
i_bist_mode_en,
scan_en_cg,                      
scan_mode_sel,
refclock,                        
i_pll_480p0_clk,                 
i_pll_480p0_vco_clk,
udc_refclock,                    
hssi_tx_clockin,                         
apb_pclk,
apb_presetn,
pll_clk_gate_ack,
o_usb2_phy_spare,
scan_mode,                       
scan_ats_mode,                   
lane_reverse,                    
pllrefsel,                       
reset,                           
suspendm,                        
pll_clkon,                       
powerdown,                       
sleepm,                          
xcvrselect,                      
xcvrselect_sync,
termselect,                      
opmode,                          
databus_store,
dppulldown,                      
dmpulldown,                      
hostdisconnect,                  
txbitstuffenable,                
txbitstuffenableh,               
txvalid,                         
txvalidh,                        
datain,                          
fslsserialmode,                  
tx_enable_n,                     
tx_dat,                          
tx_se0,                          
i_bist_on,                       
idpullup,                        
i_bc_en,                         
debug_bc_state                 ,
bc_delay_cnt_reached_10us      ,
bc_delay_reached               ,
i_rid_float_a_comp_sts         ,        
i_rid_b_c_comp_sts             ,              
loopback_ls,                     
loopback_fs,                     
loopback_hs,                     
o_hstx_boost_deemp_off,
bc_hstx_en,                      
hssi_mode,
hssi_datain,
hssi_txvalid,
hssi_tx_enable,
hssi_ted_en,
hssi_dataout,
hssi_rxvalid,
hssi_squelch,
hssi_rxerror,
hssi_ded_ana,
hssi_chirp_data,
hssi_tx_clockout,
hssi_rx_clockout,
idle_rpu_enable,
scan_hsclock,
scan_hssiclock,
scan_sieclock,
scan_clock,
phy_soft_reset,                  
clkdiv_soft_reset,               
calib_soft_reset,                
tx_hs_soft_reset,                
tx_lsfs_soft_reset,              
rx_hs_soft_reset,                
lsfs_dll_soft_reset,             
sync_det_soft_reset,             
eop_det_soft_reset,              
nrzi_dec_soft_reset,             
bitunstuff_soft_reset,           
shift_reg_soft_reset,            
rx_cntrl_soft_reset,             
test_hs_sync_conf,               
test_linestate_fs_cnt_en,        
test_linestate_ls_cnt_en,        
test_linestate_ls_cnt,           
test_linestate_fs_cnt,           
test_hsrx_reg1,                  
test_hsrx_reg2,                  
test_hstx_reg1,                  
test_hstx_reg2,                  
test_hstx_reg3,                  
tm_clk_gate_mask,
test_lsfs_rx_reg,                
test_lsfs_tx_reg1,               
test_lsfs_tx_reg2,               
test_afe_common_reg1,            
test_afe_common_reg2,            
test_afe_common_reg3,            
test_squelch_count_idle,                         
test_pll_reg11,                  
test_pll_reg12,                  
test_pll_reg13,                  
test_pll_reg14,                  
test_ana_powerup,                
test_fs_eop_se0_en,              
test_ls_eop_se0_en,              
test_eop_se0_fs,                 
test_eop_se0_ls,                 
test_timeout_all_enable, 
test_timeout_enable,     
test_timeout_value,      
test_fs_preamble_en,             
test_fs_preamble,                
test_hscalib,
test_fscalib,
test_bccalib,
test_fscalib_offset,
test_hscalib_offset,
test_bccalib_offset,
test_ana_block_en,
test_clipper_en,
test_txvalid_ungate,
test_hs_sof_reg,                 
test_hostdiscon_rst_reg,         
test_serx_bias_en,               
tm_eb_wr_rst_sel,
i_bg_powergood,                  
i_bg_powergood_ats,              
i_hsrx_sampler_calib_done,       
i_afe_hsrx_rec_clk,              
i_afe_hsrx_rec_data,             
i_afe_hsrx_rec_data_valid,       
i_afe_hsrx_rec_decision_error,   
i_afe_hsrx_diff_data,            
i_afe_lsfsrx_ana,                
test_tx_sq_cnt,
test_calib_rstn_dt,
tm_hs_rx_err_reg,
test_spare_out,
test_clk_gate_ovr,
test_serx_en_cntrl_opmode01,
i_pll_lock_ana,                  
i_pll_lock_ana_ats,
i_pll_coarse_code_done_ana,      
i_pll_fbdiv,                     
i_pll_ipdiv,     
i_ted_calib_done,                
i_ted_squelch_ana,               
i_ded_ana,                       
i_rescal_calib_done,    
i_res_calib_code,
pll_standalone,
pll_vco_cnt_window,
pll_startloop,
pll_pfd_pd,
sieclock,                        
o_usb2_1M_calib_clock,           
hs_clock,
byte_clock,
o_scan_ats_hsclock,
o_scan_ats_hssiclock,
o_scan_ats_sieclock,
o_pll_480p0_clk,
o_vco_pll_clk,
o_fb_clk,                        
o_div_refclock,                  
o_dig_div_refclock,             
o_rstn_cdr_async,                
o_usb2_calib_rstn,               
udc_bc_calib_rstn,               
xcvr_sie_rstn,                   
xcvr_aon_rstn,                   
o_pll_calib_rstn_int,
udc_calib_rstn,
primary_count_rstn,
udc_rstn_cdr_async,
rstn_calib_clkdiv,
rstn_clkdiv,
rstn_sieclock,
rstn_byte_clock,
rstn_ats_clkdiv,
rstn_refclock,
rstn_hs_clock,
rstn_bist_mode,
pclk,
presetn,
pll_gate,
rstn_pll_clockout,
rxactive,                        
rxvalid,                         
rxvalidh,                        
rxerror,                         
dataout,                         
txready,                         
rx_dp,                           
rx_dm,                           
rx_rcv,                          
bist_ana_powerup,
databus,                         
dprpu1_en,                     
dmrpu1_en,                     
dprpu2_en,                     
dmrpu2_en,                     
dprpd_en,                      
dmrpd_en,                      
o_hsrx_en,                       
o_hsrx_sampler_enable,           
o_chirp_mode_en,                 
o_hstx_en,                       
o_hstx_en_delayed,               
o_hspredrv_en,                   
o_hsdrv_en,                      
o_hsddi,                         
o_fs_edge_sel,                   
o_lsfstx_en,                     
o_lsfsdrv_en,                    
o_lsfs_ddi,                      
o_assert_sezero,                 
o_lsfsrx_en,                     
o_serx_en,                       
o_serx_bias_en,                  
o_pll_pso,                       
o_pll_pso_delay,                 
o_pll_pd,                        
o_pll_pd_ana,
o_pll_standby,                   
o_pll_ldo_core_en,               
o_pll_ldo_ref_en,                
o_pll_ldo_ref_core,
o_afe_suspendm_rx,                       
o_afe_suspendm_tx,                       
o_afe_hscalib_code,
o_afe_fscalib_code,
o_afe_bccalib_code,
o_afe_clipper_en,                
o_otgc_vbusvalid_en,             
o_otgc_absvalid_en,              
o_ed_en,                         
o_ted_en,                        
o_bg_pd_bg_ok,                   
o_bg_pd,                         
debug_rstn_refclock ,
debug_rstn_hs_clock ,
debug_rstn_hs_tx_clock ,
debug_rstn_byte_clock ,
debug_rstn_sieclock ,
debug_rstn_clkdiv ,
debug_rstn_calib_clkdiv ,
debug_udc_rstn_cdr_async,
debug_udc_calib_rstn ,
debug_o_rstn_cdr_async ,
debug_o_pll_calib_rstn_int ,
debug_o_usb2_calib_rstn ,
debug_all_calib_done ,
debug_global_resetn,
debug_tx_hs_state,       
debug_eop_transmitted,
debug_hs_bitstuff_en,
debug_pd_state,          
debug_hs_sof ,
debug_hs_hostdisconnect ,
debug_rstn_bist_mode,
debug_tx_lsfs_state,     
debug_resume_eop ,
debug_remote_wakeup,
debug_preamble_sent,
debug_ls_keep_alive,
debug_lsfs_bitstuff_en ,
debug_eb_error,
debug_cdr_error ,
debug_fs_mode_pre,
debug_ls_mode,
debug_sync_detected,
debug_eop_detected,
debug_hs_eop_condition,
debug_normal_eop,
debug_alignment_error,
debug_no_eop,
debug_hs_eop_detected,
debug_se0_validated,
debug_lsfs_eop_detected,
debug_bitunstuff_error,
debug_bus_state,                 
debug_phy_cnt,           
debug_sie_cnt,           
debug_start_flag,
debug_rxactive_reg,
debug_deassert_rxactive_reg,
debug_lsfs_hostdisconnect,
debug_recovery_cnt_en,
debug_clean_linestate,   
debug_filter_cnt_en,
debug_host_opmode,       
debug_dev_opmode,        
debug_afe_suspendm,     
debug_otgc_vbusvalid_en,        
debug_otgc_absvalid_en, 
debug_o_bg_pd,          
debug_o_bg_pd_bg_ok,            
debug_afe_clipper_en,   
debug_pullup_en, 
debug_ana_enable,
debug_fscalib_code,
debug_hscalib_code,
debug_bccalib_code,
glitch_filter_en,
set1_dis,
raw_squelch_ana,
linestate_sel,
filter_linestate_d,
fmeda_linestate_se0,
fslsserialmode_sync,
hsrx_diff_data,
bist_mode_fs, 
bist_mode_hs,
internal_opmode,
rxdm_ana,
rxdp_ana,
i_afe_rxdm_ana,
i_afe_rxdp_ana
);
input           cdr_eb_wr_reset, scan_en_ats, i_bist_mode_en, refclock, i_pll_480p0_clk, i_pll_480p0_vco_clk, hssi_tx_clockin ;
input           scan_mode,scan_ats_mode, scan_en_cg, scan_mode_sel ;
input           lane_reverse ;
input           reset, suspendm, pll_clkon, termselect, dppulldown, dmpulldown, txbitstuffenable, txbitstuffenableh, 
                txvalid, txvalidh, fslsserialmode, tx_enable_n, tx_dat, tx_se0, i_bist_on, idpullup, i_bc_en ;
input           phy_soft_reset, clkdiv_soft_reset, calib_soft_reset, tx_hs_soft_reset, tx_lsfs_soft_reset, rx_hs_soft_reset,
                lsfs_dll_soft_reset, sync_det_soft_reset, eop_det_soft_reset, nrzi_dec_soft_reset, bitunstuff_soft_reset, 
                shift_reg_soft_reset, rx_cntrl_soft_reset, test_linestate_fs_cnt_en, bc_hstx_en, test_timeout_all_enable, 
                test_linestate_ls_cnt_en, test_hs_sync_conf, loopback_ls, loopback_fs, loopback_hs, test_fs_preamble_en, test_timeout_enable ;
input           i_hsrx_sampler_calib_done, i_afe_hsrx_rec_clk, i_afe_hsrx_rec_data, i_afe_hsrx_diff_data, i_afe_hsrx_rec_data_valid, 
                i_afe_hsrx_rec_decision_error, i_afe_lsfsrx_ana, i_bg_powergood, i_bg_powergood_ats ;
input           test_fs_eop_se0_en, test_ls_eop_se0_en ;
input           i_pll_lock_ana, i_pll_lock_ana_ats, i_pll_coarse_code_done_ana, pll_standalone, pll_vco_cnt_window;
input           i_ted_calib_done, i_ted_squelch_ana, i_ded_ana ;
input           i_rescal_calib_done, apb_pclk, apb_presetn, pll_clk_gate_ack;
input           raw_squelch_ana;
input           glitch_filter_en;
input           set1_dis;
input   [1:0]   xcvrselect, opmode, powerdown, xcvrselect_sync;
input           sleepm , bist_mode_fs, bist_mode_hs, pll_startloop, pll_pfd_pd;
input   [1:0]   test_eop_se0_fs ;
input   [2:0]   test_timeout_value, test_ana_powerup ;
input   [3:0]   pllrefsel, test_afe_common_reg3, test_spare_out;
input   [4:0]   test_linestate_fs_cnt, i_pll_ipdiv, test_clk_gate_ovr;
input   [5:0]   i_res_calib_code;
input   [5:0]   test_eop_se0_ls, test_lsfs_tx_reg2, test_afe_common_reg1, test_hsrx_reg1;
input           tm_eb_wr_rst_sel;
input           test_serx_en_cntrl_opmode01;
input   [7:0]   test_linestate_ls_cnt, test_hsrx_reg2, test_hstx_reg1,test_lsfs_rx_reg,
                test_hstx_reg2, test_lsfs_tx_reg1, 
                test_afe_common_reg2, test_pll_reg11, test_pll_reg12, test_pll_reg13, test_pll_reg14,
                test_fs_preamble, i_pll_fbdiv;
input   [2:0]   test_squelch_count_idle;
input   [7:0]   test_hstx_reg3, i_cdr_test_digout;
input           tm_clk_gate_mask ,databus_store;
input   [15:0]  datain ;
input           idle_rpu_enable, scan_hsclock, scan_hssiclock, scan_sieclock, scan_clock;
input           hssi_mode, hssi_tx_enable, hssi_ted_en, tm_hs_rx_err_reg;
input   [1:0]   hssi_txvalid, hssi_datain;
input   [3:0]   debug_bc_state                 ;
input           bc_delay_cnt_reached_10us      ;
input           bc_delay_reached               ;
input           i_rid_float_a_comp_sts         ;        
input           i_rid_b_c_comp_sts             ;              
input  wire    [4:0]   test_tx_sq_cnt;
input  wire    [5:0]   test_calib_rstn_dt;
output          hssi_rxvalid, hssi_rxerror, hssi_chirp_data, hssi_squelch, hssi_ded_ana, hssi_rx_clockout, hssi_tx_clockout;
output  [3:0]   hssi_dataout;
output  wire            udc_refclock, udc_bc_calib_rstn ;
output  wire            sieclock, o_usb2_1M_calib_clock, o_usb2_calib_rstn, o_rstn_cdr_async, o_fb_clk, o_vco_pll_clk,o_div_refclock,
                        xcvr_sie_rstn, xcvr_aon_rstn, pclk, presetn, pll_gate, rstn_pll_clockout, o_scan_ats_sieclock, o_scan_ats_hsclock, o_scan_ats_hssiclock,
                        o_dig_div_refclock,o_pll_480p0_clk;
output  wire            hostdisconnect, rxactive, rxvalid, rxvalidh, 
                        rxerror, txready, bist_ana_powerup, 
                        rx_dp, rx_dm, rx_rcv ;
output                  rstn_sieclock, databus ;
output  wire            o_pll_ldo_core_en, o_pll_ldo_ref_en;
output  wire    [5:0]   o_pll_ldo_ref_core;             
output  wire    [7:0]   o_usb2_phy_spare;             
output  wire            o_hsrx_en, o_chirp_mode_en, o_hstx_en,  o_hstx_en_delayed,
                        o_hspredrv_en, o_hsdrv_en, o_hsddi, o_fs_edge_sel, o_lsfstx_en, o_lsfsdrv_en, 
                        o_lsfs_ddi, o_assert_sezero, o_hsrx_sampler_enable,
                        o_lsfsrx_en, o_serx_en, o_serx_bias_en ;
output  wire            o_pll_pso, o_pll_pso_delay, o_pll_pd,o_pll_pd_ana, o_pll_standby,o_hstx_boost_deemp_off;
output  wire            o_afe_suspendm_rx, o_afe_suspendm_tx, o_afe_clipper_en ;
output  wire            o_otgc_vbusvalid_en, o_otgc_absvalid_en ;
output  wire            o_ed_en, o_ted_en ;
output  wire            o_bg_pd, o_bg_pd_bg_ok ;
output  wire    [5:0]   o_afe_hscalib_code, o_afe_fscalib_code, o_afe_bccalib_code;
output  wire    [15:0]  dataout ;
output  wire            dprpu1_en, dmrpu1_en, dprpu2_en, dmrpu2_en, dprpd_en, dmrpd_en;
output wire             debug_rstn_refclock ;
output wire             debug_rstn_hs_clock ;
output wire             debug_rstn_hs_tx_clock ;
output wire             debug_rstn_byte_clock ;
output wire             debug_rstn_sieclock ;
output wire             debug_rstn_clkdiv ;
output wire             debug_rstn_calib_clkdiv ;
output wire             debug_udc_rstn_cdr_async;
output wire             debug_udc_calib_rstn ;
output wire             debug_o_rstn_cdr_async ;
output wire             debug_o_pll_calib_rstn_int ;
output wire             debug_o_usb2_calib_rstn ;
output wire             debug_all_calib_done ;
output wire             debug_global_resetn ;
output wire     [3:0]   debug_tx_hs_state ;
output wire             debug_eop_transmitted ;
output wire             debug_hs_bitstuff_en ;
output wire     [2:0]   debug_pd_state ;
output wire             debug_hs_sof ;
output wire             debug_hs_hostdisconnect ;
output wire             debug_rstn_bist_mode;
output wire     [3:0]   debug_tx_lsfs_state ;
output wire             debug_resume_eop ;
output wire             debug_remote_wakeup;
output wire             debug_preamble_sent;
output wire             debug_ls_keep_alive;
output wire             debug_lsfs_bitstuff_en ;
output wire             debug_eb_error ;
output wire             debug_cdr_error ;
output wire             debug_fs_mode_pre ;
output wire             debug_ls_mode ;
output wire             debug_sync_detected ;
output wire             debug_eop_detected ;
output wire             debug_hs_eop_condition ;
output wire             debug_normal_eop ;
output wire             debug_alignment_error ;
output wire             debug_no_eop ;
output wire             debug_hs_eop_detected ;
output wire             debug_se0_validated ;
output wire             debug_lsfs_eop_detected ;
output wire             debug_bitunstuff_error ;
output wire     [2:0]   debug_bus_state ;
output wire     [11:0]  debug_phy_cnt ;
output wire     [11:0]  debug_sie_cnt ;
output wire             debug_start_flag ;
output wire             debug_rxactive_reg ;
output wire             debug_deassert_rxactive_reg ;
output wire     [5:0]   debug_hscalib_code, debug_fscalib_code, debug_bccalib_code;
output wire             debug_lsfs_hostdisconnect ;
output wire             debug_recovery_cnt_en ;
output wire     [1:0]   debug_clean_linestate ;
output wire             debug_filter_cnt_en ;
output wire     [1:0]   debug_host_opmode ;
output wire     [1:0]   debug_dev_opmode ;
output wire             hs_clock, byte_clock;
output wire             o_pll_calib_rstn_int;
output wire             udc_calib_rstn, primary_count_rstn;
output wire             udc_rstn_cdr_async, rstn_calib_clkdiv;
output wire             rstn_clkdiv;
output wire             rstn_byte_clock, rstn_ats_clkdiv;
output wire             rstn_refclock, rstn_hs_clock, rstn_bist_mode;
input   [6:0]   test_hscalib, test_fscalib, test_bccalib;
input   [7:0]   test_fscalib_offset, test_bccalib_offset,test_hscalib_offset;
input   [7:0]   test_ana_block_en ;
input   [3:0]   test_txvalid_ungate;
input   [1:0]   test_clipper_en, test_hostdiscon_rst_reg, test_serx_bias_en ;   
input   [2:0]   test_hs_sof_reg;
output  [6:0]   debug_ana_enable ;
output  [3:0]   debug_pullup_en ;
output          debug_afe_suspendm, debug_otgc_vbusvalid_en, debug_otgc_absvalid_en, debug_o_bg_pd_bg_ok, debug_o_bg_pd, debug_afe_clipper_en ; 
wire            se0_detected  ;
wire            eb_reset_wr_ind, hs_clock_ungate, hs_clock_gate_ack ; 
wire            databus, hs_mode, all_calib_done, ls_mode, fs_mode, fs_mode_pre, hspredrv_en, hsdrv_en, hsddi, hs_hostdisconnect, lsfsdrv_en, lsfsddi, lsfs_assert_sezero, squelch, 
                lsfsrx_ana, hs_sof, host_mode, loopback_lsfs, lsfs_transmit, hs_mode_cdr, o_txvalid, o_txvalidh;
wire            primary_count_reached, inv_calib_rstn_pulse;
wire            tx_eop_start, utmi_hsrx_rec_decision_error, utmi_hsrx_rec_data_valid, utmi_hsrx_rec_data, 
                utmi_ted_squelch_ana;
assign debug_hs_sof = hs_sof ;
assign debug_hs_hostdisconnect = hs_hostdisconnect ;
assign debug_all_calib_done = all_calib_done;
assign debug_fs_mode_pre = fs_mode_pre ;
assign debug_ls_mode = ls_mode ;
output wire linestate_sel, fslsserialmode_sync, hsrx_diff_data;
output wire [1:0] filter_linestate_d;
output  fmeda_linestate_se0;
input rxdp_ana, rxdm_ana, i_afe_rxdp_ana, i_afe_rxdm_ana;
output [1:0] internal_opmode;
udc_car_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r                         c_udc_car ( 
.tm_eb_wr_rst_sel               (tm_eb_wr_rst_sel),
.cdr_eb_wr_reset                (cdr_eb_wr_reset),
.scan_en_ats                    (scan_en_ats),
.scan_en_cg                     (scan_en_cg),                    
.scan_mode_sel                  (scan_mode_sel),
.reset                          (reset),                         
.refclock                       (refclock),                      
.i_pll_480p0_clk                (i_pll_480p0_clk),               
.i_pll_480p0_vco_clk            (i_pll_480p0_vco_clk),
.suspendm                       (suspendm),
.tm_clk_gate_mask               (tm_clk_gate_mask),
.pllrefsel                      (pllrefsel),
.scan_clock                     (scan_clock),
.scan_sieclock                  (scan_sieclock),                         
.scan_hsclock                   (scan_hsclock),                  
.scan_hssiclock                 (scan_hssiclock),                
.scan_mode                      (scan_mode),                     
.scan_ats_mode                  (scan_ats_mode),                 
.databus_store                  (databus_store),
.pll_vco_cnt_window             (pll_vco_cnt_window),
.i_pll_lock_ana                 (i_pll_lock_ana),        
.i_pll_lock_ana_ats             (i_pll_lock_ana_ats),
.i_pll_standby                  (o_pll_standby),               
.pll_pso                        (o_pll_pso),
.hssi_mode                      (hssi_mode),
.hssi_tx_clockin                (hssi_tx_clockin),
.pll_startloop                  (pll_startloop),         
.pll_pfd_pd                     (pll_pfd_pd),
.pll_fbdiv                      (i_pll_fbdiv),
.pll_ipdiv                      (i_pll_ipdiv),
.apb_pclk                       (apb_pclk),
.apb_presetn                    (apb_presetn),
.i_bg_powergood                 (i_bg_powergood),        
.i_bg_powergood_ats             (i_bg_powergood_ats),    
.eb_reset_wr_ind                (eb_reset_wr_ind),       
.sleepm                         (sleepm),                        
.hs_mode_cdr                    (hs_mode_cdr),           
.termselect                     (termselect),            
.opmode                         (opmode),                
.i_bist_mode_en                 (i_bist_mode_en),        
.all_calib_done                 (all_calib_done),        
.inv_calib_rstn_pulse           (inv_calib_rstn_pulse),  
.primary_count_reached          (primary_count_reached),                 
.phy_soft_reset                 (phy_soft_reset),        
.clkdiv_soft_reset              (clkdiv_soft_reset),     
.calib_soft_reset               (calib_soft_reset),      
.rx_hs_soft_reset               (rx_hs_soft_reset),      
.hs_clock_ungate                (hs_clock_ungate),
.test_clk_gate_ovr              (test_clk_gate_ovr),
.glitch_filter_en               (glitch_filter_en),
.databus                        (databus),                       
.tx_clockin                     (tx_clockin),
.hs_clock                       (hs_clock),                      
.hssi_tx_clockout               (hssi_tx_clockout),                      
.byte_clock                     (byte_clock),                    
.sieclock                       (sieclock),                      
.udc_refclock                   (udc_refclock),                  
.udc_calib_1M_clock             (o_usb2_1M_calib_clock),        
.o_div_refclock                 (o_div_refclock),                
.o_dig_div_refclock             (o_dig_div_refclock),
.o_fb_clk                       (o_fb_clk),
.o_vco_pll_clk                  (o_vco_pll_clk),                      
.o_scan_ats_sieclock            (o_scan_ats_sieclock),
.o_scan_ats_hsclock             (o_scan_ats_hsclock),
.o_scan_ats_hssiclock           (o_scan_ats_hssiclock),
.o_pll_480p0_clk                (o_pll_480p0_clk),
.pclk                           (pclk),
.presetn                        (presetn),
.rstn_refclock                  (rstn_refclock),                 
.rstn_hs_clock                  (rstn_hs_clock),                 
.rstn_ats_clkdiv                (rstn_ats_clkdiv),
.rstn_byte_clock                (rstn_byte_clock),               
.rstn_sieclock                  (rstn_sieclock),                 
.rstn_clkdiv                    (rstn_clkdiv),                   
.rstn_calib_clkdiv              (rstn_calib_clkdiv),             
.rstn_bist_mode                 (rstn_bist_mode),                
.rstn_pll_clockout              (rstn_pll_clockout),
.udc_rstn_cdr_async             (udc_rstn_cdr_async),            
.udc_calib_rstn                 (udc_calib_rstn),                
.primary_count_rstn             (primary_count_rstn),            
.udc_bc_calib_rstn              (udc_bc_calib_rstn),             
.xcvr_sie_rstn                  (xcvr_sie_rstn),                 
.xcvr_aon_rstn                  (xcvr_aon_rstn),                 
.o_rstn_cdr_async               (o_rstn_cdr_async),              
.o_pll_calib_rstn_int           (o_pll_calib_rstn_int),          
.o_usb2_calib_rstn              (o_usb2_calib_rstn),             
.hs_clock_gate_ack              (hs_clock_gate_ack),
.debug_global_resetn            (debug_global_resetn),
.debug_rstn_refclock            (debug_rstn_refclock),
.debug_rstn_hs_clock            (debug_rstn_hs_clock),
.debug_rstn_hs_tx_clock         (debug_rstn_hs_tx_clock),
.debug_rstn_byte_clock          (debug_rstn_byte_clock),
.debug_rstn_sieclock            (debug_rstn_sieclock),
.debug_rstn_clkdiv              (debug_rstn_clkdiv),
.debug_rstn_calib_clkdiv        (debug_rstn_calib_clkdiv), 
.debug_udc_rstn_cdr_async       (debug_udc_rstn_cdr_async),
.debug_udc_calib_rstn           (debug_udc_calib_rstn),
.debug_o_rstn_cdr_async         (debug_o_rstn_cdr_async),
.debug_o_pll_calib_rstn_int     (debug_o_pll_calib_rstn_int),
.debug_o_usb2_calib_rstn        (debug_o_usb2_calib_rstn),
.debug_rstn_bist_mode           (debug_rstn_bist_mode),
.o_offset_correction_rstn       (offset_correction_rstn)
);
udc_tx_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r                      c_udc_tx_top ( 
.hs_clock                       (hs_clock),              
.rstn_hs_clock                  (rstn_hs_clock),         
.byte_clock                     (byte_clock),            
.rstn_byte_clock                (rstn_byte_clock),       
.sieclock                       (sieclock),              
.rstn_sieclock                  (rstn_sieclock),         
.tx_hs_soft_reset               (tx_hs_soft_reset),      
.tx_lsfs_soft_reset             (tx_lsfs_soft_reset),    
.hs_mode                        (hs_mode),               
.ls_mode                        (ls_mode),               
.fs_mode                        (fs_mode),               
.fs_mode_pre                    (fs_mode_pre),           
.host_mode                      (host_mode),             
.opmode                         (opmode),                
.databus                        (databus),               
.txvalid                        (o_txvalid),             
.txvalidh                       (o_txvalidh),            
.datain                         (datain),                
.txbitstuffenable               (txbitstuffenable),      
.txbitstuffenableh              (txbitstuffenableh),     
.i_ded_ana                      (i_ded_ana),             
.test_fs_preamble_en            (test_fs_preamble_en),   
.test_fs_preamble               (test_fs_preamble),      
.test_hs_sof_reg                (test_hs_sof_reg),       
.lsfs_transmit                  (lsfs_transmit),         
.hs_sof                         (hs_sof),                
.txready                        (txready),               
.hs_hostdisconnect              (hs_hostdisconnect),     
.hspredrv_en                    (hspredrv_en),           
.hsdrv_en                       (hsdrv_en),              
.hsddi                          (hsddi),                 
.tx_eop_start                   (tx_eop_start),          
.lsfsdrv_en                     (lsfsdrv_en),            
.lsfsddi                        (lsfsddi),               
.lsfs_assert_sezero             (lsfs_assert_sezero),    
.debug_tx_hs_state              (debug_tx_hs_state),
.debug_eop_transmitted          (debug_eop_transmitted),
.debug_hs_bitstuff_en           (debug_hs_bitstuff_en),
.debug_pd_state                 (debug_pd_state),
.debug_tx_lsfs_state            (debug_tx_lsfs_state),
.debug_resume_eop               (debug_resume_eop),
.debug_remote_wakeup            (debug_remote_wakeup),
.debug_preamble_sent            (debug_preamble_sent),
.debug_ls_keep_alive            (debug_ls_keep_alive),
.debug_bitstuff_en              (debug_lsfs_bitstuff_en)
);
udc_rx_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r                      c_udc_rx_top ( 
.test_hs_rx_err_reg             (tm_hs_rx_err_reg),             
.afe_hsrx_rec_clk               (i_afe_hsrx_rec_clk),            
.rstn_eb_async                  (udc_rstn_cdr_async),            
.hs_clock                       (hs_clock),                      
.rstn_hs_clock                  (rstn_hs_clock),                 
.byte_clock                     (byte_clock),                    
.rstn_byte_clock                (rstn_byte_clock),               
.sieclock                       (sieclock),                      
.rstn_sieclock                  (rstn_sieclock),                 
.rx_hs_soft_reset               (rx_hs_soft_reset),              
.lsfs_dll_soft_reset            (lsfs_dll_soft_reset),           
.sync_det_soft_reset            (sync_det_soft_reset),           
.eop_det_soft_reset             (eop_det_soft_reset),            
.nrzi_dec_soft_reset            (nrzi_dec_soft_reset),           
.bitunstuff_soft_reset          (bitunstuff_soft_reset),         
.shift_reg_soft_reset           (shift_reg_soft_reset),          
.rx_cntrl_soft_reset            (rx_cntrl_soft_reset),           
.test_hs_sync_conf              (test_hs_sync_conf),             
.test_fs_eop_se0_en             (test_fs_eop_se0_en),            
.test_ls_eop_se0_en             (test_ls_eop_se0_en),            
.test_eop_se0_fs                (test_eop_se0_fs),               
.test_eop_se0_ls                (test_eop_se0_ls),               
.test_timeout_all_enable        (test_timeout_all_enable),       
.test_timeout_enable            (test_timeout_enable),           
.test_timeout_value             (test_timeout_value),            
.fslsserialmode_sync            (fslsserialmode_sync),           
.squelch                        (squelch),                       
.set1_dis                       (set1_dis),
.i_ted_squelch_ana              (utmi_ted_squelch_ana),          
.hs_mode                        (hs_mode),                       
.ls_mode                        (ls_mode),                       
.fs_mode                        (fs_mode),                       
.fs_mode_pre                    (fs_mode_pre),                   
.databus                        (databus),                       
.txvalid                        (o_txvalid),                     
.loopback_lsfs                  (loopback_lsfs),                 
.i_bist_on                      (i_bist_on),
.afe_hsrx_rec_data              (utmi_hsrx_rec_data),            
.afe_hsrx_rec_data_valid        (utmi_hsrx_rec_data_valid),      
.afe_hsrx_decision_error        (utmi_hsrx_rec_decision_error), 
.afe_lsfsrx_ana                 (lsfsrx_ana),            
.afe_rxdp_ana                   (rxdp_ana),                
.afe_rxdm_ana                   (rxdm_ana),                
.lsfs_transmit                  (lsfs_transmit),         
.se0_detected           (se0_detected),  
.eb_reset_wr_ind                (eb_reset_wr_ind),       
.rxactive                       (rxactive),              
.rxvalid                        (rxvalid),               
.rxvalidh                       (rxvalidh),      
.rxerror                        (rxerror),               
.dataout                        (dataout),               
.debug_eb_error                 (debug_eb_error),
.debug_cdr_error                (debug_cdr_error),
.debug_sync_detected            (debug_sync_detected),
.debug_eop_detected             (debug_eop_detected),
.debug_hs_eop_condition         (debug_hs_eop_condition),
.debug_normal_eop               (debug_normal_eop),
.debug_alignment_error          (debug_alignment_error),
.debug_no_eop                   (debug_no_eop),
.debug_hs_eop_detected          (debug_hs_eop_detected),
.hs_eb_data                     (hs_eb_data),
.hs_eb_data_valid               (hs_eb_data_valid),
.debug_se0_validated            (debug_se0_validated),
.debug_lsfs_eop_detected        (debug_lsfs_eop_detected),
.debug_bitunstuff_error         (debug_bitunstuff_error),
.debug_bus_state                (debug_bus_state),
.debug_phy_cnt                  (debug_phy_cnt),
.debug_sie_cnt                  (debug_sie_cnt),
.debug_start_flag               (debug_start_flag),
.debug_rxactive_reg             (debug_rxactive_reg),
.debug_deassert_rxactive_reg    (debug_deassert_rxactive_reg)
);
udc_cntrl_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r                       c_udc_cntrl ( 
.o_usb2_phy_spare               (o_usb2_phy_spare), 
.i_cdr_test_digout              (i_cdr_test_digout),
.databus                        (databus),                       
.i_bist_mode_en                 (i_bist_mode_en),
.i_bg_powergood                 (i_bg_powergood),                
.refclock                       (udc_refclock),                  
.rstn_refclock                  (rstn_refclock),                 
.hs_clock                       (hs_clock),                      
.rstn_hs_clock                  (rstn_hs_clock),                 
.byte_clock                     (byte_clock),                    
.rstn_byte_clock                (rstn_byte_clock),               
.sieclock                       (sieclock),                      
.rstn_sieclock                  (rstn_sieclock),                 
.usb2_1m_calib_clock            (o_usb2_1M_calib_clock),        
.usb2_calib_rstn                (udc_calib_rstn),                
.offset_correction_rstn         (offset_correction_rstn),
.primary_count_rstn             (primary_count_rstn),            
.udc_bc_calib_rstn              (udc_bc_calib_rstn),             
.xcvr_sie_rstn                  (xcvr_sie_rstn),                 
.pll_standalone                 (pll_standalone),        
.bist_mode_fs                    (bist_mode_fs),
.bist_mode_hs                    (bist_mode_hs),
.o_hstx_boost_deemp_off         (o_hstx_boost_deemp_off),
.idpullup                       (idpullup),
.i_bc_en                        (i_bc_en),
.scan_mode                      (scan_mode),                     
.suspendm                       (suspendm),                      
.pll_clkon                      (pll_clkon),             
.pll_clk_gate_ack               (pll_clk_gate_ack),
.powerdown                      (powerdown),                     
.sleepm                         (sleepm),                        
.xcvrselect                     (xcvrselect),                    
.xcvrselect_sync                (xcvrselect_sync),                       
.termselect                     (termselect),                    
.opmode                         (opmode),                        
.dppulldown                     (dppulldown),                  
.dmpulldown                     (dmpulldown),                  
.txvalid                        (txvalid),
.txvalidh                       (txvalidh),
.rxactive                       (rxactive),                      
.fslsserialmode                 (fslsserialmode),                
.tx_enable_n                    (tx_enable_n),                   
.tx_dat                         (tx_dat),                        
.tx_se0                         (tx_se0),                        
.tx_clockin             (tx_clockin),    
.hssi_mode              (hssi_mode),
.hssi_datain            (hssi_datain),
.hssi_txvalid           (hssi_txvalid),
.hssi_tx_enable         (hssi_tx_enable),
.hssi_ted_en            (hssi_ted_en),
.idle_rpu_enable        (idle_rpu_enable),
.udc_hsrx_rec_clk               (i_afe_hsrx_rec_clk),            
.i_hsrx_sampler_calib_done      (i_hsrx_sampler_calib_done),     
.i_afe_hsrx_rec_data            (i_afe_hsrx_rec_data),           
.i_afe_hsrx_rec_data_valid      (i_afe_hsrx_rec_data_valid),     
.i_afe_hsrx_rec_decision_error  (i_afe_hsrx_rec_decision_error), 
.i_afe_hsrx_diff_data           (i_afe_hsrx_diff_data),          
.i_afe_lsfsrx_ana               (i_afe_lsfsrx_ana),              
.test_tx_sq_cnt                 (test_tx_sq_cnt),
.test_calib_rstn_dt             (test_calib_rstn_dt),
.i_pll_coarse_code_done_ana     (i_pll_coarse_code_done_ana),    
.hs_clock_gate_ack              (hs_clock_gate_ack),
.i_ted_calib_done               (i_ted_calib_done),              
.i_ted_squelch_ana              (i_ted_squelch_ana),             
.i_ded_ana                      (i_ded_ana),                     
.o_bg_pd                        (o_bg_pd),                       
.o_bg_pd_bg_ok                  (o_bg_pd_bg_ok),                         
.i_rescal_calib_done    (i_rescal_calib_done),   
.i_res_calib_code       (i_res_calib_code),      
.loopback_ls                    (loopback_ls),                   
.loopback_fs                    (loopback_fs),                   
.loopback_hs                    (loopback_hs),                   
.bc_hstx_en                     (bc_hstx_en),                    
.hs_hostdisconnect              (hs_hostdisconnect),             
.utmi_hspredrv_en               (hspredrv_en),                   
.utmi_hsdrv_en                  (hsdrv_en),                      
.utmi_hsddi                     (hsddi),                         
.tx_eop_start                   (tx_eop_start),                  
.lsfsdrv_en                     (lsfsdrv_en),                    
.lsfsddi                        (lsfsddi),                       
.lsfs_assert_sezero             (lsfs_assert_sezero),            
.test_serx_en_cntrl_opmode01    (test_serx_en_cntrl_opmode01),
.test_ana_powerup               (test_ana_powerup),              
.test_linestate_fs_cnt_en       (test_linestate_fs_cnt_en),      
.test_linestate_ls_cnt_en       (test_linestate_ls_cnt_en),      
.test_linestate_ls_cnt          (test_linestate_ls_cnt),         
.test_linestate_fs_cnt          (test_linestate_fs_cnt),         
.test_hsrx_reg1                 (test_hsrx_reg1),                
.test_hsrx_reg2                 (test_hsrx_reg2),                
.test_hstx_reg1                 (test_hstx_reg1),                
.test_hstx_reg2                 (test_hstx_reg2),                
.test_hstx_reg3                 (test_hstx_reg3),                
.test_lsfs_rx_reg               (test_lsfs_rx_reg),              
.test_lsfs_tx_reg1              (test_lsfs_tx_reg1),             
.test_lsfs_tx_reg2              (test_lsfs_tx_reg2),             
.test_afe_common_reg1           (test_afe_common_reg1),          
.test_afe_common_reg2           (test_afe_common_reg2),          
.test_afe_common_reg3           (test_afe_common_reg3),          
.test_squelch_count_idle        (test_squelch_count_idle),       
.test_pll_reg11                 (test_pll_reg11),                
.test_pll_reg12                 (test_pll_reg12),                
.test_pll_reg13                 (test_pll_reg13),                
.test_pll_reg14                 (test_pll_reg14),                
.test_hscalib                   (test_hscalib[6:0]),
.test_fscalib                   (test_fscalib[6:0]),
.test_bccalib                   (test_bccalib[6:0]),
.test_fscalib_offset            (test_fscalib_offset),
.test_hscalib_offset            (test_hscalib_offset),
.test_bccalib_offset            (test_bccalib_offset),
.test_ana_block_en              (test_ana_block_en),
.test_txvalid_ungate            (test_txvalid_ungate),
.test_clipper_en                (test_clipper_en),
.test_hostdiscon_rst_reg        (test_hostdiscon_rst_reg), 
.test_serx_bias_en              (test_serx_bias_en),
.test_spare_out                 (test_spare_out), 
.debug_no_eop                   (debug_no_eop),
.debug_hs_eop_condition         (debug_hs_eop_condition),
.hs_eb_data                     (hs_eb_data),
.hs_eb_data_valid               (hs_eb_data_valid),
.hostdisconnect                 (hostdisconnect),                
.rx_dp                          (rx_dp),                         
.rx_dm                          (rx_dm),                         
.rx_rcv                         (rx_rcv),                        
.hssi_rx_clockout       (hssi_rx_clockout),
.hssi_dataout           (hssi_dataout),
.hssi_rxvalid           (hssi_rxvalid),
.hssi_squelch           (hssi_squelch),
.hssi_rxerror           (hssi_rxerror),
.hssi_ded_ana           (hssi_ded_ana),
.hssi_chirp_data        (hssi_chirp_data),
.debug_bc_state                 (debug_bc_state),
.bc_delay_cnt_reached_10us      (bc_delay_cnt_reached_10us),
.bc_delay_reached               (bc_delay_reached),
.i_rid_float_a_comp_sts         (i_rid_float_a_comp_sts),        
.i_rid_b_c_comp_sts             (i_rid_b_c_comp_sts),          
.dprpu1_en                    (dprpu1_en),                   
.dmrpu1_en                    (dmrpu1_en),                   
.dprpu2_en                    (dprpu2_en),                   
.dmrpu2_en                    (dmrpu2_en),                   
.dprpd_en                     (dprpd_en),                    
.dmrpd_en                     (dmrpd_en),                    
.o_hsrx_en                      (o_hsrx_en),                   
.o_hsrx_sampler_enable          (o_hsrx_sampler_enable),         
.o_txvalid                      (o_txvalid),
.o_txvalidh                     (o_txvalidh),
.bist_ana_powerup               (bist_ana_powerup),
.o_chirp_mode_en                (o_chirp_mode_en),             
.o_hstx_en                      (o_hstx_en),                   
.o_hstx_en_delayed              (o_hstx_en_delayed),           
.o_hspredrv_en                  (o_hspredrv_en),               
.o_hsdrv_en                     (o_hsdrv_en),                  
.o_hsddi                        (o_hsddi),                     
.o_lsfsrx_en                    (o_lsfsrx_en),                 
.o_serx_en                      (o_serx_en),                   
.o_serx_bias_en                 (o_serx_bias_en),             
.o_fs_edge_sel                  (o_fs_edge_sel),               
.o_lsfstx_en                    (o_lsfstx_en),                 
.o_lsfsdrv_en                   (o_lsfsdrv_en),                
.o_lsfs_ddi                     (o_lsfs_ddi),                  
.o_assert_sezero                (o_assert_sezero),             
.o_afe_suspendm_rx              (o_afe_suspendm_rx),           
.o_afe_suspendm_tx              (o_afe_suspendm_tx),           
.o_afe_hscalib_code             (o_afe_hscalib_code),
.o_afe_fscalib_code             (o_afe_fscalib_code),
.o_afe_bccalib_code             (o_afe_bccalib_code),
.o_afe_clipper_en               (o_afe_clipper_en),              
.o_otgc_vbusvalid_en            (o_otgc_vbusvalid_en),         
.o_otgc_absvalid_en             (o_otgc_absvalid_en),          
.o_ed_en                        (o_ed_en),                     
.o_ted_en                       (o_ted_en),                    
.o_pll_pso                      (o_pll_pso),                   
.o_pll_pso_delay                (o_pll_pso_delay),             
.o_pll_pd                       (o_pll_pd),                    
.o_pll_pd_ana                   (o_pll_pd_ana),                
.o_pll_standby                  (o_pll_standby),               
.o_pll_ldo_core_en              (o_pll_ldo_core_en),             
.o_pll_ldo_ref_en               (o_pll_ldo_ref_en),              
.o_pll_ldo_ref_core             (o_pll_ldo_ref_core),
.hs_clock_ungate                (hs_clock_ungate),
.pll_clockout_gate              (pll_gate),
.utmi_hsrx_rec_data             (utmi_hsrx_rec_data),            
.utmi_hsrx_rec_data_valid       (utmi_hsrx_rec_data_valid),      
.utmi_hsrx_rec_decision_error   (utmi_hsrx_rec_decision_error),  
.utmi_ted_squelch_ana           (utmi_ted_squelch_ana),          
.se0_detected                   (se0_detected),          
.fslsserialmode_sync            (fslsserialmode_sync),           
.lsfsrx_ana                     (lsfsrx_ana),                    
.squelch                        (squelch),                       
.hs_mode                        (hs_mode),                       
.hs_mode_cdr                    (hs_mode_cdr),                   
.ls_mode                        (ls_mode),                       
.fs_mode                        (fs_mode),                       
.fs_mode_pre                    (fs_mode_pre),                   
.host_mode                      (host_mode),                     
.loopback_lsfs                  (loopback_lsfs),                 
.all_calib_done                 (all_calib_done),                
.inv_calib_rstn_pulse           (inv_calib_rstn_pulse),          
.pri_counter_reset              (primary_count_reached),                 
.debug_lsfs_hostdisconnect      (debug_lsfs_hostdisconnect),
.debug_recovery_cnt_en          (debug_recovery_cnt_en),
.debug_clean_linestate          (debug_clean_linestate),
.debug_filter_cnt_en            (debug_filter_cnt_en),
.debug_host_opmode              (debug_host_opmode),
.debug_dev_opmode               (debug_dev_opmode),
.debug_afe_suspendm             (debug_afe_suspendm),   
.debug_otgc_vbusvalid_en        (debug_otgc_vbusvalid_en),      
.debug_otgc_absvalid_en         (debug_otgc_absvalid_en),       
.debug_o_bg_pd                  (debug_o_bg_pd),                
.debug_o_bg_pd_bg_ok            (debug_o_bg_pd_bg_ok),          
.debug_afe_clipper_en           (debug_afe_clipper_en), 
.debug_pullup_en                (debug_pullup_en),
.debug_ana_enable               (debug_ana_enable),
.debug_fscalib_code             (debug_fscalib_code),
.debug_hscalib_code             (debug_hscalib_code),
.debug_bccalib_code             (debug_bccalib_code),
.raw_squelch_ana                (raw_squelch_ana),
.internal_opmode(internal_opmode),
.rxdp_ana(rxdp_ana),                     
.rxdm_ana(rxdm_ana),                     
.i_afe_rxdp_ana(i_afe_rxdp_ana),                         
.i_afe_rxdm_ana(i_afe_rxdm_ana),                         
.lane_reverse(lane_reverse),
.hsrx_diff_data(hsrx_diff_data),
.linestate_sel(linestate_sel),
.filter_linestate_d(filter_linestate_d),
.fmeda_linestate_se0(fmeda_linestate_se0)
);
endmodule
`timescale 1ns/1ps
module cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r(
inout           DP,
inout           DM,
inout           ID,
inout           VBUS,
inout           RTRIM,
`ifdef CDNS_PHY_PWR_AWARE
inout           AVDD_CORE,
inout           AVDD_IO,
inout           gnd,
inout           AVDD_IO_HV,
inout           DVDD_CORE,
`else
`endif
input           refclock,
input           apb_pclk,
input           tap_tck,
input           psm_clock,
input           scan_hsclock,
input           scan_hssiclock,
input           scan_sieclock,
input           scan_clock,
input           hssi_tx_clockin ,
output          sieclock,
output          pll_clockout,
output          hssi_tx_clockout,
output          hssi_rx_clockout,
output          scan_ats_hsclock,
output          scan_ats_hssiclock,
output          scan_ats_sieclock,
input           reset,
input           databus_reset,
input           apb_presetn,
input           tap_trst_n,
input           psm_rstn,
input           scan_mode,
input           scan_en,
input           scan_en_cg,
input           scan_ats_mode,
input   [34:0]  scan_in,
output  [34:0]  scan_out,
input           suspendm,
input           sleepm,
input           termselect,
input           databus16_8,
input           dppulldown,
input           dmpulldown,
input           txbitstuffenable,
input           txbitstuffenableh,
input   [1:0]   powerdown,
input   [1:0]   opmode,
input   [1:0]   xcvrselect,
output          hostdisconnect,
output  [1:0]   linestate,
input           txvalid,
input           txvalidh,
input   [15:0]  datain,
output          txready,
output          rxactive,
output          rxerror,
output          rxvalid,
output          rxvalidh,
output  [15:0]  dataout,
input           fslsserialmode,
input           tx_dat,
input           tx_enable_n,
input           tx_se0,
input           idle_rpu_enable,
output          rx_dm,
output          rx_dp,
output          rx_rcv,
input           hssi_mode,
input   [1:0]   hssi_datain,
input   [1:0]   hssi_txvalid,
input           hssi_tx_enable,
input           hssi_ted_en,
output  [3:0]   hssi_dataout,
output          hssi_rxvalid,
output          hssi_squelch,
output          hssi_rxerror,
output          hssi_ded_ana,
output          hssi_chirp_data,
input           pso_disable,
input   [1:0]   pso_disable_sel,
input   [1:0]   usb2_phy_arch,
input   [1:0]   pll_clk_sel,
input           pll_clkon,
input           pll_standalone,
input           lane_reverse,
input   [3:0]   pllrefsel,
input   [1:0]   vbus_sel,
input           option_n,
input           option_cv,
input           idpullup,
output          iddig,
output          vbusvalid,
output          sessvld,
input           adp_probe_en,
input           adp_en,
input           adp_sense_en,
input           adp_sink_current_en,
input           adp_source_current_en,
output          adp_probe_ana,
output          adp_sense_ana,
input           bc_en,
input           dm_vdat_ref_comp_en,
input           dm_vlgc_comp_en,
input           dp_vdat_ref_comp_en,
input           idm_sink_en,
input           idp_sink_en,
input           idp_src_en,
input           rid_float_comp_en,
input           rid_nonfloat_comp_en,
input           vdm_src_en,
input           vdp_src_en,
output          dcd_comp_sts,
output          dm_vdat_ref_comp_sts,
output          dm_vlgc_comp_sts,
output          dp_vdat_ref_comp_sts,
output          rid_a_comp_sts,
output          rid_b_comp_sts,
output          rid_c_comp_sts,
output          rid_float_comp_sts,
output          rid_gnd_comp_sts,
input           pll_bypass_mode,
input           iddq_mode,
input   [3:0]   bist_mode_sel,
input           bist_on,
input           bist_mode_en,
input   [1:0]   loopback,
input   [7:0]   usb2_phy_spare_in,
output          bist_complete,
output          bist_error,
output  [7:0]   bist_error_count,
output  [7:0]   usb2_phy_spare_out,
input           apb_pwrite,
input           apb_penable,
input           apb_pselx,
input   [7:0]   apb_paddr,
input   [7:0]   apb_pwdata,
output          apb_pready,
output          apb_pslverr,
output  [7:0]   apb_prdata,
output          usb2_phy_irq,
input           tap_tdi,
input           tap_tms,
output          tap_tdo,
output          tap_tdoen
);
wire            clkout_tx;
wire            clkout_rxp0;
wire            clkout_rxp3;
wire            o_fb_clk;
wire            o_div_refclk;
wire            dmrpd_en;
wire            dmrpu1_en;
wire            dmrpu2_en;
wire            dprpd_en;
wire            dprpu1_en;
wire            dprpu2_en;
wire            o_dmrpd_en;
wire            o_dmrpu1_en;
wire            o_dmrpu2_en;
wire            o_dprpd_en;
wire            o_dprpu1_en;
wire            o_dprpu2_en;
wire            ted_squelch;  
wire            cdr_comp_out;
wire    [6:0]   deserializer_data;
wire    [6:0]   clk_sel;
wire    [6:0]   data_sel;
wire            hsrx_enable; 
wire            hsrx_enable_d;
wire            hsrx_en_clipper; 
wire            suspendm_rx; 
wire            hsddi;         
wire            hsdrv_en;      
wire            hspredrv_en;   
wire            hstx_en;       
wire            hstx_en_delayed;
wire            chirp_mode_en; 
wire            chirp_mode_en_aon; 
wire            o_afe_suspendm_tx;
wire            fs_edge_sel;   
wire            lsfs_ddi;      
wire            lsfsdrv_en;    
wire            lsfstx_en;     
wire            o_afe_clipper_en;
wire            o_afe_clipper_en_aon;
wire            lsfsrx_ana;
wire            lsfsrx_en;     
wire            assert_sezero;
wire            rxdm_ana;
wire            rxdp_ana;
wire            serx_en;
wire            serx_bias_en;
wire            adp_probe_ana_core;    
wire            adp_sense_ana_core;    
wire            adp_en_core;         
wire            adp_probe_en_core;   
wire            adp_sense_en_core;   
wire            adp_sink_current_en_core;
wire            adp_source_current_en_core;
wire            pll_pd;        
wire            pll_pso;       
wire            pll_pso_delay; 
wire            pll_standby;   
wire    [8:0]   pll_coarse_code;
wire            pll_pfd_pd;   
wire            pll_startloop;
wire            pll_ldo_core_en;
wire            pll_ldo_core_en_tx;
wire            pll_ldo_ref_en;
wire            otgc_sessvalid_ana_core;
wire            otgc_id_ana_core; 
wire            otgc_vbusvalid_ana_core;
wire            otgc_absvalid_en;      
wire            o_otgc_id_pullup_en_aon;     
wire            o_otgc_id_pullup_en ;
wire            otgc_vbusvalid_en;     
wire            w_dm_vdat_ref_comp_sts;
wire            w_dp_vdat_ref_comp_sts;
wire            w_rid_float_b_c_comp_sts_core;
wire            w_rid_float_a_comp_sts_core;
wire            w_idm_sink_en;            
wire            w_idm_src_en;            
wire            w_idp_sink_en;            
wire            w_idp_src_en;            
wire            w_vdm_src_en;            
wire            w_vdp_src_en;            
wire            w_dm_vdat_ref_comp_en_core;
wire            w_dp_vdat_ref_comp_en_core;
wire            w_rid_a_ref_en_core;    
wire            w_rid_b_c_comp_en_core;  
wire            w_rid_b_ref_en_core;     
wire            w_rid_c_ref_en_core;    
wire            w_rid_float_a_comp_en_core;
wire            w_rid_float_ref_en_core; 
wire            w_rid_float_src_en_core; 
wire            w_rid_nonfloat_src_en_core;
wire            ded_ana;
wire            ted_comp_out_up;  
wire            ted_comp_out_down;
wire            ed_en;         
wire            ted_en;        
wire    [3:0]   ted_calib_code_up; 
wire    [3:0]   ted_calib_code_down;
wire            ted_calib_mode_up; 
wire            ted_calib_mode_down;
wire            bg_powergood_core;
wire            bg_pd;         
wire            bg_pd_ok;      
wire            calib_cmp_out;
wire    [5:0]   res_calib_code;
wire    [5:0]   afe_fscalib_code;
wire    [5:0]   afe_hscalib_code;
wire    [5:0]   afe_bccalib_code;
wire    [12:0]  tie_low;
wire    [5:0]   pll_ldo_ref_core;
wire    [7:0]   afe_tx_reg0;
wire    [7:0]   afe_tx_reg1;
wire    [7:0]   afe_tx_reg2;
wire    [7:0]   afe_tx_reg3;
wire    [7:0]   afe_tx_reg4;
wire    [7:0]   afe_tx_reg5;
wire    [7:0]   afe_tx_reg6;
wire    [7:0]   afe_tx_reg7;
wire    [7:0]   afe_tx_reg8;
wire    [7:0]   afe_tx_reg9;
wire    [7:0]   afe_tx_reg10;
wire    [7:0]   afe_tx_reg11;
wire    [7:0]   afe_tx_reg12;
wire    [7:0]   afe_rx_reg0 ;
wire    [7:0]   afe_rx_reg1 ;
wire    [7:0]   afe_rx_reg2 ;
wire    [7:0]   afe_rx_reg3 ;
wire    [7:0]   afe_rx_reg4 ;
wire    [7:0]   afe_rx_reg5 ;
wire    [7:0]   afe_rx_reg6 ;
wire    [7:0]   afe_bc_reg0;
wire    [7:0]   afe_bc_reg1;
wire    [7:0]   afe_bc_reg2;
wire    [7:0]   afe_bc_reg3;
wire    [7:0]   afe_bc_reg4;
wire    [7:0]   afe_bc_reg5;
wire    [7:0]   afe_bc_reg6;
wire    [7:0]   afe_calib_reg0;
wire    [7:0]   pll_reg0;
wire    [7:0]   pll_reg1;
wire    [7:0]   pll_reg2;
wire    [7:0]   pll_reg3;
wire    [7:0]   pll_reg4;
wire    [7:0]   pll_reg5;
wire    [7:0]   afe_bg_reg0;
wire    [7:0]   afe_bg_reg1;
wire    [7:0]   afe_bg_reg2;
wire    [7:0]   afe_bg_reg3;
wire            hstx_boost_deemp_off;
wire            calib_pd_bias_comp;
wire    [7:0]   cdr_reg9;
wire    [7:0]   cdr_reg10;
wire    [7:0]   cdr_reg11;
wire    [7:0]   cdr_reg12;
wire    [7:0]   cdr_reg0;
wire    [7:0]   cdr_reg1;
wire    [7:0]   cdr_reg2;
wire    [7:0]   cdr_reg3;
wire    [7:0]   cdr_reg4;
wire    [7:0]   cdr_reg5;
wire    [7:0]   cdr_reg6;
wire    [7:0]   o_cdr_test_digout;
wire            o_pll_div_refclk;
wire            o_pll_fb_clk;
wire            o_ted_calib_done;
wire    [1:0]   filter_linestate_d, internal_opmode, tm_idpullup, o_xcvrselect, test_aon_common_reg1, xcvrselect_sync, o_loopback;
wire            fslsserialmode_sync, hsrx_diff_data, linestate_sel, pll_clk_gate_ack;                
wire            deep_sleep, iso_utmi, o_bist_on, o_bist_hostdevice_sel, bist_speed_sel,bist_interface_sel, o_hsrx_sampler_enable;
wire            databus_store, o_termselect, o_dppulldown, o_dmpulldown, bist_mode_fs, bist_mode_hs, o_pll_coarse_done, o_pll_coarse_done_ana, o_bist_mode_en;
wire            o_usb2_calib_rstn, test_vbusvld_sessvldn, test_pll_480_clock_gate_ovr;
wire    [1:0]   o_powerdown, o_opmode;
wire            bg_powergood;
wire    [5:0]   cdr_calib_code;
wire    [3:0]   usb2_phy_spare_out_pma;
assign cdr_reg12 = 8'd0;
assign scan_out = 35'd0;
udc_avdd_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_udc_avdd_top (
.dvdd_core_powergood         (dvdd_core_powergood)              ,
.cdr_eb_wr_reset             (cdr_eb_wr_reset)             ,
.o_pll_fb_clk                (o_fb_clk)                    ,
.o_pll_div_refclk            (o_div_refclk)                ,
.o_hsrx_calib_active         (cdr_calib_active)            ,
.o_hsrx_calib_code           (cdr_calib_code)              ,
.o_hsrx_clk_gate             (clk_gate)                    , 
.o_ana_hsrx_enable           (hsrx_enable)                 ,  
.o_ana_hsrx_enable_delayed   (hsrx_enable_d)               ,  
.o_cdr_reg9                  (cdr_reg9)                    ,  
.o_cdr_reg10                 (cdr_reg10)                   ,  
.o_cdr_reg11                 (cdr_reg11)                   ,  
.o_hsrx_diff_data            (cdr_hsrx_diff_data)          ,  
.o_hsrx_rec_clk              (cdr_hsrx_rec_clk)            ,  
.o_hsrx_rec_data             (cdr_hsrx_rec_data)           ,  
.o_hsrx_rec_data_valid       (cdr_hsrx_rec_data_valid)     ,  
.o_hsrx_rec_decision_error   (cdr_hsrx_rec_decision_error) ,  
.o_hsrx_sampler_calib_done   (cdr_hsrx_sampler_calib_done) ,  
.o_ana_ted_squelch           (ted_squelch_ana)             ,
.i_sampler_clk               (sampler_clk)                 ,  
.i_hsrx_calib_comp_out       (cdr_comp_out)                ,  
.i_sampler_data              (sampler_data)                ,  
.i_ana_pll_coarse_code_done  (o_pll_coarse_done)           ,  
.i_ted_squelch_ana           (ted_squelch)                 ,  
.i_calib_clk                 (o_usb2_calib_clock)          ,  
.i_calib_rstb                (o_usb2_calib_rstn)           ,  
.i_cdr_reg0                  (cdr_reg0)                    ,  
.i_cdr_reg1                  (cdr_reg1)                    ,  
.i_cdr_reg2                  (cdr_reg2)                    ,  
.i_cdr_reg3                  (cdr_reg3)                    ,  
.i_cdr_reg4                  (cdr_reg4)                    ,  
.i_cdr_reg5                  (cdr_reg5)                    ,  
.i_chirp_mode_en             (chirp_mode_en_aon)           ,  
.i_hsrx_enable               (o_hsrx_en)                   ,  
.i_hsrx_sampler_enable       (o_hsrx_sampler_enable)       ,
.i_rstb                      (o_rstn_cdr_async)            ,  
.i_ted_calib_done            (o_ted_calib_done)            ,
.i_ted_en                    (o_avdd_ted_en)               ,
.i_pll_fb_clk                (o_pll_fb_clk)                ,
.i_pll_div_refclk            (o_pll_div_refclk)            ,
.test_pll_480_clock_gate_ovr (test_pll_480_clock_gate_ovr) ,
.pll_clockout                (pll_clockout)                ,
.pll_clk_gate_ack            (pll_clk_gate_ack)            ,
.pll_gate                    (o_pll_gate)                  ,
.pll_clk_sel                 (pll_clk_sel)                 ,
.i_pll_480p0_rx_clk          (clkout_tx)                   ,
.rstn_pll_clockout           (o_rstn_pll_clockout)         ,
.reset                       (reset)                       ,
.iddq_mode                   (iddq_mode)                   ,
.scan_mode                   (scan_mode)                   ,
.scan_hsclock                (scan_hsclock)                ,
.scan_sieclock               (scan_sieclock)               ,
.scan_en_cg                  (scan_en_cg)                  ,
.o_cdr_test_digout           (o_cdr_test_digout)
);
udc_dvdd_aon_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r                 c_udc_dvdd_aon(
.sieclock                       (sieclock),                      
.xcvr_aon_rstn                  (xcvr_aon_rstn),                 
.databus_reset                  (databus_reset),
.databus16_8                    (databus16_8),                   
.linestate_sel                  (linestate_sel),
.filter_linestate_d             (filter_linestate_d),
.internal_opmode                (internal_opmode),
.fslsserialmode_sync            (fslsserialmode_sync),
.lane_reverse                   (lane_reverse),                  
.i_afe_rxdp_ana                 (rxdp_ana),                      
.i_afe_rxdm_ana                 (rxdm_ana),                      
.i_ted_squelch_ana              (ted_squelch_ana),               
.hsrx_diff_data                 (hsrx_diff_data),
.test_afe_common_reg1           (test_aon_common_reg1),          
.test_vbusvld_sessvldn          (test_vbusvld_sessvldn),
.test_idpullup                  (tm_idpullup),                   
.idpullup                       (idpullup),                      
.i_afe_clipper_en               (o_afe_clipper_en_aon)  ,
.dprpu1_en                      (dprpu1_en),                     
.dmrpu1_en                      (dmrpu1_en),                     
.dprpu2_en                      (dprpu2_en),                     
.dmrpu2_en                      (dmrpu2_en),                     
.dprpd_en                       (dprpd_en),                      
.dmrpd_en                       (dmrpd_en),                      
.i_serx_en                      (serx_en_aon),
.i_serx_bias_en                 (serx_bias_en_aon),              
.i_otgc_vbusvalid_ana           (otgc_vbusvalid_ana_core),       
.i_otgc_sessvalid_ana           (otgc_sessvalid_ana_core),       
.i_otgc_id_ana                  (otgc_id_ana_core),              
.i_bg_powergood                 (bg_powergood_core),             
.avdd_core_powergood            (avdd_core_powergood),
.o_powerdown                    (o_powerdown),
.linestate                      (linestate),                     
.o_lane_reverse                 (o_lane_reverse),                
.o_lane_reverse_aon             (o_lane_reverse_aon),            
.iddig                          (iddig),                         
.vbusvalid                      (vbusvalid),                     
.sessvld                        (sessvld),                       
.o_afe_clipper_en               (o_afe_clipper_en)      ,
.o_dprpu1_en                    (o_dprpu1_en),                   
.o_dmrpu1_en                    (o_dmrpu1_en),                   
.o_dprpu2_en                    (o_dprpu2_en),                   
.o_dmrpu2_en                    (o_dmrpu2_en),                   
.o_dprpd_en                     (o_dprpd_en),                    
.o_dmrpd_en                     (o_dmrpd_en),                    
.o_serx_en                      (serx_en),
.o_serx_en_aon                  (o_serx_en_aon),
.o_serx_bias_en                 (serx_bias_en),                  
.o_otgc_id_pullup_en            (o_otgc_id_pullup_en),           
.o_otgc_id_pullup_en_aon        (o_otgc_id_pullup_en_aon),       
.o_databus_store                (databus_store),
.rxdp_ana                       (rxdp),
.rxdm_ana                       (rxdm),
.o_bg_powergood                 (bg_powergood),                  
.o_bg_powergood_ats             (bg_powergood_ats),
.xcvrselect_sync                (xcvrselect_sync),               
.o_afe_rxdm_ana                 (o_afe_rxdm_ana),
.o_afe_rxdp_ana                 (o_afe_rxdp_ana),
.avdd_iso                       (avdd_iso),
.psm_clock                      (psm_clock),
.psm_rstn                       (psm_rstn),                      
.powerdown                      (powerdown),                     
.i_pso_disable                  (pso_disable),
.i_pso_disable_sel              (pso_disable_sel),
.scan_mode                      (scan_mode),                     
.scan_ats_mode                  (scan_ats_mode),
.scan_sieclock                  (scan_sieclock),
.deep_sleep_en1_in              (1'b0),
.deep_sleep_en2_in              (1'b0),
.deep_sleep_en1_out             (deep_sleep_en1_out),
.deep_sleep_en2_out             (deep_sleep_en2_out),
.deep_sleep_en1_out_l3          (deep_sleep_en1_out_l3),
.deep_sleep_en2_out_l3          (deep_sleep_en2_out_l3),
.deep_sleep                     (deep_sleep),
.iso_utmi                       (iso_utmi),                      
.iso_xcvr                       (iso_xcvr),                      
.i_bist_mux_resets              (o_bist_mux_resets),
.i_bist_on                      (o_bist_on),
.i_bist_hostdevice_sel          (o_bist_hostdevice_sel),
.i_bist_complete                (bist_complete),
.i_bist_mode_en                 (o_bist_mode_en),
.bist_speed_sel                 (bist_speed_sel),                
.bist_interface_sel             (bist_interface_sel),
.reset                          (reset),
.suspendm                       (suspendm),                      
.sleepm                         (sleepm),
.termselect                     (termselect),                    
.dppulldown                     (dppulldown),                    
.dmpulldown                     (dmpulldown),                    
.xcvrselect                     (xcvrselect),                    
.opmode                         (opmode),                        
.txvalid                        (txvalid),
.txvalidh                       (txvalidh),
.fslsserialmode                 (fslsserialmode),
.hssi_mode                      (hssi_mode),
.pll_standalone                 (pll_standalone),
.adp_en                         (adp_en),
.bc_en                          (bc_en),
.iddq_mode                      (iddq_mode),
.loopback                       (loopback),
.pll_clkon                      (pll_clkon),
.o_reset                        (o_reset),
.o_suspendm                     (o_suspendm),
.o_sleepm                       (o_sleepm),
.o_termselect                   (o_termselect),
.o_dppulldown                   (o_dppulldown),
.o_dmpulldown                   (o_dmpulldown),
.o_xcvrselect                   (o_xcvrselect),
.o_opmode                       (o_opmode),
.o_txvalid                      (o_txvalid),
.o_txvalidh                     (o_txvalidh),
.o_fslsserialmode               (o_fslsserialmode),
.o_hssi_mode                    (o_hssi_mode),
.o_pll_standalone               (o_pll_standalone),
.o_adp_en                       (w_adp_en),
.o_bc_en                        (w_bc_en),
.o_loopback                     (o_loopback),
.o_bist_mode_fs                 (bist_mode_fs),
.o_bist_mode_hs                 (bist_mode_hs),
.o_tie_low                      (tie_low),
.o_pll_clkon                    (o_pll_clkon)
);
udc_dvdd_sw_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_udc_dvdd_sw_top(
.i_bist_mode_en                  (bist_mode_en)                  ,
.cdr_eb_wr_reset                 (cdr_eb_wr_reset)               ,
.o_usb2_calib_clock              (o_usb2_calib_clock)            ,
.refclock                        (refclock)                      ,
.scan_clock                      (scan_clock)                    ,
.scan_hsclock                    (scan_hsclock)                  ,  
.scan_hssiclock                  (scan_hssiclock)                ,  
.scan_sieclock                   (scan_sieclock)                 ,  
.apb_pclk                        (apb_pclk)                      ,
.tap_tck                         (tap_tck)                       ,
.hssi_tx_clockin                 (hssi_tx_clockin)               ,  
.i_pll_480p0_clk                 (clkout_tx)                     ,
.i_pll_480p0_vco_clk             (clkout_tx)                     ,
.pll_clk_gate_ack                (pll_clk_gate_ack)              ,
.reset                           (o_reset)                       , 
.apb_presetn                     (apb_presetn)                   , 
.tap_trst_n                      (tap_trst_n)                    , 
.sieclock                        (sieclock)                      , 
.hssi_tx_clockout                (hssi_tx_clockout)              ,
.hssi_rx_clockout                (hssi_rx_clockout)              ,
.o_fb_clk                        (o_pll_fb_clk)                  ,
.o_div_refclock                  (o_pll_div_refclk)              ,
.xcvr_aon_rstn                   (xcvr_aon_rstn)                 ,
.scan_ats_hsclock                (scan_ats_hsclock)              ,
.scan_ats_hssiclock              (scan_ats_hssiclock)            ,
.scan_ats_sieclock               (scan_ats_sieclock)             ,
.pll_gate                        (o_pll_gate)                    ,
.rstn_pll_clockout               (o_rstn_pll_clockout)           ,
.scan_en                         (scan_en)                       , 
.scan_en_cg                      (scan_en_cg)                    , 
.scan_mode                       (scan_mode)                     , 
.scan_ats_mode                   (scan_ats_mode)                 , 
.sleepm                          (o_sleepm)                      , 
.suspendm                        (o_suspendm)                    ,
.databus16_8                     (databus16_8)                   , 
.txbitstuffenable                (txbitstuffenable)              ,
.txbitstuffenableh               (txbitstuffenableh)             , 
.dppulldown                      (o_dppulldown)                  ,  
.dmpulldown                      (o_dmpulldown)                  ,  
.xcvrselect                      (o_xcvrselect)                  ,  
.termselect                      (o_termselect)                  ,  
.opmode                          (o_opmode)                      ,  
.powerdown                       (o_powerdown)                   ,
.xcvrselect_sync                 (xcvrselect_sync)               ,
.databus_store                   (databus_store)                 ,
.hostdisconnect                  (hostdisconnect)                , 
.filter_linestate_d              (filter_linestate_d)            ,
.linestate_sel                   (linestate_sel)                 ,
.internal_opmode                 (internal_opmode)               ,
.txvalid                         (o_txvalid)                     ,
.txvalidh                        (o_txvalidh)                    ,
.datain                          (datain)                        ,  
.txready                         (txready)                       ,  
.rxactive                        (rxactive)                      ,  
.rxvalid                         (rxvalid)                       ,  
.rxvalidh                        (rxvalidh)                      ,  
.rxerror                         (rxerror)                       ,  
.dataout                         (dataout)                       ,  
.fslsserialmode                  (o_fslsserialmode)              ,  
.tx_enable_n                     (tx_enable_n)                   ,  
.tx_dat                          (tx_dat)                        ,  
.tx_se0                          (tx_se0)                        ,  
.idle_rpu_enable                 (idle_rpu_enable)               ,
.rx_dp                           (rx_dp)                         ,  
.rx_dm                           (rx_dm)                         ,  
.rx_rcv                          (rx_rcv)                        ,  
.fslsserialmode_sync             (fslsserialmode_sync)           ,
.hssi_mode                       (o_hssi_mode)                   ,
.hssi_datain                     (hssi_datain)                   ,
.hssi_txvalid                    (hssi_txvalid)                  ,
.hssi_tx_enable                  (hssi_tx_enable)                ,
.hssi_ted_en                     (hssi_ted_en)                   ,
.hssi_dataout                    (hssi_dataout)                  ,
.hssi_rxvalid                    (hssi_rxvalid)                  ,
.hssi_squelch                    (hssi_squelch)                  ,
.hssi_rxerror                    (hssi_rxerror)                  ,
.hssi_ded_ana                    (hssi_ded_ana)                  ,
.hssi_chirp_data                 (hssi_chirp_data)               ,
.pll_clkon                       (o_pll_clkon)                   ,  
.pll_standalone                  (o_pll_standalone)              ,  
.pllrefsel                       (pllrefsel)                     , 
.lane_reverse                    (o_lane_reverse_aon)            , 
.iddig                           (iddig)                         ,
.vbusvalid                       (vbusvalid)                     , 
.sessvld                         (sessvld)                       , 
.adp_en                          (w_adp_en)                      ,  
.adp_probe_en                    (adp_probe_en)                  ,  
.adp_sense_en                    (adp_sense_en)                  ,  
.adp_sink_en                     (adp_sink_current_en)           ,  
.adp_source_en                   (adp_source_current_en)         ,  
.adp_probe_sts                   (adp_probe_ana)                 ,  
.adp_sense_sts                   (adp_sense_ana)                 ,  
.bc_en                           (w_bc_en)                       ,  
.idp_src_en                      (idp_src_en)                    ,  
.idp_sink_en                     (idp_sink_en)                   ,  
.idm_sink_en                     (idm_sink_en)                   ,  
.vdp_src_en                      (vdp_src_en)                    ,  
.vdm_src_en                      (vdm_src_en)                    ,  
.dp_vdat_ref_comp_en             (dp_vdat_ref_comp_en)           ,  
.dm_vdat_ref_comp_en             (dm_vdat_ref_comp_en)           ,  
.dm_vlgc_comp_en                 (dm_vlgc_comp_en)               ,  
.rid_float_comp_en               (rid_float_comp_en)             ,  
.rid_nonfloat_comp_en            (rid_nonfloat_comp_en)          ,  
.dcd_comp_sts                    (dcd_comp_sts)                  ,  
.dp_vdat_ref_comp_sts            (dp_vdat_ref_comp_sts)          ,  
.dm_vdat_ref_comp_sts            (dm_vdat_ref_comp_sts)          ,  
.dm_vlgc_comp_sts                (dm_vlgc_comp_sts)              ,  
.rid_a_comp_sts                  (rid_a_comp_sts)                ,  
.rid_b_comp_sts                  (rid_b_comp_sts)                ,  
.rid_c_comp_sts                  (rid_c_comp_sts)                ,  
.rid_float_comp_sts              (rid_float_comp_sts)            ,  
.rid_gnd_comp_sts                (rid_gnd_comp_sts)              ,  
.bist_mode_sel                   (bist_mode_sel)                 , 
.bist_on                         (bist_on)                       ,
.loopback                        (o_loopback)                    , 
.iddq_mode                       (iddq_mode)                     , 
.i_usb2_phy_spare                (usb2_phy_spare_in[3:0])        , 
.bist_mode_hs                    (bist_mode_hs)                  ,
.bist_mode_fs                    (bist_mode_fs)                  ,
.raw_squelch_ana                 (usb2_phy_spare_out_pma[0])     ,
.bist_complete                   (bist_complete)                 ,
.bist_error                      (bist_error)                    , 
.bist_error_count                (bist_error_count)              , 
.bist_speed_sel                  (bist_speed_sel)                ,
.bist_interface_sel              (bist_interface_sel)            ,
.o_bist_mode_en                  (o_bist_mode_en)                ,
.o_bist_hostdevice_sel           (o_bist_hostdevice_sel)         ,
.o_bist_on                       (o_bist_on)                     ,
.o_bist_mux_resets               (o_bist_mux_resets)             ,
.o_usb2_phy_spare                (usb2_phy_spare_out)            , 
.apb_paddr                       (apb_paddr)                     ,
.apb_pwdata                      (apb_pwdata)                    , 
.apb_pwrite                      (apb_pwrite)                    , 
.apb_penable                     (apb_penable)                   ,
.apb_pselx                       (apb_pselx)                     ,
.apb_prdata                      (apb_prdata)                    , 
.apb_pready                      (apb_pready)                    ,
.apb_pslverr                     (apb_pslverr)                   ,
.tap_tdi                         (tap_tdi)                       ,
.tap_tms                         (tap_tms)                       ,
.tap_tdo                         (tap_tdo)                       ,
.tap_tdoen                       (tap_tdoen)                     ,
.dprpu1_en                       (dprpu1_en)                     ,  
.dmrpu1_en                       (dmrpu1_en)                     ,  
.dprpu2_en                       (dprpu2_en)                     ,  
.dmrpu2_en                       (dmrpu2_en)                     ,  
.dprpd_en                        (dprpd_en)                      ,  
.dmrpd_en                        (dmrpd_en)                      ,  
.hsrx_diff_data                  (hsrx_diff_data)                ,
.i_hsrx_sampler_calib_done       (cdr_hsrx_sampler_calib_done)   ,  
.i_afe_hsrx_rec_clk              (cdr_hsrx_rec_clk)              ,  
.i_afe_hsrx_rec_data             (cdr_hsrx_rec_data)             ,  
.i_afe_hsrx_rec_data_valid       (cdr_hsrx_rec_data_valid)       ,  
.i_afe_hsrx_rec_decision_error   (cdr_hsrx_rec_decision_error)   ,  
.i_afe_hsrx_diff_data            (cdr_hsrx_diff_data)            ,  
.i_cdr_reg9                      (cdr_reg9)                      ,  
.i_cdr_reg10                     (cdr_reg10)                     ,  
.i_cdr_reg11                     (cdr_reg11)                     ,  
.i_cdr_reg12                     (cdr_reg12)                     ,  
.o_cdr_reg0                      (cdr_reg0)                      ,  
.o_cdr_reg1                      (cdr_reg1)                      ,  
.o_cdr_reg2                      (cdr_reg2)                      ,  
.o_cdr_reg3                      (cdr_reg3)                      ,  
.o_cdr_reg4                      (cdr_reg4)                      ,  
.o_cdr_reg5                      (cdr_reg5)                      ,  
.o_cdr_reg6                      (cdr_reg6)                      ,  
.o_afe_suspendm_rx               (suspendm_rx)                   , 
.o_hsrx_en                       (o_hsrx_en)                     ,  
.o_hsrx_en_clipper               (hsrx_en_clipper)               ,  
.o_hsrx_sampler_enable           (o_hsrx_sampler_enable)         ,  
.o_rstn_cdr_async                (o_rstn_cdr_async)              ,
.udc_calib_rstn                  (o_usb2_calib_rstn)             ,
.o_hsddi                         (hsddi)                         ,
.o_hsdrv_en                      (hsdrv_en)                      , 
.o_hspredrv_en                   (hspredrv_en)                   ,
.o_hstx_en                       (hstx_en)                       , 
.o_hstx_en_delayed               (hstx_en_delayed)               ,
.o_hstx_boost_deemp_off          (hstx_boost_deemp_off)          ,
.o_chirp_mode_en                 (chirp_mode_en)                 ,
.o_chirp_mode_en_aon             (chirp_mode_en_aon)             ,
.o_afe_suspendm_tx               (o_afe_suspendm_tx)             ,
.o_fs_edge_sel                   (fs_edge_sel)                   , 
.o_lsfs_ddi                      (lsfs_ddi)                      ,
.o_lsfsdrv_en                    (lsfsdrv_en)                    , 
.o_lsfstx_en                     (lsfstx_en)                     ,
.o_afe_clipper_en                (o_afe_clipper_en_aon)          ,
.o_assert_sezero                 (assert_sezero)                 ,
.i_afe_lsfsrx_ana                (lsfsrx_ana)                    , 
.o_lsfsrx_en                     (lsfsrx_en)                     ,
.i_afe_rxdp_ana                  (o_afe_rxdp_ana)                ,  
.i_afe_rxdm_ana                  (o_afe_rxdm_ana)                ,  
.rxdp_ana                        (rxdp)                          ,
.rxdm_ana                        (rxdm)                          ,
.o_serx_en                       (o_serx_en_aon)                 ,
.serx_bias_en                    (serx_bias_en_aon)              ,
.serx_en                         (serx_en_aon)                   ,
.o_afe_rx_reg0                   (afe_rx_reg0)                   ,  
.o_afe_rx_reg1                   (afe_rx_reg1)                   ,  
.o_afe_rx_reg2                   (afe_rx_reg2)                   ,  
.o_afe_rx_reg3                   (afe_rx_reg3)                   ,  
.o_afe_rx_reg4                   (afe_rx_reg4)                   ,  
.o_afe_rx_reg5                   (afe_rx_reg5)                   ,  
.o_afe_rx_reg6                   (afe_rx_reg6)                   ,  
.o_afe_tx_reg0                   (afe_tx_reg0)                   ,  
.o_afe_tx_reg1                   (afe_tx_reg1)                   ,  
.o_afe_tx_reg2                   (afe_tx_reg2)                   ,  
.o_afe_tx_reg3                   (afe_tx_reg3)                   ,  
.o_afe_tx_reg4                   (afe_tx_reg4)                   ,  
.o_afe_tx_reg5                   (afe_tx_reg5)                   ,  
.o_afe_tx_reg6                   (afe_tx_reg6)                   ,  
.o_afe_tx_reg7                   (afe_tx_reg7)                   ,  
.o_afe_tx_reg8                   (afe_tx_reg8)                   ,  
.o_afe_tx_reg9                   (afe_tx_reg9)                   ,  
.o_afe_tx_reg10                  (afe_tx_reg10)                  ,  
.o_afe_tx_reg11                  (afe_tx_reg11)                  ,  
.o_afe_tx_reg12                  (afe_tx_reg12)                  ,  
.linestate                       (linestate)                     ,
.test_vbusvld_sessvldn           (test_vbusvld_sessvldn)         ,
.test_pll_480_clock_gate_ovr     (test_pll_480_clock_gate_ovr)   ,
.o_afe_hscalib_code              (afe_hscalib_code)              ,
.o_afe_fscalib_code              (afe_fscalib_code)              ,
.o_afe_bccalib_code              (afe_bccalib_code)              ,
.i_adp_probe_ana                 (adp_probe_ana_core)            ,
.i_adp_sense_ana                 (adp_sense_ana_core)            ,
.o_adp_en                        (adp_en_core)                   ,
.o_adp_probe_en                  (adp_probe_en_core)             , 
.o_adp_sense_en                  (adp_sense_en_core)             ,
.o_adp_sink_current_en           (adp_sink_current_en_core)      ,
.o_adp_source_current_en         (adp_source_current_en_core)    ,
.i_pll_bypass_mode               (pll_bypass_mode)               ,
.o_pll_pd                        (pll_pd)                        ,  
.o_pll_standby                   (pll_standby)                   ,
.o_pll_startloop                 (pll_startloop)                 ,  
.o_pll_pfd_pd                    (pll_pfd_pd)                    ,  
.o_pll_coarse_code               (pll_coarse_code)               ,  
.o_pll_coarse_done               (o_pll_coarse_done)             ,  
.o_pll_coarse_done_ana           (o_pll_coarse_done_ana)         ,  
.o_pll_pso                       (pll_pso)                       ,  
.o_pll_pso_delay                 (pll_pso_delay)                 ,  
.o_pll_ldo_core_en               (pll_ldo_core_en)               ,
.o_pll_ldo_core_en_tx            (pll_ldo_core_en_tx)            ,
.o_pll_ldo_ref_core              (pll_ldo_ref_core)              ,
.o_pll_ldo_ref_en                (pll_ldo_ref_en)                ,
.o_afe_pll_reg0                  (pll_reg0)                      ,  
.o_afe_pll_reg1                  (pll_reg1)                      ,  
.o_afe_pll_reg2                  (pll_reg2)                      ,  
.o_afe_pll_reg3                  (pll_reg3)                      ,  
.o_afe_pll_reg4                  (pll_reg4)                      ,  
.o_afe_pll_reg5                  (pll_reg5)                      ,  
.otgc_id_pullup_en               (o_otgc_id_pullup_en_aon)       ,  
.o_otgc_vbusvalid_en             (otgc_vbusvalid_en)             ,  
.o_otgc_absvalid_en              (otgc_absvalid_en)              ,  
.i_dp_vdat_ref_comp_sts          (w_dp_vdat_ref_comp_sts)        ,  
.i_dm_vdat_ref_comp_sts          (w_dm_vdat_ref_comp_sts)        ,  
.i_rid_float_a_comp_sts          (w_rid_float_a_comp_sts_core)   ,  
.i_rid_b_c_comp_sts              (w_rid_float_b_c_comp_sts_core) ,  
.o_idp_src_en                    (w_idp_src_en)                  ,  
.o_idm_src_en                    (w_idm_src_en)                  ,  
.o_idp_sink_en                   (w_idp_sink_en)                 ,  
.o_idm_sink_en                   (w_idm_sink_en)                 ,  
.o_vdp_src_en                    (w_vdp_src_en)                  ,  
.o_vdm_src_en                    (w_vdm_src_en)                  ,  
.o_dp_vdat_ref_comp_en           (w_dp_vdat_ref_comp_en_core)    ,  
.o_dm_vdat_ref_comp_en           (w_dm_vdat_ref_comp_en_core)    ,  
.o_rid_float_src_en              (w_rid_float_src_en_core)       ,  
.o_rid_nonfloat_src_en           (w_rid_nonfloat_src_en_core)    ,  
.o_rid_float_ref_en              (w_rid_float_ref_en_core)       ,  
.o_rid_a_ref_en                  (w_rid_a_ref_en_core)           ,  
.o_rid_b_ref_en                  (w_rid_b_ref_en_core)           ,  
.o_rid_c_ref_en                  (w_rid_c_ref_en_core)           ,  
.o_rid_float_a_comp_en           (w_rid_float_a_comp_en_core)    ,  
.o_rid_b_c_comp_en               (w_rid_b_c_comp_en_core)        ,  
.o_afe_bc_reg0                   (afe_bc_reg0)                   ,  
.o_afe_bc_reg1                   (afe_bc_reg1)                   ,  
.o_afe_bc_reg2                   (afe_bc_reg2)                   ,  
.o_afe_bc_reg3                   (afe_bc_reg3)                   ,  
.o_afe_bc_reg4                   (afe_bc_reg4)                   ,  
.o_afe_bc_reg5                   (afe_bc_reg5)                   ,  
.o_afe_bc_reg6                   (afe_bc_reg6)                   ,  
.i_ted_comp_out_up               (ted_comp_out_up)               ,  
.i_ted_comp_out_down             (ted_comp_out_down)             ,  
.i_ded_ana                       (ded_ana)                       ,  
.ted_squelch_ana                 (ted_squelch_ana)               ,  
.o_ed_en                         (ed_en)                         ,  
.o_ted_en                        (ted_en)                        ,  
.o_avdd_ted_en                   (o_avdd_ted_en)                 ,
.o_ted_calib_code_up             (ted_calib_code_up)             ,  
.o_ted_calib_code_down           (ted_calib_code_down)           ,  
.o_ted_calib_mode_up             (ted_calib_mode_up)             ,  
.o_ted_calib_mode_down           (ted_calib_mode_down)           ,  
.bg_powergood                    (bg_powergood)                  ,
.bg_powergood_ats                (bg_powergood_ats)              ,
.o_bg_pd                         (bg_pd)                         ,
.o_bg_pd_bg_ok                   (bg_pd_ok)                      ,
.o_afe_bg_reg3                   (afe_bg_reg3)                   ,
.o_afe_bg_reg2                   (afe_bg_reg2)                   ,
.o_afe_bg_reg1                   (afe_bg_reg1)                   ,
.o_afe_bg_reg0                   (afe_bg_reg0)                   ,            
.i_calib_cmp_out                 (calib_cmp_out)                 ,
.o_calib_pd_bias_comp            (calib_pd_bias_comp)            ,
.o_res_calib_code                (res_calib_code)                ,
.o_afe_calib_reg0                (afe_calib_reg0)                ,
.o_ted_calib_done                (o_ted_calib_done)              ,
.i_afe_tx_spare_test_reg         (tie_low[7:0])                  ,
.i_afe_rx_spare_test_reg         (tie_low[7:0])                  ,
.i_afe_pll_spare_test_reg        (tie_low[7:0])                  ,
.i_afe_otg_adp_bc_spare_test_reg (tie_low[7:0])                  ,
.i_afe_calib_spare_test_reg      (tie_low[7:0])                  ,
.o_afe_tx_spare_test_reg         ()                              ,
.o_afe_rx_spare_test_reg         ()                              ,
.o_afe_pll_spare_test_reg        ()                              ,
.o_afe_otg_adp_bc_spare_test_reg ()                              ,
.o_afe_calib_spare_test_reg      ()                              ,
.tm_idpullup                     (tm_idpullup)                   ,
.i_cdr_test_digout               (o_cdr_test_digout)             ,
.test_aon_common_reg1            (test_aon_common_reg1)          ,
.usb2_phy_irq                    (usb2_phy_irq)
);
usb2_pma_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r IUSB2_ANA_TOP (
.usb2_phy_spare_in         (usb2_phy_spare_in[7:4])        ,
.usb2_phy_spare_out        (usb2_phy_spare_out_pma)                              ,
.VBUS                      (VBUS)                          ,
.DM                        (DM)                            ,
.DP                        (DP)                            ,
.ID                        (ID)                            ,
.RTRIM                     (RTRIM)                         ,
`ifdef CDNS_PHY_PWR_AWARE
.DVDD_CORE                 (DVDD_CORE)                     ,
.AVDD_IO                   (AVDD_IO)                       ,
.AVDD_IO_HV                (AVDD_IO_HV)                    ,
.AVDD_CORE                 (AVDD_CORE)                     ,
.AVSS                      (gnd)                           ,
`else
`endif
.TM_ANAMUX_0               ()                              ,
.vbus_sel                  (vbus_sel[0])                   , 
.avdd_core_powergood       (avdd_core_powergood)           ,
.dvdd_core_powergood       (dvdd_core_powergood)           ,
.i_pll_fb_clk              (o_fb_clk)                      ,
.i_pll_div_refclk          (o_div_refclk)                  ,
.i_rx_calib_rstn           (o_pll_coarse_done_ana)         ,
.i_refclk_for_pll          (refclock)                      ,
.o_pll_480m_clk            (clkout_tx)                     ,
.o_sampler_clk             (sampler_clk)                   ,
.i_lane_reverse            (o_lane_reverse)                , 
.i_option_n                (option_n)                      ,
.i_option_cv               (option_cv)                     ,
.i_dmrpd_en                (o_dmrpd_en)                    ,
.i_dmrpu1_en               (o_dmrpu1_en)                   ,
.i_dmrpu2_en               (o_dmrpu2_en)                   ,
.i_dprpd_en                (o_dprpd_en)                    ,
.i_dprpu1_en               (o_dprpu1_en)                   ,
.i_dprpu2_en               (o_dprpu2_en)                   ,
.i_hsrx_calib_active       (cdr_calib_active)              ,
.i_hsrx_calib_code         (cdr_calib_code)                ,
.i_hsrx_clk_gate           (clk_gate)                      ,
.i_ana_hsrx_enable         (hsrx_enable)                   ,
.i_ana_hsrx_enable_delayed (hsrx_enable_d)                 ,
.i_hsrx_en_clipper         (hsrx_en_clipper)               ,
.i_afe_suspendm_rx         (suspendm_rx)                   ,
.o_hsrx_calib_comp_out     (cdr_comp_out)                  ,
.o_sampler_data            (sampler_data)                  ,
.i_hsddi                   (hsddi)                         ,  
.i_hsdrv_en                (hsdrv_en)                      ,  
.i_hspredrv_en             (hspredrv_en)                   ,
.i_hstx_en                 (hstx_en)                       , 
.i_hstx_en_delayed         (hstx_en_delayed)               ,
.i_chirp_mode_en           (chirp_mode_en)                 ,
.i_afe_suspendm_tx         (o_afe_suspendm_tx)             ,
.i_hstx_boost_deemp_off    (hstx_boost_deemp_off)          ,
.i_fs_edge_sel             (fs_edge_sel)                   , 
.i_lsfs_ddi                (lsfs_ddi)                      ,
.i_lsfsdrv_en              (lsfsdrv_en)                    , 
.i_lsfstx_en               (lsfstx_en)                     ,
.i_afe_clipper_en          (o_afe_clipper_en)              ,
.i_assert_sezero           (assert_sezero)                 ,
.i_afe_bccalib_code        (afe_bccalib_code[5:1])         ,
.i_afe_fscalib_code        (afe_fscalib_code[5:1])         ,
.i_afe_hscalib_code        (afe_hscalib_code[5:1])         ,
.i_afe_tx_reg0             (afe_tx_reg0)                   ,
.i_afe_tx_reg1             (afe_tx_reg1)                   ,
.i_afe_tx_reg2             (afe_tx_reg2)                   ,
.i_afe_tx_reg3             (afe_tx_reg3)                   ,
.i_afe_tx_reg4             (afe_tx_reg4)                   ,
.i_afe_tx_reg5             (afe_tx_reg5)                   ,
.i_afe_tx_reg6             (afe_tx_reg6)                   ,
.i_afe_tx_reg7             (afe_tx_reg7)                   ,
.i_afe_tx_reg8             (afe_tx_reg8)                   ,
.i_afe_tx_reg9             (afe_tx_reg9)                   ,
.i_afe_tx_reg10            (afe_tx_reg10)                  ,
.i_afe_tx_reg11            (afe_tx_reg11)                  ,
.i_afe_tx_reg12            (afe_tx_reg12)                  ,
.i_lsfsrx_en               (lsfsrx_en)                     ,
.o_afe_lsfsrx_ana          (lsfsrx_ana)                    , 
.i_serx_en                 (serx_en)                       ,
.i_serx_bias_en            (serx_bias_en)                  ,
.o_afe_rxdm_ana            (rxdm_ana)                      , 
.o_afe_rxdp_ana            (rxdp_ana)                      ,
.i_afe_rx_reg0             (afe_rx_reg0)                   ,
.i_afe_rx_reg1             (afe_rx_reg1)                   ,
.i_afe_rx_reg2             (afe_rx_reg2)                   ,
.i_afe_rx_reg3             (afe_rx_reg3 )                  ,
.i_afe_rx_reg4             (afe_rx_reg4 )                  ,
.i_afe_rx_reg5             (afe_rx_reg5 )                  ,
.i_afe_rx_reg6             (afe_rx_reg6 )                  ,
.i_adp_en                  (adp_en_core)                   ,
.i_adp_probe_en            (adp_probe_en_core)             , 
.i_adp_sense_en            (adp_sense_en_core)             ,
.i_adp_sink_current_en     (adp_sink_current_en_core)      ,
.i_adp_source_current_en   (adp_source_current_en_core)    ,
.o_adp_probe_ana           (adp_probe_ana_core)            ,
.o_adp_sense_ana           (adp_sense_ana_core)            ,
.i_pll_bypass_mode         (pll_bypass_mode)               ,
.i_pll_pd                  (pll_pd)                        ,
.i_pll_pso                 (pll_pso)                       , 
.i_pll_pso_delay           (pll_pso_delay)                 ,       
.i_pll_standby             (pll_standby)                   ,
.i_pll_coarse_code         (pll_coarse_code)               ,  
.i_pll_pfd_pd              (pll_pfd_pd)                    ,  
.i_pll_startloop           (pll_startloop)                 ,  
.i_pll_ldo_core_en         (pll_ldo_core_en)               ,
.i_pll_ldo_core_en_tx      (pll_ldo_core_en_tx)            ,
.i_pll_ldo_ref_en          (pll_ldo_ref_en)                ,
.i_pll_ldo_ref_core        (pll_ldo_ref_core)              ,
.i_afe_pll_reg0            (pll_reg0)                      ,
.i_afe_pll_reg1            (pll_reg1)                      ,
.i_afe_pll_reg2            (pll_reg2)                      ,
.i_afe_pll_reg3            (pll_reg3)                      ,
.i_afe_pll_reg4            (pll_reg4)                      ,
.i_afe_pll_reg5            (pll_reg5)                      ,
.i_otgc_absvalid_en        (otgc_absvalid_en)              ,
.i_otgc_id_pullup_en       (o_otgc_id_pullup_en)           ,
.i_otgc_vbusvalid_en       (otgc_vbusvalid_en)             ,
.o_otgc_id_ana             (otgc_id_ana_core)              ,
.o_otgc_sessvalid_ana      (otgc_sessvalid_ana_core)      ,
.o_otgc_vbusvalid_ana      (otgc_vbusvalid_ana_core)       ,
.i_idm_sink_en             (w_idm_sink_en)                 , 
.i_idm_src_en              (w_idm_src_en)                  ,
.i_idp_sink_en             (w_idp_sink_en)                 , 
.i_idp_src_en              (w_idp_src_en)                  ,
.i_vdm_src_en              (w_vdm_src_en)                  ,
.i_vdp_src_en              (w_vdp_src_en)                  ,
.i_dm_vdat_ref_comp_en     (w_dm_vdat_ref_comp_en_core)    ,
.i_dp_vdat_ref_comp_en     (w_dp_vdat_ref_comp_en_core)    ,
.i_rid_a_ref_en            (w_rid_a_ref_en_core)           ,
.i_rid_b_c_comp_en         (w_rid_b_c_comp_en_core)        ,
.i_rid_b_ref_en            (w_rid_b_ref_en_core)           , 
.i_rid_c_ref_en            (w_rid_c_ref_en_core)           ,
.i_rid_float_a_comp_en     (w_rid_float_a_comp_en_core)    ,
.i_rid_float_ref_en        (w_rid_float_ref_en_core)       ,
.i_rid_float_src_en        (w_rid_float_src_en_core)       ,
.i_rid_nonfloat_src_en     (w_rid_nonfloat_src_en_core)    ,
.i_afe_bc_reg0             (afe_bc_reg0)                   ,
.i_afe_bc_reg1             (afe_bc_reg1)                   ,
.i_afe_bc_reg2             (afe_bc_reg2)                   ,
.i_afe_bc_reg3             (afe_bc_reg3)                   ,
.i_afe_bc_reg4             (afe_bc_reg4)                   ,
.i_afe_bc_reg5             (afe_bc_reg5)                   ,
.i_afe_bc_reg6             (afe_bc_reg6)                   ,
.o_dm_vdat_ref_comp_sts    (w_dm_vdat_ref_comp_sts)        ,
.o_dp_vdat_ref_comp_sts    (w_dp_vdat_ref_comp_sts)        ,
.o_rid_b_c_comp_sts        (w_rid_float_b_c_comp_sts_core) ,
.o_rid_float_a_comp_sts    (w_rid_float_a_comp_sts_core)   ,
.i_ed_en                   (ed_en)                         ,
.i_ted_en                  (ted_en)                        ,
.i_ted_calib_code_up       (ted_calib_code_up)             ,  
.i_ted_calib_code_down     (ted_calib_code_down)           ,  
.i_ted_calib_mode_up       (ted_calib_mode_up)             ,  
.i_ted_calib_mode_down     (ted_calib_mode_down)           ,  
.o_ded_ana                 (ded_ana)                       ,
.o_ted_comp_out_up         (ted_comp_out_up)               ,  
.o_ted_comp_out_down       (ted_comp_out_down)             ,  
.o_ted_squelch_ana         (ted_squelch)                   ,  
.i_bg_pd                   (bg_pd)                         ,
.i_bg_pd_bg_ok             (bg_pd_ok)                      ,
.i_afe_bg_reg0             (afe_bg_reg0)                   ,
.i_afe_bg_reg1             (afe_bg_reg1)                   ,
.i_afe_bg_reg2             (afe_bg_reg2)                   ,
.i_afe_bg_reg3             (afe_bg_reg3)                   ,
.o_bg_powergood            (bg_powergood_core)             , 
.i_afe_calib_reg0          (afe_calib_reg0)                ,
.i_calib_pd_bias_comp      (calib_pd_bias_comp)            ,
.i_res_calib_code          (res_calib_code[5:1])           ,
.o_res_calib_comp_out      (calib_cmp_out)                 ,
.i_tie_low                 (tie_low[0])
);
endmodule
`timescale 1ns/1ps
module ted_sar_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r ( i_rstn,
		     i_comp_out,
		     i_clk,
		     i_sar_en,
		     o_calib_done,
		     o_sar_code
		     );
   parameter  p_code_len = 4;
   input i_rstn;
   input i_comp_out;
   input i_clk;
   input i_sar_en;
   output [p_code_len-1:0] o_sar_code;
   output 		   o_calib_done;
   reg 			   o_calib_done;
   reg [p_code_len:0] 	   r_bin_decision_cnt;
   reg [p_code_len-1:0]    r_calib_code_latch;
   reg [p_code_len-1:0]    o_sar_code;
wire			reset_code  ;
   assign reset_code =  (r_bin_decision_cnt == {{p_code_len{1'b0}},{1'b1}});
   always @(posedge i_clk or negedge i_rstn)
     if (~i_rstn)
       begin
	  r_bin_decision_cnt <= {{1'b1},{p_code_len{1'b0}}};
	  r_calib_code_latch <= {p_code_len{1'b0}};
       end
     else if(~i_sar_en)
       begin
          r_bin_decision_cnt <= {{1'b1},{p_code_len{1'b0}}};
	  r_calib_code_latch <= {p_code_len{1'b0}};
       end
     else
       begin
          if(reset_code)
	      r_bin_decision_cnt <= {{1'b1},{p_code_len{1'b0}}};
	  else
	      r_bin_decision_cnt <= r_bin_decision_cnt >> 1;
	  if(reset_code)
	      r_calib_code_latch <= {p_code_len{1'b0}};
	  else if (i_comp_out == 1'b1)
	      r_calib_code_latch <= o_sar_code;
       end    
   always @(negedge i_clk or negedge i_rstn)
     if (~i_rstn)
       o_calib_done <= 1'b0;
     else if(~i_sar_en)
       o_calib_done <= 1'b0;
     else
       o_calib_done <= r_bin_decision_cnt[0];
   always @(*)
     o_sar_code = r_calib_code_latch + r_bin_decision_cnt[p_code_len:1];
endmodule  
`timescale 1ns/1ps
module udc_tx_hs_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r ( 
hs_clock,		 
rstn_hs_clock,		 
sieclock,		 
rstn_sieclock,		 
tx_hs_soft_reset,	 
hs_mode,		 
host_mode,		 
opmode,			 
databus,		 
txvalid,		 
txvalidh,		 
txready,		 
datain,			 
txbitstuffenable,	 
txbitstuffenableh,	 
i_ded_ana,		 
test_hs_sof_reg,         
hs_sof,			 
hs_txready,		 
hs_hostdisconnect,	 
hspredrv_en,		 
hsdrv_en,		 
hsddi,			 
tx_eop_ted,		 
debug_tx_hs_state,
debug_eop_transmitted,
debug_hs_bitstuff_en,
debug_pd_state
);
parameter TX_HS_IDLE  = 4'b 0000 ;
parameter TX_HS_SYNC0 = 4'b 0001 ;
parameter TX_HS_SYNC1 = 4'b 0010 ;
parameter TX_HS_SYNC2 = 4'b 0011 ;
parameter TX_HS_SYNC3 = 4'b 0100 ;
parameter TX_HS_DATA  = 4'b 0101 ;
parameter TX_HS_EOP0  = 4'b 0110 ;
parameter TX_HS_EOP1  = 4'b 0111 ;
parameter TX_HS_EOP2  = 4'b 1000 ;
parameter TX_HS_EOP3  = 4'b 1001 ;
parameter TX_HS_EOP4  = 4'b 1010 ;
parameter HS_SIXTEEN_BITS	= 4'd 15 ;
parameter HS_EIGHT_BITS		= 4'd 7  ;
input		hs_clock, rstn_hs_clock, sieclock, rstn_sieclock ;
input		tx_hs_soft_reset, hs_mode, host_mode, databus, txvalid, txvalidh, txready, 
		txbitstuffenable, txbitstuffenableh, i_ded_ana ;
input	[1:0]	opmode ;
input   [2:0]   test_hs_sof_reg;
input	[15:0]	datain ;
output		hs_sof, hs_txready, hs_hostdisconnect, hspredrv_en, hsdrv_en, hsddi, tx_eop_ted ;
output	[3:0]	debug_tx_hs_state ;
output		debug_eop_transmitted ;
output		debug_hs_bitstuff_en ;
output	[2:0]	debug_pd_state ;
reg		txvalid_d, hold_reg1_valid, hold_reg1_validh, hold_reg2_valid, hold_reg2_validh, hs_txready_loc, 
		hs_data_valid_d, hsdrv_en, hsddi, curr_value_d, bitstuff_valid, tx_shift_reg_valid, tx_shift_reg_validh, 
		tx_shift_reg_bitstuffen, tx_shift_reg_bitstuffenh, tx_shift_reg_bitstuffen_d, tx_shift_reg_bitstuffenh_d,
		eop_transmitted_d, eop_transmitted_long, hs_sof, 
		hs_hostdisconnect,hold_reg0_valid, hold_reg0_validh, hold_reg3_valid, hold_reg3_validh , data_state_d, 
		hold_reg4_valid, hold_reg4_validh, hold_reg5_valid, hold_reg5_validh , 
		hold_reg6_valid, hold_reg6_validh, hold_reg7_valid, hold_reg7_validh ,
		hold_reg0_txbitstuffenable, hold_reg0_txbitstuffenableh, hold_reg1_txbitstuffenable, 
		hold_reg1_txbitstuffenableh, hold_reg2_txbitstuffenable, hold_reg2_txbitstuffenableh,  
		hold_reg3_txbitstuffenable, hold_reg3_txbitstuffenableh, hold_reg4_txbitstuffenable, 
		hold_reg4_txbitstuffenableh, hold_reg5_txbitstuffenable, hold_reg5_txbitstuffenableh,  
		hold_reg6_txbitstuffenable, hold_reg6_txbitstuffenableh, hold_reg7_txbitstuffenable, 
		hold_reg7_txbitstuffenableh, txvalid_2d, txvalidh_d, pd_toggle, txready_d, txbitstuffenable_d, 
		txbitstuffenableh_d, txvalid_d_hs,sof_ext_cnt_en, txvalid_oddbyte_d, load_tx_shift_reg_d, tx_shift_reg_end ;
reg	[1:0]	tx_opmode, opmode_d ;
reg	[2:0]	hold_reg_toggle, output_toggle, output_toggle_d ;
reg	[3:0]	bit_time, bit_cnt, tx_hs_state, tx_hs_next_state, sof_ext_cnt, sof_ext_threshold ;
reg	[4:0]	bitstuff_shift_reg ;
reg	[7:0]	sync_shift_reg, eop_shift_reg ;
reg	[15:0]	hold_reg0, hold_reg1, hold_reg2, hold_reg3, hold_reg4, hold_reg5, hold_reg6, hold_reg7,
		tx_shift_reg, datain_d, pd_data1, pd_data2 ;
wire		sync_en, tx_sync_en, tx_sync0_en, tx_sync1_en, tx_sync2_en, tx_sync3_en, hs_sof_en, hspredrv_en, 
       		tx_eop0_en, tx_eop1_en, tx_eop2_en, tx_eop3_en, tx_eop4_en, bit_time_en, bit_time_reached, 
		shift_sync_shift_reg, load_sync_shift_reg, shift_eop_shift_reg, load_eop_shift_reg,
	       	hs_txready_loc_en, nrzi_en, curr_value, prev_value, hs_data, hs_data_valid, nrzi_enc_data,
	      	bitstuff_detected, bitstuff_en, bitstuff_rst, bitstuff_tx_data, tx_data_valid, tx_data, sof_ext_cnt_reached, 
		data_state, data_valid, bit_cnt_reached, bit_cnt_en, data, load_tx_shift_reg, shift_tx_shift_reg,
		tx_eop_en, tx_eop_ted, tx_eop_start, eop_en, eop_transmitted, tx_start_delay, posedge_txvalid, negedge_txvalid,
	       	disable_bitstuff_nrzi, disable_sync_eop, disable_transmit, hs_disconnect_en, hsded_sync, sync, eop,
	        hs_txready, output_toggle_en, clear_hold_reg, ungate_txready, txvalid_assert, txvalid_deassert, tx_shift_reg_bitstuffen_w,
		tx_shift_reg_bitstuffenh_w,  posedge_txvalid_hs ;
wire	[3:0]	bit_time_threshold, bit_cnt_threshold ;
wire	[15:0]	pd_datain ;
wire		initial_load, exception_bitstuffen;
wire 	[3:0] 	debug_tx_hs_state ;
wire		debug_eop_transmitted ;	
wire		debug_hs_bitstuff_en ;
wire	[2:0]	debug_pd_state ;	
assign debug_tx_hs_state = tx_hs_state ;
assign debug_eop_transmitted = eop_transmitted ;
assign debug_hs_bitstuff_en = bitstuff_en ;
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
	begin
		txvalid_d  		<= 1'b 0 ;
		txvalid_2d  		<= 1'b 0 ;
		txvalidh_d  		<= 1'b 0 ;
		txready_d		<= 1'b 0 ;
		datain_d		<= 16'd0 ;
		txbitstuffenable_d	<= 1'b 0 ; 
		txbitstuffenableh_d	<= 1'b 0 ;
		opmode_d		<= 2'b 00 ;
		eop_transmitted_long 	<= 1'b 0 ;
		output_toggle_d 	<= 3'd 0 ;
		data_state_d		<= 1'b 0 ;
	end
	else
	begin
		txvalid_d  		<= txvalid ;
		txvalid_2d  		<= txvalid_d ;
		txvalidh_d  		<= txvalidh ;
		txready_d		<= txready ;
		datain_d		<= datain ;
		txbitstuffenable_d	<= txbitstuffenable ; 
		txbitstuffenableh_d	<= txbitstuffenableh ;
		opmode_d		<= opmode ;
		eop_transmitted_long 	<= eop_transmitted_d ;
		output_toggle_d 	<= output_toggle ;
		data_state_d		<= data_state ;
	end
end
assign txvalid_assert  	= ( txvalid   & ~txvalid_d) ;
assign txvalid_deassert	= ( ~txvalid  & txvalid_d) ;
assign posedge_txvalid 	= ( txvalid_d & ~txvalid_2d) ;
assign negedge_txvalid 	= (~txvalid_d &  txvalid_2d) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		txvalid_d_hs <= 1'b 0 ;
	else
		txvalid_d_hs <= txvalid_d ;
end
assign posedge_txvalid_hs = (txvalid_d & ~txvalid_d_hs) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		tx_opmode <= 2'b 00 ;
	else if(disable_transmit | tx_hs_soft_reset | eop_transmitted)
		tx_opmode <= 2'b 00 ;
	else if(posedge_txvalid_hs)
		tx_opmode <= opmode_d ;
end
assign disable_transmit	     = (~hs_mode) ;
assign disable_bitstuff_nrzi = ( hs_mode & tx_opmode == 2'b 10) ;
assign disable_sync_eop      = ( hs_mode & tx_opmode == 2'b 11) ;
assign hs_txready_loc_en = txvalid_assert ;
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
		hs_txready_loc <= 1'b 0 ;
	else if(disable_transmit | tx_hs_soft_reset | txvalid_deassert)
		hs_txready_loc <= 1'b 0 ;
	else if(hs_txready_loc_en)
		hs_txready_loc <= 1'b 1 ;
end
assign ungate_txready = (txvalid_d & data_state_d) ? ((hold_reg_toggle > output_toggle_d) ? 
				((hold_reg_toggle - output_toggle_d) <= 3'd 1) : 
					(((hold_reg_toggle + 3'd7) - output_toggle_d) <= 3'd 1)) : 1'b 0 ;
assign hs_sof_en = (hs_mode & host_mode & posedge_txvalid & (opmode_d == 2'b 00) & (datain_d[7:0] == 8'h A5)) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		hs_sof <= 1'b 0 ;
	else if(disable_transmit | tx_hs_soft_reset | eop_transmitted)
		hs_sof <= 1'b 0 ;
	else if(hs_sof_en)
		hs_sof <= 1'b 1 ;
end
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_hsded_sync (
.clock		(hs_clock) ,
.reset_n	(rstn_hs_clock) ,
.d_in	        (i_ded_ana) ,
.d_out	        (hsded_sync)
);
assign hs_disconnect_en   = (((hs_sof & tx_eop4_en)| sof_ext_cnt_en)& hsded_sync) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		sof_ext_cnt_en <= 1'b0 ;
	else if(sof_ext_cnt_reached)
		sof_ext_cnt_en <= 1'b0 ;
	else if(eop_transmitted & hs_sof)
		sof_ext_cnt_en <= 1'b1 ;
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		sof_ext_cnt <= 4'd 0 ;
	else if(sof_ext_cnt_reached)
		sof_ext_cnt <= 4'd 0 ;
	else if(sof_ext_cnt_en)
		sof_ext_cnt <= sof_ext_cnt + 4'd 1 ;
end
always @(*)
begin
	if(test_hs_sof_reg[0])
	begin
		case(test_hs_sof_reg[2:1])
		    2'b 00:  sof_ext_threshold = 4'd3 ;     
		    2'b 01:  sof_ext_threshold = 4'd5 ;     
		    2'b 10:  sof_ext_threshold = 4'd7 ;     
		    2'b 11:  sof_ext_threshold = 4'd9 ;    
		endcase
	end
	else
		sof_ext_threshold = 4'd1 ;	
end
assign sof_ext_cnt_reached = (sof_ext_cnt == sof_ext_threshold);
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		hs_hostdisconnect <= 1'b 0 ;
	else if(disable_transmit | tx_hs_soft_reset)
		hs_hostdisconnect <= 1'b 0 ;
	else if(hs_disconnect_en)
		hs_hostdisconnect <= 1'b 1 ;
end
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
		hold_reg_toggle <= 3'd 0 ;
	else if(disable_transmit | tx_hs_soft_reset | eop_transmitted_long)
		hold_reg_toggle <= 3'd 0 ;
	else if(txready_d)
		hold_reg_toggle <= hold_reg_toggle + 3'd 1 ;
end
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
	begin
		hold_reg0[7:0]   <= 8'd0 ;
		hold_reg0[15:8]  <= 8'd0 ;
		hold_reg0_valid  <= 1'b 0 ;
		hold_reg0_validh <= 1'b 0 ;
		hold_reg0_txbitstuffenable <= 1'b0 ;
		hold_reg0_txbitstuffenableh <= 1'b0 ;
		hold_reg1[7:0]   <= 8'd0 ;
		hold_reg1[15:8]  <= 8'd0 ;
		hold_reg1_valid  <= 1'b 0 ;
		hold_reg1_validh <= 1'b 0 ;
		hold_reg1_txbitstuffenable <= 1'b0 ;
		hold_reg1_txbitstuffenableh <= 1'b0 ;
		hold_reg2[7:0]   <= 8'd0 ;
		hold_reg2[15:8]  <= 8'd0 ;
		hold_reg2_valid  <= 1'b 0 ;
		hold_reg2_validh <= 1'b 0 ;
		hold_reg2_txbitstuffenable <= 1'b0 ;
		hold_reg2_txbitstuffenableh <= 1'b0 ;
		hold_reg3[7:0]   <= 8'd0 ;
		hold_reg3[15:8]  <= 8'd0 ;
		hold_reg3_valid  <= 1'b 0 ;
		hold_reg3_validh <= 1'b 0 ;
		hold_reg3_txbitstuffenable <= 1'b0 ;
		hold_reg3_txbitstuffenableh <= 1'b0 ;
		hold_reg4[7:0]   <= 8'd0 ;
		hold_reg4[15:8]  <= 8'd0 ;
		hold_reg4_valid  <= 1'b 0 ;
		hold_reg4_validh <= 1'b 0 ;
		hold_reg4_txbitstuffenable <= 1'b0 ;
		hold_reg4_txbitstuffenableh <= 1'b0 ;
		hold_reg5[7:0]   <= 8'd0 ;
		hold_reg5[15:8]  <= 8'd0 ;
		hold_reg5_valid  <= 1'b 0 ;
		hold_reg5_validh <= 1'b 0 ;
		hold_reg5_txbitstuffenable <= 1'b0 ;
		hold_reg5_txbitstuffenableh <= 1'b0 ;
		hold_reg6[7:0]   <= 8'd0 ;
		hold_reg6[15:8]  <= 8'd0 ;
		hold_reg6_valid  <= 1'b 0 ;
		hold_reg6_validh <= 1'b 0 ;
		hold_reg6_txbitstuffenable <= 1'b0 ;
		hold_reg6_txbitstuffenableh <= 1'b0 ;
		hold_reg7[7:0]   <= 8'd0 ;
		hold_reg7[15:8]  <= 8'd0 ;
		hold_reg7_valid  <= 1'b 0 ;
		hold_reg7_validh <= 1'b 0 ;
		hold_reg7_txbitstuffenable <= 1'b0 ;
		hold_reg7_txbitstuffenableh <= 1'b0 ;
	end
	else if(disable_transmit | tx_hs_soft_reset | eop_transmitted_long)
	begin
		hold_reg0[7:0]   <= 8'd0 ;
		hold_reg0[15:8]  <= 8'd0 ;
		hold_reg0_valid  <= 1'b 0 ;
		hold_reg0_validh <= 1'b 0 ;
		hold_reg0_txbitstuffenable <= 1'b0 ;
		hold_reg0_txbitstuffenableh <= 1'b0 ;
		hold_reg1[7:0]   <= 8'd0 ;
		hold_reg1[15:8]  <= 8'd0 ;
		hold_reg1_valid  <= 1'b 0 ;
		hold_reg1_validh <= 1'b 0 ;
		hold_reg1_txbitstuffenable <= 1'b0 ;
		hold_reg1_txbitstuffenableh <= 1'b0 ;
		hold_reg2[7:0]   <= 8'd0 ;
		hold_reg2[15:8]  <= 8'd0 ;
		hold_reg2_valid  <= 1'b 0 ;
		hold_reg2_validh <= 1'b 0 ;
		hold_reg2_txbitstuffenable <= 1'b0 ;
		hold_reg2_txbitstuffenableh <= 1'b0 ;
		hold_reg3[7:0]   <= 8'd0 ;
		hold_reg3[15:8]  <= 8'd0 ;
		hold_reg3_valid  <= 1'b 0 ;
		hold_reg3_validh <= 1'b 0 ;
		hold_reg3_txbitstuffenable <= 1'b0 ;
		hold_reg3_txbitstuffenableh <= 1'b0 ;
		hold_reg4[7:0]   <= 8'd0 ;
		hold_reg4[15:8]  <= 8'd0 ;
		hold_reg4_valid  <= 1'b 0 ;
		hold_reg4_validh <= 1'b 0 ;
		hold_reg4_txbitstuffenable <= 1'b0 ;
		hold_reg4_txbitstuffenableh <= 1'b0 ;
		hold_reg5[7:0]   <= 8'd0 ;
		hold_reg5[15:8]  <= 8'd0 ;
		hold_reg5_valid  <= 1'b 0 ;
		hold_reg5_validh <= 1'b 0 ;
		hold_reg5_txbitstuffenable <= 1'b0 ;
		hold_reg5_txbitstuffenableh <= 1'b0 ;
		hold_reg6[7:0]   <= 8'd0 ;
		hold_reg6[15:8]  <= 8'd0 ;
		hold_reg6_valid  <= 1'b 0 ;
		hold_reg6_validh <= 1'b 0 ;
		hold_reg6_txbitstuffenable <= 1'b0 ;
		hold_reg6_txbitstuffenableh <= 1'b0 ;
		hold_reg7[7:0]   <= 8'd0 ;
		hold_reg7[15:8]  <= 8'd0 ;
		hold_reg7_valid  <= 1'b 0 ;
		hold_reg7_validh <= 1'b 0 ;
		hold_reg7_txbitstuffenable <= 1'b0 ;
		hold_reg7_txbitstuffenableh <= 1'b0 ;
	end
	else if(txready_d | negedge_txvalid)
	begin
		if(hold_reg_toggle == 3'b 111)
		begin
			hold_reg7_valid		<= txvalid_d	;
			hold_reg7[7:0]		<= datain_d[7:0]	;
			hold_reg7_validh	<= databus ? txvalidh_d : 1'b 0	;
			hold_reg7[15:8]		<= databus ? datain_d[15:8] : 8'h 00 ;
			hold_reg7_txbitstuffenable  <= disable_sync_eop ? txbitstuffenable_d : 1'b 0;
			hold_reg7_txbitstuffenableh <= (disable_sync_eop & databus) ? txbitstuffenableh_d : 1'b0 ;
		end
		else if(hold_reg_toggle == 3'b 110)
		begin
			hold_reg6_valid		<= txvalid_d	;
			hold_reg6[7:0]		<= datain_d[7:0]	;
			hold_reg6_validh	<= databus ? txvalidh_d : 1'b 0	;
			hold_reg6[15:8]		<= databus ? datain_d[15:8] : 8'h 00 ;
			hold_reg6_txbitstuffenable  <= disable_sync_eop ? txbitstuffenable_d : 1'b 0;
			hold_reg6_txbitstuffenableh <= (disable_sync_eop & databus) ? txbitstuffenableh_d : 1'b0 ;
		end
		else if(hold_reg_toggle == 3'b 101)
		begin
			hold_reg5_valid		<= txvalid_d	;
			hold_reg5[7:0]		<= datain_d[7:0]	;
			hold_reg5_validh	<= databus ? txvalidh_d : 1'b 0	;
			hold_reg5[15:8]		<= databus ? datain_d[15:8] : 8'h 00 ;
			hold_reg5_txbitstuffenable  <= disable_sync_eop ? txbitstuffenable_d : 1'b 0;
			hold_reg5_txbitstuffenableh <= (disable_sync_eop & databus) ? txbitstuffenableh_d : 1'b0 ;
		end
		else if(hold_reg_toggle == 3'b 100)
		begin
			hold_reg4_valid		<= txvalid_d	;
			hold_reg4[7:0]		<= datain_d[7:0]	;
			hold_reg4_validh	<= databus ? txvalidh_d : 1'b 0	;
			hold_reg4[15:8]		<= databus ? datain_d[15:8] : 8'h 00 ;
			hold_reg4_txbitstuffenable  <= disable_sync_eop ? txbitstuffenable_d : 1'b 0;
			hold_reg4_txbitstuffenableh <= (disable_sync_eop & databus) ? txbitstuffenableh_d : 1'b0 ;
		end
		else if(hold_reg_toggle == 3'b 011)
		begin
			hold_reg3_valid		<= txvalid_d	;
			hold_reg3[7:0]		<= datain_d[7:0]	;
			hold_reg3_validh	<= databus ? txvalidh_d : 1'b 0	;
			hold_reg3[15:8]		<= databus ? datain_d[15:8] : 8'h 00 ;
			hold_reg3_txbitstuffenable  <= disable_sync_eop ? txbitstuffenable_d : 1'b 0;
			hold_reg3_txbitstuffenableh <= (disable_sync_eop & databus) ? txbitstuffenableh_d : 1'b0 ;
		end
		else if(hold_reg_toggle == 3'b 010)
		begin
			hold_reg2_valid		<= txvalid_d	;
			hold_reg2[7:0]		<= datain_d[7:0]	;
			hold_reg2_validh	<= databus ? txvalidh_d : 1'b 0	;
			hold_reg2[15:8]		<= databus ? datain_d[15:8] : 8'h 00 ;
			hold_reg2_txbitstuffenable  <= disable_sync_eop ? txbitstuffenable_d : 1'b 0;
			hold_reg2_txbitstuffenableh <= (disable_sync_eop & databus) ? txbitstuffenableh_d : 1'b0 ;
		end
		else if(hold_reg_toggle == 3'b 001)
		begin
			hold_reg1_valid		<= txvalid_d	;
			hold_reg1[7:0]		<= datain_d[7:0]	;
			hold_reg1_validh	<= databus ? txvalidh_d : 1'b 0	;
			hold_reg1[15:8]		<= databus ? datain_d[15:8] : 8'h 00 ;
			hold_reg1_txbitstuffenable  <= disable_sync_eop ? txbitstuffenable_d : 1'b 0;
			hold_reg1_txbitstuffenableh <= (disable_sync_eop & databus) ? txbitstuffenableh_d : 1'b0 ;
		end
		else if(hold_reg_toggle == 3'b 000)
		begin
			hold_reg0_valid		<= txvalid_d	;
			hold_reg0[7:0]		<= datain_d[7:0]	;
			hold_reg0_validh	<= databus ? txvalidh_d : 1'b 0	;
			hold_reg0[15:8]		<= databus ? datain_d[15:8] : 8'h 00 ;
			hold_reg0_txbitstuffenable  <= disable_sync_eop ? txbitstuffenable_d : 1'b 0;
			hold_reg0_txbitstuffenableh <= (disable_sync_eop & databus) ? txbitstuffenableh_d : 1'b0 ;
		end
	end
end
assign tx_start_delay = (tx_hs_state == TX_HS_IDLE & txvalid_d) ;
assign tx_sync0_en = (tx_hs_state == TX_HS_SYNC0) ;
assign tx_sync1_en = (tx_hs_state == TX_HS_SYNC1) ;
assign tx_sync2_en = (tx_hs_state == TX_HS_SYNC2) ;
assign tx_sync3_en = (tx_hs_state == TX_HS_SYNC3) ;
assign sync_en     = (tx_sync0_en | tx_sync1_en |
		      tx_sync2_en | tx_sync3_en ) ;
assign tx_sync_en = (disable_sync_eop | disable_bitstuff_nrzi) ? 1'b 0 : sync_en ;
assign tx_eop0_en   = (tx_hs_state == TX_HS_EOP0)  ;
assign tx_eop1_en   = (tx_hs_state == TX_HS_EOP1)  ;
assign tx_eop2_en   = (tx_hs_state == TX_HS_EOP2)  ;
assign tx_eop3_en   = (tx_hs_state == TX_HS_EOP3)  ;
assign tx_eop4_en   = (tx_hs_state == TX_HS_EOP4)  ;
assign tx_eop_ted   = tx_eop_start | (bitstuff_valid & ~tx_shift_reg_valid) ;
assign tx_eop_start = (tx_hs_state == TX_HS_DATA & ~tx_shift_reg_valid & ~bitstuff_valid) ;
assign eop_transmitted = ((bit_time_reached ? (hs_sof ? tx_hs_state == TX_HS_EOP4 : tx_hs_state == TX_HS_EOP0) : 1'b 0 ) | clear_hold_reg);
assign eop_en       = (tx_eop0_en | tx_eop1_en |
	 	       tx_eop2_en | tx_eop3_en |
		       tx_eop4_en | tx_eop_start) ;
assign tx_eop_en    = (disable_sync_eop | disable_bitstuff_nrzi) ? 1'b 0 : eop_en ; 
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		eop_transmitted_d <= 1'b 0 ;
	else if(disable_transmit | tx_hs_soft_reset | eop_transmitted_long)
		eop_transmitted_d <= 1'b 0 ;
	else if(eop_transmitted)
		eop_transmitted_d <= 1'b 1 ;
end
assign bit_time_en = 	(sync_en |
			 eop_en  |
			 tx_start_delay ) ;
assign bit_time_threshold = (tx_hs_state == TX_HS_IDLE) ? (databus ? HS_SIXTEEN_BITS : HS_EIGHT_BITS) : HS_EIGHT_BITS ;
assign bit_time_reached   = (bit_time == bit_time_threshold) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		bit_time <= 4'd 0 ;
	else if(disable_transmit | tx_hs_soft_reset | eop_transmitted | bit_time_reached)
		bit_time <= 4'd 0 ;
	else if(bit_time_en)
		bit_time <= bit_time + 4'd 1 ;
end
assign shift_sync_shift_reg = tx_sync_en ;
assign load_sync_shift_reg  =   (shift_sync_shift_reg & bit_time_reached) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		sync_shift_reg <= 8'h 00 ;
	else if(disable_transmit | tx_hs_soft_reset | eop_transmitted)
		sync_shift_reg <= 8'h 00 ;
	else if(load_sync_shift_reg)
	begin
		if(tx_sync3_en)
			sync_shift_reg <= 8'h 00 ;
		else if(tx_sync2_en)
			sync_shift_reg <= 8'h 80 ;
		else if(tx_sync1_en)
			sync_shift_reg <= 8'h 00 ;
		else if(tx_sync0_en)
			sync_shift_reg <= 8'h 00 ;
	end
	else if(shift_sync_shift_reg)
		sync_shift_reg <= {sync_shift_reg[0],sync_shift_reg[7:1]} ;
end
assign sync = sync_shift_reg[0] ;
assign shift_eop_shift_reg = tx_eop_en ;
assign load_eop_shift_reg  =   (shift_eop_shift_reg & bit_time_reached) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		eop_shift_reg <= 8'h FE ;
	else if(disable_transmit | tx_hs_soft_reset | eop_transmitted | posedge_txvalid_hs)
		eop_shift_reg <= 8'h FE ;
	else if(load_eop_shift_reg & (tx_eop3_en | tx_eop2_en | tx_eop1_en | tx_eop0_en))
	begin
		eop_shift_reg <= 8'h FF ; 	
	end
	else if(shift_eop_shift_reg)
		eop_shift_reg <= {eop_shift_reg[0],eop_shift_reg[7:1]} ;
end
assign eop = eop_shift_reg[0] ;
assign data_state = (tx_hs_state == TX_HS_DATA) ;
assign data_valid = (data_state & ~bitstuff_valid) ;
assign data	  = tx_shift_reg[0] ;
assign shift_tx_shift_reg = data_valid ;
assign load_tx_shift_reg  = (data_valid & bit_cnt_reached & bit_cnt_en) ;
assign txvalid_oddbyte = ~txvalidh_d & txvalid_d & txready_d;
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
	begin
		txvalid_oddbyte_d <= 1'b 0 ;
	end
	else
	begin
		txvalid_oddbyte_d <=  txvalid_oddbyte;
	end
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
	begin
	        load_tx_shift_reg_d <= 1'b1;
	end
	else
	begin
		load_tx_shift_reg_d <= load_tx_shift_reg;
	end
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		tx_shift_reg_end <= 1'b1;
	else if(txvalid_d | disable_transmit | tx_hs_soft_reset | eop_transmitted_long)
		tx_shift_reg_end <= 1'b1;	   
	else if(load_tx_shift_reg_d & (output_toggle == hold_reg_toggle) & txvalid_oddbyte_d & databus)
		tx_shift_reg_end <= 1'b0;
end
assign clear_hold_reg = (data_state & (tx_hs_next_state == TX_HS_IDLE)) ;
assign initial_load   = (bit_time_reached & tx_sync3_en) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
	begin
		tx_shift_reg 		 <= 16'h 0000 ;
		tx_shift_reg_valid  	 <= 1'b 0     ;
		tx_shift_reg_validh 	 <= 1'b 0     ;
		tx_shift_reg_bitstuffen  <= 1'b 0     ;
		tx_shift_reg_bitstuffenh <= 1'b 0     ;
	end
	else if(disable_transmit | tx_hs_soft_reset | eop_transmitted)
	begin
		tx_shift_reg 		 <= 16'h 0000 ;
		tx_shift_reg_valid  	 <= 1'b 0     ;
		tx_shift_reg_validh 	 <= 1'b 0     ;
		tx_shift_reg_bitstuffen  <= 1'b 0     ;
		tx_shift_reg_bitstuffenh <= 1'b 0     ;
	end
	else if(load_tx_shift_reg | initial_load)
	begin
		if((output_toggle == 3'b 000) | initial_load)
		begin
			tx_shift_reg_valid		<= hold_reg0_valid & tx_shift_reg_end	;
			tx_shift_reg[7:0]		<= hold_reg0[7:0]	;
			tx_shift_reg_validh		<= databus ? hold_reg0_validh : 1'b 0  ; 			
			tx_shift_reg[15:8]		<= databus ? hold_reg0[15:8]  : 8'h 00 ;
			tx_shift_reg_bitstuffen  	<= hold_reg0_txbitstuffenable  ;
			tx_shift_reg_bitstuffenh 	<= hold_reg0_txbitstuffenableh ;
		end
		else if(output_toggle == 3'b 001)
		begin
			tx_shift_reg_valid		<= hold_reg1_valid & tx_shift_reg_end	;
			tx_shift_reg[7:0]		<= hold_reg1[7:0]	;
			tx_shift_reg_validh		<= databus ? hold_reg1_validh : 1'b 0  ; 			
			tx_shift_reg[15:8]		<= databus ? hold_reg1[15:8]  : 8'h 00 ;
			tx_shift_reg_bitstuffen  	<= hold_reg1_txbitstuffenable  ;
			tx_shift_reg_bitstuffenh 	<= hold_reg1_txbitstuffenableh ;
		end
		else if(output_toggle == 3'b 010)
		begin
			tx_shift_reg_valid		<= hold_reg2_valid & tx_shift_reg_end	;
			tx_shift_reg[7:0]		<= hold_reg2[7:0]	;
			tx_shift_reg_validh		<= databus ? hold_reg2_validh : 1'b 0  ; 			
			tx_shift_reg[15:8]		<= databus ? hold_reg2[15:8]  : 8'h 00 ;
			tx_shift_reg_bitstuffen  	<= hold_reg2_txbitstuffenable  ;
			tx_shift_reg_bitstuffenh 	<= hold_reg2_txbitstuffenableh ;
		end
		else if(output_toggle == 3'b 011)
		begin
			tx_shift_reg_valid		<= hold_reg3_valid & tx_shift_reg_end	;
			tx_shift_reg[7:0]		<= hold_reg3[7:0]	;
			tx_shift_reg_validh		<= databus ? hold_reg3_validh : 1'b 0  ; 			
			tx_shift_reg[15:8]		<= databus ? hold_reg3[15:8]  : 8'h 00 ;
			tx_shift_reg_bitstuffen  	<= hold_reg3_txbitstuffenable  ;
			tx_shift_reg_bitstuffenh 	<= hold_reg3_txbitstuffenableh ;
		end
		else if(output_toggle == 3'b 100)
		begin
			tx_shift_reg_valid		<= hold_reg4_valid & tx_shift_reg_end	;
			tx_shift_reg[7:0]		<= hold_reg4[7:0]	;
			tx_shift_reg_validh		<= databus ? hold_reg4_validh : 1'b 0  ; 			
			tx_shift_reg[15:8]		<= databus ? hold_reg4[15:8]  : 8'h 00 ;
			tx_shift_reg_bitstuffen  	<= hold_reg4_txbitstuffenable  ;
			tx_shift_reg_bitstuffenh 	<= hold_reg4_txbitstuffenableh ;
		end
		else if(output_toggle == 3'b 101)
		begin
			tx_shift_reg_valid		<= hold_reg5_valid & tx_shift_reg_end	;
			tx_shift_reg[7:0]		<= hold_reg5[7:0]	;
			tx_shift_reg_validh		<= databus ? hold_reg5_validh : 1'b 0  ; 			
			tx_shift_reg[15:8]		<= databus ? hold_reg5[15:8]  : 8'h 00 ;
			tx_shift_reg_bitstuffen  	<= hold_reg5_txbitstuffenable  ;
			tx_shift_reg_bitstuffenh 	<= hold_reg5_txbitstuffenableh ;
		end
		else if(output_toggle == 3'b 110)
		begin
			tx_shift_reg_valid		<= hold_reg6_valid & tx_shift_reg_end	;
			tx_shift_reg[7:0]		<= hold_reg6[7:0]	;
			tx_shift_reg_validh		<= databus ? hold_reg6_validh : 1'b 0  ; 			
			tx_shift_reg[15:8]		<= databus ? hold_reg6[15:8]  : 8'h 00 ;
			tx_shift_reg_bitstuffen  	<= hold_reg6_txbitstuffenable  ;
			tx_shift_reg_bitstuffenh 	<= hold_reg6_txbitstuffenableh ;
		end
		else
		begin
			tx_shift_reg_valid		<= hold_reg7_valid & tx_shift_reg_end	;
			tx_shift_reg[7:0]		<= hold_reg7[7:0]	;
			tx_shift_reg_validh		<= databus ? hold_reg7_validh : 1'b 0  ; 			
			tx_shift_reg[15:8]		<= databus ? hold_reg7[15:8]  : 8'h 00 ;
			tx_shift_reg_bitstuffen  	<= hold_reg7_txbitstuffenable  ;
			tx_shift_reg_bitstuffenh 	<= hold_reg7_txbitstuffenableh ;
		end
	end
	else if(shift_tx_shift_reg)
	begin
		if(databus)
		begin
			tx_shift_reg[15:0] <= {tx_shift_reg[0],tx_shift_reg[15:1]} ;
		end
		else
		begin
			tx_shift_reg[7:0]  <= {tx_shift_reg[0],tx_shift_reg[7:1]}  ;
			tx_shift_reg[15:8] <= 8'h 00 ;
		end
	end
end
assign bit_cnt_en = data_valid ;
assign bit_cnt_threshold    = databus ? (tx_shift_reg_valid ? (tx_shift_reg_validh ? 4'd 15 : 4'd 7) : 4'd 7) : 4'd 7 ;
assign bit_cnt_reached      = (bit_cnt == bit_cnt_threshold) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		bit_cnt <= 4'd 0 ;
	else if(disable_transmit | tx_hs_soft_reset | eop_transmitted | (bit_cnt_reached & bit_cnt_en))
		bit_cnt <= 4'd 0 ;
	else if(bit_cnt_en)
		bit_cnt <= bit_cnt + 4'd 1 ;
end
assign output_toggle_en = (tx_hs_state == TX_HS_DATA & bit_cnt_reached & bit_cnt_en) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		output_toggle <= 3'd 0 ;
	else if(disable_transmit | tx_hs_soft_reset | eop_transmitted)
		output_toggle <= 3'd 0 ;
	else if(output_toggle_en | initial_load)
		output_toggle <= #0.1 output_toggle + 3'd 1 ;
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		tx_hs_state <= TX_HS_IDLE ;
	else if(disable_transmit | tx_hs_soft_reset | eop_transmitted)
		tx_hs_state <= TX_HS_IDLE ;
	else
		tx_hs_state <= tx_hs_next_state ;
end
always @*
begin
	case(tx_hs_state)
	TX_HS_IDLE:
	begin
		if(txvalid_d & bit_time_reached)
			if((disable_bitstuff_nrzi | disable_sync_eop ) & ~databus)
				tx_hs_next_state = TX_HS_SYNC2 ;
			else
				tx_hs_next_state = TX_HS_SYNC0 ;
		else
			tx_hs_next_state = TX_HS_IDLE ;
	end
	TX_HS_SYNC0:
	begin
		if(bit_time_reached)
			tx_hs_next_state = TX_HS_SYNC1 ;
		else
			tx_hs_next_state = TX_HS_SYNC0 ;
	end
	TX_HS_SYNC1:
	begin
		if(bit_time_reached)
			tx_hs_next_state = TX_HS_SYNC2 ;
		else
			tx_hs_next_state = TX_HS_SYNC1 ;
	end
	TX_HS_SYNC2:
	begin
		if(bit_time_reached)
			tx_hs_next_state = TX_HS_SYNC3 ;
		else
			tx_hs_next_state = TX_HS_SYNC2 ;
	end
	TX_HS_SYNC3:
	begin
		if(bit_time_reached)
			tx_hs_next_state = TX_HS_DATA ;
		else
			tx_hs_next_state = TX_HS_SYNC3 ;
	end
	TX_HS_DATA:
	begin
		if(~tx_shift_reg_valid & ~txvalid_d)
		begin
			if(disable_sync_eop | disable_bitstuff_nrzi)
				tx_hs_next_state = TX_HS_IDLE ;
			else
				tx_hs_next_state = TX_HS_EOP0 ;
		end
		else
			tx_hs_next_state = TX_HS_DATA ;
	end
	TX_HS_EOP0:
	begin
		if(bit_time_reached)
			if(hs_sof)
				tx_hs_next_state = TX_HS_EOP1 ;
			else
				tx_hs_next_state = TX_HS_IDLE ;
		else
			tx_hs_next_state = TX_HS_EOP0 ;
	end
	TX_HS_EOP1:
	begin
		if(bit_time_reached)
			tx_hs_next_state = TX_HS_EOP2 ;
		else
			tx_hs_next_state = TX_HS_EOP1 ;
	end
	TX_HS_EOP2:
	begin
		if(bit_time_reached)
			tx_hs_next_state = TX_HS_EOP3 ;
		else
			tx_hs_next_state = TX_HS_EOP2 ;
	end
	TX_HS_EOP3:
	begin
		if(bit_time_reached)
			tx_hs_next_state = TX_HS_EOP4 ;
		else
			tx_hs_next_state = TX_HS_EOP3 ;
	end
	TX_HS_EOP4:
	begin
		if(bit_time_reached)
			tx_hs_next_state = TX_HS_IDLE ;
		else
			tx_hs_next_state = TX_HS_EOP4 ;
	end
	default:	tx_hs_next_state = TX_HS_IDLE ;
	endcase
end
assign tx_data_valid 	= disable_sync_eop ? (data_state & (tx_shift_reg_valid | bitstuff_valid)) : (tx_sync_en | (data_state & (tx_shift_reg_valid| bitstuff_valid)) | tx_eop_en) ;
assign tx_data		= (tx_eop_en ? eop : 
				(tx_sync_en ? sync : 
					(data_state ? (bitstuff_valid ? 1'b 0 : data) : 1'b 1))) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
	begin
		tx_shift_reg_bitstuffenh_d <= 1'd 0 ;
		tx_shift_reg_bitstuffen_d <= 1'd 0 ;
	end
	else
	begin
		tx_shift_reg_bitstuffenh_d <= tx_shift_reg_bitstuffenh ;
		tx_shift_reg_bitstuffen_d <= tx_shift_reg_bitstuffen ;
	end
end
assign tx_shift_reg_bitstuffenh_w = tx_shift_reg_bitstuffenh_d | tx_shift_reg_bitstuffenh;
assign tx_shift_reg_bitstuffen_w = tx_shift_reg_bitstuffen_d | tx_shift_reg_bitstuffen;
assign exception_bitstuffen = databus ? (bit_cnt > 4'd 7 ? tx_shift_reg_bitstuffenh_w : tx_shift_reg_bitstuffen_w) : tx_shift_reg_bitstuffen_w ;
assign bitstuff_en          = (tx_sync_en | data_state) ? (tx_opmode == 2'b 11 ? exception_bitstuffen : (tx_opmode == 2'b 00)) : 1'b 0;
assign bitstuff_rst = (disable_bitstuff_nrzi | bitstuff_detected | (bitstuff_en & ~tx_data)) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		bitstuff_shift_reg <= 5'd 0 ;
	else if(disable_transmit | tx_hs_soft_reset | eop_transmitted | bitstuff_rst)
		bitstuff_shift_reg <= 5'd 0 ;
	else if(bitstuff_en)
		bitstuff_shift_reg <= {tx_data,bitstuff_shift_reg[4:1]} ;
end
assign bitstuff_detected = (tx_data_valid & tx_data & bitstuff_shift_reg == 5'b 1_1111) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		bitstuff_valid <= 1'b 0 ;
	else
		bitstuff_valid <= bitstuff_detected ;
end
assign bitstuff_tx_data       = bitstuff_en ? tx_data : ((tx_eop_en & tx_opmode == 2'b 00) ? eop : data) ;
assign nrzi_en     = ~disable_bitstuff_nrzi ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		curr_value_d <= 1'b 1 ;
	else if(disable_transmit | tx_hs_soft_reset | eop_transmitted)
		curr_value_d <= 1'b 1 ;
	else if(nrzi_en & hs_data_valid)
		curr_value_d <= hs_data ;
end
assign curr_value = bitstuff_tx_data ;
assign prev_value = curr_value_d ;
assign nrzi_enc_data = (nrzi_en & tx_data_valid & (prev_value ~^ curr_value)) ;
assign hs_data_valid = tx_data_valid ;
assign hs_data       = nrzi_en ? nrzi_enc_data : bitstuff_tx_data ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
	begin
		hs_data_valid_d <= 1'b 0 ;
		hsdrv_en    	<= 1'b 0 ;
		hsddi       	<= 1'b 0 ;
	end
	else
	begin
		hs_data_valid_d <= hs_data_valid ;
		hsdrv_en    	<= hs_data_valid ;
		hsddi       	<= hs_data       ;
	end
end
assign hspredrv_en = (txvalid | hs_data_valid | hs_data_valid_d) ;
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
		pd_toggle <= 1'b 0 ;
	else if(disable_transmit | tx_hs_soft_reset | negedge_txvalid)
		pd_toggle <= 1'b 0 ;
	else if(txvalid_d & hs_txready)
		pd_toggle <= ~pd_toggle ;
end
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
	begin
		pd_data1 <= 16'h 0000 ;
		pd_data2 <= 16'h 0000 ;
	end
	else if(disable_transmit | tx_hs_soft_reset | negedge_txvalid)
	begin
		pd_data1 <= 16'h 0000 ;
		pd_data2 <= 16'h 0000 ;
	end
	else if(txvalid_d & hs_txready)
	begin
		if(pd_toggle)
			pd_data2 <= datain ;
		else
			pd_data1 <= datain ;
	end
end
assign pd_datain = pd_toggle ? pd_data1 : pd_data2 ;
udc_tx_pattern_det_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r	c_udc_tx_pattern_det (
.hs_clock		(hs_clock),			 
.rstn_hs_clock		(rstn_hs_clock),		 
.sieclock		(sieclock),			 
.rstn_sieclock		(rstn_sieclock),		 
.pattern_det_soft_reset	(tx_hs_soft_reset),		 
.hs_mode		(hs_mode),			 
.opmode			(opmode_d),			 
.databus		(databus),			 
.txvalid		(txvalid_d),			 
.txvalidh		(txvalidh_d),			 
.datain			(pd_datain),			 
.txready		(txready_d),			 
.txbitstuffenable	(txbitstuffenable_d),		 
.txbitstuffenableh	(txbitstuffenableh_d),		 
.hs_txready_loc		(hs_txready_loc),		 
.eop_transmitted	(eop_transmitted),		 
.ungate_txready		(ungate_txready),
.hs_txready		(hs_txready),			 
.debug_pd_state		(debug_pd_state)
);
reg	[8*16:0] tx_hs_ascii_state ;
always @*
begin
	case(tx_hs_state)
	TX_HS_IDLE	: tx_hs_ascii_state = "TX_HS_IDLE"	;
	TX_HS_SYNC0	: tx_hs_ascii_state = "TX_HS_SYNC0"	;
	TX_HS_SYNC1	: tx_hs_ascii_state = "TX_HS_SYNC1"	;
	TX_HS_SYNC2	: tx_hs_ascii_state = "TX_HS_SYNC2"	;
	TX_HS_SYNC3	: tx_hs_ascii_state = "TX_HS_SYNC3"	;
	TX_HS_DATA	: tx_hs_ascii_state = "TX_HS_DATA"	;
	TX_HS_EOP0	: tx_hs_ascii_state = "TX_HS_EOP0"	;
	TX_HS_EOP1	: tx_hs_ascii_state = "TX_HS_EOP1"	;
	TX_HS_EOP2	: tx_hs_ascii_state = "TX_HS_EOP2"	;
	TX_HS_EOP3	: tx_hs_ascii_state = "TX_HS_EOP3"	;
	TX_HS_EOP4	: tx_hs_ascii_state = "TX_HS_EOP4"	;
	default		: tx_hs_ascii_state = "****UNKNOWN****" ;
	endcase
end
endmodule
`timescale 1ns/1ps
module udc_avdd_sw_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r(
o_hsrx_calib_active,             
o_hsrx_calib_code,               
o_hsrx_clk_gate,                 
o_ana_hsrx_enable,               
o_ana_hsrx_enable_delayed,       
o_cdr_reg9,                      
o_cdr_reg10,                     
o_cdr_reg11,                     
o_hsrx_diff_data,                
o_hsrx_rec_clk,                  
o_hsrx_rec_data,                 
o_hsrx_rec_data_valid,           
o_hsrx_rec_decision_error,       
o_hsrx_sampler_calib_done,       
o_pll_div_refclk,
o_pll_fb_clk,
pll_clk_gate_ack,
o_cdr_test_digout,
i_pll_div_refclk,
test_pll_480_clock_gate_ovr,
i_pll_fb_clk,
i_sampler_clk,                   
i_hsrx_calib_comp_out,           
i_sampler_data,                  
i_ana_pll_coarse_code_done,      
i_ted_squelch_ana,               
i_calib_clk,                     
i_calib_rstb,                    
i_cdr_reg0,                      
i_cdr_reg1,                      
i_cdr_reg2,                      
i_cdr_reg3,                      
i_cdr_reg4,                      
i_cdr_reg5,                      
i_chirp_mode_en,                 
i_hsrx_enable,                   
i_rstb,                          
i_hsrx_sampler_enable,
rstn_pll_clockout,
pll_gate,
o_ana_ted_squelch,
i_ted_calib_done,
i_ted_en,
cdr_eb_wr_reset,
dvdd_core_powergood,
pll_clockout,
pll_clk_sel,
i_pll_480p0_rx_clk,
scan_mode,
scan_en_cg,
scan_hsclock,
scan_sieclock,
iddq_mode,
reset
);
output  o_hsrx_calib_active, cdr_eb_wr_reset, o_hsrx_clk_gate, o_ana_hsrx_enable,
     o_ana_hsrx_enable_delayed,
     o_hsrx_diff_data, o_hsrx_rec_clk, o_hsrx_rec_data,
     o_hsrx_rec_data_valid, o_hsrx_rec_decision_error, pll_clk_gate_ack,
     o_hsrx_sampler_calib_done,o_ana_ted_squelch, pll_clockout, o_pll_div_refclk, o_pll_fb_clk;
input  i_sampler_clk, i_hsrx_calib_comp_out, i_sampler_data, scan_hsclock,
     i_ana_pll_coarse_code_done, i_ted_squelch_ana, i_calib_clk,
     i_calib_rstb, i_chirp_mode_en, i_hsrx_enable, scan_en_cg, iddq_mode,
     i_rstb, i_ted_calib_done, i_ted_en, i_pll_480p0_rx_clk, reset,
     scan_mode, i_hsrx_sampler_enable, rstn_pll_clockout, pll_gate,
     scan_sieclock, i_pll_div_refclk, test_pll_480_clock_gate_ovr, i_pll_fb_clk;
input  dvdd_core_powergood;
output [5:0]  o_hsrx_calib_code;
output [7:0]  o_cdr_reg9, o_cdr_reg10, o_cdr_reg11, o_cdr_test_digout;
input [7:0]  i_cdr_reg0;
input [7:0]  i_cdr_reg1;
input [7:0]  i_cdr_reg2;
input [7:0]  i_cdr_reg3;
input [7:0]  i_cdr_reg4;
input [7:0]  i_cdr_reg5;
input [1:0]  pll_clk_sel;
wire [5:0] ana_calib_code;
wire ana_calib_active, ana_clk_gate, ana_hsrx_enable, ana_hsrx_enable_delayed;
wire pll_clk_gate_ack, scan_reset;
wire [1:0] w_dft_tp1, dft_tp1, dft_in_tp1;
assign scan_reset = ~reset;
dft_tp_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.WIDTH(2),.SCAN_MUX(0)) c_dft_tp1(
.clock        (scan_sieclock),
.reset_n      (scan_reset),
.scan_mode    (scan_mode),
.fcn_signal_in(2'd0),
.d_in         (w_dft_tp1),
.d_out        (dft_tp1)
);
assign w_dft_tp1[0] = ana_calib_active ^ ana_clk_gate ^ ana_hsrx_enable ^ ana_hsrx_enable_delayed;
assign w_dft_tp1[1] = ^ana_calib_code;
assign o_hsrx_calib_active = (iddq_mode | scan_mode) ? 1'b0 : ana_calib_active;
assign o_hsrx_calib_code = (iddq_mode | scan_mode) ? 6'b100000 : ana_calib_code;
assign o_hsrx_clk_gate = (iddq_mode | scan_mode) ? 1'b1 : ana_clk_gate;
assign o_ana_hsrx_enable = (iddq_mode | scan_mode) ? 1'b0 : ana_hsrx_enable;
assign o_ana_hsrx_enable_delayed = (iddq_mode | scan_mode) ? 1'b0 : ana_hsrx_enable_delayed;
dft_tp_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.WIDTH(2),.SCAN_MUX(0)) c_dft_in_tp1(
.clock        (scan_sieclock),
.reset_n      (scan_reset),
.scan_mode    (1'b0),
.fcn_signal_in(2'd0),
.d_in         (2'd0),
.d_out        (dft_in_tp1)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_ted_squelch_ana(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[0]),
.fcn_signal_in(i_ted_squelch_ana),
.fcn_signal_out(scan_ana_ted_squelch)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_hsrx_calib_comp_out(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[0]),
.fcn_signal_in(i_hsrx_calib_comp_out),
.fcn_signal_out(scan_ana_comp_out)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_sampler_data(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[1]),
.fcn_signal_in(i_sampler_data),
.fcn_signal_out(scan_ana_data)
);
assign o_pll_div_refclk = i_pll_div_refclk;
assign o_pll_fb_clk = i_pll_fb_clk;
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_3p36G_clk(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_hsclock),
.fcn_signal_in(i_sampler_clk),
.fcn_signal_out(scan_3p36G_clk)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_480_rx_clock(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_hsclock),
.fcn_signal_in(i_pll_480p0_rx_clk),
.fcn_signal_out(scan_pll_480p0_rx_clk)
);
usb2_cdr_dig_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_usb2_cdr_dig_top(
.o_ana_calib_active             (ana_calib_active),              
.o_ana_calib_code               (ana_calib_code),                
.o_ana_clk_gate                 (ana_clk_gate),                  
.o_ana_hsrx_enable              (ana_hsrx_enable),               
.o_ana_hsrx_enable_delayed      (ana_hsrx_enable_delayed),       
.o_cdr_reg9                     (o_cdr_reg9),                    
.o_cdr_reg10                    (o_cdr_reg10),                   
.o_cdr_reg11                    (o_cdr_reg11),                   
.o_hsrx_diff_data               (o_hsrx_diff_data),              
.o_hsrx_rec_clk                 (o_hsrx_rec_clk),                
.o_hsrx_rec_data                (o_hsrx_rec_data),               
.o_hsrx_rec_data_valid          (o_hsrx_rec_data_valid),         
.o_hsrx_rec_decision_error      (o_hsrx_rec_decision_error),     
.o_hsrx_sampler_calib_done      (o_hsrx_sampler_calib_done),     
.o_cdr_test_digout              (o_cdr_test_digout),
.scan_hsclock                   (scan_hsclock),
.cdr_eb_wr_reset                (cdr_eb_wr_reset),
.scan_sieclock                  (scan_sieclock),
.scan_mode                      (scan_mode),
.reset                          (reset),
.i_ana_3p36G_clk                (scan_3p36G_clk),                
.i_ana_comp_out                 (scan_ana_comp_out),             
.i_ana_data                     (scan_ana_data),                 
.i_ana_pll_coarse_code_done     (i_ana_pll_coarse_code_done),    
.i_ana_ted_squelch              (scan_ana_ted_squelch),          
.i_calib_clk                    (i_calib_clk),                   
.i_calib_rstb                   (i_calib_rstb),                  
.i_cdr_reg1                     (i_cdr_reg1),                    
.i_cdr_reg2                     (i_cdr_reg2),                    
.i_cdr_reg3                     (i_cdr_reg3),                    
.i_cdr_reg4                     (i_cdr_reg4),                    
.i_cdr_reg5                     (i_cdr_reg5),                    
.i_chirp_mode_en                (i_chirp_mode_en),               
.i_hsrx_enable                  (i_hsrx_enable),                 
.i_hsrx_sampler_enable          (i_hsrx_sampler_enable),
.i_rstb                         (i_rstb)                         
);
squelch_filter_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_squelch_filter(
.o_ana_ted_squelch              (o_ana_ted_squelch),
.i_ana_ted_squelch              (scan_ana_ted_squelch),          
.i_ted_calib_done               (i_ted_calib_done),
.i_ted_en                       (i_ted_en),
.i_tm_squelch                   (i_cdr_reg0[2:0]),               
.i_calib_clk                    (i_calib_clk),
.i_calib_rstb                   (i_calib_rstb)
);
pll_clk_divider_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_pll_clk_divider(
.i_dvdd_core_powergood          (dvdd_core_powergood),
.pll_clockout                   (pll_clockout),
.pll_clk_gate_ack               (pll_clk_gate_ack),
.pll_clk_sel                    (pll_clk_sel),
.i_pll_480p0_rx_clk             (scan_pll_480p0_rx_clk),
.test_pll_480_clock_gate_ovr    (test_pll_480_clock_gate_ovr),
.reset                          (reset),
.scan_mode                      (scan_mode),
.scan_en_cg                     (scan_en_cg),
.i_tm_pll_clk_div               (i_cdr_reg0[5:3]),
.rstn_pll_clockout              (rstn_pll_clockout),
.dvdd_iso                       (dvdd_iso),
.pll_gate                       (pll_gate)
);
endmodule
`timescale 1ns/1ps
module udc_tx_lsfs_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r ( 
byte_clock,		 
rstn_byte_clock,	 
sieclock,		 
rstn_sieclock,		 
tx_lsfs_soft_reset,	 
hs_mode,		 
ls_mode,		 
fs_mode,		 
fs_mode_pre,		 
host_mode,		 
opmode,			 
databus,		 
txvalid,		 
txvalidh,		 
datain,			 
test_fs_preamble_en,	 
test_fs_preamble,	 
lsfs_transmit,		 
lsfs_txready,		 
lsfsdrv_en,		 
lsfsddi,		 
lsfs_assert_sezero,	 
debug_tx_lsfs_state,
debug_resume_eop ,
debug_remote_wakeup ,
debug_preamble_sent ,
debug_ls_keep_alive ,
debug_bitstuff_en 
);
parameter TX_LSFS_IDLE		= 4'b 0000 ;
parameter TX_LSFS_SYNC		= 4'b 0001 ;
parameter TX_LSFS_PREAMBLE	= 4'b 0010 ;
parameter TX_LSFS_HUB_SETUP	= 4'b 0011 ;
parameter TX_LSFS_DATA		= 4'b 0100 ;
parameter TX_LSFS_EOP0		= 4'b 0101 ;
parameter TX_LSFS_EOP1		= 4'b 0110 ;
parameter TX_LSFS_WAIT_RESUME	= 4'b 0111 ;
parameter TX_LSFS_EOPJ		= 4'b 1000 ;
parameter FSLS_SIXTEEN_BITS	= 4'd 15 ;
parameter FSLS_EIGHT_BITS	= 4'd 7  ;
parameter FSLS_FOUR_BITS	= 4'd 3  ;
input		byte_clock, rstn_byte_clock, sieclock, rstn_sieclock ;
input		tx_lsfs_soft_reset, hs_mode, ls_mode, fs_mode, fs_mode_pre, host_mode, 
		databus, txvalid, txvalidh, test_fs_preamble_en ;
input	[1:0]	opmode ;
input	[7:0]	test_fs_preamble ;
input	[15:0]	datain ;
output		lsfs_txready, lsfsdrv_en, lsfsddi, lsfs_assert_sezero, lsfs_transmit ;
output	[3:0]	debug_tx_lsfs_state ;
output		debug_resume_eop, debug_remote_wakeup, debug_preamble_sent ;
output		debug_ls_keep_alive, debug_bitstuff_en ;
reg		 curr_value_d, bitstuff_valid, hold_reg_valid, remote_wakeup,
		hold_reg_validh, hold_reg_bitstuff_en, sync, txready_d, txready_2d, ls_keep_alive, 
		resume_eop, preamble_sent, txvalid_d, posedge_txvalid_d, posedge_txvalid_2d, posedge_txvalid_3d,
		txready_fs_16b ;
reg	[3:0]	tx_lsfs_state, tx_lsfs_next_state, bit_cnt ;
reg	[4:0]	bitstuff_shift_reg ;
reg	[5:0]	bit_time ;
reg	[7:0]	preamble_shift_reg ;
reg	[15:0]	hold_reg ;
wire		tx_start_delay, sync_en, tx_sync_en,  eopse0_en, eopj_en, eop_en, 
		tx_eop_en, bit_time_en, bit_time_reached, disable_transmit, disable_bitstuff_nrzi,
	        lsfs_data, lsfs_data_valid, nrzi_enc_data, nrzi_en, curr_value, prev_value, bitstuff_tx_data,
		bitstuff_en, bitstuff_detected, bitstuff_rst, bitstuff_valid_rst, shift_bitstuff, tx_data,
		tx_data_valid, bit_cnt_reached, bit_cnt_en, data_state, data, data_valid, load_hold_reg, shift_hold_reg,
	        sync_toggle, bit_time_end, lsfs_txready, ls_keep_alive_txready, preamble, preamble_en,
		hub_setup_en, preamble_transmitted, preamble_mode, preamble_sent_loc, normal_load_en, exc_load_en, 
		fsddi, lsddi, tx_no_sync_en, long_eop_en, wait_eop_en, lsfs_eop_transmitted, sync_valid, tx_end, 
		lsfs_transmit, long_eopj_en, no_eop_finish, posedge_txvalid, txready_8b, txready_16b, txready_ls_16b,
		tx_start_delay_en ;
wire		lsfsdrv_en, lsfsddi, lsfs_assert_sezero ;
wire	[3:0]	bit_cnt_threshold, data_threshold, resume_threshold ;
wire	[5:0]	bit_time_threshold ;
wire	[3:0]	debug_tx_lsfs_state ;
wire		debug_resume_eop, debug_remote_wakeup, debug_preamble_sent ;
wire		debug_ls_keep_alive, debug_bitstuff_en ;
wire		shift_preamble;
assign debug_tx_lsfs_state = tx_lsfs_state ;
assign debug_resume_eop = resume_eop ;
assign debug_remote_wakeup = remote_wakeup ;
assign debug_preamble_sent = preamble_sent ;
assign debug_ls_keep_alive = ls_keep_alive ;
assign debug_bitstuff_en = bitstuff_en ;
assign lsfs_transmit     = (tx_lsfs_state != TX_LSFS_IDLE) ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
	if(~rstn_byte_clock)
		ls_keep_alive <= 1'b 0 ;
	else if(disable_transmit | tx_lsfs_soft_reset | lsfs_eop_transmitted)
		ls_keep_alive <= 1'b 0 ;
	else if(ls_mode & posedge_txvalid & datain[7:0] == 8'h A5)
		ls_keep_alive <= 1'b 1 ;
end
assign ls_keep_alive_txready = (ls_keep_alive & tx_start_delay) ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
	if(~rstn_byte_clock)
		resume_eop <= 1'b 0 ;
	else if(disable_transmit | tx_lsfs_soft_reset | lsfs_eop_transmitted)
		resume_eop <= 1'b 0 ;
	else if(host_mode & fs_mode & posedge_txvalid & disable_bitstuff_nrzi)
		resume_eop <= 1'b 1 ;
end
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
	if(~rstn_byte_clock)
		remote_wakeup <= 1'b 0 ;
	else if(disable_transmit | tx_lsfs_soft_reset | lsfs_eop_transmitted | fs_mode_pre)	 
		remote_wakeup <= 1'b 0 ;
	else if(~host_mode & posedge_txvalid & disable_bitstuff_nrzi)	 
		remote_wakeup <= 1'b 1 ;
end
assign preamble_transmitted   = (preamble_en & bit_time_end & bit_cnt_reached) ;
assign shift_preamble         = (preamble_en & bit_time_end) ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
	if(~rstn_byte_clock)
		preamble_shift_reg <= 8'h 41 ;
	else if(disable_transmit | tx_lsfs_soft_reset | preamble_transmitted)
		preamble_shift_reg <= test_fs_preamble_en ? test_fs_preamble : 8'h 41 ;
	else if(shift_preamble)
		preamble_shift_reg <= {preamble_shift_reg[0],preamble_shift_reg[7:1]} ;
end
assign preamble_mode = (fs_mode_pre & (tx_sync_en | preamble_en) & ~preamble_sent) ;
assign hub_setup_en  = (tx_lsfs_state == TX_LSFS_HUB_SETUP) ;
assign preamble_en   = (tx_lsfs_state == TX_LSFS_PREAMBLE) ;
assign preamble      = preamble_shift_reg[0] ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
	if(~rstn_byte_clock)
	begin
		txready_d  		<= 1'b 0 ;
		txready_2d 		<= 1'b 0 ;
		txvalid_d  		<= 1'b 0 ;
		posedge_txvalid_d 	<= 1'b 0 ;
		posedge_txvalid_2d 	<= 1'b 0 ;
		posedge_txvalid_3d 	<= 1'b 0 ;
	end
	else
	begin
		txready_d  		<= (load_hold_reg | ls_keep_alive_txready) ;
		txready_2d 		<= txready_d  ;
		txvalid_d  		<= txvalid ;
		posedge_txvalid_d 	<= posedge_txvalid ;
		posedge_txvalid_2d 	<= posedge_txvalid_d ;
		posedge_txvalid_3d 	<= posedge_txvalid_2d ;
	end
end
assign posedge_txvalid 		= (txvalid   & ~txvalid_d) ;
assign txready_8b 	= txready_d ;
assign txready_ls_16b = (txready_d | txready_2d) ;
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
		txready_fs_16b 	<= 1'b 0 ;
	else
		txready_fs_16b 	<= txready_ls_16b ;
end
assign txready_16b	= txready_fs_16b;
assign lsfs_txready 	= txvalid_d ? (databus ? txready_16b : txready_8b) : 1'b 0 ;
assign no_eop_finish	    = ((tx_lsfs_state == TX_LSFS_DATA && tx_lsfs_next_state == TX_LSFS_IDLE) ||
					(tx_lsfs_state == TX_LSFS_WAIT_RESUME && tx_lsfs_next_state == TX_LSFS_IDLE)) ;
assign lsfs_eop_transmitted = ((tx_lsfs_state == TX_LSFS_EOPJ & bit_time_end) | no_eop_finish) ;
assign disable_transmit	     = (hs_mode | opmode == 2'b 11) ;
assign disable_bitstuff_nrzi = ((fs_mode | fs_mode_pre | ls_mode) & opmode == 2'b 10) ;
assign tx_start_delay_en	= databus ? posedge_txvalid_3d : posedge_txvalid_2d ;
assign tx_start_delay 		= (tx_lsfs_state == TX_LSFS_IDLE & tx_start_delay_en & txvalid) ;
assign sync_en        = (tx_lsfs_state == TX_LSFS_SYNC) ;
assign tx_sync_en     = disable_bitstuff_nrzi ? 1'b 0 : sync_en ;
assign eopse0_en      = (tx_lsfs_state == TX_LSFS_EOP0 || tx_lsfs_state == TX_LSFS_EOP1) ;
assign eopj_en	      = (tx_lsfs_state == TX_LSFS_EOPJ) ;
assign long_eopj_en   = (eopj_en & resume_eop) ;
assign eop_en         = eopse0_en ;	
assign long_eop_en    = (eop_en & resume_eop) ;
assign wait_eop_en    = (tx_lsfs_state == TX_LSFS_WAIT_RESUME) ;
assign tx_eop_en      = (eop_en | wait_eop_en | eopj_en) ;
assign preamble_j     = (tx_lsfs_state == TX_LSFS_HUB_SETUP && bit_time < 6'd5);
assign bit_time_en = 	(tx_sync_en      |
			 data_state      |
			 tx_eop_en       |
			 preamble_en     |
			 hub_setup_en    ) ;
assign bit_time_threshold = (fs_mode | preamble_mode) ? ((long_eop_en | long_eopj_en | preamble_sent) ? 6'd 39 : 6'd 4) : 6'd 39 ;
assign bit_time_reached   = (bit_time == bit_time_threshold) ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
	if(~rstn_byte_clock)
		bit_time <= 6'd 0 ;
	else if(disable_transmit | tx_lsfs_soft_reset | lsfs_eop_transmitted | bit_time_reached)
		bit_time <= 6'd 0 ;
	else if(bit_time_en)
		bit_time <= bit_time + 6'd 1 ;
end
assign bit_time_end   = (bit_time_en & bit_time_reached) ;
assign sync_toggle = (tx_sync_en & bit_time_end & bit_cnt == 4'd 6);
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
	if(~rstn_byte_clock)
		sync <= 1'b 0 ;
	else if(disable_transmit | tx_lsfs_soft_reset | preamble_sent_loc | lsfs_eop_transmitted)
		sync <= 1'b 0 ;
	else if(sync_toggle)
		sync <= 1'b 1 ;
end
assign normal_load_en	= ((tx_sync_en	 |		 
			    data_state)	 		 
			    	& bit_time_end 		 
				& bit_cnt_reached 	 
				& ~preamble_mode) ;
assign tx_no_sync_en = (disable_bitstuff_nrzi & tx_start_delay) ;
assign preamble_sent_loc = (txvalid & hub_setup_en & bit_time_end) ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
	if(~rstn_byte_clock)
		preamble_sent <= 1'b 0 ;
	else if(disable_transmit | tx_lsfs_soft_reset | lsfs_eop_transmitted)
		preamble_sent <= 1'b 0 ;
	else if(preamble_sent_loc)
		preamble_sent <= 1'b 1 ;
end
assign exc_load_en   = (tx_no_sync_en) ;
assign load_hold_reg  	= (txvalid & (normal_load_en | exc_load_en)) ;
assign shift_hold_reg = (data_state & bit_time_end & ~bitstuff_detected) ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
	if(~rstn_byte_clock)
	begin
		hold_reg_valid  	<= 1'b 0   ;
		hold_reg_validh 	<= 1'b 0   ;
		hold_reg		<= 16'h 0000 ;
		hold_reg_bitstuff_en	<= 1'b 1   ;
	end
	else if(disable_transmit | tx_lsfs_soft_reset | lsfs_eop_transmitted)
	begin
		hold_reg_valid  	<= 1'b 0   ;
		hold_reg_validh 	<= 1'b 0   ;
		hold_reg		<= 16'h 0000 ;
		hold_reg_bitstuff_en	<= 1'b 1   ;
	end
	else if(load_hold_reg)
	begin
		hold_reg_valid		<= txvalid  				;
		hold_reg[7:0]		<= datain[7:0] 				;
		hold_reg_validh		<= databus ? txvalidh : 1'b 0 		;
		hold_reg[15:8]		<= databus ? datain[15:8] : 8'h 00 	;
		hold_reg_bitstuff_en	<= (opmode == 2'b 00);
	end
	else if(shift_hold_reg)
	begin
		if(databus)
			hold_reg[15:0]	<= {hold_reg[0],hold_reg[15:1]}		;
		else
		begin
			hold_reg[7:0]	<= {hold_reg[0],hold_reg[7:1]}		;
			hold_reg[15:8]	<= 8'h 00 ;
		end
	end
end
assign data_state     = (tx_lsfs_state == TX_LSFS_DATA) ;
assign data_valid     = (data_state & bit_time_end & ~bitstuff_detected) ;
assign data	      = hold_reg[0] ;
assign sync_valid = (tx_sync_en & bit_time_end) ;
assign bit_cnt_en = (preamble_en | data_valid | sync_valid | wait_eop_en) ;
assign resume_threshold  = FSLS_FOUR_BITS ;
assign data_threshold    = databus ? (hold_reg_valid ? (hold_reg_validh ? FSLS_SIXTEEN_BITS : FSLS_EIGHT_BITS) : FSLS_EIGHT_BITS) : FSLS_EIGHT_BITS ;
assign bit_cnt_threshold = wait_eop_en ? resume_threshold : data_threshold ;
assign bit_cnt_reached   = (bit_cnt == bit_cnt_threshold & bit_time_end & ~bitstuff_detected) ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
	if(~rstn_byte_clock)
		bit_cnt <= 4'd 0 ;
	else if(disable_transmit | tx_lsfs_soft_reset | lsfs_eop_transmitted | bit_cnt_reached)
		bit_cnt <= 4'd 0 ;
	else if(bit_cnt_en)
		bit_cnt <= bit_cnt + 4'd 1 ;
end
assign tx_end = (bit_time_end & bit_cnt_reached & hold_reg_valid & ~txvalid) ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
	if(~rstn_byte_clock)
		tx_lsfs_state <= TX_LSFS_IDLE ;
	else if(disable_transmit | tx_lsfs_soft_reset | lsfs_eop_transmitted)
		tx_lsfs_state <= TX_LSFS_IDLE ;
	else
		tx_lsfs_state <= tx_lsfs_next_state ;
end
always @*
begin
	case(tx_lsfs_state)
	TX_LSFS_IDLE:
	begin
		if(tx_start_delay)
			if(ls_keep_alive)
				tx_lsfs_next_state = TX_LSFS_EOP0 ;
			else if(disable_bitstuff_nrzi)
				tx_lsfs_next_state = TX_LSFS_DATA ;
			else
				tx_lsfs_next_state = TX_LSFS_SYNC ;
		else
			tx_lsfs_next_state = TX_LSFS_IDLE ;
	end
	TX_LSFS_SYNC:
	begin
		if(bit_time_end & bit_cnt_reached)
			if(fs_mode_pre)
			begin
				if(preamble_sent)
					tx_lsfs_next_state = TX_LSFS_DATA ;
				else
					tx_lsfs_next_state = TX_LSFS_PREAMBLE ;
			end
			else
				tx_lsfs_next_state = TX_LSFS_DATA ;
		else
			tx_lsfs_next_state = TX_LSFS_SYNC ;
	end
	TX_LSFS_PREAMBLE:
	begin
		if(bit_time_end & bit_cnt_reached)
			tx_lsfs_next_state = TX_LSFS_HUB_SETUP ;
		else
			tx_lsfs_next_state = TX_LSFS_PREAMBLE ;
	end
	TX_LSFS_HUB_SETUP:
	begin
		if(bit_time_end)
			tx_lsfs_next_state = TX_LSFS_SYNC ;
		else
			tx_lsfs_next_state = TX_LSFS_HUB_SETUP ;
	end
	TX_LSFS_DATA:
	begin
		if(hold_reg_valid & ~tx_end)
			tx_lsfs_next_state = TX_LSFS_DATA ;
		else if(~host_mode & remote_wakeup)
			tx_lsfs_next_state = TX_LSFS_IDLE ;
		else
			tx_lsfs_next_state = TX_LSFS_EOP0 ;
	end
	TX_LSFS_EOP0:
	begin
		if(bit_time_end)
			tx_lsfs_next_state = TX_LSFS_EOP1 ;
		else
			tx_lsfs_next_state = TX_LSFS_EOP0 ;
	end
	TX_LSFS_EOP1:
	begin
		if(bit_time_end)
			if(resume_eop)
				tx_lsfs_next_state = TX_LSFS_WAIT_RESUME ;
			else
				tx_lsfs_next_state = TX_LSFS_EOPJ ;
		else
			tx_lsfs_next_state = TX_LSFS_EOP1 ;
	end
	TX_LSFS_WAIT_RESUME:
	begin
		if(bit_time_end & bit_cnt_reached)
			if(hs_mode)
				tx_lsfs_next_state = TX_LSFS_IDLE ;
			else
				tx_lsfs_next_state = TX_LSFS_EOPJ ;
		else
			tx_lsfs_next_state = TX_LSFS_WAIT_RESUME ;
	end
	TX_LSFS_EOPJ:
	begin
		if(bit_time_end)
			tx_lsfs_next_state = TX_LSFS_IDLE ;
		else
			tx_lsfs_next_state = TX_LSFS_EOPJ ;
	end
	default: 	tx_lsfs_next_state = TX_LSFS_IDLE ;
	endcase
end
assign tx_data_valid 	= (tx_sync_en | data_state) ;
assign tx_data		= (eopj_en ? 1'b 1 :
				(tx_sync_en ? sync :
					(data_state ? (bitstuff_valid ? 1'b 0 : data) : 1'b 1))) ;
assign bitstuff_en = (tx_sync_en | data_state) ? hold_reg_bitstuff_en : 1'b 0;
assign bitstuff_rst = (~hold_reg_bitstuff_en | bitstuff_detected | (bitstuff_en & ~tx_data & bit_time_end)) ;
assign shift_bitstuff = (bitstuff_en & tx_data & bit_time_end) ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
	if(~rstn_byte_clock)
		bitstuff_shift_reg <= 5'd 0 ;
	else if(disable_transmit | tx_lsfs_soft_reset | lsfs_eop_transmitted | bitstuff_rst)
		bitstuff_shift_reg <= 5'd 0 ;
	else if(shift_bitstuff)
		bitstuff_shift_reg <= {tx_data,bitstuff_shift_reg[4:1]} ;
end
assign bitstuff_detected = (shift_bitstuff & bitstuff_shift_reg == 5'b 1_1111) ;
assign bitstuff_valid_rst = (bitstuff_en & bitstuff_valid & bit_time_end) ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
	if(~rstn_byte_clock)
		bitstuff_valid <= 1'b 0 ;
	else if(disable_transmit | tx_lsfs_soft_reset | lsfs_eop_transmitted | bitstuff_valid_rst)
		bitstuff_valid <= 1'b 0 ;
	else if(bitstuff_detected)
		bitstuff_valid <= 1'b 1 ;
end
assign bitstuff_tx_data       = bitstuff_en ? tx_data : data ;
assign nrzi_en     = data_state ? hold_reg_bitstuff_en : ~disable_bitstuff_nrzi ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
	if(~rstn_byte_clock)
		curr_value_d <= 1'b 1 ;
	else if(disable_transmit | tx_lsfs_soft_reset | lsfs_eop_transmitted | (hub_setup_en & bit_time_end))
		curr_value_d <= 1'b 1 ;
	else if(nrzi_en & lsfs_data_valid & bit_time_end)
		curr_value_d <= lsfs_data ;
end
assign curr_value = bitstuff_tx_data ;
assign prev_value = curr_value_d ;
assign nrzi_enc_data = (nrzi_en & tx_data_valid & (prev_value ~^ curr_value)) ;
assign lsfs_data_valid = tx_data_valid ;
assign lsfs_data       = nrzi_en ? nrzi_enc_data : bitstuff_tx_data ;
assign fsddi = (tx_eop_en | preamble_j) ? 1'b 1 : (preamble_en ? preamble : lsfs_data) ;
assign lsddi = ~fsddi ;
assign lsfsdrv_en		= (lsfs_data_valid | tx_eop_en | preamble_en | preamble_j) ;
assign lsfsddi			= (ls_mode ? lsddi : fsddi) ;
assign lsfs_assert_sezero	= (eopse0_en | wait_eop_en) ;
reg	[8*20:0]	tx_lsfs_ascii_state ;
always @*
begin
	case(tx_lsfs_state)
	TX_LSFS_IDLE		: tx_lsfs_ascii_state = "TX_LSFS_IDLE"		; 
	TX_LSFS_SYNC		: tx_lsfs_ascii_state = "TX_LSFS_SYNC"		; 
	TX_LSFS_PREAMBLE	: tx_lsfs_ascii_state = "TX_LSFS_PREAMBLE"	; 
	TX_LSFS_HUB_SETUP	: tx_lsfs_ascii_state = "TX_LSFS_HUB_SETUP"	; 
	TX_LSFS_DATA		: tx_lsfs_ascii_state = "TX_LSFS_DATA"		; 
	TX_LSFS_EOP0		: tx_lsfs_ascii_state = "TX_LSFS_EOP0"		; 
	TX_LSFS_EOP1		: tx_lsfs_ascii_state = "TX_LSFS_EOP1"		; 
	TX_LSFS_WAIT_RESUME	: tx_lsfs_ascii_state = "TX_LSFS_WAIT_RESUME"	; 
	TX_LSFS_EOPJ		: tx_lsfs_ascii_state = "TX_LSFS_EOPJ"		; 
	default			: tx_lsfs_ascii_state = "****UNKNOWN****" 	;
	endcase
end
endmodule
module clock_div_prog_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(
   parameter
      NO_CLOCK_DIV_RESET = 0,                        
      RESET_NUM_FLOPS    = 2,                        
      DIV_CTRL_WIDTH     = 2                         
) (
   input [DIV_CTRL_WIDTH-1:0] clock_div_sel,         
   input                      clock_in,              
   output                     clock_div_out,         
   input                      reset_in_n,            
   output                     reset_out_n,           
   input                      upstream_reset_in_n,   
   input                      scan_reset_in_n,       
   input                      scan_mode_en_in        
);
   reg  [DIV_CTRL_WIDTH-2:0] clock_div_cnt;
   wire [DIV_CTRL_WIDTH-2:0] value_one;
   wire                      clock_div_cnt_eq_0;
   reg                       clock_div;
   wire                      clock_mux_sel;
   wire                      clock_div_sel_eq_1;
   generate 
      if (NO_CLOCK_DIV_RESET == 1)
      begin
         initial 
         begin
            clock_div_cnt = $random;
            clock_div     = $random;
         end      
         always @(posedge clock_in)
         begin
            #1;
            if (clock_div === 1'bX)
            begin
               clock_div_cnt = $random;
               clock_div     = $random;
            end
         end
      end
   endgenerate
   generate 
      if (NO_CLOCK_DIV_RESET == 1)
      begin
         assign reset_out_n = reset_in_n;
      end
      else
      begin
         reset_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(
            .NUM_FLOPS           (RESET_NUM_FLOPS)
         ) u_reset_sync(
            .sync_clock_in       (clock_in),     
            .reset_in_n          (reset_in_n),          
            .reset_out_n         (reset_out_n),          
            .upstream_reset_in_n (upstream_reset_in_n), 
            .scan_mode_en_in     (scan_mode_en_in),   
            .scan_reset_in_n     (scan_reset_in_n)     
         );
      end
   endgenerate
   assign clock_div_sel_eq_1 = (clock_div_sel == {{DIV_CTRL_WIDTH-1{1'b0}}, 1'b1}) ? 1'b1 : 1'b0;
   generate 
      if (DIV_CTRL_WIDTH == 2)
      begin
         assign value_one = 1'b1;
      end
      else
      begin
         assign value_one = {{DIV_CTRL_WIDTH-2{1'b0}}, 1'b1};
      end
   endgenerate
   always @(posedge clock_in or negedge reset_out_n)
   begin
      if (!reset_out_n)
      begin
         clock_div_cnt <= {DIV_CTRL_WIDTH-1{1'b0}};
      end
      else
      begin
         if (!clock_div_sel_eq_1)
         begin
            if (!clock_div_cnt_eq_0)
            begin
               clock_div_cnt <= clock_div_cnt - value_one;
            end
            else
            begin
               if (clock_div && clock_div_sel[0])
                  clock_div_cnt <= clock_div_sel[DIV_CTRL_WIDTH-1:1];
               else
                  clock_div_cnt <= clock_div_sel[DIV_CTRL_WIDTH-1:1] - {{DIV_CTRL_WIDTH-1{1'b0}}, 1'b1};  
            end
         end
         else
         begin
            clock_div_cnt <= clock_div_cnt;
         end
      end
   end
   assign clock_div_cnt_eq_0 = (clock_div_cnt == {DIV_CTRL_WIDTH-1{1'b0}}) ? 1'b1 : 1'b0;
   always @(posedge clock_in or negedge reset_out_n)
   begin
      if (!reset_out_n)
      begin
         clock_div <= 1'b0;
      end
      else
      begin
         if (clock_div_cnt_eq_0 && !clock_div_sel_eq_1)
            clock_div <= !clock_div;
         else
            clock_div <= clock_div;
      end
   end
   assign clock_mux_sel = (clock_div_sel_eq_1 || scan_mode_en_in) ? 1'b0 : 1'b1;
   clock_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(
      .NUM_CLOCKS    (2),   
      .NUM_CLOCK_SEL (1) 
   ) u_clock_mux (
      .clk_in  ({clock_div, clock_in}),
      .clk_sel (clock_mux_sel),
      .clk_out (clock_div_out)
   );
endmodule
`timescale 1ns/1ps
module udc_avdd_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r(
o_hsrx_calib_active,             
o_hsrx_calib_code,               
o_hsrx_clk_gate,                 
o_ana_hsrx_enable,               
o_ana_hsrx_enable_delayed,       
o_cdr_reg9,                      
o_cdr_reg10,                     
o_cdr_reg11,                     
o_hsrx_diff_data,                
o_hsrx_rec_clk,                  
o_hsrx_rec_data,                 
o_hsrx_rec_data_valid,           
o_hsrx_rec_decision_error,       
o_hsrx_sampler_calib_done,       
o_pll_div_refclk,
o_pll_fb_clk,
pll_clk_gate_ack,
o_cdr_test_digout,
i_pll_div_refclk,
test_pll_480_clock_gate_ovr,
i_pll_fb_clk,
i_sampler_clk,                   
i_hsrx_calib_comp_out,           
i_sampler_data,                  
i_ana_pll_coarse_code_done,      
i_ted_squelch_ana,               
i_calib_clk,                     
i_calib_rstb,                    
i_cdr_reg0,                      
i_cdr_reg1,                      
i_cdr_reg2,                      
i_cdr_reg3,                      
i_cdr_reg4,                      
i_cdr_reg5,                      
i_chirp_mode_en,                 
i_hsrx_enable,                   
i_rstb,                          
i_hsrx_sampler_enable,
rstn_pll_clockout,
pll_gate,
o_ana_ted_squelch,
i_ted_calib_done,
i_ted_en,
cdr_eb_wr_reset,
dvdd_core_powergood,
pll_clockout,
pll_clk_sel,
i_pll_480p0_rx_clk,
scan_mode,
scan_en_cg,
scan_hsclock,
scan_sieclock,
iddq_mode,
reset
);
output  o_hsrx_calib_active, cdr_eb_wr_reset, o_hsrx_clk_gate, o_ana_hsrx_enable,
     o_ana_hsrx_enable_delayed,
     o_hsrx_diff_data, o_hsrx_rec_clk, o_hsrx_rec_data,
     o_hsrx_rec_data_valid, o_hsrx_rec_decision_error, pll_clk_gate_ack,
     o_hsrx_sampler_calib_done,o_ana_ted_squelch, pll_clockout, o_pll_div_refclk, o_pll_fb_clk
     ;
input  i_sampler_clk, i_hsrx_calib_comp_out, i_sampler_data, scan_hsclock,
     i_ana_pll_coarse_code_done, i_ted_squelch_ana, i_calib_clk,
     i_calib_rstb, i_chirp_mode_en, i_hsrx_enable, scan_en_cg, iddq_mode,
     i_rstb, i_ted_calib_done, i_ted_en, i_pll_480p0_rx_clk, reset,
     scan_mode, i_hsrx_sampler_enable, rstn_pll_clockout, pll_gate,
     scan_sieclock, i_pll_div_refclk, i_pll_fb_clk, test_pll_480_clock_gate_ovr
     ;
input  dvdd_core_powergood;
output [5:0]  o_hsrx_calib_code;
output [7:0]  o_cdr_reg9, o_cdr_reg10, o_cdr_reg11, o_cdr_test_digout;
input [7:0]  i_cdr_reg0;
input [7:0]  i_cdr_reg1;
input [7:0]  i_cdr_reg2;
input [7:0]  i_cdr_reg3;
input [7:0]  i_cdr_reg4;
input [7:0]  i_cdr_reg5;
input [1:0]  pll_clk_sel;
udc_avdd_sw_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_udc_avdd_sw_top (
.dvdd_core_powergood            (dvdd_core_powergood),
.cdr_eb_wr_reset                (cdr_eb_wr_reset),
.o_pll_fb_clk                   (o_pll_fb_clk),
.o_pll_div_refclk               (o_pll_div_refclk),
.o_hsrx_calib_active            (o_hsrx_calib_active),
.o_hsrx_calib_code              (o_hsrx_calib_code),
.o_hsrx_clk_gate                (o_hsrx_clk_gate), 
.o_ana_hsrx_enable              (o_ana_hsrx_enable),                     
.o_ana_hsrx_enable_delayed      (o_ana_hsrx_enable_delayed),             
.o_cdr_reg9                     (o_cdr_reg9),                    
.o_cdr_reg10                    (o_cdr_reg10),                   
.o_cdr_reg11                    (o_cdr_reg11),                   
.o_hsrx_diff_data               (o_hsrx_diff_data),                      
.o_hsrx_rec_clk                 (o_hsrx_rec_clk),                        
.o_hsrx_rec_data                (o_hsrx_rec_data),                       
.o_hsrx_rec_data_valid          (o_hsrx_rec_data_valid),                 
.o_hsrx_rec_decision_error      (o_hsrx_rec_decision_error),             
.o_hsrx_sampler_calib_done      (o_hsrx_sampler_calib_done),             
.o_ana_ted_squelch              (o_ana_ted_squelch),
.i_sampler_clk                  (i_sampler_clk),                         
.i_hsrx_calib_comp_out          (i_hsrx_calib_comp_out),                 
.i_sampler_data                 (i_sampler_data),                        
.i_ana_pll_coarse_code_done     (i_ana_pll_coarse_code_done),            
.i_ted_squelch_ana              (i_ted_squelch_ana),                     
.i_calib_clk                    (i_calib_clk),                           
.i_calib_rstb                   (i_calib_rstb),                          
.i_cdr_reg0                     (i_cdr_reg0),                            
.i_cdr_reg1                     (i_cdr_reg1),                            
.i_cdr_reg2                     (i_cdr_reg2),                            
.i_cdr_reg3                     (i_cdr_reg3),                            
.i_cdr_reg4                     (i_cdr_reg4),                            
.i_cdr_reg5                     (i_cdr_reg5),                            
.i_chirp_mode_en                (i_chirp_mode_en),                       
.i_hsrx_enable                  (i_hsrx_enable),                         
.i_hsrx_sampler_enable          (i_hsrx_sampler_enable),
.i_rstb                         (i_rstb),                                
.i_ted_calib_done               (i_ted_calib_done),
.i_ted_en                       (i_ted_en),
.i_pll_fb_clk                   (i_pll_fb_clk),
.i_pll_div_refclk               (i_pll_div_refclk),
.test_pll_480_clock_gate_ovr    (test_pll_480_clock_gate_ovr),
.pll_clockout                   (pll_clockout),
.pll_clk_gate_ack               (pll_clk_gate_ack),
.pll_gate                       (pll_gate),
.pll_clk_sel                    (pll_clk_sel),
.i_pll_480p0_rx_clk             (i_pll_480p0_rx_clk),
.rstn_pll_clockout              (rstn_pll_clockout),
.reset                          (reset),
.iddq_mode                      (iddq_mode),
.scan_mode                      (scan_mode),
.scan_hsclock                   (scan_hsclock),
.scan_sieclock                  (scan_sieclock),
.scan_en_cg                     (scan_en_cg),
.o_cdr_test_digout              (o_cdr_test_digout)
);
endmodule
`timescale 1ns/1ps
module udc_tx_pattern_det_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r ( 
hs_clock,		 
rstn_hs_clock,		 
sieclock,		 
rstn_sieclock,		 
pattern_det_soft_reset,	 
hs_mode,		 
opmode,			 
databus,		 
txvalid,		 
txvalidh,		 
datain,			 
txready,		 
txbitstuffenable,	 
txbitstuffenableh,	 
hs_txready_loc,		 
eop_transmitted,	 
ungate_txready,
hs_txready,		 
debug_pd_state
);
parameter PD_IDLE	= 3'b 000 ;
parameter PD_1ST_1	= 3'b 001 ;
parameter PD_2ND_1	= 3'b 010 ;
parameter PD_3RD_1	= 3'b 011 ;
parameter PD_4TH_1	= 3'b 100 ;
parameter PD_5TH_1	= 3'b 101 ;
input		hs_clock, rstn_hs_clock, sieclock, rstn_sieclock ;
input		pattern_det_soft_reset, hs_mode, databus, txvalid, txvalidh, hs_txready_loc,
       		eop_transmitted, txbitstuffenable, txbitstuffenableh, ungate_txready, txready ;
input	[1:0]	opmode ;
input	[15:0]	datain ;
output		hs_txready ;
output	[2:0]	debug_pd_state ;
reg		data, pd_true_d, gate_txready ;
reg	[2:0]	pd_state, pd_next_state ;
reg	[3:0]	bit_cnt ;
reg	[4:0]	bs_cnt ;
wire		hs_txready_loc, txready, start, one_detected, bit_cnt_reached, bs_cnt_en, bs_cnt_rst,
		bs_cnt_reached, bit_cnt_en, pd_true, bitstuff_en ;
wire	[3:0]	bit_cnt_threshold ;
wire	[4:0]	bs_cnt_threshold ;
wire	[2:0]	debug_pd_state ;
assign debug_pd_state = pd_state ;
assign hs_txready = hs_txready_loc & ~gate_txready ;
assign start = (hs_mode & txvalid & txready) ;
assign bit_cnt_en	 = start ;
assign bit_cnt_threshold = databus ? (txvalid ?  (txvalidh ? 4'd 15 : 4'd 7) : 4'd 7) : 4'd 7 ;
assign bit_cnt_reached   = (start & bit_cnt == bit_cnt_threshold) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		bit_cnt <= 4'd 0 ;
	else if(~hs_mode | pattern_det_soft_reset | eop_transmitted | bit_cnt_reached)
		bit_cnt <= 4'd 0 ;
	else if(bit_cnt_en)
		bit_cnt <= bit_cnt + 4'd 1 ;
end
always @*
begin
	case(bit_cnt)
	4'b0000: data = datain[0] ;
	4'b0001: data = datain[1] ;
	4'b0010: data = datain[2] ;
	4'b0011: data = datain[3] ;
	4'b0100: data = datain[4] ;
	4'b0101: data = datain[5] ;
	4'b0110: data = datain[6] ;
	4'b0111: data = datain[7] ;
	4'b1000: data = datain[8] ;
	4'b1001: data = datain[9] ;
	4'b1010: data = datain[10] ;
	4'b1011: data = datain[11] ;
	4'b1100: data = datain[12] ;
	4'b1101: data = datain[13] ;
	4'b1110: data = datain[14] ;
	4'b1111: data = datain[15] ;
	default	 data = 1'b 0 ;
	endcase
end
assign bitstuff_en = (opmode == 2'b 11) ? (databus ? (bit_cnt > 4'd 7 ? txbitstuffenableh : txbitstuffenable) : txbitstuffenable) : (opmode == 2'b 00) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		pd_state <= PD_IDLE ;
	else if(~hs_mode | pattern_det_soft_reset | eop_transmitted | ~bitstuff_en)
		pd_state <= PD_IDLE ;
	else if(txready)
		pd_state <= pd_next_state ;
end
assign one_detected = (start & data) ;
always @*
begin
	case(pd_state)
	PD_IDLE:
	begin
		if(one_detected)
			pd_next_state = PD_1ST_1 ;
		else
			pd_next_state = PD_IDLE ;
	end
	PD_1ST_1:
	begin
		if(one_detected)
			pd_next_state = PD_2ND_1 ;
		else
			pd_next_state = PD_IDLE ;
	end
	PD_2ND_1:
	begin
		if(one_detected)
			pd_next_state = PD_3RD_1 ;
		else
			pd_next_state = PD_IDLE ;
	end
	PD_3RD_1:
	begin
		if(one_detected)
			pd_next_state = PD_4TH_1 ;
		else
			pd_next_state = PD_IDLE ;
	end
	PD_4TH_1:
	begin
		if(one_detected)
			pd_next_state = PD_5TH_1 ;
		else
			pd_next_state = PD_IDLE ;
	end
	PD_5TH_1:
	begin
		pd_next_state = PD_IDLE ;
	end
	default:	pd_next_state = PD_IDLE ;
	endcase
end
assign bs_cnt_threshold = databus ? 5'd 16 : 5'd 8 ;
assign #0.1 bs_cnt_reached   = (bs_cnt_en & ((bs_cnt + 5'd 1) == bs_cnt_threshold)) ;
assign bs_cnt_en 	= (pd_state == PD_5TH_1 & one_detected) ;
assign bs_cnt_rst 	= (~hs_mode | ~bitstuff_en | pattern_det_soft_reset | eop_transmitted | bs_cnt_reached) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		bs_cnt <= 5'd0 ;
	else if(bs_cnt_rst)
		bs_cnt <= 5'd0 ;
	else if(bs_cnt_en)
		bs_cnt <= bs_cnt + 5'd 1 ;
end
assign pd_true = (bs_cnt_reached | pd_true_d) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		pd_true_d <= 1'b 0 ;
	else if(~hs_mode | pattern_det_soft_reset | eop_transmitted | gate_txready)
		pd_true_d <= 1'b 0 ;
	else if(bs_cnt_reached)
		pd_true_d <= 1'b 1 ;
end
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
		gate_txready <= 1'b 0 ;
	else if(~hs_mode | pattern_det_soft_reset | eop_transmitted | gate_txready)
		gate_txready <= 1'b 0 ;
	else if(pd_true)
		gate_txready <= 1'b 1 ;
end
reg	[8*16:0] tx_pattern_det_ascii_state ;
always @*
begin
	case(pd_state)
	PD_IDLE		: tx_pattern_det_ascii_state = "PD_IDLE" ;
	PD_1ST_1	: tx_pattern_det_ascii_state = "PD_1ST_1" ;
	PD_2ND_1	: tx_pattern_det_ascii_state = "PD_2ND_1" ;
	PD_3RD_1	: tx_pattern_det_ascii_state = "PD_3RD_1" ;
	PD_4TH_1	: tx_pattern_det_ascii_state = "PD_4TH_1" ;
	PD_5TH_1	: tx_pattern_det_ascii_state = "PD_5TH_1" ;
	default		: tx_pattern_det_ascii_state = "****UNKNOWN****" ;
	endcase
end
endmodule
`timescale 1ns/1ps
module udc_bc_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r ( 
usb2_calib_clock,		 
udc_calib_rstn,		 
i_bc_en,			 
i_rid_float_comp_en,		 
i_rid_nonfloat_comp_en,		 
i_rid_float_a_comp_sts,		 
i_rid_b_c_comp_sts,		 
i_tm_otg_adp_bc_reset_cntrl,		 
i_tm_bc_delay,
bc_en,				 
o_rid_float_comp_en_dig	,	 
o_rid_nonfloat_comp_en_dig,	 
o_rid_float_ref_en_dig,		 
o_rid_a_ref_en_dig,		 
o_rid_b_ref_en_dig,		 
o_rid_c_ref_en_dig,		 
o_rid_float_a_comp_en_dig,	 
o_rid_b_c_comp_en_dig,		 
o_rid_a_comp_sts,		 
o_rid_b_comp_sts,		 
o_rid_c_comp_sts,		 
o_rid_float_comp_sts,		 
o_rid_gnd_comp_sts,		 
bc_delay_cnt_reached_10us,
bc_delay_reached,
debug_bc_state
);
parameter BC_IDLE		= 4'b 0000 ;
parameter BC_DELAY_RID_FLOAT	= 4'b 0001 ;
parameter BC_MONITOR_RID_FLOAT	= 4'b 0010 ;
parameter BC_DELAY_RID_A	= 4'b 0011 ;
parameter BC_MONITOR_RID_A	= 4'b 0100 ;
parameter BC_DELAY_RID_B	= 4'b 0101 ;
parameter BC_MONITOR_RID_B	= 4'b 0110 ;
parameter BC_DELAY_RID_C	= 4'b 0111 ;
parameter BC_MONITOR_RID_C	= 4'b 1000 ;
parameter BC_WAIT_NONFLOAT_OFF	= 4'b 1001 ;
input		usb2_calib_clock, udc_calib_rstn ;
input		i_bc_en, i_rid_float_comp_en, i_rid_nonfloat_comp_en, i_rid_float_a_comp_sts, i_rid_b_c_comp_sts, i_tm_otg_adp_bc_reset_cntrl;
input	[5:0]	i_tm_bc_delay;
output		bc_en, bc_delay_cnt_reached_10us, bc_delay_reached;
output		o_rid_float_comp_en_dig, o_rid_nonfloat_comp_en_dig ;
output		o_rid_float_ref_en_dig, o_rid_a_ref_en_dig, o_rid_b_ref_en_dig, o_rid_c_ref_en_dig, o_rid_float_a_comp_en_dig, o_rid_b_c_comp_en_dig ;
output		o_rid_a_comp_sts, o_rid_b_comp_sts, o_rid_c_comp_sts, o_rid_float_comp_sts, o_rid_gnd_comp_sts ;
output	wire [3:0] debug_bc_state ;
reg		o_rid_float_comp_en_dig, o_rid_nonfloat_comp_en_dig ;
reg		o_rid_a_comp_sts, o_rid_b_comp_sts, o_rid_c_comp_sts, o_rid_float_comp_sts, o_rid_gnd_comp_sts ;
wire		o_rid_float_ref_en_dig, o_rid_a_ref_en_dig, o_rid_b_ref_en_dig, o_rid_c_ref_en_dig, o_rid_float_a_comp_en_dig, o_rid_b_c_comp_en_dig ;
reg		rid_nonfloat_comp_en_d ;
reg	[4:0]	bc_delay_cnt ;
reg	[3:0]	bc_state, bc_next_state ;
reg	[6:0]	bc_delay_cnt_10us ;
wire		rid_float_comp_en, rid_nonfloat_comp_en, rid_float_a_comp_sts, rid_b_c_comp_sts, bc_en, bc_soft_reset, bc_delay_en, bc_delay_cnt_reached_10us, bc_delay_cnt_reached, bc_delay_reached, rid_float_comp_sts_en,
		rid_float_comp_sts_rst, rid_a_comp_sts_en, rid_a_comp_sts_rst, rid_b_comp_sts_en, rid_b_comp_sts_rst, rid_c_gnd_comp_sts_en, 
		rid_c_gnd_comp_sts_rst, posedge_rid_nonfloat_comp_en, rst_rid_a_b_c_gnd, tm_bc_delay_0, tm_otg_adp_bc_reset_cntrl;
wire	[4:0]	bc_delay_threshold ;
wire	[6:0]	bc_delay_threshold_10us;
assign debug_bc_state = bc_state ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_bc_en_sync (
.clock		(usb2_calib_clock) ,
.reset_n	(udc_calib_rstn) ,
.d_in	        (i_bc_en) ,
.d_out	        (bc_en)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_rid_float_comp_en_sync (
.clock		(usb2_calib_clock) ,
.reset_n	(udc_calib_rstn) ,
.d_in	        (i_rid_float_comp_en) ,
.d_out	        (rid_float_comp_en)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_rid_nonfloat_comp_en_sync (
.clock		(usb2_calib_clock) ,
.reset_n	(udc_calib_rstn) ,
.d_in	        (i_rid_nonfloat_comp_en) ,
.d_out	        (rid_nonfloat_comp_en)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_rid_float_a_comp_sts_sync (
.clock		(usb2_calib_clock) ,
.reset_n	(udc_calib_rstn) ,
.d_in	        (i_rid_float_a_comp_sts) ,
.d_out	        (rid_float_a_comp_sts)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_rid_b_c_comp_sts_sync (
.clock		(usb2_calib_clock) ,
.reset_n	(udc_calib_rstn) ,
.d_in	        (i_rid_b_c_comp_sts) ,
.d_out	        (rid_b_c_comp_sts)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_tm_bc_delay_0_sync (
.clock		(usb2_calib_clock) ,
.reset_n	(udc_calib_rstn) ,
.d_in	        (i_tm_bc_delay[0]) ,
.d_out	        (tm_bc_delay_0)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_tm_otg_adp_bc_reset_cntrl_sync (
.clock		(usb2_calib_clock) ,
.reset_n	(udc_calib_rstn) ,
.d_in	        (i_tm_otg_adp_bc_reset_cntrl) ,
.d_out	        (tm_otg_adp_bc_reset_cntrl)
);
assign bc_soft_reset = (tm_otg_adp_bc_reset_cntrl | ~bc_en | (~rid_float_comp_en & ~rid_nonfloat_comp_en)) ;
assign bc_delay_threshold_10us = 7'd10;
always @(posedge usb2_calib_clock or negedge udc_calib_rstn)
begin
	if(~udc_calib_rstn)
		bc_delay_cnt_10us <= 7'd 0 ;
	else if(bc_soft_reset | bc_delay_cnt_reached_10us)
		bc_delay_cnt_10us <= 7'd 0 ;
	else if(bc_delay_en)
		bc_delay_cnt_10us <= bc_delay_cnt_10us + 7'd 1 ;
end
assign bc_delay_cnt_reached_10us = (bc_delay_cnt == bc_delay_threshold) ?  (bc_delay_cnt_10us == (bc_delay_threshold_10us + 7'd 3)) : (bc_delay_cnt_10us == bc_delay_threshold_10us) ;
always @(posedge usb2_calib_clock or negedge udc_calib_rstn)
begin
	if(~udc_calib_rstn)
		bc_delay_cnt <= 5'd 1 ;
	else if(bc_soft_reset | bc_delay_reached)
		bc_delay_cnt <= 5'd 1 ;
	else if(bc_delay_en & bc_delay_cnt_reached_10us)
	begin
		if(bc_delay_cnt == 5'd 31)
			bc_delay_cnt <= 5'd 1 ;
		else
			bc_delay_cnt <= bc_delay_cnt + 5'd 1 ;
	end
end
assign bc_delay_threshold = tm_bc_delay_0 ? i_tm_bc_delay[5:1] : 5'd 10 ;
assign bc_delay_cnt_reached =  (bc_delay_cnt == bc_delay_threshold) ;
assign bc_delay_reached = (bc_delay_threshold == 5'd0) ? 1'b1 : (bc_delay_cnt_reached_10us & bc_delay_cnt_reached) ;
assign bc_delay_en =	(	(bc_state == BC_DELAY_RID_FLOAT)||
		      		(bc_state == BC_DELAY_RID_A)	||
				(bc_state == BC_DELAY_RID_B)	||
				(bc_state == BC_DELAY_RID_C)	
		     	) ;
always @(posedge usb2_calib_clock or negedge udc_calib_rstn)
begin
	if(~udc_calib_rstn)
		rid_nonfloat_comp_en_d <= 1'b 0 ;
	else
		rid_nonfloat_comp_en_d <= (bc_en & rid_nonfloat_comp_en) ;
end
assign posedge_rid_nonfloat_comp_en = (rid_nonfloat_comp_en & ~rid_nonfloat_comp_en_d) ;
always @(posedge usb2_calib_clock or negedge udc_calib_rstn)
begin
	if(~udc_calib_rstn)
	begin
		o_rid_float_comp_en_dig		<= 1'b 0 ;
		o_rid_nonfloat_comp_en_dig	<= 1'b 0 ;
	end
	else
	begin
		o_rid_float_comp_en_dig		<= (bc_en & rid_float_comp_en) ;
		o_rid_nonfloat_comp_en_dig	<= (bc_en & rid_nonfloat_comp_en) ;
	end
end
assign o_rid_float_ref_en_dig 		= ((bc_state == BC_DELAY_RID_FLOAT) || (bc_state == BC_MONITOR_RID_FLOAT) );
assign o_rid_a_ref_en_dig 		= ((bc_state == BC_DELAY_RID_A)     || (bc_state == BC_MONITOR_RID_A)     );
assign o_rid_b_ref_en_dig 		= ((bc_state == BC_DELAY_RID_B)     || (bc_state == BC_MONITOR_RID_B)     );
assign o_rid_c_ref_en_dig 		= ((bc_state == BC_DELAY_RID_C)     || (bc_state == BC_MONITOR_RID_C)     );
assign o_rid_float_a_comp_en_dig = (o_rid_float_ref_en_dig | o_rid_a_ref_en_dig) ;
assign o_rid_b_c_comp_en_dig     = (o_rid_b_ref_en_dig     | o_rid_c_ref_en_dig) ;
assign rid_float_comp_sts_en  = (rid_float_comp_en & (bc_state == BC_MONITOR_RID_FLOAT)) ;
assign rid_float_comp_sts_rst = (tm_otg_adp_bc_reset_cntrl | ~bc_en) ;
always @(posedge usb2_calib_clock or negedge udc_calib_rstn)
begin
	if(~udc_calib_rstn)
		o_rid_float_comp_sts <= 1'b 0 ;
	else if(rid_float_comp_sts_rst)
		o_rid_float_comp_sts <= 1'b 0 ;
	else if(rid_float_comp_sts_en)
		o_rid_float_comp_sts <= rid_float_a_comp_sts ;
end
assign rst_rid_a_b_c_gnd = (rid_float_comp_sts_en & rid_float_a_comp_sts) ;
assign rid_a_comp_sts_en  = (rid_nonfloat_comp_en & (bc_state == BC_MONITOR_RID_A)) ;
assign rid_a_comp_sts_rst = (tm_otg_adp_bc_reset_cntrl | ~bc_en | rst_rid_a_b_c_gnd | posedge_rid_nonfloat_comp_en) ;
always @(posedge usb2_calib_clock or negedge udc_calib_rstn)
begin
	if(~udc_calib_rstn)
		o_rid_a_comp_sts <= 1'b 0 ;
	else if(rid_a_comp_sts_rst)
		o_rid_a_comp_sts <= 1'b 0 ;
	else if(rid_a_comp_sts_en)
		o_rid_a_comp_sts <= rid_float_a_comp_sts ;
end
assign rid_b_comp_sts_en  = (rid_nonfloat_comp_en & (bc_state == BC_MONITOR_RID_B)) ;
assign rid_b_comp_sts_rst = (tm_otg_adp_bc_reset_cntrl | ~bc_en | rst_rid_a_b_c_gnd | posedge_rid_nonfloat_comp_en) ;
always @(posedge usb2_calib_clock or negedge udc_calib_rstn)
begin
	if(~udc_calib_rstn)
		o_rid_b_comp_sts <= 1'b 0 ;
	else if(rid_b_comp_sts_rst)
		o_rid_b_comp_sts <= 1'b 0 ;
	else if(rid_b_comp_sts_en)
		o_rid_b_comp_sts <= rid_b_c_comp_sts ;
end
assign rid_c_gnd_comp_sts_en  = (rid_nonfloat_comp_en & (bc_state == BC_MONITOR_RID_C)) ;
assign rid_c_gnd_comp_sts_rst = (tm_otg_adp_bc_reset_cntrl | ~bc_en | rst_rid_a_b_c_gnd | posedge_rid_nonfloat_comp_en) ;
always @(posedge usb2_calib_clock or negedge udc_calib_rstn)
begin
	if(~udc_calib_rstn)
	begin
		o_rid_c_comp_sts   <= 1'b 0 ;
		o_rid_gnd_comp_sts <= 1'b 0 ;
	end
	else if(rid_c_gnd_comp_sts_rst)
	begin
		o_rid_c_comp_sts   <= 1'b 0 ;
		o_rid_gnd_comp_sts <= 1'b 0 ;
	end
	else if(rid_c_gnd_comp_sts_en)
	begin
		o_rid_c_comp_sts   <=  rid_b_c_comp_sts ;
		o_rid_gnd_comp_sts <= ~rid_b_c_comp_sts ;
	end
end
always @(posedge usb2_calib_clock or negedge udc_calib_rstn)
begin
	if(~udc_calib_rstn)
		bc_state <= BC_IDLE ;
	else if(bc_soft_reset)
		bc_state <= BC_IDLE ;
	else
		bc_state <= bc_next_state ;
end
always @*
begin
	case(bc_state)
	BC_IDLE:
	begin
		if(rid_float_comp_en)
			bc_next_state = BC_DELAY_RID_FLOAT ;
		else if(rid_nonfloat_comp_en)
			bc_next_state = BC_DELAY_RID_A ;
		else
			bc_next_state = BC_IDLE ;
	end
	BC_DELAY_RID_FLOAT:
	begin
		if(bc_delay_reached)
			bc_next_state = BC_MONITOR_RID_FLOAT ;
		else if(rid_float_comp_en | rid_nonfloat_comp_en)
			bc_next_state = BC_DELAY_RID_FLOAT ;
		else
			bc_next_state = BC_IDLE ;
	end
	BC_MONITOR_RID_FLOAT:
	begin
		if(rid_nonfloat_comp_en & ~rid_float_a_comp_sts)
			bc_next_state = BC_DELAY_RID_A ;
		else if(rid_float_comp_en)
			bc_next_state = BC_MONITOR_RID_FLOAT ;
		else
			bc_next_state = BC_IDLE ;
	end
	BC_DELAY_RID_A:
	begin
		if(bc_delay_reached)
			bc_next_state = BC_MONITOR_RID_A ;
		else if(rid_float_comp_en | rid_nonfloat_comp_en)
			bc_next_state = BC_DELAY_RID_A ;
		else
			bc_next_state = BC_IDLE ;
	end
	BC_MONITOR_RID_A:
	begin
		if(rid_nonfloat_comp_en)
		begin
			if(rid_float_a_comp_sts)
				bc_next_state = BC_WAIT_NONFLOAT_OFF ;
			else
				bc_next_state = BC_DELAY_RID_B ;
		end
		else if(rid_float_comp_en)
			bc_next_state = BC_WAIT_NONFLOAT_OFF ;
		else
			bc_next_state = BC_IDLE ;
	end
	BC_DELAY_RID_B:
	begin
		if(bc_delay_reached)
			bc_next_state = BC_MONITOR_RID_B ;
		else if(rid_float_comp_en | rid_nonfloat_comp_en)
			bc_next_state = BC_DELAY_RID_B ;
		else
			bc_next_state = BC_IDLE ;
	end
	BC_MONITOR_RID_B:
	begin
		if(rid_nonfloat_comp_en)
		begin
			if(rid_b_c_comp_sts)
				bc_next_state = BC_WAIT_NONFLOAT_OFF ;
			else
				bc_next_state = BC_DELAY_RID_C ;
		end
		else if(rid_float_comp_en)
			bc_next_state = BC_WAIT_NONFLOAT_OFF ;
		else
			bc_next_state = BC_IDLE ;
	end
	BC_DELAY_RID_C:
	begin
		if(bc_delay_reached)
			bc_next_state = BC_MONITOR_RID_C ;
		else if(rid_float_comp_en | rid_nonfloat_comp_en)
			bc_next_state = BC_DELAY_RID_C ;
		else
			bc_next_state = BC_IDLE ;
	end
	BC_MONITOR_RID_C:
	begin
		if(rid_float_comp_en | rid_nonfloat_comp_en)
			bc_next_state = BC_WAIT_NONFLOAT_OFF ;
		else
			bc_next_state = BC_IDLE ;
	end
	BC_WAIT_NONFLOAT_OFF:
	begin
		if(rid_nonfloat_comp_en)
			bc_next_state = BC_WAIT_NONFLOAT_OFF ;
		else if(rid_float_comp_en)
			bc_next_state = BC_DELAY_RID_FLOAT ;
		else
			bc_next_state = BC_IDLE ;
	end
	default:
	begin
		bc_next_state = BC_IDLE ;
	end
	endcase
end
reg	[8*20:0]	bc_ascii_state ;
always @*
begin
	case(bc_state)
	BC_IDLE			: bc_ascii_state = "BC_IDLE" ;
	BC_DELAY_RID_FLOAT	: bc_ascii_state = "BC_DELAY_RID_FLOAT" ;
	BC_MONITOR_RID_FLOAT	: bc_ascii_state = "BC_MONITOR_RID_FLOAT" ;
	BC_DELAY_RID_A		: bc_ascii_state = "BC_DELAY_RID_A" ;
	BC_MONITOR_RID_A	: bc_ascii_state = "BC_MONITOR_RID_A" ;
	BC_DELAY_RID_B		: bc_ascii_state = "BC_DELAY_RID_B" ;
	BC_MONITOR_RID_B	: bc_ascii_state = "BC_MONITOR_RID_B" ;
	BC_DELAY_RID_C		: bc_ascii_state = "BC_DELAY_RID_C" ;
	BC_MONITOR_RID_C	: bc_ascii_state = "BC_MONITOR_RID_C" ;
	BC_WAIT_NONFLOAT_OFF	: bc_ascii_state = "BC_WAIT_NONFLOAT_OFF" ;
	default			: bc_ascii_state = "****UNKNOWN****" ;
	endcase
end
endmodule
`timescale 1ns/1ps
module udc_tx_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r ( 
hs_clock,		 
rstn_hs_clock,		 
byte_clock,		 
rstn_byte_clock,	 
sieclock,		 
rstn_sieclock,		 
tx_hs_soft_reset,	 
tx_lsfs_soft_reset,	 
hs_mode,		 
ls_mode,		 
fs_mode,		 
fs_mode_pre,		 
host_mode,		 
opmode,			 
databus,		 
txvalid,		 
txvalidh,		 
datain,			 
txbitstuffenable,	 
txbitstuffenableh,	 
i_ded_ana,		 
test_fs_preamble_en,	 
test_fs_preamble,	 
test_hs_sof_reg,         
lsfs_transmit,		 
hs_sof,			 
txready,		 
hs_hostdisconnect,	 
hspredrv_en,		 
hsdrv_en,		 
hsddi,			 
tx_eop_start,		 
lsfsdrv_en,		 
lsfsddi,		 
lsfs_assert_sezero,	 
debug_tx_hs_state,
debug_eop_transmitted,
debug_hs_bitstuff_en ,
debug_pd_state ,
debug_tx_lsfs_state ,
debug_resume_eop ,
debug_remote_wakeup,
debug_preamble_sent,
debug_ls_keep_alive,
debug_bitstuff_en 
);
input		hs_clock, rstn_hs_clock, byte_clock, rstn_byte_clock, sieclock, rstn_sieclock ;
input		tx_hs_soft_reset, tx_lsfs_soft_reset, hs_mode, ls_mode, fs_mode, fs_mode_pre, host_mode, 
		databus, txvalid, txvalidh, txbitstuffenable, txbitstuffenableh, i_ded_ana, test_fs_preamble_en ;
input	[1:0]	opmode ;
input   [2:0]   test_hs_sof_reg;
input	[7:0]	test_fs_preamble ;
input	[15:0]	datain ;
output		hs_sof, txready, hs_hostdisconnect, hspredrv_en, hsdrv_en, hsddi, tx_eop_start, lsfsdrv_en,
       		lsfsddi, lsfs_assert_sezero, lsfs_transmit;
output	[3:0]	debug_tx_hs_state ;
output		debug_eop_transmitted ;
output		debug_hs_bitstuff_en ;
output	[2:0]	debug_pd_state ;
output	[3:0]	debug_tx_lsfs_state ;
output 		debug_resume_eop ;
output 		debug_remote_wakeup;
output 		debug_preamble_sent;
output 		debug_ls_keep_alive;
output 		debug_bitstuff_en ;
wire	hs_sof, hs_txready, lsfs_txready, txready, hspredrv_en, hsdrv_en, hsddi,
	lsfsdrv_en, lsfsddi, lsfs_assert_sezero, lsfs_transmit, hs_txvalid, hs_txvalidh, lsfs_txvalid, lsfs_txvalidh ;
wire	[3:0]	debug_tx_hs_state ;
wire		debug_eop_transmitted ;
wire		debug_hs_bitstuff_en ;
wire	[2:0]	debug_pd_state ;
wire	[3:0]	debug_tx_lsfs_state ;
wire 		debug_resume_eop ;
wire 		debug_remote_wakeup;
wire 		debug_preamble_sent;
wire 		debug_ls_keep_alive;
wire 		debug_bitstuff_en ;
assign txready = hs_mode ? hs_txready : lsfs_txready ;
assign hs_txvalid  	= hs_mode ? txvalid  : 1'b 0 ;
assign hs_txvalidh 	= hs_mode ? txvalidh : 1'b 0 ;
assign lsfs_txvalid  	= hs_mode ? 1'b 0 : txvalid  ;
assign lsfs_txvalidh 	= hs_mode ? 1'b 0 : txvalidh ;
udc_tx_hs_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r		c_udc_tx_hs (
.hs_clock		(hs_clock),		 
.rstn_hs_clock		(rstn_hs_clock),	 
.sieclock		(sieclock),		 
.rstn_sieclock		(rstn_sieclock),	 
.tx_hs_soft_reset	(tx_hs_soft_reset),	 
.hs_mode		(hs_mode),		 
.host_mode		(host_mode),		 
.opmode			(opmode),		 
.databus		(databus),		 
.txvalid		(hs_txvalid),		 
.txvalidh		(hs_txvalidh),		 
.txready		(txready),		 
.datain			(datain),		 
.txbitstuffenable	(txbitstuffenable),	 
.txbitstuffenableh	(txbitstuffenableh),	 
.i_ded_ana		(i_ded_ana),		 
.test_hs_sof_reg        (test_hs_sof_reg),       
.hs_sof			(hs_sof),		 
.hs_txready		(hs_txready),		 
.hs_hostdisconnect	(hs_hostdisconnect),	 
.hspredrv_en		(hspredrv_en),		 
.hsdrv_en		(hsdrv_en),		 
.hsddi			(hsddi),		 
.tx_eop_ted		(tx_eop_start),		 
.debug_tx_hs_state	(debug_tx_hs_state),
.debug_eop_transmitted	(debug_eop_transmitted),
.debug_hs_bitstuff_en	(debug_hs_bitstuff_en),
.debug_pd_state		(debug_pd_state)
);
udc_tx_lsfs_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r 		c_udc_tx_lsfs ( 
.byte_clock		(byte_clock),		 
.rstn_byte_clock	(rstn_byte_clock),	 
.sieclock		(sieclock),		 
.rstn_sieclock		(rstn_sieclock),	 
.tx_lsfs_soft_reset	(tx_lsfs_soft_reset),	 
.hs_mode		(hs_mode),		 
.ls_mode		(ls_mode),		 
.fs_mode		(fs_mode),		 
.fs_mode_pre		(fs_mode_pre),		 
.host_mode		(host_mode),		 
.opmode			(opmode),		 
.databus		(databus),		 
.txvalid		(lsfs_txvalid),		 
.txvalidh		(lsfs_txvalidh),	 
.datain			(datain),		 
.test_fs_preamble_en	(test_fs_preamble_en),	 
.test_fs_preamble	(test_fs_preamble),	 
.lsfs_transmit		(lsfs_transmit),	 
.lsfs_txready		(lsfs_txready),		 
.lsfsdrv_en		(lsfsdrv_en),		 
.lsfsddi		(lsfsddi),		 
.lsfs_assert_sezero	(lsfs_assert_sezero),	 
.debug_tx_lsfs_state	(debug_tx_lsfs_state),
.debug_resume_eop 	(debug_resume_eop),
.debug_remote_wakeup 	(debug_remote_wakeup),
.debug_preamble_sent 	(debug_preamble_sent),
.debug_ls_keep_alive 	(debug_ls_keep_alive),
.debug_bitstuff_en 	(debug_bitstuff_en)
);
endmodule
module data_delay_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r
#( 
   parameter
      RESET_VALUE = 1'b0,
      NUM_FLOPS = 1                       
)(   
   input                  clock,          
   input                  reset_n,        
   input  [NUM_FLOPS-1:0] delay_en,       
   input                  delay_half_en,  
   input                  d_in,           
   output reg             d_out           
);
   wire [NUM_FLOPS-1:0] data_delay_flop_in;
   reg  [NUM_FLOPS-1:0] data_delay_flop;
   reg                  data_delay_half_flop;
   assign data_delay_flop_in[0] = d_in;
   genvar i;
   generate 
      if (NUM_FLOPS > 1)
      begin
         for (i = 1; i < NUM_FLOPS; i = i + 1)
         begin : DATA_IN
            assign data_delay_flop_in[i] = delay_en[i-1] ? data_delay_flop[i-1] : data_delay_flop_in[i-1];
         end
      end
   endgenerate
   always @(posedge clock or negedge reset_n) 
   begin
      if (!reset_n) 
         data_delay_flop <= {NUM_FLOPS{RESET_VALUE}};
      else 
         data_delay_flop <= data_delay_flop_in;
   end
   always @(negedge clock or negedge reset_n) 
   begin
      if (!reset_n) 
         data_delay_half_flop <= RESET_VALUE;
      else 
      begin
         if (delay_en[NUM_FLOPS-1])
            data_delay_half_flop <= data_delay_flop[NUM_FLOPS-1];
         else
            data_delay_half_flop <= data_delay_flop_in[NUM_FLOPS-1];
      end
   end
   always @(*)
   begin
      if (delay_half_en)
         d_out = data_delay_half_flop;
      else if (delay_en[NUM_FLOPS-1])
         d_out = data_delay_flop[NUM_FLOPS-1];
      else
         d_out = data_delay_flop_in[NUM_FLOPS-1];
   end
endmodule
module udc_bist_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
input              scan_mode,
input              sieclock,
input              xcvr_sie_rstn,
input              i_bist_on,
input              i_bist_mux_resets,
input              i_bist_hostdevice_sel,
input              i_bist_complete,
input              i_bist_speed_sel,
input              i_bist_interface_sel,
input              i_bist_mode_en,
input       [1:0]  i_opmode,
input       [1:0]  i_xcvrselect,
input              i_termselect,
input              i_dppulldown,
input              i_dmpulldown,
input              suspendm,
input              reset,
input              sleepm,
input              databus_store,
input       [1:0]  powerdown,
input              bc_en, 	  
input              fslsserialmode, 
input              txvalid, 
input              txvalidh,	  
input              hssi_mode, 
input              pll_standalone,
input              pll_clkon, 
input              adp_en,  
input [1:0]        loopback,
input              lane_reverse,
input              i_pso_disable,
output wire        o_sleepm,
output wire [1:0]  o_powerdown,
output wire        o_suspendm,
output wire        o_reset,
output wire [1:0]  o_opmode,
output wire [1:0]  o_xcvrselect,
output wire        o_termselect,
output wire        o_dppulldown,
output wire        o_dmpulldown,
output wire        o_bist_mode_fs,
output wire        o_bist_mode_hs,
output wire        o_databus_store,
output wire        o_bc_en, 	  
output wire        o_fslsserialmode, 
output wire        o_txvalid, 
output wire        o_txvalidh,	  
output wire        o_hssi_mode, 
output wire        o_pll_standalone,
output wire        o_pll_clkon,  
output wire        o_adp_en,  
output wire [1:0]  o_loopback,
output wire        o_lane_reverse,
output wire        o_pso_disable 
);
reg       bist_gate;
reg       r_bist_speed;
wire      bist_speed_sel_sync;
assign o_dppulldown = bist_gate ? i_bist_hostdevice_sel : i_bist_mode_en ? i_bist_hostdevice_sel : i_dppulldown;
assign o_dmpulldown = bist_gate ? i_bist_hostdevice_sel : i_bist_mode_en ? i_bist_hostdevice_sel : i_dmpulldown;
assign o_xcvrselect = bist_gate ? (i_bist_speed_sel ? 2'b01 : 2'b00) : (i_bist_mode_en ? (r_bist_speed ?  2'b01 : 2'b00) : i_xcvrselect);
assign o_termselect = bist_gate ? (i_bist_speed_sel ? 1'b1 : 1'b0) : (i_bist_mode_en ? (r_bist_speed ?  1'b1 : 1'b0): i_termselect);
assign o_bist_mode_fs = bist_gate ? i_bist_speed_sel :  1'b0;
assign o_bist_mode_hs = bist_gate ? ~i_bist_speed_sel : 1'b0;
assign o_databus_store = i_bist_mode_en ? i_bist_interface_sel : databus_store;
assign o_suspendm        = i_bist_mux_resets ? 1'b1 : suspendm;
assign o_reset           = (!scan_mode & i_bist_mux_resets) ? 1'b0 : reset;
assign o_sleepm          = i_bist_mux_resets ? 1'b1 : sleepm;
assign o_powerdown       = i_bist_mode_en ? 2'b00 : powerdown;
assign o_opmode          = i_bist_mode_en ? 2'b00 : i_opmode;
assign o_bc_en           = i_bist_mode_en ? 1'b0 : bc_en;
assign o_fslsserialmode  = i_bist_mode_en ? 1'b0 : fslsserialmode;
assign o_txvalid         = i_bist_mode_en ? 1'b0 : txvalid;
assign o_txvalidh        = i_bist_mode_en ? 1'b0 : txvalidh;
assign o_hssi_mode       = i_bist_mode_en ? 1'b0 : hssi_mode; 
assign o_pll_standalone  = i_bist_mode_en ? 1'b0 : pll_standalone;
assign o_pll_clkon       = i_bist_mode_en ? 1'b0 : pll_clkon;
assign o_adp_en          = i_bist_mode_en ? 1'b0 : adp_en;
assign o_loopback        = i_bist_mode_en ? 2'b00 : loopback;
assign o_lane_reverse    = i_bist_mode_en ? 1'b0 : lane_reverse; 
assign o_pso_disable     = i_bist_mode_en ? 1'b1 : i_pso_disable;
always @(posedge sieclock or negedge xcvr_sie_rstn)
begin
    if(!xcvr_sie_rstn)
        bist_gate <= 1'b0;
    else if(i_bist_on)
        bist_gate <= 1'b1;
    else if(i_bist_complete)
        bist_gate <= 1'b0;   
end
always @(posedge sieclock or negedge xcvr_sie_rstn)
begin
    if(!xcvr_sie_rstn)
        r_bist_speed <= 1'b1;
    else if(bist_gate)
        r_bist_speed <= bist_speed_sel_sync;        
end
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_bist_speed_sel (
.clock	       (sieclock) ,
.reset_n       (xcvr_sie_rstn) ,
.d_in	       (i_bist_speed_sel) ,
.d_out	       (bist_speed_sel_sync)
);
endmodule
`timescale 1ns/1ps
module usb2_calib_dig_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
reset,
i_calib_clk, 
i_calib_rstb,
i_calib_cmp_out,
tm_calib_clk_ovr,
tm_calib_cmp_override,
tm_calib_init_wait_ovr,
tm_calib_init_wait_ovr_en,
tm_res_calib_code,
scan_mode,
scan_sieclock,
debug_calib,
o_usb2_calib_done,
o_calib_pd_bias_comp,
o_res_calib_code,
debug_res_calib_code
);
parameter	p_init_wait=3'd5;	 
input               reset;
input               i_calib_clk, scan_mode, scan_sieclock;
input               i_calib_rstb;
input               i_calib_cmp_out;
input   [1:0]       tm_calib_clk_ovr;
input		    tm_calib_cmp_override;
input   [3:0]       tm_calib_init_wait_ovr;
input		    tm_calib_init_wait_ovr_en;
input	[6:0]	    tm_res_calib_code;
output		o_calib_pd_bias_comp;
output	[5:0]	o_res_calib_code ;		
output 	reg	o_usb2_calib_done;
output	[7:0]	debug_calib, debug_res_calib_code;
reg	[3:0]	res_cursor ;
reg	[5:0]	res_calib_code;
reg	[2:0]	r_init_wait_ctr;
reg		init_wait_done;
wire		calib_cmp_out, w_calib_clk, calib_clk, tm_calib_cmp_override_sync, tm_calib_clk_sync, tm_res_calib_code_sync, scan_calib_clk;
wire            scan_reset;
wire    [2:0]   w_init_wait;
assign scan_reset = ~reset;
assign w_init_wait = tm_calib_init_wait_ovr_en ? tm_calib_init_wait_ovr[2:0] : 3'd5;
assign calib_cmp_out = (tm_calib_cmp_override_sync ? ~i_calib_cmp_out : i_calib_cmp_out) ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_tm_comp_override_sync(
.clock	      (calib_clk),
.reset_n      (i_calib_rstb),
.d_in         (tm_calib_cmp_override),
.d_out        (tm_calib_cmp_override_sync)
);
assign w_calib_clk = tm_calib_clk_ovr[0] ? tm_calib_clk_ovr[1] : i_calib_clk;
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_calib_clk(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_sieclock),
.fcn_signal_in(w_calib_clk),
.fcn_signal_out(calib_clk)
);
assign o_res_calib_code =( tm_res_calib_code_sync ? tm_res_calib_code[6:1] : res_calib_code);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_tm_res_calib_code_sync(
.clock	      (calib_clk),
.reset_n      (i_calib_rstb),
.d_in         (tm_res_calib_code[0]),
.d_out        (tm_res_calib_code_sync)
);
assign debug_res_calib_code = {2'd0, o_res_calib_code};
assign o_calib_pd_bias_comp = (~i_calib_rstb | o_usb2_calib_done);
assign scan_calib_clk = scan_mode ? 1'b0 : calib_clk;
dft_tp_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.WIDTH(1),.SCAN_MUX(1)) c_dft_in_tp1(
.clock        (scan_sieclock),
.reset_n      (scan_reset),
.scan_mode    (scan_mode),
.fcn_signal_in(o_calib_pd_bias_comp),
.d_in         (1'b0),
.d_out        (debug_calib_pd_bias_comp)
);
assign debug_calib = {4'd0, calib_cmp_out, debug_calib_pd_bias_comp, scan_calib_clk, o_usb2_calib_done};
always @(posedge calib_clk or negedge i_calib_rstb)
    if(~i_calib_rstb)
    begin
      res_cursor			    <= 4'd6;
      res_calib_code			    <= 6'b100000 ;
      o_usb2_calib_done 		    <= 1'b0;
    end
    else
    begin
      if(init_wait_done & ~o_usb2_calib_done)
      begin
    	case(res_cursor)
	      4'd6 : begin  res_calib_code[5] <= calib_cmp_out ? res_calib_code[5] : ~res_calib_code[5] ;
    			    res_calib_code[4] <= 1'b1;
    		     end
	      4'd5 : begin  res_calib_code[4] <= calib_cmp_out ? res_calib_code[4] : ~res_calib_code[4] ;
    			    res_calib_code[3] <= 1'b1;
    		     end
    	      4'd4 : begin  res_calib_code[3] <= calib_cmp_out ? res_calib_code[3] : ~res_calib_code[3] ;
    			    res_calib_code[2] <= 1'b1;
    		     end
	      4'd3 : begin  res_calib_code[2] <= calib_cmp_out ? res_calib_code[2] : ~res_calib_code[2] ;
    			    res_calib_code[1] <= 1'b1;
    		     end
    	      4'd2 : begin  res_calib_code[1] <= calib_cmp_out ? res_calib_code[1] : ~res_calib_code[1] ;
    			    res_calib_code[0] <= 1'b1;
    		     end
    	      4'd1 : begin  res_calib_code[0] <= calib_cmp_out ? res_calib_code[0] : ~res_calib_code[0] ;
			    o_usb2_calib_done <= 1'b1;
    		     end
    	      default:      res_calib_code    <=  6'b100000;
    	      endcase
    	      res_cursor <= res_cursor - 1'b1;
      end
  end 
always @(posedge calib_clk or negedge i_calib_rstb)
if(~i_calib_rstb)
begin
  r_init_wait_ctr <= 3'd0;
  init_wait_done <= 1'b0;
end
else
begin
  if(r_init_wait_ctr < w_init_wait)
    r_init_wait_ctr <= r_init_wait_ctr + 1'b1;
  else
    init_wait_done <= 1'b1;
end
always @(posedge o_usb2_calib_done)
begin
   if (res_calib_code == 6'b000000 | res_calib_code == 6'b111111)
              $display("Error : Register calibration code saturated");
end
endmodule
module udc_bist_rx_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r
(
input			i_clk,
input			i_rstn,
input			i_soft_rst,
input			i_start,
input			i_databus,
input 			i_rx_valid,
input 			i_rx_validh,
input 		[7:0]	i_rx_data,
input 		[7:0]	i_rx_datah,
input			i_rx_active,
input 		[1:0]	i_data_sel,
input                   i_bist_on_pos,
output reg		o_rx_error,
output reg	[7:0]	o_bist_error_count,
output reg		o_rx_done,
output wire 	[1:0]	debug_r_state_rx,
output wire	[5:0]	debug_data_cnt_rx,
output wire		debug_inc_data_cnt
);
parameter p_IDLE = 2'd0;
parameter p_DATA = 2'd1;
parameter p_REPORT_STATUS = 2'd2;
reg [1:0] r_state, r_next_state;
reg [15:0] r_data;
reg [5:0] r_data_cnt;
wire [5:0] w_max_cnt;
wire	inc_data_cnt;
assign w_max_cnt = (i_databus) ? 6'd27 : 6'd55;
assign inc_data_cnt = (i_databus) ? (i_rx_valid && i_rx_validh && i_rx_active) : (i_rx_valid && i_rx_active);
assign debug_r_state_rx = r_state;
assign debug_data_cnt_rx = r_data_cnt;
assign debug_inc_data_cnt = inc_data_cnt;
always @(*)
begin
  case(r_state)
  p_IDLE : begin
    if(i_start)
      r_next_state = p_DATA;
    else
      r_next_state = p_IDLE;
  end
  p_DATA : begin
  if((r_data_cnt == w_max_cnt) && inc_data_cnt)
    r_next_state = p_REPORT_STATUS;
    else
      r_next_state = p_DATA;
  end
  p_REPORT_STATUS : begin
    r_next_state = p_IDLE;
  end
  default : r_next_state = p_IDLE;
  endcase
end
always @(posedge i_clk or negedge i_rstn)
if(!i_rstn)
  r_state <= p_IDLE;
else if(i_soft_rst)
  r_state <= p_IDLE;
else
  r_state <= r_next_state;
always @(posedge i_clk or negedge i_rstn)
if(!i_rstn)
  o_rx_done <= 1'b0;
else if(i_soft_rst)
  o_rx_done <= 1'b0;
else
begin
  if(r_next_state == p_REPORT_STATUS)
    o_rx_done <= 1'b1;
  else
    o_rx_done <= 1'b0;
end
always @(posedge i_clk or negedge i_rstn)
if(!i_rstn)
begin
  r_data_cnt <= 6'd0;
  o_rx_error <= 1'b0;
  o_bist_error_count <= 8'b0;
end
else if(i_soft_rst)
begin
  r_data_cnt <= 6'd0;
  o_rx_error <= 1'b0;
end
else if(i_bist_on_pos)
begin
  r_data_cnt <= 6'd0;
  o_rx_error <= 1'b0;
  o_bist_error_count <= 8'b0;
end
else
begin
  if(r_state == p_IDLE)
    o_rx_error <= 1'b0;
  else if ((r_state == p_DATA) && inc_data_cnt && i_databus && (r_data != {i_rx_datah, i_rx_data}))
  begin
    o_rx_error <= 1'b1;
    o_bist_error_count <= o_bist_error_count + 1'b1;
  end
  else if ((r_state == p_DATA) && inc_data_cnt && (~i_databus) && (r_data[7:0] != i_rx_data))
  begin
    o_rx_error <= 1'b1;
    o_bist_error_count <= o_bist_error_count + 1'b1;
  end
  if(r_next_state == p_REPORT_STATUS)
    r_data_cnt <= 6'd0;
  else if(inc_data_cnt)
    r_data_cnt <=  r_data_cnt + 1'b1;
end
always @(*)
begin
  if(i_data_sel == 2'd0)
    r_data = 16'd0;
  else if(i_data_sel == 2'd1)
    r_data = 16'hFFFF;
  else if(i_data_sel == 2'd2)
    r_data = 16'hAAAA;
  else
  begin
    if(i_databus)
    begin
      case(r_data_cnt)
        6'd0 :  r_data = {8'h00, 8'hC3};
        6'd1 :  r_data = {8'h00, 8'h00};
        6'd2 :  r_data = {8'h00, 8'h00};
        6'd3 :  r_data = {8'h00, 8'h00};
        6'd4 :  r_data = {8'h00, 8'h00};
        6'd5 :  r_data = {8'hAA, 8'hAA};
        6'd6 :  r_data = {8'hAA, 8'hAA};
        6'd7 :  r_data = {8'hAA, 8'hAA};
        6'd8 :  r_data = {8'hAA, 8'hAA};
        6'd9 :  r_data = {8'hEE, 8'hEE};
        6'd10 : r_data = {8'hEE, 8'hEE};
        6'd11 : r_data = {8'hEE, 8'hEE};
        6'd12 : r_data = {8'hEE, 8'hEE};
        6'd13 : r_data = {8'hFF, 8'hFE};
        6'd14 : r_data = {8'hFF, 8'hFF};
        6'd15 : r_data = {8'hFF, 8'hFF};
        6'd16 : r_data = {8'hFF, 8'hFF};
        6'd17 : r_data = {8'hFF, 8'hFF};
        6'd18 : r_data = {8'hFF, 8'hFF};
        6'd19 : r_data = {8'hBF, 8'h7F};
        6'd20 : r_data = {8'hEF, 8'hDF};
        6'd21 : r_data = {8'hFB, 8'hF7};
        6'd22 : r_data = {8'hFC, 8'hFD};
        6'd23 : r_data = {8'hBF, 8'h7E};
        6'd24 : r_data = {8'hEF, 8'hDF};
        6'd25 : r_data = {8'hFB, 8'hF7};
        6'd26 : r_data = {8'h7E, 8'hFD};
        6'd27 : r_data = {8'hCE, 8'hB6};
      default : r_data = 16'd0;
      endcase
    end
    else
    begin
      case(r_data_cnt)
        6'd0 :  r_data = {8'h00, 8'hC3};
        6'd1 :  r_data = {8'h00, 8'h00};
        6'd2 :  r_data = {8'h00, 8'h00};
        6'd3 :  r_data = {8'h00, 8'h00};
        6'd4 :  r_data = {8'h00, 8'h00};
        6'd5 :  r_data = {8'h00, 8'h00};
        6'd6 :  r_data = {8'h00, 8'h00};
        6'd7 :  r_data = {8'h00, 8'h00};
        6'd8 :  r_data = {8'h00, 8'h00};
        6'd9 :  r_data = {8'h00, 8'h00};
        6'd10 : r_data = {8'h00, 8'hAA};
        6'd11 : r_data = {8'h00, 8'hAA};
        6'd12 : r_data = {8'h00, 8'hAA};
        6'd13 : r_data = {8'h00, 8'hAA};
        6'd14 : r_data = {8'h00, 8'hAA};
        6'd15 : r_data = {8'h00, 8'hAA};
        6'd16 : r_data = {8'h00, 8'hAA};
        6'd17 : r_data = {8'h00, 8'hAA};
        6'd18 : r_data = {8'h00, 8'hEE};
        6'd19 : r_data = {8'h00, 8'hEE};
        6'd20 : r_data = {8'h00, 8'hEE};
        6'd21 : r_data = {8'h00, 8'hEE};
        6'd22 : r_data = {8'h00, 8'hEE};
        6'd23 : r_data = {8'h00, 8'hEE};
        6'd24 : r_data = {8'h00, 8'hEE};
        6'd25 : r_data = {8'h00, 8'hEE};
        6'd26 : r_data = {8'h00, 8'hFE};
        6'd27 : r_data = {8'h00, 8'hFF};
	6'd28 : r_data = {8'h00, 8'hFF};
        6'd29 : r_data = {8'h00, 8'hFF};
        6'd30 : r_data = {8'h00, 8'hFF};
        6'd31 : r_data = {8'h00, 8'hFF};
        6'd32 : r_data = {8'h00, 8'hFF};
        6'd33 : r_data = {8'h00, 8'hFF};
        6'd34 : r_data = {8'h00, 8'hFF};
        6'd35 : r_data = {8'h00, 8'hFF};
        6'd36 : r_data = {8'h00, 8'hFF};
        6'd37 : r_data = {8'h00, 8'hFF};
        6'd38 : r_data = {8'h00, 8'h7F};
        6'd39 : r_data = {8'h00, 8'hBF};
        6'd40 : r_data = {8'h00, 8'hDF};
        6'd41 : r_data = {8'h00, 8'hEF};
        6'd42 : r_data = {8'h00, 8'hF7};
        6'd43 : r_data = {8'h00, 8'hFB};
        6'd44 : r_data = {8'h00, 8'hFD};
        6'd45 : r_data = {8'h00, 8'hFC};
        6'd46 : r_data = {8'h00, 8'h7E};
        6'd47 : r_data = {8'h00, 8'hBF};
        6'd48 : r_data = {8'h00, 8'hDF};
        6'd49 : r_data = {8'h00, 8'hEF};
        6'd50 : r_data = {8'h00, 8'hF7};
        6'd51 : r_data = {8'h00, 8'hFB};
        6'd52 : r_data = {8'h00, 8'hFD};
        6'd53 : r_data = {8'h00, 8'h7E};
        6'd54 : r_data = {8'h00, 8'hB6};
        6'd55 : r_data = {8'h00, 8'hCE};
      default : r_data = 16'd0;
      endcase
    end  
  end
end
endmodule
module usb2_cdr_core_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
scan_hsclock                    ,
scan_mode                       ,
i_ana_3p36G_clk                 ,
i_ana_data                      ,
i_ana_ted_squelch               ,
i_chirp_mode_en                 ,
i_hsrx_sampler_enable           ,
i_rstb                          ,
rstn_clkdiv                     ,
o_ana_clk_gate                  ,
o_hsrx_diff_data                ,
o_hsrx_rec_clk                  ,
o_hsrx_rec_data                 ,
o_hsrx_rec_data_valid           ,
o_hsrx_rec_decision_error       ,
cdr_eb_wr_reset                 ,
o_cdr_test_digout               ,
i_cdr_reg4                      ,
i_cdr_reg5                      ,
o_cdr_reg11
);
parameter       PHASE_0 = 4'b 0000 ;
parameter       PHASE_1 = 4'b 0001 ;
parameter       PHASE_2 = 4'b 0011 ;
parameter       PHASE_3 = 4'b 0111 ;
parameter       PHASE_4 = 4'b 0110 ;
parameter       PHASE_5 = 4'b 1110 ;
parameter       PHASE_6 = 4'b 1100 ;
parameter       PHASE_7 = 4'b 1000 ;
parameter       PULSE_WIDTH_0 = 2'b 00 ;
parameter       PULSE_WIDTH_1 = 2'b 01 ;
parameter       PULSE_WIDTH_2 = 2'b 10 ;
parameter       PULSE_WIDTH_3 = 2'b 11 ;
input scan_hsclock, scan_mode;
input i_ana_3p36G_clk, i_ana_data, i_ana_ted_squelch, i_chirp_mode_en, i_hsrx_sampler_enable, i_rstb, rstn_clkdiv ;
output o_ana_clk_gate, cdr_eb_wr_reset, o_hsrx_diff_data, o_hsrx_rec_clk, o_hsrx_rec_data, o_hsrx_rec_data_valid, o_hsrx_rec_decision_error ;
input [7:0] i_cdr_reg4, i_cdr_reg5 ;
output [7:0] o_cdr_reg11, o_cdr_test_digout;
reg             data_fil_d, data_fil_x, o_hsrx_rec_data, o_hsrx_rec_data_valid, r_hsrx_rec_data, r_hsrx_rec_data_valid,
                squelch_d, receive_start_d, latency_cnt_en, last_clk_gen, r_hsrx_rec_clk, clk240_pos, clk240_neg,
                receive_enable_10d;
reg [3:0]       phase_count_state, phase_count_next_state ;
reg [1:0]       pulse_width_state, pulse_width_next_state ;
reg [1:0]       latency_cnt ;
reg [2:0]       clkdiv ;
wire            o_hsrx_diff_data, o_ana_clk_gate, receive_end, receive_start, o_hsrx_rec_clk,
                negedge_squelch, posedge_squelch, squelch,  rec_clk_x, i_rstb,
                data_valid_x, posedge_rec_clk, tr_data, receive_enable, latency_cnt_reached, data_fil,
                negedge_receive_enable, last_clock,  clk480,  decision_error_gen_en, functionl_clk_gate, chirp_clk_gate ;
reg             receive_enable_sync, cdr_eb_wr_reset_r;
wire            receive_enable_9d;
wire [1:0]      latency_threshold ;
wire [2:0]      clkdiv_rollover ;
wire ONE;
assign ONE = 1'b1;
assign tm_disable_filter = i_cdr_reg4[0] ;
assign enable_filter = ~tm_disable_filter ;  
assign tm_deassert_sel = i_cdr_reg5[0] ;
assign tm_ext_ctrl = i_cdr_reg5[1] ;
assign sample_5x = i_cdr_reg5[2] ;
assign decision_error_gen_en = i_cdr_reg4[1] ;
usb2_cdr_filter_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_usb2_cdr_filter (
.i_ana_data             (i_ana_data),
.i_ana_3p36G_clk        (i_ana_3p36G_clk),
.clk480                 (clk480),
.i_rstb                 (i_rstb),
.enable_filter          (enable_filter),
.tm_deassert_sel        (tm_deassert_sel),
.tm_ext_ctrl            (tm_ext_ctrl),
.sample_5x              (sample_5x),
.receive_enable         (receive_enable),
.decision_error_gen_en  (decision_error_gen_en),
.small_pulse            (small_pulse),
.data_fil               (data_fil)
);
assign o_hsrx_rec_decision_error = small_pulse ;
always @(posedge i_ana_3p36G_clk or negedge i_rstb)
begin
        if(~i_rstb)
        begin
        data_fil_d      <= 1'b 0 ;
        data_fil_x      <= 1'b 0 ;
        end
        else
        begin
        data_fil_d      <= data_fil ;
        data_fil_x      <= data_fil_d ;
        end
end
assign tr_data  = data_fil ^ data_fil_d ;
always @(posedge i_ana_3p36G_clk or negedge i_rstb)
begin
        if(~i_rstb)
        phase_count_state       <= PHASE_7 ;
        else if (~receive_enable)
        phase_count_state       <= PHASE_7 ;
        else
        phase_count_state       <= phase_count_next_state ;
end
always @(*)
begin
        if(tr_data)
                phase_count_next_state = PHASE_0 ;
        else
        case (phase_count_state)
        PHASE_7:
                phase_count_next_state = PHASE_7 ;
        PHASE_6:
                phase_count_next_state = PHASE_0 ;
        PHASE_5:
                phase_count_next_state = PHASE_6 ;
        PHASE_4:
                phase_count_next_state = sample_5x ? PHASE_0 : PHASE_5 ;
        PHASE_3:
                phase_count_next_state = PHASE_4 ;
        PHASE_2:
                phase_count_next_state = PHASE_3 ;
        PHASE_1:
                phase_count_next_state = PHASE_2 ;
        PHASE_0:
                phase_count_next_state = PHASE_1 ;
        default:
                phase_count_next_state = PHASE_7 ;
        endcase
end
assign posedge_rec_clk = sample_5x ? ( phase_count_state == PHASE_2 ) : ( phase_count_state == PHASE_3 ) ;
assign data_valid_x = ( phase_count_state != PHASE_7 ) ;
always @(posedge i_ana_3p36G_clk or negedge i_rstb)
begin
        if(~i_rstb)
        pulse_width_state       <= PULSE_WIDTH_2 ;
        else
        pulse_width_state       <= pulse_width_next_state ;
end
always @(*)
begin
        case (pulse_width_state)
        PULSE_WIDTH_0:
                pulse_width_next_state = PULSE_WIDTH_1 ;
        PULSE_WIDTH_1:
                pulse_width_next_state = PULSE_WIDTH_2 ;
        PULSE_WIDTH_2:
                if (posedge_rec_clk | last_clock)
                pulse_width_next_state = PULSE_WIDTH_0 ;
                else
                pulse_width_next_state = PULSE_WIDTH_2 ;
        default:
                pulse_width_next_state = PULSE_WIDTH_2 ;
        endcase
end
assign rec_clk_x = ( pulse_width_state == PULSE_WIDTH_0 ) | ( pulse_width_state == PULSE_WIDTH_1 ) ;
always @(posedge i_ana_3p36G_clk or negedge i_rstb)
begin
        if(~i_rstb)
        begin
        r_hsrx_rec_data                 <= 1'b 0 ;
        r_hsrx_rec_clk                  <= 1'b 0 ;
        r_hsrx_rec_data_valid           <= 1'b 0 ;
        end
        else
        begin
        r_hsrx_rec_data                 <= data_fil_x ;
        r_hsrx_rec_clk                  <= rec_clk_x ;
        r_hsrx_rec_data_valid           <= data_valid_x ;
        end
end
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_hsrx_rec_clk(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_hsclock),
.fcn_signal_in(r_hsrx_rec_clk),
.fcn_signal_out(o_hsrx_rec_clk)
);
always @(posedge o_hsrx_rec_clk or negedge i_rstb)
begin
        if(~i_rstb)
        begin
        o_hsrx_rec_data                 <= 1'b 0 ;
        o_hsrx_rec_data_valid           <= 1'b 0 ;
        end
        else
        begin
        o_hsrx_rec_data                 <= r_hsrx_rec_data ;
        o_hsrx_rec_data_valid           <= r_hsrx_rec_data_valid ;
        end
end
assign clkdiv_rollover = sample_5x ? 3'd 4 : 3'd 6 ;
always @(posedge i_ana_3p36G_clk or negedge rstn_clkdiv)
begin
        if(~rstn_clkdiv)
        clkdiv  <= 3'd 0 ;
        else if (clkdiv == clkdiv_rollover) 
        clkdiv  <= 3'd 0 ;
        else
        clkdiv  <= clkdiv + 3'd 1 ;
end
assign w_clk480 = sample_5x ? clkdiv[1] : clkdiv[2] ;
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_cdr_clk480(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_hsclock),
.fcn_signal_in(w_clk480),
.fcn_signal_out(clk480)
);
always @(posedge clk480 or negedge rstn_clkdiv)
begin
        if(~rstn_clkdiv)
        clk240_pos      <= 1'd 0 ;
        else
        clk240_pos      <= ~clk240_pos;
end
always @(negedge clk480 or negedge rstn_clkdiv)
begin
        if(~rstn_clkdiv)
        clk240_neg      <= 1'd 0 ;
        else
        clk240_neg      <= ~clk240_neg;
end
assign clk480_cntrl = clk240_neg ^ clk240_pos;
always @(negedge clk480 or negedge i_rstb)
begin
if (~i_rstb)
        receive_enable_sync     <= 1'b 0 ;
else
        receive_enable_sync     <= receive_enable ;
end   
assign posedge_rec_enable = receive_enable & ~receive_enable_sync;
always @(posedge clk480 or negedge i_rstb)
begin
if (~i_rstb)
        cdr_eb_wr_reset_r               <= 1'b 0 ;
else
begin
        cdr_eb_wr_reset_r         <= clk240_neg;
        if(posedge_rec_enable | receive_enable | receive_enable_10d)
                cdr_eb_wr_reset_r         <= 1'b0;
end
end   
assign cdr_eb_wr_reset = posedge_rec_enable ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b1)) c_squelch (
.clock          (clk480),
.reset_n        (i_rstb),
.d_in           (i_ana_ted_squelch),
.d_out          (squelch)
);
always @(posedge clk480 or negedge i_rstb)
begin
        if(~i_rstb)
        squelch_d       <= 1'b 1 ;
        else
        squelch_d       <= squelch ;
end
assign posedge_squelch = squelch & (~squelch_d) ;
assign negedge_squelch = (~squelch) & squelch_d ;
assign receive_start = negedge_squelch ;
always @(posedge clk480 or negedge i_rstb)
begin
        if (~i_rstb)
        receive_start_d <= 1'b 0 ;
        else if (receive_start)
        receive_start_d <= 1'b 1 ;
        else if (receive_end)
        receive_start_d <= 1'b 0 ;
end
assign receive_enable = receive_start_d | negedge_squelch ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_lat_threshold_en(
.clock          (clk480),
.reset_n        (i_rstb),
.d_in           (i_cdr_reg4[2]),
.d_out          (latency_threshold_override)
);
assign latency_threshold = latency_threshold_override ? i_cdr_reg4[4:3] : 2'd0 ;
assign latency_cnt_reached = (latency_cnt_en & (latency_cnt == latency_threshold)) ;
always @(posedge clk480 or negedge i_rstb)
begin
        if (~i_rstb)
                latency_cnt_en <= 1'b 0 ; 
        else if(latency_cnt_reached)
                latency_cnt_en <= 1'b 0 ; 
        else if(posedge_squelch)
                latency_cnt_en <= 1'b 1 ;
end
always @(posedge clk480 or negedge i_rstb)
begin
        if (~i_rstb)
                latency_cnt <= 2'd 0 ;
        else if(latency_cnt_reached)
                latency_cnt <= 2'd 0 ;
        else if(latency_cnt_en)
                latency_cnt <= latency_cnt + 2'd 1 ;
end
assign receive_end = latency_cnt_reached ;
data_delay_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_FLOPS(9))c_receive_enable_9d(
.clock          (clk480),
.reset_n        (i_rstb),
.delay_en       (9'h1FF),
.delay_half_en  (1'b0),
.d_in           (receive_enable),
.d_out          (receive_enable_9d)
);
always @(posedge clk480 or negedge i_rstb)
begin
if (~i_rstb)
        receive_enable_10d      <= 1'b 0 ;
else
        receive_enable_10d      <= receive_enable_9d ;
end   
assign negedge_receive_enable = ~receive_enable & receive_enable_9d ;
always @(posedge i_ana_3p36G_clk or negedge i_rstb)
begin
        if (~i_rstb)
                last_clk_gen    <= 1'b 0 ;
        else
        if(clk480_cntrl)
                last_clk_gen    <= negedge_receive_enable;
        else
                last_clk_gen    <= 1'b 0 ;
end
assign last_clock = last_clk_gen ;
assign o_ana_clk_gate = i_cdr_reg4[6] ? i_cdr_reg4[7] : (i_chirp_mode_en ? chirp_clk_gate : functionl_clk_gate) ; 
assign chirp_clk_gate = i_cdr_reg4[5] ? 1'b0 : i_ana_ted_squelch;
assign functionl_clk_gate = i_cdr_reg4[5] ? ~i_hsrx_sampler_enable : ( ~i_hsrx_sampler_enable | (i_ana_ted_squelch & squelch
& ~receive_enable & ~receive_enable_10d & ~receive_enable_9d));
assign o_hsrx_diff_data = (i_chirp_mode_en & i_ana_data) ;
assign o_cdr_test_digout = {3'd0, posedge_squelch, negedge_squelch, receive_enable, o_ana_clk_gate, receive_enable_10d };
assign o_cdr_reg11 =    {
                        4'd0,
                        o_hsrx_rec_decision_error,
                        o_ana_clk_gate,
                        receive_start,
                        i_ana_ted_squelch
                        } ;
endmodule
module dft_tp_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r 
#( 
   parameter
      RESET_VALUE = 1'b0,
      SCAN_MUX    = 1'b0,
      WIDTH       = 1
)(   
   input              clock,            
   input              reset_n,          
   input              scan_mode,        
   input  [WIDTH-1:0] fcn_signal_in,    
   input  [WIDTH-1:0] d_in,             
   output [WIDTH-1:0] d_out             
);
   reg  [WIDTH-1:0] r_d_out;
   always@(posedge clock or negedge reset_n)
   begin
       if(~reset_n)
           r_d_out <= {WIDTH{RESET_VALUE}};
       else
           r_d_out <= d_in;
   end
   generate
       if(SCAN_MUX == 1)
       begin : dft_tp_scan1_no_synth
           if(WIDTH == 1)
	   begin : dft_tp_scan1_no_synth_width_1
	       scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r u_scan_mux(
	       .scan_mode_en_in(scan_mode),
	       .scan_signal_in(r_d_out),
	       .fcn_signal_in(fcn_signal_in),
	       .fcn_signal_out(d_out)
	       );
	   end
	   else
	   begin : dft_tp_scan1_no_synth_width_bus
	       scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r u_scan_mux [WIDTH-1:0] (
	       .scan_mode_en_in(scan_mode),
	       .scan_signal_in(r_d_out),
	       .fcn_signal_in(fcn_signal_in),
	       .fcn_signal_out(d_out)
	       );
	   end
       end
       else
       begin : dft_tp_scan0_no_synth
           assign d_out = r_d_out;
       end
   endgenerate
endmodule
module udc_bist_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r
(
input		i_rstn,
input		i_sieclk,	 
input           refclock,
input		i_databus,	 
input 		i_bist_on,
input 		i_soft_rst,
input 		i_tx_ready,
input [7:0]	i_rx_data,
input [7:0]	i_rx_datah,
input 		i_rx_valid,
input		i_rx_validh,
input		i_rx_active,
input    	i_bist_mode_sel,
input           i_bist_ana_powerup,
input           i_rstn_bist_mode,
input		i_err_inj_en,
input	[1:0]	i_err_inj_packet_sel,
output [7:0]		o_bist_data,
output [7:0]		o_bist_datah,
output			o_bist_tx_valid,
output			o_bist_tx_validh,
output reg		o_bist_complete,
output reg 		o_bist_error,
output wire	[7:0]	o_bist_error_count,
output reg		o_bist_on,
output wire             o_bist_on_pulse,
output reg              o_bist_mux_resets,
output wire             o_bg_pd_toggle,
output wire	[3:0]	debug_r_state_bist_top,
output wire	[1:0]	debug_r_state_rx ,
output wire	[5:0]	debug_data_cnt_rx,
output wire		debug_inc_data_cnt_rx,
output wire	[1:0]	debug_r_state_tx ,
output wire	[5:0]	debug_data_cnt_tx,
output wire		debug_inc_data_cnt_tx
);
parameter p_IDLE = 4'd0;
parameter p_INIT_WAIT = 4'd1;
parameter p_DATA_0 = 4'd2;
parameter p_WAIT_0 = 4'd3;
parameter p_DATA_1 = 4'd4;
parameter p_WAIT_1 = 4'd5;
parameter p_DATA_A = 4'd6;
parameter p_WAIT_A = 4'd7;
parameter p_DATA_STD = 4'd8;
parameter p_REPORT_STATUS = 4'd9;
reg [3:0] r_state, r_next_state;
reg [6:0] r_wait_cnt;
reg r_start, r_wait_done, r_bist_on_del, r_bist_on_del1,r_bist_on_del2, r_bist_on_del3, r_bist_on_del4,r_bist_on_del5, r_bist_on_del6;
reg [1:0] r_data_sel;
reg r_rx_done;
wire w_tx_done, w_rx_done, w_rx_error;
wire [6:0] w_max_cnt;
wire r_bist_on,  r_databus, w_bist_on_pos;
wire       r_bist_mode_sel, w_bist_on_pulse;
reg [4:0] bg_pd_cnt;
reg bg_pd_cnt_en, bist_mode_en_d;
wire bg_pd_cnt_reached;
wire [4:0] bg_pd_cnt_threshold;
assign debug_r_state_bist_top = r_state;
assign w_max_cnt = (r_bist_mode_sel) ? 7'd100 : 7'd50;			 
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_bist_mode_en_ref (
.clock	       (refclock) ,
.reset_n       (i_rstn_bist_mode) ,
.d_in	       (1'b1) ,
.d_out	       (bist_mode_en_sync)
);
always@(posedge refclock or negedge i_rstn_bist_mode)
begin
    if(~i_rstn_bist_mode)
       bist_mode_en_d <=  1'b0;
    else
       bist_mode_en_d <= bist_mode_en_sync;
end
assign posedge_bist_mode_en = ~bist_mode_en_d & bist_mode_en_sync;
always@(posedge refclock or negedge i_rstn_bist_mode)
begin
    if(~i_rstn_bist_mode)
        bg_pd_cnt_en <=  1'b0;
    else if(bg_pd_cnt_reached)
        bg_pd_cnt_en <= 1'b0;
    else if(posedge_bist_mode_en)
        bg_pd_cnt_en <= 1'b1;
end
assign bg_pd_cnt_threshold = 5'd25;
assign bg_pd_cnt_reached = (bg_pd_cnt == bg_pd_cnt_threshold);
always@(posedge refclock or negedge i_rstn_bist_mode)
begin
    if(~i_rstn_bist_mode)
        bg_pd_cnt <= 5'd0;
    else if(bg_pd_cnt_reached)
        bg_pd_cnt <= 5'd0;
    else if(bg_pd_cnt_en)
        bg_pd_cnt <= bg_pd_cnt + 1'b1;
end
assign o_bg_pd_toggle = bg_pd_cnt_en;
always@(posedge refclock or negedge i_rstn_bist_mode)
begin
    if(~i_rstn_bist_mode)
        o_bist_mux_resets <= 1'b0;
    else if(bg_pd_cnt_reached)
        o_bist_mux_resets <= 1'b1;
end
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r bist_on_sync
(
  .clock	(i_sieclk),
  .d_in 	(i_bist_on),
  .reset_n	(i_rstn),
  .d_out	(r_bist_on)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r bist_mode_sel_sync
(
  .clock	(i_sieclk),
  .d_in 	(i_bist_mode_sel),
  .reset_n	(i_rstn),
  .d_out	(r_bist_mode_sel)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r databus_sync
(
  .clock	(i_sieclk),
  .d_in 	(i_databus),
  .reset_n	(i_rstn),
  .d_out	(r_databus)
);
always @(posedge i_sieclk or negedge i_rstn)
if(!i_rstn)
begin
  r_bist_on_del  <= 1'b0;
  r_bist_on_del1 <= 1'b0;
  r_bist_on_del2 <= 1'b0;
  r_bist_on_del3 <= 1'b0;
  r_bist_on_del4 <= 1'b0;
  r_bist_on_del5 <= 1'b0;
  r_bist_on_del6 <= 1'b0;
end
else
begin
  r_bist_on_del  <= r_bist_on;
  r_bist_on_del1 <= r_bist_on_del;
  r_bist_on_del2 <= r_bist_on_del1;
  r_bist_on_del3 <= r_bist_on_del2;
  r_bist_on_del4 <= r_bist_on_del3;
  r_bist_on_del5 <= r_bist_on_del4;
  r_bist_on_del6 <= r_bist_on_del5;
end
assign w_bist_on_pulse = (r_bist_on_del && ~r_bist_on_del1) ? 1'b1 : 1'b0;
assign o_bist_on_pulse = w_bist_on_pulse;
assign w_bist_on_pos = (r_bist_on_del3 && ~r_bist_on_del4) ? 1'b1 : 1'b0;
always @(posedge i_sieclk or negedge i_rstn)
if(!i_rstn)
begin
  o_bist_on <= 1'b0;
end
else if(i_soft_rst | (w_rx_done && (r_state == p_REPORT_STATUS)))
begin
  o_bist_on <= 1'b0;
end
else if(w_bist_on_pos)
begin
  o_bist_on <= r_bist_on ;
end
always @(*)
begin
  case(r_state)
  p_IDLE : begin
    if(w_bist_on_pos)
      r_next_state = p_INIT_WAIT;
    else
      r_next_state = p_IDLE;
  end
  p_INIT_WAIT : begin
    if(i_bist_ana_powerup & r_bist_on_del6)
      r_next_state = p_DATA_0;
    else
      r_next_state = p_INIT_WAIT;
  end
  p_DATA_0 : begin
    if(w_tx_done)
      r_next_state = p_WAIT_0;
    else
      r_next_state = p_DATA_0;
  end
  p_WAIT_0 : begin
    if(r_wait_done)
      r_next_state = p_DATA_1;
    else
      r_next_state = p_WAIT_0;
  end
  p_DATA_1 : begin
    if(w_tx_done)
      r_next_state = p_WAIT_1;
    else
      r_next_state = p_DATA_1;
  end
  p_WAIT_1 : begin
    if(r_wait_done)
      r_next_state = p_DATA_A;
    else
      r_next_state = p_WAIT_1;
  end
  p_DATA_A : begin
    if(w_tx_done)
      r_next_state = p_WAIT_A;
    else
      r_next_state = p_DATA_A;
  end
  p_WAIT_A : begin
    if(r_wait_done)
      r_next_state = p_DATA_STD;
    else
      r_next_state = p_WAIT_A;
  end
  p_DATA_STD : begin
    if(w_tx_done)
      r_next_state = p_REPORT_STATUS;
    else
      r_next_state = p_DATA_STD;
  end
  p_REPORT_STATUS : begin
    if(w_rx_done)
      r_next_state = p_IDLE;
    else
      r_next_state = p_REPORT_STATUS;
  end
  default : r_next_state = p_IDLE;
  endcase
end
always @(posedge i_sieclk or negedge i_rstn)
if(!i_rstn)
  r_state <= p_IDLE;
else if(i_soft_rst)
  r_state <= p_IDLE;
else
  r_state <= r_next_state;
always @(posedge i_sieclk or negedge i_rstn)
if(!i_rstn)
begin
  r_wait_cnt <= 7'd0;
  r_wait_done <= 1'b0;
end
else
begin
  if(r_next_state == p_WAIT_0 || r_next_state == p_WAIT_1 || r_next_state == p_WAIT_A)
    r_wait_cnt <= r_wait_cnt + 7'd1;
  else
    r_wait_cnt <= 7'd0;
  if(r_wait_cnt == w_max_cnt)
    r_wait_done <= 1'b1;
  else
    r_wait_done <= 1'b0;
end
always @(posedge i_sieclk or negedge i_rstn)
if(!i_rstn)
begin
  r_start <= 1'b0;
  r_data_sel <= 2'd0;
end
else if(i_soft_rst)
begin
  r_start <= 1'b0;
  r_data_sel <= 2'd0;
end
else
begin
  if(r_next_state == p_DATA_0 || r_next_state == p_DATA_1 || r_next_state == p_DATA_A || r_next_state == p_DATA_STD)
    r_start <= 1'b1;
  else
    r_start <= 1'b0;
  if(r_next_state == p_DATA_STD)
    r_data_sel <= 2'd3;
  else if(r_next_state == p_DATA_A)
    r_data_sel <= 2'd2;
  else if(r_next_state == p_DATA_1)
    r_data_sel <= 2'd1;
  else if(r_next_state == p_DATA_0)
    r_data_sel <= 2'd0;
end
always @(posedge i_sieclk or negedge i_rstn)
if(!i_rstn)
  r_rx_done <= 1'b0;
else if(i_soft_rst)
  r_rx_done <= 1'b0;
else if(w_bist_on_pulse)
  r_rx_done <= 1'b0;
else if(w_rx_done && (r_data_sel == 2'd3))
  r_rx_done <= 1'b1; 
always @(posedge i_sieclk or negedge i_rstn)
if(!i_rstn)
  o_bist_complete <= 1'b0;
else if(i_soft_rst)
  o_bist_complete <= 1'b0;
else if(w_bist_on_pulse)
  o_bist_complete <= 1'b0;
else if(r_rx_done && ~i_rx_active)
  o_bist_complete <= 1'b1;
always @(posedge i_sieclk or negedge i_rstn)
if (!i_rstn)
  o_bist_error <= 1'b0;
else if (i_soft_rst)
  o_bist_error <= 1'b0;
else if (w_bist_on_pulse)
  o_bist_error <= 1'b0;
else if (w_rx_error)
    o_bist_error <= 1'b1;
udc_bist_tx_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r BIST_TX
(
.i_clk (i_sieclk),
.i_rstn (i_rstn),
.i_soft_rst (i_soft_rst),
.i_start (r_start),
.i_databus (r_databus),
.i_data_sel (r_data_sel),
.i_tx_ready (i_tx_ready),
.i_err_inj_en (i_err_inj_en),
.i_err_inj_packet_sel (i_err_inj_packet_sel),
.o_tx_valid (o_bist_tx_valid),
.o_tx_data (o_bist_data),
.o_tx_validh (o_bist_tx_validh),
.o_tx_datah (o_bist_datah),
.o_tx_done (w_tx_done),
.debug_r_state_tx (debug_r_state_tx),
.debug_data_cnt_tx (debug_data_cnt_tx),
.debug_inc_data_cnt (debug_inc_data_cnt_tx)
);
udc_bist_rx_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r BIST_RX
(
.i_clk (i_sieclk),
.i_rstn (i_rstn),
.i_soft_rst (i_soft_rst),
.i_start (r_start),
.i_databus (r_databus),
.i_data_sel (r_data_sel),
.i_rx_valid (i_rx_valid),
.i_rx_validh (i_rx_validh),
.i_rx_data (i_rx_data),
.i_rx_datah (i_rx_datah),
.i_rx_active (i_rx_active),
.i_bist_on_pos (w_bist_on_pulse),
.o_rx_done (w_rx_done),
.o_rx_error (w_rx_error),
.o_bist_error_count (o_bist_error_count),
.debug_r_state_rx (debug_r_state_rx),
.debug_data_cnt_rx (debug_data_cnt_rx),
.debug_inc_data_cnt (debug_inc_data_cnt_rx)
);
endmodule
module usb2_cdr_dig_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
o_ana_calib_active,              
o_ana_calib_code,                
o_ana_clk_gate,                  
o_ana_hsrx_enable,               
o_ana_hsrx_enable_delayed,       
o_cdr_reg9,                      
o_cdr_reg10,                     
o_cdr_reg11,                     
o_hsrx_diff_data,                
o_hsrx_rec_clk,                  
o_hsrx_rec_data,                 
o_hsrx_rec_data_valid,           
o_hsrx_rec_decision_error,       
o_hsrx_sampler_calib_done,       
o_cdr_test_digout,               
reset,
scan_mode,
scan_hsclock,
scan_sieclock,
i_ana_3p36G_clk,                 
i_ana_comp_out,                  
i_ana_data,                      
i_ana_pll_coarse_code_done,      
i_ana_ted_squelch,               
i_calib_clk,                     
i_calib_rstb,                    
i_cdr_reg1,                      
i_cdr_reg2,                      
i_cdr_reg3,                      
i_cdr_reg4,                      
i_cdr_reg5,                      
i_chirp_mode_en,                 
i_hsrx_enable,                   
i_hsrx_sampler_enable,
cdr_eb_wr_reset,
i_rstb                           
);
output  o_ana_calib_active, cdr_eb_wr_reset, o_ana_clk_gate, o_ana_hsrx_enable,
     o_ana_hsrx_enable_delayed,
     o_hsrx_diff_data, o_hsrx_rec_clk, o_hsrx_rec_data,
     o_hsrx_rec_data_valid, o_hsrx_rec_decision_error,
     o_hsrx_sampler_calib_done;
input  i_ana_3p36G_clk, i_ana_comp_out, i_ana_data, scan_hsclock,
     i_ana_pll_coarse_code_done, i_ana_ted_squelch, i_calib_clk,
     i_calib_rstb, i_chirp_mode_en, i_hsrx_enable, scan_mode,
     i_rstb, i_hsrx_sampler_enable, reset, scan_sieclock;
output [5:0]  o_ana_calib_code;
output [7:0]  o_cdr_reg9, o_cdr_reg10, o_cdr_reg11, o_cdr_test_digout;
input [7:0]  i_cdr_reg1;
input [7:0]  i_cdr_reg2;
input [7:0]  i_cdr_reg3;
input [7:0]  i_cdr_reg4;
input [7:0]  i_cdr_reg5;
wire    calib_ana_clk_gate, dll_ana_clk_gate, calib_hsrx_en, calib_hsrx_en_del, hsrx_sampler_calib_done_2d;
assign calib_ana_clk_gate = o_ana_calib_active ;
assign o_ana_clk_gate = (o_hsrx_sampler_calib_done ? dll_ana_clk_gate : ~calib_ana_clk_gate) ;
assign o_ana_hsrx_enable = (calib_hsrx_en) ;
assign o_ana_hsrx_enable_delayed = ( calib_hsrx_en_del ) ;
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_cdr_rstn_clkdiv(
.scan_mode_en_in(scan_mode),
.scan_signal_in(~reset),
.fcn_signal_in(hsrx_sampler_calib_done_2d),
.fcn_signal_out(rstn_clkdiv)
);
hscdr_calib_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_hscdr_calib_top (
.usb2_calib_clock               (i_calib_clk),
.usb2_calib_rstn                (i_calib_rstb),
.pll_coarse_code_done           (i_ana_pll_coarse_code_done),
.i_ana_comp_out                 (i_ana_comp_out),
.i_hsrx_en                      (i_hsrx_enable),
.scan_mode                      (scan_mode),
.scan_sieclock                  (scan_sieclock),
.hsrx_en                        (calib_hsrx_en),
.hsrx_en_del                    (calib_hsrx_en_del),
.o_ana_calib_active             (o_ana_calib_active),
.o_ana_calib_code               (o_ana_calib_code),
.o_hsrx_sampler_calib_done      (o_hsrx_sampler_calib_done),
.hsrx_sampler_calib_done_2d     (hsrx_sampler_calib_done_2d),
.i_cdr_reg1                     (i_cdr_reg1),
.i_cdr_reg2                     (i_cdr_reg2),
.i_cdr_reg3                     (i_cdr_reg3),
.o_cdr_reg9                     (o_cdr_reg9),
.o_cdr_reg10                    (o_cdr_reg10)
);
reset_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_FLOPS(6)) c_rstgen_3p36G_clk_rstn (
.sync_clock_in       (i_ana_3p36G_clk),     
.reset_in_n          (i_rstb),            
.reset_out_n         (sync_rstb),        
.upstream_reset_in_n (1'b1),
.scan_mode_en_in     (scan_mode), 
.scan_reset_in_n     (i_rstb)
); 
usb2_cdr_core_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_usb2_cdr_core (
.scan_mode                      (scan_mode),
.scan_hsclock                   (scan_hsclock),
.i_ana_3p36G_clk                (i_ana_3p36G_clk),               
.i_ana_data                     (i_ana_data),
.i_ana_ted_squelch              (i_ana_ted_squelch),
.i_chirp_mode_en                (i_chirp_mode_en),
.i_hsrx_sampler_enable          (i_hsrx_sampler_enable),
.i_rstb                         (sync_rstb),
.rstn_clkdiv                    (sync_rstb),   
.o_ana_clk_gate                 (dll_ana_clk_gate),
.o_hsrx_diff_data               (o_hsrx_diff_data),
.o_hsrx_rec_clk                 (o_hsrx_rec_clk),
.o_hsrx_rec_data                (o_hsrx_rec_data),
.o_hsrx_rec_data_valid          (o_hsrx_rec_data_valid),
.o_hsrx_rec_decision_error      (o_hsrx_rec_decision_error),
.cdr_eb_wr_reset                (cdr_eb_wr_reset),
.o_cdr_test_digout              (o_cdr_test_digout),
.i_cdr_reg4                     (i_cdr_reg4),
.i_cdr_reg5                     (i_cdr_reg5),
.o_cdr_reg11                    (o_cdr_reg11)
);
endmodule
module dig_misc_reg_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
  CALIB_REG0_calib_clk_OUT,
  CALIB_REG0_calib_clk_en_OUT,
  CALIB_REG0_comp_out_OUT,
  CALIB_REG0_init_wait_ovr_OUT,
  CALIB_REG0_init_wait_ovr_en_OUT,
  CALIB_REG1_unused_OUT,
  CALIB_REG1_calib_code_OUT,
  CALIB_REG1_calib_code_en_OUT,
  BC_REG0_unused_OUT,
  BC_REG0_adp_en_OUT,
  BC_REG0_adp_en_en_OUT,
  BC_REG0_id_pullup_OUT,
  BC_REG0_id_pullup_en_OUT,
  BC_REG1_ADP_source_I_en_OUT,
  BC_REG1_ADP_source_I_en_ctrl_OUT,
  BC_REG1_ADP_sink_I_en_OUT,
  BC_REG1_ADP_sink_I_en_ctrl_OUT,
  BC_REG1_ADP_sense_en_OUT,
  BC_REG1_ADP_sense_en_ctrl_OUT,
  BC_REG1_ADP_probe_en_OUT,
  BC_REG1_ADP_probe_en_ctrl_OUT,
  BC_REG2_idm_sink_en_value_OUT,
  BC_REG2_idm_sink_en_cntrl_OUT,
  BC_REG2_idp_sink_en_value_OUT,
  BC_REG2_idp_sink_en_cntrl_OUT,
  BC_REG2_idp_src_en_value_OUT,
  BC_REG2_idp_src_en_cntrl_OUT,
  BC_REG2_bc_en_value_OUT,
  BC_REG2_bc_en_cntrl_OUT,
  BC_REG3_dm_vdat_ref_comp_en_value_OUT,
  BC_REG3_dm_vdat_ref_comp_en_cntrl_OUT,
  BC_REG3_dp_vdat_ref_comp_en_value_OUT,
  BC_REG3_dp_vdat_ref_comp_en_cntrl_OUT,
  BC_REG3_vdp_src_en_value_OUT,
  BC_REG3_vdp_src_en_cntrl_OUT,
  BC_REG3_vdm_src_en_value_OUT,
  BC_REG3_vdm_src_en_cntrl_OUT,
  BC_REG4_rid_a_ref_en_value_OUT,
  BC_REG4_rid_a_ref_en_cntrl_OUT,
  BC_REG4_rid_float_ref_en_value_OUT,
  BC_REG4_rid_float_ref_en_cntrl_OUT,
  BC_REG4_rid_nonfloat_comp_en_value_OUT,
  BC_REG4_rid_nonfloat_comp_en_cntrl_OUT,
  BC_REG4_rid_float_comp_en_value_OUT,
  BC_REG4_rid_float_comp_en_cntrl_OUT,
  BC_REG5_rid_b_c_comp_en_value_OUT,
  BC_REG5_rid_b_c_comp_en_cntrl_OUT,
  BC_REG5_rid_a_comp_en_value_OUT,
  BC_REG5_rid_a_comp_en_cntrl_OUT,
  BC_REG5_rid_c_ref_en_value_OUT,
  BC_REG5_rid_c_ref_en_cntrl_OUT,
  BC_REG5_rid_b_ref_en_value_OUT,
  BC_REG5_rid_b_ref_en_cntrl_OUT,
  BC_REG6_bc_delay_value_OUT,
  BC_REG6_bc_delay_en_OUT,
  BC_REG6_DM_vlgc_comp_en_value_OUT,
  BC_REG6_DM_vlgc_comp_en_cntrl_OUT,
  BC_REG7_rid_nonfloat_src_en_value_OUT,
  BC_REG7_rid_nonfloat_src_en_cntrl_OUT,
  BC_REG7_rid_float_src_en_value_OUT,
  BC_REG7_rid_float_src_en_cntrl_OUT,
  BC_REG7_reset_cntrl_OUT,
  BC_REG7_DM_current_src_en_value_OUT,
  BC_REG7_DM_current_src_en_cntrl_OUT,
  BC_REG7_unused_OUT,
  TED_REG0_calib_code_up_en_OUT,
  TED_REG0_Delay_value_OUT,
  TED_REG0_delay_en_OUT,
  TED_REG0_calib_done_OUT,
  TED_REG0_caliib_done_en_OUT,
  TED_REG0_comp_out_down_inv_OUT,
  TED_REG0_comp_out_up_inv_OUT,
  TED_REG1_calib_code_down_OUT,
  TED_REG1_calib_code_up_OUT,
  TED_REG2_unused_OUT,
  TED_REG2_calib_mode_dn_OUT,
  TED_REG2_calib_mode_dn_en_OUT,
  TED_REG2_calib_mode_up_OUT,
  TED_REG2_calib_mode_up_en_OUT,
  TED_REG2_calib_code_dn_en_OUT,
  CALIB_REG2_unused_IN,
  CALIB_REG2_calib_cmp_IN,
  CALIB_REG2_calib_pd_IN,
  CALIB_REG2_calib_clock_IN,
  CALIB_REG2_calib_done_IN,
  CALIB_REG3_unused_IN,
  CALIB_REG3_bg_unit_res_calib_IN,
  BC_REG8_dcd_comp_IN,
  BC_REG8_adp_sense_IN,
  BC_REG8_adp_probe_IN,
  BC_REG8_bvalid_IN,
  BC_REG8_vbusvalid_IN,
  BC_REG8_iddig_IN,
  BC_REG8_unused_IN,
  BC_REG9_o_dm_vdat_ref_comp_en_IN,
  BC_REG9_o_dp_vdat_ref_comp_en_IN,
  BC_REG9_o_vdm_src_en_IN,
  BC_REG9_o_vdp_src_en_IN,
  BC_REG9_o_idm_sink_en_IN,
  BC_REG9_o_idp_sink_en_IN,
  BC_REG9_o_idp_src_en_IN,
  BC_REG9_o_bc_en_IN,
  BC_REG10_o_rid_b_c_comp_en_IN,
  BC_REG10_o_rid_a_comp_en_IN,
  BC_REG10_o_rid_c_ref_en_IN,
  BC_REG10_o_rid_b_ref_en_IN,
  BC_REG10_o_rid_a_ref_en_IN,
  BC_REG10_o_rid_float_ref_en_IN,
  BC_REG10_o_rid_nonfloat_src_en_IN,
  BC_REG10_o_rid_float_src_en_IN,
  BC_REG11_o_idm_src_en_IN,
  BC_REG11_i_afe_rxdp_ana_IN,
  BC_REG11_i_afe_rxdm_ana_IN,
  BC_REG11_i_rid_b_c_comp_sts_IN,
  BC_REG11_i_rid_a_comp_sts_IN,
  BC_REG11_i_dm_vdat_ref_comp_sts_IN,
  BC_REG11_i_dp_vdat_ref_comp_sts_IN,
  BC_REG11_o_dm_vlgc_comp_en_IN,
  BC_REG12_rid_gnd_comp_sts_IN,
  BC_REG12_rid_float_comp_sts_IN,
  BC_REG12_rid_c_comp_sts_IN,
  BC_REG12_rid_b_comp_sts_IN,
  BC_REG12_rid_a_comp_sts_IN,
  BC_REG12_dm_vlgc_comp_sts_IN,
  BC_REG12_dm_vdat_ref_comp_sts_IN,
  BC_REG12_dp_vdat_ref_comp_sts_IN,
  TED_REG3_calib_code_down_IN,
  TED_REG3_comparator_down_IN,
  TED_REG3_calib_done_down_IN,
  TED_REG3_unused_IN,
  TED_REG4_calib_code_up_IN,
  TED_REG4_comparator_up_IN,
  TED_REG4_calib_done_up_IN,
  TED_REG4_unused_IN,
  DIG_UNUSED_REG0_unused_OUT,
  DIG_UNUSED_REG1_unused_OUT,
  DIG_UNUSED_REG2_unused_OUT,
  DIG_UNUSED_REG3_unused_OUT,
  INTERRUPT_REG1_irsr_OUT,
  INTERRUPT_REG1_isr_OUT,
  INTERRUPT_REG1_unused_OUT,
  INTERRUPT_REG2_unused_OUT,
  INTERRUPT_REG2_imr_OUT,
  i_irsr_in,
  i_isr_in,
  PRDATA,
  PADDR,
  PWDATA,
  PWRITE,
  PSELx,
  PENABLE,
  PCLK,
  PRESETn
);
output [7:0]   PRDATA;
input  [7:0]   PADDR;
input  [7:0]   PWDATA;
input          PWRITE;
input          PSELx;
input          PENABLE;
input          PCLK;
input          PRESETn;
output         CALIB_REG0_calib_clk_OUT;
output         CALIB_REG0_calib_clk_en_OUT;
output         CALIB_REG0_comp_out_OUT;
output [3:0]   CALIB_REG0_init_wait_ovr_OUT;
output         CALIB_REG0_init_wait_ovr_en_OUT;
output         CALIB_REG1_unused_OUT;
output [5:0]   CALIB_REG1_calib_code_OUT;
output         CALIB_REG1_calib_code_en_OUT;
output [3:0]   BC_REG0_unused_OUT;
output         BC_REG0_adp_en_OUT;
output         BC_REG0_adp_en_en_OUT;
output         BC_REG0_id_pullup_OUT;
output         BC_REG0_id_pullup_en_OUT;
output         BC_REG1_ADP_source_I_en_OUT;
output         BC_REG1_ADP_source_I_en_ctrl_OUT;
output         BC_REG1_ADP_sink_I_en_OUT;
output         BC_REG1_ADP_sink_I_en_ctrl_OUT;
output         BC_REG1_ADP_sense_en_OUT;
output         BC_REG1_ADP_sense_en_ctrl_OUT;
output         BC_REG1_ADP_probe_en_OUT;
output         BC_REG1_ADP_probe_en_ctrl_OUT;
output         BC_REG2_idm_sink_en_value_OUT;
output         BC_REG2_idm_sink_en_cntrl_OUT;
output         BC_REG2_idp_sink_en_value_OUT;
output         BC_REG2_idp_sink_en_cntrl_OUT;
output         BC_REG2_idp_src_en_value_OUT;
output         BC_REG2_idp_src_en_cntrl_OUT;
output         BC_REG2_bc_en_value_OUT;
output         BC_REG2_bc_en_cntrl_OUT;
output         BC_REG3_dm_vdat_ref_comp_en_value_OUT;
output         BC_REG3_dm_vdat_ref_comp_en_cntrl_OUT;
output         BC_REG3_dp_vdat_ref_comp_en_value_OUT;
output         BC_REG3_dp_vdat_ref_comp_en_cntrl_OUT;
output         BC_REG3_vdp_src_en_value_OUT;
output         BC_REG3_vdp_src_en_cntrl_OUT;
output         BC_REG3_vdm_src_en_value_OUT;
output         BC_REG3_vdm_src_en_cntrl_OUT;
output         BC_REG4_rid_a_ref_en_value_OUT;
output         BC_REG4_rid_a_ref_en_cntrl_OUT;
output         BC_REG4_rid_float_ref_en_value_OUT;
output         BC_REG4_rid_float_ref_en_cntrl_OUT;
output         BC_REG4_rid_nonfloat_comp_en_value_OUT;
output         BC_REG4_rid_nonfloat_comp_en_cntrl_OUT;
output         BC_REG4_rid_float_comp_en_value_OUT;
output         BC_REG4_rid_float_comp_en_cntrl_OUT;
output         BC_REG5_rid_b_c_comp_en_value_OUT;
output         BC_REG5_rid_b_c_comp_en_cntrl_OUT;
output         BC_REG5_rid_a_comp_en_value_OUT;
output         BC_REG5_rid_a_comp_en_cntrl_OUT;
output         BC_REG5_rid_c_ref_en_value_OUT;
output         BC_REG5_rid_c_ref_en_cntrl_OUT;
output         BC_REG5_rid_b_ref_en_value_OUT;
output         BC_REG5_rid_b_ref_en_cntrl_OUT;
output [4:0]   BC_REG6_bc_delay_value_OUT;
output         BC_REG6_bc_delay_en_OUT;
output         BC_REG6_DM_vlgc_comp_en_value_OUT;
output         BC_REG6_DM_vlgc_comp_en_cntrl_OUT;
output         BC_REG7_rid_nonfloat_src_en_value_OUT;
output         BC_REG7_rid_nonfloat_src_en_cntrl_OUT;
output         BC_REG7_rid_float_src_en_value_OUT;
output         BC_REG7_rid_float_src_en_cntrl_OUT;
output         BC_REG7_reset_cntrl_OUT;
output         BC_REG7_DM_current_src_en_value_OUT;
output         BC_REG7_DM_current_src_en_cntrl_OUT;
output         BC_REG7_unused_OUT;
output         TED_REG0_calib_code_up_en_OUT;
output [1:0]   TED_REG0_Delay_value_OUT;
output         TED_REG0_delay_en_OUT;
output         TED_REG0_calib_done_OUT;
output         TED_REG0_caliib_done_en_OUT;
output         TED_REG0_comp_out_down_inv_OUT;
output         TED_REG0_comp_out_up_inv_OUT;
output [3:0]   TED_REG1_calib_code_down_OUT;
output [3:0]   TED_REG1_calib_code_up_OUT;
output [2:0]   TED_REG2_unused_OUT;
output         TED_REG2_calib_mode_dn_OUT;
output         TED_REG2_calib_mode_dn_en_OUT;
output         TED_REG2_calib_mode_up_OUT;
output         TED_REG2_calib_mode_up_en_OUT;
output         TED_REG2_calib_code_dn_en_OUT;
input  [3:0]   CALIB_REG2_unused_IN;
input          CALIB_REG2_calib_cmp_IN;
input          CALIB_REG2_calib_pd_IN;
input          CALIB_REG2_calib_clock_IN;
input          CALIB_REG2_calib_done_IN;
input  [2:0]   CALIB_REG3_unused_IN;
input  [4:0]   CALIB_REG3_bg_unit_res_calib_IN;
input          BC_REG8_dcd_comp_IN;
input          BC_REG8_adp_sense_IN;
input          BC_REG8_adp_probe_IN;
input          BC_REG8_bvalid_IN;
input          BC_REG8_vbusvalid_IN;
input          BC_REG8_iddig_IN;
input  [1:0]   BC_REG8_unused_IN;
input          BC_REG9_o_dm_vdat_ref_comp_en_IN;
input          BC_REG9_o_dp_vdat_ref_comp_en_IN;
input          BC_REG9_o_vdm_src_en_IN;
input          BC_REG9_o_vdp_src_en_IN;
input          BC_REG9_o_idm_sink_en_IN;
input          BC_REG9_o_idp_sink_en_IN;
input          BC_REG9_o_idp_src_en_IN;
input          BC_REG9_o_bc_en_IN;
input          BC_REG10_o_rid_b_c_comp_en_IN;
input          BC_REG10_o_rid_a_comp_en_IN;
input          BC_REG10_o_rid_c_ref_en_IN;
input          BC_REG10_o_rid_b_ref_en_IN;
input          BC_REG10_o_rid_a_ref_en_IN;
input          BC_REG10_o_rid_float_ref_en_IN;
input          BC_REG10_o_rid_nonfloat_src_en_IN;
input          BC_REG10_o_rid_float_src_en_IN;
input          BC_REG11_o_idm_src_en_IN;
input          BC_REG11_i_afe_rxdp_ana_IN;
input          BC_REG11_i_afe_rxdm_ana_IN;
input          BC_REG11_i_rid_b_c_comp_sts_IN;
input          BC_REG11_i_rid_a_comp_sts_IN;
input          BC_REG11_i_dm_vdat_ref_comp_sts_IN;
input          BC_REG11_i_dp_vdat_ref_comp_sts_IN;
input          BC_REG11_o_dm_vlgc_comp_en_IN;
input          BC_REG12_rid_gnd_comp_sts_IN;
input          BC_REG12_rid_float_comp_sts_IN;
input          BC_REG12_rid_c_comp_sts_IN;
input          BC_REG12_rid_b_comp_sts_IN;
input          BC_REG12_rid_a_comp_sts_IN;
input          BC_REG12_dm_vlgc_comp_sts_IN;
input          BC_REG12_dm_vdat_ref_comp_sts_IN;
input          BC_REG12_dp_vdat_ref_comp_sts_IN;
input  [3:0]   TED_REG3_calib_code_down_IN;
input          TED_REG3_comparator_down_IN;
input          TED_REG3_calib_done_down_IN;
input  [1:0]   TED_REG3_unused_IN;
input  [3:0]   TED_REG4_calib_code_up_IN;
input          TED_REG4_comparator_up_IN;
input          TED_REG4_calib_done_up_IN;
input  [1:0]   TED_REG4_unused_IN;
output [7:0]   DIG_UNUSED_REG0_unused_OUT;
output [7:0]   DIG_UNUSED_REG1_unused_OUT;
output [7:0]   DIG_UNUSED_REG2_unused_OUT;
output [7:0]   DIG_UNUSED_REG3_unused_OUT;
output         INTERRUPT_REG1_irsr_OUT;
output         INTERRUPT_REG1_isr_OUT;
output [5:0]   INTERRUPT_REG1_unused_OUT;
output [6:0]   INTERRUPT_REG2_unused_OUT;
output         INTERRUPT_REG2_imr_OUT;
input          i_irsr_in;
input          i_isr_in;
reg [7:0]   PRDATA;
reg         CALIB_REG0_calib_clk;
reg         CALIB_REG0_calib_clk_en;
reg         CALIB_REG0_comp_out;
reg [3:0]   CALIB_REG0_init_wait_ovr;
reg         CALIB_REG0_init_wait_ovr_en;
reg         CALIB_REG1_unused;
reg [5:0]   CALIB_REG1_calib_code;
reg         CALIB_REG1_calib_code_en;
reg [3:0]   BC_REG0_unused;
reg         BC_REG0_adp_en;
reg         BC_REG0_adp_en_en;
reg         BC_REG0_id_pullup;
reg         BC_REG0_id_pullup_en;
reg         BC_REG1_ADP_source_I_en;
reg         BC_REG1_ADP_source_I_en_ctrl;
reg         BC_REG1_ADP_sink_I_en;
reg         BC_REG1_ADP_sink_I_en_ctrl;
reg         BC_REG1_ADP_sense_en;
reg         BC_REG1_ADP_sense_en_ctrl;
reg         BC_REG1_ADP_probe_en;
reg         BC_REG1_ADP_probe_en_ctrl;
reg         BC_REG2_idm_sink_en_value;
reg         BC_REG2_idm_sink_en_cntrl;
reg         BC_REG2_idp_sink_en_value;
reg         BC_REG2_idp_sink_en_cntrl;
reg         BC_REG2_idp_src_en_value;
reg         BC_REG2_idp_src_en_cntrl;
reg         BC_REG2_bc_en_value;
reg         BC_REG2_bc_en_cntrl;
reg         BC_REG3_dm_vdat_ref_comp_en_value;
reg         BC_REG3_dm_vdat_ref_comp_en_cntrl;
reg         BC_REG3_dp_vdat_ref_comp_en_value;
reg         BC_REG3_dp_vdat_ref_comp_en_cntrl;
reg         BC_REG3_vdp_src_en_value;
reg         BC_REG3_vdp_src_en_cntrl;
reg         BC_REG3_vdm_src_en_value;
reg         BC_REG3_vdm_src_en_cntrl;
reg         BC_REG4_rid_a_ref_en_value;
reg         BC_REG4_rid_a_ref_en_cntrl;
reg         BC_REG4_rid_float_ref_en_value;
reg         BC_REG4_rid_float_ref_en_cntrl;
reg         BC_REG4_rid_nonfloat_comp_en_value;
reg         BC_REG4_rid_nonfloat_comp_en_cntrl;
reg         BC_REG4_rid_float_comp_en_value;
reg         BC_REG4_rid_float_comp_en_cntrl;
reg         BC_REG5_rid_b_c_comp_en_value;
reg         BC_REG5_rid_b_c_comp_en_cntrl;
reg         BC_REG5_rid_a_comp_en_value;
reg         BC_REG5_rid_a_comp_en_cntrl;
reg         BC_REG5_rid_c_ref_en_value;
reg         BC_REG5_rid_c_ref_en_cntrl;
reg         BC_REG5_rid_b_ref_en_value;
reg         BC_REG5_rid_b_ref_en_cntrl;
reg [4:0]   BC_REG6_bc_delay_value;
reg         BC_REG6_bc_delay_en;
reg         BC_REG6_DM_vlgc_comp_en_value;
reg         BC_REG6_DM_vlgc_comp_en_cntrl;
reg         BC_REG7_rid_nonfloat_src_en_value;
reg         BC_REG7_rid_nonfloat_src_en_cntrl;
reg         BC_REG7_rid_float_src_en_value;
reg         BC_REG7_rid_float_src_en_cntrl;
reg         BC_REG7_reset_cntrl;
reg         BC_REG7_DM_current_src_en_value;
reg         BC_REG7_DM_current_src_en_cntrl;
reg         BC_REG7_unused;
reg         TED_REG0_calib_code_up_en;
reg [1:0]   TED_REG0_Delay_value;
reg         TED_REG0_delay_en;
reg         TED_REG0_calib_done;
reg         TED_REG0_caliib_done_en;
reg         TED_REG0_comp_out_down_inv;
reg         TED_REG0_comp_out_up_inv;
reg [3:0]   TED_REG1_calib_code_down;
reg [3:0]   TED_REG1_calib_code_up;
reg [2:0]   TED_REG2_unused;
reg         TED_REG2_calib_mode_dn;
reg         TED_REG2_calib_mode_dn_en;
reg         TED_REG2_calib_mode_up;
reg         TED_REG2_calib_mode_up_en;
reg         TED_REG2_calib_code_dn_en;
reg [7:0]   DIG_UNUSED_REG0_unused;
reg [7:0]   DIG_UNUSED_REG1_unused;
reg [7:0]   DIG_UNUSED_REG2_unused;
reg [7:0]   DIG_UNUSED_REG3_unused;
reg         INTERRUPT_REG1_irsr;
reg         INTERRUPT_REG1_isr;
reg [5:0]   INTERRUPT_REG1_unused;
reg [6:0]   INTERRUPT_REG2_unused;
reg         INTERRUPT_REG2_imr;
localparam CALIB_REG0_REG_OFFSET = 8'b01100000;
localparam CALIB_REG0_calib_clk_BIT_RESET = 1'b0;
localparam CALIB_REG0_calib_clk_en_BIT_RESET = 1'b0;
localparam CALIB_REG0_comp_out_BIT_RESET = 1'b0;
localparam CALIB_REG0_init_wait_ovr_BIT_RESET = 4'b0000;
localparam CALIB_REG0_init_wait_ovr_en_BIT_RESET = 1'b0;
localparam CALIB_REG1_REG_OFFSET = 8'b01100001;
localparam CALIB_REG1_unused_BIT_RESET = 1'b0;
localparam CALIB_REG1_calib_code_BIT_RESET = 6'b000000;
localparam CALIB_REG1_calib_code_en_BIT_RESET = 1'b0;
localparam BC_REG0_REG_OFFSET = 8'b01100010;
localparam BC_REG0_unused_BIT_RESET = 4'b0000;
localparam BC_REG0_adp_en_BIT_RESET = 1'b0;
localparam BC_REG0_adp_en_en_BIT_RESET = 1'b0;
localparam BC_REG0_id_pullup_BIT_RESET = 1'b0;
localparam BC_REG0_id_pullup_en_BIT_RESET = 1'b0;
localparam BC_REG1_REG_OFFSET = 8'b01100011;
localparam BC_REG1_ADP_source_I_en_BIT_RESET = 1'b0;
localparam BC_REG1_ADP_source_I_en_ctrl_BIT_RESET = 1'b0;
localparam BC_REG1_ADP_sink_I_en_BIT_RESET = 1'b0;
localparam BC_REG1_ADP_sink_I_en_ctrl_BIT_RESET = 1'b0;
localparam BC_REG1_ADP_sense_en_BIT_RESET = 1'b0;
localparam BC_REG1_ADP_sense_en_ctrl_BIT_RESET = 1'b0;
localparam BC_REG1_ADP_probe_en_BIT_RESET = 1'b0;
localparam BC_REG1_ADP_probe_en_ctrl_BIT_RESET = 1'b0;
localparam BC_REG2_REG_OFFSET = 8'b01100100;
localparam BC_REG2_idm_sink_en_value_BIT_RESET = 1'b0;
localparam BC_REG2_idm_sink_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG2_idp_sink_en_value_BIT_RESET = 1'b0;
localparam BC_REG2_idp_sink_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG2_idp_src_en_value_BIT_RESET = 1'b0;
localparam BC_REG2_idp_src_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG2_bc_en_value_BIT_RESET = 1'b0;
localparam BC_REG2_bc_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG3_REG_OFFSET = 8'b01100101;
localparam BC_REG3_dm_vdat_ref_comp_en_value_BIT_RESET = 1'b0;
localparam BC_REG3_dm_vdat_ref_comp_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG3_dp_vdat_ref_comp_en_value_BIT_RESET = 1'b0;
localparam BC_REG3_dp_vdat_ref_comp_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG3_vdp_src_en_value_BIT_RESET = 1'b0;
localparam BC_REG3_vdp_src_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG3_vdm_src_en_value_BIT_RESET = 1'b0;
localparam BC_REG3_vdm_src_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG4_REG_OFFSET = 8'b01100110;
localparam BC_REG4_rid_a_ref_en_value_BIT_RESET = 1'b0;
localparam BC_REG4_rid_a_ref_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG4_rid_float_ref_en_value_BIT_RESET = 1'b0;
localparam BC_REG4_rid_float_ref_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG4_rid_nonfloat_comp_en_value_BIT_RESET = 1'b0;
localparam BC_REG4_rid_nonfloat_comp_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG4_rid_float_comp_en_value_BIT_RESET = 1'b0;
localparam BC_REG4_rid_float_comp_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG5_REG_OFFSET = 8'b01100111;
localparam BC_REG5_rid_b_c_comp_en_value_BIT_RESET = 1'b0;
localparam BC_REG5_rid_b_c_comp_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG5_rid_a_comp_en_value_BIT_RESET = 1'b0;
localparam BC_REG5_rid_a_comp_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG5_rid_c_ref_en_value_BIT_RESET = 1'b0;
localparam BC_REG5_rid_c_ref_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG5_rid_b_ref_en_value_BIT_RESET = 1'b0;
localparam BC_REG5_rid_b_ref_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG6_REG_OFFSET = 8'b01101000;
localparam BC_REG6_bc_delay_value_BIT_RESET = 5'b00000;
localparam BC_REG6_bc_delay_en_BIT_RESET = 1'b0;
localparam BC_REG6_DM_vlgc_comp_en_value_BIT_RESET = 1'b0;
localparam BC_REG6_DM_vlgc_comp_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG7_REG_OFFSET = 8'b01101001;
localparam BC_REG7_rid_nonfloat_src_en_value_BIT_RESET = 1'b0;
localparam BC_REG7_rid_nonfloat_src_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG7_rid_float_src_en_value_BIT_RESET = 1'b0;
localparam BC_REG7_rid_float_src_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG7_reset_cntrl_BIT_RESET = 1'b0;
localparam BC_REG7_DM_current_src_en_value_BIT_RESET = 1'b0;
localparam BC_REG7_DM_current_src_en_cntrl_BIT_RESET = 1'b0;
localparam BC_REG7_unused_BIT_RESET = 1'b0;
localparam TED_REG0_REG_OFFSET = 8'b01101010;
localparam TED_REG0_calib_code_up_en_BIT_RESET = 1'b0;
localparam TED_REG0_Delay_value_BIT_RESET = 2'b00;
localparam TED_REG0_delay_en_BIT_RESET = 1'b0;
localparam TED_REG0_calib_done_BIT_RESET = 1'b0;
localparam TED_REG0_caliib_done_en_BIT_RESET = 1'b0;
localparam TED_REG0_comp_out_down_inv_BIT_RESET = 1'b0;
localparam TED_REG0_comp_out_up_inv_BIT_RESET = 1'b0;
localparam TED_REG1_REG_OFFSET = 8'b01101011;
localparam TED_REG1_calib_code_down_BIT_RESET = 4'b0000;
localparam TED_REG1_calib_code_up_BIT_RESET = 4'b0000;
localparam TED_REG2_REG_OFFSET = 8'b01101100;
localparam TED_REG2_unused_BIT_RESET = 3'b000;
localparam TED_REG2_calib_mode_dn_BIT_RESET = 1'b0;
localparam TED_REG2_calib_mode_dn_en_BIT_RESET = 1'b0;
localparam TED_REG2_calib_mode_up_BIT_RESET = 1'b0;
localparam TED_REG2_calib_mode_up_en_BIT_RESET = 1'b0;
localparam TED_REG2_calib_code_dn_en_BIT_RESET = 1'b0;
localparam CALIB_REG2_REG_OFFSET = 8'b01101101;
localparam CALIB_REG2_unused_BIT_RESET = 4'b0000;
localparam CALIB_REG2_calib_cmp_BIT_RESET = 1'b0;
localparam CALIB_REG2_calib_pd_BIT_RESET = 1'b0;
localparam CALIB_REG2_calib_clock_BIT_RESET = 1'b0;
localparam CALIB_REG2_calib_done_BIT_RESET = 1'b0;
localparam CALIB_REG3_REG_OFFSET = 8'b01101110;
localparam CALIB_REG3_unused_BIT_RESET = 3'b000;
localparam CALIB_REG3_bg_unit_res_calib_BIT_RESET = 5'b00000;
localparam BC_REG8_REG_OFFSET = 8'b01101111;
localparam BC_REG8_dcd_comp_BIT_RESET = 1'b0;
localparam BC_REG8_adp_sense_BIT_RESET = 1'b0;
localparam BC_REG8_adp_probe_BIT_RESET = 1'b0;
localparam BC_REG8_bvalid_BIT_RESET = 1'b0;
localparam BC_REG8_vbusvalid_BIT_RESET = 1'b0;
localparam BC_REG8_iddig_BIT_RESET = 1'b0;
localparam BC_REG8_unused_BIT_RESET = 2'b00;
localparam BC_REG9_REG_OFFSET = 8'b01110000;
localparam BC_REG9_o_dm_vdat_ref_comp_en_BIT_RESET = 1'b0;
localparam BC_REG9_o_dp_vdat_ref_comp_en_BIT_RESET = 1'b0;
localparam BC_REG9_o_vdm_src_en_BIT_RESET = 1'b0;
localparam BC_REG9_o_vdp_src_en_BIT_RESET = 1'b0;
localparam BC_REG9_o_idm_sink_en_BIT_RESET = 1'b0;
localparam BC_REG9_o_idp_sink_en_BIT_RESET = 1'b0;
localparam BC_REG9_o_idp_src_en_BIT_RESET = 1'b0;
localparam BC_REG9_o_bc_en_BIT_RESET = 1'b0;
localparam BC_REG10_REG_OFFSET = 8'b01110001;
localparam BC_REG10_o_rid_b_c_comp_en_BIT_RESET = 1'b0;
localparam BC_REG10_o_rid_a_comp_en_BIT_RESET = 1'b0;
localparam BC_REG10_o_rid_c_ref_en_BIT_RESET = 1'b0;
localparam BC_REG10_o_rid_b_ref_en_BIT_RESET = 1'b0;
localparam BC_REG10_o_rid_a_ref_en_BIT_RESET = 1'b0;
localparam BC_REG10_o_rid_float_ref_en_BIT_RESET = 1'b0;
localparam BC_REG10_o_rid_nonfloat_src_en_BIT_RESET = 1'b0;
localparam BC_REG10_o_rid_float_src_en_BIT_RESET = 1'b0;
localparam BC_REG11_REG_OFFSET = 8'b01110010;
localparam BC_REG11_o_idm_src_en_BIT_RESET = 1'b0;
localparam BC_REG11_i_afe_rxdp_ana_BIT_RESET = 1'b0;
localparam BC_REG11_i_afe_rxdm_ana_BIT_RESET = 1'b0;
localparam BC_REG11_i_rid_b_c_comp_sts_BIT_RESET = 1'b0;
localparam BC_REG11_i_rid_a_comp_sts_BIT_RESET = 1'b0;
localparam BC_REG11_i_dm_vdat_ref_comp_sts_BIT_RESET = 1'b0;
localparam BC_REG11_i_dp_vdat_ref_comp_sts_BIT_RESET = 1'b0;
localparam BC_REG11_o_dm_vlgc_comp_en_BIT_RESET = 1'b0;
localparam BC_REG12_REG_OFFSET = 8'b01110011;
localparam BC_REG12_rid_gnd_comp_sts_BIT_RESET = 1'b0;
localparam BC_REG12_rid_float_comp_sts_BIT_RESET = 1'b0;
localparam BC_REG12_rid_c_comp_sts_BIT_RESET = 1'b0;
localparam BC_REG12_rid_b_comp_sts_BIT_RESET = 1'b0;
localparam BC_REG12_rid_a_comp_sts_BIT_RESET = 1'b0;
localparam BC_REG12_dm_vlgc_comp_sts_BIT_RESET = 1'b0;
localparam BC_REG12_dm_vdat_ref_comp_sts_BIT_RESET = 1'b0;
localparam BC_REG12_dp_vdat_ref_comp_sts_BIT_RESET = 1'b0;
localparam TED_REG3_REG_OFFSET = 8'b01110100;
localparam TED_REG3_calib_code_down_BIT_RESET = 4'b0000;
localparam TED_REG3_comparator_down_BIT_RESET = 1'b0;
localparam TED_REG3_calib_done_down_BIT_RESET = 1'b0;
localparam TED_REG3_unused_BIT_RESET = 2'b00;
localparam TED_REG4_REG_OFFSET = 8'b01110101;
localparam TED_REG4_calib_code_up_BIT_RESET = 4'b0000;
localparam TED_REG4_comparator_up_BIT_RESET = 1'b0;
localparam TED_REG4_calib_done_up_BIT_RESET = 1'b0;
localparam TED_REG4_unused_BIT_RESET = 2'b00;
localparam DIG_UNUSED_REG0_REG_OFFSET = 8'b01110110;
localparam DIG_UNUSED_REG0_unused_BIT_RESET = 8'b00000000;
localparam DIG_UNUSED_REG1_REG_OFFSET = 8'b01110111;
localparam DIG_UNUSED_REG1_unused_BIT_RESET = 8'b00000000;
localparam DIG_UNUSED_REG2_REG_OFFSET = 8'b01111000;
localparam DIG_UNUSED_REG2_unused_BIT_RESET = 8'b00000000;
localparam DIG_UNUSED_REG3_REG_OFFSET = 8'b01111001;
localparam DIG_UNUSED_REG3_unused_BIT_RESET = 8'b00000000;
localparam INTERRUPT_REG1_REG_OFFSET = 8'b01111010;
localparam INTERRUPT_REG1_irsr_BIT_RESET = 1'b0;
localparam INTERRUPT_REG1_isr_BIT_RESET = 1'b0;
localparam INTERRUPT_REG1_unused_BIT_RESET = 6'b000000;
localparam INTERRUPT_REG2_REG_OFFSET = 8'b01111011;
localparam INTERRUPT_REG2_unused_BIT_RESET = 7'b0000000;
localparam INTERRUPT_REG2_imr_BIT_RESET = 1'b1;
always @(posedge PCLK or negedge PRESETn)
begin
if(!PRESETn)
  begin
    CALIB_REG0_calib_clk               <= CALIB_REG0_calib_clk_BIT_RESET;
    CALIB_REG0_calib_clk_en            <= CALIB_REG0_calib_clk_en_BIT_RESET;
    CALIB_REG0_comp_out                <= CALIB_REG0_comp_out_BIT_RESET;
    CALIB_REG0_init_wait_ovr           <= CALIB_REG0_init_wait_ovr_BIT_RESET;
    CALIB_REG0_init_wait_ovr_en        <= CALIB_REG0_init_wait_ovr_en_BIT_RESET;
    CALIB_REG1_unused                  <= CALIB_REG1_unused_BIT_RESET;
    CALIB_REG1_calib_code              <= CALIB_REG1_calib_code_BIT_RESET;
    CALIB_REG1_calib_code_en           <= CALIB_REG1_calib_code_en_BIT_RESET;
    BC_REG0_unused                     <= BC_REG0_unused_BIT_RESET;
    BC_REG0_adp_en                     <= BC_REG0_adp_en_BIT_RESET;
    BC_REG0_adp_en_en                  <= BC_REG0_adp_en_en_BIT_RESET;
    BC_REG0_id_pullup                  <= BC_REG0_id_pullup_BIT_RESET;
    BC_REG0_id_pullup_en               <= BC_REG0_id_pullup_en_BIT_RESET;
    BC_REG1_ADP_source_I_en            <= BC_REG1_ADP_source_I_en_BIT_RESET;
    BC_REG1_ADP_source_I_en_ctrl       <= BC_REG1_ADP_source_I_en_ctrl_BIT_RESET;
    BC_REG1_ADP_sink_I_en              <= BC_REG1_ADP_sink_I_en_BIT_RESET;
    BC_REG1_ADP_sink_I_en_ctrl         <= BC_REG1_ADP_sink_I_en_ctrl_BIT_RESET;
    BC_REG1_ADP_sense_en               <= BC_REG1_ADP_sense_en_BIT_RESET;
    BC_REG1_ADP_sense_en_ctrl          <= BC_REG1_ADP_sense_en_ctrl_BIT_RESET;
    BC_REG1_ADP_probe_en               <= BC_REG1_ADP_probe_en_BIT_RESET;
    BC_REG1_ADP_probe_en_ctrl          <= BC_REG1_ADP_probe_en_ctrl_BIT_RESET;
    BC_REG2_idm_sink_en_value          <= BC_REG2_idm_sink_en_value_BIT_RESET;
    BC_REG2_idm_sink_en_cntrl          <= BC_REG2_idm_sink_en_cntrl_BIT_RESET;
    BC_REG2_idp_sink_en_value          <= BC_REG2_idp_sink_en_value_BIT_RESET;
    BC_REG2_idp_sink_en_cntrl          <= BC_REG2_idp_sink_en_cntrl_BIT_RESET;
    BC_REG2_idp_src_en_value           <= BC_REG2_idp_src_en_value_BIT_RESET;
    BC_REG2_idp_src_en_cntrl           <= BC_REG2_idp_src_en_cntrl_BIT_RESET;
    BC_REG2_bc_en_value                <= BC_REG2_bc_en_value_BIT_RESET;
    BC_REG2_bc_en_cntrl                <= BC_REG2_bc_en_cntrl_BIT_RESET;
    BC_REG3_dm_vdat_ref_comp_en_value  <= BC_REG3_dm_vdat_ref_comp_en_value_BIT_RESET;
    BC_REG3_dm_vdat_ref_comp_en_cntrl  <= BC_REG3_dm_vdat_ref_comp_en_cntrl_BIT_RESET;
    BC_REG3_dp_vdat_ref_comp_en_value  <= BC_REG3_dp_vdat_ref_comp_en_value_BIT_RESET;
    BC_REG3_dp_vdat_ref_comp_en_cntrl  <= BC_REG3_dp_vdat_ref_comp_en_cntrl_BIT_RESET;
    BC_REG3_vdp_src_en_value           <= BC_REG3_vdp_src_en_value_BIT_RESET;
    BC_REG3_vdp_src_en_cntrl           <= BC_REG3_vdp_src_en_cntrl_BIT_RESET;
    BC_REG3_vdm_src_en_value           <= BC_REG3_vdm_src_en_value_BIT_RESET;
    BC_REG3_vdm_src_en_cntrl           <= BC_REG3_vdm_src_en_cntrl_BIT_RESET;
    BC_REG4_rid_a_ref_en_value         <= BC_REG4_rid_a_ref_en_value_BIT_RESET;
    BC_REG4_rid_a_ref_en_cntrl         <= BC_REG4_rid_a_ref_en_cntrl_BIT_RESET;
    BC_REG4_rid_float_ref_en_value     <= BC_REG4_rid_float_ref_en_value_BIT_RESET;
    BC_REG4_rid_float_ref_en_cntrl     <= BC_REG4_rid_float_ref_en_cntrl_BIT_RESET;
    BC_REG4_rid_nonfloat_comp_en_value <= BC_REG4_rid_nonfloat_comp_en_value_BIT_RESET;
    BC_REG4_rid_nonfloat_comp_en_cntrl <= BC_REG4_rid_nonfloat_comp_en_cntrl_BIT_RESET;
    BC_REG4_rid_float_comp_en_value    <= BC_REG4_rid_float_comp_en_value_BIT_RESET;
    BC_REG4_rid_float_comp_en_cntrl    <= BC_REG4_rid_float_comp_en_cntrl_BIT_RESET;
    BC_REG5_rid_b_c_comp_en_value      <= BC_REG5_rid_b_c_comp_en_value_BIT_RESET;
    BC_REG5_rid_b_c_comp_en_cntrl      <= BC_REG5_rid_b_c_comp_en_cntrl_BIT_RESET;
    BC_REG5_rid_a_comp_en_value        <= BC_REG5_rid_a_comp_en_value_BIT_RESET;
    BC_REG5_rid_a_comp_en_cntrl        <= BC_REG5_rid_a_comp_en_cntrl_BIT_RESET;
    BC_REG5_rid_c_ref_en_value         <= BC_REG5_rid_c_ref_en_value_BIT_RESET;
    BC_REG5_rid_c_ref_en_cntrl         <= BC_REG5_rid_c_ref_en_cntrl_BIT_RESET;
    BC_REG5_rid_b_ref_en_value         <= BC_REG5_rid_b_ref_en_value_BIT_RESET;
    BC_REG5_rid_b_ref_en_cntrl         <= BC_REG5_rid_b_ref_en_cntrl_BIT_RESET;
    BC_REG6_bc_delay_value             <= BC_REG6_bc_delay_value_BIT_RESET;
    BC_REG6_bc_delay_en                <= BC_REG6_bc_delay_en_BIT_RESET;
    BC_REG6_DM_vlgc_comp_en_value      <= BC_REG6_DM_vlgc_comp_en_value_BIT_RESET;
    BC_REG6_DM_vlgc_comp_en_cntrl      <= BC_REG6_DM_vlgc_comp_en_cntrl_BIT_RESET;
    BC_REG7_rid_nonfloat_src_en_value  <= BC_REG7_rid_nonfloat_src_en_value_BIT_RESET;
    BC_REG7_rid_nonfloat_src_en_cntrl  <= BC_REG7_rid_nonfloat_src_en_cntrl_BIT_RESET;
    BC_REG7_rid_float_src_en_value     <= BC_REG7_rid_float_src_en_value_BIT_RESET;
    BC_REG7_rid_float_src_en_cntrl     <= BC_REG7_rid_float_src_en_cntrl_BIT_RESET;
    BC_REG7_reset_cntrl                <= BC_REG7_reset_cntrl_BIT_RESET;
    BC_REG7_DM_current_src_en_value    <= BC_REG7_DM_current_src_en_value_BIT_RESET;
    BC_REG7_DM_current_src_en_cntrl    <= BC_REG7_DM_current_src_en_cntrl_BIT_RESET;
    BC_REG7_unused                     <= BC_REG7_unused_BIT_RESET;
    TED_REG0_calib_code_up_en          <= TED_REG0_calib_code_up_en_BIT_RESET;
    TED_REG0_Delay_value               <= TED_REG0_Delay_value_BIT_RESET;
    TED_REG0_delay_en                  <= TED_REG0_delay_en_BIT_RESET;
    TED_REG0_calib_done                <= TED_REG0_calib_done_BIT_RESET;
    TED_REG0_caliib_done_en            <= TED_REG0_caliib_done_en_BIT_RESET;
    TED_REG0_comp_out_down_inv         <= TED_REG0_comp_out_down_inv_BIT_RESET;
    TED_REG0_comp_out_up_inv           <= TED_REG0_comp_out_up_inv_BIT_RESET;
    TED_REG1_calib_code_down           <= TED_REG1_calib_code_down_BIT_RESET;
    TED_REG1_calib_code_up             <= TED_REG1_calib_code_up_BIT_RESET;
    TED_REG2_unused                    <= TED_REG2_unused_BIT_RESET;
    TED_REG2_calib_mode_dn             <= TED_REG2_calib_mode_dn_BIT_RESET;
    TED_REG2_calib_mode_dn_en          <= TED_REG2_calib_mode_dn_en_BIT_RESET;
    TED_REG2_calib_mode_up             <= TED_REG2_calib_mode_up_BIT_RESET;
    TED_REG2_calib_mode_up_en          <= TED_REG2_calib_mode_up_en_BIT_RESET;
    TED_REG2_calib_code_dn_en          <= TED_REG2_calib_code_dn_en_BIT_RESET;
    DIG_UNUSED_REG0_unused             <= DIG_UNUSED_REG0_unused_BIT_RESET;
    DIG_UNUSED_REG1_unused             <= DIG_UNUSED_REG1_unused_BIT_RESET;
    DIG_UNUSED_REG2_unused             <= DIG_UNUSED_REG2_unused_BIT_RESET;
    DIG_UNUSED_REG3_unused             <= DIG_UNUSED_REG3_unused_BIT_RESET;
    INTERRUPT_REG1_irsr                <= INTERRUPT_REG1_irsr_BIT_RESET;
    INTERRUPT_REG1_isr                 <= INTERRUPT_REG1_isr_BIT_RESET;
    INTERRUPT_REG1_unused              <= INTERRUPT_REG1_unused_BIT_RESET;
    INTERRUPT_REG2_unused              <= INTERRUPT_REG2_unused_BIT_RESET;
    INTERRUPT_REG2_imr                 <= INTERRUPT_REG2_imr_BIT_RESET;
  end
else  
  begin
            INTERRUPT_REG1_isr         <= INTERRUPT_REG1_isr | i_isr_in;
              INTERRUPT_REG1_irsr      <= INTERRUPT_REG1_irsr | i_irsr_in;
    if ((PSELx == 1'b1) && (PWRITE == 1'b1) )
    begin  
      case (PADDR[7:0])
        CALIB_REG0_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            CALIB_REG0_calib_clk       <= PWDATA[7];
            CALIB_REG0_calib_clk_en    <= PWDATA[6];
            CALIB_REG0_comp_out        <= PWDATA[5];
            CALIB_REG0_init_wait_ovr[3:0] <= PWDATA[4:1];
            CALIB_REG0_init_wait_ovr_en <= PWDATA[0];
          end
        CALIB_REG1_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            CALIB_REG1_unused          <= PWDATA[7];
            CALIB_REG1_calib_code[5:0] <= PWDATA[6:1];
            CALIB_REG1_calib_code_en   <= PWDATA[0];
          end
        BC_REG0_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            BC_REG0_unused[3:0]        <= PWDATA[7:4];
            BC_REG0_adp_en             <= PWDATA[3];
            BC_REG0_adp_en_en          <= PWDATA[2];
            BC_REG0_id_pullup          <= PWDATA[1];
            BC_REG0_id_pullup_en       <= PWDATA[0];
          end
        BC_REG1_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            BC_REG1_ADP_source_I_en    <= PWDATA[7];
            BC_REG1_ADP_source_I_en_ctrl <= PWDATA[6];
            BC_REG1_ADP_sink_I_en      <= PWDATA[5];
            BC_REG1_ADP_sink_I_en_ctrl <= PWDATA[4];
            BC_REG1_ADP_sense_en       <= PWDATA[3];
            BC_REG1_ADP_sense_en_ctrl  <= PWDATA[2];
            BC_REG1_ADP_probe_en       <= PWDATA[1];
            BC_REG1_ADP_probe_en_ctrl  <= PWDATA[0];
          end
        BC_REG2_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            BC_REG2_idm_sink_en_value  <= PWDATA[7];
            BC_REG2_idm_sink_en_cntrl  <= PWDATA[6];
            BC_REG2_idp_sink_en_value  <= PWDATA[5];
            BC_REG2_idp_sink_en_cntrl  <= PWDATA[4];
            BC_REG2_idp_src_en_value   <= PWDATA[3];
            BC_REG2_idp_src_en_cntrl   <= PWDATA[2];
            BC_REG2_bc_en_value        <= PWDATA[1];
            BC_REG2_bc_en_cntrl        <= PWDATA[0];
          end
        BC_REG3_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            BC_REG3_dm_vdat_ref_comp_en_value <= PWDATA[7];
            BC_REG3_dm_vdat_ref_comp_en_cntrl <= PWDATA[6];
            BC_REG3_dp_vdat_ref_comp_en_value <= PWDATA[5];
            BC_REG3_dp_vdat_ref_comp_en_cntrl <= PWDATA[4];
            BC_REG3_vdp_src_en_value   <= PWDATA[3];
            BC_REG3_vdp_src_en_cntrl   <= PWDATA[2];
            BC_REG3_vdm_src_en_value   <= PWDATA[1];
            BC_REG3_vdm_src_en_cntrl   <= PWDATA[0];
          end
        BC_REG4_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            BC_REG4_rid_a_ref_en_value <= PWDATA[7];
            BC_REG4_rid_a_ref_en_cntrl <= PWDATA[6];
            BC_REG4_rid_float_ref_en_value <= PWDATA[5];
            BC_REG4_rid_float_ref_en_cntrl <= PWDATA[4];
            BC_REG4_rid_nonfloat_comp_en_value <= PWDATA[3];
            BC_REG4_rid_nonfloat_comp_en_cntrl <= PWDATA[2];
            BC_REG4_rid_float_comp_en_value <= PWDATA[1];
            BC_REG4_rid_float_comp_en_cntrl <= PWDATA[0];
          end
        BC_REG5_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            BC_REG5_rid_b_c_comp_en_value <= PWDATA[7];
            BC_REG5_rid_b_c_comp_en_cntrl <= PWDATA[6];
            BC_REG5_rid_a_comp_en_value <= PWDATA[5];
            BC_REG5_rid_a_comp_en_cntrl <= PWDATA[4];
            BC_REG5_rid_c_ref_en_value <= PWDATA[3];
            BC_REG5_rid_c_ref_en_cntrl <= PWDATA[2];
            BC_REG5_rid_b_ref_en_value <= PWDATA[1];
            BC_REG5_rid_b_ref_en_cntrl <= PWDATA[0];
          end
        BC_REG6_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            BC_REG6_bc_delay_value[4:0] <= PWDATA[7:3];
            BC_REG6_bc_delay_en        <= PWDATA[2];
            BC_REG6_DM_vlgc_comp_en_value <= PWDATA[1];
            BC_REG6_DM_vlgc_comp_en_cntrl <= PWDATA[0];
          end
        BC_REG7_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            BC_REG7_rid_nonfloat_src_en_value <= PWDATA[7];
            BC_REG7_rid_nonfloat_src_en_cntrl <= PWDATA[6];
            BC_REG7_rid_float_src_en_value <= PWDATA[5];
            BC_REG7_rid_float_src_en_cntrl <= PWDATA[4];
            BC_REG7_reset_cntrl        <= PWDATA[3];
            BC_REG7_DM_current_src_en_value <= PWDATA[2];
            BC_REG7_DM_current_src_en_cntrl <= PWDATA[1];
            BC_REG7_unused             <= PWDATA[0];
          end
        TED_REG0_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            TED_REG0_calib_code_up_en  <= PWDATA[7];
            TED_REG0_Delay_value[1:0]  <= PWDATA[6:5];
            TED_REG0_delay_en          <= PWDATA[4];
            TED_REG0_calib_done        <= PWDATA[3];
            TED_REG0_caliib_done_en    <= PWDATA[2];
            TED_REG0_comp_out_down_inv <= PWDATA[1];
            TED_REG0_comp_out_up_inv   <= PWDATA[0];
          end
        TED_REG1_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            TED_REG1_calib_code_down[3:0] <= PWDATA[7:4];
            TED_REG1_calib_code_up[3:0] <= PWDATA[3:0];
          end
        TED_REG2_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            TED_REG2_unused[2:0]       <= PWDATA[7:5];
            TED_REG2_calib_mode_dn     <= PWDATA[4];
            TED_REG2_calib_mode_dn_en  <= PWDATA[3];
            TED_REG2_calib_mode_up     <= PWDATA[2];
            TED_REG2_calib_mode_up_en  <= PWDATA[1];
            TED_REG2_calib_code_dn_en  <= PWDATA[0];
          end
        DIG_UNUSED_REG0_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            DIG_UNUSED_REG0_unused[7:0] <= PWDATA[7:0];
          end
        DIG_UNUSED_REG1_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            DIG_UNUSED_REG1_unused[7:0] <= PWDATA[7:0];
          end
        DIG_UNUSED_REG2_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            DIG_UNUSED_REG2_unused[7:0] <= PWDATA[7:0];
          end
        DIG_UNUSED_REG3_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            DIG_UNUSED_REG3_unused[7:0] <= PWDATA[7:0];
          end
        INTERRUPT_REG1_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            INTERRUPT_REG1_isr         <= (INTERRUPT_REG1_isr | i_isr_in) & (~PWDATA[6]);
              INTERRUPT_REG1_irsr      <= (INTERRUPT_REG1_irsr | i_irsr_in) & (~PWDATA[7]);
            INTERRUPT_REG1_unused      <= PWDATA[5:0];
          end
        INTERRUPT_REG2_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            INTERRUPT_REG2_unused[6:0] <= PWDATA[7:1];
            INTERRUPT_REG2_imr         <= PWDATA[0];
          end
        endcase
    end  
  end  
end  
always @(*)
begin
  PRDATA[7:0] = 8'h0;
    if ((PSELx == 1'b1) && (PWRITE == 1'b0))
    begin
      case (PADDR[7:0])
        CALIB_REG0_REG_OFFSET[7:0]: begin
          PRDATA[7] = CALIB_REG0_calib_clk;
          PRDATA[6] = CALIB_REG0_calib_clk_en;
          PRDATA[5] = CALIB_REG0_comp_out;
          PRDATA[4:1] = CALIB_REG0_init_wait_ovr[3:0];
          PRDATA[0] = CALIB_REG0_init_wait_ovr_en;
        end
        CALIB_REG1_REG_OFFSET[7:0]: begin
          PRDATA[7] = CALIB_REG1_unused;
          PRDATA[6:1] = CALIB_REG1_calib_code[5:0];
          PRDATA[0] = CALIB_REG1_calib_code_en;
        end
        BC_REG0_REG_OFFSET[7:0]: begin
          PRDATA[7:4] = BC_REG0_unused[3:0];
          PRDATA[3] = BC_REG0_adp_en;
          PRDATA[2] = BC_REG0_adp_en_en;
          PRDATA[1] = BC_REG0_id_pullup;
          PRDATA[0] = BC_REG0_id_pullup_en;
        end
        BC_REG1_REG_OFFSET[7:0]: begin
          PRDATA[7] = BC_REG1_ADP_source_I_en;
          PRDATA[6] = BC_REG1_ADP_source_I_en_ctrl;
          PRDATA[5] = BC_REG1_ADP_sink_I_en;
          PRDATA[4] = BC_REG1_ADP_sink_I_en_ctrl;
          PRDATA[3] = BC_REG1_ADP_sense_en;
          PRDATA[2] = BC_REG1_ADP_sense_en_ctrl;
          PRDATA[1] = BC_REG1_ADP_probe_en;
          PRDATA[0] = BC_REG1_ADP_probe_en_ctrl;
        end
        BC_REG2_REG_OFFSET[7:0]: begin
          PRDATA[7] = BC_REG2_idm_sink_en_value;
          PRDATA[6] = BC_REG2_idm_sink_en_cntrl;
          PRDATA[5] = BC_REG2_idp_sink_en_value;
          PRDATA[4] = BC_REG2_idp_sink_en_cntrl;
          PRDATA[3] = BC_REG2_idp_src_en_value;
          PRDATA[2] = BC_REG2_idp_src_en_cntrl;
          PRDATA[1] = BC_REG2_bc_en_value;
          PRDATA[0] = BC_REG2_bc_en_cntrl;
        end
        BC_REG3_REG_OFFSET[7:0]: begin
          PRDATA[7] = BC_REG3_dm_vdat_ref_comp_en_value;
          PRDATA[6] = BC_REG3_dm_vdat_ref_comp_en_cntrl;
          PRDATA[5] = BC_REG3_dp_vdat_ref_comp_en_value;
          PRDATA[4] = BC_REG3_dp_vdat_ref_comp_en_cntrl;
          PRDATA[3] = BC_REG3_vdp_src_en_value;
          PRDATA[2] = BC_REG3_vdp_src_en_cntrl;
          PRDATA[1] = BC_REG3_vdm_src_en_value;
          PRDATA[0] = BC_REG3_vdm_src_en_cntrl;
        end
        BC_REG4_REG_OFFSET[7:0]: begin
          PRDATA[7] = BC_REG4_rid_a_ref_en_value;
          PRDATA[6] = BC_REG4_rid_a_ref_en_cntrl;
          PRDATA[5] = BC_REG4_rid_float_ref_en_value;
          PRDATA[4] = BC_REG4_rid_float_ref_en_cntrl;
          PRDATA[3] = BC_REG4_rid_nonfloat_comp_en_value;
          PRDATA[2] = BC_REG4_rid_nonfloat_comp_en_cntrl;
          PRDATA[1] = BC_REG4_rid_float_comp_en_value;
          PRDATA[0] = BC_REG4_rid_float_comp_en_cntrl;
        end
        BC_REG5_REG_OFFSET[7:0]: begin
          PRDATA[7] = BC_REG5_rid_b_c_comp_en_value;
          PRDATA[6] = BC_REG5_rid_b_c_comp_en_cntrl;
          PRDATA[5] = BC_REG5_rid_a_comp_en_value;
          PRDATA[4] = BC_REG5_rid_a_comp_en_cntrl;
          PRDATA[3] = BC_REG5_rid_c_ref_en_value;
          PRDATA[2] = BC_REG5_rid_c_ref_en_cntrl;
          PRDATA[1] = BC_REG5_rid_b_ref_en_value;
          PRDATA[0] = BC_REG5_rid_b_ref_en_cntrl;
        end
        BC_REG6_REG_OFFSET[7:0]: begin
          PRDATA[7:3] = BC_REG6_bc_delay_value[4:0];
          PRDATA[2] = BC_REG6_bc_delay_en;
          PRDATA[1] = BC_REG6_DM_vlgc_comp_en_value;
          PRDATA[0] = BC_REG6_DM_vlgc_comp_en_cntrl;
        end
        BC_REG7_REG_OFFSET[7:0]: begin
          PRDATA[7] = BC_REG7_rid_nonfloat_src_en_value;
          PRDATA[6] = BC_REG7_rid_nonfloat_src_en_cntrl;
          PRDATA[5] = BC_REG7_rid_float_src_en_value;
          PRDATA[4] = BC_REG7_rid_float_src_en_cntrl;
          PRDATA[3] = BC_REG7_reset_cntrl;
          PRDATA[2] = BC_REG7_DM_current_src_en_value;
          PRDATA[1] = BC_REG7_DM_current_src_en_cntrl;
          PRDATA[0] = BC_REG7_unused;
        end
        TED_REG0_REG_OFFSET[7:0]: begin
          PRDATA[7] = TED_REG0_calib_code_up_en;
          PRDATA[6:5] = TED_REG0_Delay_value[1:0];
          PRDATA[4] = TED_REG0_delay_en;
          PRDATA[3] = TED_REG0_calib_done;
          PRDATA[2] = TED_REG0_caliib_done_en;
          PRDATA[1] = TED_REG0_comp_out_down_inv;
          PRDATA[0] = TED_REG0_comp_out_up_inv;
        end
        TED_REG1_REG_OFFSET[7:0]: begin
          PRDATA[7:4] = TED_REG1_calib_code_down[3:0];
          PRDATA[3:0] = TED_REG1_calib_code_up[3:0];
        end
        TED_REG2_REG_OFFSET[7:0]: begin
          PRDATA[7:5] = TED_REG2_unused[2:0];
          PRDATA[4] = TED_REG2_calib_mode_dn;
          PRDATA[3] = TED_REG2_calib_mode_dn_en;
          PRDATA[2] = TED_REG2_calib_mode_up;
          PRDATA[1] = TED_REG2_calib_mode_up_en;
          PRDATA[0] = TED_REG2_calib_code_dn_en;
        end
        CALIB_REG2_REG_OFFSET[7:0]: begin
          PRDATA[7:4] = CALIB_REG2_unused_IN[3:0];
          PRDATA[3] = CALIB_REG2_calib_cmp_IN;
          PRDATA[2] = CALIB_REG2_calib_pd_IN;
          PRDATA[1] = CALIB_REG2_calib_clock_IN;
          PRDATA[0] = CALIB_REG2_calib_done_IN;
        end
        CALIB_REG3_REG_OFFSET[7:0]: begin
          PRDATA[7:5] = CALIB_REG3_unused_IN[2:0];
          PRDATA[4:0] = CALIB_REG3_bg_unit_res_calib_IN[4:0];
        end
        BC_REG8_REG_OFFSET[7:0]: begin
          PRDATA[7] = BC_REG8_dcd_comp_IN;
          PRDATA[6] = BC_REG8_adp_sense_IN;
          PRDATA[5] = BC_REG8_adp_probe_IN;
          PRDATA[4] = BC_REG8_bvalid_IN;
          PRDATA[3] = BC_REG8_vbusvalid_IN;
          PRDATA[2] = BC_REG8_iddig_IN;
          PRDATA[1:0] = BC_REG8_unused_IN[1:0];
        end
        BC_REG9_REG_OFFSET[7:0]: begin
          PRDATA[7] = BC_REG9_o_dm_vdat_ref_comp_en_IN;
          PRDATA[6] = BC_REG9_o_dp_vdat_ref_comp_en_IN;
          PRDATA[5] = BC_REG9_o_vdm_src_en_IN;
          PRDATA[4] = BC_REG9_o_vdp_src_en_IN;
          PRDATA[3] = BC_REG9_o_idm_sink_en_IN;
          PRDATA[2] = BC_REG9_o_idp_sink_en_IN;
          PRDATA[1] = BC_REG9_o_idp_src_en_IN;
          PRDATA[0] = BC_REG9_o_bc_en_IN;
        end
        BC_REG10_REG_OFFSET[7:0]: begin
          PRDATA[7] = BC_REG10_o_rid_b_c_comp_en_IN;
          PRDATA[6] = BC_REG10_o_rid_a_comp_en_IN;
          PRDATA[5] = BC_REG10_o_rid_c_ref_en_IN;
          PRDATA[4] = BC_REG10_o_rid_b_ref_en_IN;
          PRDATA[3] = BC_REG10_o_rid_a_ref_en_IN;
          PRDATA[2] = BC_REG10_o_rid_float_ref_en_IN;
          PRDATA[1] = BC_REG10_o_rid_nonfloat_src_en_IN;
          PRDATA[0] = BC_REG10_o_rid_float_src_en_IN;
        end
        BC_REG11_REG_OFFSET[7:0]: begin
          PRDATA[7] = BC_REG11_o_idm_src_en_IN;
          PRDATA[6] = BC_REG11_i_afe_rxdp_ana_IN;
          PRDATA[5] = BC_REG11_i_afe_rxdm_ana_IN;
          PRDATA[4] = BC_REG11_i_rid_b_c_comp_sts_IN;
          PRDATA[3] = BC_REG11_i_rid_a_comp_sts_IN;
          PRDATA[2] = BC_REG11_i_dm_vdat_ref_comp_sts_IN;
          PRDATA[1] = BC_REG11_i_dp_vdat_ref_comp_sts_IN;
          PRDATA[0] = BC_REG11_o_dm_vlgc_comp_en_IN;
        end
        BC_REG12_REG_OFFSET[7:0]: begin
          PRDATA[7] = BC_REG12_rid_gnd_comp_sts_IN;
          PRDATA[6] = BC_REG12_rid_float_comp_sts_IN;
          PRDATA[5] = BC_REG12_rid_c_comp_sts_IN;
          PRDATA[4] = BC_REG12_rid_b_comp_sts_IN;
          PRDATA[3] = BC_REG12_rid_a_comp_sts_IN;
          PRDATA[2] = BC_REG12_dm_vlgc_comp_sts_IN;
          PRDATA[1] = BC_REG12_dm_vdat_ref_comp_sts_IN;
          PRDATA[0] = BC_REG12_dp_vdat_ref_comp_sts_IN;
        end
        TED_REG3_REG_OFFSET[7:0]: begin
          PRDATA[7:4] = TED_REG3_calib_code_down_IN[3:0];
          PRDATA[3] = TED_REG3_comparator_down_IN;
          PRDATA[2] = TED_REG3_calib_done_down_IN;
          PRDATA[1:0] = TED_REG3_unused_IN[1:0];
        end
        TED_REG4_REG_OFFSET[7:0]: begin
          PRDATA[7:4] = TED_REG4_calib_code_up_IN[3:0];
          PRDATA[3] = TED_REG4_comparator_up_IN;
          PRDATA[2] = TED_REG4_calib_done_up_IN;
          PRDATA[1:0] = TED_REG4_unused_IN[1:0];
        end
        DIG_UNUSED_REG0_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = DIG_UNUSED_REG0_unused[7:0];
        end
        DIG_UNUSED_REG1_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = DIG_UNUSED_REG1_unused[7:0];
        end
        DIG_UNUSED_REG2_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = DIG_UNUSED_REG2_unused[7:0];
        end
        DIG_UNUSED_REG3_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = DIG_UNUSED_REG3_unused[7:0];
        end
        INTERRUPT_REG1_REG_OFFSET[7:0]: begin
          PRDATA[7]   = INTERRUPT_REG1_irsr;
          PRDATA[6]   = INTERRUPT_REG1_isr;
          PRDATA[5:0] = INTERRUPT_REG1_unused;
        end
        INTERRUPT_REG2_REG_OFFSET[7:0]: begin
          PRDATA[7:1] = INTERRUPT_REG2_unused[6:0];
          PRDATA[0] = INTERRUPT_REG2_imr;
        end
       default:
          PRDATA = 8'h0;
      endcase
    end  
end  
assign CALIB_REG0_calib_clk_OUT        = CALIB_REG0_calib_clk;
assign CALIB_REG0_calib_clk_en_OUT     = CALIB_REG0_calib_clk_en;
assign CALIB_REG0_comp_out_OUT         = CALIB_REG0_comp_out;
assign CALIB_REG0_init_wait_ovr_OUT[3:0] = CALIB_REG0_init_wait_ovr[3:0];
assign CALIB_REG0_init_wait_ovr_en_OUT = CALIB_REG0_init_wait_ovr_en;
assign CALIB_REG1_unused_OUT           = CALIB_REG1_unused;
assign CALIB_REG1_calib_code_OUT[5:0]  = CALIB_REG1_calib_code[5:0];
assign CALIB_REG1_calib_code_en_OUT    = CALIB_REG1_calib_code_en;
assign BC_REG0_unused_OUT[3:0]         = BC_REG0_unused[3:0];
assign BC_REG0_adp_en_OUT              = BC_REG0_adp_en;
assign BC_REG0_adp_en_en_OUT           = BC_REG0_adp_en_en;
assign BC_REG0_id_pullup_OUT           = BC_REG0_id_pullup;
assign BC_REG0_id_pullup_en_OUT        = BC_REG0_id_pullup_en;
assign BC_REG1_ADP_source_I_en_OUT     = BC_REG1_ADP_source_I_en;
assign BC_REG1_ADP_source_I_en_ctrl_OUT = BC_REG1_ADP_source_I_en_ctrl;
assign BC_REG1_ADP_sink_I_en_OUT       = BC_REG1_ADP_sink_I_en;
assign BC_REG1_ADP_sink_I_en_ctrl_OUT  = BC_REG1_ADP_sink_I_en_ctrl;
assign BC_REG1_ADP_sense_en_OUT        = BC_REG1_ADP_sense_en;
assign BC_REG1_ADP_sense_en_ctrl_OUT   = BC_REG1_ADP_sense_en_ctrl;
assign BC_REG1_ADP_probe_en_OUT        = BC_REG1_ADP_probe_en;
assign BC_REG1_ADP_probe_en_ctrl_OUT   = BC_REG1_ADP_probe_en_ctrl;
assign BC_REG2_idm_sink_en_value_OUT   = BC_REG2_idm_sink_en_value;
assign BC_REG2_idm_sink_en_cntrl_OUT   = BC_REG2_idm_sink_en_cntrl;
assign BC_REG2_idp_sink_en_value_OUT   = BC_REG2_idp_sink_en_value;
assign BC_REG2_idp_sink_en_cntrl_OUT   = BC_REG2_idp_sink_en_cntrl;
assign BC_REG2_idp_src_en_value_OUT    = BC_REG2_idp_src_en_value;
assign BC_REG2_idp_src_en_cntrl_OUT    = BC_REG2_idp_src_en_cntrl;
assign BC_REG2_bc_en_value_OUT         = BC_REG2_bc_en_value;
assign BC_REG2_bc_en_cntrl_OUT         = BC_REG2_bc_en_cntrl;
assign BC_REG3_dm_vdat_ref_comp_en_value_OUT = BC_REG3_dm_vdat_ref_comp_en_value;
assign BC_REG3_dm_vdat_ref_comp_en_cntrl_OUT = BC_REG3_dm_vdat_ref_comp_en_cntrl;
assign BC_REG3_dp_vdat_ref_comp_en_value_OUT = BC_REG3_dp_vdat_ref_comp_en_value;
assign BC_REG3_dp_vdat_ref_comp_en_cntrl_OUT = BC_REG3_dp_vdat_ref_comp_en_cntrl;
assign BC_REG3_vdp_src_en_value_OUT    = BC_REG3_vdp_src_en_value;
assign BC_REG3_vdp_src_en_cntrl_OUT    = BC_REG3_vdp_src_en_cntrl;
assign BC_REG3_vdm_src_en_value_OUT    = BC_REG3_vdm_src_en_value;
assign BC_REG3_vdm_src_en_cntrl_OUT    = BC_REG3_vdm_src_en_cntrl;
assign BC_REG4_rid_a_ref_en_value_OUT  = BC_REG4_rid_a_ref_en_value;
assign BC_REG4_rid_a_ref_en_cntrl_OUT  = BC_REG4_rid_a_ref_en_cntrl;
assign BC_REG4_rid_float_ref_en_value_OUT = BC_REG4_rid_float_ref_en_value;
assign BC_REG4_rid_float_ref_en_cntrl_OUT = BC_REG4_rid_float_ref_en_cntrl;
assign BC_REG4_rid_nonfloat_comp_en_value_OUT = BC_REG4_rid_nonfloat_comp_en_value;
assign BC_REG4_rid_nonfloat_comp_en_cntrl_OUT = BC_REG4_rid_nonfloat_comp_en_cntrl;
assign BC_REG4_rid_float_comp_en_value_OUT = BC_REG4_rid_float_comp_en_value;
assign BC_REG4_rid_float_comp_en_cntrl_OUT = BC_REG4_rid_float_comp_en_cntrl;
assign BC_REG5_rid_b_c_comp_en_value_OUT = BC_REG5_rid_b_c_comp_en_value;
assign BC_REG5_rid_b_c_comp_en_cntrl_OUT = BC_REG5_rid_b_c_comp_en_cntrl;
assign BC_REG5_rid_a_comp_en_value_OUT = BC_REG5_rid_a_comp_en_value;
assign BC_REG5_rid_a_comp_en_cntrl_OUT = BC_REG5_rid_a_comp_en_cntrl;
assign BC_REG5_rid_c_ref_en_value_OUT  = BC_REG5_rid_c_ref_en_value;
assign BC_REG5_rid_c_ref_en_cntrl_OUT  = BC_REG5_rid_c_ref_en_cntrl;
assign BC_REG5_rid_b_ref_en_value_OUT  = BC_REG5_rid_b_ref_en_value;
assign BC_REG5_rid_b_ref_en_cntrl_OUT  = BC_REG5_rid_b_ref_en_cntrl;
assign BC_REG6_bc_delay_value_OUT[4:0] = BC_REG6_bc_delay_value[4:0];
assign BC_REG6_bc_delay_en_OUT         = BC_REG6_bc_delay_en;
assign BC_REG6_DM_vlgc_comp_en_value_OUT = BC_REG6_DM_vlgc_comp_en_value;
assign BC_REG6_DM_vlgc_comp_en_cntrl_OUT = BC_REG6_DM_vlgc_comp_en_cntrl;
assign BC_REG7_rid_nonfloat_src_en_value_OUT = BC_REG7_rid_nonfloat_src_en_value;
assign BC_REG7_rid_nonfloat_src_en_cntrl_OUT = BC_REG7_rid_nonfloat_src_en_cntrl;
assign BC_REG7_rid_float_src_en_value_OUT = BC_REG7_rid_float_src_en_value;
assign BC_REG7_rid_float_src_en_cntrl_OUT = BC_REG7_rid_float_src_en_cntrl;
assign BC_REG7_reset_cntrl_OUT         = BC_REG7_reset_cntrl;
assign BC_REG7_DM_current_src_en_value_OUT = BC_REG7_DM_current_src_en_value;
assign BC_REG7_DM_current_src_en_cntrl_OUT = BC_REG7_DM_current_src_en_cntrl;
assign BC_REG7_unused_OUT              = BC_REG7_unused;
assign TED_REG0_calib_code_up_en_OUT   = TED_REG0_calib_code_up_en;
assign TED_REG0_Delay_value_OUT[1:0]   = TED_REG0_Delay_value[1:0];
assign TED_REG0_delay_en_OUT           = TED_REG0_delay_en;
assign TED_REG0_calib_done_OUT         = TED_REG0_calib_done;
assign TED_REG0_caliib_done_en_OUT     = TED_REG0_caliib_done_en;
assign TED_REG0_comp_out_down_inv_OUT  = TED_REG0_comp_out_down_inv;
assign TED_REG0_comp_out_up_inv_OUT    = TED_REG0_comp_out_up_inv;
assign TED_REG1_calib_code_down_OUT[3:0] = TED_REG1_calib_code_down[3:0];
assign TED_REG1_calib_code_up_OUT[3:0] = TED_REG1_calib_code_up[3:0];
assign TED_REG2_unused_OUT[2:0]        = TED_REG2_unused[2:0];
assign TED_REG2_calib_mode_dn_OUT      = TED_REG2_calib_mode_dn;
assign TED_REG2_calib_mode_dn_en_OUT   = TED_REG2_calib_mode_dn_en;
assign TED_REG2_calib_mode_up_OUT      = TED_REG2_calib_mode_up;
assign TED_REG2_calib_mode_up_en_OUT   = TED_REG2_calib_mode_up_en;
assign TED_REG2_calib_code_dn_en_OUT   = TED_REG2_calib_code_dn_en;
assign DIG_UNUSED_REG0_unused_OUT[7:0] = DIG_UNUSED_REG0_unused[7:0];
assign DIG_UNUSED_REG1_unused_OUT[7:0] = DIG_UNUSED_REG1_unused[7:0];
assign DIG_UNUSED_REG2_unused_OUT[7:0] = DIG_UNUSED_REG2_unused[7:0];
assign DIG_UNUSED_REG3_unused_OUT[7:0] = DIG_UNUSED_REG3_unused[7:0];
assign INTERRUPT_REG1_irsr_OUT         = INTERRUPT_REG1_irsr;
assign INTERRUPT_REG1_isr_OUT          = INTERRUPT_REG1_isr;
assign INTERRUPT_REG1_unused_OUT       = INTERRUPT_REG1_unused;
assign INTERRUPT_REG2_unused_OUT[6:0]  = INTERRUPT_REG2_unused[6:0];
assign INTERRUPT_REG2_imr_OUT          = INTERRUPT_REG2_imr;
endmodule
module udc_bist_tx_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r
(
input		i_clk,
input		i_rstn,
input		i_soft_rst,
input		i_start,
input		i_databus,
input		i_tx_ready,
input	[1:0]	i_data_sel,
input		i_err_inj_en,
input	[1:0]	i_err_inj_packet_sel,
output reg		o_tx_valid,
output reg		o_tx_validh,
output wire [7:0]	o_tx_data,
output wire [7:0]	o_tx_datah,
output reg		o_tx_done,
output wire 	[1:0]	debug_r_state_tx,
output wire	[5:0]	debug_data_cnt_tx,
output wire		debug_inc_data_cnt
);
parameter p_IDLE = 2'd0;
parameter p_DATA = 2'd1;
parameter p_REPORT_STATUS = 2'd2;
reg [5:0] r_data_cnt;
reg [15:0] r_data;
reg [1:0] r_state, r_next_state;
wire [5:0] w_max_cnt;
wire inc_data_cnt;
assign debug_r_state_tx = r_state;
assign debug_data_cnt_tx = r_data_cnt;
assign debug_inc_data_cnt = inc_data_cnt;
assign o_tx_data = r_data[7:0];
assign o_tx_datah = r_data[15:8];
assign w_max_cnt = (i_databus) ? 6'd27 : 6'd55;
assign inc_data_cnt = (i_databus) ? (i_tx_ready && o_tx_valid && o_tx_validh) : (i_tx_ready && o_tx_valid);
always @(*)
begin
  case(r_state)
  p_IDLE : begin
    if(i_start)
      r_next_state = p_DATA;
    else
      r_next_state = p_IDLE;
  end
  p_DATA : begin
    if((r_data_cnt == w_max_cnt) && inc_data_cnt)
      r_next_state = p_REPORT_STATUS;
    else
      r_next_state = p_DATA;
  end
  p_REPORT_STATUS : begin
    r_next_state = p_IDLE;
  end
  default : r_next_state = p_IDLE;
  endcase
end
always @(posedge i_clk or negedge i_rstn)
if(!i_rstn)
  r_state <= p_IDLE;
else if(i_soft_rst)
  r_state <= p_IDLE;
else
  r_state <= r_next_state;
always @(posedge i_clk or negedge i_rstn)
if(!i_rstn)
  o_tx_done <= 1'b0;
else if(i_soft_rst)
  o_tx_done <= 1'b0;
else
begin
  if(r_next_state == p_REPORT_STATUS)
    o_tx_done <= 1'b1;
  else
    o_tx_done <= 1'b0;
end
always @(posedge i_clk or negedge i_rstn)
if(!i_rstn)
begin
  o_tx_valid <= 1'b0;
  o_tx_validh <= 1'b0;
end
else if(i_soft_rst)
begin
  o_tx_valid <= 1'b0;
  o_tx_validh <= 1'b0;
end
else
begin
  if(r_next_state == p_REPORT_STATUS)
  begin
    o_tx_valid <= 1'b0;
    o_tx_validh <= 1'b0;
  end
  else if(r_state == p_DATA)
  begin
    if(i_databus)
    begin
      o_tx_valid <= 1'b1;
      o_tx_validh <= 1'b1;
    end
    else
      o_tx_valid <= 1'b1;
  end
end 
always @(posedge i_clk or negedge i_rstn)
if (!i_rstn)
  r_data_cnt <= 6'd0;
else if (i_soft_rst)
  r_data_cnt <= 6'd0;
else if (r_next_state == p_REPORT_STATUS)
  r_data_cnt <= 6'd0;
else if (inc_data_cnt)
    r_data_cnt <= r_data_cnt + 1'b1;
always @(*)
begin
  if(i_data_sel == 2'd0)
  begin
    if(i_err_inj_en && i_err_inj_packet_sel == 2'b00 && r_data_cnt == 6'd10)
      r_data = 16'd1;
    else
      r_data = 16'd0;
  end
  else if(i_data_sel == 2'd1)
  begin
    if(i_err_inj_en && i_err_inj_packet_sel == 2'b01 && r_data_cnt == 6'd10)
      r_data = 16'hFFFE;
    else
      r_data = 16'hFFFF;
  end
  else if(i_data_sel == 2'd2)
  begin
    if(i_err_inj_en && i_err_inj_packet_sel == 2'b10 && r_data_cnt == 6'd10)
      r_data = 16'hAAAB;
    else
      r_data = 16'hAAAA;
  end
  else
  begin
    if(i_databus)
    begin
      case(r_data_cnt)
        6'd0 :  r_data = {8'h00, 8'hC3};
        6'd1 :  r_data = {8'h00, 8'h00};
        6'd2 :  r_data = {8'h00, 8'h00};
        6'd3 :  r_data = {8'h00, 8'h00};
        6'd4 :  r_data = {8'h00, 8'h00};
        6'd5 :  r_data = {8'hAA, 8'hAA};
        6'd6 :  r_data = {8'hAA, 8'hAA};
        6'd7 :  r_data = {8'hAA, 8'hAA};
        6'd8 :  r_data = {8'hAA, 8'hAA};
        6'd9 :  r_data = {8'hEE, 8'hEE};
        6'd10 : 
	begin
	  if(i_err_inj_en && i_err_inj_packet_sel == 2'b11)
	    r_data = {8'hEE, 8'hEF};
	  else
            r_data = {8'hEE, 8'hEE};
	end
        6'd11 : r_data = {8'hEE, 8'hEE};
        6'd12 : r_data = {8'hEE, 8'hEE};
        6'd13 : r_data = {8'hFF, 8'hFE};
        6'd14 : r_data = {8'hFF, 8'hFF};
        6'd15 : r_data = {8'hFF, 8'hFF};
        6'd16 : r_data = {8'hFF, 8'hFF};
        6'd17 : r_data = {8'hFF, 8'hFF};
        6'd18 : r_data = {8'hFF, 8'hFF};
        6'd19 : r_data = {8'hBF, 8'h7F};
        6'd20 : r_data = {8'hEF, 8'hDF};
        6'd21 : r_data = {8'hFB, 8'hF7};
        6'd22 : r_data = {8'hFC, 8'hFD};
        6'd23 : r_data = {8'hBF, 8'h7E};
        6'd24 : r_data = {8'hEF, 8'hDF};
        6'd25 : r_data = {8'hFB, 8'hF7};
        6'd26 : r_data = {8'h7E, 8'hFD};
        6'd27 : r_data = {8'hCE, 8'hB6};
      default : r_data = 16'd0;
      endcase
    end
    else
    begin
      case(r_data_cnt)
        6'd0 :  r_data = {8'h00, 8'hC3};
        6'd1 :  r_data = {8'h00, 8'h00};
        6'd2 :  r_data = {8'h00, 8'h00};
        6'd3 :  r_data = {8'h00, 8'h00};
        6'd4 :  r_data = {8'h00, 8'h00};
        6'd5 :  r_data = {8'h00, 8'h00};
        6'd6 :  r_data = {8'h00, 8'h00};
        6'd7 :  r_data = {8'h00, 8'h00};
        6'd8 :  r_data = {8'h00, 8'h00};
        6'd9 :  r_data = {8'h00, 8'h00};
        6'd10 : 
	begin
	  if(i_err_inj_en && i_err_inj_packet_sel == 2'b11)
	    r_data = {8'h00, 8'hAB};
	  else
            r_data = {8'h00, 8'hAA};
	end
        6'd11 : r_data = {8'h00, 8'hAA};
        6'd12 : r_data = {8'h00, 8'hAA};
        6'd13 : r_data = {8'h00, 8'hAA};
        6'd14 : r_data = {8'h00, 8'hAA};
        6'd15 : r_data = {8'h00, 8'hAA};
        6'd16 : r_data = {8'h00, 8'hAA};
        6'd17 : r_data = {8'h00, 8'hAA};
        6'd18 : r_data = {8'h00, 8'hEE};
        6'd19 : r_data = {8'h00, 8'hEE};
        6'd20 : r_data = {8'h00, 8'hEE};
        6'd21 : r_data = {8'h00, 8'hEE};
        6'd22 : r_data = {8'h00, 8'hEE};
        6'd23 : r_data = {8'h00, 8'hEE};
        6'd24 : r_data = {8'h00, 8'hEE};
        6'd25 : r_data = {8'h00, 8'hEE};
        6'd26 : r_data = {8'h00, 8'hFE};
        6'd27 : r_data = {8'h00, 8'hFF};
	6'd28 : r_data = {8'h00, 8'hFF};
        6'd29 : r_data = {8'h00, 8'hFF};
        6'd30 : r_data = {8'h00, 8'hFF};
        6'd31 : r_data = {8'h00, 8'hFF};
        6'd32 : r_data = {8'h00, 8'hFF};
        6'd33 : r_data = {8'h00, 8'hFF};
        6'd34 : r_data = {8'h00, 8'hFF};
        6'd35 : r_data = {8'h00, 8'hFF};
        6'd36 : r_data = {8'h00, 8'hFF};
        6'd37 : r_data = {8'h00, 8'hFF};
        6'd38 : r_data = {8'h00, 8'h7F};
        6'd39 : r_data = {8'h00, 8'hBF};
        6'd40 : r_data = {8'h00, 8'hDF};
        6'd41 : r_data = {8'h00, 8'hEF};
        6'd42 : r_data = {8'h00, 8'hF7};
        6'd43 : r_data = {8'h00, 8'hFB};
        6'd44 : r_data = {8'h00, 8'hFD};
        6'd45 : r_data = {8'h00, 8'hFC};
        6'd46 : r_data = {8'h00, 8'h7E};
        6'd47 : r_data = {8'h00, 8'hBF};
        6'd48 : r_data = {8'h00, 8'hDF};
        6'd49 : r_data = {8'h00, 8'hEF};
        6'd50 : r_data = {8'h00, 8'hF7};
        6'd51 : r_data = {8'h00, 8'hFB};
        6'd52 : r_data = {8'h00, 8'hFD};
        6'd53 : r_data = {8'h00, 8'h7E};
        6'd54 : r_data = {8'h00, 8'hB6};
        6'd55 : r_data = {8'h00, 8'hCE};
      default : r_data = 16'd0;
      endcase
    end  
  end
end
endmodule
module usb2_cdr_filter_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
i_ana_data	,
i_ana_3p36G_clk	,
clk480		,
i_rstb		,
enable_filter	,
tm_deassert_sel	,
tm_ext_ctrl	,
sample_5x	,
receive_enable	,
decision_error_gen_en	,
small_pulse	,
data_fil
);
input i_ana_data, i_ana_3p36G_clk, i_rstb, enable_filter, clk480, tm_deassert_sel, tm_ext_ctrl, sample_5x, receive_enable, decision_error_gen_en ;
output data_fil, small_pulse ;
reg 	[3:0]	data_sampled ;
reg		data_fil, small_pulse ;
wire		data_filtered, data_fil_p ;
wire 		i_ana_3p36G_clk, i_rstb, enable_filter ;
always @(posedge i_ana_3p36G_clk or negedge i_rstb)
begin
	if(~i_rstb)
	data_sampled	<= 4'd 0 ;
	else
	data_sampled	<= sample_5x ? ( {1'b0,data_sampled[1:0], i_ana_data} ) : {data_sampled[2:0], i_ana_data} ;
end
assign data_filtered = sample_5x ? ((&data_sampled[2:0]) | ~(|data_sampled[2:0])) : ((&data_sampled) | ~(|data_sampled)) ;
assign data_fil_p = enable_filter ? ( sample_5x ? (data_filtered ? data_sampled[2] : data_fil) : (data_filtered ? data_sampled[3] : data_fil) )
				 	: data_sampled[0] ;
always @(posedge i_ana_3p36G_clk or negedge i_rstb)
begin
	if(~i_rstb)
	data_fil	<= 1'b 0 ;
	else
	data_fil	<= data_fil_p ;
end
assign small_pulse_x = sample_5x ? ( ~(data_fil_p ^ data_sampled[2]) ) : ( ~(data_fil_p ^ data_sampled[3]) ) ;
assign deassert_small_pulse = tm_deassert_sel ? tm_ext_ctrl : (~receive_enable) ;
always @(posedge clk480 or negedge i_rstb)
begin
	if(~i_rstb)
	small_pulse	<= 1'b 0 ;
	else if (deassert_small_pulse)
	small_pulse	<= 1'b 0 ;
	else if (small_pulse_x & decision_error_gen_en)
	small_pulse	<= 1'b 1 ;
end
endmodule
module dig_tx_rx_reg_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
  RX_REG0_fsls_no_eop_timeout_OUT,
  RX_REG0_fsls_timeout_en_OUT,
  RX_REG0_hs_sync_det_bits_OUT,
  RX_REG0_fs_eop_se0_threshold_OUT,
  RX_REG0_fs_eop_se0_en_OUT,
  RX_REG1_ls_eop_se0_threshold_OUT,
  RX_REG1_ls_eop_se0_en_OUT,
  RX_REG1_fs_no_eop_timeout_en_OUT,
  TX_REG0_unused_OUT,
  TX_REG0_fs_preamble_en_OUT,
  TX_REG0_sof_extension_OUT,
  TX_REG0_sof_extension_en_OUT,
  TX_REG1_preamble_value_OUT,
  CDR_REG0_unused_OUT,
  CDR_REG0_pll_clkdiv_OUT,
  CDR_REG0_pll_clkdiv_en_OUT,
  CDR_REG0_squelch_delay_OUT,
  CDR_REG0_squelch_delay_en_OUT,
  CDR_REG1_unused_OUT,
  CDR_REG1_calib_comp_out_OUT,
  CDR_REG1_calib_spc_threshold_OUT,
  CDR_REG1_calib_spc_threshold_en_OUT,
  CDR_REG1_calib_iteration_OUT,
  CDR_REG1_dynamic_calib_en_OUT,
  CDR_REG2_unused_OUT,
  CDR_REG2_hsrx_en_del_OUT,
  CDR_REG2_hsrx_en_del_en_OUT,
  CDR_REG2_hsrx_en_OUT,
  CDR_REG2_hsrx_en_en_OUT,
  CDR_REG2_calib_clock_OUT,
  CDR_REG2_calib_clock_en_OUT,
  CDR_REG2_calib_out_en_OUT,
  CDR_REG3_calib_active_OUT,
  CDR_REG3_calib_done_OUT,
  CDR_REG3_calib_code_OUT,
  CDR_REG4_clk_gate_value_OUT,
  CDR_REG4_clk_gate_en_OUT,
  CDR_REG4_clk_gate_sq_mask_OUT,
  CDR_REG4_latency_threshold_OUT,
  CDR_REG4_latency_threshold_en_OUT,
  CDR_REG4_decision_error_en_OUT,
  CDR_REG4_filter_en_OUT,
  CDR_REG5_unused_OUT,
  CDR_REG5_sample_5x_en_OUT,
  CDR_REG5_small_pulse_OUT,
  CDR_REG5_small_pulse_en_OUT,
  CDR_REG6_unused_OUT,
  CDR_REG7_unused_OUT,
  CDR_REG8_unused_OUT,
  RX_REG2_eb_error_IN,
  RX_REG2_cdr_error_IN,
  RX_REG2_sync_detected_IN,
  RX_REG2_eop_detected_IN,
  RX_REG2_hs_eop_condition_IN,
  RX_REG2_normal_eop_IN,
  RX_REG2_alignment_error_IN,
  RX_REG2_no_eop_IN,
  RX_REG3_hs_eop_detected_IN,
  RX_REG3_se0_validated_IN,
  RX_REG3_lsfs_eop_detected_IN,
  RX_REG3_bit_unstuff_error_IN,
  RX_REG3_rx_state_bitunstuff_IN,
  RX_REG3_start_flag_IN,
  RX_REG4_rxactive_reg_IN,
  RX_REG4_deassert_rxactive_reg_IN,
  RX_REG4_unused_IN,
  RX_REG5_sie_cnt_upper_IN,
  RX_REG6_phy_cnt_upper_IN,
  RX_REG7_phy_cnt_lower_IN,
  RX_REG7_sie_cnt_lower_IN,
  TX_REG2_tx_hs_state_IN,
  TX_REG2_eop_transmitted_IN,
  TX_REG2_hs_bitstuff_en_IN,
  TX_REG2_resume_eop_IN,
  TX_REG2_remote_wakeup_IN,
  TX_REG3_tx_lsfs_state_IN,
  TX_REG3_pd_state_IN,
  TX_REG3_preamble_sent_IN,
  TX_REG4_unused_IN,
  TX_REG4_lsfs_bitstuff_en_IN,
  TX_REG4_ls_keep_alive_IN,
  CDR_REG9_UNUSED_IN,
  CDR_REG9_i_ana_comp_out_IN,
  CDR_REG9_sampler_calib_done_IN,
  CDR_REG9_ana_calib_active_IN,
  CDR_REG10_unused_IN,
  CDR_REG10_calib_code_IN,
  CDR_REG11_small_pulse_IN,
  CDR_REG11_o_hsrx_rec_dicision_error_IN,
  CDR_REG11_o_ana_clk_gate_IN,
  CDR_REG11_receive_start_IN,
  CDR_REG11_i_ana_ted_squelch_IN,
  CDR_RE12_unused_IN,
  DIG_TXRX_UNUSED_REG0_unused_OUT,
  DIG_TXRX_UNUSED_REG1_unused_OUT,
  DIG_TXRX_UNUSED_REG2_unused_OUT,
  DIG_TXRX_UNUSED_REG3_unused_OUT,
  PRDATA,
  PADDR,
  PWDATA,
  PWRITE,
  PSELx,
  PENABLE,
  PCLK,
  PRESETn
);
output [7:0]   PRDATA;
input  [7:0]   PADDR;
input  [7:0]   PWDATA;
input          PWRITE;
input          PSELx;
input          PENABLE;
input          PCLK;
input          PRESETn;
output [2:0]   RX_REG0_fsls_no_eop_timeout_OUT;
output         RX_REG0_fsls_timeout_en_OUT;
output         RX_REG0_hs_sync_det_bits_OUT;
output [1:0]   RX_REG0_fs_eop_se0_threshold_OUT;
output         RX_REG0_fs_eop_se0_en_OUT;
output [5:0]   RX_REG1_ls_eop_se0_threshold_OUT;
output         RX_REG1_ls_eop_se0_en_OUT;
output         RX_REG1_fs_no_eop_timeout_en_OUT;
output [3:0]   TX_REG0_unused_OUT;
output         TX_REG0_fs_preamble_en_OUT;
output [1:0]   TX_REG0_sof_extension_OUT;
output         TX_REG0_sof_extension_en_OUT;
output [7:0]   TX_REG1_preamble_value_OUT;
output [1:0]   CDR_REG0_unused_OUT;
output [1:0]   CDR_REG0_pll_clkdiv_OUT;
output         CDR_REG0_pll_clkdiv_en_OUT;
output [1:0]   CDR_REG0_squelch_delay_OUT;
output         CDR_REG0_squelch_delay_en_OUT;
output         CDR_REG1_unused_OUT;
output         CDR_REG1_calib_comp_out_OUT;
output [2:0]   CDR_REG1_calib_spc_threshold_OUT;
output         CDR_REG1_calib_spc_threshold_en_OUT;
output         CDR_REG1_calib_iteration_OUT;
output         CDR_REG1_dynamic_calib_en_OUT;
output         CDR_REG2_unused_OUT;
output         CDR_REG2_hsrx_en_del_OUT;
output         CDR_REG2_hsrx_en_del_en_OUT;
output         CDR_REG2_hsrx_en_OUT;
output         CDR_REG2_hsrx_en_en_OUT;
output         CDR_REG2_calib_clock_OUT;
output         CDR_REG2_calib_clock_en_OUT;
output         CDR_REG2_calib_out_en_OUT;
output         CDR_REG3_calib_active_OUT;
output         CDR_REG3_calib_done_OUT;
output [5:0]   CDR_REG3_calib_code_OUT;
output         CDR_REG4_clk_gate_value_OUT;
output         CDR_REG4_clk_gate_en_OUT;
output         CDR_REG4_clk_gate_sq_mask_OUT;
output [1:0]   CDR_REG4_latency_threshold_OUT;
output         CDR_REG4_latency_threshold_en_OUT;
output         CDR_REG4_decision_error_en_OUT;
output         CDR_REG4_filter_en_OUT;
output [4:0]   CDR_REG5_unused_OUT;
output         CDR_REG5_sample_5x_en_OUT;
output         CDR_REG5_small_pulse_OUT;
output         CDR_REG5_small_pulse_en_OUT;
output [7:0]   CDR_REG6_unused_OUT;
output [7:0]   CDR_REG7_unused_OUT;
output [7:0]   CDR_REG8_unused_OUT;
input          RX_REG2_eb_error_IN;
input          RX_REG2_cdr_error_IN;
input          RX_REG2_sync_detected_IN;
input          RX_REG2_eop_detected_IN;
input          RX_REG2_hs_eop_condition_IN;
input          RX_REG2_normal_eop_IN;
input          RX_REG2_alignment_error_IN;
input          RX_REG2_no_eop_IN;
input          RX_REG3_hs_eop_detected_IN;
input          RX_REG3_se0_validated_IN;
input          RX_REG3_lsfs_eop_detected_IN;
input          RX_REG3_bit_unstuff_error_IN;
input  [2:0]   RX_REG3_rx_state_bitunstuff_IN;
input          RX_REG3_start_flag_IN;
input          RX_REG4_rxactive_reg_IN;
input          RX_REG4_deassert_rxactive_reg_IN;
input  [5:0]   RX_REG4_unused_IN;
input  [7:0]   RX_REG5_sie_cnt_upper_IN;
input  [7:0]   RX_REG6_phy_cnt_upper_IN;
input  [3:0]   RX_REG7_phy_cnt_lower_IN;
input  [3:0]   RX_REG7_sie_cnt_lower_IN;
input  [3:0]   TX_REG2_tx_hs_state_IN;
input          TX_REG2_eop_transmitted_IN;
input          TX_REG2_hs_bitstuff_en_IN;
input          TX_REG2_resume_eop_IN;
input          TX_REG2_remote_wakeup_IN;
input  [3:0]   TX_REG3_tx_lsfs_state_IN;
input  [2:0]   TX_REG3_pd_state_IN;
input          TX_REG3_preamble_sent_IN;
input  [5:0]   TX_REG4_unused_IN;
input          TX_REG4_lsfs_bitstuff_en_IN;
input          TX_REG4_ls_keep_alive_IN;
input  [4:0]   CDR_REG9_UNUSED_IN;
input          CDR_REG9_i_ana_comp_out_IN;
input          CDR_REG9_sampler_calib_done_IN;
input          CDR_REG9_ana_calib_active_IN;
input  [1:0]   CDR_REG10_unused_IN;
input  [5:0]   CDR_REG10_calib_code_IN;
input  [3:0]   CDR_REG11_small_pulse_IN;
input          CDR_REG11_o_hsrx_rec_dicision_error_IN;
input          CDR_REG11_o_ana_clk_gate_IN;
input          CDR_REG11_receive_start_IN;
input          CDR_REG11_i_ana_ted_squelch_IN;
input  [7:0]   CDR_RE12_unused_IN;
output [7:0]   DIG_TXRX_UNUSED_REG0_unused_OUT;
output [7:0]   DIG_TXRX_UNUSED_REG1_unused_OUT;
output [7:0]   DIG_TXRX_UNUSED_REG2_unused_OUT;
output [7:0]   DIG_TXRX_UNUSED_REG3_unused_OUT;
reg [7:0]   PRDATA;
reg [2:0]   RX_REG0_fsls_no_eop_timeout;
reg         RX_REG0_fsls_timeout_en;
reg         RX_REG0_hs_sync_det_bits;
reg [1:0]   RX_REG0_fs_eop_se0_threshold;
reg         RX_REG0_fs_eop_se0_en;
reg [5:0]   RX_REG1_ls_eop_se0_threshold;
reg         RX_REG1_ls_eop_se0_en;
reg         RX_REG1_fs_no_eop_timeout_en;
reg [3:0]   TX_REG0_unused;
reg         TX_REG0_fs_preamble_en;
reg [1:0]   TX_REG0_sof_extension;
reg         TX_REG0_sof_extension_en;
reg [7:0]   TX_REG1_preamble_value;
reg [1:0]   CDR_REG0_unused;
reg [1:0]   CDR_REG0_pll_clkdiv;
reg         CDR_REG0_pll_clkdiv_en;
reg [1:0]   CDR_REG0_squelch_delay;
reg         CDR_REG0_squelch_delay_en;
reg         CDR_REG1_unused;
reg         CDR_REG1_calib_comp_out;
reg [2:0]   CDR_REG1_calib_spc_threshold;
reg         CDR_REG1_calib_spc_threshold_en;
reg         CDR_REG1_calib_iteration;
reg         CDR_REG1_dynamic_calib_en;
reg         CDR_REG2_unused;
reg         CDR_REG2_hsrx_en_del;
reg         CDR_REG2_hsrx_en_del_en;
reg         CDR_REG2_hsrx_en;
reg         CDR_REG2_hsrx_en_en;
reg         CDR_REG2_calib_clock;
reg         CDR_REG2_calib_clock_en;
reg         CDR_REG2_calib_out_en;
reg         CDR_REG3_calib_active;
reg         CDR_REG3_calib_done;
reg [5:0]   CDR_REG3_calib_code;
reg         CDR_REG4_clk_gate_value;
reg         CDR_REG4_clk_gate_en;
reg         CDR_REG4_clk_gate_sq_mask;
reg [1:0]   CDR_REG4_latency_threshold;
reg         CDR_REG4_latency_threshold_en;
reg         CDR_REG4_decision_error_en;
reg         CDR_REG4_filter_en;
reg [4:0]   CDR_REG5_unused;
reg         CDR_REG5_sample_5x_en;
reg         CDR_REG5_small_pulse;
reg         CDR_REG5_small_pulse_en;
reg [7:0]   CDR_REG6_unused;
reg [7:0]   CDR_REG7_unused;
reg [7:0]   CDR_REG8_unused;
reg [7:0]   DIG_TXRX_UNUSED_REG0_unused;
reg [7:0]   DIG_TXRX_UNUSED_REG1_unused;
reg [7:0]   DIG_TXRX_UNUSED_REG2_unused;
reg [7:0]   DIG_TXRX_UNUSED_REG3_unused;
localparam RX_REG0_REG_OFFSET = 8'b10000000;
localparam RX_REG0_fsls_no_eop_timeout_BIT_RESET = 3'b000;
localparam RX_REG0_fsls_timeout_en_BIT_RESET = 1'b0;
localparam RX_REG0_hs_sync_det_bits_BIT_RESET = 1'b0;
localparam RX_REG0_fs_eop_se0_threshold_BIT_RESET = 2'b00;
localparam RX_REG0_fs_eop_se0_en_BIT_RESET = 1'b0;
localparam RX_REG1_REG_OFFSET = 8'b10000001;
localparam RX_REG1_ls_eop_se0_threshold_BIT_RESET = 6'b000000;
localparam RX_REG1_ls_eop_se0_en_BIT_RESET = 1'b0;
localparam RX_REG1_fs_no_eop_timeout_en_BIT_RESET = 1'b0;
localparam TX_REG0_REG_OFFSET = 8'b10000010;
localparam TX_REG0_unused_BIT_RESET = 4'b0000;
localparam TX_REG0_fs_preamble_en_BIT_RESET = 1'b0;
localparam TX_REG0_sof_extension_BIT_RESET = 2'b00;
localparam TX_REG0_sof_extension_en_BIT_RESET = 1'b0;
localparam TX_REG1_REG_OFFSET = 8'b10000011;
localparam TX_REG1_preamble_value_BIT_RESET = 8'b00000000;
localparam CDR_REG0_REG_OFFSET = 8'b10000100;
localparam CDR_REG0_unused_BIT_RESET = 2'b00;
localparam CDR_REG0_pll_clkdiv_BIT_RESET = 2'b00;
localparam CDR_REG0_pll_clkdiv_en_BIT_RESET = 1'b0;
localparam CDR_REG0_squelch_delay_BIT_RESET = 2'b00;
localparam CDR_REG0_squelch_delay_en_BIT_RESET = 1'b0;
localparam CDR_REG1_REG_OFFSET = 8'b10000101;
localparam CDR_REG1_unused_BIT_RESET = 1'b0;
localparam CDR_REG1_calib_comp_out_BIT_RESET = 1'b0;
localparam CDR_REG1_calib_spc_threshold_BIT_RESET = 3'b000;
localparam CDR_REG1_calib_spc_threshold_en_BIT_RESET = 1'b0;
localparam CDR_REG1_calib_iteration_BIT_RESET = 1'b0;
localparam CDR_REG1_dynamic_calib_en_BIT_RESET = 1'b0;
localparam CDR_REG2_REG_OFFSET = 8'b10000110;
localparam CDR_REG2_unused_BIT_RESET = 1'b0;
localparam CDR_REG2_hsrx_en_del_BIT_RESET = 1'b0;
localparam CDR_REG2_hsrx_en_del_en_BIT_RESET = 1'b0;
localparam CDR_REG2_hsrx_en_BIT_RESET = 1'b0;
localparam CDR_REG2_hsrx_en_en_BIT_RESET = 1'b0;
localparam CDR_REG2_calib_clock_BIT_RESET = 1'b0;
localparam CDR_REG2_calib_clock_en_BIT_RESET = 1'b0;
localparam CDR_REG2_calib_out_en_BIT_RESET = 1'b0;
localparam CDR_REG3_REG_OFFSET = 8'b10000111;
localparam CDR_REG3_calib_active_BIT_RESET = 1'b0;
localparam CDR_REG3_calib_done_BIT_RESET = 1'b0;
localparam CDR_REG3_calib_code_BIT_RESET = 6'b000000;
localparam CDR_REG4_REG_OFFSET = 8'b10001000;
localparam CDR_REG4_clk_gate_value_BIT_RESET = 1'b0;
localparam CDR_REG4_clk_gate_en_BIT_RESET = 1'b0;
localparam CDR_REG4_clk_gate_sq_mask_BIT_RESET = 1'b0;
localparam CDR_REG4_latency_threshold_BIT_RESET = 2'b00;
localparam CDR_REG4_latency_threshold_en_BIT_RESET = 1'b0;
localparam CDR_REG4_decision_error_en_BIT_RESET = 1'b0;
localparam CDR_REG4_filter_en_BIT_RESET = 1'b0;
localparam CDR_REG5_REG_OFFSET = 8'b10001001;
localparam CDR_REG5_unused_BIT_RESET = 5'b00000;
localparam CDR_REG5_sample_5x_en_BIT_RESET = 1'b0;
localparam CDR_REG5_small_pulse_BIT_RESET = 1'b0;
localparam CDR_REG5_small_pulse_en_BIT_RESET = 1'b0;
localparam CDR_REG6_REG_OFFSET = 8'b10001010;
localparam CDR_REG6_unused_BIT_RESET = 8'b00000000;
localparam CDR_REG7_REG_OFFSET = 8'b10001011;
localparam CDR_REG7_unused_BIT_RESET = 8'b00000000;
localparam CDR_REG8_REG_OFFSET = 8'b10001100;
localparam CDR_REG8_unused_BIT_RESET = 8'b00000000;
localparam RX_REG2_REG_OFFSET = 8'b10001101;
localparam RX_REG2_eb_error_BIT_RESET = 1'b0;
localparam RX_REG2_cdr_error_BIT_RESET = 1'b0;
localparam RX_REG2_sync_detected_BIT_RESET = 1'b0;
localparam RX_REG2_eop_detected_BIT_RESET = 1'b0;
localparam RX_REG2_hs_eop_condition_BIT_RESET = 1'b0;
localparam RX_REG2_normal_eop_BIT_RESET = 1'b0;
localparam RX_REG2_alignment_error_BIT_RESET = 1'b0;
localparam RX_REG2_no_eop_BIT_RESET = 1'b0;
localparam RX_REG3_REG_OFFSET = 8'b10001110;
localparam RX_REG3_hs_eop_detected_BIT_RESET = 1'b0;
localparam RX_REG3_se0_validated_BIT_RESET = 1'b0;
localparam RX_REG3_lsfs_eop_detected_BIT_RESET = 1'b0;
localparam RX_REG3_bit_unstuff_error_BIT_RESET = 1'b0;
localparam RX_REG3_rx_state_bitunstuff_BIT_RESET = 3'b000;
localparam RX_REG3_start_flag_BIT_RESET = 1'b0;
localparam RX_REG4_REG_OFFSET = 8'b10001111;
localparam RX_REG4_rxactive_reg_BIT_RESET = 1'b0;
localparam RX_REG4_deassert_rxactive_reg_BIT_RESET = 1'b0;
localparam RX_REG4_unused_BIT_RESET = 6'b000000;
localparam RX_REG5_REG_OFFSET = 8'b10010000;
localparam RX_REG5_sie_cnt_upper_BIT_RESET = 8'b00000000;
localparam RX_REG6_REG_OFFSET = 8'b10010001;
localparam RX_REG6_phy_cnt_upper_BIT_RESET = 8'b00000000;
localparam RX_REG7_REG_OFFSET = 8'b10010010;
localparam RX_REG7_phy_cnt_lower_BIT_RESET = 4'b0000;
localparam RX_REG7_sie_cnt_lower_BIT_RESET = 4'b0000;
localparam TX_REG2_REG_OFFSET = 8'b10010011;
localparam TX_REG2_tx_hs_state_BIT_RESET = 4'b0000;
localparam TX_REG2_eop_transmitted_BIT_RESET = 1'b0;
localparam TX_REG2_hs_bitstuff_en_BIT_RESET = 1'b0;
localparam TX_REG2_resume_eop_BIT_RESET = 1'b0;
localparam TX_REG2_remote_wakeup_BIT_RESET = 1'b0;
localparam TX_REG3_REG_OFFSET = 8'b10010100;
localparam TX_REG3_tx_lsfs_state_BIT_RESET = 4'b0000;
localparam TX_REG3_pd_state_BIT_RESET = 3'b000;
localparam TX_REG3_preamble_sent_BIT_RESET = 1'b0;
localparam TX_REG4_REG_OFFSET = 8'b10010101;
localparam TX_REG4_unused_BIT_RESET = 6'b000000;
localparam TX_REG4_lsfs_bitstuff_en_BIT_RESET = 1'b0;
localparam TX_REG4_ls_keep_alive_BIT_RESET = 1'b0;
localparam CDR_REG9_REG_OFFSET = 8'b10010110;
localparam CDR_REG9_UNUSED_BIT_RESET = 5'b00000;
localparam CDR_REG9_i_ana_comp_out_BIT_RESET = 1'b0;
localparam CDR_REG9_sampler_calib_done_BIT_RESET = 1'b0;
localparam CDR_REG9_ana_calib_active_BIT_RESET = 1'b0;
localparam CDR_REG10_REG_OFFSET = 8'b10010111;
localparam CDR_REG10_unused_BIT_RESET = 2'b00;
localparam CDR_REG10_calib_code_BIT_RESET = 6'b000000;
localparam CDR_REG11_REG_OFFSET = 8'b10011000;
localparam CDR_REG11_small_pulse_BIT_RESET = 4'b0000;
localparam CDR_REG11_o_hsrx_rec_dicision_error_BIT_RESET = 1'b0;
localparam CDR_REG11_o_ana_clk_gate_BIT_RESET = 1'b0;
localparam CDR_REG11_receive_start_BIT_RESET = 1'b0;
localparam CDR_REG11_i_ana_ted_squelch_BIT_RESET = 1'b0;
localparam CDR_RE12_REG_OFFSET = 8'b10011001;
localparam CDR_RE12_unused_BIT_RESET = 8'b00000000;
localparam DIG_TXRX_UNUSED_REG0_REG_OFFSET = 8'b10011010;
localparam DIG_TXRX_UNUSED_REG0_unused_BIT_RESET = 8'b00000000;
localparam DIG_TXRX_UNUSED_REG1_REG_OFFSET = 8'b10011011;
localparam DIG_TXRX_UNUSED_REG1_unused_BIT_RESET = 8'b00000000;
localparam DIG_TXRX_UNUSED_REG2_REG_OFFSET = 8'b10011100;
localparam DIG_TXRX_UNUSED_REG2_unused_BIT_RESET = 8'b00000000;
localparam DIG_TXRX_UNUSED_REG3_REG_OFFSET = 8'b10011101;
localparam DIG_TXRX_UNUSED_REG3_unused_BIT_RESET = 8'b00000000;
always @(posedge PCLK or negedge PRESETn)
begin
if(!PRESETn)
  begin
    RX_REG0_fsls_no_eop_timeout        <= RX_REG0_fsls_no_eop_timeout_BIT_RESET;
    RX_REG0_fsls_timeout_en            <= RX_REG0_fsls_timeout_en_BIT_RESET;
    RX_REG0_hs_sync_det_bits           <= RX_REG0_hs_sync_det_bits_BIT_RESET;
    RX_REG0_fs_eop_se0_threshold       <= RX_REG0_fs_eop_se0_threshold_BIT_RESET;
    RX_REG0_fs_eop_se0_en              <= RX_REG0_fs_eop_se0_en_BIT_RESET;
    RX_REG1_ls_eop_se0_threshold       <= RX_REG1_ls_eop_se0_threshold_BIT_RESET;
    RX_REG1_ls_eop_se0_en              <= RX_REG1_ls_eop_se0_en_BIT_RESET;
    RX_REG1_fs_no_eop_timeout_en       <= RX_REG1_fs_no_eop_timeout_en_BIT_RESET;
    TX_REG0_unused                     <= TX_REG0_unused_BIT_RESET;
    TX_REG0_fs_preamble_en             <= TX_REG0_fs_preamble_en_BIT_RESET;
    TX_REG0_sof_extension              <= TX_REG0_sof_extension_BIT_RESET;
    TX_REG0_sof_extension_en           <= TX_REG0_sof_extension_en_BIT_RESET;
    TX_REG1_preamble_value             <= TX_REG1_preamble_value_BIT_RESET;
    CDR_REG0_unused                    <= CDR_REG0_unused_BIT_RESET;
    CDR_REG0_pll_clkdiv                <= CDR_REG0_pll_clkdiv_BIT_RESET;
    CDR_REG0_pll_clkdiv_en             <= CDR_REG0_pll_clkdiv_en_BIT_RESET;
    CDR_REG0_squelch_delay             <= CDR_REG0_squelch_delay_BIT_RESET;
    CDR_REG0_squelch_delay_en          <= CDR_REG0_squelch_delay_en_BIT_RESET;
    CDR_REG1_unused                    <= CDR_REG1_unused_BIT_RESET;
    CDR_REG1_calib_comp_out            <= CDR_REG1_calib_comp_out_BIT_RESET;
    CDR_REG1_calib_spc_threshold       <= CDR_REG1_calib_spc_threshold_BIT_RESET;
    CDR_REG1_calib_spc_threshold_en    <= CDR_REG1_calib_spc_threshold_en_BIT_RESET;
    CDR_REG1_calib_iteration           <= CDR_REG1_calib_iteration_BIT_RESET;
    CDR_REG1_dynamic_calib_en          <= CDR_REG1_dynamic_calib_en_BIT_RESET;
    CDR_REG2_unused                    <= CDR_REG2_unused_BIT_RESET;
    CDR_REG2_hsrx_en_del               <= CDR_REG2_hsrx_en_del_BIT_RESET;
    CDR_REG2_hsrx_en_del_en            <= CDR_REG2_hsrx_en_del_en_BIT_RESET;
    CDR_REG2_hsrx_en                   <= CDR_REG2_hsrx_en_BIT_RESET;
    CDR_REG2_hsrx_en_en                <= CDR_REG2_hsrx_en_en_BIT_RESET;
    CDR_REG2_calib_clock               <= CDR_REG2_calib_clock_BIT_RESET;
    CDR_REG2_calib_clock_en            <= CDR_REG2_calib_clock_en_BIT_RESET;
    CDR_REG2_calib_out_en              <= CDR_REG2_calib_out_en_BIT_RESET;
    CDR_REG3_calib_active              <= CDR_REG3_calib_active_BIT_RESET;
    CDR_REG3_calib_done                <= CDR_REG3_calib_done_BIT_RESET;
    CDR_REG3_calib_code                <= CDR_REG3_calib_code_BIT_RESET;
    CDR_REG4_clk_gate_value            <= CDR_REG4_clk_gate_value_BIT_RESET;
    CDR_REG4_clk_gate_en               <= CDR_REG4_clk_gate_en_BIT_RESET;
    CDR_REG4_clk_gate_sq_mask          <= CDR_REG4_clk_gate_sq_mask_BIT_RESET;
    CDR_REG4_latency_threshold         <= CDR_REG4_latency_threshold_BIT_RESET;
    CDR_REG4_latency_threshold_en      <= CDR_REG4_latency_threshold_en_BIT_RESET;
    CDR_REG4_decision_error_en         <= CDR_REG4_decision_error_en_BIT_RESET;
    CDR_REG4_filter_en                 <= CDR_REG4_filter_en_BIT_RESET;
    CDR_REG5_unused                    <= CDR_REG5_unused_BIT_RESET;
    CDR_REG5_sample_5x_en              <= CDR_REG5_sample_5x_en_BIT_RESET;
    CDR_REG5_small_pulse               <= CDR_REG5_small_pulse_BIT_RESET;
    CDR_REG5_small_pulse_en            <= CDR_REG5_small_pulse_en_BIT_RESET;
    CDR_REG6_unused                    <= CDR_REG6_unused_BIT_RESET;
    CDR_REG7_unused                    <= CDR_REG7_unused_BIT_RESET;
    CDR_REG8_unused                    <= CDR_REG8_unused_BIT_RESET;
    DIG_TXRX_UNUSED_REG0_unused        <= DIG_TXRX_UNUSED_REG0_unused_BIT_RESET;
    DIG_TXRX_UNUSED_REG1_unused        <= DIG_TXRX_UNUSED_REG1_unused_BIT_RESET;
    DIG_TXRX_UNUSED_REG2_unused        <= DIG_TXRX_UNUSED_REG2_unused_BIT_RESET;
    DIG_TXRX_UNUSED_REG3_unused        <= DIG_TXRX_UNUSED_REG3_unused_BIT_RESET;
  end
else  
  begin
    if ((PSELx == 1'b1) && (PWRITE == 1'b1) )
    begin  
      case (PADDR[7:0])
        RX_REG0_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            RX_REG0_fsls_no_eop_timeout[2:0] <= PWDATA[7:5];
            RX_REG0_fsls_timeout_en    <= PWDATA[4];
            RX_REG0_hs_sync_det_bits   <= PWDATA[3];
            RX_REG0_fs_eop_se0_threshold[1:0] <= PWDATA[2:1];
            RX_REG0_fs_eop_se0_en      <= PWDATA[0];
          end
        RX_REG1_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            RX_REG1_ls_eop_se0_threshold[5:0] <= PWDATA[7:2];
            RX_REG1_ls_eop_se0_en      <= PWDATA[1];
            RX_REG1_fs_no_eop_timeout_en <= PWDATA[0];
          end
        TX_REG0_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            TX_REG0_unused[3:0]        <= PWDATA[7:4];
            TX_REG0_fs_preamble_en     <= PWDATA[3];
            TX_REG0_sof_extension[1:0] <= PWDATA[2:1];
            TX_REG0_sof_extension_en   <= PWDATA[0];
          end
        TX_REG1_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            TX_REG1_preamble_value[7:0] <= PWDATA[7:0];
          end
        CDR_REG0_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            CDR_REG0_unused[1:0]       <= PWDATA[7:6];
            CDR_REG0_pll_clkdiv[1:0]   <= PWDATA[5:4];
            CDR_REG0_pll_clkdiv_en     <= PWDATA[3];
            CDR_REG0_squelch_delay[1:0] <= PWDATA[2:1];
            CDR_REG0_squelch_delay_en  <= PWDATA[0];
          end
        CDR_REG1_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            CDR_REG1_unused            <= PWDATA[7];
            CDR_REG1_calib_comp_out    <= PWDATA[6];
            CDR_REG1_calib_spc_threshold[2:0] <= PWDATA[5:3];
            CDR_REG1_calib_spc_threshold_en <= PWDATA[2];
            CDR_REG1_calib_iteration   <= PWDATA[1];
            CDR_REG1_dynamic_calib_en  <= PWDATA[0];
          end
        CDR_REG2_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            CDR_REG2_unused            <= PWDATA[7];
            CDR_REG2_hsrx_en_del       <= PWDATA[6];
            CDR_REG2_hsrx_en_del_en    <= PWDATA[5];
            CDR_REG2_hsrx_en           <= PWDATA[4];
            CDR_REG2_hsrx_en_en        <= PWDATA[3];
            CDR_REG2_calib_clock       <= PWDATA[2];
            CDR_REG2_calib_clock_en    <= PWDATA[1];
            CDR_REG2_calib_out_en      <= PWDATA[0];
          end
        CDR_REG3_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            CDR_REG3_calib_active      <= PWDATA[7];
            CDR_REG3_calib_done        <= PWDATA[6];
            CDR_REG3_calib_code[5:0]   <= PWDATA[5:0];
          end
        CDR_REG4_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            CDR_REG4_clk_gate_value    <= PWDATA[7];
            CDR_REG4_clk_gate_en       <= PWDATA[6];
            CDR_REG4_clk_gate_sq_mask  <= PWDATA[5];
            CDR_REG4_latency_threshold[1:0] <= PWDATA[4:3];
            CDR_REG4_latency_threshold_en <= PWDATA[2];
            CDR_REG4_decision_error_en <= PWDATA[1];
            CDR_REG4_filter_en         <= PWDATA[0];
          end
        CDR_REG5_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            CDR_REG5_unused[4:0]       <= PWDATA[7:3];
            CDR_REG5_sample_5x_en      <= PWDATA[2];
            CDR_REG5_small_pulse       <= PWDATA[1];
            CDR_REG5_small_pulse_en    <= PWDATA[0];
          end
        CDR_REG6_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            CDR_REG6_unused[7:0]       <= PWDATA[7:0];
          end
        CDR_REG7_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            CDR_REG7_unused[7:0]       <= PWDATA[7:0];
          end
        CDR_REG8_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            CDR_REG8_unused[7:0]       <= PWDATA[7:0];
          end
        DIG_TXRX_UNUSED_REG0_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            DIG_TXRX_UNUSED_REG0_unused[7:0] <= PWDATA[7:0];
          end
        DIG_TXRX_UNUSED_REG1_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            DIG_TXRX_UNUSED_REG1_unused[7:0] <= PWDATA[7:0];
          end
        DIG_TXRX_UNUSED_REG2_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            DIG_TXRX_UNUSED_REG2_unused[7:0] <= PWDATA[7:0];
          end
        DIG_TXRX_UNUSED_REG3_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            DIG_TXRX_UNUSED_REG3_unused[7:0] <= PWDATA[7:0];
          end
        endcase
    end  
  end  
end  
always @(*)
begin
  PRDATA[7:0] = 8'h0;
    if ((PSELx == 1'b1) && (PWRITE == 1'b0))
    begin
      case (PADDR[7:0])
        RX_REG0_REG_OFFSET[7:0]: begin
          PRDATA[7:5] = RX_REG0_fsls_no_eop_timeout[2:0];
          PRDATA[4] = RX_REG0_fsls_timeout_en;
          PRDATA[3] = RX_REG0_hs_sync_det_bits;
          PRDATA[2:1] = RX_REG0_fs_eop_se0_threshold[1:0];
          PRDATA[0] = RX_REG0_fs_eop_se0_en;
        end
        RX_REG1_REG_OFFSET[7:0]: begin
          PRDATA[7:2] = RX_REG1_ls_eop_se0_threshold[5:0];
          PRDATA[1] = RX_REG1_ls_eop_se0_en;
          PRDATA[0] = RX_REG1_fs_no_eop_timeout_en;
        end
        TX_REG0_REG_OFFSET[7:0]: begin
          PRDATA[7:4] = TX_REG0_unused[3:0];
          PRDATA[3] = TX_REG0_fs_preamble_en;
          PRDATA[2:1] = TX_REG0_sof_extension[1:0];
          PRDATA[0] = TX_REG0_sof_extension_en;
        end
        TX_REG1_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = TX_REG1_preamble_value[7:0];
        end
        CDR_REG0_REG_OFFSET[7:0]: begin
          PRDATA[7:6] = CDR_REG0_unused[1:0];
          PRDATA[5:4] = CDR_REG0_pll_clkdiv[1:0];
          PRDATA[3] = CDR_REG0_pll_clkdiv_en;
          PRDATA[2:1] = CDR_REG0_squelch_delay[1:0];
          PRDATA[0] = CDR_REG0_squelch_delay_en;
        end
        CDR_REG1_REG_OFFSET[7:0]: begin
          PRDATA[7] = CDR_REG1_unused;
          PRDATA[6] = CDR_REG1_calib_comp_out;
          PRDATA[5:3] = CDR_REG1_calib_spc_threshold[2:0];
          PRDATA[2] = CDR_REG1_calib_spc_threshold_en;
          PRDATA[1] = CDR_REG1_calib_iteration;
          PRDATA[0] = CDR_REG1_dynamic_calib_en;
        end
        CDR_REG2_REG_OFFSET[7:0]: begin
          PRDATA[7] = CDR_REG2_unused;
          PRDATA[6] = CDR_REG2_hsrx_en_del;
          PRDATA[5] = CDR_REG2_hsrx_en_del_en;
          PRDATA[4] = CDR_REG2_hsrx_en;
          PRDATA[3] = CDR_REG2_hsrx_en_en;
          PRDATA[2] = CDR_REG2_calib_clock;
          PRDATA[1] = CDR_REG2_calib_clock_en;
          PRDATA[0] = CDR_REG2_calib_out_en;
        end
        CDR_REG3_REG_OFFSET[7:0]: begin
          PRDATA[7] = CDR_REG3_calib_active;
          PRDATA[6] = CDR_REG3_calib_done;
          PRDATA[5:0] = CDR_REG3_calib_code[5:0];
        end
        CDR_REG4_REG_OFFSET[7:0]: begin
          PRDATA[7] = CDR_REG4_clk_gate_value;
          PRDATA[6] = CDR_REG4_clk_gate_en;
          PRDATA[5] = CDR_REG4_clk_gate_sq_mask;
          PRDATA[4:3] = CDR_REG4_latency_threshold[1:0];
          PRDATA[2] = CDR_REG4_latency_threshold_en;
          PRDATA[1] = CDR_REG4_decision_error_en;
          PRDATA[0] = CDR_REG4_filter_en;
        end
        CDR_REG5_REG_OFFSET[7:0]: begin
          PRDATA[7:3] = CDR_REG5_unused[4:0];
          PRDATA[2] = CDR_REG5_sample_5x_en;
          PRDATA[1] = CDR_REG5_small_pulse;
          PRDATA[0] = CDR_REG5_small_pulse_en;
        end
        CDR_REG6_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = CDR_REG6_unused[7:0];
        end
        CDR_REG7_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = CDR_REG7_unused[7:0];
        end
        CDR_REG8_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = CDR_REG8_unused[7:0];
        end
        RX_REG2_REG_OFFSET[7:0]: begin
          PRDATA[7] = RX_REG2_eb_error_IN;
          PRDATA[6] = RX_REG2_cdr_error_IN;
          PRDATA[5] = RX_REG2_sync_detected_IN;
          PRDATA[4] = RX_REG2_eop_detected_IN;
          PRDATA[3] = RX_REG2_hs_eop_condition_IN;
          PRDATA[2] = RX_REG2_normal_eop_IN;
          PRDATA[1] = RX_REG2_alignment_error_IN;
          PRDATA[0] = RX_REG2_no_eop_IN;
        end
        RX_REG3_REG_OFFSET[7:0]: begin
          PRDATA[7] = RX_REG3_hs_eop_detected_IN;
          PRDATA[6] = RX_REG3_se0_validated_IN;
          PRDATA[5] = RX_REG3_lsfs_eop_detected_IN;
          PRDATA[4] = RX_REG3_bit_unstuff_error_IN;
          PRDATA[3:1] = RX_REG3_rx_state_bitunstuff_IN[2:0];
          PRDATA[0] = RX_REG3_start_flag_IN;
        end
        RX_REG4_REG_OFFSET[7:0]: begin
          PRDATA[7] = RX_REG4_rxactive_reg_IN;
          PRDATA[6] = RX_REG4_deassert_rxactive_reg_IN;
          PRDATA[5:0] = RX_REG4_unused_IN[5:0];
        end
        RX_REG5_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = RX_REG5_sie_cnt_upper_IN[7:0];
        end
        RX_REG6_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = RX_REG6_phy_cnt_upper_IN[7:0];
        end
        RX_REG7_REG_OFFSET[7:0]: begin
          PRDATA[7:4] = RX_REG7_phy_cnt_lower_IN[3:0];
          PRDATA[3:0] = RX_REG7_sie_cnt_lower_IN[3:0];
        end
        TX_REG2_REG_OFFSET[7:0]: begin
          PRDATA[7:4] = TX_REG2_tx_hs_state_IN[3:0];
          PRDATA[3] = TX_REG2_eop_transmitted_IN;
          PRDATA[2] = TX_REG2_hs_bitstuff_en_IN;
          PRDATA[1] = TX_REG2_resume_eop_IN;
          PRDATA[0] = TX_REG2_remote_wakeup_IN;
        end
        TX_REG3_REG_OFFSET[7:0]: begin
          PRDATA[7:4] = TX_REG3_tx_lsfs_state_IN[3:0];
          PRDATA[3:1] = TX_REG3_pd_state_IN[2:0];
          PRDATA[0] = TX_REG3_preamble_sent_IN;
        end
        TX_REG4_REG_OFFSET[7:0]: begin
          PRDATA[7:2] = TX_REG4_unused_IN[5:0];
          PRDATA[1] = TX_REG4_lsfs_bitstuff_en_IN;
          PRDATA[0] = TX_REG4_ls_keep_alive_IN;
        end
        CDR_REG9_REG_OFFSET[7:0]: begin
          PRDATA[7:3] = CDR_REG9_UNUSED_IN[4:0];
          PRDATA[2] = CDR_REG9_i_ana_comp_out_IN;
          PRDATA[1] = CDR_REG9_sampler_calib_done_IN;
          PRDATA[0] = CDR_REG9_ana_calib_active_IN;
        end
        CDR_REG10_REG_OFFSET[7:0]: begin
          PRDATA[7:6] = CDR_REG10_unused_IN[1:0];
          PRDATA[5:0] = CDR_REG10_calib_code_IN[5:0];
        end
        CDR_REG11_REG_OFFSET[7:0]: begin
          PRDATA[7:4] = CDR_REG11_small_pulse_IN[3:0];
          PRDATA[3] = CDR_REG11_o_hsrx_rec_dicision_error_IN;
          PRDATA[2] = CDR_REG11_o_ana_clk_gate_IN;
          PRDATA[1] = CDR_REG11_receive_start_IN;
          PRDATA[0] = CDR_REG11_i_ana_ted_squelch_IN;
        end
        CDR_RE12_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = CDR_RE12_unused_IN[7:0];
        end
        DIG_TXRX_UNUSED_REG0_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = DIG_TXRX_UNUSED_REG0_unused[7:0];
        end
        DIG_TXRX_UNUSED_REG1_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = DIG_TXRX_UNUSED_REG1_unused[7:0];
        end
        DIG_TXRX_UNUSED_REG2_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = DIG_TXRX_UNUSED_REG2_unused[7:0];
        end
        DIG_TXRX_UNUSED_REG3_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = DIG_TXRX_UNUSED_REG3_unused[7:0];
        end
       default:
          PRDATA = 8'h0;
      endcase
    end  
end  
assign RX_REG0_fsls_no_eop_timeout_OUT[2:0] = RX_REG0_fsls_no_eop_timeout[2:0];
assign RX_REG0_fsls_timeout_en_OUT     = RX_REG0_fsls_timeout_en;
assign RX_REG0_hs_sync_det_bits_OUT    = RX_REG0_hs_sync_det_bits;
assign RX_REG0_fs_eop_se0_threshold_OUT[1:0] = RX_REG0_fs_eop_se0_threshold[1:0];
assign RX_REG0_fs_eop_se0_en_OUT       = RX_REG0_fs_eop_se0_en;
assign RX_REG1_ls_eop_se0_threshold_OUT[5:0] = RX_REG1_ls_eop_se0_threshold[5:0];
assign RX_REG1_ls_eop_se0_en_OUT       = RX_REG1_ls_eop_se0_en;
assign RX_REG1_fs_no_eop_timeout_en_OUT = RX_REG1_fs_no_eop_timeout_en;
assign TX_REG0_unused_OUT[3:0]         = TX_REG0_unused[3:0];
assign TX_REG0_fs_preamble_en_OUT      = TX_REG0_fs_preamble_en;
assign TX_REG0_sof_extension_OUT[1:0]  = TX_REG0_sof_extension[1:0];
assign TX_REG0_sof_extension_en_OUT    = TX_REG0_sof_extension_en;
assign TX_REG1_preamble_value_OUT[7:0] = TX_REG1_preamble_value[7:0];
assign CDR_REG0_unused_OUT[1:0]        = CDR_REG0_unused[1:0];
assign CDR_REG0_pll_clkdiv_OUT[1:0]    = CDR_REG0_pll_clkdiv[1:0];
assign CDR_REG0_pll_clkdiv_en_OUT      = CDR_REG0_pll_clkdiv_en;
assign CDR_REG0_squelch_delay_OUT[1:0] = CDR_REG0_squelch_delay[1:0];
assign CDR_REG0_squelch_delay_en_OUT   = CDR_REG0_squelch_delay_en;
assign CDR_REG1_unused_OUT             = CDR_REG1_unused;
assign CDR_REG1_calib_comp_out_OUT     = CDR_REG1_calib_comp_out;
assign CDR_REG1_calib_spc_threshold_OUT[2:0] = CDR_REG1_calib_spc_threshold[2:0];
assign CDR_REG1_calib_spc_threshold_en_OUT = CDR_REG1_calib_spc_threshold_en;
assign CDR_REG1_calib_iteration_OUT    = CDR_REG1_calib_iteration;
assign CDR_REG1_dynamic_calib_en_OUT   = CDR_REG1_dynamic_calib_en;
assign CDR_REG2_unused_OUT             = CDR_REG2_unused;
assign CDR_REG2_hsrx_en_del_OUT        = CDR_REG2_hsrx_en_del;
assign CDR_REG2_hsrx_en_del_en_OUT     = CDR_REG2_hsrx_en_del_en;
assign CDR_REG2_hsrx_en_OUT            = CDR_REG2_hsrx_en;
assign CDR_REG2_hsrx_en_en_OUT         = CDR_REG2_hsrx_en_en;
assign CDR_REG2_calib_clock_OUT        = CDR_REG2_calib_clock;
assign CDR_REG2_calib_clock_en_OUT     = CDR_REG2_calib_clock_en;
assign CDR_REG2_calib_out_en_OUT       = CDR_REG2_calib_out_en;
assign CDR_REG3_calib_active_OUT       = CDR_REG3_calib_active;
assign CDR_REG3_calib_done_OUT         = CDR_REG3_calib_done;
assign CDR_REG3_calib_code_OUT[5:0]    = CDR_REG3_calib_code[5:0];
assign CDR_REG4_clk_gate_value_OUT     = CDR_REG4_clk_gate_value;
assign CDR_REG4_clk_gate_en_OUT        = CDR_REG4_clk_gate_en;
assign CDR_REG4_clk_gate_sq_mask_OUT   = CDR_REG4_clk_gate_sq_mask;
assign CDR_REG4_latency_threshold_OUT[1:0] = CDR_REG4_latency_threshold[1:0];
assign CDR_REG4_latency_threshold_en_OUT = CDR_REG4_latency_threshold_en;
assign CDR_REG4_decision_error_en_OUT  = CDR_REG4_decision_error_en;
assign CDR_REG4_filter_en_OUT          = CDR_REG4_filter_en;
assign CDR_REG5_unused_OUT[4:0]        = CDR_REG5_unused[4:0];
assign CDR_REG5_sample_5x_en_OUT       = CDR_REG5_sample_5x_en;
assign CDR_REG5_small_pulse_OUT        = CDR_REG5_small_pulse;
assign CDR_REG5_small_pulse_en_OUT     = CDR_REG5_small_pulse_en;
assign CDR_REG6_unused_OUT[7:0]        = CDR_REG6_unused[7:0];
assign CDR_REG7_unused_OUT[7:0]        = CDR_REG7_unused[7:0];
assign CDR_REG8_unused_OUT[7:0]        = CDR_REG8_unused[7:0];
assign DIG_TXRX_UNUSED_REG0_unused_OUT[7:0] = DIG_TXRX_UNUSED_REG0_unused[7:0];
assign DIG_TXRX_UNUSED_REG1_unused_OUT[7:0] = DIG_TXRX_UNUSED_REG1_unused[7:0];
assign DIG_TXRX_UNUSED_REG2_unused_OUT[7:0] = DIG_TXRX_UNUSED_REG2_unused[7:0];
assign DIG_TXRX_UNUSED_REG3_unused_OUT[7:0] = DIG_TXRX_UNUSED_REG3_unused[7:0];
endmodule
module udc_calib_code_gen_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(parameter DEF_OFFSET=6'd 0, parameter p_code_len = 3'd7, parameter rst_code = 5'h10) (
usb2_calib_clock,
usb2_calib_rstn,
udc_bc_calib_rstn,
store_rescal,
i_usb2_rescal_calib_done,
test_calib,
i_usb2_rescal_calib_code,
posedge_store_calib,
afe_calib_code
);
input 			usb2_calib_clock, usb2_calib_rstn, udc_bc_calib_rstn, store_rescal, i_usb2_rescal_calib_done ;
input 		[p_code_len:0] 	test_calib ;
input 		[p_code_len-2:0] 	i_usb2_rescal_calib_code ;
output			posedge_store_calib ;
output reg 	[p_code_len-2:0]	afe_calib_code ;
wire		test_calib_en_sync, active_calib ;
wire	[p_code_len-1:0]	test_calib_sync ;
wire	[p_code_len-2:0]	overflow_checker ;
wire	[p_code_len-2:0]	overflow_value ;
reg		store_calib, store_calib_d ;
reg	[p_code_len-1:0]	test_calib_sync_reg ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_test_calib_en (
.clock		(usb2_calib_clock) ,
.reset_n	(usb2_calib_rstn) ,
.d_in	        (test_calib[0]) ,
.d_out	        (test_calib_en_sync)
);
assign active_calib = (i_usb2_rescal_calib_done && test_calib_en_sync) || store_rescal ;
always @(posedge usb2_calib_clock or negedge usb2_calib_rstn)
begin
	if(~usb2_calib_rstn)
	begin
		store_calib	<= 1'b 0 ;
		store_calib_d	<= 1'b 0 ;
	end
	else
	begin
		store_calib	<= active_calib ;
		store_calib_d	<= store_calib ;
	end
end
assign posedge_store_calib = store_calib & (~store_calib_d) ;
assign test_calib_sync = test_calib_en_sync ? test_calib[p_code_len:1] : test_calib_sync_reg ;
always @(posedge usb2_calib_clock or negedge usb2_calib_rstn)
begin
	if(~usb2_calib_rstn)
	test_calib_sync_reg	<= {(p_code_len-1){1'b0}}  ;
	else
	test_calib_sync_reg	<= test_calib_sync ;
end
assign overflow_value = {(p_code_len-1){1'b1}}; 
assign overflow_checker = overflow_value - DEF_OFFSET ; 
always @(posedge usb2_calib_clock or negedge udc_bc_calib_rstn)
begin
	if(~udc_bc_calib_rstn)
		afe_calib_code	<= rst_code ;
	else if(posedge_store_calib)
	begin
		if(test_calib_en_sync)
		begin
			if(test_calib_sync_reg[0])
				if((i_usb2_rescal_calib_code - test_calib_sync_reg[p_code_len-1:1]) > i_usb2_rescal_calib_code)  
					afe_calib_code	<= {(p_code_len-1){1'b0}} ;
				else
					afe_calib_code	<= (i_usb2_rescal_calib_code - test_calib_sync_reg[p_code_len-1:1]) ;
			else
				if((i_usb2_rescal_calib_code + test_calib_sync_reg[p_code_len-1:1]) < i_usb2_rescal_calib_code)   
					afe_calib_code	<= overflow_value ;
				else
					afe_calib_code	<= (i_usb2_rescal_calib_code + test_calib_sync_reg[p_code_len-1:1]) ;
		end
		else
		begin
			if (i_usb2_rescal_calib_code > overflow_checker)  
				afe_calib_code	<= overflow_value ;
			else
				afe_calib_code	<= i_usb2_rescal_calib_code + DEF_OFFSET;  
		end
	end
end
endmodule
module usb2_pll_coarse_code_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
		    i_FBDIV,
		    i_PD,			
		    i_REFCLK,		
		    i_DCO_COUNT,
		    i_VCO_SETTLING_TIME,  
		    i_INITIAL_WAIT_TIME,
		    i_TM_FORCE_COARSE_CODE_SEL,
		    i_TM_DISABLE_0P5_LSB_ERROR,
		    i_TM_BIG_JUMP,
		    o_COARSE_CODE1,
		    o_COARSE_CODE,        
		    o_COARSE_DONE,        
		    o_VCO_CNT_WINDOW,     
		    o_RST_FDBK_DIV     
		    );
   parameter p_coarse_code_len =8;
   parameter p_fbdiv_len = 8;
   parameter p_count_len = 13;
   parameter p_num_init_wait_bits = 8;
   parameter p_num_vco_settle_bits = 6;
   input     i_PD;
   input     i_REFCLK;
   input [p_count_len-1:0] i_DCO_COUNT;
   input [p_fbdiv_len-1:0] i_FBDIV;
   input [p_num_vco_settle_bits - 1 :0] i_VCO_SETTLING_TIME; 
   input [p_num_init_wait_bits - 1  :0] i_INITIAL_WAIT_TIME; 
   input   				i_TM_FORCE_COARSE_CODE_SEL;
   input   				i_TM_DISABLE_0P5_LSB_ERROR;
   input   				i_TM_BIG_JUMP;
   output 				o_VCO_CNT_WINDOW;
   output 				o_RST_FDBK_DIV;
   output 				o_COARSE_DONE;
   output [p_coarse_code_len-1:0] 	o_COARSE_CODE1;
   output [p_coarse_code_len-1:0] 	o_COARSE_CODE;
   reg 					o_COARSE_DONE;
   reg [p_coarse_code_len-1:0] 		o_COARSE_CODE1;
   reg [p_coarse_code_len-1:0] 		o_COARSE_CODE;
   reg [4:0] 				r_VCO_CNT_WINDOW;
   reg 					r_SHIFT_COMPARE;
   reg [p_count_len -1 :0] 		r_FDBK_REQ_CNT;
   wire [p_coarse_code_len -1 :0] 	w_COARSE_CODE;
   wire 				w_COARSE_DONE;
   wire					w_FINE_DONE;
   wire					w_coarse_fine_done;
    wire ONE;
   assign ONE = 1'b1;
   always @(posedge i_REFCLK or posedge i_PD)
     if(i_PD)
       begin
	  o_COARSE_DONE <= 1'b0;
       end
     else
       begin
	  if (w_coarse_fine_done == 1'b1)
	    o_COARSE_DONE <= 1'b1;
       end  
   always @(*)
     if (~o_COARSE_DONE)
       o_COARSE_CODE = w_COARSE_CODE;
     else
       o_COARSE_CODE = {{1'b1},{{p_coarse_code_len - 1}{1'b0}}};  
   always @(posedge i_REFCLK or posedge i_PD)
     if(i_PD)
       o_COARSE_CODE1<= {{1'b1},{{p_coarse_code_len - 1}{1'b0}}};
     else
       if(w_coarse_fine_done)
         o_COARSE_CODE1<= w_COARSE_CODE;
   always @(*)
   begin
     if(i_FBDIV <=8'd96)
     begin
       r_VCO_CNT_WINDOW = 5'd17;
       r_FDBK_REQ_CNT = 13'd1632;
     end
     else if(i_FBDIV <=8'd100)
     begin
       r_VCO_CNT_WINDOW = 5'd17;
       r_FDBK_REQ_CNT = 13'd1700;
     end
     else if(i_FBDIV <=8'd120)
     begin
       r_VCO_CNT_WINDOW = 5'd14;
       r_FDBK_REQ_CNT = 13'd1680;
     end
     else
     begin
       r_VCO_CNT_WINDOW = 5'd7;
       r_FDBK_REQ_CNT = 13'd1680;
     end
   end
     always @(*)
       if (i_FBDIV > 8'd63 )       
	 r_SHIFT_COMPARE = 1'b0;
       else	                           
	 r_SHIFT_COMPARE = 1'b1;		
assign w_coarse_fine_done = w_COARSE_DONE & w_FINE_DONE ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_coarse_start_sync (
.clock		(i_REFCLK) ,
.reset_n	(~i_PD) ,
.d_in	        (ONE) ,
.d_out  	(r_COARSE_STRT)
);
usb2_pll_coarse_code_core_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r
#(
	.p_strt_time_len	(p_num_init_wait_bits),
    	.p_stl_time_len		(p_num_vco_settle_bits),
       	.p_num_ref_cycles_len 	(5),			 
       	.p_fbdiv_len 		(p_fbdiv_len),
       	.p_count_len 		(p_count_len),
       	.p_coarse_len 		(5),
       	.p_fine_len 		(4)
)
COARSE_CODE_CORE (
	.i_TM_FORCE_COARSE_CODE_SEL	(i_TM_FORCE_COARSE_CODE_SEL),	 
	.i_TM_DISABLE_0P5_LSB_ERROR	(i_TM_DISABLE_0P5_LSB_ERROR),	 
	.i_TM_BIG_JUMP		        (i_TM_BIG_JUMP),	
	.i_INITIAL_WAIT_TIME 		(i_INITIAL_WAIT_TIME),
	.i_VCO_SETTLING_TIME 		(i_VCO_SETTLING_TIME),
	.i_VCO_CNT_WINDOW 		(r_VCO_CNT_WINDOW),
	.i_REFCLK 			(i_REFCLK),
	.i_COARSE_STRT 			(r_COARSE_STRT),
	.i_SHIFT_COMPARE 		(r_SHIFT_COMPARE),
	.i_PD 				(i_PD),
	.i_FDBK_DIV_REQ_CNT 		(r_FDBK_REQ_CNT),
	.i_VCO_COUNT 			(i_DCO_COUNT),
	.o_VCO_CNT_WINDOW 		(o_VCO_CNT_WINDOW),
	.o_RST_FDBK_DIV 		(o_RST_FDBK_DIV),
	.o_COARSE_DONE 			(w_COARSE_DONE),
	.o_FINE_DONE 			(w_FINE_DONE),
	.o_COARSE_CODE			(w_COARSE_CODE)
);
endmodule  
module gen_timer_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r 
#( 
   parameter
      BIT_WIDTH      = 8,              
      RESET_VALUE    = 8'b0000_0000    
)
(
   input                  clock,       
   input                  reset_n,     
   input                  load,        
   input  [BIT_WIDTH-1:0] load_val,
   input                  count,       
   output reg             zero         
);
   reg [BIT_WIDTH-1:0] gen_timer_reg;
   always @(posedge clock or negedge reset_n)
   begin
      if (!reset_n)
         gen_timer_reg <= RESET_VALUE;
      else
      begin
         if (load)
            gen_timer_reg <= load_val;
         else if (count)
            if (zero)
               gen_timer_reg <= {BIT_WIDTH{1'b0}};
            else
               gen_timer_reg <= gen_timer_reg - {{BIT_WIDTH-1{1'b0}}, 1'b1};
         else
            gen_timer_reg <= gen_timer_reg;
      end
   end
   always @(posedge clock or negedge reset_n)
   begin
      if (!reset_n)
         zero <= !(|(RESET_VALUE));
      else
      begin
         if (load)
            zero <= !(|(load_val));
         else if (count)
            if (gen_timer_reg == {{BIT_WIDTH-1{1'b0}}, 1'b1})
               zero <= 1'b1;
            else
               zero <= zero;
         else
            zero <= zero;
      end
   end
endmodule
module udc_car_ats_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
scan_en,                   
i_pll_lock_ana,            
i_pll_pso,                 
i_pll_standby,             
scan_reset,                
scan_ats_mode,             
scan_mode,                 
scan_en_cg,                
scan_mode_sel,             
scan_clock,                
clkdiv_soft_reset,         
refclock,		   
i_ats_pll_highfreq_clk,    
i_ats_pll_clk,             
i_ats_pll_rx_clk,          
pll_startloop,             
pll_pfd_pd,                
i_pll_fbdiv,	           
i_pll_ipdiv,               
i_bg_powergood_ats,            
pll_vco_cnt_window,        
test_vco_pll_clock_gate_ovr,
test_dig_div_refclock_gate_ovr,
test_fb_clock_gate_ovr,
test_ana_div_refclock_gate_ovr,
rstn_ats_clkdiv,	   
o_div_refclock,            
o_dig_div_refclock,        
o_vco_pll_clk,             
o_fb_clk,                  
o_scan_ats_hsclock,        
o_scan_ats_hssiclock,      
o_scan_ats_sieclock	   
);
input scan_en, i_ats_pll_highfreq_clk, pll_vco_cnt_window, pll_startloop, i_ats_pll_clk, i_ats_pll_rx_clk, pll_pfd_pd,
      scan_en_cg, scan_reset, scan_mode, refclock, scan_ats_mode, clkdiv_soft_reset, scan_clock, scan_mode_sel,
      i_pll_lock_ana, i_bg_powergood_ats, i_pll_pso, i_pll_standby;
input [7:0] i_pll_fbdiv;
input [4:0] i_pll_ipdiv;
input test_vco_pll_clock_gate_ovr, test_dig_div_refclock_gate_ovr, test_fb_clock_gate_ovr, test_ana_div_refclock_gate_ovr;
output o_div_refclock,o_dig_div_refclock, o_fb_clk, o_vco_pll_clk, o_scan_ats_hsclock, o_scan_ats_hssiclock, o_scan_ats_sieclock, rstn_ats_clkdiv;
reg [2:0] clkdiv;
reg       o_scan_ats_sieclock, o_scan_ats_hssiclock, pll_gate_d, r_fb_clk, r_div_refclock;
wire scan_mode_sel, scan_en_cg_ats, fb_clk, div_refclock, w_fb_clk_gen;
wire ONE;
assign ONE = 1'b1;
parameter RESET_ZERO = 1'b 0 ;
assign scan_saf_mode = scan_mode & ~scan_ats_mode;
assign scan_en_cg_ats = scan_en_cg & ~scan_ats_mode;
clock_div_prog_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.DIV_CTRL_WIDTH(8)) c_fb_clock_div (
.clock_div_sel           (i_pll_fbdiv),
.clock_in                (i_ats_pll_clk),
.clock_div_out           (o_fb_clk_gen),
.reset_in_n              (pll_startloop),
.reset_out_n             (pll_startloop_sync),
.upstream_reset_in_n     (ONE),
.scan_reset_in_n         (scan_reset),
.scan_mode_en_in         (scan_saf_mode)
);
clock_div_prog_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.DIV_CTRL_WIDTH(5)) c_ip_clock_div (
.clock_div_sel           (i_pll_ipdiv),
.clock_in                (refclock),
.clock_div_out           (div_refclock_gen),
.reset_in_n              (rstn_ats_clkdiv),
.reset_out_n             (),
.upstream_reset_in_n     (ONE),
.scan_reset_in_n         (scan_reset),
.scan_mode_en_in         (scan_saf_mode)
);
assign w_fb_clk_gen = scan_saf_mode ? 1'b0 : o_fb_clk_gen;
assign w_div_refclock_gen = scan_saf_mode ? 1'b0 : div_refclock_gen;
always @(posedge i_ats_pll_clk or negedge pll_startloop_sync)
begin
	if(~pll_startloop_sync)
		r_fb_clk    <= 1'b 0 ;
	else
		r_fb_clk    <= w_fb_clk_gen ;
end
always @(posedge refclock or negedge rstn_ats_clkdiv)
begin
	if(~rstn_ats_clkdiv)
		r_div_refclock	    <= 1'b 0 ;
	else
		r_div_refclock	    <= w_div_refclock_gen ;
end
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b1)) c_pll_pfd_pd_sync (
.clock		(i_ats_pll_clk) ,
.reset_n	(rstn_ats_clkdiv) ,
.d_in	        (pll_pfd_pd) ,
.d_out	        (pll_pfd_pd_sync)
);
assign div_refclock_ana_clk_en = test_ana_div_refclock_gate_ovr | ~pll_pfd_pd;
clk_gating_cell_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_SYNC_FLOPS(0)) c_div_refclock_ana_clk_gate (
.reset_n (rstn_ats_clkdiv),
.en (div_refclock_ana_clk_en),
.scanen (scan_en_cg_ats),
.clk_in (div_refclock),
.en_synced (),
.en_ack (),
.clk_out (o_div_refclock)
);
assign fb_clk_ana_clk_en = test_fb_clock_gate_ovr | ~pll_pfd_pd_sync;
clk_gating_cell_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_SYNC_FLOPS(0)) c_fb_clk_ana_clk_gate (
.reset_n (rstn_ats_clkdiv),
.en (fb_clk_ana_clk_en),
.scanen (scan_en_cg_ats),
.clk_in (fb_clk),
.en_synced (),
.en_ack (),
.clk_out (o_fb_clk)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_div_refclock(
.scan_mode_en_in(scan_saf_mode),
.scan_signal_in(scan_clock),
.fcn_signal_in(r_div_refclock),
.fcn_signal_out(div_refclock)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_fb_clk(
.scan_mode_en_in(scan_saf_mode),
.scan_signal_in(scan_clock),
.fcn_signal_in(r_fb_clk),
.fcn_signal_out(fb_clk)
);
assign pll_gate = scan_ats_mode ? 1'b0 : (i_pll_pso | i_pll_standby); 
always @(posedge div_refclock or negedge rstn_ats_clkdiv)
begin
    if(~rstn_ats_clkdiv)
        pll_gate_d <= 1'b1;
    else
        pll_gate_d <= pll_gate;
end
assign div_refclock_clk_en = test_dig_div_refclock_gate_ovr | ~pll_gate_d;
clk_gating_cell_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_SYNC_FLOPS(0)) c_div_refclock_clk_gate (
.reset_n (rstn_ats_clkdiv),
.en (div_refclock_clk_en),
.scanen (scan_en_cg_ats),
.clk_in (div_refclock),
.en_synced (),
.en_ack (),
.clk_out (o_dig_div_refclock)
);
assign vco_pll_clk_en = test_vco_pll_clock_gate_ovr | pll_vco_cnt_window;
clk_gating_cell_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_vco_pll_clk_gate (
.reset_n (rstn_ats_clkdiv),
.en (vco_pll_clk_en),
.scanen (scan_en_cg_ats),
.clk_in (i_ats_pll_highfreq_clk),
.en_synced (),
.en_ack (),
.clk_out (o_vco_pll_clk)
);
clk_gating_cell_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_ats_hsclock_gate (
.reset_n (rstn_ats_clkgate),
.en (1'b1),
.scanen (scan_en_cg_ats),
.clk_in (i_ats_pll_rx_clk),
.en_synced (),
.en_ack (),
.clk_out (o_scan_ats_hsclock)
);
always @(posedge o_scan_ats_hsclock or negedge rstn_ats_clkgate)
begin
	if(~rstn_ats_clkgate)
		clkdiv <= 3'b000 ;
	else
		clkdiv <= clkdiv +3'b001 ;
end
always @(posedge o_scan_ats_hsclock or negedge rstn_ats_clkgate)
begin
	if(~rstn_ats_clkgate)
            begin
	         o_scan_ats_sieclock  <= 1'b0;
                 o_scan_ats_hssiclock <= 1'b0;
            end
	else
            begin
	         o_scan_ats_sieclock  <= ~clkdiv[2];
                 o_scan_ats_hssiclock <= ~clkdiv[0];
            end
end
assign ats_clkdiv_resetn = (
				(~clkdiv_soft_reset | scan_ats_mode)  &	 
				i_bg_powergood_ats	    	 
			       ) ;
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_ats_clkdiv_resetn(
.scan_mode_en_in(scan_mode_sel),
.scan_signal_in(scan_reset),
.fcn_signal_in(ats_clkdiv_resetn),
.fcn_signal_out(ats_clkdiv_resetn_scan)
);
reset_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_FLOPS(2)) c_ats_clkdiv_resetn (
.sync_clock_in(refclock),     
.reset_in_n(ats_clkdiv_resetn_scan),	    
.reset_out_n(rstn_ats_clkdiv),	    
.upstream_reset_in_n(ONE),
.scan_mode_en_in(scan_mode_sel), 
.scan_reset_in_n(scan_reset)
); 
assign ats_clkgate_resetn = (
				(~clkdiv_soft_reset | scan_ats_mode)  &	 
				i_bg_powergood_ats	    	      &  
				i_pll_lock_ana
			       ) ;
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_ats_clkgate_resetn(
.scan_mode_en_in(scan_mode_sel),
.scan_signal_in(scan_reset),
.fcn_signal_in(ats_clkgate_resetn),
.fcn_signal_out(ats_clkgate_resetn_scan)
);
reset_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_FLOPS(2)) c_ats_clkgate_resetn (
.sync_clock_in(i_ats_pll_rx_clk),     
.reset_in_n(ats_clkgate_resetn_scan),	    
.reset_out_n(rstn_ats_clkgate),	    
.upstream_reset_in_n(ONE),
.scan_mode_en_in(scan_mode_sel), 
.scan_reset_in_n(scan_reset)
); 
endmodule
module usb2_pll_coarse_code_core_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r(
	i_TM_FORCE_COARSE_CODE_SEL,
	i_TM_DISABLE_0P5_LSB_ERROR,
	i_TM_BIG_JUMP,
	i_INITIAL_WAIT_TIME,
	i_VCO_SETTLING_TIME,
	i_VCO_CNT_WINDOW,
	i_REFCLK,
	i_COARSE_STRT,
	i_SHIFT_COMPARE,
	i_PD,
	i_FDBK_DIV_REQ_CNT,
	i_VCO_COUNT,
	o_VCO_CNT_WINDOW,
	o_RST_FDBK_DIV,
	o_COARSE_DONE,
	o_FINE_DONE,
	o_COARSE_CODE
);
parameter p_strt_time_len = 10 ;
parameter p_stl_time_len = 5;
parameter p_num_ref_cycles_len = 5;
parameter p_fbdiv_len = 17;
parameter p_count_len = 19 ;
parameter p_coarse_len = 5;
parameter p_fine_len = 4;
parameter p_code_len = p_fine_len + p_coarse_len;
localparam p_VCO_BIN_SRCH_HALT       = 2'b00;
localparam p_VCO_CNT_EN 	     = 2'b01;
localparam p_VCO_STL_EN 	     = 2'b10;
input 				i_TM_FORCE_COARSE_CODE_SEL;
input				i_TM_DISABLE_0P5_LSB_ERROR;
input				i_TM_BIG_JUMP;
input [p_strt_time_len -1 :0] 	i_INITIAL_WAIT_TIME; 	 
input [p_stl_time_len -1 :0] 	i_VCO_SETTLING_TIME; 
input [p_num_ref_cycles_len -1 :0] i_VCO_CNT_WINDOW; 	 
input			       	i_REFCLK;
input			       	i_COARSE_STRT; 		 
input			       	i_SHIFT_COMPARE; 	 
input			       	i_PD;
input [p_fbdiv_len + p_num_ref_cycles_len-1 :0] i_FDBK_DIV_REQ_CNT;  
input [p_count_len-1:0]        	i_VCO_COUNT; 
output  		       	o_VCO_CNT_WINDOW; 	 
output  		       	o_RST_FDBK_DIV; 	 
output  		       	o_COARSE_DONE; 
output  		       	o_FINE_DONE; 
output [p_code_len -1 :0]      	o_COARSE_CODE;		  
reg [1:0]		       	r_VCO_STATE_INT ;
reg [1:0]		       	r_VCO_NEXT_STATE ;
reg			       	r_COARSE_STRT_HIGH;
reg [p_strt_time_len -1 :0]    	r_INIT_WAIT_CNT;
wire			       	w_INIT_WAIT_DONE;
reg			       	r_INIT_WAIT_DONE_DEL;
reg			       	r_INIT_WAIT_DONE_PULSE;
reg				o_COARSE_DONE;
reg [p_num_ref_cycles_len-1 :0]	r_VCO_CNT_WINDOW_CNT;
wire			       	w_VCO_CNT_WINDOW_out;
wire			       	w_VCO_CNT_WINDOW_CNT_DONE;
reg [p_stl_time_len-1:0]  	r_VCO_SETTLING_TIME;
reg [p_stl_time_len:0]  	r_VCO_STL_WINDOW_CNT;
reg			       	r_VST_TERM_CNT;
reg			       	r_SECOND_CLK_IN_VCO_STL_STATE;
reg			       	r_FIRST_CLK_IN_VCO_STL_STATE;
reg			       	r_RST_FDBK_DIV_LOW;
reg			       	r_RST_FDBK_DIV_LOW_reg;
reg			       	r_RST_FDBK_DIV_out;
reg			       	r_RST_FDBK_DIV_out_neg;
reg [p_code_len -1 :0]      	o_COARSE_CODE;		  
reg			       	r_UP_DOWNB;
reg [p_code_len :0]	       	r_BIN_DECISION_CNT;
wire			       	w_COARSE_SRCH_DONE;
wire			       	w_FINE_SRCH_DONE;
reg [p_code_len -1 :0]         	r_COARSE_CODE_LATCH_INT;
reg [p_code_len -1 :0]         	r_COARSE_CODE_INT;
   reg [p_count_len-1:0] 	  r_ERR_COUNT;
   reg [p_count_len-1:0] 	  r_ERR_COUNT_FLOP;
   reg [p_code_len -1: 0] 	  r_COARSE_CODE_FROM_ERR_FLOPS;
reg				r_GO_LOW;
wire                            w_TM_BIG_JUMP;
always @(posedge i_REFCLK or posedge i_PD)
  	if (i_PD)
    		r_COARSE_STRT_HIGH <= 1'b0;
 	else
    	begin
       		if (w_FINE_SRCH_DONE == 1'b1)
     	 		r_COARSE_STRT_HIGH <= 1'b0;
       		else
     	 		if (i_COARSE_STRT == 1'b1)
     	  			 r_COARSE_STRT_HIGH <= i_COARSE_STRT;
    	end
always @(posedge i_REFCLK or posedge i_PD)
  	if (i_PD)
    	begin
       		r_INIT_WAIT_CNT <= {p_strt_time_len{1'b0}};
       		r_INIT_WAIT_DONE_DEL <= 1'b0;
    	end
  	else
    	begin
       		r_INIT_WAIT_DONE_DEL <= w_INIT_WAIT_DONE;
       		if(w_FINE_SRCH_DONE == 1'b1)
     	 		r_INIT_WAIT_CNT <= {p_strt_time_len{1'b0}};
      		else
     	 		if (r_COARSE_STRT_HIGH == 1'b1 && r_INIT_WAIT_CNT != (i_INITIAL_WAIT_TIME-1'b1))  	     
     	   			r_INIT_WAIT_CNT <= r_INIT_WAIT_CNT + 1;
    	end
assign w_INIT_WAIT_DONE = (r_INIT_WAIT_CNT == (i_INITIAL_WAIT_TIME-1'd1));
always @(*)
begin
     	if (r_VCO_STATE_INT != p_VCO_BIN_SRCH_HALT ) 
       		r_INIT_WAIT_DONE_PULSE = 1'b0;
    	else
       		if( (r_INIT_WAIT_DONE_DEL == 1'b0 ) && (w_INIT_WAIT_DONE == 1'b1 ) )
	 		r_INIT_WAIT_DONE_PULSE = 1'b1;
       		else
	 		r_INIT_WAIT_DONE_PULSE = 1'b0;
end	
always @(posedge i_REFCLK or posedge i_PD)
  	if (i_PD)
    		r_VCO_CNT_WINDOW_CNT <= {p_num_ref_cycles_len{1'b0}};
 	else
    		if ( r_VCO_STATE_INT != p_VCO_CNT_EN )
      			r_VCO_CNT_WINDOW_CNT <= {p_num_ref_cycles_len{1'b0}};
    		else
      			r_VCO_CNT_WINDOW_CNT <=  r_VCO_CNT_WINDOW_CNT + 1'b1;
assign w_VCO_CNT_WINDOW_CNT_DONE =  (r_VCO_CNT_WINDOW_CNT == (i_VCO_CNT_WINDOW - 1'd1));
assign w_VCO_CNT_WINDOW_out = (r_VCO_STATE_INT == p_VCO_CNT_EN);
assign o_VCO_CNT_WINDOW = w_VCO_CNT_WINDOW_out;
always @(*)
   	if (i_SHIFT_COMPARE == 1'b1)
     		r_VCO_SETTLING_TIME = i_VCO_SETTLING_TIME + 1;
   	else
     		r_VCO_SETTLING_TIME = i_VCO_SETTLING_TIME;
always @(posedge i_REFCLK or posedge i_PD)
	if (i_PD)
    	begin
       		r_VCO_STL_WINDOW_CNT <= {p_stl_time_len{1'b0}};
       		r_VST_TERM_CNT <= 1'b0;
    	end
  	else
    		if ( r_VCO_STATE_INT != p_VCO_STL_EN )
      		begin
     	 		r_VCO_STL_WINDOW_CNT <= {p_stl_time_len{1'b0}};
     	 		r_VST_TERM_CNT <= 1'b0;
      		end
    		else
      			if (r_VCO_STL_WINDOW_CNT != (r_VCO_SETTLING_TIME -1'd1))
     			begin
     	   			r_VCO_STL_WINDOW_CNT <=  r_VCO_STL_WINDOW_CNT + 1'b1;
     	   			r_VST_TERM_CNT <= 1'b0;
     			end
      			else
     				r_VST_TERM_CNT <= 1'b1;
always @(posedge i_REFCLK or posedge i_PD)
  	if(i_PD)
    	begin
       		r_FIRST_CLK_IN_VCO_STL_STATE <= 1'b0;
       		r_SECOND_CLK_IN_VCO_STL_STATE <= 1'b0;
       		r_RST_FDBK_DIV_out  <= 1'b1;
       		r_RST_FDBK_DIV_LOW_reg  <= 1'b0;
    	end
	else
    	begin
       		if ((r_VCO_NEXT_STATE == p_VCO_STL_EN)&& (r_VCO_STATE_INT == p_VCO_CNT_EN))
     	 		r_FIRST_CLK_IN_VCO_STL_STATE <= 1'd1;
       		else
     	 		r_FIRST_CLK_IN_VCO_STL_STATE <= 1'd0;
       		r_SECOND_CLK_IN_VCO_STL_STATE <= r_FIRST_CLK_IN_VCO_STL_STATE ;
       		r_RST_FDBK_DIV_LOW_reg   <= r_RST_FDBK_DIV_LOW;
       		r_RST_FDBK_DIV_out   <= r_RST_FDBK_DIV_LOW_reg;
    	end 
always @(*)
     	if (((r_SECOND_CLK_IN_VCO_STL_STATE==1'b1) &&(i_SHIFT_COMPARE==1'b1))
     	 || ((r_FIRST_CLK_IN_VCO_STL_STATE==1'b1) &&(i_SHIFT_COMPARE==1'b0)))
       		r_RST_FDBK_DIV_LOW = 1'b1;
     	else
       		r_RST_FDBK_DIV_LOW = 1'b0;    
always @( negedge i_REFCLK or posedge i_PD)
	if( i_PD)
    		r_RST_FDBK_DIV_out_neg  <= 1'b1;
  	else        
    		r_RST_FDBK_DIV_out_neg   <= r_RST_FDBK_DIV_out;
assign o_RST_FDBK_DIV = (r_RST_FDBK_DIV_out & r_RST_FDBK_DIV_out_neg );
assign o_FINE_DONE = w_FINE_SRCH_DONE;
always @ (posedge i_REFCLK or posedge i_PD)
if(i_PD)
o_COARSE_DONE <= 1'b0;
else if (w_COARSE_SRCH_DONE)
o_COARSE_DONE <= w_COARSE_SRCH_DONE;
assign w_TM_BIG_JUMP = i_TM_BIG_JUMP;
always @(*)
begin
  if(r_BIN_DECISION_CNT[9] == 1'b0 && ((i_VCO_COUNT > 13'd3*(i_FDBK_DIV_REQ_CNT>>2)) && (w_TM_BIG_JUMP == 1'b1) && (i_VCO_COUNT < i_FDBK_DIV_REQ_CNT)))
    r_GO_LOW = 1'b1;
  else
    r_GO_LOW = 1'b0;
end
always @( * )
  	if ( i_VCO_COUNT > i_FDBK_DIV_REQ_CNT)
    		r_UP_DOWNB = 1'b0;
	else
		r_UP_DOWNB = 1'b1;
always @(posedge i_REFCLK or posedge i_PD )
begin
   	if (i_PD)
		r_BIN_DECISION_CNT <= {{1'b1},{p_code_len{1'b0}}};
   	else 
		if ((r_INIT_WAIT_DONE_DEL == 1'b0) && (w_INIT_WAIT_DONE == 1'b1))
    			r_BIN_DECISION_CNT <= {{1'b1},{p_code_len{1'b0}}};
     		else
       			if ((r_RST_FDBK_DIV_LOW_reg  == 1'b1))
	 			r_BIN_DECISION_CNT <= r_BIN_DECISION_CNT >> 1;
end
assign w_FINE_SRCH_DONE =   i_TM_FORCE_COARSE_CODE_SEL ? r_BIN_DECISION_CNT[p_code_len] : r_BIN_DECISION_CNT[0];
assign w_COARSE_SRCH_DONE =  i_TM_FORCE_COARSE_CODE_SEL ? r_BIN_DECISION_CNT[p_code_len] : r_BIN_DECISION_CNT[4];	 
always @( posedge i_REFCLK or posedge i_PD)
  	if (i_PD)
		r_COARSE_CODE_LATCH_INT <= {{(p_coarse_len){1'b0}},{{1'b1},{(p_fine_len-1){1'b0}}}};
	else if ((r_INIT_WAIT_DONE_DEL == 1'b0) && (w_INIT_WAIT_DONE == 1'b1))
		r_COARSE_CODE_LATCH_INT <= {{(p_coarse_len){1'b0}},{{1'b1},{(p_fine_len-1){1'b0}}}};
    	else if((r_UP_DOWNB == 1'b1) && (r_RST_FDBK_DIV_LOW_reg==1'b1))
		r_COARSE_CODE_LATCH_INT <= r_COARSE_CODE_INT;
	else if((r_UP_DOWNB == 1'b0) && (r_RST_FDBK_DIV_LOW_reg==1'b1) && (r_BIN_DECISION_CNT[4] == 1'b1))			 
		r_COARSE_CODE_LATCH_INT <= {r_COARSE_CODE_INT[p_code_len-1:4],1'b0,r_COARSE_CODE_INT[2:0]};		 
always @(*)
       	r_COARSE_CODE_INT = (r_BIN_DECISION_CNT[4] | (r_BIN_DECISION_CNT[8] & r_GO_LOW)) ? r_COARSE_CODE_LATCH_INT : r_COARSE_CODE_LATCH_INT + r_BIN_DECISION_CNT[p_code_len:1];	 
   always @(*)
     if (o_FINE_DONE)
       o_COARSE_CODE = i_TM_DISABLE_0P5_LSB_ERROR ? r_COARSE_CODE_INT : r_COARSE_CODE_FROM_ERR_FLOPS;
     else
       o_COARSE_CODE = r_COARSE_CODE_INT;
always @(*)
case ( r_VCO_STATE_INT )
    	p_VCO_BIN_SRCH_HALT :
      		if( r_INIT_WAIT_DONE_PULSE == 1'b1 ) 
     			r_VCO_NEXT_STATE = p_VCO_CNT_EN;
      		else 
			r_VCO_NEXT_STATE = r_VCO_STATE_INT;
    	p_VCO_CNT_EN :
      		if ( w_VCO_CNT_WINDOW_CNT_DONE == 1)
     			r_VCO_NEXT_STATE = p_VCO_STL_EN;
      		else
     			r_VCO_NEXT_STATE = r_VCO_STATE_INT;
    	p_VCO_STL_EN :
      		if ( r_VST_TERM_CNT == 1)
		begin
			if(w_FINE_SRCH_DONE == 0 )
     			r_VCO_NEXT_STATE = p_VCO_CNT_EN;
      			else
     				r_VCO_NEXT_STATE = p_VCO_BIN_SRCH_HALT;
		end
      		else
     			r_VCO_NEXT_STATE = r_VCO_STATE_INT;
    	default:
      		if( r_INIT_WAIT_DONE_PULSE == 1'b1 ) 
     			r_VCO_NEXT_STATE = p_VCO_CNT_EN;
      		else 
			r_VCO_NEXT_STATE = r_VCO_STATE_INT;
endcase
always @(posedge i_REFCLK or posedge i_PD)
	if (i_PD)
    		r_VCO_STATE_INT <= p_VCO_BIN_SRCH_HALT;
  	else
    		r_VCO_STATE_INT <= r_VCO_NEXT_STATE;
always @(*)
  	if (r_UP_DOWNB)
    		r_ERR_COUNT =  i_FDBK_DIV_REQ_CNT - i_VCO_COUNT;
  	else
    		r_ERR_COUNT =  i_VCO_COUNT - i_FDBK_DIV_REQ_CNT;
always @(posedge i_REFCLK or posedge i_PD)
	if (i_PD)
    	begin
       		r_ERR_COUNT_FLOP <=  {p_count_len{1'b1}};
       		r_COARSE_CODE_FROM_ERR_FLOPS  <= {{1'b1},{(p_code_len-1){1'b0}}};
    	end
    	else if (r_RST_FDBK_DIV_LOW_reg == 1'b1 && (r_ERR_COUNT < r_ERR_COUNT_FLOP))
      	begin
     	 	r_ERR_COUNT_FLOP <= r_ERR_COUNT;
     	 	r_COARSE_CODE_FROM_ERR_FLOPS  <= o_COARSE_CODE;
      	end
endmodule
module hscdr_calib_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r	(
usb2_calib_clock	,
usb2_calib_rstn		,
pll_coarse_code_done	,
i_ana_comp_out		,
scan_mode               ,
scan_sieclock           ,
o_ana_calib_active	,
o_ana_calib_code		,
o_hsrx_sampler_calib_done	,
hsrx_en			,
i_hsrx_en			,
hsrx_en_del		,
hsrx_sampler_calib_done_2d,
i_cdr_reg1		,
i_cdr_reg2		,
i_cdr_reg3		,
o_cdr_reg9		,
o_cdr_reg10		
);
input usb2_calib_clock, usb2_calib_rstn, pll_coarse_code_done, i_ana_comp_out, i_hsrx_en, scan_mode, scan_sieclock ;
input [7:0] i_cdr_reg1, i_cdr_reg2, i_cdr_reg3 ;
output [7:0] o_cdr_reg9, o_cdr_reg10;
output o_ana_calib_active, o_hsrx_sampler_calib_done, hsrx_en, hsrx_sampler_calib_done_2d, hsrx_en_del ;
output [5:0] o_ana_calib_code ;
wire	wait5us_cnt_reached, posedge_wait5us_cnt_reached, assert_calib_active, deassert_calib_active,
	tm_calib_spc_cnt_reached, tm_multiple_calib, iteration_sel, posedge_multiple_calib,
	hsrx_en_del ;
wire [5:0]	ana_calib_code_lev1  ;
wire	w_tiel;
reg	wait5us_cnt_en, wait5us_cnt_reached_d, ana_calib_active, hsrx_sampler_calib_done, 
	hsrx_sampler_calib_done_d, hsrx_sampler_calib_done_2d, tm_calib_spc_trigger, tm_calib_spc_cnt_en, multiple_calib_d,
	hsrx_en_d;
reg [2:0]	tm_calib_spc_cnt, calib_cursor;
wire [2:0]	tm_calib_spc_cnt_threshold;
reg [5:0]	ana_calib_code ;
reg [7:0]	wait5us_cnt ;
reg [4:0]	tm_calib_done_int ;
reg [10:0]	tm_sum_calib_code ;
wire [7:0]	wait5us_threshold;
assign tm_hsrx_en = i_cdr_reg2[3] ;
assign tm_hsrx_en_del = i_cdr_reg2[5] ;
always @(posedge usb2_calib_clock or negedge usb2_calib_rstn)
begin
	if (~usb2_calib_rstn)
	hsrx_en_d	<=	1'b 0 ;
	else
	hsrx_en_d	<=	hsrx_en ;
end
assign hsrx_en = tm_hsrx_en ? i_cdr_reg2[4] : ( ( hsrx_sampler_calib_done_d ) ? i_hsrx_en : pll_coarse_code_done ) ; 
assign hsrx_en_del = tm_hsrx_en_del ? i_cdr_reg2[6] :hsrx_en_d ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_pll_coarse_code_done_sync (
.reset_n(usb2_calib_rstn),
.clock	(usb2_calib_clock),
.d_in	(pll_coarse_code_done),
.d_out	(pll_coarse_code_done_sync)
);
always @(posedge usb2_calib_clock or negedge usb2_calib_rstn)
begin
	if (~usb2_calib_rstn)
	wait5us_cnt_en	<=	1'b 0 ;
	else if (wait5us_cnt_reached)
	wait5us_cnt_en	<=	1'b 0 ;
	else if (pll_coarse_code_done_sync)
	wait5us_cnt_en	<=	1'b 1 ;
end
always @(posedge usb2_calib_clock or negedge usb2_calib_rstn)
begin
	if (~usb2_calib_rstn)
	wait5us_cnt	<=	8'd 0 ;
	else if (wait5us_cnt_en & ~wait5us_cnt_reached)
	wait5us_cnt	<=	wait5us_cnt + 8'd 1 ;
end
assign wait5us_threshold = 8'd3;  
assign wait5us_cnt_reached = (wait5us_cnt == wait5us_threshold) ;
always @(posedge usb2_calib_clock or negedge usb2_calib_rstn)
begin
	if (~usb2_calib_rstn)
	wait5us_cnt_reached_d	<= 1'b 0 ;
	else
	wait5us_cnt_reached_d	<= wait5us_cnt_reached ;
end
assign posedge_wait5us_cnt_reached = wait5us_cnt_reached & (~wait5us_cnt_reached_d) ;
assign assert_calib_active = tm_multiple_calib ? (posedge_wait5us_cnt_reached | tm_calib_spc_cnt_reached) : posedge_wait5us_cnt_reached ;
assign deassert_calib_active = tm_multiple_calib ? (calib_cursor == 3'd 0) : hsrx_sampler_calib_done ;
always @(posedge usb2_calib_clock or negedge usb2_calib_rstn)
begin
	if (~usb2_calib_rstn)
	ana_calib_active	<= 1'b 0 ;
	else if (assert_calib_active)
	ana_calib_active	<= 1'b 1 ;
	else if (deassert_calib_active)
	ana_calib_active	<= 1'b 0 ;
end
always @(posedge usb2_calib_clock or negedge usb2_calib_rstn)
begin
	if (~usb2_calib_rstn)
	tm_calib_done_int	<= 5'd 0 ;
	else if (posedge_multiple_calib)
	tm_calib_done_int	<= iteration_sel ? 5'd 15 : 5'd 7 ;
	else if (calib_cursor == 3'd 1 & (tm_calib_done_int != 5'd 0))
	tm_calib_done_int	<= ( tm_calib_done_int - 5'd 1 ) ;
end	
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_ana_comp_out (
.clock      (usb2_calib_clock),
.reset_n    (usb2_calib_rstn),
.d_in	    (i_cdr_reg1[6]),
.d_out	    (tm_ana_comp_override)
);
assign ana_comp_out = tm_ana_comp_override ? ~i_ana_comp_out : i_ana_comp_out ;
assign tm_calib_clock = i_cdr_reg2[2] ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_clock_force (
.clock		(usb2_calib_clock),
.reset_n	(usb2_calib_rstn),
.d_in	        (i_cdr_reg2[1]),
.d_out	        (tm_clock_force)
);
assign muxed_calib_clock = tm_clock_force ? tm_calib_clock : usb2_calib_clock ;
assign sc_muxed_calib_clock = scan_mode ? scan_sieclock : muxed_calib_clock;
always @(posedge sc_muxed_calib_clock or negedge usb2_calib_rstn)
begin
	if (~usb2_calib_rstn)
	begin
		ana_calib_code		<= 6'b 100000 ;
		calib_cursor		<= 3'd 6 ;
		hsrx_sampler_calib_done	<= 1'b 0 ;
	end
	else if (ana_calib_active)
	begin
		case (calib_cursor)
		3'd 6:
		begin
			ana_calib_code[5]	<= (ana_comp_out) ? ana_calib_code[5] : ~ana_calib_code[5] ;
			ana_calib_code[4]	<= 1'b 1 ;
			calib_cursor		<= calib_cursor - 3'd 1 ;
		end
		3'd 5: 
		begin
			ana_calib_code[4]	<= (ana_comp_out) ? ana_calib_code[4] : ~ana_calib_code[4] ;
			ana_calib_code[3]	<= 1'b 1 ;
			calib_cursor		<= calib_cursor - 3'd 1 ;
		end
		3'd 4:
		begin
			ana_calib_code[3]	<= (ana_comp_out) ? ana_calib_code[3] : ~ana_calib_code[3] ;
			ana_calib_code[2]	<= 1'b 1 ;
			calib_cursor		<= calib_cursor - 3'd 1 ;
		end
		3'd 3:
		begin
			ana_calib_code[2]	<= (ana_comp_out) ? ana_calib_code[2] : ~ana_calib_code[2] ;
			ana_calib_code[1]	<= 1'b 1 ;
			calib_cursor		<= calib_cursor - 3'd 1 ;
		end
		3'd 2:
		begin
			ana_calib_code[1]	<= (ana_comp_out) ? ana_calib_code[1] : ~ana_calib_code[1] ;
			ana_calib_code[0]	<= 1'b 1 ;
			calib_cursor		<= calib_cursor - 3'd 1 ;
		end
		3'd 1:
		begin
			ana_calib_code[0]		<= (ana_comp_out) ? ana_calib_code[0] : ~ana_calib_code[0] ;
			calib_cursor			<= calib_cursor - 3'd 1 ;
			hsrx_sampler_calib_done		<= tm_multiple_calib ? ~(|tm_calib_done_int) : 1'b 1 ;
		end
		default:
		begin
			if (tm_multiple_calib)
				ana_calib_code	<= 6'b 100000 ;  
			calib_cursor		<= 3'd 6 ;
		end
		endcase
	end
end
always @(posedge usb2_calib_clock or negedge usb2_calib_rstn)
begin
	if(~usb2_calib_rstn)
		tm_calib_spc_trigger	<= 1'b 0 ;
	else if (tm_calib_spc_trigger | ( calib_cursor != 3'd 1 ))
		tm_calib_spc_trigger	<= 1'b 0 ;
	else if (calib_cursor == 3'd 1)
		tm_calib_spc_trigger	<= (|tm_calib_done_int) ;
end
always @(posedge usb2_calib_clock or negedge usb2_calib_rstn)
begin
	if (~usb2_calib_rstn)
	tm_calib_spc_cnt_en	<= 1'b 0 ;
	else if (tm_calib_spc_trigger)
	tm_calib_spc_cnt_en	<= 1'b 1 ;
	else if (tm_calib_spc_cnt_reached)
	tm_calib_spc_cnt_en	<= 1'b 0 ;
end	
always @(posedge usb2_calib_clock or negedge usb2_calib_rstn)
begin
	if(~usb2_calib_rstn)
	tm_calib_spc_cnt	<= 3'd 0 ;
	else if (tm_calib_spc_cnt_reached)
	tm_calib_spc_cnt	<= 3'd 0 ;
	else if (tm_calib_spc_cnt_en)
	tm_calib_spc_cnt	<= tm_calib_spc_cnt + 3'd 1 ;
end
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_calib_spc_threshold (
.clock		(usb2_calib_clock),
.reset_n	(usb2_calib_rstn),
.d_in	        (i_cdr_reg1[2]),
.d_out	        (calib_spc_threshold_en)
);
assign tm_calib_spc_cnt_threshold = calib_spc_threshold_en ? i_cdr_reg1[5:3] : 3'd 5 ;
assign tm_calib_spc_cnt_reached = (tm_calib_spc_cnt == tm_calib_spc_cnt_threshold) ;
always @(posedge usb2_calib_clock or negedge usb2_calib_rstn)
begin
	if(~usb2_calib_rstn)
	tm_sum_calib_code	<= 11'd 0 ;
	else if (calib_cursor == 3'd 0)
	tm_sum_calib_code	<= tm_sum_calib_code + 	ana_calib_code ;
end
always @(posedge usb2_calib_clock or negedge usb2_calib_rstn)
begin
	if(~usb2_calib_rstn)
	begin
	hsrx_sampler_calib_done_d	<= 1'b 0 ;
	hsrx_sampler_calib_done_2d	<= 1'b 0 ;
	end
	else
	begin
	hsrx_sampler_calib_done_d	<= hsrx_sampler_calib_done ;
	hsrx_sampler_calib_done_2d	<= hsrx_sampler_calib_done_d ;
	end
end
assign ana_calib_code_lev1 = tm_multiple_calib ? ( hsrx_sampler_calib_done_d ? (tm_sum_calib_code >> ( iteration_sel ? 3'd 4 : 3'd 3 )) :  ana_calib_code ) : ana_calib_code ; 
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_tm_multiple_calib (
.clock		(usb2_calib_clock),
.reset_n	(usb2_calib_rstn),
.d_in	        (i_cdr_reg1[0]),
.d_out    	(tm_multiple_calib)
);
always @(posedge usb2_calib_clock or negedge usb2_calib_rstn)
begin
	if(~usb2_calib_rstn)
		multiple_calib_d	<= 1'b 0 ;
	else
		multiple_calib_d	<= tm_multiple_calib ;
end
assign posedge_multiple_calib = tm_multiple_calib & ~multiple_calib_d ;
assign iteration_sel = i_cdr_reg1[1] ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_tm_manual_calib (
.clock		(usb2_calib_clock),
.reset_n	(usb2_calib_rstn),
.d_in	        (i_cdr_reg2[0]),
.d_out	        (tm_force_calib)
);
assign o_ana_calib_code			= (tm_force_calib ? ( i_cdr_reg3[5:0] ) : ana_calib_code_lev1) ;
assign o_hsrx_sampler_calib_done	= (tm_force_calib ? ( i_cdr_reg3[6] ) : hsrx_sampler_calib_done_2d) ;
assign o_ana_calib_active		= (tm_force_calib ? ( i_cdr_reg3[7] ) :  ana_calib_active) ;
assign o_cdr_reg9  = { 5'd 0, i_ana_comp_out, hsrx_sampler_calib_done, ana_calib_active } ;
assign o_cdr_reg10 = {2'd 0, o_ana_calib_code} ;
always @(posedge hsrx_sampler_calib_done)
begin
   if (ana_calib_code == 6'b000000 | ana_calib_code == 6'b111111)
              $display("Error : Sampler calib code saturated");
end
endmodule
`timescale 1ns/1ps
module udc_car_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r ( 
tm_eb_wr_rst_sel,
cdr_eb_wr_reset,
scan_en_ats,                     
scan_en_cg,                      
scan_mode_sel,
scan_mode,			 
scan_ats_mode,                   
scan_hsclock,			 
scan_hssiclock,			 
scan_sieclock,			 
scan_clock,
reset,                           
suspendm,
sleepm,
termselect,			 
opmode,				 
databus_store,
i_bg_powergood,			 
i_bg_powergood_ats,
pllrefsel,
pll_vco_cnt_window,
hssi_mode,
hs_mode_cdr,			 
pll_fbdiv,                      
pll_ipdiv,                      
i_pll_lock_ana,
i_pll_lock_ana_ats,
i_pll_standby,
pll_startloop,      
pll_pfd_pd,
pll_pso,
apb_presetn,
i_bist_mode_en,
tm_clk_gate_mask,
phy_soft_reset,			 
clkdiv_soft_reset,		 
calib_soft_reset,		 
rx_hs_soft_reset,		 
eb_reset_wr_ind,		 
all_calib_done,			 
inv_calib_rstn_pulse,		 
primary_count_reached,		 
refclock,			 
i_pll_480p0_clk,		 
i_pll_480p0_vco_clk,
hssi_tx_clockin,
apb_pclk,
hs_clock_ungate,
test_clk_gate_ovr,
glitch_filter_en,
databus,			 
hs_clock,			 
byte_clock,			 
sieclock,			 
o_fb_clk,                        
o_vco_pll_clk,                   
o_div_refclock,                 
o_dig_div_refclock,
o_scan_ats_hsclock,
o_scan_ats_hssiclock,
o_scan_ats_sieclock,
o_pll_480p0_clk,
udc_refclock,			 
udc_calib_1M_clock,
tx_clockin,
hssi_tx_clockout,				 
pclk,
presetn,
rstn_hs_clock,			 
rstn_byte_clock,		 
rstn_sieclock,			 
rstn_clkdiv,			 
rstn_refclock,			 
rstn_calib_clkdiv,		 
rstn_pll_clockout,
rstn_ats_clkdiv,
rstn_bist_mode,
o_usb2_calib_rstn,		 
udc_calib_rstn,			 
udc_bc_calib_rstn,		 
o_rstn_cdr_async,		 
udc_rstn_cdr_async,		 
o_pll_calib_rstn_int,		 
primary_count_rstn,		 
xcvr_sie_rstn,			 
xcvr_aon_rstn,			 
o_offset_correction_rstn,        
hs_clock_gate_ack,
debug_global_resetn,
debug_rstn_refclock,
debug_rstn_hs_clock,
debug_rstn_hs_tx_clock,
debug_rstn_byte_clock,
debug_rstn_sieclock,
debug_rstn_clkdiv,
debug_rstn_calib_clkdiv, 
debug_udc_rstn_cdr_async,
debug_udc_calib_rstn,
debug_o_rstn_cdr_async,
debug_o_pll_calib_rstn_int,
debug_o_usb2_calib_rstn,
debug_rstn_bist_mode
);
parameter RESET_ZERO = 1'b 0 ;
parameter RESET_ONE  = 1'b 1 ;	
input		tm_eb_wr_rst_sel, cdr_eb_wr_reset, scan_en_ats, reset, refclock, i_pll_480p0_clk, i_pll_480p0_vco_clk, tm_clk_gate_mask,
		suspendm, pll_vco_cnt_window, apb_pclk, pll_pso;
input		scan_sieclock, scan_clock, scan_mode, scan_ats_mode, scan_en_cg, scan_mode_sel, i_pll_lock_ana, 
                i_pll_lock_ana_ats, pll_pfd_pd, pll_startloop, apb_presetn, i_pll_standby, i_bist_mode_en;
input		databus_store, hssi_mode, hssi_tx_clockin, scan_hsclock, scan_hssiclock;
input [3:0] 	pllrefsel;
input [7:0] 	pll_fbdiv;
input [4:0] 	pll_ipdiv;
input		eb_reset_wr_ind, all_calib_done, inv_calib_rstn_pulse,
		phy_soft_reset, clkdiv_soft_reset, calib_soft_reset, rx_hs_soft_reset, hs_mode_cdr, termselect, sleepm,
		i_bg_powergood, i_bg_powergood_ats, primary_count_reached;
input	[1:0]	opmode ;
input           hs_clock_ungate;
input   [4:0]   test_clk_gate_ovr;
input           glitch_filter_en;
output		databus, tx_clockin ;
output		hs_clock, byte_clock, sieclock, hssi_tx_clockout, udc_refclock, o_scan_ats_hsclock, o_scan_ats_hssiclock, o_scan_ats_sieclock,
		udc_calib_1M_clock, o_div_refclock, o_dig_div_refclock, o_fb_clk, pclk, o_vco_pll_clk, o_pll_480p0_clk;
output		rstn_refclock, o_rstn_cdr_async, rstn_hs_clock, rstn_byte_clock, rstn_sieclock,
		rstn_clkdiv, o_usb2_calib_rstn, udc_calib_rstn, udc_bc_calib_rstn, xcvr_sie_rstn, xcvr_aon_rstn,
		udc_rstn_cdr_async, rstn_calib_clkdiv, o_pll_calib_rstn_int, debug_global_resetn,
		primary_count_rstn, o_offset_correction_rstn ,rstn_pll_clockout, presetn,
		rstn_ats_clkdiv, rstn_bist_mode;
output          debug_rstn_refclock,debug_rstn_hs_clock,debug_rstn_hs_tx_clock,debug_rstn_byte_clock,debug_rstn_sieclock,debug_rstn_clkdiv,
                debug_rstn_calib_clkdiv, debug_udc_rstn_cdr_async,debug_udc_calib_rstn,debug_o_rstn_cdr_async,debug_o_pll_calib_rstn_int,
                debug_o_usb2_calib_rstn, debug_rstn_bist_mode;
output          hs_clock_gate_ack;
reg		databus, hs_clock_off;
reg		sieclock_reg, byte_clock_reg, clk240_reg, clk_off, calib_clock_1M_reg;
reg	[3:0]	clkdiv ;
wire		udc_refclock, hs_clock, byte_clock, sieclock, hssi_tx_clockout, clkdiv_cnt_reached, clk_off_ref;
wire		sieclock_gen, byte_clock_gen, clk240_gen, databus_gen, tm_clk_gate_mask_hs, ctrl_480clk ;
reg [6:0] 	refclk_1mdiv;
wire 		calib_clock_1M_gen, udc_calib_1M_clock;
wire		rstn_refclock, o_rstn_cdr_async, rstn_hs_clock, rstn_byte_clock, rstn_sieclock,
		rstn_clkdiv, udc_calib_rstn, udc_rstn_cdr_async, o_usb2_calib_rstn,
		 xcvr_sie_resetn ,pll_ext_resetn, xcvr_aon_resetn;
wire		hs_clock_gate_ack_ref, rstn_cdr, 
		scan_reset, clkdiv_resetn, global_resetn,
		global_resetn_scan, refclock_resetn_scan, clkdiv_resetn_scan, calib_resetn_scan, rescalib_resetn_scan,
		bc_calib_resetn_scan, xcvr_sie_resetn_scan, refclock_resetn, pll_ext_resetn_scan, xcvr_aon_resetn_scan,
		rstn_calib_clkdiv, calib_clkdiv_resetn, calib_clkdiv_resetn_scan, soft_disconnect;
wire [1:0] 	dft_in_tp1 ;
reg		soft_disconnect_reg, reset_active_ref, suspendm_sleepm_bar, suspendm_sleepm_sie_d;
wire		reset_active, reset_active_sync, suspendm_sleepm_sie, w_suspendm_sleepm, negedge_suspendm_sleepm,
		calib_resetn, rescalib_resetn, bc_calib_resetn, pri_calib_resetn, pri_calib_resetn_scan, 
		scan_ats_hsclock, scan_ats_hssiclock, scan_ats_sieclock, w_calib_clock_1M_gen, hs_clock_en, chirp_mode, chirp_mode_sie;
wire            dft_tp2;
reg             reset_active_sync_d, reset_active_sync_2d;
wire            reset_active_mux, reset_active_noglitch;
wire		ZERO, ONE;
assign ZERO = 1'b0;
assign ONE = 1'b1;
assign w_hssi_tx_clockout	= (hssi_mode ? clk240_reg : 1'b0);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_refclock(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_sieclock),
.fcn_signal_in(refclock),
.fcn_signal_out(udc_refclock)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_byte_clock(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_sieclock),
.fcn_signal_in(byte_clock_reg),
.fcn_signal_out(byte_clock)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_sieclock(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_sieclock),
.fcn_signal_in(sieclock_reg),
.fcn_signal_out(sieclock)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_hssi_tx_clockout(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_hssiclock),
.fcn_signal_in(w_hssi_tx_clockout),
.fcn_signal_out(hssi_tx_clockout)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_calib_1M_clock(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_sieclock),
.fcn_signal_in(calib_clock_1M_reg),
.fcn_signal_out(udc_calib_1M_clock)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_tx_clockin(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_hssiclock),
.fcn_signal_in(hssi_tx_clockin),
.fcn_signal_out(tx_clockin)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_pll_rx_clk(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_hsclock),
.fcn_signal_in(i_pll_480p0_clk),
.fcn_signal_out(o_pll_480p0_clk)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_pclk(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_hssiclock),
.fcn_signal_in(apb_pclk),
.fcn_signal_out(pclk)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_ats_hsclock(
.scan_mode_en_in(scan_ats_mode),
.scan_signal_in(scan_ats_hsclock),
.fcn_signal_in(ZERO),
.fcn_signal_out(o_scan_ats_hsclock)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_ats_hssiclock(
.scan_mode_en_in(scan_ats_mode),
.scan_signal_in(scan_ats_hssiclock),
.fcn_signal_in(ZERO),
.fcn_signal_out(o_scan_ats_hssiclock)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_ats_sieclock(
.scan_mode_en_in(scan_ats_mode),
.scan_signal_in(scan_ats_sieclock),
.fcn_signal_in(ZERO),
.fcn_signal_out(o_scan_ats_sieclock)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_ats_refclock(
.scan_mode_en_in(scan_mode_sel),
.scan_signal_in(scan_clock),
.fcn_signal_in(refclock),
.fcn_signal_out(udc_ats_refclock)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_ats_pll_highfreq_clk(
.scan_mode_en_in(scan_mode_sel),
.scan_signal_in(scan_clock),
.fcn_signal_in(i_pll_480p0_vco_clk),
.fcn_signal_out(udc_ats_pll_highfreq_clk)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_ats_pll_clk(
.scan_mode_en_in(scan_mode_sel),
.scan_signal_in(scan_clock),
.fcn_signal_in(i_pll_480p0_clk),
.fcn_signal_out(udc_ats_pll_clk)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_ats_pll_rx_clk1(
.scan_mode_en_in(scan_ats_mode),
.scan_signal_in(i_pll_480p0_clk),
.fcn_signal_in(w_udc_ats_pll_rx_clk),
.fcn_signal_out(udc_ats_pll_rx_clk)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_ats_pll_rx_clk2(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_clock),
.fcn_signal_in(ZERO),
.fcn_signal_out(w_udc_ats_pll_rx_clk)
);
clk_gating_cell_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_SYNC_FLOPS(RESET_ZERO)) c_hs_clk_gate (
.reset_n (xcvr_sie_rstn),
.en (hs_clock_en),
.scanen (scan_en_cg),
.clk_in (o_pll_480p0_clk),
.en_synced (),
.en_ack (hs_clock_gate_ack),
.clk_out (hs_clock)
);
udc_car_ats_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_udc_car_ats (
.scan_en		      (scan_en_ats),
.scan_reset                   (~reset),
.scan_ats_mode                (scan_ats_mode),
.scan_mode                    (scan_mode),
.scan_en_cg                   (scan_en_cg),
.scan_mode_sel                (scan_mode_sel),
.scan_clock                   (scan_clock),
.clkdiv_soft_reset            (clkdiv_soft_reset),
.i_pll_lock_ana               (i_pll_lock_ana_ats),
.i_pll_standby                (i_pll_standby),
.i_pll_pso                    (pll_pso),
.i_bg_powergood_ats           (i_bg_powergood_ats),
.refclock                     (udc_ats_refclock),
.i_ats_pll_clk                (udc_ats_pll_clk),
.i_ats_pll_rx_clk             (udc_ats_pll_rx_clk),
.i_ats_pll_highfreq_clk       (udc_ats_pll_highfreq_clk),
.pll_startloop                (pll_startloop),
.pll_pfd_pd                   (pll_pfd_pd),
.i_pll_fbdiv                  (pll_fbdiv),
.i_pll_ipdiv                  (pll_ipdiv),
.pll_vco_cnt_window           (pll_vco_cnt_window),
.test_vco_pll_clock_gate_ovr       (test_clk_gate_ovr[4]),
.test_dig_div_refclock_gate_ovr    (test_clk_gate_ovr[3]),
.test_fb_clock_gate_ovr            (test_clk_gate_ovr[2]),
.test_ana_div_refclock_gate_ovr    (test_clk_gate_ovr[1]),
.rstn_ats_clkdiv              (rstn_ats_clkdiv),
.o_div_refclock               (o_div_refclock),
.o_dig_div_refclock           (o_dig_div_refclock),
.o_fb_clk                     (o_fb_clk),
.o_vco_pll_clk                (o_vco_pll_clk),
.o_scan_ats_hsclock           (scan_ats_hsclock),
.o_scan_ats_hssiclock         (scan_ats_hssiclock),
.o_scan_ats_sieclock          (scan_ats_sieclock)
);
always @(posedge hs_clock or negedge rstn_clkdiv)
begin
	if(~rstn_clkdiv)
		clkdiv <= 4'b 0000 ;
	else
		clkdiv <= clkdiv +4'b 0001 ;
end
assign clkdiv_cnt_reached = ( clkdiv == 4'b1111 ) ;
assign ctrl_480clk = (suspendm_sleepm_bar & clkdiv_cnt_reached) ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_tm_clk_gate_mask_sync (
.clock		(hs_clock) ,
.reset_n	(rstn_clkdiv) ,
.d_in	        (tm_clk_gate_mask) ,
.d_out	        (tm_clk_gate_mask_hs)
);
always @(posedge hs_clock or negedge rstn_clkdiv)
begin
	if(~rstn_clkdiv)
	clk_off	<= 1'b 1 ;
	else if (ctrl_480clk & ~tm_clk_gate_mask_hs)
	clk_off	<= 1'b0 ;
end
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b1)) c_clk_off_sync (
.clock		(udc_refclock) ,
.reset_n	(o_pll_calib_rstn_int) ,
.d_in	        (clk_off) ,
.d_out	        (clk_off_ref)
);
always @(posedge udc_refclock or negedge o_pll_calib_rstn_int)
begin
	if(~o_pll_calib_rstn_int)
	     hs_clock_off <= 1'b0 ;
	else if (hs_clock_ungate)
	     hs_clock_off <= 1'b0 ;
	else
	     hs_clock_off <= ~clk_off_ref;
end
assign hs_clock_en = test_clk_gate_ovr[0] | (clk_off & ~hs_clock_off & clk_off_ref);
assign clk240_gen	= ~clkdiv[0] ;
assign byte_clock_gen 	= ~clkdiv[2] ;
assign sieclock_gen 	= databus ? ~clkdiv[3] : byte_clock_gen ;
always @(posedge hs_clock or negedge rstn_clkdiv)
begin
	if(~rstn_clkdiv)
	begin
		clk240_reg	<= 1'b 0 ;
		sieclock_reg	<= 1'b 0 ;
		byte_clock_reg	<= 1'b 0 ;
	end
	else
	begin
		clk240_reg	<= clk240_gen ;
		sieclock_reg	<= sieclock_gen ;
		byte_clock_reg	<= byte_clock_gen ;
	end
end
assign databus_gen = databus_store ;
always @*
begin
	databus = databus_gen ;
end
always@(*)
begin
case(pllrefsel)
	4'b 0000:			  
		refclk_1mdiv = 7'd10; 
	4'b 0001:			  
		refclk_1mdiv = 7'd10;
	4'b 0010:		 	  
		refclk_1mdiv = 7'd12;
	4'b 0011:		 	  
		refclk_1mdiv = 7'd20;
	4'b 0100:		 	  
		refclk_1mdiv = 7'd20;
	4'b 0101:		 	  
		refclk_1mdiv = 7'd24;
	4'b 0110:		 	  
		refclk_1mdiv = 7'd25;
	4'b 0111:		 	  
		refclk_1mdiv = 7'd26;
	4'b 1000:		 	  
		refclk_1mdiv = 7'd40;
	4'b 1001:		 	  
		refclk_1mdiv = 7'd40;
	4'b 1010:		 	  
		refclk_1mdiv = 7'd48;
	4'b 1011:		 	  
		refclk_1mdiv = 7'd50;
	4'b 1100:		 	  
		refclk_1mdiv = 7'd52;
        4'b 1101:                         
                refclk_1mdiv = 7'd100;
	default:		 	  
		refclk_1mdiv = 7'd52;
	endcase
end
clock_div_prog_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.DIV_CTRL_WIDTH(7)) c_refclock_1mclock_div (
.clock_div_sel           (refclk_1mdiv),
.clock_in                (udc_refclock),
.clock_div_out           (calib_clock_1M_gen),
.reset_in_n              (rstn_calib_clkdiv),
.reset_out_n             (),
.upstream_reset_in_n     (1'b1),
.scan_reset_in_n         (scan_reset),
.scan_mode_en_in         (scan_mode)
);
assign w_calib_clock_1M_gen = scan_mode ? 1'b0 : calib_clock_1M_gen;
always @(posedge udc_refclock or negedge rstn_calib_clkdiv)
begin
	if(~rstn_calib_clkdiv)
	begin
		calib_clock_1M_reg	<= 1'b 0 ;
	end
	else
	begin
		calib_clock_1M_reg	<= w_calib_clock_1M_gen ;
	end
end
assign scan_reset = ~reset ;
assign soft_disconnect = (opmode == 2'b 01) ;
always @(posedge sieclock or negedge xcvr_sie_rstn)
begin
	if(~xcvr_sie_rstn)
		soft_disconnect_reg  		<= 1'b 0 ;
	else
		soft_disconnect_reg  		<= soft_disconnect ;
end
assign global_resetn = (
			~phy_soft_reset  &	 
			~reset	 	 &	 
			~soft_disconnect_reg &	 
			suspendm 	 &	 
			sleepm           &
			all_calib_done 	 &	 
			i_bg_powergood	 &	 
			i_pll_lock_ana		 
		       ) ;
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_global_resetn(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_reset),
.fcn_signal_in(global_resetn),
.fcn_signal_out(global_resetn_scan)
);
reset_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_FLOPS(2)) c_rstgen_sieclock_rstn (
.sync_clock_in(sieclock),     
.reset_in_n(global_resetn_scan),	    
.reset_out_n(rstn_sieclock),	    
.upstream_reset_in_n(1'b1),
.scan_mode_en_in(scan_mode), 
.scan_reset_in_n(scan_reset)
); 
assign rstn_byte_clock 	= rstn_sieclock ; 
assign rstn_hs_clock 	= rstn_sieclock ; 
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_apb_presetn_scan(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_reset),
.fcn_signal_in(apb_presetn),
.fcn_signal_out(apb_presetn_scan)
);
reset_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_FLOPS(2)) c_rstgen_apb_presetn (
.sync_clock_in(pclk),     
.reset_in_n(apb_presetn_scan),	    
.reset_out_n(presetn),	    
.upstream_reset_in_n(ONE),
.scan_mode_en_in(scan_mode), 
.scan_reset_in_n(scan_reset)
); 
assign refclock_resetn = (
			  i_bg_powergood   &	 
			  suspendm 	   	 
		         ) ;
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_refclock_resetn_scan(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_reset),
.fcn_signal_in(refclock_resetn),
.fcn_signal_out(refclock_resetn_scan)
);
reset_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_FLOPS(2)) c_rstgen_refclock_rstn (
.sync_clock_in(udc_refclock),     
.reset_in_n(refclock_resetn_scan),	    
.reset_out_n(rstn_refclock),	    
.upstream_reset_in_n(1'b1),
.scan_mode_en_in(scan_mode), 
.scan_reset_in_n(scan_reset)
); 
assign reset_active = (i_pll_lock_ana & suspendm & sleepm & all_calib_done) ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_hs_clock_gate_ack_sync (
.clock   (udc_refclock),
.reset_n (udc_bc_calib_rstn),
.d_in    (hs_clock_gate_ack),
.d_out   (hs_clock_gate_ack_ref)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_reset_active_sync (
.clock   (udc_refclock),
.reset_n (udc_bc_calib_rstn),
.d_in    (reset_active),
.d_out   (reset_active_sync)
);
always @(posedge udc_refclock or negedge udc_bc_calib_rstn)
begin
    if(~udc_bc_calib_rstn)
        begin
            reset_active_sync_d  <= 1'b0;
            reset_active_sync_2d <= 1'b0;
        end
    else 
        begin
            reset_active_sync_d  <= reset_active_sync;
            reset_active_sync_2d <= reset_active_sync_d;
        end
end
assign reset_active_noglitch = reset_active_sync & reset_active_sync_2d;
assign reset_active_mux      = glitch_filter_en ? reset_active_noglitch : reset_active_sync;
always @(posedge udc_refclock or negedge udc_bc_calib_rstn)
begin
    if(~udc_bc_calib_rstn)
        reset_active_ref <= 1'b0;
    else if(reset_active_mux)
        reset_active_ref <= 1'b1;
    else if(~hs_clock_gate_ack_ref)
        reset_active_ref <= 1'b0;
end
assign clkdiv_resetn = (
			~clkdiv_soft_reset  &	 
			i_bg_powergood	    &	 
			reset_active_ref	 
		       ) ;
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_clkdiv_resetn_scan(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_reset),
.fcn_signal_in(clkdiv_resetn),
.fcn_signal_out(clkdiv_resetn_scan)
);
reset_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_FLOPS(2)) c_rstgen_clkdiv_rstn (
.sync_clock_in(hs_clock),     
.reset_in_n(clkdiv_resetn_scan),	    
.reset_out_n(rstn_clkdiv),	    
.upstream_reset_in_n(1'b1),
.scan_mode_en_in(scan_mode), 
.scan_reset_in_n(scan_reset)
); 
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_suspendm_sleepm_sync (
.reset_n	(rstn_clkdiv),
.clock		(sieclock),
.d_in		(w_suspendm_sleepm),
.d_out		(suspendm_sleepm_sie)
);
assign w_suspendm_sleepm = suspendm & sleepm;
always @(posedge sieclock or negedge rstn_clkdiv)
begin
	if(~rstn_clkdiv)
	suspendm_sleepm_sie_d <= 1'b 0 ;
	else
	suspendm_sleepm_sie_d <= suspendm_sleepm_sie ;
end
assign negedge_suspendm_sleepm = ~suspendm_sleepm_sie & suspendm_sleepm_sie_d;
always @(posedge sieclock or negedge rstn_clkdiv)
begin
	if(~rstn_clkdiv)
	suspendm_sleepm_bar	<= 1'b 0 ;
	else if (negedge_suspendm_sleepm)
	suspendm_sleepm_bar	<= 1'b 1 ;
end
assign calib_clkdiv_resetn = (
				~clkdiv_soft_reset  &	 
				i_bg_powergood	    	 
			       ) ;
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_calib_clkdiv_resetn_scan(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_reset),
.fcn_signal_in(calib_clkdiv_resetn),
.fcn_signal_out(calib_clkdiv_resetn_scan)
);
reset_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_FLOPS(2)) c_rstgen_calib_clkdiv_rstn (
.sync_clock_in(udc_refclock),     
.reset_in_n(calib_clkdiv_resetn_scan),	    
.reset_out_n(rstn_calib_clkdiv),	    
.upstream_reset_in_n(ONE),
.scan_mode_en_in(scan_mode), 
.scan_reset_in_n(scan_reset)
); 
assign pll_ext_resetn = (
		       		~phy_soft_reset  &	 
				i_bg_powergood	 &	 
				i_pll_lock_ana 		 
				) ;
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_pll_ext_resetn_scan(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_reset),
.fcn_signal_in(pll_ext_resetn),
.fcn_signal_out(pll_ext_resetn_scan)
);
reset_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_FLOPS(2)) c_rstgen_pll_ext_rstn (
.sync_clock_in(o_pll_480p0_clk),     
.reset_in_n(pll_ext_resetn_scan),	    
.reset_out_n(rstn_pll_clockout),	    
.upstream_reset_in_n(ONE),
.scan_mode_en_in(scan_mode), 
.scan_reset_in_n(scan_reset)
); 
assign calib_resetn = (
		       ~calib_soft_reset  &	 
			i_bg_powergood	  & 	 
		        suspendm 	  	 
		      ) ;
assign offset_correction_resetn = bc_calib_resetn;
assign rescalib_resetn = (
		       ~calib_soft_reset  &	 
			i_bg_powergood	  & 	 
		        suspendm 	  &	 
		       ~inv_calib_rstn_pulse
		      ) ;
assign bc_calib_resetn = (
		       ~calib_soft_reset  &	 
			i_bg_powergood	  	 
		      ) ;
assign pri_calib_resetn = (
		       ~calib_soft_reset  &	 
			i_bg_powergood	  & 	 
		        suspendm 	  &	 
			~primary_count_reached
		      ) ;
assign xcvr_sie_resetn = (
		       ~phy_soft_reset  &	 
			i_bg_powergood	  	 
		      ) ;
assign xcvr_aon_resetn = (
		       ~phy_soft_reset  &	 
			i_bg_powergood	  	 
		      ) ;
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_calib_resetn_scan(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_reset),
.fcn_signal_in(calib_resetn),
.fcn_signal_out(calib_resetn_scan)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_pri_calib_resetn_scan(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_reset),
.fcn_signal_in(pri_calib_resetn),
.fcn_signal_out(pri_calib_resetn_scan)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_rescalib_resetn_scan(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_reset),
.fcn_signal_in(rescalib_resetn),
.fcn_signal_out(rescalib_resetn_scan)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_bc_calib_resetn_scan(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_reset),
.fcn_signal_in(bc_calib_resetn),
.fcn_signal_out(bc_calib_resetn_scan)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_xcvr_sie_resetn_scan(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_reset),
.fcn_signal_in(xcvr_sie_resetn),
.fcn_signal_out(xcvr_sie_resetn_scan)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_xcvr_aon_resetn_scan(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_reset),
.fcn_signal_in(xcvr_aon_resetn),
.fcn_signal_out(xcvr_aon_resetn_scan)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_off_corr_resetn_scan(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_reset),
.fcn_signal_in(offset_correction_resetn),
.fcn_signal_out(offset_correction_resetn_scan)
);
reset_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_FLOPS(2)) c_rstgen_offset_correction_rstn (
.sync_clock_in(udc_calib_1M_clock),     
.reset_in_n(offset_correction_resetn_scan),	    
.reset_out_n(o_offset_correction_rstn),	    
.upstream_reset_in_n(ONE),
.scan_mode_en_in(scan_mode), 
.scan_reset_in_n(scan_reset)
); 
reset_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_FLOPS(2)) c_rstgen_calib_rstn (
.sync_clock_in(udc_calib_1M_clock),     
.reset_in_n(calib_resetn_scan),	    
.reset_out_n(udc_calib_rstn),	    
.upstream_reset_in_n(ONE),
.scan_mode_en_in(scan_mode), 
.scan_reset_in_n(scan_reset)
); 
reset_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_FLOPS(2)) c_pri_calib_rstn (
.sync_clock_in(udc_calib_1M_clock),     
.reset_in_n(pri_calib_resetn_scan),	    
.reset_out_n(primary_count_rstn),	    
.upstream_reset_in_n(ONE),
.scan_mode_en_in(scan_mode), 
.scan_reset_in_n(scan_reset)
);
reset_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_FLOPS(2)) c_rstgen_rescalib_rstn (
.sync_clock_in(udc_calib_1M_clock),     
.reset_in_n(rescalib_resetn_scan),	    
.reset_out_n(o_usb2_calib_rstn),	    
.upstream_reset_in_n(ONE),
.scan_mode_en_in(scan_mode), 
.scan_reset_in_n(scan_reset)
);
reset_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_FLOPS(2)) c_rstgen_bc_calib_rstn (
.sync_clock_in(udc_calib_1M_clock),     
.reset_in_n(bc_calib_resetn_scan),	    
.reset_out_n(udc_bc_calib_rstn),	    
.upstream_reset_in_n(ONE),
.scan_mode_en_in(scan_mode), 
.scan_reset_in_n(scan_reset)
);
reset_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_FLOPS(2)) c_xcvr_sie_resetn (
.sync_clock_in(sieclock),     
.reset_in_n(xcvr_sie_resetn_scan),	    
.reset_out_n(xcvr_sie_rstn),	    
.upstream_reset_in_n(ONE),
.scan_mode_en_in(scan_mode), 
.scan_reset_in_n(scan_reset)
);
reset_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_FLOPS(2)) c_xcvr_aon_resetn (
.sync_clock_in(sieclock),     
.reset_in_n(xcvr_aon_resetn_scan),	    
.reset_out_n(xcvr_aon_rstn),	    
.upstream_reset_in_n(ONE),
.scan_mode_en_in(scan_mode), 
.scan_reset_in_n(scan_reset)
);
assign o_pll_calib_rstn_int  	= udc_bc_calib_rstn ;
assign chirp_mode = (opmode == 2'b10);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(RESET_ZERO)) c_chirp_mode_sync (
.clock  	      (sieclock) ,
.reset_n      (rstn_sieclock) ,
.d_in	      (chirp_mode) ,
.d_out  	      (chirp_mode_sie)
);
assign rstn_cdr = (
		    ~rx_hs_soft_reset  		&	 
		    ~termselect	 		&	 
		    hs_mode_cdr			&	 
		    ~chirp_mode_sie 	&	 
		    global_resetn      		         
		   )  ;
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_udc_rstn_cdr_async(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_reset),
.fcn_signal_in(w_udc_rstn_cdr_async),
.fcn_signal_out(udc_rstn_cdr_async)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_rstn_cdr_async(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_reset),
.fcn_signal_in(rstn_cdr),
.fcn_signal_out(o_rstn_cdr_async)
);
assign w_udc_rstn_cdr_async = (rstn_cdr & (tm_eb_wr_rst_sel ? ~eb_reset_wr_ind : ~cdr_eb_wr_reset)) ;
assign bist_resetn = (
                      ~phy_soft_reset &
		      i_bist_mode_en
		      );
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_bist_resetn(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_reset),
.fcn_signal_in(bist_resetn),
.fcn_signal_out(bist_resetn_scan)
);
reset_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_FLOPS(2)) c_rstn_bist_mode_en (
.sync_clock_in(udc_refclock),     
.reset_in_n(bist_resetn_scan),	    
.reset_out_n(rstn_bist_mode),	    
.upstream_reset_in_n(1'b1),
.scan_mode_en_in(scan_mode), 
.scan_reset_in_n(scan_reset)
);
dft_tp_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.WIDTH(2),.SCAN_MUX(0)) c_dft_in_tp1(
.clock        (scan_hsclock),
.reset_n      (scan_reset),
.scan_mode    (1'b0),
.fcn_signal_in(2'd0),
.d_in         (2'd0),
.d_out        (dft_in_tp1)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_rstn_sieclock(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[0]),
.fcn_signal_in(rstn_sieclock),
.fcn_signal_out(debug_rstn_sieclock)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_dft_rstn_cdr_async(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[0]),
.fcn_signal_in(w_udc_rstn_cdr_async),
.fcn_signal_out(debug_udc_rstn_cdr_async)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_rstn_cdr(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[1]),
.fcn_signal_in(rstn_cdr),
.fcn_signal_out(debug_o_rstn_cdr_async)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_dft_global_resetn(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[1]),
.fcn_signal_in(global_resetn),
.fcn_signal_out(debug_global_resetn)
);
dft_tp_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.WIDTH(1),.SCAN_MUX(0)) c_dft_tp2(
.clock        (scan_hsclock),
.reset_n      (1'b1),
.scan_mode    (1'b0),
.fcn_signal_in(1'd0),
.d_in         (w_udc_rstn_cdr_async),
.d_out        (dft_tp2)
);
assign debug_rstn_refclock = refclock_resetn;
assign debug_rstn_hs_clock = debug_rstn_sieclock;
assign debug_rstn_hs_tx_clock = debug_rstn_sieclock;
assign debug_rstn_byte_clock = debug_rstn_sieclock;
assign debug_rstn_clkdiv = clkdiv_resetn;  
assign debug_rstn_calib_clkdiv = calib_clkdiv_resetn;
assign debug_udc_calib_rstn = bc_calib_resetn;
assign debug_o_pll_calib_rstn_int = bc_calib_resetn;
assign debug_o_usb2_calib_rstn = rescalib_resetn;
assign debug_rstn_bist_mode = bist_resetn;
endmodule
module usb2_pll_coarse_code_split_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
			  i_COARSE_CODE ,
			  i_BYPASS ,
			  o_COARSE_CODE,
			  i_TM_BITS
			  );
   parameter p_coarse_code_len = 8;
   parameter p_v2i_code_len = 6;
   input [p_coarse_code_len -1 : 0] i_COARSE_CODE;
   input 			    i_BYPASS;
   input [p_v2i_code_len : 0] 	    i_TM_BITS;
   output [p_coarse_code_len -1 : 0] o_COARSE_CODE;
   reg [p_v2i_code_len -1 : 0] 	     r_V2I_CODE;
   wire [p_v2i_code_len -1 : 0]      r_V2I_CODE_BYPASS;
   wire [p_coarse_code_len -1 :0]     r_COARSE_CODE;
   reg [p_coarse_code_len -1 :0]     o_COARSE_CODE;
   assign 			     r_V2I_CODE_BYPASS =    i_TM_BITS[p_v2i_code_len] ?   i_TM_BITS[p_v2i_code_len -1:0] : r_V2I_CODE;
   assign r_COARSE_CODE     =  i_COARSE_CODE;	 
   always @(*)
     if (i_BYPASS)
       begin
	  o_COARSE_CODE = r_COARSE_CODE;
       end
     else
       begin
	  o_COARSE_CODE = r_COARSE_CODE - r_V2I_CODE_BYPASS ;
       end
   always @(*)
         if (r_COARSE_CODE <= 9'd47 )
	   r_V2I_CODE = 15;
	 else if (r_COARSE_CODE <= 9'd79)
	   r_V2I_CODE = 16;
	 else if (r_COARSE_CODE <= 9'd103)
	   r_V2I_CODE = 17;
	 else if (r_COARSE_CODE <= 9'd111)
	   r_V2I_CODE = 18;
	 else if (r_COARSE_CODE <= 9'd127)
	   r_V2I_CODE = 20;
	 else if (r_COARSE_CODE <= 9'd159)
	   r_V2I_CODE = 21;
	 else if (r_COARSE_CODE <= 9'd183)
	   r_V2I_CODE = 24;
	 else
	   r_V2I_CODE = 30;
endmodule  
module INSTRUCTION_DECODE_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r(UPDATEIR, RESET, TCK, SE, IOTEST, 
                          MODE_A, MODE_B, MODE_C, CTRL_HIGHZ, INCTRL, 
                          CUSTOM_INSTR_5, CUSTOM_INSTR_2, EXTEST_TRAIN, 
                          CUSTOM_INSTR_9, EXTEST, CUSTOM_INSTR_6, 
                          CUSTOM_INSTR_4, CUSTOM_INSTR_1, BYPASS, 
                          PRELOAD, CUSTOM_INSTR_8, CUSTOM_INSTR_3, 
                          EXTEST_PULSE, CUSTOM_INSTR_10, SAMPLE, 
                          CUSTOM_INSTR_7, 
                          BIT0, BIT1, BIT2, BIT3, 
                          JTAG_BYPASS_DEFAULT, JTAG_BOUNDARY, HighzOrBypass);
   input  UPDATEIR;
   input  RESET;
   input  TCK;
   input  SE;
   input  IOTEST;
   input  BIT0;
   input  BIT1;
   input  BIT2;
   input  BIT3;
   output MODE_A;
   output MODE_B;
   output MODE_C;
   output CTRL_HIGHZ;
   output INCTRL;
   output CUSTOM_INSTR_5;
   output CUSTOM_INSTR_2;
   output EXTEST_TRAIN;
   output CUSTOM_INSTR_9;
   output EXTEST;
   output CUSTOM_INSTR_6;
   output CUSTOM_INSTR_4;
   output CUSTOM_INSTR_1;
   output BYPASS;
   output PRELOAD;
   output CUSTOM_INSTR_8;
   output CUSTOM_INSTR_3;
   output EXTEST_PULSE;
   output CUSTOM_INSTR_10;
   output SAMPLE;
   output CUSTOM_INSTR_7;
   output JTAG_BYPASS_DEFAULT;
   output JTAG_BOUNDARY;
   output HighzOrBypass;
   wire NetGatedRESET;
   wire HZ;
   wire MA;
   wire MB;
   wire MC;
   wire GND;
   reg CTRL_HIGHZ_S;
   reg MODE_A_S;
   reg MBInt;
   reg MCInt;
   reg JTAG_BYPASS_DEFAULT_S;
   wire NET_BYPASS_DEFAULT;
   reg ICInt;
   wire INCTRL_S;
   wire INCTRLBuf2;
   wire INCTRLBuf1;
   wire CUSTOM_INSTR_5_1001;
   wire CUSTOM_INSTR_5_SUM;
   reg CUSTOM_INSTR_5_S;
   wire CUSTOM_INSTR_2_0110;
   wire CUSTOM_INSTR_2_SUM;
   reg CUSTOM_INSTR_2_S;
   wire EXTEST_TRAIN_0011;
   wire EXTEST_TRAIN_SUM;
   reg EXTEST_TRAIN_S;
   wire CUSTOM_INSTR_9_1101;
   wire CUSTOM_INSTR_9_SUM;
   reg CUSTOM_INSTR_9_S;
   wire EXTEST_0000;
   wire EXTEST_SUM;
   reg EXTEST_S;
   wire CUSTOM_INSTR_6_1010;
   wire CUSTOM_INSTR_6_SUM;
   reg CUSTOM_INSTR_6_S;
   wire CUSTOM_INSTR_4_1000;
   wire CUSTOM_INSTR_4_SUM;
   reg CUSTOM_INSTR_4_S;
   wire CUSTOM_INSTR_1_0101;
   wire CUSTOM_INSTR_1_SUM;
   reg CUSTOM_INSTR_1_S;
   wire BYPASS_1111;
   wire BYPASS_SUM;
   reg BYPASS_S;
   wire PRELOAD_0010;
   wire PRELOAD_SUM;
   reg PRELOAD_S;
   wire CUSTOM_INSTR_8_1100;
   wire CUSTOM_INSTR_8_SUM;
   reg CUSTOM_INSTR_8_S;
   wire CUSTOM_INSTR_3_0111;
   wire CUSTOM_INSTR_3_SUM;
   reg CUSTOM_INSTR_3_S;
   wire EXTEST_PULSE_0100;
   wire EXTEST_PULSE_SUM;
   reg EXTEST_PULSE_S;
   wire CUSTOM_INSTR_10_1110;
   wire CUSTOM_INSTR_10_SUM;
   reg CUSTOM_INSTR_10_S;
   wire SAMPLE_0001;
   wire SAMPLE_SUM;
   reg SAMPLE_S;
   wire CUSTOM_INSTR_7_1011;
   wire CUSTOM_INSTR_7_SUM;
   reg CUSTOM_INSTR_7_S;
   assign GND = 1'b0;
   assign NetGatedRESET = ~(RESET);
   assign CUSTOM_INSTR_5_1001 = BIT3  & ~(BIT2)  & ~(BIT1)  & BIT0 ;
   assign CUSTOM_INSTR_5_SUM = CUSTOM_INSTR_5_1001 ;
   always @(posedge UPDATEIR or posedge NetGatedRESET)
    begin : RegUpdateCUSTOM_INSTR_5
      if (NetGatedRESET)
        CUSTOM_INSTR_5_S <= 1'b0;
      else
        CUSTOM_INSTR_5_S <= CUSTOM_INSTR_5_SUM;
    end
   assign CUSTOM_INSTR_5 = CUSTOM_INSTR_5_S;
   assign CUSTOM_INSTR_2_0110 = ~(BIT3)  & BIT2  & BIT1  & ~(BIT0) ;
   assign CUSTOM_INSTR_2_SUM = CUSTOM_INSTR_2_0110 ;
   always @(posedge UPDATEIR or posedge NetGatedRESET)
    begin : RegUpdateCUSTOM_INSTR_2
      if (NetGatedRESET)
        CUSTOM_INSTR_2_S <= 1'b0;
      else
        CUSTOM_INSTR_2_S <= CUSTOM_INSTR_2_SUM;
    end
   assign CUSTOM_INSTR_2 = CUSTOM_INSTR_2_S;
   assign EXTEST_TRAIN_0011 = ~(BIT3)  & ~(BIT2)  & BIT1  & BIT0 ;
   assign EXTEST_TRAIN_SUM = EXTEST_TRAIN_0011 ;
   always @(posedge UPDATEIR or posedge NetGatedRESET)
    begin : RegUpdateEXTEST_TRAIN
      if (NetGatedRESET)
        EXTEST_TRAIN_S <= 1'b0;
      else
        EXTEST_TRAIN_S <= EXTEST_TRAIN_SUM;
    end
   assign EXTEST_TRAIN = EXTEST_TRAIN_S;
   assign CUSTOM_INSTR_9_1101 = BIT3  & BIT2  & ~(BIT1)  & BIT0 ;
   assign CUSTOM_INSTR_9_SUM = CUSTOM_INSTR_9_1101 ;
   always @(posedge UPDATEIR or posedge NetGatedRESET)
    begin : RegUpdateCUSTOM_INSTR_9
      if (NetGatedRESET)
        CUSTOM_INSTR_9_S <= 1'b0;
      else
        CUSTOM_INSTR_9_S <= CUSTOM_INSTR_9_SUM;
    end
   assign CUSTOM_INSTR_9 = CUSTOM_INSTR_9_S;
   assign EXTEST_0000 = ~(BIT3)  & ~(BIT2)  & ~(BIT1)  & ~(BIT0) ;
   assign EXTEST_SUM = EXTEST_0000 ;
   always @(posedge UPDATEIR or posedge NetGatedRESET)
    begin : RegUpdateEXTEST
      if (NetGatedRESET)
        EXTEST_S <= 1'b0;
      else
        EXTEST_S <= EXTEST_SUM;
    end
   assign EXTEST = EXTEST_S;
   assign CUSTOM_INSTR_6_1010 = BIT3  & ~(BIT2)  & BIT1  & ~(BIT0) ;
   assign CUSTOM_INSTR_6_SUM = CUSTOM_INSTR_6_1010 ;
   always @(posedge UPDATEIR or posedge NetGatedRESET)
    begin : RegUpdateCUSTOM_INSTR_6
      if (NetGatedRESET)
        CUSTOM_INSTR_6_S <= 1'b0;
      else
        CUSTOM_INSTR_6_S <= CUSTOM_INSTR_6_SUM;
    end
   assign CUSTOM_INSTR_6 = CUSTOM_INSTR_6_S;
   assign CUSTOM_INSTR_4_1000 = BIT3  & ~(BIT2)  & ~(BIT1)  & ~(BIT0) ;
   assign CUSTOM_INSTR_4_SUM = CUSTOM_INSTR_4_1000 ;
   always @(posedge UPDATEIR or posedge NetGatedRESET)
    begin : RegUpdateCUSTOM_INSTR_4
      if (NetGatedRESET)
        CUSTOM_INSTR_4_S <= 1'b0;
      else
        CUSTOM_INSTR_4_S <= CUSTOM_INSTR_4_SUM;
    end
   assign CUSTOM_INSTR_4 = CUSTOM_INSTR_4_S;
   assign CUSTOM_INSTR_1_0101 = ~(BIT3)  & BIT2  & ~(BIT1)  & BIT0 ;
   assign CUSTOM_INSTR_1_SUM = CUSTOM_INSTR_1_0101 ;
   always @(posedge UPDATEIR or posedge NetGatedRESET)
    begin : RegUpdateCUSTOM_INSTR_1
      if (NetGatedRESET)
        CUSTOM_INSTR_1_S <= 1'b0;
      else
        CUSTOM_INSTR_1_S <= CUSTOM_INSTR_1_SUM;
    end
   assign CUSTOM_INSTR_1 = CUSTOM_INSTR_1_S;
   assign BYPASS_1111 = BIT3  & BIT2  & BIT1  & BIT0 ;
   assign BYPASS_SUM = BYPASS_1111 ;
   always @(posedge UPDATEIR or posedge NetGatedRESET)
    begin : RegUpdateBYPASS
      if (NetGatedRESET)
        BYPASS_S <= 1'b1;
      else
        BYPASS_S <= BYPASS_SUM;
    end
   assign BYPASS = BYPASS_S;
   assign PRELOAD_0010 = ~(BIT3)  & ~(BIT2)  & BIT1  & ~(BIT0) ;
   assign PRELOAD_SUM = PRELOAD_0010 ;
   always @(posedge UPDATEIR or posedge NetGatedRESET)
    begin : RegUpdatePRELOAD
      if (NetGatedRESET)
        PRELOAD_S <= 1'b0;
      else
        PRELOAD_S <= PRELOAD_SUM;
    end
   assign PRELOAD = PRELOAD_S;
   assign CUSTOM_INSTR_8_1100 = BIT3  & BIT2  & ~(BIT1)  & ~(BIT0) ;
   assign CUSTOM_INSTR_8_SUM = CUSTOM_INSTR_8_1100 ;
   always @(posedge UPDATEIR or posedge NetGatedRESET)
    begin : RegUpdateCUSTOM_INSTR_8
      if (NetGatedRESET)
        CUSTOM_INSTR_8_S <= 1'b0;
      else
        CUSTOM_INSTR_8_S <= CUSTOM_INSTR_8_SUM;
    end
   assign CUSTOM_INSTR_8 = CUSTOM_INSTR_8_S;
   assign CUSTOM_INSTR_3_0111 = ~(BIT3)  & BIT2  & BIT1  & BIT0 ;
   assign CUSTOM_INSTR_3_SUM = CUSTOM_INSTR_3_0111 ;
   always @(posedge UPDATEIR or posedge NetGatedRESET)
    begin : RegUpdateCUSTOM_INSTR_3
      if (NetGatedRESET)
        CUSTOM_INSTR_3_S <= 1'b0;
      else
        CUSTOM_INSTR_3_S <= CUSTOM_INSTR_3_SUM;
    end
   assign CUSTOM_INSTR_3 = CUSTOM_INSTR_3_S;
   assign EXTEST_PULSE_0100 = ~(BIT3)  & BIT2  & ~(BIT1)  & ~(BIT0) ;
   assign EXTEST_PULSE_SUM = EXTEST_PULSE_0100 ;
   always @(posedge UPDATEIR or posedge NetGatedRESET)
    begin : RegUpdateEXTEST_PULSE
      if (NetGatedRESET)
        EXTEST_PULSE_S <= 1'b0;
      else
        EXTEST_PULSE_S <= EXTEST_PULSE_SUM;
    end
   assign EXTEST_PULSE = EXTEST_PULSE_S;
   assign CUSTOM_INSTR_10_1110 = BIT3  & BIT2  & BIT1  & ~(BIT0) ;
   assign CUSTOM_INSTR_10_SUM = CUSTOM_INSTR_10_1110 ;
   always @(posedge UPDATEIR or posedge NetGatedRESET)
    begin : RegUpdateCUSTOM_INSTR_10
      if (NetGatedRESET)
        CUSTOM_INSTR_10_S <= 1'b0;
      else
        CUSTOM_INSTR_10_S <= CUSTOM_INSTR_10_SUM;
    end
   assign CUSTOM_INSTR_10 = CUSTOM_INSTR_10_S;
   assign SAMPLE_0001 = ~(BIT3)  & ~(BIT2)  & ~(BIT1)  & BIT0 ;
   assign SAMPLE_SUM = SAMPLE_0001 ;
   always @(posedge UPDATEIR or posedge NetGatedRESET)
    begin : RegUpdateSAMPLE
      if (NetGatedRESET)
        SAMPLE_S <= 1'b0;
      else
        SAMPLE_S <= SAMPLE_SUM;
    end
   assign SAMPLE = SAMPLE_S;
   assign CUSTOM_INSTR_7_1011 = BIT3  & ~(BIT2)  & BIT1  & BIT0 ;
   assign CUSTOM_INSTR_7_SUM = CUSTOM_INSTR_7_1011 ;
   always @(posedge UPDATEIR or posedge NetGatedRESET)
    begin : RegUpdateCUSTOM_INSTR_7
      if (NetGatedRESET)
        CUSTOM_INSTR_7_S <= 1'b0;
      else
        CUSTOM_INSTR_7_S <= CUSTOM_INSTR_7_SUM;
    end
   assign CUSTOM_INSTR_7 = CUSTOM_INSTR_7_S;
   assign NET_BYPASS_DEFAULT = ~( CUSTOM_INSTR_5_SUM | CUSTOM_INSTR_2_SUM | EXTEST_TRAIN_SUM | CUSTOM_INSTR_9_SUM | EXTEST_SUM | CUSTOM_INSTR_6_SUM | CUSTOM_INSTR_4_SUM | CUSTOM_INSTR_1_SUM | PRELOAD_SUM | CUSTOM_INSTR_8_SUM | CUSTOM_INSTR_3_SUM | EXTEST_PULSE_SUM | CUSTOM_INSTR_10_SUM | SAMPLE_SUM | CUSTOM_INSTR_7_SUM ); 
   always @(posedge UPDATEIR or posedge NetGatedRESET)
     begin : RegUpdateBypassDefault
       if (NetGatedRESET)
         JTAG_BYPASS_DEFAULT_S <= 1'b0;
       else
         JTAG_BYPASS_DEFAULT_S <= NET_BYPASS_DEFAULT;
     end
   assign JTAG_BYPASS_DEFAULT = JTAG_BYPASS_DEFAULT_S;
   assign HZ = GND ;
   assign MC = GND | EXTEST_SUM | EXTEST_TRAIN_SUM | EXTEST_PULSE_SUM ;
   assign MB = GND | EXTEST_SUM | EXTEST_TRAIN_SUM | EXTEST_PULSE_SUM ;
   assign MA = GND ;
   always @(posedge UPDATEIR or posedge NetGatedRESET)
     begin : RegUpdateHZ
       if (NetGatedRESET)
         CTRL_HIGHZ_S <= 1'b0;
       else
         CTRL_HIGHZ_S <= HZ;
     end
   assign CTRL_HIGHZ = CTRL_HIGHZ_S;
   always @(posedge UPDATEIR or posedge NetGatedRESET)
     begin : RegUpdateMA
       if (NetGatedRESET)
         MODE_A_S <= 1'b0;
       else
         MODE_A_S <= MA;
     end
   assign MODE_A = MODE_A_S;
   always @(posedge UPDATEIR or posedge NetGatedRESET)
     begin : RegUpdateMB
       if (NetGatedRESET)
         MBInt <= 1'b0;
       else
         MBInt <= MB;
     end
   assign MODE_B = (MBInt | SE | IOTEST);
   always @(posedge UPDATEIR or posedge NetGatedRESET)
     begin : RegUpdateMC
       if (NetGatedRESET)
         MCInt <= 1'b0;
       else
         MCInt <= MC;
     end
   assign MODE_C = (MCInt | SE | IOTEST);
   always @(posedge TCK)
    begin : RegINCTRL
      ICInt <= INCTRLBuf2;
    end
   assign INCTRLBuf1 = (ICInt & IOTEST);
   assign INCTRL_S = INCTRLBuf1;
   assign INCTRLBuf2 = INCTRLBuf1;
   assign INCTRL = INCTRL_S;
   assign JTAG_BOUNDARY = (EXTEST_TRAIN | EXTEST | PRELOAD | EXTEST_PULSE | SAMPLE);
   assign HighzOrBypass = (JTAG_BYPASS_DEFAULT | BYPASS);
endmodule
`timescale 1ns/1ps
module udc_cntrl_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r ( 
databus,                         
refclock,                        
rstn_refclock,                   
hs_clock,                        
rstn_hs_clock,                   
byte_clock,                      
rstn_byte_clock,                 
sieclock,                        
rstn_sieclock,                   
usb2_1m_calib_clock,             
usb2_calib_rstn,                 
offset_correction_rstn,
primary_count_rstn,              
udc_bc_calib_rstn,               
xcvr_sie_rstn,                   
scan_mode,                       
udc_hsrx_rec_clk,                
suspendm,                        
powerdown,                       
sleepm,                          
xcvrselect,                      
xcvrselect_sync,
termselect,                      
opmode,                          
dppulldown,                      
dmpulldown,                      
pll_clkon,                       
pll_standalone,
pll_clk_gate_ack,
bist_mode_fs,
bist_mode_hs,
i_bist_mode_en,
i_bg_powergood,
idpullup,
i_bc_en,
txvalid,
txvalidh,
rxactive,                        
fslsserialmode,                  
tx_enable_n,                     
tx_dat,                          
tx_se0,                          
hssi_mode,
hssi_datain,
hssi_txvalid,
hssi_tx_enable,
hssi_ted_en,
tx_clockin,              
idle_rpu_enable,
o_hstx_boost_deemp_off,
i_hsrx_sampler_calib_done,       
i_afe_hsrx_rec_data,             
i_afe_hsrx_diff_data,            
i_afe_lsfsrx_ana,                
i_pll_coarse_code_done_ana,      
hs_clock_gate_ack,
hs_eb_data ,
hs_eb_data_valid ,
debug_no_eop ,
debug_hs_eop_condition ,
i_ted_calib_done,                
i_ted_squelch_ana,               
i_ded_ana,                       
i_rescal_calib_done,    
i_res_calib_code,       
loopback_ls,                     
loopback_fs,                     
loopback_hs,                     
bc_hstx_en,                      
hs_hostdisconnect,               
utmi_hspredrv_en,                
utmi_hsdrv_en,                   
utmi_hsddi,                      
tx_eop_start,                    
lsfsdrv_en,                      
lsfsddi,                         
lsfs_assert_sezero,              
test_linestate_fs_cnt_en,        
test_linestate_ls_cnt_en,        
test_linestate_ls_cnt,           
test_linestate_fs_cnt,           
test_hsrx_reg1,                  
test_hsrx_reg2,                  
test_hstx_reg1,                  
test_hstx_reg2,                  
test_hstx_reg3,                  
test_lsfs_rx_reg,                
test_lsfs_tx_reg1,               
test_lsfs_tx_reg2,               
test_afe_common_reg1,            
test_afe_common_reg2,            
test_afe_common_reg3,            
test_squelch_count_idle,         
test_pll_reg11,                  
test_pll_reg12,                  
test_pll_reg13,                  
test_pll_reg14,                  
test_hscalib,
test_fscalib,
test_bccalib,
test_fscalib_offset,
test_hscalib_offset,
test_bccalib_offset,
test_ana_block_en,
test_clipper_en,
test_tx_sq_cnt,
test_txvalid_ungate,
test_calib_rstn_dt,
test_serx_en_cntrl_opmode01,
test_ana_powerup,
test_hostdiscon_rst_reg,        
test_serx_bias_en,
test_spare_out,
i_cdr_test_digout,
debug_bc_state                 ,
bc_delay_cnt_reached_10us      ,
bc_delay_reached               ,
i_rid_float_a_comp_sts         ,        
i_rid_b_c_comp_sts             ,              
hostdisconnect,                  
rx_dp,                           
rx_dm,                           
rx_rcv,                          
hssi_dataout,
hssi_rxvalid,
hssi_squelch,
hssi_rxerror,
hssi_ded_ana,
hssi_chirp_data,
hssi_rx_clockout,                
o_usb2_phy_spare,
o_hsrx_en,                       
o_hsrx_sampler_enable,           
o_chirp_mode_en,                 
o_hstx_en,                       
o_hstx_en_delayed,               
o_hspredrv_en,                   
o_hsdrv_en,                      
o_hsddi,                         
o_lsfsrx_en,                     
o_serx_en,                       
o_serx_bias_en,                  
o_fs_edge_sel,                   
o_lsfstx_en,                     
o_lsfsdrv_en,                    
o_lsfs_ddi,                      
o_assert_sezero,                 
o_afe_suspendm_rx,                       
o_afe_suspendm_tx,                       
o_afe_fscalib_code,
o_afe_hscalib_code,
o_afe_bccalib_code,
o_afe_clipper_en,                
o_otgc_vbusvalid_en,             
o_otgc_absvalid_en,              
o_ed_en,                         
o_ted_en,                        
o_bg_pd,  
o_bg_pd_bg_ok,
o_pll_pso,                       
o_pll_pso_delay,                 
o_pll_pd,                        
o_pll_pd_ana,
o_pll_standby,                   
o_pll_ldo_ref_en,
o_pll_ldo_core_en,
o_pll_ldo_ref_core,
hs_clock_ungate,
pll_clockout_gate,
o_txvalid,
o_txvalidh,
bist_ana_powerup,
fslsserialmode_sync,             
lsfsrx_ana,                      
squelch,                         
hs_mode,                         
hs_mode_cdr,                     
ls_mode,                         
fs_mode,                         
fs_mode_pre,                     
host_mode,                       
loopback_lsfs,                   
all_calib_done,                  
inv_calib_rstn_pulse,            
pri_counter_reset,               
utmi_hsrx_rec_data,              
utmi_hsrx_rec_data_valid,        
utmi_hsrx_rec_decision_error,    
utmi_ted_squelch_ana,            
se0_detected,            
debug_lsfs_hostdisconnect,
debug_recovery_cnt_en,
debug_clean_linestate,
debug_filter_cnt_en,
debug_host_opmode,
debug_dev_opmode,
debug_afe_suspendm,     
debug_otgc_vbusvalid_en,        
debug_otgc_absvalid_en, 
debug_o_bg_pd_bg_ok,            
debug_o_bg_pd,          
debug_afe_clipper_en,   
debug_pullup_en, 
debug_ana_enable,
debug_hscalib_code,
debug_fscalib_code,
debug_bccalib_code,
i_afe_hsrx_rec_data_valid,
i_afe_hsrx_rec_decision_error,
rxdp_ana,                        
rxdm_ana,                        
i_afe_rxdp_ana,                  
i_afe_rxdm_ana,                  
lane_reverse,
raw_squelch_ana,
dprpu1_en,
dprpu2_en,
dmrpu1_en,
dmrpu2_en,
dprpd_en,
dmrpd_en,
hsrx_diff_data,
linestate_sel,
internal_opmode,
filter_linestate_d,
fmeda_linestate_se0
);
parameter HIGH_SPEED  = 2'b 00 ;
parameter FULL_SPEED  = 2'b 01 ;
parameter LOW_SPEED   = 2'b 10 ;
parameter CHIRP_MODE  = 2'b 11 ;
parameter LINESTATE_J   = 2'b 01 ;
parameter LINESTATE_K   = 2'b 10 ;
parameter LINESTATE_SE0 = 2'b 00 ;
parameter LINESTATE_SE1 = 2'b 11 ;
parameter HOSTDISCONNECT_RECOVERY_TIME  = 18'd 240000 ;  
parameter LSFS_DISCONNECT_TIME          = 8'd 180;       
parameter SERX_MASK_TIME_1US            = 8'd 60;        
parameter SERX_MASK_TIME_2US            = 8'd 120;       
parameter SERX_MASK_TIME_3US            = 8'd 180;       
parameter CALIB_DONE_WAIT = 2'b 00 ;
parameter IDLE_WAIT = 2'b 01 ;
parameter GENERATE_STORE_PULSE = 2'b 11 ;
parameter p_calib_code_len = 3'd7;
input           databus, scan_mode, refclock, rstn_refclock, hs_clock, rstn_hs_clock, byte_clock, 
                rstn_byte_clock, sieclock, rstn_sieclock, usb2_1m_calib_clock, usb2_calib_rstn, offset_correction_rstn,
                udc_bc_calib_rstn, xcvr_sie_rstn, primary_count_rstn, pll_clkon, pll_standalone, i_bg_powergood,idpullup, pll_clk_gate_ack ;
input           suspendm, termselect, dppulldown, dmpulldown, fslsserialmode, txvalid, txvalidh,i_bc_en,
                tx_enable_n, tx_dat, tx_se0, rxactive, bist_mode_fs, bist_mode_hs , i_bist_mode_en;
input           i_afe_hsrx_rec_data, i_afe_hsrx_diff_data, i_afe_lsfsrx_ana, i_pll_coarse_code_done_ana, i_ted_squelch_ana, i_ded_ana, i_ted_calib_done;
input           hs_hostdisconnect, utmi_hspredrv_en, utmi_hsdrv_en, utmi_hsddi, tx_eop_start, lsfsdrv_en, 
                lsfsddi, bc_hstx_en, lsfs_assert_sezero, test_linestate_fs_cnt_en, test_linestate_ls_cnt_en, i_hsrx_sampler_calib_done, 
                loopback_ls, loopback_fs, loopback_hs, i_afe_hsrx_rec_data_valid, i_afe_hsrx_rec_decision_error, udc_hsrx_rec_clk ;
input   [1:0]   xcvrselect, opmode, powerdown, test_hostdiscon_rst_reg, xcvrselect_sync, test_serx_bias_en;
input           sleepm ;
input   [3:0]   test_txvalid_ungate, test_afe_common_reg3, test_spare_out;
input   [4:0]   test_linestate_fs_cnt ;
input   [6:0]   test_fscalib, test_hscalib, test_bccalib ;
input   [7:0]   test_fscalib_offset, test_hscalib_offset, test_bccalib_offset;
input   [5:0]   i_res_calib_code;
input           i_rescal_calib_done;
input   [2:0]   test_ana_powerup;
input          hs_eb_data ;
input          hs_eb_data_valid ;
input          debug_no_eop ;
input          debug_hs_eop_condition ;
input          hs_clock_gate_ack;
input           test_serx_en_cntrl_opmode01;
input   [7:0]   test_linestate_ls_cnt, test_hsrx_reg2, test_hstx_reg1, test_hstx_reg2,
                test_lsfs_tx_reg1, test_afe_common_reg2, i_cdr_test_digout,
                test_pll_reg11, test_pll_reg12, test_pll_reg13, test_pll_reg14 ;
input   [2:0]   test_squelch_count_idle;
input   [7:0]   test_hstx_reg3, test_lsfs_rx_reg;
input   [5:0]   test_lsfs_tx_reg2, test_afe_common_reg1, test_hsrx_reg1;
input   [3:0]   debug_bc_state                 ;
input           bc_delay_cnt_reached_10us      ;
input           bc_delay_reached               ;
input           i_rid_float_a_comp_sts         ;        
input           i_rid_b_c_comp_sts             ;              
input           raw_squelch_ana                ;
output          hostdisconnect , o_txvalid, o_txvalidh, bist_ana_powerup;
output          o_pll_ldo_ref_en, o_pll_ldo_core_en;
output          rx_dp, rx_dm, rx_rcv ;
output          dprpu1_en, dmrpu1_en, dprpu2_en, dmrpu2_en, dprpd_en, dmrpd_en, 
                o_hsrx_en, o_hsrx_sampler_enable, o_chirp_mode_en, o_hstx_en, o_hstx_en_delayed, o_hspredrv_en,
                o_hsdrv_en, o_hsddi, o_fs_edge_sel, o_lsfstx_en, o_lsfsdrv_en, o_lsfs_ddi, o_assert_sezero,  
                o_serx_en, o_serx_bias_en, o_lsfsrx_en ;
output          o_ed_en, o_ted_en ;
output          o_pll_pso, o_pll_pso_delay, o_pll_pd,o_pll_pd_ana, o_pll_standby;
output          lsfsrx_ana, squelch, hs_mode, ls_mode, fs_mode, hs_mode_cdr,
                fs_mode_pre, host_mode, loopback_lsfs, all_calib_done, inv_calib_rstn_pulse, fslsserialmode_sync;
output          pri_counter_reset ;
output  wire    o_afe_suspendm_rx, o_afe_suspendm_tx, o_bg_pd, o_bg_pd_bg_ok, o_afe_clipper_en ;
output  wire    o_otgc_vbusvalid_en, o_otgc_absvalid_en ;
output  wire    utmi_hsrx_rec_data, utmi_hsrx_rec_data_valid, utmi_hsrx_rec_decision_error, 
                utmi_ted_squelch_ana;           
output  wire  [5:0]  o_pll_ldo_ref_core;
output          hs_clock_ungate, pll_clockout_gate;
output          debug_lsfs_hostdisconnect ,o_hstx_boost_deemp_off;
output          debug_recovery_cnt_en ;
output  [1:0]   debug_clean_linestate ;
output          debug_filter_cnt_en ;
output  [1:0]   debug_host_opmode, debug_dev_opmode ;
output          fmeda_linestate_se0;
input   [7:0]   test_ana_block_en ;
input   [1:0]   test_clipper_en ;       
output  [5:0]   o_afe_hscalib_code, o_afe_fscalib_code, o_afe_bccalib_code;
output  [7:0]   o_usb2_phy_spare;
output  [5:0]   debug_hscalib_code, debug_fscalib_code, debug_bccalib_code;
output  [6:0]   debug_ana_enable ;
output  [3:0]   debug_pullup_en ;
output          debug_afe_suspendm, debug_otgc_vbusvalid_en, debug_otgc_absvalid_en, debug_o_bg_pd_bg_ok,
                debug_o_bg_pd, debug_afe_clipper_en ;   
input           tx_clockin ;
input           idle_rpu_enable ;
output          se0_detected, hssi_rx_clockout;
input           hssi_mode, hssi_tx_enable, hssi_ted_en;
input   [1:0]   hssi_txvalid, hssi_datain;
output          hssi_rxvalid, hssi_rxerror, hssi_chirp_data, hssi_squelch, hssi_ded_ana;
output  [3:0]   hssi_dataout;
input           rxdp_ana, rxdm_ana, i_afe_rxdp_ana, i_afe_rxdm_ana;
input           lane_reverse;
input  wire    [4:0]   test_tx_sq_cnt;
input  wire    [5:0]   test_calib_rstn_dt;
output          hsrx_diff_data;
output          linestate_sel;
output  [1:0]   filter_linestate_d, internal_opmode;
wire            debug_lsfs_hostdisconnect, fslsserialmode_sync;
wire            debug_recovery_cnt_en ;
wire    [1:0]   debug_clean_linestate ;
wire            debug_filter_cnt_en ;
wire    [1:0]   debug_host_opmode, debug_dev_opmode ;
wire            hspredrv_en, hsdrv_en, hsddi,afeif_hsddi, afeif_hsdrv_en, afeif_hspredrv_en; 
reg             hostdisconnect;
reg             hsdrv_en_delay, hsddi_delay, hs_termination_on_ctrl, hsdrv_en_d, hsdrv_en_reg, assert_sezero_d, lsfs_ddi_d, 
                lsfsdrv_en_d, se0_detected, calib_active_rst_cnt_en, hscalib_hssync_d, fscalib_hssync_d, bccalib_hssync_d,
                tm_calib_trigger_d, pull_up_en, hs_termination_on_sync, serx_mask_cnt_en, serx_mask_cnt_reached_d, afe_suspendm,
                lsfstx_en_d, hsdrv_en_delay_d, keep_alive_sie;
reg     [4:0]   hsdrv_cnt ;
reg     [7:0]   serx_mask_cnt, serx_mask_threshold, o_usb2_phy_spare;
reg     [4:0]   calib_active_rst_cnt ;
wire    [18:0]  primary_count_threshold ;
reg     [5:0]   autocal_hscalib_code, autocal_bccalib_code, autocal_fscalib_code;
wire    [5:0]   afe_hscalib_code, afe_fscalib_code, afe_bccalib_code;
wire            o_hsrx_en, o_hsrx_sampler_enable, o_chirp_mode_en, o_hstx_en, o_hstx_en_delayed, o_hspredrv_en,
                o_fs_edge_sel, o_lsfstx_en, lsfstx_en_loc, o_lsfsdrv_en, o_lsfs_ddi, o_serx_en, o_serx_bias_en, o_lsfsrx_en, 
                rx_dp, rx_dm, rx_rcv, o_ed_en, o_ted_en, o_pll_pso, hspredrv_en_loc,
                o_pll_pso_delay, o_pll_pd, o_pll_standby,  chirp_mode_en, txvalid_lsfstx_delay_reached, txvalid_hstx_delay_reached,
                hsrx_rec_data, hsrx_diff_data, lsfsrx_ana, squelch, hs_mode, 
                ls_mode, fs_mode, fs_mode_pre, host_mode, all_calib_done, inv_calib_rstn_pulse, o_hsdrv_en, o_hsddi,
                loopback_lsfs, hsdrv_en_loc, hsddi_loc, negedge_hsdrv_en, hsdrv_cnt_reached, hsdrv_cnt_en,
                assert_sezero_loc, lsfs_ddi_loc, lsfsdrv_en_loc, test_lsfs_tx_reg2_0_sync, test_lsfs_tx_reg2_2_sync,
                test_lsfs_tx_reg2_4_sync, test_hstx_reg2_2_sync, test_hstx_reg2_4_sync, hs_termination_on, hs_mode_async, ls_mode_async, fs_mode_async,
                fs_mode_pre_async, primary_count_reached, calib_trigger, calib_active_rst_cnt_reached, 
                calib_spc_choice, posedge_calib_spc_choice, autocal_enable, autocal_enable_n, posedge_hsdrv_en, tx_ted_on, clean_linestate_update,
                tx_squelch_cnt_reached, squelch_mask, serx_mask_cnt_reached, recovery_condition,
                pll_ldo_delay_cnt_reached,lsfstx_en_sync, txvalid_ungate_sync, keep_alive, pll_ldo_iso_cnt_reached;
wire    [4:0]   hsdrv_cnt_threshold ;
wire    [3:0]   tx_squelch_cnt_threshold ;
wire    [4:0]   calib_active_rst_cnt_threshold ;
reg             sq_s1, sq_s2, sq_s3, sq_s4, sq_s5;
wire            squelch_extended, squelch_fin;
reg             linestate_sel_int, linestate_sel_int_d;
reg             rst_autocal_store, linestate_sel, filter_cnt_en, termselect_d, termselect_sync, hs_mode_d, recovery_cnt_en, hstx_en_d, hstx_delay_en,
                lsfs_hostdisconnect, store_rescal_reg, primary_count_reached_d, calib_spc_choice_d,
                suspendm_init, squelch_cnt_reached_d, lsfsdrv_en_mux_sync_d, fsls_mode_sezero_d, tx_squelch_cnt_en, ted_down_time,
                suspend_init_d, suspend_init_2d, soft_disconnect_sie, chirp_mode_sie, chirp_mode_sie_d;
reg     [1:0]   dev_opmode, host_opmode, internal_opmode_reg, sync_linestate, sync_linestate_reg, 
                clean_linestate, filter_linestate_d, rescalib_code_next_state, rescalib_code_state, squelch_cnt, xcvrselect_sync_3d,
                xcvrselect_sync_2d, xcvrselect_sync_d ;
reg     [3:0]   tx_squelch_cnt;
reg     [7:0]   filter_cnt, lsfs_discon_cnt, sec_counter, sec_counter_threshold ;
reg     [17:0]  recovery_cnt ;
wire            hs_assert_sezero_mux, hsrx_diff_data_sync, rxdp_sync, rxdm_sync, soft_disconnect, filter_en, linestate_change, serx_en, serx_chirp_en,
                sync_linestate_se0, filter_cnt_trigger, filter_cnt_rst, non_se0_detect, filter_cnt_reached,
                suspend_mode, recovery_cnt_reached, linestate_update, linestate_active, linestate_inactive,
                lsfs_disconnect_en, lsfs_connect_en, lsfs_discon_cnt_reached, negedge_hstx_en, rpu1_en, rpu2_en, 
                pll_coarse_code_done, posedge_hstx_en, posedge_lsfstx_en, negedge_lsfstx_en,
                ted_calib_done, hsrx_sampler_calib_done, store_rescal, txvalid_ungate, w_serx_poweroff,w_serx_bias_poweroff,
                suspendm_sync, dprpd_en, txvalid_ungate_delay_reached, pos_ldo_cnt_reached,
                dmrpd_en, dprpu1_en, dmrpu1_en, dprpu2_en, dmrpu2_en, rpu2_en_loc, lsfs_hostdisconnect_rst, fslsser_rpu2_en, lsfsdrv_en_mux, 
                lsfs_assert_sezero_mux, lsfsddi_mux, idle_line, hscalib_hssync, fscalib_hssync, 
                bccalib_hssync, squelch_cnt_reached, posedge_squelch, lsfsdrv_en_mux_sync, negedge_lsfsdrv_en, fslsserial_sezero,
                fslsserial_sezero_sync, fsls_mode_sezero, negedge_fsls_mode_sezero, autocal_store, hstx_en_sync, chirp_mode;
wire            afeif_hsrx_rec_clk, afeif_hsrx_rec_data, afeif_hsrx_rec_data_valid,     
                afeif_hsrx_rec_decision_error, tm_spc_sel, sec_counter_reached, pll_ldo_core, pll_ldo_ref;              
wire    [1:0]   filter_linestate, hstx_en_delay_threshold, squelch_cnt_threshold, filter_linestate_init ;
wire    [7:0]   filter_cnt_threshold  ;
reg             bg_en, afe_clipper_en, otgc_vbusvalid_en, otgc_absvalid_en, cntrl_serx_en,
                lsfstx_delay_en, hstx_en_delay_reached,pll_clk_gate_ack_d;              
wire    [1:0]   afeif_tx_data_hs, afeif_tx_enable_hs ;
wire            afeif_tx_clk240, afeif_hs_current_en, afeif_rx_clk120, afeif_rx_valid_hs, afeif_rx_error_hs ;   
wire    [3:0]   afeif_rx_data_hs ;
reg     [4:0]   txvalid_ungate_hs_threshold,hstx_en_cnt_5us, delay_threshold_5us;
reg     [3:0]   lsfstx_en_cnt, txvalid_ungate_lsfs_threshold;
reg     [18:0]  q_out ;
wire    [2:0]   spc_choice, pll_ldo_delay_cnt_reached_sel;
wire            device_mode_dp, device_mode,   tx_ted_on_sync,
                deassert_ted_down_time, ted_down_en, tx_squelch_cnt_threshold_en, test_hstx_reg2_6_sync, 
                tm_calib_trigger, posedge_tm_calib_trigger, calib_act_rst_cnt_threshold_en,
                posedge_suspendm_init, posedge_suspendm_init_d, squelch_cnt_threshold_en, afeif_lsfsddi,
                ONE;
wire     	negedge_hsdrv_cnt_en, posedge_hsdrv_en_loc_n, hsrx_sampler_enable_seq_rstn;
reg 		hsdrv_cnt_en_delay, hsdrv_en_loc_delay;
wire            hsrx_sampler_enable_seq;
assign ONE= 1'b1;
reg             auto_store_rescal_reg;
assign debug_lsfs_hostdisconnect = lsfs_hostdisconnect ;
assign debug_recovery_cnt_en     = recovery_cnt_en ;
assign debug_clean_linestate     = clean_linestate ;
assign debug_filter_cnt_en       = filter_cnt_en ;
assign debug_host_opmode         = host_opmode ;
assign debug_dev_opmode          = dev_opmode ;
assign debug_afe_suspendm        = o_afe_suspendm_rx ;
assign debug_otgc_vbusvalid_en   = o_otgc_vbusvalid_en ;
assign debug_otgc_absvalid_en    = o_otgc_absvalid_en ;
assign debug_o_bg_pd_bg_ok       = o_bg_pd_bg_ok ; 
assign debug_o_bg_pd             = o_bg_pd ; 
assign debug_afe_clipper_en      = o_afe_clipper_en ;
assign debug_pullup_en           = 4'd0 ;
assign debug_ana_enable          = {3'b0, afe_suspendm, o_otgc_vbusvalid_en, o_otgc_absvalid_en, o_afe_clipper_en} ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b1)) c_rxcntrl_squelch_sync (
.clock          (hs_clock) ,
.reset_n        (rstn_hs_clock) ,
.d_in           (i_ted_squelch_ana) ,
.d_out          (squelch)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0),.NUM_FLOPS(6)) c_rxcntrl_hsrcv_sync (
.clock          (hs_clock) ,
.reset_n        (rstn_hs_clock) ,
.d_in           (hsrx_diff_data) ,
.d_out          (hsrx_diff_data_sync)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_rxcntrl_rxdp_sync (
.clock          (hs_clock) ,
.reset_n        (rstn_hs_clock) ,
.d_in           (rxdp_ana) ,
.d_out          (rxdp_sync)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_rxcntrl_rxdm_sync (
.clock          (hs_clock) ,
.reset_n        (rstn_hs_clock) ,
.d_in           (rxdm_ana) ,
.d_out          (rxdm_sync)
);
assign fslsserialmode_sync      = fslsserialmode & (~hs_mode) ;
assign hsrx_rec_data    = lane_reverse ? ~i_afe_hsrx_rec_data  : i_afe_hsrx_rec_data ;
assign hsrx_diff_data   = lane_reverse ? ~i_afe_hsrx_diff_data : i_afe_hsrx_diff_data ;
assign lsfsrx_ana       = fslsserialmode_sync ? 1'b 0 : (lane_reverse ? ~i_afe_lsfsrx_ana : i_afe_lsfsrx_ana) ;
always @(posedge sieclock or negedge rstn_sieclock)
begin
        if(!rstn_sieclock)
        termselect_sync <= 1'b 1 ;  
        else
        termselect_sync <= termselect ;
end 
always @(posedge sieclock or negedge rstn_sieclock)
begin
      if(!rstn_sieclock)
      begin
      soft_disconnect_sie <= 1'b0 ;  
      chirp_mode_sie <= 1'b0 ;  
      keep_alive_sie <= 1'b0 ;  
      chirp_mode_sie_d <= 1'b0 ;  
      end
      else
      begin
      soft_disconnect_sie <= soft_disconnect ;
      chirp_mode_sie <= chirp_mode ;
      keep_alive_sie <= keep_alive ;
      chirp_mode_sie_d <= chirp_mode_sie ;
      end
end 
always @(posedge sieclock or negedge rstn_sieclock)
begin
        if(!rstn_sieclock)
        begin
            xcvrselect_sync_d <= 2'b 01;
            xcvrselect_sync_2d <= 2'b 01;   
            xcvrselect_sync_3d <= 2'b 01;       
        end
        else
        begin
            xcvrselect_sync_d <= xcvrselect_sync;
            xcvrselect_sync_2d <= xcvrselect_sync_d;    
            xcvrselect_sync_3d <= xcvrselect_sync_2d;       
        end
end
assign soft_disconnect          = (opmode == 2'b 01) ;
assign chirp_mode               = (opmode == 2'b 10) ;
assign keep_alive               = (opmode == 2'b 11) ;
assign hs_mode_async            = soft_disconnect ? 1'b 0 : (loopback_hs | (xcvrselect == 2'b 00)) ;
assign fs_mode_async            = (loopback_fs | (xcvrselect == 2'b 01)) ;
assign ls_mode_async            = (loopback_ls | (xcvrselect == 2'b 10)) ;
assign fs_mode_pre_async        = (xcvrselect == 2'b 11) ;
assign hs_mode                  = soft_disconnect_sie ? 1'b 0 : (loopback_hs | (xcvrselect_sync == 2'b 00)) ;
assign hs_mode_cdr              = soft_disconnect_sie ? 1'b 0 : (loopback_hs | (xcvrselect_sync_3d == 2'b 00)) ;
assign fs_mode                  = soft_disconnect_sie ? 1'b 0 : (loopback_fs | (xcvrselect_sync == 2'b 01)) ;
assign ls_mode                  = soft_disconnect_sie ? 1'b 0 : (loopback_ls | (xcvrselect_sync == 2'b 10)) ;
assign fs_mode_pre              = soft_disconnect_sie ? 1'b 0 : (xcvrselect_sync == 2'b 11) ;
assign host_mode                = (dppulldown & dmpulldown) ;
assign device_mode_dp           = (dppulldown == 1'b0) ? 1'b1 : 1'b0 ;
assign device_mode              = test_hostdiscon_rst_reg[0] ? test_hostdiscon_rst_reg[1] : device_mode_dp;
assign loopback_lsfs            = (loopback_ls | loopback_fs | bist_mode_fs) ;
assign internal_opmode  = host_mode ? host_opmode : dev_opmode ;
always @*
begin
        case({xcvrselect,termselect})
        3'b 000:  dev_opmode = HIGH_SPEED ;      
        3'b 001:  dev_opmode = CHIRP_MODE ;      
        3'b 010:  dev_opmode = FULL_SPEED ;      
        3'b 011:  dev_opmode = FULL_SPEED ;      
        3'b 100:  dev_opmode = LOW_SPEED  ;      
        3'b 101:  dev_opmode = LOW_SPEED  ;      
        3'b 110:  dev_opmode = FULL_SPEED ;      
        3'b 111:  dev_opmode = FULL_SPEED ;      
        endcase
end
always @*
begin
        case({xcvrselect,termselect,opmode})
        5'b 00000: host_opmode = HIGH_SPEED ;    
        5'b 00001: host_opmode = HIGH_SPEED ;    
        5'b 00010: host_opmode = CHIRP_MODE ;    
        5'b 00011: host_opmode = HIGH_SPEED ;    
        5'b 00100: host_opmode = HIGH_SPEED ;    
        5'b 00101: host_opmode = HIGH_SPEED ;    
        5'b 00110: host_opmode = HIGH_SPEED ;    
        5'b 00111: host_opmode = HIGH_SPEED ;    
        5'b 01000: host_opmode = FULL_SPEED ;    
        5'b 01001: host_opmode = FULL_SPEED ;    
        5'b 01010: host_opmode = FULL_SPEED ;    
        5'b 01011: host_opmode = FULL_SPEED ;    
        5'b 01100: host_opmode = FULL_SPEED ;    
        5'b 01101: host_opmode = FULL_SPEED ;    
        5'b 01110: host_opmode = FULL_SPEED ;    
        5'b 01111: host_opmode = FULL_SPEED ;    
        5'b 10000: host_opmode = LOW_SPEED  ;    
        5'b 10001: host_opmode = LOW_SPEED  ;    
        5'b 10010: host_opmode = LOW_SPEED  ;    
        5'b 10011: host_opmode = LOW_SPEED  ;    
        5'b 10100: host_opmode = LOW_SPEED  ;    
        5'b 10101: host_opmode = LOW_SPEED  ;    
        5'b 10110: host_opmode = LOW_SPEED  ;    
        5'b 10111: host_opmode = LOW_SPEED  ;    
        5'b 11000: host_opmode = FULL_SPEED ;    
        5'b 11001: host_opmode = FULL_SPEED ;    
        5'b 11010: host_opmode = FULL_SPEED ;    
        5'b 11011: host_opmode = FULL_SPEED ;    
        5'b 11100: host_opmode = FULL_SPEED ;    
        5'b 11101: host_opmode = FULL_SPEED ;    
        5'b 11110: host_opmode = FULL_SPEED ;    
        5'b 11111: host_opmode = FULL_SPEED ;    
        endcase
end
always @(posedge sieclock or negedge rstn_sieclock)
begin
        if(~rstn_sieclock)
        begin
                linestate_sel_int       <= 1'b 0 ;
                linestate_sel_int_d     <= 1'b 0 ;
                linestate_sel           <= 1'b 0 ;
                internal_opmode_reg     <= FULL_SPEED ;
        end
        else
        begin
                linestate_sel_int       <= 1'b 1 ;
                linestate_sel_int_d     <= linestate_sel_int ;
                linestate_sel           <= linestate_sel_int_d ;
                internal_opmode_reg     <= internal_opmode ;
        end
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
        if(~rstn_hs_clock)
        begin
                sq_s1 <= 1'b1;
                sq_s2 <= 1'b1;
                sq_s3 <= 1'b1;
                sq_s4 <= 1'b1;
                sq_s5 <= 1'b1;
        end
        else
        begin
                sq_s1 <= squelch;
                sq_s2 <= sq_s1;
                sq_s3 <= sq_s2;
                sq_s4 <= sq_s3;
                sq_s5 <= sq_s4;
        end
end
assign squelch_extended = squelch & sq_s3;
assign squelch_shrunk = (squelch | sq_s4 | sq_s5);
assign squelch_fin = (hs_mode & databus) ? squelch_extended : squelch;
always @*
begin
        case(internal_opmode_reg)
        HIGH_SPEED: sync_linestate = ( squelch_mask & squelch_fin ) ? LINESTATE_SE0 : LINESTATE_J ;      
        FULL_SPEED: sync_linestate = {rxdm_sync,rxdp_sync} ;                                     
        LOW_SPEED : sync_linestate = {rxdm_sync,rxdp_sync} ;                                     
        CHIRP_MODE: sync_linestate = ( squelch_shrunk ) ? LINESTATE_SE0 :
                                        hsrx_diff_data_sync ? LINESTATE_J : LINESTATE_K ;        
        endcase
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
        if(~rstn_hs_clock)
                sync_linestate_reg <= LINESTATE_J ;
        else
                sync_linestate_reg <= sync_linestate ;
end
assign filter_en                = (internal_opmode_reg[1] ^ internal_opmode_reg[0]) ;    
assign linestate_change         = (sync_linestate != sync_linestate_reg) ;               
assign sync_linestate_se0       = (sync_linestate[1] ~^ sync_linestate[0]) ;             
assign filter_cnt_trigger  = ((filter_en & linestate_change & sync_linestate_se0) | suspend_mode) ;
assign non_se0_detect = (filter_en & linestate_change & ~sync_linestate_se0) ;
assign filter_cnt_rst = (filter_cnt_reached | non_se0_detect) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
        if(~rstn_hs_clock)
                filter_cnt_en <= 1'b 0 ;
        else if(filter_cnt_rst)
                filter_cnt_en <= 1'b 0 ;
        else if(filter_cnt_trigger)
                filter_cnt_en <= 1'b 1 ;
end
assign filter_cnt_threshold = ls_mode ? (test_linestate_ls_cnt_en ? test_linestate_ls_cnt : 8'd 124) 
                                        : (test_linestate_fs_cnt_en ? {3'd0,test_linestate_fs_cnt} : 8'd 16) ;
assign filter_cnt_reached   = (filter_cnt == filter_cnt_threshold) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
        if(~rstn_hs_clock)
                filter_cnt <= 8'd 0 ;
        else if(filter_cnt_rst)
                filter_cnt <= 8'd 0 ;
        else if(filter_cnt_en)
                filter_cnt <= filter_cnt + 8'd 1 ;
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
        if(~rstn_hs_clock)
                se0_detected <= 1'd 0 ;
        else if(non_se0_detect | hs_mode)
                se0_detected <= 1'd 0 ;
        else if(filter_cnt_reached)
                se0_detected <= 1'b 1 ;
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
        if(~rstn_hs_clock)
                clean_linestate <= LINESTATE_J ;
        else if(filter_cnt_rst | suspend_mode | serx_mask_cnt_en | clean_linestate_update)
                clean_linestate <= (suspend_mode | serx_mask_cnt_en) ? LINESTATE_SE0: (non_se0_detect ? sync_linestate : sync_linestate_reg) ;
end
assign clean_linestate_update = test_lsfs_tx_reg1[7] ? 1'b0 : serx_mask_cnt_reached_d;
assign filter_linestate_init  = filter_en ? clean_linestate : sync_linestate_reg ;
assign filter_linestate       = (hostdisconnect & (recovery_cnt_en | recovery_condition)) ? LINESTATE_SE0 : filter_linestate_init;
assign fmeda_linestate_se0    = (hostdisconnect & (recovery_cnt_en | recovery_condition)) ? 1'b1 : (filter_en & (suspend_mode | serx_mask_cnt_en));
always @(posedge sieclock or negedge rstn_sieclock)
begin
        if(~rstn_sieclock)
                filter_linestate_d      <= LINESTATE_J ;
        else
                filter_linestate_d      <= filter_linestate ;
end
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
        if(~rstn_byte_clock)
        begin
                serx_mask_cnt_reached_d <= 1'b0 ;
        end
        else 
        begin
                serx_mask_cnt_reached_d <= serx_mask_cnt_reached ;
        end
end
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
        if(~rstn_byte_clock)
                serx_mask_cnt_en <= 1'b0 ;
        else if(serx_mask_cnt_reached)
                serx_mask_cnt_en <= 1'b0 ;
        else if(suspend_mode & ~test_lsfs_tx_reg1[6])
                serx_mask_cnt_en <= 1'b1 ;
end
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
        if(~rstn_byte_clock)
                serx_mask_cnt <= 8'd 0 ;
        else if(serx_mask_cnt_reached)
                serx_mask_cnt <= 8'd 0 ;
        else if(serx_mask_cnt_en)
                serx_mask_cnt <= serx_mask_cnt + 8'd 1 ;
end
always @(*)
begin
        if(~test_lsfs_tx_reg1[6])
        begin
                case(test_lsfs_tx_reg1[5:4])
                2'b 01:  serx_mask_threshold = SERX_MASK_TIME_1US ;     
                2'b 10:  serx_mask_threshold = SERX_MASK_TIME_2US ;     
                2'b 11:  serx_mask_threshold = SERX_MASK_TIME_3US ;    
                default: serx_mask_threshold = SERX_MASK_TIME_2US ;    
                endcase
        end
        else
                serx_mask_threshold = SERX_MASK_TIME_2US ;      
end
assign serx_mask_cnt_reached = (serx_mask_cnt == serx_mask_threshold) ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
        if(~rstn_byte_clock)
        begin
                termselect_d    <= 1'b 1 ;
                hs_mode_d       <= 1'b 0 ;
        end
        else
        begin
                termselect_d    <= termselect_sync ;
                hs_mode_d       <= hs_mode ;
        end
end
assign suspend_mode = ((~hs_mode & hs_mode_d) & (termselect_sync & ~termselect_d)) ;
assign recovery_condition = ((~hs_mode & hs_mode_d) & (termselect_sync & ~termselect_d) & host_mode & ~chirp_mode_sie_d) ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
        if(~rstn_byte_clock)
                recovery_cnt_en <= 1'b 0 ;
        else if(soft_disconnect_sie | hs_mode_async | recovery_cnt_reached | device_mode)
                recovery_cnt_en <= 1'b 0 ;
        else if(recovery_condition)
                recovery_cnt_en <= 1'b 1 ;
end
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
        if(~rstn_byte_clock)
                recovery_cnt <= 18'd 0 ;
        else if(soft_disconnect_sie | hs_mode_async | recovery_cnt_reached)
                recovery_cnt <= 18'd 0 ;
        else if(recovery_cnt_en)
                recovery_cnt <= recovery_cnt + 18'd 1 ;
end
assign recovery_cnt_reached = recovery_cnt_en ? (recovery_cnt == HOSTDISCONNECT_RECOVERY_TIME) : 1'b 0 ;
assign linestate_update   = (filter_linestate != filter_linestate_d) ;
assign linestate_inactive = (filter_linestate == LINESTATE_SE0 && filter_linestate_d == LINESTATE_SE0) ;
assign linestate_active   = ~linestate_inactive ;       
assign lsfs_disconnect_en = (~hs_mode_async & termselect & ~suspend_mode & ~recovery_cnt_en & linestate_inactive & ~lsfs_hostdisconnect & ~fslsserialmode_sync & ~device_mode) ;
assign lsfs_connect_en    = (~hs_mode_async & termselect & ~suspend_mode & ~recovery_cnt_en & linestate_active   &  lsfs_hostdisconnect & ~fslsserialmode_sync & ~device_mode) ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
        if(~rstn_byte_clock)
                lsfs_discon_cnt <= 8'd 0 ;
        else if(soft_disconnect_sie | hs_mode_async | linestate_update | lsfs_discon_cnt_reached | device_mode)
                lsfs_discon_cnt <= 8'd 0 ;
        else if(lsfs_disconnect_en | lsfs_connect_en)
                lsfs_discon_cnt <= lsfs_discon_cnt + 8'd 1 ;
end
assign lsfs_discon_cnt_reached = (lsfs_discon_cnt == LSFS_DISCONNECT_TIME) ;
assign lsfs_hostdisconnect_rst = (host_mode & hs_mode_async & ~termselect & hostdisconnect) ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
        if(~rstn_byte_clock)
                lsfs_hostdisconnect <= 1'b 0 ;
        else if(device_mode)
                lsfs_hostdisconnect <= 1'b 0 ;
        else if(soft_disconnect_sie | lsfs_hostdisconnect_rst)
                lsfs_hostdisconnect <= 1'b 1 ;
        else if(lsfs_discon_cnt_reached)
                lsfs_hostdisconnect <=  linestate_inactive ;
end
always @(posedge sieclock or negedge rstn_sieclock)
begin
        if(~rstn_sieclock)              
                hostdisconnect <= 1'b 0 ;
        else if(device_mode)
                hostdisconnect <= 1'b 0 ;
        else if(host_mode & ~recovery_condition & ~recovery_cnt_en)
                hostdisconnect <= hs_mode_async ? hs_hostdisconnect : lsfs_hostdisconnect ;
end
assign rx_dp  = fslsserialmode_sync? (lane_reverse ? i_afe_rxdm_ana: i_afe_rxdp_ana) : 1'b0;
assign rx_dm  = fslsserialmode_sync? (lane_reverse ? i_afe_rxdp_ana: i_afe_rxdm_ana) : 1'b0;
assign rx_rcv = fslsserialmode_sync ? (lane_reverse ? ~i_afe_lsfsrx_ana : i_afe_lsfsrx_ana) : 1'b 0 ;
udc_pll_cntrl_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_udc_pll_cntrl
(
.refclock                  (refclock),
.usb2_calib_clock          (usb2_1m_calib_clock),
.udc_bc_calib_rstn         (udc_bc_calib_rstn),
.pll_standalone            (pll_standalone),
.pll_clkon                 (pll_clkon),
.suspendm                  (suspendm),
.sleepm                    (sleepm),
.hs_clock_gate_ack         (hs_clock_gate_ack),
.pll_clk_gate_ack          (pll_clk_gate_ack),
.test_pll_reg11            (test_pll_reg11),
.test_pll_reg12            (test_pll_reg12),
.test_pll_reg13            (test_pll_reg13),
.test_pll_reg14            (test_pll_reg14),
.o_pll_pso                 (o_pll_pso),                  
.o_pll_pso_delay           (o_pll_pso_delay),            
.o_pll_pd                  (o_pll_pd),                   
.o_pll_pd_ana              (o_pll_pd_ana),
.o_pll_standby             (o_pll_standby),                      
.o_pll_ldo_ref_en          (o_pll_ldo_ref_en),
.o_pll_ldo_core_en         (o_pll_ldo_core_en),
.o_pll_ldo_ref_core        (o_pll_ldo_ref_core),  
.hs_clock_ungate           (hs_clock_ungate),
.pll_clockout_gate         (pll_clockout_gate)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_pll_coarse_code_done_sync (
.clock          (refclock) ,
.reset_n        (rstn_refclock) ,
.d_in           (i_pll_coarse_code_done_ana) ,
.d_out          (pll_coarse_code_done)
);
assign dprpd_en =  (test_afe_common_reg1[0] ? test_afe_common_reg1[1] : dppulldown) ;
assign dmrpd_en =  (test_afe_common_reg1[2] ? test_afe_common_reg1[3] : dmpulldown) ;
assign rpu1_en          = (termselect & ~host_mode);
assign dprpu1_en        =  (test_afe_common_reg2[0] ? test_afe_common_reg2[1] : 
                                (soft_disconnect ? 1'b 0 : (~ls_mode_async & rpu1_en & pull_up_en))) ;
assign dmrpu1_en        =  (test_afe_common_reg2[2] ? test_afe_common_reg2[3] :
                                (soft_disconnect ? 1'b 0 : (ls_mode_async & rpu1_en & pull_up_en))) ;
assign rpu2_en_loc      = (rpu1_en 
                           & ~o_lsfsdrv_en       
                           & ~rxactive           
                           & ~hs_mode_async      
                          ) ; 
assign rpu2_en          = fslsserialmode_sync ? (test_afe_common_reg1[4] ? test_afe_common_reg1[5] : fslsser_rpu2_en) : rpu2_en_loc ;
assign dprpu2_en        =  (test_afe_common_reg2[4] ? test_afe_common_reg2[5] :
                                (soft_disconnect ? 1'b 0 : (~ls_mode_async & rpu2_en & pull_up_en))) ;
assign dmrpu2_en        =  (test_afe_common_reg2[6] ? test_afe_common_reg2[7] :
                                (soft_disconnect ? 1'b 0 : ( ls_mode_async & rpu2_en & pull_up_en))) ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_tx_ted_on (
.clock          (hs_clock),
.reset_n        (rstn_hs_clock),
.d_in           (tx_ted_on),
.d_out          (tx_ted_on_sync)
);
assign deassert_ted_down_time = hssi_mode ? tx_ted_on_sync : ( keep_alive_sie ? negedge_hsdrv_en : tx_eop_start ) ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_ted_down_en (
.clock          (hs_clock),
.reset_n        (rstn_hs_clock),
.d_in           (test_hstx_reg3[7]),
.d_out          (ted_down_en)
);
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
        if(~rstn_hs_clock)
        ted_down_time   <= 1'b 0 ;
        else if (posedge_hsdrv_en & ~chirp_mode_en & ~ted_down_en & ~(bist_mode_hs | loopback_hs))
        ted_down_time   <= 1'b 1 ;
        else if (deassert_ted_down_time)
        ted_down_time   <= 1'b 0 ;
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
        if(~rstn_hs_clock)
        tx_squelch_cnt_en       <= 1'b 0 ;
        else if (tx_squelch_cnt_reached)
        tx_squelch_cnt_en       <= 1'b 0 ;
        else if (negedge_hsdrv_en & ~chirp_mode_en & ~ted_down_en & ~(bist_mode_hs | loopback_hs))
        tx_squelch_cnt_en       <= 1'b 1 ;
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
        if(~rstn_hs_clock)
        tx_squelch_cnt  <= 4'd 0 ;
        else if (tx_squelch_cnt_reached)
        tx_squelch_cnt  <= 4'd 0 ;
        else if (tx_squelch_cnt_en)
        tx_squelch_cnt  <= tx_squelch_cnt + 4'd 1 ;
end
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_tx_squelch_threshold (
.clock          (hs_clock),
.reset_n        (rstn_hs_clock),
.d_in   (test_tx_sq_cnt[0]),
.d_out  (tx_squelch_cnt_threshold_en)
);
assign tx_squelch_cnt_threshold = tx_squelch_cnt_threshold_en ? test_tx_sq_cnt[4:1] : 4'd 8 ;
assign tx_squelch_cnt_reached = ( tx_squelch_cnt == tx_squelch_cnt_threshold ) ;
assign squelch_mask = chirp_mode_en ? 1'b 1 : ~(( hsdrv_en_delay_d | o_hsdrv_en | tx_squelch_cnt_en) & ~ted_down_en & ~(bist_mode_hs | loopback_hs) ) ;
assign o_ed_en  =  (test_afe_common_reg3[0] ? test_afe_common_reg3[1] : hs_mode_async) ;
assign o_ted_en =  (test_afe_common_reg3[2] ? test_afe_common_reg3[3] : (hs_mode_async & (~ted_down_time))) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
        if(~rstn_hs_clock)
                hsdrv_en_d  <= 1'b 0 ;
        else
                hsdrv_en_d  <= hsdrv_en_loc ;
end
assign posedge_hsdrv_en = (hsdrv_en_loc & ~hsdrv_en_d) ;
assign negedge_hsdrv_en = (~hsdrv_en_loc & hsdrv_en_d) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
        if(~rstn_hs_clock)
                hsdrv_en_reg  <= 1'b 0 ;
        else if(soft_disconnect_sie | ~hs_mode | hsdrv_cnt_reached)
                hsdrv_en_reg  <= 1'b 0 ;
        else if(negedge_hsdrv_en)
                hsdrv_en_reg  <= 1'b 1 ;
end
assign hsdrv_cnt_en        = (negedge_hsdrv_en | hsdrv_en_reg) ;
assign hsdrv_cnt_threshold = test_hsrx_reg2[0] ? test_hsrx_reg2[5:1] : 5'd 9 ;  
assign hsdrv_cnt_reached   = (hsdrv_cnt == hsdrv_cnt_threshold) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
        if(~rstn_hs_clock)
                hsdrv_cnt  <= 5'd 0 ;
        else if(soft_disconnect_sie | ~hs_mode | hsdrv_cnt_reached)
                hsdrv_cnt  <= 5'd 0 ;
        else if(hsdrv_cnt_en)
                hsdrv_cnt  <= hsdrv_cnt + 5'd 1 ;
end
assign o_hsrx_en        =  (test_hsrx_reg1[0] ? test_hsrx_reg1[1] : 
                                (soft_disconnect ? 1'b 0 : hs_mode_async)) ;
assign o_hsrx_sampler_enable =  (test_hsrx_reg1[2] ? test_hsrx_reg1[3] : 
                                (soft_disconnect ? 1'b 0 : ((bist_mode_hs | loopback_hs) ? 1'b 1 : 
                                        ((hs_mode_async & ~hsdrv_en_loc & ~hsdrv_cnt_en & ~hsdrv_en_loc_delay) & suspendm)))) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
        if(~rstn_hs_clock)
	  begin

                hsdrv_en_loc_delay  <= 1'b 0 ;
	  end
        else
	  begin

                hsdrv_en_loc_delay <= hsdrv_en_loc;
	  end
end
assign o_hstx_en                =  (test_hstx_reg1[0] ? test_hstx_reg1[1] :  
                                        (soft_disconnect ? 1'b 0 : ((hs_mode_async & suspendm) | (~i_bist_mode_en & bc_hstx_en)))) ;
assign o_hstx_en_delayed        =  (test_hstx_reg1[2] ? test_hstx_reg1[3] :  
                                        (o_hstx_en & hstx_en_delay_reached)) ;
assign chirp_mode_en            = host_mode ? (hs_mode & ~termselect_sync & chirp_mode_sie) 
                                                : (hs_mode & termselect_sync & ~loopback_hs) ;
assign o_chirp_mode_en          = (test_hstx_reg1[4] ? test_hstx_reg1[5] :  
                                        (soft_disconnect ? 1'b 0 : chirp_mode_en)) ;
assign hspredrv_en_loc          = (test_hstx_reg2[0] ? test_hstx_reg2[1] :  
                                        (soft_disconnect ? 1'b 0 : hspredrv_en)) ;
assign o_hspredrv_en            =  hspredrv_en_loc ;  
assign o_hstx_boost_deemp_off   =  test_hsrx_reg1[4] ? test_hsrx_reg1[5] : (xcvrselect == 2'b00) && (opmode == 2'b10);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_udc_cntrl_hstx_reg2_2_sync (
.clock          (byte_clock) ,
.reset_n        (rstn_byte_clock) ,
.d_in           (test_hstx_reg2[2]) ,
.d_out          (test_hstx_reg2_2_sync)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_udc_cntrl_hstx_reg2_4_sync (
.clock          (byte_clock) ,
.reset_n        (rstn_byte_clock) ,
.d_in           (test_hstx_reg2[4]) ,
.d_out          (test_hstx_reg2_4_sync)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_udc_cntrl_hstx_en_d (
.clock          (usb2_1m_calib_clock) ,
.reset_n        (udc_bc_calib_rstn) ,
.d_in           (o_hstx_en) ,
.d_out          (hstx_en_sync)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_udc_cntrl_lsfstx_en_d (
.clock          (usb2_1m_calib_clock) ,
.reset_n        (rstn_refclock) ,
.d_in           (o_lsfstx_en) ,
.d_out          (lsfstx_en_sync)
);
assign hsdrv_en_loc = (test_hstx_reg2_2_sync ? test_hstx_reg2[3] : (soft_disconnect_sie ? 1'b 0 : hsdrv_en)) ;
assign hsddi_loc    = (test_hstx_reg2_4_sync ? test_hstx_reg2[5] : (soft_disconnect_sie ? 1'b 0 : (lane_reverse ? ~hsddi : hsddi))) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
        if(~rstn_hs_clock)
        begin
                hsdrv_en_delay          <= 1'b 0 ;
                hsdrv_en_delay_d        <= 1'b 0 ;
                hsddi_delay             <= 1'b 0 ;
                hs_termination_on_ctrl  <= 1'b 0 ;
        end
        else
        begin
                hsdrv_en_delay          <= hsdrv_en_loc ;
                hsdrv_en_delay_d        <= hsdrv_en_delay;
                hsddi_delay             <= hsddi_loc ;
                hs_termination_on_ctrl  <= hsdrv_en_delay ;
        end
end
assign o_hsdrv_en       =  hsdrv_en_delay ;
assign o_hsddi          =  hsddi_delay ;
always @(posedge usb2_1m_calib_clock or negedge udc_bc_calib_rstn)
begin
        if(~udc_bc_calib_rstn)
                hstx_en_d <= 1'b 0 ;
        else
                hstx_en_d <= hstx_en_sync ;
end
always @(posedge usb2_1m_calib_clock or negedge rstn_refclock)
begin
        if(~rstn_refclock)
                lsfstx_en_d <= 1'b0;
        else
                lsfstx_en_d <= lsfstx_en_sync;
end
assign posedge_lsfstx_en = ( lsfstx_en_sync & ~lsfstx_en_d) ;
assign negedge_lsfstx_en = (~lsfstx_en_sync &  lsfstx_en_d) ;
assign posedge_hstx_en = ( hstx_en_sync & ~hstx_en_d) ;
assign negedge_hstx_en = (~hstx_en_sync &  hstx_en_d) ;
always @(posedge usb2_1m_calib_clock or negedge rstn_refclock)
begin
        if(~rstn_refclock)
                lsfstx_delay_en <= 1'b 0 ;
        else if(negedge_lsfstx_en | txvalid_lsfstx_delay_reached)
                lsfstx_delay_en <= 1'b 0 ;
        else if(posedge_lsfstx_en)
                lsfstx_delay_en <= 1'b 1 ;
end
always @(posedge usb2_1m_calib_clock or negedge rstn_refclock)
begin
        if(~rstn_refclock)
                lsfstx_en_cnt <= 4'd 0 ;
        else if(negedge_lsfstx_en)
                lsfstx_en_cnt <= 4'd 0 ;
        else if(lsfstx_delay_en & ~txvalid_lsfstx_delay_reached)
                lsfstx_en_cnt <= lsfstx_en_cnt + 6'd 1 ;
end
always @(posedge usb2_1m_calib_clock or negedge udc_bc_calib_rstn)
begin
        if(~udc_bc_calib_rstn)
                hstx_delay_en <= 1'b 0 ;
        else if(negedge_hstx_en | (hstx_en_delay_reached & txvalid_hstx_delay_reached))
                hstx_delay_en <= 1'b 0 ;
        else if(posedge_hstx_en)
                hstx_delay_en <= 1'b 1 ;
end
always @(posedge usb2_1m_calib_clock or negedge udc_bc_calib_rstn)
begin
        if(~udc_bc_calib_rstn)
                hstx_en_cnt_5us <= 5'd 0 ;
        else if(negedge_hstx_en)
                hstx_en_cnt_5us <= 5'd 0 ;
        else if(hstx_delay_en & ~(hstx_en_delay_reached & txvalid_hstx_delay_reached))
                hstx_en_cnt_5us <= hstx_en_cnt_5us + 6'd 1 ;
end
always @(posedge usb2_1m_calib_clock or negedge udc_bc_calib_rstn)
begin
        if(~udc_bc_calib_rstn)
                hstx_en_delay_reached <= 1'b 0 ;
        else if(negedge_hstx_en)
                hstx_en_delay_reached <= 1'b 0 ;
        else if(hstx_en_cnt_5us == delay_threshold_5us)
                hstx_en_delay_reached <= 1'b 1 ;
end
assign txvalid_lsfstx_delay_reached = (test_txvalid_ungate[3:2] != 2'b11) ? (lsfstx_en_cnt == txvalid_ungate_lsfs_threshold) & o_lsfstx_en : 1'b1;
assign txvalid_hstx_delay_reached = (test_txvalid_ungate[1:0] != 2'b11) ? (hstx_en_cnt_5us == txvalid_ungate_hs_threshold) & o_hstx_en : 1'b1;
assign txvalid_ungate_delay_reached = (txvalid_hstx_delay_reached | txvalid_lsfstx_delay_reached);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_udc_cntrl_txvalid_ungate (
.clock          (sieclock) ,
.reset_n        (rstn_sieclock) ,
.d_in           (txvalid_ungate_delay_reached) ,
.d_out          (txvalid_ungate_sync)
);
assign txvalid_ungate = test_ana_powerup[0] ? 1'b1 : txvalid_ungate_sync;
assign o_txvalid = txvalid_ungate & txvalid;
assign o_txvalidh = txvalid_ungate & txvalidh;
assign bist_ana_powerup = test_ana_powerup[1] ? test_ana_powerup[2] : txvalid_ungate_sync;
always @*
begin
        case(hstx_en_delay_threshold)
        2'b 00:                         
                delay_threshold_5us = 5'd2 ;
        2'b 01:                         
                delay_threshold_5us = 5'd2 ;
        2'b 10:                         
                delay_threshold_5us = 5'd7;
        2'b 11:                         
                delay_threshold_5us = 5'd12 ;
        default:                                
                delay_threshold_5us = 5'd2 ;
        endcase
end
assign hstx_en_delay_threshold  = test_hstx_reg3[0] ? test_hstx_reg3[2:1] : 2'b 01 ;
always @*
begin
        case(test_txvalid_ungate[1:0])
        2'b 00:                         
                txvalid_ungate_hs_threshold = 5'd18 ;
        2'b 01:                         
                txvalid_ungate_hs_threshold = 5'd13 ;
        2'b 10:                         
                txvalid_ungate_hs_threshold = 5'd8;
        2'b 11:                         
                txvalid_ungate_hs_threshold = 5'd0 ;
        default:                                
                txvalid_ungate_hs_threshold = 5'd18 ;
        endcase
end
always @*
begin
        case(test_txvalid_ungate[3:2])
        2'b 00:                         
                txvalid_ungate_lsfs_threshold = 4'd3 ;
        2'b 01:                         
                txvalid_ungate_lsfs_threshold = 4'd8 ;
        2'b 10:                         
                txvalid_ungate_lsfs_threshold = 4'd13;
        2'b 11:                         
                txvalid_ungate_lsfs_threshold = 4'd0 ;
        default:                                
                txvalid_ungate_lsfs_threshold = 4'd3 ;
        endcase
end
assign o_lsfsrx_en      =  (test_lsfs_rx_reg[0] ? test_lsfs_rx_reg[1] : ((soft_disconnect | hs_mode_async) ? 1'b 0 : (sleepm & suspendm))) ;
assign serx_chirp_en    = host_mode ? (hs_mode_async & (opmode == 2'b 10)) : (hs_mode_async & termselect) ; 
assign serx_en          = (fs_mode_async | ls_mode_async | serx_chirp_en | fs_mode_pre_async) ;
assign w_serx_poweroff  = i_bg_powergood && cntrl_serx_en;
assign w_serx_bias_poweroff  = host_mode ? w_serx_poweroff : i_bg_powergood;
assign o_serx_en        =  test_lsfs_rx_reg[2] ? test_lsfs_rx_reg[3] : (test_serx_en_cntrl_opmode01 ? (serx_en & w_serx_poweroff & ~soft_disconnect) : (serx_en & w_serx_poweroff));
assign o_serx_bias_en = test_serx_bias_en[0] ? test_serx_bias_en[1] : ((o_serx_en | i_bc_en | idpullup) & w_serx_bias_poweroff & ~soft_disconnect); 
assign o_fs_edge_sel    =  (test_lsfs_tx_reg1[0] ? test_lsfs_tx_reg1[1] : ((soft_disconnect | ls_mode_async) ? 1'b 0 : 1'b 1)) ;
assign lsfstx_en_loc    = fslsserialmode_sync ? (sleepm & suspendm) : ((soft_disconnect | hs_mode_async) ? 1'b 0 : (sleepm & suspendm)) ;
assign o_lsfstx_en      = (test_lsfs_tx_reg1[2] ? test_lsfs_tx_reg1[3] : lsfstx_en_loc) ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_udc_cntrl_lsfs_tx_reg2_0_sync (
.clock          (byte_clock) ,
.reset_n        (rstn_byte_clock) ,
.d_in           (test_lsfs_tx_reg2[0]) ,
.d_out          (test_lsfs_tx_reg2_0_sync)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_udc_cntrl_lsfs_tx_reg2_2_sync (
.clock          (byte_clock) ,
.reset_n        (rstn_byte_clock) ,
.d_in           (test_lsfs_tx_reg2[2]) ,
.d_out          (test_lsfs_tx_reg2_2_sync)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_udc_cntrl_lsfs_tx_reg2_4_sync (
.clock          (byte_clock) ,
.reset_n        (rstn_byte_clock) ,
.d_in           (test_lsfs_tx_reg2[4]) ,
.d_out          (test_lsfs_tx_reg2_4_sync)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_udc_cntrl_hstx_reg2_6_sync (
.clock          (byte_clock) ,
.reset_n        (rstn_byte_clock) ,
.d_in           (test_hstx_reg2[6]) ,
.d_out          (test_hstx_reg2_6_sync)
);
assign lsfsdrv_en_loc   = (test_lsfs_tx_reg2_0_sync ? test_lsfs_tx_reg2[1] :
                          ((soft_disconnect_sie | hs_mode_async) ? 1'b 0 : lsfsdrv_en)) ;
assign hs_termination_on = test_hstx_reg2_6_sync ? test_hstx_reg2[7] :
                                (host_mode ? (~termselect & ~hs_termination_on_ctrl) : (~termselect & hs_mode_async & ~hs_termination_on_ctrl)) ;
assign assert_sezero_loc = (test_lsfs_tx_reg2_2_sync ? test_lsfs_tx_reg2[3] : 
                           (soft_disconnect_sie ? 1'b 0 : lsfs_assert_sezero));
assign lsfs_ddi_loc     = (test_lsfs_tx_reg2_4_sync ? test_lsfs_tx_reg2[5] :
                          ((soft_disconnect_sie | hs_mode_async) ? 1'b 0 : (lane_reverse ? ~lsfsddi : lsfsddi))) ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
        if(~rstn_byte_clock)
        begin
                assert_sezero_d <= 1'b 0 ;
                lsfs_ddi_d      <= 1'b 0 ;
                lsfsdrv_en_d    <= 1'b 0 ;
        end
        else
        begin
                assert_sezero_d <= assert_sezero_loc ;
                lsfs_ddi_d      <= lsfs_ddi_loc ;
                lsfsdrv_en_d    <= lsfsdrv_en_loc ;
        end
end
assign o_lsfsdrv_en     =  (lsfstx_en_loc & lsfsdrv_en_mux ) ;
assign o_assert_sezero  =  lsfs_assert_sezero_mux | hs_assert_sezero_mux;
assign o_lsfs_ddi       =  (lsfstx_en_loc & lsfsddi_mux ) ;
always @(posedge usb2_1m_calib_clock or negedge primary_count_rstn)
begin
        if(~primary_count_rstn)
                q_out           <= 19'd 0 ;
        else if (autocal_enable)
                q_out           <= q_out + 19'd 1 ;
end
assign  primary_count_threshold = 19'd500000  ;
assign primary_count_reached = ( q_out == primary_count_threshold ) ;
always @(posedge usb2_1m_calib_clock or negedge usb2_calib_rstn)
begin
        if(~usb2_calib_rstn)
                primary_count_reached_d <= 1'b 0 ;
        else
                primary_count_reached_d <= primary_count_reached ;
end
assign pri_counter_reset = primary_count_reached_d | sec_counter_reached ;
always @(posedge usb2_1m_calib_clock or negedge usb2_calib_rstn)
begin
        if(~usb2_calib_rstn)
                sec_counter     <= 8'd 0 ;
        else if (sec_counter_reached)
                sec_counter     <= 8'd 0 ;
        else if (primary_count_reached)
                sec_counter     <= sec_counter + 8'd 1 ;
end
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_tm_spc_sel (
.clock          (usb2_1m_calib_clock),
.reset_n        (usb2_calib_rstn),
.d_in           (test_hstx_reg3[3]),
.d_out          (tm_spc_sel)
);
assign spc_choice = tm_spc_sel ? test_hstx_reg3[6:4] : 3'd 2 ;
always @(*)
        case (spc_choice)
        3'd 0 :
        sec_counter_threshold = 8'd 1 ;
        3'd 1 :
        sec_counter_threshold = 8'd 1 ;
        3'd 2 :
        sec_counter_threshold = 8'd 2 ;
        3'd 3 :
        sec_counter_threshold = 8'd 3 ;
        3'd 4 :
        sec_counter_threshold = 8'd 4 ;
        3'd 5 :
        sec_counter_threshold = 8'd 5 ;
        3'd 6 :
        sec_counter_threshold = 8'd 6 ;
        3'd 7 :
        sec_counter_threshold = 8'd 7 ;
        endcase
assign sec_counter_reached = ( sec_counter == sec_counter_threshold ) ;
assign calib_spc_choice = sec_counter_reached ;
always @(posedge usb2_1m_calib_clock or negedge usb2_calib_rstn)
begin
        if(~usb2_calib_rstn)
                calib_spc_choice_d      <= 1'b 0 ;
        else
                calib_spc_choice_d      <= calib_spc_choice ;
end
assign posedge_calib_spc_choice = calib_spc_choice & ~calib_spc_choice_d ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_calib_trigger (
.clock          (usb2_1m_calib_clock),
.reset_n        (usb2_calib_rstn),
.d_in           (test_ana_block_en[7]),
.d_out          (tm_calib_trigger)
) ;
always @(posedge usb2_1m_calib_clock or negedge usb2_calib_rstn)
begin
        if(~usb2_calib_rstn)
        tm_calib_trigger_d      <= 1'b 0 ;
        else
        tm_calib_trigger_d      <= tm_calib_trigger ;
end
assign posedge_tm_calib_trigger = tm_calib_trigger & ~tm_calib_trigger_d ;
assign calib_trigger = posedge_tm_calib_trigger | posedge_calib_spc_choice ;
always @(posedge usb2_1m_calib_clock or negedge usb2_calib_rstn)
begin
        if(~usb2_calib_rstn)
                calib_active_rst_cnt_en <= 1'b 0 ;
        else if (calib_active_rst_cnt_reached)
                calib_active_rst_cnt_en <= 1'b 0 ;
        else if (calib_trigger) 
                calib_active_rst_cnt_en <= 1'b 1 ;
end
always @(posedge usb2_1m_calib_clock or negedge usb2_calib_rstn)
begin
        if(~usb2_calib_rstn)
                calib_active_rst_cnt    <= 5'd 0 ;
        else if (calib_trigger)
                calib_active_rst_cnt    <= 5'd 0 ;
        else if (calib_active_rst_cnt_en)
                calib_active_rst_cnt    <= calib_active_rst_cnt + 5'd 1 ;
end
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_calib_act_rst_cnt_threshold_en (
.clock          (usb2_1m_calib_clock),
.reset_n        (usb2_calib_rstn),
.d_in           (test_calib_rstn_dt[0]),
.d_out          (calib_act_rst_cnt_threshold_en)
) ;
assign calib_active_rst_cnt_threshold = calib_act_rst_cnt_threshold_en ? test_calib_rstn_dt[5:1] : 5'd 1 ;
assign calib_active_rst_cnt_reached = ( calib_active_rst_cnt == calib_active_rst_cnt_threshold ) ;
assign inv_calib_rstn_pulse = calib_active_rst_cnt_en ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_autocal_enable(
.clock        (usb2_1m_calib_clock),
.reset_n      (usb2_calib_rstn),
.d_in         (test_ana_block_en[6]),
.d_out        (autocal_enable_n)
);
assign autocal_enable = ~autocal_enable_n;
always @(posedge usb2_1m_calib_clock or negedge usb2_calib_rstn)
begin
      if(~usb2_calib_rstn)
              store_rescal_reg <= 1'b 1 ;
      else if(store_rescal)
              store_rescal_reg <= 1'b 0 ;
end
always @(posedge usb2_1m_calib_clock or negedge usb2_calib_rstn)
begin
      if(~usb2_calib_rstn)
              auto_store_rescal_reg <= 1'b 1 ;
      else if(~i_rescal_calib_done)
              auto_store_rescal_reg <= 1'b 1 ;
      else if(store_rescal)
              auto_store_rescal_reg <= 1'b 0 ;
end
assign store_rescal = autocal_enable ? (auto_store_rescal_reg & i_rescal_calib_done) : (store_rescal_reg & i_rescal_calib_done) ;
udc_calib_code_gen_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.DEF_OFFSET(6'd 0), .p_code_len(p_calib_code_len), .rst_code(6'h20)) c_hscalib_code_gen (
.usb2_calib_clock               (usb2_1m_calib_clock),
.usb2_calib_rstn                (offset_correction_rstn),
.udc_bc_calib_rstn              (udc_bc_calib_rstn),
.store_rescal                   (store_rescal),
.i_usb2_rescal_calib_done       (i_rescal_calib_done),
.test_calib                     (test_hscalib_offset),
.i_usb2_rescal_calib_code       (i_res_calib_code),
.posedge_store_calib            (store_hscalib),
.afe_calib_code                 (afe_hscalib_code)
);
udc_calib_code_gen_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.DEF_OFFSET(6'd 0), .p_code_len(p_calib_code_len), .rst_code(6'h20)) c_fscalib_code_gen (
.usb2_calib_clock               (usb2_1m_calib_clock),
.usb2_calib_rstn                (offset_correction_rstn),
.udc_bc_calib_rstn              (udc_bc_calib_rstn),
.store_rescal                   (store_rescal),
.i_usb2_rescal_calib_done       (i_rescal_calib_done),
.test_calib                     (test_fscalib_offset),
.i_usb2_rescal_calib_code       (i_res_calib_code),
.posedge_store_calib            (store_fscalib),
.afe_calib_code                 (afe_fscalib_code)
);
udc_calib_code_gen_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.DEF_OFFSET(6'd0), .p_code_len(p_calib_code_len), .rst_code(6'h20)) c_bccalib_code_gen (
.usb2_calib_clock               (usb2_1m_calib_clock),
.usb2_calib_rstn                (offset_correction_rstn),
.udc_bc_calib_rstn              (udc_bc_calib_rstn),
.store_rescal                   (store_rescal),
.i_usb2_rescal_calib_done       (i_rescal_calib_done),
.test_calib                     (test_bccalib_offset),
.i_usb2_rescal_calib_code       (i_res_calib_code),
.posedge_store_calib            (store_bccalib),
.afe_calib_code                 (afe_bccalib_code)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_r_tune_fscalib_sync (
.clock          (hs_clock) ,
.reset_n        (rstn_hs_clock) ,
.d_in           (store_fscalib) ,
.d_out          (fscalib_hssync)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_r_tune_hscalib_sync (
.clock          (hs_clock) ,
.reset_n        (rstn_hs_clock) ,
.d_in           (store_hscalib) ,
.d_out          (hscalib_hssync)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_n_tune_hscalib_sync (
.clock          (hs_clock) ,
.reset_n        (rstn_hs_clock) ,
.d_in           (store_bccalib) ,
.d_out          (bccalib_hssync)
);
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
        if(~rstn_hs_clock)
        begin
                fscalib_hssync_d <= 1'b 0 ;
                hscalib_hssync_d <= 1'b 0 ;
                bccalib_hssync_d <= 1'b 0 ;
        end
        else
        begin
                fscalib_hssync_d <= fscalib_hssync ;
                hscalib_hssync_d <= hscalib_hssync ;
                bccalib_hssync_d <= bccalib_hssync ;
        end
end
assign negedge_bccalib_pulse = (~bccalib_hssync) & bccalib_hssync_d ;
assign negedge_fscalib_pulse = (~fscalib_hssync) & fscalib_hssync_d ;
assign negedge_hscalib_pulse = (~hscalib_hssync) & hscalib_hssync_d ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_suspendm_sync (
.reset_n        (rstn_hs_clock),
.clock          (hs_clock),
.d_in           (ONE),
.d_out          (suspendm_sync)
);
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
        if(~rstn_hs_clock)
                suspendm_init   <= 1'b 0 ;
        else if (suspendm_sync)
                suspendm_init   <= 1'b 1 ;
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
        if(~rstn_hs_clock)
        begin
                suspend_init_d  <= 1'b 0 ;
                suspend_init_2d <= 1'b 0 ;
        end
        else
        begin
                suspend_init_d  <= suspendm_init ;
                suspend_init_2d <= suspend_init_d ;
        end
end
assign posedge_suspendm_init = (~suspend_init_d & suspendm_init) ;
assign posedge_suspendm_init_d = (~suspend_init_2d & suspend_init_d) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
        if(~rstn_hs_clock)
                squelch_cnt     <= 2'd 0 ;
        else if(~(squelch & squelch_mask))
                squelch_cnt     <= 2'd 0 ;
        else if(~squelch_cnt_reached)
                squelch_cnt     <= squelch_cnt + 2'd 1 ;
end
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_squelch_cnt_threshold_en(
.clock          (hs_clock),
.reset_n        (rstn_hs_clock),
.d_in           (test_squelch_count_idle[0]),
.d_out          (squelch_cnt_threshold_en)
);
assign squelch_cnt_threshold = squelch_cnt_threshold_en ? test_squelch_count_idle[2:1] : 2'd 3 ;
assign squelch_cnt_reached = (squelch_cnt == squelch_cnt_threshold) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
        if(~rstn_hs_clock)
                squelch_cnt_reached_d   <= 1'b 0 ;
        else
                squelch_cnt_reached_d   <= squelch_cnt_reached ;
end
assign posedge_squelch = squelch_cnt_reached & (~squelch_cnt_reached_d) ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_lsfsdrv_en_mux_sync (
.clock          (hs_clock) ,
.reset_n        (rstn_hs_clock) ,
.d_in           (lsfsdrv_en_mux) ,
.d_out          (lsfsdrv_en_mux_sync)
);
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
        if(~rstn_hs_clock)
                lsfsdrv_en_mux_sync_d   <= 1'b 0 ;
        else
                lsfsdrv_en_mux_sync_d   <= lsfsdrv_en_mux_sync ;
end
assign negedge_lsfsdrv_en = (~lsfsdrv_en_mux_sync) & lsfsdrv_en_mux_sync_d ;
assign fslsserial_sezero = (~tx_enable_n & tx_se0) ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_fslsserial_sezero_sync (
.clock          (hs_clock) ,
.reset_n        (rstn_hs_clock) ,
.d_in           (fslsserial_sezero) ,
.d_out          (fslsserial_sezero_sync)
);
always @(posedge sieclock or negedge rstn_sieclock)
begin
        if(~rstn_sieclock)
        hs_termination_on_sync  <= 1'b 0 ;
        else 
        hs_termination_on_sync  <= hs_termination_on ;
end
assign fsls_mode_sezero = fslsserialmode_sync ? fslsserial_sezero_sync : hs_termination_on_sync ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
        if(~rstn_hs_clock)
                fsls_mode_sezero_d      <= 1'b 0 ;
        else
                fsls_mode_sezero_d      <= fsls_mode_sezero ;
end
assign negedge_fsls_mode_sezero = (~fsls_mode_sezero) & fsls_mode_sezero_d ;
assign idle_line = hs_mode ? (posedge_squelch) : (negedge_lsfsdrv_en | negedge_fsls_mode_sezero) ;
assign fslsser_rpu2_en  = (fslsserialmode_sync) ? idle_rpu_enable : 1'd 0 ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
        if(~rstn_hs_clock)
                rescalib_code_state     <= CALIB_DONE_WAIT ;
        else
                rescalib_code_state     <= rescalib_code_next_state ;
end             
always @(*)
begin
        case(rescalib_code_state)
        CALIB_DONE_WAIT:
        begin
                if(negedge_fscalib_pulse | negedge_bccalib_pulse | negedge_hscalib_pulse | posedge_suspendm_init)
                rescalib_code_next_state = IDLE_WAIT ;
                else
                rescalib_code_next_state = CALIB_DONE_WAIT ;
        end
        IDLE_WAIT:
        begin
                if(idle_line | posedge_suspendm_init_d)
                rescalib_code_next_state = GENERATE_STORE_PULSE ;
                else
                rescalib_code_next_state = IDLE_WAIT ;
        end
        GENERATE_STORE_PULSE:
        begin
                if(rst_autocal_store)
                   rescalib_code_next_state = CALIB_DONE_WAIT ;
                else
                   rescalib_code_next_state = GENERATE_STORE_PULSE ;
        end
        default:
                rescalib_code_next_state = CALIB_DONE_WAIT ;
        endcase
end
assign autocal_store = (rescalib_code_state == GENERATE_STORE_PULSE) ;
always @(posedge hs_clock or negedge xcvr_sie_rstn)
begin
        if(~xcvr_sie_rstn)
        begin
                autocal_fscalib_code     <= 6'b 100000 ;
                autocal_hscalib_code     <= 6'b 100000 ;
                autocal_bccalib_code     <= 6'b 100000 ;
                rst_autocal_store        <= 1'b0;
        end
        else if(autocal_store)
        begin
                autocal_fscalib_code    <= afe_fscalib_code ;
                autocal_hscalib_code    <= afe_hscalib_code ;
                autocal_bccalib_code    <= afe_bccalib_code ;
                rst_autocal_store       <= 1'b1;
        end
        else
                rst_autocal_store       <= 1'b0;
end
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_ted_calib_done_sync (
.clock          (refclock) ,
.reset_n        (rstn_refclock) ,
.d_in           (i_ted_calib_done) ,
.d_out          (ted_calib_done)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_hsrx_sampler_calib_done_sync (
.clock          (refclock) ,
.reset_n        (rstn_refclock) ,
.d_in           (i_hsrx_sampler_calib_done) ,
.d_out          (hsrx_sampler_calib_done)
);
assign all_calib_done   = (hsrx_sampler_calib_done &
                           ted_calib_done          &
                           pll_coarse_code_done    
                          ) ;
always @(*)
begin
        if(!suspendm)
        case (powerdown)
                2'b 00:  
                begin   
                                bg_en                   = 1'b 1 ;
                                cntrl_serx_en           = 1'b 1 ;       
                                afe_suspendm            = 1'b 0 ; 
                                afe_clipper_en          = 1'b 1 ;
                                otgc_vbusvalid_en       = 1'b 1 ;
                                otgc_absvalid_en        = 1'b 1 ;
                                pull_up_en              = (host_mode) ? 1'b 0 : 1'b 1 ;
                end
                2'b 01:  
                begin
                                bg_en                   = 1'b 1 ;
                                cntrl_serx_en           = 1'b 1 ;       
                                afe_suspendm            = 1'b 0 ;
                                afe_clipper_en          = 1'b 1 ;
                                otgc_vbusvalid_en       = 1'b 1 ;
                                otgc_absvalid_en        = 1'b 1 ;
                                pull_up_en              = (host_mode) ? 1'b 0 : 1'b 1 ;
                end
                2'b 10:  
                begin
                                bg_en                   = 1'b 1 ;
                                cntrl_serx_en           = 1'b 1 ;       
                                afe_suspendm            = 1'b 0 ; 
                                afe_clipper_en          = 1'b 1 ;
                                otgc_vbusvalid_en       = 1'b 0 ;
                                otgc_absvalid_en        = 1'b 0 ;
                                pull_up_en              = (host_mode) ? 1'b 0 : 1'b 1 ;
                end
                2'b 11:  
                begin
                                bg_en                   = (host_mode) ? 1'b 0 : 1'b 1 ;
                                cntrl_serx_en           = 1'b 0 ;       
                                afe_suspendm            = 1'b 0 ;
                                afe_clipper_en          = 1'b 0 ;
                                otgc_vbusvalid_en       = (host_mode) ? 1'b 0 : (test_hsrx_reg2[7] ? 1'b1 : 1'b0);
                                otgc_absvalid_en        = (host_mode) ? 1'b 0 : 1'b 1 ;
                                pull_up_en              = 1'b 0 ;
                end
        endcase
        else
        if (sleepm)      
                begin
                                bg_en                   = 1'b 1 ;
                                cntrl_serx_en           = 1'b 1 ;       
                                afe_suspendm            = 1'b 1 ;
                                afe_clipper_en          = 1'b 1 ;
                                otgc_vbusvalid_en       = 1'b 1 ;
                                otgc_absvalid_en        = 1'b 1 ;
                                pull_up_en              = (host_mode) ? 1'b 0 : 1'b 1 ;
                end
        else             
                begin
                                bg_en                   = 1'b 1 ;
                                cntrl_serx_en           = 1'b 1 ;       
                                afe_suspendm            = 1'b 0 ;
                                afe_clipper_en          = 1'b 1 ;
                                otgc_vbusvalid_en       = 1'b 1 ;
                                otgc_absvalid_en        = 1'b 1 ;
                                pull_up_en              = (host_mode) ? 1'b 0 : 1'b 1 ;
                end
end
assign o_afe_suspendm_rx        = ( test_ana_block_en[0]? test_ana_block_en[1] : afe_suspendm) ;    
assign o_afe_suspendm_tx        = ( test_ana_block_en[0]? test_ana_block_en[1] : afe_suspendm) ;    
assign o_otgc_vbusvalid_en      = ( test_ana_block_en[2]? test_ana_block_en[3] : otgc_vbusvalid_en) ;
assign o_otgc_absvalid_en       = ( test_ana_block_en[4]? test_ana_block_en[5] : otgc_absvalid_en) ;
assign o_bg_pd                  = test_lsfs_rx_reg[6] ? test_lsfs_rx_reg[7] : ((pll_standalone | pll_clkon | i_bist_mode_en) ? 1'b0 : (bg_en ? 1'b0 : ~hs_clock_gate_ack ));
assign o_bg_pd_bg_ok            = test_lsfs_rx_reg[4] ? test_lsfs_rx_reg[5] : ((pll_standalone | pll_clkon | i_bist_mode_en) ? 1'b0 : (bg_en ? 1'b0 : ~hs_clock_gate_ack ));
assign o_afe_clipper_en         = test_clipper_en[0]? test_clipper_en[1] : afe_clipper_en;
assign o_afe_fscalib_code       = test_fscalib[0] ? test_fscalib[6:1] :(autocal_enable ? autocal_fscalib_code : afe_fscalib_code) ;                   
assign o_afe_hscalib_code       = test_hscalib[0] ? test_hscalib[6:1] :(autocal_enable ? autocal_hscalib_code : afe_hscalib_code) ;                   
assign o_afe_bccalib_code       = test_bccalib[0] ? test_bccalib[6:1] :(autocal_enable ? autocal_bccalib_code : afe_bccalib_code) ;
assign debug_hscalib_code       = o_afe_hscalib_code;
assign debug_fscalib_code       = o_afe_fscalib_code;
assign debug_bccalib_code       = o_afe_bccalib_code;
assign afeif_hsrx_rec_clk               = udc_hsrx_rec_clk ; 
assign afeif_hsrx_rec_data              = hssi_mode ? (hsrx_rec_data) : 1'b 0 ;  
assign afeif_hsrx_rec_data_valid        = hssi_mode ? (i_afe_hsrx_rec_data_valid) : 1'b 0 ;
assign afeif_hsrx_rec_decision_error    = hssi_mode ? (i_afe_hsrx_rec_decision_error) : 1'b 0 ;
assign hssi_squelch                     = hssi_mode ? ( ~squelch_mask ? 1'b 0 : i_ted_squelch_ana) : 1'b 1 ;
assign utmi_hsrx_rec_data               = hssi_mode ? 1'b 0 : (hsrx_rec_data) ;  
assign utmi_hsrx_rec_data_valid         = hssi_mode ? 1'b 0 : (i_afe_hsrx_rec_data_valid) ;
assign utmi_hsrx_rec_decision_error     = hssi_mode ? 1'b 0 : (i_afe_hsrx_rec_decision_error) ;
assign utmi_ted_squelch_ana             = hssi_mode ? 1'b 1 : ( ~squelch_mask ? 1'b 1 : i_ted_squelch_ana) ;
assign hsddi                            = hssi_mode ? afeif_hsddi               : utmi_hsddi              ; 
assign hsdrv_en                         = hssi_mode ? afeif_hsdrv_en            : utmi_hsdrv_en           ; 
assign hspredrv_en                      = hssi_mode ? afeif_hspredrv_en         : utmi_hspredrv_en        ; 
assign afeif_lsfsddi                    = (tx_enable_n ? 1'b 0 : tx_dat) ;
assign lsfsddi_mux                      = fslsserialmode_sync ? ( lane_reverse ? ~afeif_lsfsddi : afeif_lsfsddi) : lsfs_ddi_d ;
assign lsfsdrv_en_mux                   = fslsserialmode_sync ? ~tx_enable_n : lsfsdrv_en_d ;
assign lsfs_assert_sezero_mux           = fslsserialmode_sync ? (~tx_enable_n & tx_se0) : (assert_sezero_d ) ;
assign hs_assert_sezero_mux             = hs_termination_on ;
AFEPHY_TXFIFO_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_afephy_txfifo (
.rst480                 (rstn_hs_clock        ),
.clk480                 (hs_clock             ),
.tx_clk240              (afeif_tx_clk240      ),
.tx_data_hs             (afeif_tx_data_hs     ),
.tx_enable_hs           (afeif_tx_enable_hs   ),
.hs_current_en          (afeif_hs_current_en  ),
.hsddi                  (afeif_hsddi          ),
.hsdrv_en               (afeif_hsdrv_en       ),
.hspredrv_en            (afeif_hspredrv_en    ),
.testmode               (scan_mode            )
);
AFEPHY_CDRRXWRAP_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_afephy_cdrrxwrap (
.rst480                         (rstn_hs_clock                  ),
.clk480                         (hs_clock                       ),
.afe_hsrx_rec_clk               (afeif_hsrx_rec_clk             ),
.afe_hsrx_rec_data              (afeif_hsrx_rec_data            ),
.afe_hsrx_rec_data_valid        (afeif_hsrx_rec_data_valid      ),
.afe_hsrx_rec_decision_error    (afeif_hsrx_rec_decision_error  ),
.rx_clk120                      (afeif_rx_clk120                ),
.rx_data_hs                     (afeif_rx_data_hs               ),
.rx_valid_hs                    (afeif_rx_valid_hs              ),
.rx_error_hs                    (afeif_rx_error_hs              ),
.testmode                       (scan_mode                      )
);
assign hssi_ded_ana     = hssi_mode ? i_ded_ana : 1'b0 ;
assign hssi_chirp_data  = hssi_mode ? hsrx_diff_data : 1'b0 ; 
assign hssi_rxerror     = hssi_mode ? afeif_rx_error_hs : 1'b0 ; 
assign hssi_rx_clockout = hssi_mode ? afeif_rx_clk120 : 1'b0;
assign hssi_dataout     = hssi_mode ? afeif_rx_data_hs : 4'b0;
assign hssi_rxvalid     = hssi_mode ? afeif_rx_valid_hs : 1'b0;
assign tx_ted_on                        = hssi_mode ? hssi_ted_en : 1'd 0 ;
assign afeif_tx_clk240                  = tx_clockin ;
assign afeif_tx_data_hs                 = hssi_mode ? hssi_datain : 2'd 0 ;
assign afeif_tx_enable_hs               = hssi_mode ? hssi_txvalid : 2'd 0 ;
assign afeif_hs_current_en              = hssi_mode ? hssi_tx_enable : 1'd 0 ;
always @(*)
begin
        case (test_spare_out[3:0])
        4'd 0:  
                o_usb2_phy_spare = {8'd 0} ;
        4'd 1:  
                o_usb2_phy_spare = {udc_hsrx_rec_clk, i_afe_hsrx_rec_data, i_afe_hsrx_rec_data_valid, i_afe_hsrx_rec_decision_error, i_afe_hsrx_diff_data, i_ted_squelch_ana, i_ded_ana, idle_line} ;
        4'd 2:  
                o_usb2_phy_spare = {1'd0, raw_squelch_ana, utmi_hsrx_rec_data, utmi_hsrx_rec_data_valid, hs_eb_data, hs_eb_data_valid, debug_hs_eop_condition, debug_no_eop} ;
        4'd 3:  
                o_usb2_phy_spare = {o_hsddi, o_hsdrv_en, o_hspredrv_en, o_assert_sezero, i_ded_ana, o_ted_en, squelch_mask, o_hsrx_sampler_enable} ;
        4'd 4:  
                o_usb2_phy_spare = {o_ted_en, i_ded_ana, ted_down_time, tx_squelch_cnt_en, tx_eop_start, deassert_ted_down_time, i_ted_squelch_ana, o_ed_en} ;
        4'd 5:  
                o_usb2_phy_spare = {filter_cnt_en, lsfs_hostdisconnect, i_afe_lsfsrx_ana, i_afe_rxdp_ana, i_afe_rxdm_ana, se0_detected, idle_line, o_serx_en} ;
        4'd 6:  
                o_usb2_phy_spare = {o_lsfsdrv_en, o_lsfs_ddi, o_assert_sezero, o_chirp_mode_en, o_lsfstx_en, o_hstx_en, dprpu2_en, dmrpu2_en} ;
        4'd 7:  
                o_usb2_phy_spare = {2'd0, o_pll_pso, o_pll_pso_delay, o_pll_pd, o_pll_standby, o_pll_ldo_core_en, o_pll_ldo_ref_en} ;
        4'd 8:  
                o_usb2_phy_spare = i_cdr_test_digout ;
        4'd 9:  
                o_usb2_phy_spare = {store_rescal, posedge_suspendm_init, posedge_suspendm_init_d, negedge_fscalib_pulse, negedge_hscalib_pulse, negedge_bccalib_pulse, idle_line, autocal_store} ;
        4'd 10:  
                o_usb2_phy_spare = {rescalib_code_state, calib_trigger, i_rescal_calib_done, primary_count_reached_d, pri_counter_reset, sec_counter_reached, inv_calib_rstn_pulse} ;
        4'd 11:  
                o_usb2_phy_spare = {1'b0, bg_en, cntrl_serx_en, afe_suspendm, afe_clipper_en, otgc_vbusvalid_en, otgc_absvalid_en, pull_up_en} ;
        4'd 12:  
                o_usb2_phy_spare = {debug_bc_state[3:0], bc_delay_cnt_reached_10us, bc_delay_reached, i_rid_float_a_comp_sts, i_rid_b_c_comp_sts} ;
        default:
                o_usb2_phy_spare = {8'd 0} ;
        endcase
end
endmodule
`timescale 1ns / 1ps
module usb2_pll_dig_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r
  (
   o_FBDIV, o_IPDIV, o_VCO_CNT_WINDOW, 
   o_ana_COARSE_CODE, o_ana_PD_PFD, 
   o_ana_STARTLOOP, o_ana_COARSEDONE,o_pll_lock_ana_ats,  
   o_pll_lock_ana, o_pll_reg15, o_pll_reg16,
   o_pllrefsel,o_ats_pll_ldo_ref_en,
   scan_en, i_PD, i_pll_bypass_mode, i_REFCLK, i_vco_pll_clk,i_STDBY,
   scan_mode_sel,reset,scan_ats_mode,scan_clock,
   pllrefsel, i_pll_reg0, i_pll_reg1, i_pll_reg2, i_pll_reg3, 
   i_pll_reg4, i_pll_reg5,i_pll_reg6, i_pll_reg7, 
   i_pll_reg8, i_pll_reg9, i_pll_reg10  
   );
   parameter p_coarse_code_len = 9;
   parameter p_v2i_code_len = 6; 	 
   parameter p_fbdiv_len = 8;		 
   parameter p_count_len = 13;		 
   parameter p_num_init_wait_bits = 8;	 
   parameter p_num_vco_settle_bits = 6;	 
   parameter p_num_cfg_change_bits = 5;	 
   parameter p_num_rst_fdbk_div_bits = 5;
   parameter p_num_ldo_ref_en_bits = 3;
   parameter p_cpcode_len = 8;
   input        i_PD;             
   input        i_pll_bypass_mode;
   input 	i_REFCLK, i_vco_pll_clk;         
   input	i_STDBY;
   input        scan_ats_mode, scan_mode_sel, reset, scan_clock;
   input        scan_en;
   input [3:0]  pllrefsel;
   input [7:0]	i_pll_reg0, i_pll_reg1, i_pll_reg2, i_pll_reg3;
   input [7:0]  i_pll_reg4, i_pll_reg5, i_pll_reg7;
   input [7:0]	i_pll_reg8, i_pll_reg9, i_pll_reg10, i_pll_reg6;
   output [p_fbdiv_len -1 :0] o_FBDIV;  		 
   output [4:0] 	      o_IPDIV; 			 
   output 		      o_VCO_CNT_WINDOW; 	 
   output [p_coarse_code_len -1 :0] o_ana_COARSE_CODE;   
   output 			    o_ana_PD_PFD;      	 
   output 			    o_ana_STARTLOOP;   	 
   output 			    o_ana_COARSEDONE;  	 
   output			    o_pll_lock_ana;
   output			    o_pll_lock_ana_ats;  
   output [7:0]			    o_pll_reg15, o_pll_reg16;
   output [3:0]                     o_pllrefsel;
   output                           o_ats_pll_ldo_ref_en;
   wire [p_coarse_code_len -1 :0]   o_ana_COARSE_CODE;
   wire [p_coarse_code_len -1 :0]   w_COARSE_CODE_STORED;
   reg [p_count_len -1 :0]        dco_count;
   reg [p_fbdiv_len -1 :0] 	  r_FBDIV, pll_FBDIV;
   wire [p_fbdiv_len -1 :0] 	  w_FBDIV_COARSE_IN;
   wire 			  w_TM_FBDIV_COARSE_IN_BYPASS;
   wire 			  w_COARSE_DONE, w_ana_PD_PFD, w_ana_STARTLOOP;
   wire [p_coarse_code_len -1 :0] w_COARSE_COARSE_CODE;
   reg  [p_coarse_code_len -1 :0]  r_ana_COARSE_CODE;
   wire [p_coarse_code_len -1 :0] w_ana_COARSE_CODE;
   reg                            o_VCO_CNT_WINDOW;
   wire 			  w_COARSE_DONE_del,RST_FDBK_DIV_scan,w_STDBY;
   wire [4:0]			  w_IPDIV_FORCED;
   wire				  w_IPDIV_FORCE_EN, rst_fdbk_div_cnt_reached;
   wire 			  w_RST_FDBK_DIV, w_RST_FDBK_DIV_EN, w_RST_FDBK_DIV_FORCED, w_RST_FDBK_DIV_DELAYED;
   reg [4:0] 			  r_IPDIV, pll_IPDIV;
   wire				  w_VCO_CNT_WINDOW, VCO_CNT_WINDOW;
   wire [2:0]                     LDO_REF_EN_CYCLES;
   reg  [2:0]                     pll_ldo_ref_cnt;
   wire                           w_pll_lock_ana;
   wire [3:0]                     w_pllrefsel;
   wire [p_num_init_wait_bits - 1 : 0 ] w_INITIAL_WAIT_TIME;
   wire [p_num_vco_settle_bits -1 : 0 ] w_VCO_SETTLING_TIME;
   wire [p_num_init_wait_bits  -1 : 0 ] w_INIT_WAIT_CYCLES;
   wire [p_num_vco_settle_bits -1 : 0 ] w_VCO_SETTLE_CYCLES;
   wire [p_num_cfg_change_bits -1 : 0 ] w_CONFIG_CHANGE_CYCLES;	
   wire [p_num_rst_fdbk_div_bits -1 : 0 ] w_RST_FDBK_DIV_CYCLES, w_RST_FDBK_DIV_DELAY ;
   reg  [p_num_rst_fdbk_div_bits -1 : 0 ] rst_fdbk_div_cnt;
   wire	ONE;
   assign ONE = 1'b1;
   wire [7:0] w_pll_reg0, w_pll_reg1, w_pll_reg2, w_pll_reg3, w_pll_reg4, w_pll_reg5, w_pll_reg6, w_pll_reg7,
              w_pll_reg8, w_pll_reg9, w_pll_reg10, w_pll_reg15, w_pll_reg16;
   wire [2:0] w_dft_tp1, dft_tp1;
   wire       scan_reset;
   assign w_pll_reg0 = scan_ats_mode ? 8'd0 : i_pll_reg0;
   assign w_pll_reg1 = scan_ats_mode ? 8'd0 : i_pll_reg1;
   assign w_pll_reg2 = scan_ats_mode ? 8'd0 : i_pll_reg2;
   assign w_pll_reg3 = scan_ats_mode ? 8'd0 : i_pll_reg3;
   assign w_pll_reg4 = scan_ats_mode ? 8'd0 : i_pll_reg4;
   assign w_pll_reg5 = scan_ats_mode ? 8'd0 : i_pll_reg5;
   assign w_pll_reg6 = scan_ats_mode ? 8'd0 : i_pll_reg6;
   assign w_pll_reg7 = scan_ats_mode ? 8'd0 : i_pll_reg7;
   assign w_pll_reg8 = scan_ats_mode ? 8'd0 : i_pll_reg8;
   assign w_pll_reg9 = scan_ats_mode ? 8'd0 : i_pll_reg9;
   assign w_pll_reg10 = scan_ats_mode ? 8'd0 : i_pll_reg10;
   assign o_pll_reg15 = scan_ats_mode ? 8'd0 : w_pll_reg15;
   assign o_pll_reg16 = scan_ats_mode ? 8'd0 : w_pll_reg16;
   assign o_pll_lock_ana = w_pll_lock_ana & ~scan_ats_mode;
   assign o_pll_lock_ana_ats = w_pll_lock_ana;
   assign 				w_INITIAL_WAIT_TIME = w_pll_reg1[0] ? w_pll_reg0[7:0] : w_INIT_WAIT_CYCLES;
   assign 				w_VCO_SETTLING_TIME = w_pll_reg2[6] ? w_pll_reg2[5:0] : w_VCO_SETTLE_CYCLES;
   assign                               w_RST_FDBK_DIV_DELAY = w_pll_reg1[2]? w_pll_reg1[7:3] : w_RST_FDBK_DIV_CYCLES;
   assign 				w_FBDIV_COARSE_IN =  w_pll_reg3;
   assign 				w_TM_FBDIV_COARSE_IN_BYPASS = w_pll_reg1[1];
   assign				w_IPDIV_FORCE_EN = w_pll_reg10[1];
   assign 				w_IPDIV_FORCED =  w_pll_reg10[6:2];
   assign				w_RST_FDBK_DIV_EN = w_pll_reg6[0];
   assign				w_RST_FDBK_DIV_FORCED = w_pll_reg6[1];
   assign 				w_VCO_CNT_WINDOW_EN =  w_pll_reg6[2];
   assign				w_VCO_CNT_WINDOW_FORCED = w_pll_reg6[3];
   assign 				o_ana_COARSEDONE = (w_pll_reg4[1] ? w_pll_reg4[0]: w_COARSE_DONE_del) & ~scan_ats_mode;
   assign				RST_FDBK_DIV_scan = w_RST_FDBK_DIV_EN ? w_RST_FDBK_DIV_FORCED : w_RST_FDBK_DIV_DELAYED;
   scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_RST_FDBK_DIV(
   .scan_mode_en_in(scan_mode_sel),
   .scan_signal_in(reset),
   .fcn_signal_in(RST_FDBK_DIV_scan),
   .fcn_signal_out(RST_FDBK_DIV)
   );
   assign				VCO_CNT_WINDOW = w_VCO_CNT_WINDOW_EN ? w_VCO_CNT_WINDOW_FORCED : w_VCO_CNT_WINDOW;
   assign w_pll_reg16 = o_ana_COARSE_CODE[p_coarse_code_len -2 :0];
   assign w_pll_reg15[0] = o_ana_COARSE_CODE[p_coarse_code_len -1];
   assign w_pll_reg15[1] = o_ana_STARTLOOP;
   assign w_pll_reg15[7] = w_pll_lock_ana;
   assign w_pll_reg15[6] = o_ana_COARSEDONE;
   assign w_pll_reg15[5] = o_VCO_CNT_WINDOW;
   assign w_pll_reg15[4] = RST_FDBK_DIV_scan;
   assign w_pll_reg15[3] = 1'b0;
   assign w_pll_reg15[2] = o_ana_PD_PFD;
   assign scan_reset = ~reset;
    dft_tp_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.WIDTH(3),.SCAN_MUX(0)) c_dft_tp1(
    .clock        (scan_clock),
    .reset_n      (scan_reset),
    .scan_mode    (1'b0),
    .fcn_signal_in(3'd0),
    .d_in         (w_dft_tp1),
    .d_out        (dft_tp1)
    );
   assign w_dft_tp1[0] = o_ats_pll_ldo_ref_en ^ o_ana_STARTLOOP ^ o_ana_PD_PFD;
   assign w_dft_tp1[1] = ^o_ana_COARSE_CODE[3:0];
   assign w_dft_tp1[2] = ^o_ana_COARSE_CODE[8:4];
   assign w_STDBY = i_STDBY & ~scan_ats_mode;
   always @(*)
     if(w_IPDIV_FORCE_EN)
       r_IPDIV = w_IPDIV_FORCED;
     else
     begin
       if (pll_IPDIV == 5'b0)
         r_IPDIV = 5'b1;
       else
         r_IPDIV = pll_IPDIV;
     end
assign o_IPDIV = r_IPDIV;
   always @(*)
     if (w_TM_FBDIV_COARSE_IN_BYPASS)
       r_FBDIV = w_FBDIV_COARSE_IN;
     else
       r_FBDIV = pll_FBDIV;
assign o_FBDIV =  r_FBDIV;
   always@(posedge i_REFCLK or posedge i_PD)
   begin
       if(i_PD)
           o_VCO_CNT_WINDOW <= 1'b0;
       else
           o_VCO_CNT_WINDOW <= VCO_CNT_WINDOW;
   end   
   always@(posedge i_vco_pll_clk or posedge RST_FDBK_DIV)
   begin
       if(RST_FDBK_DIV)
           dco_count <= {p_count_len{1'b0}};
       else
           dco_count <= dco_count + 1'b1;
   end
   always@(posedge i_REFCLK or posedge i_PD)
   begin
       if(i_PD)
           rst_fdbk_div_cnt <= 5'd0;
       else if(~rst_fdbk_div_cnt_reached)
           rst_fdbk_div_cnt <=  rst_fdbk_div_cnt + 1'b1;
   end     
   assign rst_fdbk_div_cnt_reached = (rst_fdbk_div_cnt == w_RST_FDBK_DIV_DELAY);
   assign w_RST_FDBK_DIV_DELAYED = rst_fdbk_div_cnt_reached ? w_RST_FDBK_DIV : 1'b1;
   always@(posedge i_REFCLK or posedge i_PD)
   begin
       if(i_PD)
           pll_ldo_ref_cnt <= 3'd0;
       else if(~o_ats_pll_ldo_ref_en & scan_ats_mode)
           pll_ldo_ref_cnt <=  pll_ldo_ref_cnt + 1'b1;
   end 
   assign o_ats_pll_ldo_ref_en = (pll_ldo_ref_cnt == LDO_REF_EN_CYCLES);
   usb2_pll_coarse_code_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r
     #(
       .p_coarse_code_len(p_coarse_code_len),
       .p_fbdiv_len (p_fbdiv_len),
       .p_count_len (p_count_len),
       .p_num_init_wait_bits (p_num_init_wait_bits),
       .p_num_vco_settle_bits (p_num_vco_settle_bits)
       )
       COARSE_CODE
	 (
	  .i_PD			 (i_PD),
	  .i_REFCLK		 (i_REFCLK),
	  .i_FBDIV               (r_FBDIV),
	  .i_DCO_COUNT           (dco_count),
	  .i_VCO_SETTLING_TIME   (w_VCO_SETTLING_TIME),
	  .i_INITIAL_WAIT_TIME   (w_INITIAL_WAIT_TIME),
	  .i_TM_FORCE_COARSE_CODE_SEL (w_pll_reg6[6]),
	  .i_TM_DISABLE_0P5_LSB_ERROR (w_pll_reg6[5]),
	  .i_TM_BIG_JUMP         (w_pll_reg6[4]),
	  .o_COARSE_DONE         (w_COARSE_DONE),
	  .o_VCO_CNT_WINDOW      (w_VCO_CNT_WINDOW),
	  .o_RST_FDBK_DIV        (w_RST_FDBK_DIV),
	  .o_COARSE_CODE         (w_COARSE_COARSE_CODE),
	  .o_COARSE_CODE1	 (w_COARSE_CODE_STORED)
	  );
   usb2_pll_tx_pll_mode_change_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r
     #(
       .p_num_cfg_change_bits  (p_num_cfg_change_bits)
       )
       TX_PLL_MODE_CHANGE
	 (
	  .i_TM				(w_pll_reg5),
	  .i_BYPASS_LOCK_EN		(w_pll_reg4[3]),
	  .i_BYPASS_LOCK		(w_pll_reg4[2]),
	  .i_PD_PFD_FORCE_EN		(w_pll_reg4[4]),
	  .i_PD_PFD_FORCE		(w_pll_reg4[5]),
	  .i_PLL_LOCK_TIME_15		(w_pll_reg4[6]),
	  .i_COARSE_DONE		(w_COARSE_DONE),
	  .i_PD				(i_PD),
	  .pllrefsel			(w_pllrefsel),
	  .i_STDBY			(w_STDBY),
	  .i_REFCLK			(i_REFCLK),
	  .i_CONFIG_CHANGE_CYCLES       (w_CONFIG_CHANGE_CYCLES),
	  .o_ana_START_LOOP		(w_ana_STARTLOOP),
	  .o_COARSE_DONE_del            (w_COARSE_DONE_del),
	  .o_ana_PD_PFD			(w_ana_PD_PFD),
	  .o_ana_pll_lock		(w_pll_lock_ana)
	  );
   usb2_pll_tx_pll_wait_time_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r
     #(
      .p_num_init_wait_bits (p_num_init_wait_bits),
      .p_num_vco_settle_bits (p_num_vco_settle_bits), 
      .p_num_cfg_change_bits (p_num_cfg_change_bits),
      .p_num_rst_fdbk_div_bits(p_num_rst_fdbk_div_bits),
      .p_num_ldo_ref_en_bits (p_num_ldo_ref_en_bits),
      .p_fbdiv_len (p_fbdiv_len)
      )
     tx_pll_wait_time
       (
	.i_FBDIV (r_FBDIV),
	.o_INIT_WAIT_CYCLES (w_INIT_WAIT_CYCLES),
	.o_VCO_SETTLE_CYCLES (w_VCO_SETTLE_CYCLES),
	.o_CONFIG_CHANGE_CYCLES (w_CONFIG_CHANGE_CYCLES),
	.o_LDO_REF_EN_CYCLES(LDO_REF_EN_CYCLES),
	.o_RST_FDBK_DIV_CYCLES(w_RST_FDBK_DIV_CYCLES)
	);
   usb2_pll_coarse_code_split_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r
     #(.p_coarse_code_len  (p_coarse_code_len),
       .p_v2i_code_len (p_v2i_code_len)
       )
       COARSE_CODE_SPLIT
	 (
	  .i_COARSE_CODE (r_ana_COARSE_CODE),
	  .i_BYPASS (ONE),		 
	  .o_COARSE_CODE (w_ana_COARSE_CODE),
	  .i_TM_BITS (w_pll_reg9[6:0])
	  );
    assign o_ana_COARSE_CODE = i_pll_bypass_mode ? 9'b100001000 : w_ana_COARSE_CODE;
    assign o_ana_PD_PFD      = i_pll_bypass_mode ? 1'b1 : w_ana_PD_PFD;
    assign o_ana_STARTLOOP   = i_pll_bypass_mode ? 1'b0 : w_ana_STARTLOOP;
   always @(*)
   begin
     if(w_pll_reg10[0])				 
       r_ana_COARSE_CODE = {w_pll_reg9[7], w_pll_reg8};
     else
     begin    
       if (w_COARSE_DONE)
         r_ana_COARSE_CODE = w_COARSE_CODE_STORED;
       else
	 r_ana_COARSE_CODE = w_COARSE_COARSE_CODE;
     end
   end
assign w_pllrefsel	= (w_pll_reg7[0] ? w_pll_reg7[4:1] : pllrefsel) ;
assign o_pllrefsel      = scan_ats_mode? 4'd0: w_pllrefsel;
always @*
begin
	case(w_pllrefsel)
	4'b 0000:			 
	begin
		pll_IPDIV = 5'd 2   ;
		pll_FBDIV = 8'd 100 ;
	end
	4'b 0001:			 
	begin
		pll_IPDIV = 5'd 2   ;
		pll_FBDIV = 8'd 96  ;
	end
	4'b 0010:			 
	begin
		pll_IPDIV = 5'd 3   ;
		pll_FBDIV = 8'd 120 ;
	end
	4'b 0011:			 
	begin
		pll_IPDIV = 5'd 4   ;
		pll_FBDIV = 8'd 100 ;
	end
	4'b 0100:			 
	begin
		pll_IPDIV = 5'd 4   ;
		pll_FBDIV = 8'd 96  ;
	end
	4'b 0101:			 
	begin
		pll_IPDIV = 5'd 6   ;
		pll_FBDIV = 8'd 120 ;
	end
        4'b 0110: 		       
        begin
	      pll_IPDIV = 5'd 5	;
	      pll_FBDIV = 8'd 96  ;
        end     
        4'b 0111: 		       
        begin
	      pll_IPDIV = 5'd 13  ;
	      pll_FBDIV = 8'd 240 ;
        end
	4'b 1000:			 
	begin
		pll_IPDIV = 5'd 8   ;
		pll_FBDIV = 8'd 100 ;
	end
	4'b 1001:			 
	begin
		pll_IPDIV = 5'd 10  ;
		pll_FBDIV = 8'd 120 ;
	end
	4'b 1010:			 
	begin
		pll_IPDIV = 5'd 12  ;
		pll_FBDIV = 8'd 120 ;
	end
	4'b 1011:			 
	begin
		pll_IPDIV = 5'd 10   ;
		pll_FBDIV = 8'd 96   ;
	end
        4'b 1100: 		       
        begin
	      pll_IPDIV = 5'd 26  ;
	      pll_FBDIV = 8'd 240 ;
        end
	4'b 1101:                      
        begin
              pll_IPDIV = 5'd 20 ;
              pll_FBDIV = 8'd 96 ;
        end
	default:			 
	begin
		pll_IPDIV = 5'd 2   ;
		pll_FBDIV = 8'd 100 ;
	end
	endcase
end
always @(posedge w_COARSE_DONE)
begin
   if (w_COARSE_COARSE_CODE == 9'b000000000 | w_COARSE_COARSE_CODE == 9'b111111111)
              $display("Error : PLL Coarse code saturated");
end
endmodule 
module INSTRUCTION_REGISTER_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r(SHIFTIR, CLOCKIR, TDI, RESET, TDO,
                            JTAG_INSTR_CAPTURE_2, JTAG_INSTR_CAPTURE_3, 
                            BIT0, BIT1, BIT2, BIT3);
   input  SHIFTIR;
   input  CLOCKIR;
   input  TDI;
   input  RESET;
   input  JTAG_INSTR_CAPTURE_2;
   input  JTAG_INSTR_CAPTURE_3;
   output TDO;
   output BIT0;
   output BIT1;
   output BIT2;
   output BIT3;
   wire GND;
   wire VDD;
   wire TRS_GATED_RESET;
   reg IR_BIT0;
   wire IR_BIT0_MUX;
   reg IR_BIT1;
   wire IR_BIT1_MUX;
   reg IR_BIT2;
   wire IR_BIT2_MUX;
   reg IR_BIT3;
   wire IR_BIT3_MUX;
   assign GND = 1'b0;
   assign VDD = 1'b1;
   assign TRS_GATED_RESET = ~(RESET);
   assign BIT3 = IR_BIT3;
   assign IR_BIT3_MUX = ((JTAG_INSTR_CAPTURE_3 & ~(SHIFTIR)) | (TDI & SHIFTIR));
   always @(posedge CLOCKIR or posedge TRS_GATED_RESET)
     begin : TRB_BIT3_REG
       if (TRS_GATED_RESET)
            IR_BIT3 <= 1'b1;
       else
        IR_BIT3 <= IR_BIT3_MUX;
     end
   assign BIT2 = IR_BIT2;
   assign IR_BIT2_MUX = ((JTAG_INSTR_CAPTURE_2 & ~(SHIFTIR)) | (IR_BIT3 & SHIFTIR));
   always @(posedge CLOCKIR or posedge TRS_GATED_RESET)
     begin : TRB_BIT2_REG
       if (TRS_GATED_RESET)
            IR_BIT2 <= 1'b1;
       else
        IR_BIT2 <= IR_BIT2_MUX;
     end
   assign BIT1 = IR_BIT1;
   assign IR_BIT1_MUX = ((GND & ~(SHIFTIR)) | (IR_BIT2 & SHIFTIR));
   always @(posedge CLOCKIR or posedge TRS_GATED_RESET)
     begin : TRB_BIT1_REG
       if (TRS_GATED_RESET)
            IR_BIT1 <= 1'b1;
       else
        IR_BIT1 <= IR_BIT1_MUX;
     end
   assign BIT0 = IR_BIT0;
   assign IR_BIT0_MUX = ((VDD & ~(SHIFTIR)) | (IR_BIT1 & SHIFTIR));
   always @(posedge CLOCKIR or posedge TRS_GATED_RESET)
     begin : TRB_BIT0_REG
       if (TRS_GATED_RESET)
            IR_BIT0 <= 1'b1;
       else
        IR_BIT0 <= IR_BIT0_MUX;
     end
   assign TDO = IR_BIT0;
endmodule
`timescale 1ns/1ps
module udc_dvdd_aon_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r(
input           linestate_sel,                   
input   [1:0]   filter_linestate_d,              
input   [1:0]   internal_opmode,                 
input           i_ted_squelch_ana,               
input           hsrx_diff_data,                  
input           lane_reverse,                    
input           scan_mode,                       
input   [1:0]   test_afe_common_reg1,            
input           test_vbusvld_sessvldn,
input           fslsserialmode_sync,             
input           i_afe_rxdm_ana,                   
input           i_afe_rxdp_ana,                  
input           dppulldown,                      
input           dmpulldown,                      
input           i_otgc_vbusvalid_ana,
input           i_otgc_sessvalid_ana,
input           i_otgc_id_ana,
input           i_bg_powergood,
input           idpullup,
input           sleepm,
input           suspendm,                        
input   [1:0]   powerdown,                       
input   [1:0]   i_pso_disable_sel,               
input           i_pso_disable,
input           psm_clock,
input           psm_rstn,
input           scan_sieclock,
input           scan_ats_mode,
input           reset,
input   [1:0]   test_idpullup,
input           databus_reset,
input           databus16_8,
input   [1:0]   xcvrselect,
input           xcvr_aon_rstn,
input           sieclock,
input           deep_sleep_en1_in,                       
input           deep_sleep_en2_in,                       
input           i_bist_mux_resets,
input           i_bist_on,
input           i_bist_hostdevice_sel,
input           i_bist_complete,
input           i_bist_mode_en,
input           bist_speed_sel,                  
input           bist_interface_sel,
input   [1:0]   opmode,                          
input           termselect,                      
input           i_afe_clipper_en,                
input           dprpu1_en,
input           dmrpu1_en,
input           dprpu2_en,
input           dmrpu2_en,
input           dprpd_en,
input           dmrpd_en,
input           i_serx_en,
input           i_serx_bias_en,
input           bc_en,    
input           fslsserialmode, 
input           txvalid, 
input           txvalidh,         
input           hssi_mode, 
input           pll_standalone, 
input           pll_clkon, 
input           adp_en,  
input           iddq_mode,        
input [1:0]     loopback,        
input           avdd_core_powergood,
output  wire       avdd_iso,
output  wire       o_databus_store,
output  wire       o_otgc_id_pullup_en,
output  wire       o_otgc_id_pullup_en_aon,
output  wire       o_bg_powergood,
output  wire       o_bg_powergood_ats,
output  wire       iddig,
output  wire       vbusvalid,
output  wire       sessvld,
output  wire       o_afe_clipper_en,             
output  wire       o_dprpu1_en,
output  wire       o_dmrpu1_en,
output  wire       o_dprpu2_en,
output  wire       o_dmrpu2_en,
output  wire       o_dprpd_en,
output  wire       o_dmrpd_en,
output  wire       o_serx_en,
output  wire       o_serx_en_aon,
output  wire       o_serx_bias_en,
output  [1:0]      o_powerdown,
output             iso_utmi,                        
output             iso_xcvr,
output             deep_sleep_en1_out,                      
output             deep_sleep_en2_out,                      
output             deep_sleep_en1_out_l3,                   
output             deep_sleep_en2_out_l3,                   
output             deep_sleep,                      
output             rxdp_ana,                       
output             rxdm_ana,                       
output             o_lane_reverse,                       
output             o_lane_reverse_aon,
output  reg [1:0]  xcvrselect_sync,
output      [1:0]  linestate,                    
output wire [1:0]  o_opmode,
output wire [1:0]  o_xcvrselect,
output wire        o_termselect,
output wire        o_dppulldown,
output wire        o_dmpulldown,
output wire        o_afe_rxdm_ana,
output wire        o_afe_rxdp_ana,
output wire        o_bist_mode_fs,
output wire        o_bist_mode_hs,
output wire        o_suspendm,
output wire        o_reset,
output wire        o_sleepm,
output wire        o_bc_en,       
output wire        o_fslsserialmode, 
output wire        o_txvalid, 
output wire        o_txvalidh,    
output wire        o_hssi_mode, 
output wire        o_pll_standalone,
output wire        o_pll_clkon, 
output wire        o_adp_en,  
output wire [12:0] o_tie_low,
output wire [1:0]  o_loopback     
);
wire            host_mode, psm_clk;
wire    [1:0]   internal_linestate;
reg     [1:0]   combo_linestate;
reg             databus_store;
parameter LINESTATE_J   = 2'b 01 ;
parameter LINESTATE_K   = 2'b 10 ;
parameter LINESTATE_SE0 = 2'b 00 ;
parameter LINESTATE_SE1 = 2'b 11 ;
parameter HIGH_SPEED  = 2'b 00 ;
parameter FULL_SPEED  = 2'b 01 ;
parameter LOW_SPEED   = 2'b 10 ;
parameter CHIRP_MODE  = 2'b 11 ;
reg     [1:0]   r_test_afe_common_reg1, r_test_idpullup;
wire            psm_rstn_sync, databus_clock ;
wire            l2_deep_sleep, l3_deep_sleep, flop_cntrl, scan_mode_sel;
reg             sieclock_start;
reg             iso_xcvr_r;
wire    [1:0]   w_internal_opmode;
wire            w_lane_reverse, o_pso_disable;
wire            scan_otgc_id_ana, scan_otgc_vbusvalid_ana,scan_otgc_sessvalid_ana;
wire            w_deep_sleep, w_iso_utmi;
wire            lane_rev_dprpu1_en, lane_rev_dmrpu1_en, lane_rev_dprpu2_en, lane_rev_dmrpu2_en, lane_rev_dprpd_en,lane_rev_dmrpd_en,
                w_serx_bias_en, power_suspend_ack, power_resetn, power_recover_ack, w_deep_sleep_l3; 
reg [4:0] susp_cnt;
wire susp_cnt_reached;
wire susp_cnt_en, suspendm_sync, sieclock_start_sync;
wire scan_reset;
wire [2:0]      w_dft_tp1, dft_tp1;
wire [3:0]      dft_in_tp1;
assign avdd_iso = ~avdd_core_powergood;
dft_tp_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.WIDTH(3),.SCAN_MUX(0)) c_dft_tp1(
.clock        (scan_sieclock),
.reset_n      (scan_reset),
.scan_mode    (1'b0),
.fcn_signal_in(3'd0),
.d_in         (w_dft_tp1),
.d_out        (dft_tp1)
);
assign w_dft_tp1[0] = o_otgc_id_pullup_en_aon ^ o_lane_reverse_aon ^ lane_rev_dprpu1_en ^ lane_rev_dmrpu1_en;
assign w_dft_tp1[1] = lane_rev_dprpu2_en ^ lane_rev_dmrpu2_en ^ lane_rev_dprpd_en ^ lane_rev_dmrpd_en;
assign w_dft_tp1[2] = o_serx_en_aon ^ w_serx_bias_en ^ o_afe_clipper_en;
dft_tp_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.WIDTH(4),.SCAN_MUX(0)) c_dft_in_tp1(
.clock        (scan_sieclock),
.reset_n      (scan_reset),
.scan_mode    (1'b0),
.fcn_signal_in(4'd0),
.d_in         (4'd0),
.d_out        (dft_in_tp1)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_otgc_id_ana(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[0]),
.fcn_signal_in(i_otgc_id_ana),
.fcn_signal_out(scan_otgc_id_ana)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_otgc_vbusvalid_ana(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[0]),
.fcn_signal_in(i_otgc_vbusvalid_ana),
.fcn_signal_out(scan_otgc_vbusvalid_ana)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_otgc_sessvalid_ana(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[1]),
.fcn_signal_in(i_otgc_sessvalid_ana),
.fcn_signal_out(scan_otgc_sessvalid_ana)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_afe_rxdm_ana(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[1]),
.fcn_signal_in(i_afe_rxdm_ana),
.fcn_signal_out(o_afe_rxdm_ana)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_afe_rxdp_ana(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[2]),
.fcn_signal_in(i_afe_rxdp_ana),
.fcn_signal_out(o_afe_rxdp_ana)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_mux_databus(
.scan_mode_en_in(scan_mode),
.scan_signal_in(scan_sieclock),
.fcn_signal_in(~databus_reset),
.fcn_signal_out(databus_clock)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_bg_powergood_ats(
.scan_mode_en_in(scan_mode_sel),
.scan_signal_in(dft_in_tp1[2]),
.fcn_signal_in(i_bg_powergood),
.fcn_signal_out(scan_bg_powergood_ats)
);
scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_scan_bg_powergood(
.scan_mode_en_in(scan_mode),
.scan_signal_in(dft_in_tp1[3]),
.fcn_signal_in(i_bg_powergood),
.fcn_signal_out(scan_bg_powergood)
);
always @*
begin
        case(w_internal_opmode)
        HIGH_SPEED: combo_linestate = i_ted_squelch_ana ? LINESTATE_SE0 : LINESTATE_J ;  
        FULL_SPEED: combo_linestate = {rxdm_ana,rxdp_ana} ;                              
        LOW_SPEED : combo_linestate = {rxdm_ana,rxdp_ana} ;                              
        CHIRP_MODE: combo_linestate = i_ted_squelch_ana ? LINESTATE_SE0 :
                                        hsrx_diff_data ? LINESTATE_J : LINESTATE_K ;     
        endcase
end
assign internal_linestate       = linestate_sel ? filter_linestate_d : combo_linestate ;
assign w_internal_opmode        = iso_utmi ? 2'd1 : internal_opmode;
assign rxdp_ana                 = (fslsserialmode_sync ? 1'b0 :(o_lane_reverse_aon ? o_afe_rxdm_ana : o_afe_rxdp_ana)) ;
assign rxdm_ana                 = (fslsserialmode_sync ? 1'b0 :(o_lane_reverse_aon ? o_afe_rxdp_ana : o_afe_rxdm_ana)) ;
assign o_lane_reverse_aon       = i_bist_mode_en ? 1'b0 : (test_afe_common_reg1[0] ? test_afe_common_reg1[1] : w_lane_reverse);
assign o_lane_reverse           = (scan_mode | iddq_mode) ? 1'b0 : o_lane_reverse_aon;
assign linestate                = w_deep_sleep_l3 ? 2'd0 : internal_linestate ;
always @(posedge databus_clock)
begin
        databus_store <= databus16_8 ;
end
always @(posedge sieclock or negedge xcvr_aon_rstn)
begin
        if(!xcvr_aon_rstn)
        xcvrselect_sync <= 2'b 01 ;  
        else
        xcvrselect_sync <= o_xcvrselect ;
end 
assign iddig                    = (w_deep_sleep_l3 ? 1'b0 :scan_otgc_id_ana) ;
assign vbusvalid                = (w_deep_sleep_l3 ? 1'b0 :(test_vbusvld_sessvldn ? scan_otgc_sessvalid_ana : scan_otgc_vbusvalid_ana)) ;
assign sessvld                  = (w_deep_sleep_l3 ? 1'b0 :scan_otgc_sessvalid_ana) ;
assign o_otgc_id_pullup_en_aon  = test_idpullup[0] ? test_idpullup[1] : idpullup;
assign o_otgc_id_pullup_en      = (scan_mode | iddq_mode) ? 1'b0 : o_otgc_id_pullup_en_aon;
assign scan_reset               = ~reset;
assign o_tie_low                = 13'd0 ;
assign host_mode                = (o_dppulldown & o_dmpulldown) ;
assign w_dprpu2_en              = iso_utmi ? (w_deep_sleep_l3 ? 1'b0 :((~host_mode & (o_xcvrselect == 2'b01)) ? 1'b1 :1'b0 )): dprpu2_en;
assign w_dmrpu2_en              = iso_utmi ? (w_deep_sleep_l3 ? 1'b0 :((~host_mode & (o_xcvrselect == 2'b10)) ? 1'b1 :1'b0 )): dmrpu2_en;
assign w_dprpu1_en              = iso_utmi ? (w_deep_sleep_l3 ? 1'b0 :((~host_mode & (o_xcvrselect == 2'b01)) ? 1'b1 :1'b0 )): dprpu1_en;
assign w_dmrpu1_en              = iso_utmi ? (w_deep_sleep_l3 ? 1'b0 :((~host_mode & (o_xcvrselect == 2'b10)) ? 1'b1 :1'b0 )) : dmrpu1_en;
assign w_dprpd_en               = iso_utmi ? (w_deep_sleep_l3 ? 1'b0 :(host_mode  ? 1'b1 :1'b0 )): dprpd_en;
assign w_dmrpd_en               = iso_utmi ? (w_deep_sleep_l3 ? 1'b0 :(host_mode  ? 1'b1 :1'b0 )): dmrpd_en;
assign o_dprpu1_en              = (iddq_mode | scan_mode) ? 1'd0 : lane_rev_dprpu1_en ;
assign o_dmrpu1_en              = (iddq_mode | scan_mode) ? 1'd0 : lane_rev_dmrpu1_en ;
assign o_dprpu2_en              = (iddq_mode | scan_mode) ? 1'd0 : lane_rev_dprpu2_en ;
assign o_dmrpu2_en              = (iddq_mode | scan_mode) ? 1'd0 : lane_rev_dmrpu2_en ;
assign o_dprpd_en               = (iddq_mode | scan_mode) ? 1'b1 : lane_rev_dprpd_en;
assign o_dmrpd_en               = (iddq_mode | scan_mode) ? 1'b1 : lane_rev_dmrpd_en;
assign lane_rev_dprpu1_en       = (o_lane_reverse_aon ? w_dmrpu1_en : w_dprpu1_en);
assign lane_rev_dmrpu1_en       = (o_lane_reverse_aon ? w_dprpu1_en : w_dmrpu1_en);
assign lane_rev_dprpu2_en       = (o_lane_reverse_aon ? w_dmrpu2_en : w_dprpu2_en);
assign lane_rev_dmrpu2_en       = (o_lane_reverse_aon ? w_dprpu2_en : w_dmrpu2_en);
assign lane_rev_dprpd_en        = (o_lane_reverse_aon ? w_dmrpd_en : w_dprpd_en);
assign lane_rev_dmrpd_en        = (o_lane_reverse_aon ? w_dprpd_en : w_dmrpd_en);
assign o_serx_en_aon            = (iso_utmi ? (w_deep_sleep_l3 ? 1'b0 :1'b1 ): i_serx_en);
assign w_serx_bias_en           = (iso_utmi ? (w_deep_sleep_l3 ? 1'b0 :1'b1 ): i_serx_bias_en);
assign w_afe_clipper_en         = (iso_utmi ? (w_deep_sleep_l3 ? 1'b0 :1'b1 ): i_afe_clipper_en);
assign o_serx_en                = (iddq_mode | scan_mode) ? 1'b0 : o_serx_en_aon;
assign o_serx_bias_en           = (iddq_mode | scan_mode) ? 1'd0 : w_serx_bias_en;
assign o_afe_clipper_en         = (iddq_mode | scan_mode) ? 1'd0 : w_afe_clipper_en;
assign scan_mode_sel            = scan_ats_mode ? 1'b0 : scan_mode;
assign o_bg_powergood           =  scan_bg_powergood; 
assign o_bg_powergood_ats       =  scan_bg_powergood_ats;
assign iso_utmi = 1'b0;
assign iso_l3 = 1'b0;
assign w_deep_sleep_l3 =1'b0;
assign deep_sleep = 1'b0 ;
assign ana_sleep = 1'b0 ;
assign ana_deep_sleep =1'b0 ;
assign iso_xcvr = 1'b0;
assign flop_cntrl = 1'b0;
assign deep_sleep_en1_out = 1'b0;
assign deep_sleep_en2_out = 1'b0;
assign deep_sleep_en1_out_l3 = 1'b0;
assign deep_sleep_en2_out_l3 = 1'b0;
udc_bist_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r                    c_udc_bist_mux (
.sieclock               (sieclock),
.scan_mode              (scan_mode),
.xcvr_sie_rstn          (xcvr_aon_rstn),                 
.i_bist_mux_resets      (i_bist_mux_resets),
.i_bist_on              (i_bist_on),
.i_bist_hostdevice_sel  (i_bist_hostdevice_sel),
.i_bist_complete        (i_bist_complete),
.i_bist_speed_sel       (bist_speed_sel),
.i_bist_interface_sel   (bist_interface_sel),
.i_bist_mode_en         (i_bist_mode_en),
.i_opmode               (opmode),
.i_xcvrselect           (xcvrselect),
.i_termselect           (termselect),
.i_dppulldown           (dppulldown),
.i_dmpulldown           (dmpulldown),
.suspendm               (suspendm),
.reset                  (reset),
.sleepm                 (sleepm),
.powerdown              (powerdown),
.databus_store          (databus_store),
.bc_en                  (bc_en),
.fslsserialmode         (fslsserialmode),
.txvalid                (txvalid),
.txvalidh               (txvalidh),
.hssi_mode              (hssi_mode),
.pll_standalone         (pll_standalone),
.pll_clkon              (pll_clkon),
.adp_en                 (adp_en),
.loopback               (loopback),
.lane_reverse           (lane_reverse),
.i_pso_disable          (i_pso_disable),
.o_sleepm               (o_sleepm),
.o_powerdown            (o_powerdown),
.o_suspendm             (o_suspendm),
.o_reset                (o_reset),
.o_opmode               (o_opmode),
.o_xcvrselect           (o_xcvrselect),
.o_termselect           (o_termselect),
.o_dppulldown           (o_dppulldown),
.o_dmpulldown           (o_dmpulldown),
.o_bist_mode_fs         (o_bist_mode_fs),
.o_bist_mode_hs         (o_bist_mode_hs),
.o_databus_store        (o_databus_store),
.o_bc_en                (o_bc_en),
.o_fslsserialmode       (o_fslsserialmode),
.o_txvalid              (o_txvalid),
.o_txvalidh             (o_txvalidh),
.o_hssi_mode            (o_hssi_mode),
.o_pll_standalone       (o_pll_standalone),
.o_pll_clkon            (o_pll_clkon),
.o_adp_en               (o_adp_en),
.o_loopback             (o_loopback),
.o_lane_reverse         (w_lane_reverse),
.o_pso_disable          (o_pso_disable)
);
endmodule
`timescale 1ns / 1ps
module usb2_pll_tx_pll_ctrl_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r
  (
   o_ana_ICP,   o_ana_FBDIV_VAL, 
   o_ana_COARSE_CODE, o_ana_FB_BY2_BYPASS,
   i_FBDIV, i_TM_BYPASS, i_COARSE_CODE_STORED
   );
   parameter p_coarse_code_len = 8;
   parameter p_fbdiv_len = 8;
   parameter p_cpcode_len = 8;
   parameter p_tbits = p_cpcode_len+p_coarse_code_len+7+1;
   input [p_fbdiv_len -1 :0] i_FBDIV;
   input [p_coarse_code_len -1 :0] i_COARSE_CODE_STORED;
   input [p_tbits-1:0] 		   i_TM_BYPASS;
   output [p_coarse_code_len -1 :0] o_ana_COARSE_CODE;
   output [p_cpcode_len -1 :0] 	    o_ana_ICP;   
   output [p_fbdiv_len -1 :0] 	    o_ana_FBDIV_VAL;
   output 			    o_ana_FB_BY2_BYPASS;
   reg [p_coarse_code_len -1 :0]    r_ana_COARSE_CODE;	  
   reg [p_cpcode_len -1 :0] 	    r_ana_ICP;   	  
   reg [p_fbdiv_len -1 :0] 	    r_ana_FBDIV_VAL;
   wire 				    r_ana_FB_BY2_BYPASS;
   wire [p_tbits-1:0] w_TM;
   assign     w_TM = i_TM_BYPASS;
   assign o_ana_ICP             = w_TM[p_cpcode_len] ? w_TM[p_cpcode_len-1:0] : r_ana_ICP;
   assign o_ana_FB_BY2_BYPASS   = w_TM[p_cpcode_len+4] ? w_TM[p_cpcode_len+3] : r_ana_FB_BY2_BYPASS;
   assign o_ana_COARSE_CODE     = w_TM[p_cpcode_len+7] ? w_TM[p_cpcode_len+p_coarse_code_len+7:p_cpcode_len+8] : r_ana_COARSE_CODE;
   assign o_ana_FBDIV_VAL       = r_ana_FBDIV_VAL;
   assign r_ana_FB_BY2_BYPASS = 1'b1;
   always @(*)
     begin
        r_ana_FBDIV_VAL = i_FBDIV;  
	r_ana_COARSE_CODE = i_COARSE_CODE_STORED;   
     end  
   always @(*)
     if (r_ana_FBDIV_VAL <= 110)
       r_ana_ICP[7:0] = 8'b01100100;
     else if (r_ana_FBDIV_VAL <= 125)
       r_ana_ICP[7:0] = 8'b01110000;
     else if (r_ana_FBDIV_VAL <= 145)
       r_ana_ICP[7:0] = 8'b01110100;
     else if (r_ana_FBDIV_VAL <= 166)
       r_ana_ICP[7:0] = 8'b10100010;
     else if (r_ana_FBDIV_VAL <= 183)
       r_ana_ICP[7:0] = 8'b10100100;
     else if (r_ana_FBDIV_VAL <= 211)
       r_ana_ICP[7:0] = 8'b10110000;
     else if (r_ana_FBDIV_VAL <= 225)
       r_ana_ICP[7:0] = 8'b10110100;
     else if (r_ana_FBDIV_VAL <= 240)
       r_ana_ICP[7:0] = 8'b10110110;
     else
       r_ana_ICP[7:0] = 8'b10000000;
endmodule  
module JTAG_CLOCK_GATE_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r(test, enable, ck_in, ck_out);
   input  test;
   input  enable;
   input  ck_in;
   output ck_out;
   wire test_S;
   wire enable_S;
   wire ck_in_S;
   wire ck_out_S;
   wire JJM_OR_ck_out;
   reg JJM_AND_ck_out;
   assign test_S = test;
   assign enable_S = enable;
   assign ck_in_S = ck_in;
   assign ck_out = ck_out_S;
   always @(JJM_OR_ck_out or ck_in_S)
   begin : JJM_LATCH
     if (~ck_in_S)
       JJM_AND_ck_out <= JJM_OR_ck_out;
   end
   assign JJM_OR_ck_out = (test_S | enable_S);
   assign ck_out_S = (ck_in_S & JJM_AND_ck_out);
endmodule
`timescale 1ns/1ps
module udc_dvdd_sw_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r( 
        cdr_eb_wr_reset,
        i_bist_mode_en,
        refclock,                        
        hssi_tx_clockin,                 
        i_pll_480p0_clk,                 
        i_pll_480p0_vco_clk,             
        apb_pclk,                        
        tap_tck,                         
        scan_hsclock,                    
        scan_hssiclock,                  
        scan_sieclock,                   
        scan_clock,
        reset,
        apb_presetn,
        tap_trst_n,
        pll_clk_gate_ack,
        sieclock,                        
        hssi_tx_clockout,                
        hssi_rx_clockout,                
        o_fb_clk,                
        o_div_refclock,
        o_usb2_calib_clock,                 
        o_rstn_cdr_async,                
        xcvr_aon_rstn,
        pll_gate,
        rstn_pll_clockout,
        udc_calib_rstn,
        scan_ats_mode,                   
        scan_mode,                       
        scan_en_cg,                      
        scan_en,
        scan_ats_sieclock,
        scan_ats_hsclock,
        scan_ats_hssiclock,
        sleepm,                          
        suspendm,                        
        powerdown,                       
        xcvrselect,                      
        termselect,                      
        opmode,                          
        databus16_8,                     
        dppulldown,                      
        dmpulldown,                      
        txbitstuffenable,                
        txbitstuffenableh,               
        xcvrselect_sync,
        databus_store,
        hostdisconnect,                  
        filter_linestate_d,                      
        linestate_sel,                   
        internal_opmode,
        txvalid,                         
        txvalidh,                        
        datain,                          
        txready,                         
        rxactive,                        
        rxvalid,                         
        rxvalidh,                        
        rxerror,                         
        dataout,                         
        fslsserialmode,                  
        idle_rpu_enable,                         
        tx_enable_n,                     
        tx_dat,                          
        tx_se0,                          
        rx_dp,                           
        rx_dm,                           
        rx_rcv,                          
        fslsserialmode_sync,
        hssi_mode,
        hssi_datain,
        hssi_txvalid,
        hssi_tx_enable,
        hssi_ted_en,
        hssi_dataout,
        hssi_rxvalid,
        hssi_squelch,
        hssi_rxerror,
        hssi_ded_ana,
        hssi_chirp_data,
        pll_clkon,                       
        pll_standalone,                  
        lane_reverse,                    
        pllrefsel,                       
        iddig,                           
        vbusvalid,                       
        sessvld,                                 
        adp_en,                          
        adp_probe_en,                    
        adp_sense_en,                    
        adp_sink_en,                     
        adp_source_en,                   
        adp_probe_sts,                   
        adp_sense_sts,                   
        bc_en,                           
        idp_src_en,                      
        idp_sink_en,                     
        idm_sink_en,                     
        vdp_src_en,                      
        vdm_src_en,                      
        dp_vdat_ref_comp_en,             
        dm_vdat_ref_comp_en,             
        dm_vlgc_comp_en,                 
        rid_float_comp_en,               
        rid_nonfloat_comp_en,            
        dcd_comp_sts,                    
        dp_vdat_ref_comp_sts,            
        dm_vdat_ref_comp_sts,            
        dm_vlgc_comp_sts,                
        rid_a_comp_sts,                  
        rid_b_comp_sts,                  
        rid_c_comp_sts,                  
        rid_float_comp_sts,              
        rid_gnd_comp_sts,                
        bist_on,                                 
        bist_mode_sel,                   
        loopback,                        
        iddq_mode,
        bist_mode_hs,
        bist_mode_fs,
        i_usb2_phy_spare,
        raw_squelch_ana,        
        bist_complete,                   
        bist_error,                      
        bist_error_count,
        bist_speed_sel,
        bist_interface_sel,
        o_bist_hostdevice_sel,
        o_bist_on,
        o_bist_mux_resets,
        o_usb2_phy_spare,
        apb_paddr,                      
        apb_pwrite,                     
        apb_penable,                    
        apb_pselx,                      
        apb_pwdata,                     
        apb_prdata,                     
        apb_pready,                     
        apb_pslverr,                    
        tap_tdi,
        tap_tms,
        tap_tdo,
        tap_tdoen,
        dprpu1_en,                     
        dmrpu1_en,                     
        dprpu2_en,                     
        dmrpu2_en,                     
        dprpd_en,                      
        dmrpd_en,                      
        i_cdr_reg9,                      
        i_cdr_reg10,                     
        i_cdr_reg11,                     
        i_cdr_reg12,                     
        i_hsrx_sampler_calib_done,       
        i_afe_hsrx_rec_clk,              
        i_afe_hsrx_rec_data,             
        i_afe_hsrx_rec_data_valid,       
        i_afe_hsrx_rec_decision_error,   
        i_afe_hsrx_diff_data,            
        o_cdr_reg0,                      
        o_cdr_reg1,                      
        o_cdr_reg2,                      
        o_cdr_reg3,                      
        o_cdr_reg4,                      
        o_cdr_reg5,                      
        o_cdr_reg6,                      
        o_hsrx_en,                       
        o_hsrx_en_clipper,               
        o_hsrx_sampler_enable,           
        hsrx_diff_data,                  
        o_afe_suspendm_rx,                       
        o_hstx_en,                       
        o_hstx_en_delayed,               
        o_hspredrv_en,                   
        o_hsdrv_en,                      
        o_hsddi,                         
        o_chirp_mode_en,                 
        o_chirp_mode_en_aon,             
        o_afe_suspendm_tx,               
        o_hstx_boost_deemp_off,
        o_fs_edge_sel,                   
        o_lsfstx_en,                     
        o_lsfsdrv_en,                    
        o_lsfs_ddi,                      
        o_assert_sezero,                 
        o_afe_clipper_en,                
        i_afe_lsfsrx_ana,                
        o_lsfsrx_en,                     
        i_afe_rxdp_ana,                  
        i_afe_rxdm_ana,                  
        rxdp_ana,                  
        rxdm_ana,                  
        o_serx_en,                       
        serx_en,                         
        serx_bias_en,
        o_afe_tx_reg0,                   
        o_afe_tx_reg1,                   
        o_afe_tx_reg2,                   
        o_afe_tx_reg3,                   
        o_afe_tx_reg4,                   
        o_afe_tx_reg5,                   
        o_afe_tx_reg6,                   
        o_afe_tx_reg7,                   
        o_afe_tx_reg8,                   
        o_afe_tx_reg9,                   
        o_afe_tx_reg10,                  
        o_afe_tx_reg11,                  
        o_afe_tx_reg12,                  
        o_afe_rx_reg0,                   
        o_afe_rx_reg1,                   
        o_afe_rx_reg2,                   
        o_afe_rx_reg3,                   
        o_afe_rx_reg4,                   
        o_afe_rx_reg5,                   
        o_afe_rx_reg6,                   
        o_afe_hscalib_code,
        o_afe_fscalib_code,
        o_afe_bccalib_code,
        i_adp_probe_ana,                 
        i_adp_sense_ana,                 
        o_adp_en,                        
        o_adp_probe_en,                  
        o_adp_sense_en,                  
        o_adp_sink_current_en,           
        o_adp_source_current_en,         
        i_pll_bypass_mode,               
        o_pll_coarse_done_ana,
        o_pll_coarse_done,               
        o_pll_pd,                        
        o_pll_standby,
        o_pll_coarse_code,               
        o_pll_pfd_pd,                    
        o_pll_startloop,                 
        o_pll_pso,                       
        o_pll_pso_delay,                 
        o_pll_ldo_core_en,
        o_pll_ldo_core_en_tx,
        o_pll_ldo_ref_en,
        o_pll_ldo_ref_core,
        o_afe_pll_reg0,                  
        o_afe_pll_reg1,                  
        o_afe_pll_reg2,                  
        o_afe_pll_reg3,                  
        o_afe_pll_reg4,                  
        o_afe_pll_reg5,                  
        otgc_id_pullup_en,               
        o_otgc_vbusvalid_en,             
        o_otgc_absvalid_en,              
        i_dp_vdat_ref_comp_sts,          
        i_dm_vdat_ref_comp_sts,          
        i_rid_float_a_comp_sts,          
        i_rid_b_c_comp_sts,              
        o_idp_src_en,                    
        o_idm_src_en,                    
        o_idp_sink_en,                   
        o_idm_sink_en,                   
        o_vdp_src_en,                    
        o_vdm_src_en,                    
        o_dp_vdat_ref_comp_en,           
        o_dm_vdat_ref_comp_en,           
        o_rid_float_src_en,              
        o_rid_nonfloat_src_en,           
        o_rid_float_ref_en,              
        o_rid_a_ref_en,                  
        o_rid_b_ref_en,                  
        o_rid_c_ref_en,                  
        o_rid_float_a_comp_en,           
        o_rid_b_c_comp_en,               
        o_afe_bc_reg0,                   
        o_afe_bc_reg1,                   
        o_afe_bc_reg2,                   
        o_afe_bc_reg3,                   
        o_afe_bc_reg4,                   
        o_afe_bc_reg5,                   
        o_afe_bc_reg6,                   
        i_ded_ana,                       
        i_ted_comp_out_up,               
        i_ted_comp_out_down,             
        ted_squelch_ana,
        o_ed_en,                         
        o_ted_en,                        
        o_avdd_ted_en,
        o_ted_calib_code_up,             
        o_ted_calib_code_down,           
        o_ted_calib_mode_up,             
        o_ted_calib_mode_down,           
        linestate,
        bg_powergood,                    
        bg_powergood_ats,
        o_bg_pd,
        o_bg_pd_bg_ok,
        o_afe_bg_reg3,
        o_afe_bg_reg2,
        o_afe_bg_reg1,
        o_afe_bg_reg0,          
        i_calib_cmp_out,
        o_calib_pd_bias_comp,
        o_res_calib_code,
        o_afe_calib_reg0,
        o_ted_calib_done,
        i_afe_tx_spare_test_reg,
        i_afe_rx_spare_test_reg,
        i_afe_pll_spare_test_reg,
        i_afe_otg_adp_bc_spare_test_reg,
        i_afe_calib_spare_test_reg,
        o_afe_tx_spare_test_reg,
        o_afe_rx_spare_test_reg,
        o_afe_pll_spare_test_reg,
        o_afe_otg_adp_bc_spare_test_reg,
        o_afe_calib_spare_test_reg,
        o_bist_mode_en,
        tm_idpullup,
        i_cdr_test_digout,
        test_aon_common_reg1,
        test_vbusvld_sessvldn,
        test_pll_480_clock_gate_ovr,
        usb2_phy_irq
);
input           cdr_eb_wr_reset,i_bist_mode_en, refclock, hssi_tx_clockin, i_pll_480p0_clk, i_pll_480p0_vco_clk, scan_clock,
                scan_hsclock, scan_hssiclock, scan_sieclock, apb_pclk, tap_tck, reset, tap_trst_n, apb_presetn, pll_clk_gate_ack;
output          sieclock, hssi_tx_clockout, hssi_rx_clockout, o_fb_clk, o_div_refclock, xcvr_aon_rstn, o_usb2_calib_clock, 
                o_rstn_cdr_async, scan_ats_sieclock, scan_ats_hsclock, scan_ats_hssiclock, pll_gate, rstn_pll_clockout ;
input                   scan_mode, scan_en, scan_en_cg, scan_ats_mode ;
input                   suspendm, termselect, databus16_8, dppulldown, dmpulldown, txbitstuffenable, txbitstuffenableh ;
input           [1:0]   xcvrselect, opmode, powerdown, xcvrselect_sync ;
input                   sleepm, databus_store ;
output  wire            hostdisconnect, linestate_sel, o_bist_mode_en ;
output  wire    [1:0]   filter_linestate_d, internal_opmode ;
input                   txvalid, txvalidh ;
input           [15:0]  datain ;
output  wire            txready ;
output  wire            rxactive, rxvalid, rxvalidh, rxerror ;
output  wire    [15:0]  dataout ;
input           fslsserialmode, tx_enable_n, tx_dat, tx_se0, idle_rpu_enable ;
output  wire    rx_dp, rx_dm, rx_rcv, fslsserialmode_sync ;
input           hssi_mode, hssi_tx_enable, hssi_ted_en;
input   [1:0]   hssi_txvalid, hssi_datain;
output          hssi_rxvalid, hssi_rxerror, hssi_chirp_data, hssi_squelch, hssi_ded_ana;
output  [3:0]   hssi_dataout;
input           pll_clkon, pll_standalone, lane_reverse; 
input   [3:0]   pllrefsel ;
input           iddig, vbusvalid, sessvld ;
input           adp_en, adp_probe_en, adp_sense_en, adp_sink_en, adp_source_en ;
output  wire    adp_probe_sts, adp_sense_sts ;
input           bc_en, idp_src_en, idp_sink_en, idm_sink_en, vdp_src_en, vdm_src_en, dp_vdat_ref_comp_en, dm_vdat_ref_comp_en,
                dm_vlgc_comp_en, rid_float_comp_en, rid_nonfloat_comp_en ;
output  wire    dcd_comp_sts, dp_vdat_ref_comp_sts, dm_vdat_ref_comp_sts, dm_vlgc_comp_sts, rid_a_comp_sts, rid_b_comp_sts, rid_c_comp_sts,
                rid_float_comp_sts, rid_gnd_comp_sts ;
input                   bist_on, iddq_mode, bist_mode_fs, bist_mode_hs, raw_squelch_ana;
input           [3:0]   bist_mode_sel ;
input           [1:0]   loopback ,linestate;
input           [3:0]   i_usb2_phy_spare;
output  wire            o_bist_mux_resets, bist_complete, bist_error, o_bist_on, bist_speed_sel, bist_interface_sel, o_bist_hostdevice_sel ;
output  wire    [7:0]   bist_error_count ;
output  wire    [7:0]   o_usb2_phy_spare;
input                   apb_pwrite;
input           [7:0]   apb_paddr, apb_pwdata ;
input                   apb_penable, apb_pselx;
output  wire    [7:0]   apb_prdata ;
output  wire            apb_pready ;
output  wire            apb_pslverr ;
input                   tap_tdi, tap_tms;
output                  tap_tdo, tap_tdoen;
output                  dprpu1_en, dmrpu1_en, dprpu2_en, dmrpu2_en, dprpd_en, dmrpd_en;
input           [7:0]   i_cdr_reg9, i_cdr_reg10, i_cdr_reg11, i_cdr_reg12 ;
output  wire    [7:0]   o_cdr_reg0, o_cdr_reg1, o_cdr_reg2, o_cdr_reg3, o_cdr_reg4, o_cdr_reg5, o_cdr_reg6;
output  wire            o_afe_suspendm_rx, hsrx_diff_data;
output  wire            o_chirp_mode_en, o_chirp_mode_en_aon, o_hstx_en, o_hstx_en_delayed, o_hspredrv_en, o_hsdrv_en, o_hsddi,
                        o_afe_suspendm_tx, o_hstx_boost_deemp_off;
output  wire            o_fs_edge_sel, o_lsfstx_en, o_lsfsdrv_en, o_lsfs_ddi, o_afe_clipper_en, o_assert_sezero;
input                   i_afe_lsfsrx_ana;
output  wire            o_lsfsrx_en;
input                   i_afe_rxdp_ana, i_afe_rxdm_ana, o_serx_en, rxdm_ana, rxdp_ana;
output  wire            serx_en, serx_bias_en;
output  wire    [7:0]   o_afe_tx_reg0, o_afe_tx_reg1, o_afe_tx_reg2, o_afe_tx_reg3, o_afe_tx_reg4, o_afe_tx_reg5, o_afe_tx_reg6,
                        o_afe_tx_reg7, o_afe_tx_reg8, o_afe_tx_reg9, o_afe_tx_reg10, o_afe_tx_reg11, o_afe_tx_reg12  ;
output  wire    [7:0]   o_afe_rx_reg0, o_afe_rx_reg1, o_afe_rx_reg2, o_afe_rx_reg3, o_afe_rx_reg4, o_afe_rx_reg5, o_afe_rx_reg6;
output  wire    [5:0]   o_afe_hscalib_code, o_afe_fscalib_code, o_afe_bccalib_code, o_res_calib_code ;
output  wire    [7:0]   o_afe_calib_reg0;
input                   i_adp_probe_ana, i_adp_sense_ana ;
output  wire            o_adp_en, o_adp_probe_en, o_adp_sense_en, o_adp_sink_current_en,
                        o_adp_source_current_en;
input                   i_pll_bypass_mode;
output  wire            o_pll_coarse_done, o_pll_coarse_done_ana, o_pll_pfd_pd, o_pll_startloop;
output  wire    [8:0]   o_pll_coarse_code;
output  wire            o_pll_pso, o_pll_pso_delay, o_pll_pd;
output  wire    [7:0]   o_afe_pll_reg0, o_afe_pll_reg1,o_afe_pll_reg2,o_afe_pll_reg3, o_afe_pll_reg4, o_afe_pll_reg5;
output wire             o_pll_standby;
output                  o_pll_ldo_core_en, o_pll_ldo_core_en_tx;
output                  o_pll_ldo_ref_en;
output          [5:0]   o_pll_ldo_ref_core;
input                   otgc_id_pullup_en;
output  wire            o_otgc_vbusvalid_en, o_otgc_absvalid_en ;
input                   i_dp_vdat_ref_comp_sts, i_dm_vdat_ref_comp_sts, i_rid_float_a_comp_sts, i_rid_b_c_comp_sts ;
output  wire            o_idp_src_en, o_idm_src_en, o_idp_sink_en, o_idm_sink_en, o_vdp_src_en, o_vdm_src_en, o_dp_vdat_ref_comp_en,    
                        o_dm_vdat_ref_comp_en, o_rid_float_src_en, o_rid_nonfloat_src_en, o_rid_float_ref_en, o_rid_a_ref_en, 
                        o_rid_b_ref_en, o_rid_c_ref_en, o_rid_float_a_comp_en, o_rid_b_c_comp_en ;
output  wire    [7:0]   o_afe_bc_reg0, o_afe_bc_reg1, o_afe_bc_reg2, o_afe_bc_reg3, o_afe_bc_reg4, o_afe_bc_reg5,  o_afe_bc_reg6;
input                   i_ded_ana, ted_squelch_ana;
input                   i_ted_comp_out_up, i_ted_comp_out_down;
output wire             o_ted_en, o_ed_en, o_avdd_ted_en;
output wire             o_ted_calib_mode_up, o_ted_calib_mode_down;
output wire     [3:0]   o_ted_calib_code_up, o_ted_calib_code_down;
input                   bg_powergood, bg_powergood_ats ;
output                  o_bg_pd;
output                  o_bg_pd_bg_ok;
output wire  [7:0]      o_afe_bg_reg3 ,o_afe_bg_reg2 ,o_afe_bg_reg1 ,o_afe_bg_reg0;
input           i_calib_cmp_out;
output          o_calib_pd_bias_comp;
output  [7:0] o_afe_tx_spare_test_reg;
output  [7:0] o_afe_rx_spare_test_reg;
output  [7:0] o_afe_pll_spare_test_reg;
output  [7:0] o_afe_otg_adp_bc_spare_test_reg;
output  [7:0] o_afe_calib_spare_test_reg;
input   [7:0] i_afe_tx_spare_test_reg;
input   [7:0] i_afe_rx_spare_test_reg;
input   [7:0] i_afe_pll_spare_test_reg;
input   [7:0] i_afe_otg_adp_bc_spare_test_reg;
input   [7:0] i_afe_calib_spare_test_reg;
input   [7:0] i_cdr_test_digout;
output   o_ted_calib_done;
input           i_afe_hsrx_rec_clk, i_afe_hsrx_rec_data, i_afe_hsrx_diff_data, i_afe_hsrx_rec_data_valid, i_afe_hsrx_rec_decision_error,
                i_hsrx_sampler_calib_done;
output          o_hsrx_en, o_hsrx_en_clipper;
output          o_hsrx_sampler_enable, udc_calib_rstn;
output  [1:0]   tm_idpullup, test_aon_common_reg1;
output          test_vbusvld_sessvldn, test_pll_480_clock_gate_ovr;
output          usb2_phy_irq;
wire            udc_bc_calib_rstn, o_usb2_calib_rstn, xcvr_sie_rstn, rstn_hs_clock, rstn_refclock,
                rstn_byte_clock, rstn_sieclock, rstn_clkdiv, rstn_calib_clkdiv, udc_rstn_cdr_async, primary_count_rstn,
                o_pll_calib_rstn_int; 
wire            hs_clock, byte_clock, udc_refclock, o_usb2_calib_clock;
wire            pclk, presetn;
wire     [7:0]  debug_res_calib_code, debug_calib;
wire            usb2_calib_done;
wire     [7:0]  tm_pll_reg0, tm_pll_reg1, tm_pll_reg2, tm_pll_reg3, tm_pll_reg4, tm_pll_reg5, tm_pll_reg6, tm_pll_reg7, tm_pll_reg8, tm_pll_reg9,
                tm_pll_reg10, tm_pll_reg11, tm_pll_reg12, tm_pll_reg13, tm_pll_reg14, tm_pll_reg15, tm_pll_reg16, pll_fbdiv;
wire     [4:0]  pll_ipdiv;
wire            o_pll_lock_ana;
wire     [3:0]  tm_calib_init_wait_ovr;
wire     [1:0]  tm_calib_clk_ovr;
wire    [7:0]   tm_ted_reg0, tm_ted_reg1, tm_ted_reg2, tm_ted_reg3, tm_ted_reg4;
wire            ted_en, ed_en, o_ted_calib_done;
wire            glitch_filter_en;
wire    [3:0]   debug_pullup_en; 
wire    [6:0]   debug_ana_enable;
wire            debug_afe_clipper_en, debug_otgc_absvalid_en, debug_otgc_vbusvalid_en, debug_afe_suspendm,
                debug_filter_cnt_en, debug_recovery_cnt_en, debug_lsfs_hostdisconnect, debug_deassert_rxactive_reg,
                debug_rxactive_reg, debug_start_flag, debug_bitunstuff_error, debug_lsfs_eop_detected, debug_se0_validated,
                debug_hs_eop_detected, debug_no_eop, debug_alignment_error, debug_normal_eop, debug_hs_eop_condition,
                debug_eop_detected, debug_sync_detected, debug_ls_mode, debug_fs_mode_pre, debug_cdr_error, debug_eb_error,
                debug_lsfs_bitstuff_en, debug_ls_keep_alive, debug_preamble_sent, debug_remote_wakeup, debug_resume_eop,
                debug_hs_hostdisconnect, debug_hs_sof, debug_hs_bitstuff_en, debug_eop_transmitted, debug_global_resetn,
                debug_all_calib_done, debug_o_usb2_calib_rstn, debug_o_pll_calib_rstn_int,
                debug_o_rstn_cdr_async, debug_udc_calib_rstn, debug_udc_rstn_cdr_async, debug_rstn_calib_clkdiv, debug_rstn_clkdiv,
                debug_rstn_sieclock, debug_rstn_byte_clock, debug_rstn_hs_tx_clock, debug_rstn_hs_clock, debug_rstn_refclock,
                debug_rstn_bist_mode;
wire    [3:0]   debug_tx_lsfs_state, debug_tx_hs_state, tm_txvalid_ungate, tm_afe_common_reg3;
wire    [1:0]   debug_dev_opmode, debug_host_opmode, debug_clean_linestate;
wire    [11:0]  debug_sie_cnt, debug_phy_cnt;
wire    [2:0]   debug_bus_state, debug_pd_state;
wire    [1:0]   tm_hostdiscon_rst_reg, tm_clipper_en, tm_eop_se0_fs, tm_serx_bias_en;
wire    [2:0]   tm_hs_sof_reg, tm_timeout_value, tm_squelch_count_idle;
wire    [7:0]   tm_hstx_reg3, tm_lsfs_rx_reg, tm_bccalib_offset,tm_fscalib_offset,tm_hscalib_offset;
wire    [5:0]   tm_eop_se0_ls, tm_lsfs_tx_reg2, tm_calib_rstn_dt,tm_hsrx_reg1,
                pll_ldo_ref_core;
wire    [6:0]   tm_bccalib, tm_fscalib, tm_hscalib, tm_res_calib_code;
wire    [4:0]   tm_tx_sq_cnt;
wire    [5:0]   afe_hscalib_code,afe_bccalib_code,afe_fscalib_code;
wire            tm_fs_preamble_en, tm_timeout_enable, tm_timeout_all_enable, tm_ls_eop_se0_en,
                tm_fs_eop_se0_en, tm_clk_gate_mask, tm_linestate_ls_cnt_en, tm_linestate_fs_cnt_en,
                tm_hs_sync_conf, tm_pll_clkon, pll_standalone_testmuxed, tm_hs_rx_err_reg;
wire    [6:0]   tm_clk_gate_ovr;
wire    [4:0]   tm_clk_gate_ovr_scan;
wire    [7:0]   tm_ana_block_en, tm_afe_common_reg2, tm_afe_common_reg1, tm_lsfs_tx_reg1,
                tm_hstx_reg2, tm_hstx_reg1, tm_hsrx_reg2, tm_linestate_ls_cnt, tm_fs_preamble;
wire            databus, rx_cntrl_soft_reset, shift_reg_soft_reset,
                bitunstuff_soft_reset, nrzi_dec_soft_reset, eop_det_soft_reset, sync_det_soft_reset, lsfs_dll_soft_reset,
                rx_hs_soft_reset, tx_lsfs_soft_reset, tx_hs_soft_reset, calib_soft_reset, clkdiv_soft_reset, phy_soft_reset,
                bc_hstx_en, loopback_ls, loopback_fs, loopback_hs, mux_txvalid, mux_txvalidh, o_sleepm, scan_mode_sel, w_ted_en;
wire    [7:0]   afe_tx_reg0, afe_tx_reg1, afe_tx_reg2, afe_tx_reg3, afe_tx_reg4, afe_tx_reg5, afe_tx_reg6,
                afe_tx_reg7, afe_tx_reg8, afe_tx_reg9, afe_tx_reg10, afe_tx_reg11, afe_tx_reg12  ;
wire    [7:0]   afe_rx_reg0, afe_rx_reg1, afe_rx_reg2, afe_rx_reg3, afe_rx_reg4, afe_rx_reg5, afe_rx_reg6;
wire    [7:0]   afe_bc_reg0, afe_bc_reg1, afe_bc_reg2, afe_bc_reg3, afe_bc_reg4, afe_bc_reg5,  afe_bc_reg6;
wire    [7:0]   afe_pll_reg0, afe_pll_reg1,afe_pll_reg2,afe_pll_reg3, afe_pll_reg4, afe_pll_reg5;
wire    [7:0]   afe_bg_reg3 ,afe_bg_reg2 ,afe_bg_reg1 ,afe_bg_reg0, afe_calib_reg0;
wire    [2:0]   tm_ana_powerup;
wire    [4:0]   tm_linestate_fs_cnt;
wire    [5:0]    debug_hscalib_code, debug_fscalib_code, debug_bccalib_code,res_calib_code      ;
wire    [15:0]  utmi_datain;
wire    [1:0]   linestate;
wire [8:0]      pll_coarse_code;
wire [3:0]       o_pllrefsel, ted_calib_code_up, ted_calib_code_down, tm_spare_out;
wire  [7:0]      w_apb_prdata; 
wire             w_apb_pready; 
wire             w_apb_pslverr;
wire             w_apb_pclk; 
wire             w_apb_penable; 
wire   [7:0]     w_apb_paddr; 
wire             w_apb_presetn; 
wire             w_apb_pselx;
wire   [7:0]     w_apb_pwdata; 
wire             w_apb_pwrite; 
wire             scan_reset;
wire   [7:0]     o_pll_fbdiv;
wire   [4:0]     o_pll_ipdiv;
wire   [3:0]     debug_bc_state;
wire             bc_delay_cnt_reached_10us;
wire             bc_delay_reached;
wire   [9:0]     threshold_ovr_value;
wire             threshold_ovr_en;
assign test_aon_common_reg1             = tm_afe_common_reg1[1:0];
assign test_vbusvld_sessvldn            = tm_hsrx_reg2[6];
assign o_afe_rx_spare_test_reg          = 8'd0;
assign o_afe_pll_spare_test_reg         = 8'd0;
assign o_afe_otg_adp_bc_spare_test_reg  = 8'd0;
assign o_afe_calib_spare_test_reg       = 8'd0;
assign o_afe_tx_spare_test_reg          = {8'd0};
assign o_avdd_ted_en                    = w_ted_en;
assign scan_reset                       = ~reset;
assign test_pll_480_clock_gate_ovr      = tm_clk_gate_ovr[6];
udc_scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_udc_scan_mux(
.reset(reset),
.i_bist_mode_en(o_bist_mode_en),
.i_pll_coarse_code_done_ana(o_pll_coarse_done),  
.iddq_mode(iddq_mode),
.scan_mode(scan_mode),
.scan_ats_mode(scan_ats_mode),
.scan_clock(scan_clock),
.scan_hsclock(scan_hsclock),
.scan_sieclock(scan_sieclock),
.scan_mode_sel(scan_mode_sel),
.i_scan_en (scan_en),
.rstn_ats_clkdiv(rstn_ats_clkdiv),
.i_otgc_vbusvalid_en(otgc_vbusvalid_en),
.i_otgc_absvalid_en(otgc_absvalid_en),
.i_pll_standby(pll_standby),
.i_pll_pso(pll_pso),
.i_pll_pso_delay(pll_pso_delay),
.i_pll_pd(pll_pd),
.i_pll_pd_ana(pll_pd_ana),
.i_pll_ldo_core_en(pll_ldo_core_en),
.i_pll_ldo_ref_en(pll_ldo_ref_en),
.i_ats_pll_ldo_ref_en(ats_pll_ldo_ref_en),
.i_pll_ldo_ref_core(pll_ldo_ref_core),
.i_ed_en(w_ed_en),
.i_ted_en(w_ted_en),
.i_hsrx_en(o_hsrx_en),
.i_hstx_en(hstx_en),
.i_chirp_mode_en(chirp_mode_en),
.i_hspredrv_en(hspredrv_en),
.i_hstx_en_delayed(hstx_en_delayed),
.i_hsdrv_en(hsdrv_en),
.i_hsddi(hsddi),
.i_lsfsrx_en(lsfsrx_en),
.i_fs_edge_sel(fs_edge_sel),
.i_lsfstx_en(lsfstx_en),
.i_lsfsdrv_en(lsfsdrv_en),
.i_lsfs_ddi(lsfs_ddi),
.i_assert_sezero(assert_sezero),
.i_afe_suspendm_rx(afe_suspendm_rx),
.i_afe_suspendm_tx(afe_suspendm_tx),
.i_afe_clipper_en(afe_clipper_en),
.i_bg_pd(bg_pd),
.i_bg_pd_bg_ok(bg_pd_bg_ok),
.i_afe_fscalib_code(afe_fscalib_code),
.i_afe_hscalib_code(afe_hscalib_code),
.i_afe_bccalib_code(afe_bccalib_code),
.i_pll_coarse_code(pll_coarse_code),
.i_pll_startloop(pll_startloop),
.i_pll_pfd_pd(pll_pfd_pd),
.i_div_refclock(div_refclock),
.i_ted_calib_mode_down(ted_calib_mode_down),
.i_ted_calib_mode_up(ted_calib_mode_up),
.i_ted_calib_code_up(ted_calib_code_up),
.i_ted_calib_code_down(ted_calib_code_down),
.i_calib_pd_bias_comp(calib_pd_bias_comp),
.i_res_calib_code(res_calib_code),
.i_fb_clk(fb_clk),
.i_afe_lsfsrx_ana(i_afe_lsfsrx_ana),
.i_adp_probe_ana(i_adp_probe_ana),
.i_adp_sense_ana(i_adp_sense_ana),
.i_adp_en(w_adp_en),            
.i_adp_probe_en(w_adp_probe_en),                
.i_adp_sense_en(w_adp_sense_en),        
.i_adp_sink_current_en(adp_sink_current_en),    
.i_adp_source_current_en(adp_source_current_en),
.i_dp_vdat_ref_comp_sts(i_dp_vdat_ref_comp_sts),
.i_dm_vdat_ref_comp_sts(i_dm_vdat_ref_comp_sts),
.i_rid_float_a_comp_sts(i_rid_float_a_comp_sts),
.i_rid_b_c_comp_sts(i_rid_b_c_comp_sts),
.i_idp_src_en(w_idp_src_en),    
.i_idm_src_en(idm_src_en),      
.i_idp_sink_en(w_idp_sink_en),
.i_idm_sink_en(w_idm_sink_en),  
.i_vdp_src_en(w_vdp_src_en),    
.i_vdm_src_en(w_vdm_src_en),    
.i_dp_vdat_ref_comp_en(w_dp_vdat_ref_comp_en),
.i_dm_vdat_ref_comp_en(w_dm_vdat_ref_comp_en),
.i_rid_float_src_en(rid_float_src_en),
.i_rid_nonfloat_src_en(rid_nonfloat_src_en),
.i_rid_float_ref_en(rid_float_ref_en),
.i_rid_a_ref_en(rid_a_ref_en),  
.i_rid_b_ref_en(rid_b_ref_en),  
.i_rid_c_ref_en(rid_c_ref_en),  
.i_rid_float_a_comp_en(rid_float_a_comp_en),
.i_rid_b_c_comp_en(rid_b_c_comp_en),
.i_ded_ana(i_ded_ana),  
.i_ted_comp_out_up(i_ted_comp_out_up),
.i_ted_comp_out_down(i_ted_comp_out_down),
.i_calib_cmp_out(i_calib_cmp_out),
.i_afe_hsrx_rec_clk(i_afe_hsrx_rec_clk),
.i_hstx_boost_deemp_off(hstx_boost_deemp_off),
.i_pll_fbdiv(pll_fbdiv),
.i_pll_ipdiv(pll_ipdiv),
.i_bg_pd_toggle(o_bg_pd_toggle),
.i_afe_tx_reg0   (afe_tx_reg0),
.i_afe_tx_reg1   (afe_tx_reg1),
.i_afe_tx_reg2   (afe_tx_reg2),
.i_afe_tx_reg3   (afe_tx_reg3),
.i_afe_tx_reg4   (afe_tx_reg4),
.i_afe_tx_reg5   (afe_tx_reg5),
.i_afe_tx_reg6   (afe_tx_reg6),
.i_afe_tx_reg7   (afe_tx_reg7),
.i_afe_tx_reg8   (afe_tx_reg8),
.i_afe_tx_reg9   (afe_tx_reg9),
.i_afe_tx_reg10  (afe_tx_reg10),
.i_afe_tx_reg11  (afe_tx_reg11),
.i_afe_tx_reg12  (afe_tx_reg12),
.i_afe_rx_reg0   (afe_rx_reg0),
.i_afe_rx_reg1   (afe_rx_reg1),
.i_afe_rx_reg2   (afe_rx_reg2),
.i_afe_rx_reg3   (afe_rx_reg3),
.i_afe_rx_reg4   (afe_rx_reg4),
.i_afe_rx_reg5   (afe_rx_reg5),
.i_afe_rx_reg6   (afe_rx_reg6),
.i_afe_bc_reg0   (afe_bc_reg0),
.i_afe_bc_reg1   (afe_bc_reg1),
.i_afe_bc_reg2   (afe_bc_reg2),
.i_afe_bc_reg3   (afe_bc_reg3),
.i_afe_bc_reg4   (afe_bc_reg4),
.i_afe_bc_reg5   (afe_bc_reg5),
.i_afe_bc_reg6   (afe_bc_reg6),
.i_afe_pll_reg0  (afe_pll_reg0),
.i_afe_pll_reg1  (afe_pll_reg1),
.i_afe_pll_reg2  (afe_pll_reg2),
.i_afe_pll_reg3  (afe_pll_reg3),
.i_afe_pll_reg4  (afe_pll_reg4),
.i_afe_pll_reg5  (afe_pll_reg5),
.i_afe_bg_reg0   (afe_bg_reg0),
.i_afe_bg_reg1   (afe_bg_reg1),
.i_afe_bg_reg2   (afe_bg_reg2),
.i_afe_bg_reg3   (afe_bg_reg3),
.i_afe_calib_reg0(afe_calib_reg0),
.i_tm_clk_gate_ovr (tm_clk_gate_ovr[4:0]),
.o_tm_clk_gate_ovr (tm_clk_gate_ovr_scan),
.o_scan_en (scan_en_ats),
.o_otgc_vbusvalid_en(o_otgc_vbusvalid_en),
.o_otgc_absvalid_en(o_otgc_absvalid_en),
.o_pll_standby(o_pll_standby),
.o_pll_pso(o_pll_pso),
.o_pll_pso_delay(o_pll_pso_delay),
.o_pll_pd(o_pll_pd),
.o_pll_pd_int(o_pll_pd_int),
.o_pll_ldo_core_en(o_pll_ldo_core_en),
.o_pll_ldo_core_en_tx(o_pll_ldo_core_en_tx),
.o_pll_ldo_ref_en(o_pll_ldo_ref_en),
.o_pll_ldo_ref_core(o_pll_ldo_ref_core),
.o_pll_coarse_code_done_ana(o_pll_coarse_done_ana),      
.o_ed_en(o_ed_en),
.o_ted_en(o_ted_en),
.o_hsrx_en_clipper(o_hsrx_en_clipper),
.o_hstx_en(o_hstx_en),
.o_chirp_mode_en(o_chirp_mode_en),
.o_chirp_mode_en_aon(o_chirp_mode_en_aon),
.o_hspredrv_en(o_hspredrv_en),
.o_hstx_en_delayed(o_hstx_en_delayed),
.o_hsdrv_en(o_hsdrv_en),
.o_hsddi(o_hsddi),
.o_lsfsrx_en(o_lsfsrx_en),
.o_fs_edge_sel(o_fs_edge_sel),
.o_lsfstx_en(o_lsfstx_en),
.o_lsfsdrv_en(o_lsfsdrv_en),
.o_lsfs_ddi(o_lsfs_ddi),
.o_assert_sezero(o_assert_sezero),
.o_afe_suspendm_rx(o_afe_suspendm_rx),
.o_afe_suspendm_tx(o_afe_suspendm_tx),
.o_afe_clipper_en(o_afe_clipper_en),
.o_bg_pd(o_bg_pd),
.o_bg_pd_bg_ok(o_bg_pd_bg_ok),
.o_afe_fscalib_code(o_afe_fscalib_code),
.o_afe_hscalib_code(o_afe_hscalib_code),
.o_afe_bccalib_code(o_afe_bccalib_code),
.o_pll_coarse_code(o_pll_coarse_code),
.o_pll_startloop(o_pll_startloop),
.o_pll_pfd_pd(o_pll_pfd_pd),
.o_div_refclock(o_div_refclock),
.o_ted_calib_mode_down(o_ted_calib_mode_down),
.o_ted_calib_mode_up(o_ted_calib_mode_up),
.o_ted_calib_code_up(o_ted_calib_code_up),
.o_ted_calib_code_down(o_ted_calib_code_down),
.o_calib_pd_bias_comp(o_calib_pd_bias_comp),
.o_res_calib_code(o_res_calib_code),
.o_fb_clk(o_fb_clk),
.scan_pll_startloop(scan_pll_startloop),
.o_afe_lsfsrx_ana(o_afe_lsfsrx_ana),
.o_adp_probe_ana(o_adp_probe_ana),
.o_adp_sense_ana(o_adp_sense_ana),
.o_adp_en(o_adp_en),            
.o_adp_probe_en(o_adp_probe_en),                
.o_adp_sense_en(o_adp_sense_en),
.o_adp_sink_current_en(o_adp_sink_current_en),  
.o_adp_source_current_en(o_adp_source_current_en),
.o_dp_vdat_ref_comp_sts(o_dp_vdat_ref_comp_sts),
.o_dm_vdat_ref_comp_sts(o_dm_vdat_ref_comp_sts),
.o_rid_float_a_comp_sts(o_rid_float_a_comp_sts),
.o_rid_b_c_comp_sts(o_rid_b_c_comp_sts),
.o_idp_src_en(o_idp_src_en),    
.o_idm_src_en(o_idm_src_en),    
.o_idp_sink_en(o_idp_sink_en),
.o_idm_sink_en(o_idm_sink_en),  
.o_vdp_src_en(o_vdp_src_en),    
.o_vdm_src_en(o_vdm_src_en),    
.o_dp_vdat_ref_comp_en(o_dp_vdat_ref_comp_en),
.o_dm_vdat_ref_comp_en(o_dm_vdat_ref_comp_en),
.o_rid_float_src_en(o_rid_float_src_en),
.o_rid_nonfloat_src_en(o_rid_nonfloat_src_en),
.o_rid_float_ref_en(o_rid_float_ref_en),
.o_rid_a_ref_en(o_rid_a_ref_en),        
.o_rid_b_ref_en(o_rid_b_ref_en),        
.o_rid_c_ref_en(o_rid_c_ref_en),        
.o_rid_float_a_comp_en(o_rid_float_a_comp_en),
.o_rid_b_c_comp_en(o_rid_b_c_comp_en),
.o_ded_ana(o_ded_ana),  
.o_ted_comp_out_up(o_ted_comp_out_up),
.o_ted_comp_out_down(o_ted_comp_out_down),
.o_calib_cmp_out(o_calib_cmp_out),
.o_afe_hsrx_rec_clk(o_afe_hsrx_rec_clk),
.o_hstx_boost_deemp_off(o_hstx_boost_deemp_off),
.o_pll_fbdiv(o_pll_fbdiv),
.o_pll_ipdiv(o_pll_ipdiv),
.o_afe_tx_reg0   (o_afe_tx_reg0),
.o_afe_tx_reg1   (o_afe_tx_reg1),
.o_afe_tx_reg2   (o_afe_tx_reg2),
.o_afe_tx_reg3   (o_afe_tx_reg3),
.o_afe_tx_reg4   (o_afe_tx_reg4),
.o_afe_tx_reg5   (o_afe_tx_reg5),
.o_afe_tx_reg6   (o_afe_tx_reg6),
.o_afe_tx_reg7   (o_afe_tx_reg7),
.o_afe_tx_reg8   (o_afe_tx_reg8),
.o_afe_tx_reg9   (o_afe_tx_reg9),
.o_afe_tx_reg10  (o_afe_tx_reg10),
.o_afe_tx_reg11  (o_afe_tx_reg11),
.o_afe_tx_reg12  (o_afe_tx_reg12),
.o_afe_rx_reg0   (o_afe_rx_reg0),
.o_afe_rx_reg1   (o_afe_rx_reg1),
.o_afe_rx_reg2   (o_afe_rx_reg2),
.o_afe_rx_reg3   (o_afe_rx_reg3),
.o_afe_rx_reg4   (o_afe_rx_reg4),
.o_afe_rx_reg5   (o_afe_rx_reg5),
.o_afe_rx_reg6   (o_afe_rx_reg6),
.o_afe_bc_reg0   (o_afe_bc_reg0),
.o_afe_bc_reg1   (o_afe_bc_reg1),
.o_afe_bc_reg2   (o_afe_bc_reg2),
.o_afe_bc_reg3   (o_afe_bc_reg3),
.o_afe_bc_reg4   (o_afe_bc_reg4),
.o_afe_bc_reg5   (o_afe_bc_reg5),
.o_afe_bc_reg6   (o_afe_bc_reg6),
.o_afe_pll_reg0  (o_afe_pll_reg0),
.o_afe_pll_reg1  (o_afe_pll_reg1),
.o_afe_pll_reg2  (o_afe_pll_reg2),
.o_afe_pll_reg3  (o_afe_pll_reg3),
.o_afe_pll_reg4  (o_afe_pll_reg4),
.o_afe_pll_reg5  (o_afe_pll_reg5),
.o_afe_bg_reg0   (o_afe_bg_reg0),
.o_afe_bg_reg1   (o_afe_bg_reg1),
.o_afe_bg_reg2   (o_afe_bg_reg2),
.o_afe_bg_reg3   (o_afe_bg_reg3),
.o_afe_calib_reg0(o_afe_calib_reg0)
);
tap_wrapper_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_udc_tap_wrapper(
.i_scan_clk             ( scan_hssiclock   ), 
.i_scan_rstb            ( scan_reset           ), 
.i_scan_mode            ( scan_mode            ), 
.i_scan_en              ( scan_en              ), 
.i_scan_en_cg           ( scan_en_cg      ), 
.o_apb_prdata           ( apb_prdata         ), 
.o_apb_pready           ( apb_pready         ), 
.o_apb_pslverr          ( apb_pslverr        ),
.i_apb_pclk             ( pclk         ), 
.i_apb_penable          ( apb_penable        ), 
.i_apb_paddr            ( apb_paddr          ), 
.i_apb_presetn          ( presetn              ), 
.i_apb_psel             ( apb_pselx          ),
.i_apb_pwdata           ( apb_pwdata         ), 
.i_apb_pwrite           ( apb_pwrite         ), 
.i_tap_tdi              ( tap_tdi              ),
.i_tap_tck              ( tap_tck              ),
.i_tap_tms              ( tap_tms              ),
.i_tap_trst_n           ( tap_trst_n           ),
.o_tap_tdo              ( tap_tdo              ),
.o_tap_tdoen            ( tap_tdoen            ),
.i_int_apb_prdata       ( w_apb_prdata       ), 
.i_int_apb_pready       ( w_apb_pready       ), 
.i_int_apb_pslverr      ( w_apb_pslverr      ),
.o_int_apb_pclk         ( w_apb_pclk         ), 
.o_int_apb_penable      ( w_apb_penable      ), 
.o_int_apb_paddr        ( w_apb_paddr        ), 
.o_int_apb_presetn      ( w_apb_presetn      ), 
.o_int_apb_psel         ( w_apb_pselx        ),
.o_int_apb_pwdata       ( w_apb_pwdata       ), 
.o_int_apb_pwrite       ( w_apb_pwrite       ) 
);
udc_test_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r                    c_udc_test_top (
.i_afe_rxdp_ana                 (i_afe_rxdp_ana),              
.i_afe_rxdm_ana                 (i_afe_rxdm_ana),              
.usb2_calib_clock               (o_usb2_calib_clock),            
.udc_bc_calib_rstn              (udc_bc_calib_rstn),             
.refclock                       (udc_refclock),                  
.scan_hsclock                   (scan_hsclock),
.scan_mode                      (scan_mode),
.i_bist_rstn                    (xcvr_sie_rstn),
.i_sieclk                       (sieclock),
.i_databus                      (databus),
.i_bist_on                      (bist_on),
.i_bist_mode_sel                (bist_mode_sel),
.rstn_bist_mode                 (rstn_bist_mode),
.i_loopback                     (loopback),
.i_tx_valid                     (txvalid),
.i_tx_validh                    (txvalidh),
.i_datain                       (datain),
.i_tx_ready                     (txready),
.i_rx_data                      (dataout[7:0]),
.i_rx_datah                     (dataout[15:8]),
.i_rx_valid                     (rxvalid),
.i_rx_validh                    (rxvalidh),
.i_rx_active                    (rxactive),
.sleepm                         (sleepm),                        
.pll_clkon                      (pll_clkon),                     
.pll_standalone                 (pll_standalone),                
.i_lane_reverse                 (lane_reverse),                  
.i_hstx_en_delayed              (hstx_en_delayed),               
.i_bist_mode_en                 (i_bist_mode_en),
.bist_ana_powerup               (bist_ana_powerup),              
.adp_en                         (adp_en),                        
.adp_probe_en                   (adp_probe_en),                  
.adp_sense_en                   (adp_sense_en),                  
.adp_sink_en                    (adp_sink_en),                   
.adp_source_en                  (adp_source_en),                 
.bc_en                          (bc_en),                         
.idp_src_en                     (idp_src_en),                    
.idp_sink_en                    (idp_sink_en),                   
.idm_sink_en                    (idm_sink_en),                   
.vdp_src_en                     (vdp_src_en),                    
.vdm_src_en                     (vdm_src_en),                    
.dp_vdat_ref_comp_en            (dp_vdat_ref_comp_en),           
.dm_vdat_ref_comp_en            (dm_vdat_ref_comp_en),           
.dm_vlgc_comp_en                (dm_vlgc_comp_en),               
.rid_float_comp_en              (rid_float_comp_en),             
.rid_nonfloat_comp_en           (rid_nonfloat_comp_en),          
.i_otgc_vbusvalid_ana           (vbusvalid),                     
.i_otgc_bvalid_ana              (sessvld),                       
.i_otgc_id_ana                  (iddig),                         
.i_adp_probe_ana                (o_adp_probe_ana),               
.i_adp_sense_ana                (o_adp_sense_ana),               
.i_dp_vdat_ref_comp_sts         (o_dp_vdat_ref_comp_sts),        
.i_dm_vdat_ref_comp_sts         (o_dm_vdat_ref_comp_sts),        
.i_rid_float_a_comp_sts         (o_rid_float_a_comp_sts),        
.i_rid_b_c_comp_sts             (o_rid_b_c_comp_sts),            
.pclk                           (w_apb_pclk),
.presetn                        (w_apb_presetn),
.pwrite                         (w_apb_pwrite),
.pwdata                         (w_apb_pwdata),
.paddr                          (w_apb_paddr),
.penable                        (w_apb_penable),
.pselx                          (w_apb_pselx),
.debug_eb_error                 (debug_eb_error),
.debug_cdr_error                (debug_cdr_error),
.debug_sync_detected            (debug_sync_detected),
.debug_eop_detected             (debug_eop_detected),
.debug_hs_eop_condition         (debug_hs_eop_condition),
.debug_normal_eop               (debug_normal_eop),
.debug_alignment_error          (debug_alignment_error),
.debug_no_eop                   (debug_no_eop),
.debug_hs_eop_detected          (debug_hs_eop_detected),
.debug_se0_validated            (debug_se0_validated),
.debug_lsfs_eop_detected        (debug_lsfs_eop_detected),
.debug_bitunstuff_error         (debug_bitunstuff_error),
.debug_bus_state                (debug_bus_state),               
.debug_start_flag               (debug_start_flag),
.debug_rxactive_reg             (debug_rxactive_reg),
.debug_deassert_rxactive_reg    (debug_deassert_rxactive_reg),
.debug_phy_cnt                  (debug_phy_cnt),                 
.debug_sie_cnt                  (debug_sie_cnt),                 
.debug_tx_hs_state              (debug_tx_hs_state),     
.debug_eop_transmitted          (debug_eop_transmitted),
.debug_hs_bitstuff_en           (debug_hs_bitstuff_en),
.debug_resume_eop               (debug_resume_eop),
.debug_remote_wakeup            (debug_remote_wakeup),
.debug_tx_lsfs_state            (debug_tx_lsfs_state),   
.debug_pd_state                 (debug_pd_state),                
.debug_preamble_sent            (debug_preamble_sent),
.debug_ls_keep_alive            (debug_ls_keep_alive),
.debug_lsfs_bitstuff_en         (debug_lsfs_bitstuff_en),
.debug_bg_powergood             (bg_powergood),
.debug_afe_hsrx_diff_data       (i_afe_hsrx_diff_data),
.debug_hsrx_en                  (o_hsrx_en),
.debug_hsrx_sampler_enable      (o_hsrx_sampler_enable),
.debug_chirp_mode_en            (chirp_mode_en),
.debug_hstx_en                  (hstx_en),
.debug_hstx_en_delayed          (hstx_en_delayed),
.debug_hstx_boost_deamp_off     (hstx_boost_deemp_off),
.debug_dprpu1_en                (dprpu1_en),
.debug_dmrpu1_en                (dmrpu1_en),
.debug_dprpu2_en                (dprpu2_en),
.debug_dmrpu2_en                (dmrpu2_en),
.debug_dprpd_en                 (dprpd_en),
.debug_dmrpd_en                 (dmrpd_en),
.debug_otgc_id_pullup_en        (otgc_id_pullup_en),             
.debug_fs_edge_sel              (fs_edge_sel),
.debug_afe_lsfsrx_ana           (o_afe_lsfsrx_ana) ,
.debug_lsfstx_en                (lsfstx_en),
.debug_lsfsdrv_en               (lsfsdrv_en),
.debug_lsfs_ddi                 (lsfs_ddi),
.debug_assert_sezero            (assert_sezero),
.debug_lsfsrx_en                (lsfsrx_en),
.debug_serx_en                  (o_serx_en),
.debug_pll_pso                  (pll_pso),
.debug_pll_pso_delay            (pll_pso_delay),
.debug_pll_pd                   (pll_pd),
.debug_pll_ipdiv                (o_pll_ipdiv),
.debug_pll_fbdiv                (o_pll_fbdiv),
.debug_pll_standby              (pll_standby),
.debug_pll_ldo_core_en          (pll_ldo_core_en),
.debug_pll_ldo_isolation_cntrl  (1'b0),  
.debug_pll_ldo_ref_en           (pll_ldo_ref_en),
.debug_afe_suspendm             (debug_afe_suspendm),   
.debug_otgc_vbusvalid_en        (debug_otgc_vbusvalid_en),      
.debug_otgc_absvalid_en         (debug_otgc_absvalid_en),       
.debug_afe_clipper_en           (debug_afe_clipper_en), 
.debug_ted_squelch_ana          (ted_squelch_ana),
.debug_ded_ana                  (o_ded_ana),
.debug_usb2_rescal_calib_done   (usb2_calib_done),
.debug_hscalib_code             (debug_hscalib_code),
.debug_hs_sof                   (debug_hs_sof),
.debug_hs_hostdisconnect        (debug_hs_hostdisconnect),
.debug_rstn_bist_mode           (debug_rstn_bist_mode),
.debug_all_calib_done           (debug_all_calib_done),
.debug_fscalib_code             (debug_fscalib_code),
.debug_lsfs_hostdisconnect      (debug_lsfs_hostdisconnect),
.debug_fs_mode_pre              (debug_fs_mode_pre),
.debug_ls_mode                  (debug_ls_mode),
.debug_bccalib_code             (debug_bccalib_code),
.debug_rstn_refclock            (debug_rstn_refclock),
.debug_rstn_hs_clock            (debug_rstn_hs_clock),
.debug_rstn_hs_tx_clock         (debug_rstn_hs_tx_clock),
.debug_rstn_byte_clock          (debug_rstn_byte_clock),
.debug_rstn_sieclock            (debug_rstn_sieclock),
.debug_rstn_clkdiv              (debug_rstn_clkdiv),
.debug_rstn_calib_clkdiv        (debug_rstn_calib_clkdiv),
.debug_udc_rstn_cdr_async       (debug_udc_rstn_cdr_async),
.debug_udc_calib_rstn           (debug_udc_calib_rstn),
.debug_udc_apb_resetn           (apb_presetn),
.debug_o_rstn_cdr_async         (debug_o_rstn_cdr_async),
.debug_o_pll_calib_rstn_int     (debug_o_pll_calib_rstn_int),
.debug_o_usb2_calib_rstn        (debug_o_usb2_calib_rstn),
.debug_global_resetn            (debug_global_resetn),
.debug_recovery_cnt_en          (debug_recovery_cnt_en),
.debug_clean_linestate          (debug_clean_linestate),         
.debug_filter_cnt_en            (debug_filter_cnt_en),
.debug_host_opmode              (debug_host_opmode),     
.debug_dev_opmode               (debug_dev_opmode),      
.debug_o_bg_pd                  (debug_o_bg_pd),                
.debug_o_bg_pd_bg_ok            (debug_o_bg_pd_bg_ok),          
.debug_powerdown                (powerdown),
.reset                          (reset),
.debug_suspendm                 (suspendm),
.debug_termselect               (termselect),
.debug_databus16_8              (databus16_8),
.debug_dppulldown               (dppulldown),
.debug_dmpulldown               (dmpulldown),
.debug_lane_reverse             (lane_reverse),
.debug_txbitstuffenable         (txbitstuffenable),
.debug_txbitstuffenableh        (txbitstuffenableh),
.debug_xcvrselect               (xcvrselect),      
.debug_linestate                (linestate),         
.debug_hostdisconnect           (hostdisconnect),
.debug_fslsserialmode           (fslsserialmode),
.debug_tx_enable_n              (tx_enable_n),
.debug_tx_dat                   (tx_dat),
.debug_tx_se0                   (tx_se0),
.debug_sleepm                   (sleepm),
.debug_opmode                   (opmode),          
.debug_rx_dp                    (rx_dp),
.debug_rx_dm                    (rx_dm),
.debug_rx_rcv                   (rx_rcv),
.debug_txvalid                  (txvalid),
.debug_txvalidh                 (txvalidh),
.debug_datain                   (datain),          
.debug_txready                  (txready),
.debug_rxactive                 (rxactive),
.debug_rxvalid                  (rxvalid),
.debug_rxvalidh                 (rxvalidh),
.debug_rxerror                  (rxerror),
.debug_dataout                  (dataout),         
.debug_serx_bias_en             (serx_bias_en),
.debug_calib                    (debug_calib),
.debug_res_calib_code           (debug_res_calib_code),  
.tm_pll_reg15                   (tm_pll_reg15),
.tm_pll_reg16                   (tm_pll_reg16),
.tm_ted_reg4                    (tm_ted_reg4),
.tm_ted_reg3                    (tm_ted_reg3),
.tm_cdr_reg9                    (i_cdr_reg9),
.tm_cdr_reg10                   (i_cdr_reg10),
.tm_cdr_reg11                   (i_cdr_reg11),
.tm_cdr_reg12                   (i_cdr_reg12),
.o_bist_complete                (bist_complete),
.o_bist_error                   (bist_error),
.o_bist_error_count             (bist_error_count),
.o_bist_on_pulse                (o_bist_on),
.bist_hostdevice_sel            (o_bist_hostdevice_sel),                    
.bist_speed_sel                 (bist_speed_sel),                
.bist_interface_sel             (bist_interface_sel),
.o_bist_mux_resets              (o_bist_mux_resets),
.o_bg_pd_toggle                 (o_bg_pd_toggle),
.mux_txvalid                    (mux_txvalid),
.mux_txvalidh                   (mux_txvalidh),
.mux_datain                     (utmi_datain),
.loopback_ls                    (loopback_ls),                   
.loopback_fs                    (loopback_fs),                   
.loopback_hs                    (loopback_hs),                   
.o_sleepm                       (o_sleepm),
.o_bc_en                        (o_bc_en),
.adp_probe_sts                  (adp_probe_sts),                 
.adp_sense_sts                  (adp_sense_sts),                 
.dcd_comp_sts                   (dcd_comp_sts),                  
.dp_vdat_ref_comp_sts           (dp_vdat_ref_comp_sts),          
.dm_vdat_ref_comp_sts           (dm_vdat_ref_comp_sts),          
.dm_vlgc_comp_sts               (dm_vlgc_comp_sts),              
.rid_a_comp_sts                 (rid_a_comp_sts),                
.rid_b_comp_sts                 (rid_b_comp_sts),                
.rid_c_comp_sts                 (rid_c_comp_sts),                
.rid_float_comp_sts             (rid_float_comp_sts),            
.rid_gnd_comp_sts               (rid_gnd_comp_sts),              
.o_adp_en                       (w_adp_en),                    
.o_adp_probe_en                 (w_adp_probe_en),              
.o_adp_sense_en                 (w_adp_sense_en),              
.o_adp_sink_current_en          (adp_sink_current_en),         
.o_adp_source_current_en        (adp_source_current_en),       
.o_idp_src_en                   (w_idp_src_en),                
.o_idm_src_en                   (idm_src_en),                  
.o_idp_sink_en                  (w_idp_sink_en),               
.o_idm_sink_en                  (w_idm_sink_en),               
.o_vdp_src_en                   (w_vdp_src_en),                
.o_vdm_src_en                   (w_vdm_src_en),                
.o_dp_vdat_ref_comp_en          (w_dp_vdat_ref_comp_en),         
.o_dm_vdat_ref_comp_en          (w_dm_vdat_ref_comp_en),         
.o_rid_float_src_en             (rid_float_src_en),            
.o_rid_nonfloat_src_en          (rid_nonfloat_src_en),         
.o_rid_float_ref_en             (rid_float_ref_en),            
.o_rid_a_ref_en                 (rid_a_ref_en),                
.o_rid_b_ref_en                 (rid_b_ref_en),                
.o_rid_c_ref_en                 (rid_c_ref_en),                
.o_rid_float_a_comp_en          (rid_float_a_comp_en),         
.o_rid_b_c_comp_en              (rid_b_c_comp_en),             
.bc_hstx_en                     (bc_hstx_en),                    
.o_bist_mode_en                 (o_bist_mode_en),
.phy_soft_reset                 (phy_soft_reset),                
.clkdiv_soft_reset              (clkdiv_soft_reset),             
.calib_soft_reset               (calib_soft_reset),              
.tx_hs_soft_reset               (tx_hs_soft_reset),              
.tx_lsfs_soft_reset             (tx_lsfs_soft_reset),            
.rx_hs_soft_reset               (rx_hs_soft_reset),              
.lsfs_dll_soft_reset            (lsfs_dll_soft_reset),           
.sync_det_soft_reset            (sync_det_soft_reset),           
.eop_det_soft_reset             (eop_det_soft_reset),            
.nrzi_dec_soft_reset            (nrzi_dec_soft_reset),           
.bitunstuff_soft_reset          (bitunstuff_soft_reset),         
.shift_reg_soft_reset           (shift_reg_soft_reset),          
.rx_cntrl_soft_reset            (rx_cntrl_soft_reset),           
.prdata                         (w_apb_prdata),
.pslverr                        (w_apb_pslverr),
.pready                         (w_apb_pready),
.o_afe_tx_reg0                          (afe_tx_reg0),
.o_afe_tx_reg1                          (afe_tx_reg1),
.o_afe_tx_reg2                          (afe_tx_reg2),
.o_afe_tx_reg3                          (afe_tx_reg3),
.o_afe_tx_reg4                          (afe_tx_reg4),
.o_afe_tx_reg5                          (afe_tx_reg5),
.o_afe_tx_reg6                          (afe_tx_reg6),
.o_afe_tx_reg7                          (afe_tx_reg7),
.o_afe_tx_reg8                          (afe_tx_reg8),
.o_afe_tx_reg9                          (afe_tx_reg9),
.o_afe_tx_reg10                         (afe_tx_reg10),
.o_afe_tx_reg11                         (afe_tx_reg11),
.o_afe_tx_reg12                         (afe_tx_reg12),
.o_afe_rx_reg0                          (afe_rx_reg0),
.o_afe_rx_reg1                          (afe_rx_reg1),
.o_afe_rx_reg2                          (afe_rx_reg2),
.o_afe_rx_reg3                          (afe_rx_reg3),
.o_afe_rx_reg4                          (afe_rx_reg4),
.o_afe_rx_reg5                          (afe_rx_reg5),
.o_afe_rx_reg6                          (afe_rx_reg6),
.o_afe_bc_reg0                          (afe_bc_reg0),
.o_afe_bc_reg1                          (afe_bc_reg1),
.o_afe_bc_reg2                          (afe_bc_reg2),
.o_afe_bc_reg3                          (afe_bc_reg3),
.o_afe_bc_reg4                          (afe_bc_reg4),
.o_afe_bc_reg5                          (afe_bc_reg5),
.o_afe_bc_reg6                          (afe_bc_reg6),
.o_afe_pll_reg0                         (afe_pll_reg0),
.o_afe_pll_reg1                         (afe_pll_reg1),
.o_afe_pll_reg2                         (afe_pll_reg2),
.o_afe_pll_reg3                         (afe_pll_reg3),
.o_afe_pll_reg4                         (afe_pll_reg4),
.o_afe_pll_reg5                         (afe_pll_reg5),
.o_afe_bg_reg0                          (afe_bg_reg0),
.o_afe_bg_reg1                          (afe_bg_reg1),
.o_afe_bg_reg2                          (afe_bg_reg2),
.o_afe_bg_reg3                          (afe_bg_reg3),
.o_afe_calib_reg0                       (afe_calib_reg0),
.threshold_ovr_value            (threshold_ovr_value),
.threshold_ovr_en               (threshold_ovr_en),
.glitch_filter_en               (glitch_filter_en),
.set1_dis                       (set1_dis),
.tm_eb_wr_rst_sel               (tm_eb_wr_rst_sel),
.tm_pll_reg0                    (tm_pll_reg0),
.tm_pll_reg1                    (tm_pll_reg1),
.tm_pll_reg2                    (tm_pll_reg2),
.tm_pll_reg3                    (tm_pll_reg3),
.tm_pll_reg4                    (tm_pll_reg4),
.tm_pll_reg5                    (tm_pll_reg5),
.tm_pll_reg6                    (tm_pll_reg6),
.tm_pll_reg7                    (tm_pll_reg7),
.tm_pll_reg8                    (tm_pll_reg8),
.tm_pll_reg9                    (tm_pll_reg9),
.tm_pll_reg10                   (tm_pll_reg10),
.tm_calib_clk_ovr               (tm_calib_clk_ovr),
.tm_calib_cmp_override          (tm_calib_cmp_override),
.tm_calib_init_wait_ovr         (tm_calib_init_wait_ovr),
.tm_calib_init_wait_ovr_en      (tm_calib_init_wait_ovr_en),
.tm_res_calib_code              (tm_res_calib_code),
.tm_ted_reg0                    (tm_ted_reg0),
.tm_ted_reg1                    (tm_ted_reg1),
.tm_ted_reg2                    (tm_ted_reg2),
.tm_cdr_reg0                    (o_cdr_reg0),
.tm_cdr_reg1                    (o_cdr_reg1),
.tm_cdr_reg2                    (o_cdr_reg2),
.tm_cdr_reg3                    (o_cdr_reg3),
.tm_cdr_reg4                    (o_cdr_reg4),
.tm_cdr_reg5                    (o_cdr_reg5),
.tm_cdr_reg6                    (o_cdr_reg6),
.tm_idpullup                    (tm_idpullup),
.tm_serx_bias_en                (tm_serx_bias_en),
.tm_txvalid_ungate              (tm_txvalid_ungate),
.tm_timeout_value               (tm_timeout_value),              
.tm_timeout_all_enable          (tm_timeout_all_enable),       
.tm_timeout_enable              (tm_timeout_enable),         
.tm_hs_sync_conf                (tm_hs_sync_conf),               
.tm_linestate_fs_cnt_en         (tm_linestate_fs_cnt_en),      
.tm_linestate_ls_cnt_en         (tm_linestate_ls_cnt_en),      
.tm_linestate_ls_cnt            (tm_linestate_ls_cnt),       
.tm_linestate_fs_cnt            (tm_linestate_fs_cnt),       
.tm_hs_rx_err_reg               (tm_hs_rx_err_reg),
.tm_hsrx_reg1                   (tm_hsrx_reg1),          
.tm_hsrx_reg2                   (tm_hsrx_reg2),          
.tm_hstx_reg1                   (tm_hstx_reg1),          
.tm_hstx_reg2                   (tm_hstx_reg2),          
.tm_hstx_reg3                   (tm_hstx_reg3),          
.tm_lsfs_rx_reg                 (tm_lsfs_rx_reg),                
.tm_pll_clkon                   (tm_pll_clkon),                  
.pll_standalone_testmuxed       (pll_standalone_testmuxed),      
.tm_lsfs_tx_reg1                (tm_lsfs_tx_reg1),               
.tm_lsfs_tx_reg2                (tm_lsfs_tx_reg2),               
.tm_afe_common_reg1             (tm_afe_common_reg1),            
.tm_afe_common_reg2             (tm_afe_common_reg2),            
.tm_afe_common_reg3             (tm_afe_common_reg3),            
.tm_fs_preamble_en              (tm_fs_preamble_en),             
.tm_fs_preamble                 (tm_fs_preamble),                
.tm_fs_eop_se0_en               (tm_fs_eop_se0_en),            
.tm_ls_eop_se0_en               (tm_ls_eop_se0_en),            
.tm_eop_se0_fs                  (tm_eop_se0_fs),               
.tm_eop_se0_ls                  (tm_eop_se0_ls),               
.tm_squelch_count_idle          (tm_squelch_count_idle),
.tm_spare_out                   (tm_spare_out),
.tm_serx_en_cntrl_opmode01      (tm_serx_en_cntrl_opmode01),
.tm_pll_reg11                   (tm_pll_reg11),          
.tm_pll_reg12                   (tm_pll_reg12),          
.tm_pll_reg13                   (tm_pll_reg13),          
.tm_pll_reg14                   (tm_pll_reg14),          
.tm_ana_powerup                 (tm_ana_powerup),
.tm_clipper_en                  (tm_clipper_en),
.tm_hostdiscon_rst_reg          (tm_hostdiscon_rst_reg),
.tm_tx_sq_cnt                   (tm_tx_sq_cnt),
.tm_calib_rstn_dt               (tm_calib_rstn_dt),
.tm_ana_block_en                (tm_ana_block_en),
.tm_clk_gate_ovr                (tm_clk_gate_ovr),
.tm_clk_gate_mask               (tm_clk_gate_mask),
.tm_hs_sof_reg                  (tm_hs_sof_reg),
.debug_bc_state                 (debug_bc_state),
.bc_delay_cnt_reached_10us      (bc_delay_cnt_reached_10us),
.bc_delay_reached               (bc_delay_reached),
.tm_bccalib                     (tm_bccalib),
.tm_hscalib                     (tm_hscalib),
.tm_fscalib                     (tm_fscalib),
.tm_hscalib_offset              (tm_hscalib_offset),
.tm_fscalib_offset              (tm_fscalib_offset),
.tm_bccalib_offset              (tm_bccalib_offset),
.interrupt_in                   (interrupt),
.interrupt_reg1_isr_out         (usb2_phy_irq)
);
udc_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r                         c_udc_top ( 
.o_usb2_phy_spare               (o_usb2_phy_spare), 
.i_cdr_test_digout              (i_cdr_test_digout),
.cdr_eb_wr_reset                (cdr_eb_wr_reset),
.scan_en_ats                    (scan_en_ats),
.i_bist_mode_en                 (o_bist_mode_en),
.scan_en_cg                     (scan_en_cg),
.scan_mode_sel                  (scan_mode_sel),
.scan_clock                     (scan_clock),
.refclock                       (refclock),                      
.i_pll_480p0_clk                (i_pll_480p0_clk),             
.i_pll_480p0_vco_clk            (i_pll_480p0_vco_clk),
.udc_refclock                   (udc_refclock),                  
.scan_mode                      (scan_mode),                     
.scan_ats_mode                  (scan_ats_mode),                 
.pllrefsel                      (o_pllrefsel),                   
.lane_reverse                   (lane_reverse),                  
.databus_store                  (databus_store),
.reset                          (reset),                         
.apb_pclk                       (apb_pclk),
.apb_presetn                    (apb_presetn),
.suspendm                       (suspendm),                      
.pll_clkon                      (tm_pll_clkon),                  
.pll_clk_gate_ack               (pll_clk_gate_ack),
.powerdown                      (powerdown),                     
.sleepm                         (o_sleepm),                      
.xcvrselect                     (xcvrselect),                    
.xcvrselect_sync                (xcvrselect_sync),                       
.termselect                     (termselect),                    
.opmode                         (opmode),                        
.dppulldown                     (dppulldown),                    
.dmpulldown                     (dmpulldown),                    
.txbitstuffenable               (txbitstuffenable),              
.txbitstuffenableh              (txbitstuffenableh),             
.fslsserialmode                 (fslsserialmode),                
.tx_enable_n                    (tx_enable_n),                   
.tx_dat                         (tx_dat),                        
.tx_se0                         (tx_se0),                        
.idpullup                       (otgc_id_pullup_en),             
.txvalid                        (mux_txvalid),                   
.txvalidh                       (mux_txvalidh),                  
.datain                         (utmi_datain),                   
.o_hstx_boost_deemp_off         (hstx_boost_deemp_off),
.loopback_ls                    (loopback_ls),                   
.loopback_fs                    (loopback_fs),                   
.loopback_hs                    (loopback_hs),                   
.bist_mode_fs                   (bist_mode_fs),
.bist_mode_hs                   (bist_mode_hs),
.i_bist_on                      (o_bist_on),
.raw_squelch_ana                (raw_squelch_ana),
.glitch_filter_en               (glitch_filter_en),
.set1_dis                       (set1_dis),
.debug_bc_state                 (debug_bc_state),
.bc_delay_cnt_reached_10us      (bc_delay_cnt_reached_10us),
.bc_delay_reached               (bc_delay_reached),
.i_rid_float_a_comp_sts         (o_rid_float_a_comp_sts),        
.i_rid_b_c_comp_sts             (o_rid_b_c_comp_sts),          
.i_bc_en                        (o_bc_en),
.bc_hstx_en                     (bc_hstx_en),                    
.phy_soft_reset                 (phy_soft_reset),                
.clkdiv_soft_reset              (clkdiv_soft_reset),             
.calib_soft_reset               (calib_soft_reset),              
.tx_hs_soft_reset               (tx_hs_soft_reset),              
.tx_lsfs_soft_reset             (tx_lsfs_soft_reset),            
.rx_hs_soft_reset               (rx_hs_soft_reset),              
.lsfs_dll_soft_reset            (lsfs_dll_soft_reset),           
.sync_det_soft_reset            (sync_det_soft_reset),           
.eop_det_soft_reset             (eop_det_soft_reset),            
.nrzi_dec_soft_reset            (nrzi_dec_soft_reset),           
.bitunstuff_soft_reset          (bitunstuff_soft_reset),         
.shift_reg_soft_reset           (shift_reg_soft_reset),          
.rx_cntrl_soft_reset            (rx_cntrl_soft_reset),           
.tm_eb_wr_rst_sel               (tm_eb_wr_rst_sel),
.test_hs_sync_conf              (tm_hs_sync_conf),               
.test_linestate_fs_cnt_en       (tm_linestate_fs_cnt_en),        
.test_linestate_ls_cnt_en       (tm_linestate_ls_cnt_en),        
.test_linestate_ls_cnt          (tm_linestate_ls_cnt),   
.test_linestate_fs_cnt          (tm_linestate_fs_cnt),   
.tm_hs_rx_err_reg               (tm_hs_rx_err_reg),
.test_hsrx_reg1                 (tm_hsrx_reg1),          
.test_hsrx_reg2                 (tm_hsrx_reg2),          
.test_hstx_reg1                 (tm_hstx_reg1),          
.test_hstx_reg2                 (tm_hstx_reg2),          
.test_hstx_reg3                 (tm_hstx_reg3),          
.tm_clk_gate_mask               (tm_clk_gate_mask),
.test_lsfs_rx_reg               (tm_lsfs_rx_reg),                
.test_lsfs_tx_reg1              (tm_lsfs_tx_reg1),               
.test_lsfs_tx_reg2              (tm_lsfs_tx_reg2),               
.test_afe_common_reg1           (tm_afe_common_reg1[7:2]),               
.test_afe_common_reg2           (tm_afe_common_reg2),            
.test_afe_common_reg3           (tm_afe_common_reg3),            
.test_pll_reg11                 (tm_pll_reg11),                  
.test_pll_reg12                 (tm_pll_reg12),                  
.test_pll_reg13                 (tm_pll_reg13),                  
.test_pll_reg14                 (tm_pll_reg14),                  
.test_squelch_count_idle        (tm_squelch_count_idle),         
.test_fs_eop_se0_en             (tm_fs_eop_se0_en),              
.test_ls_eop_se0_en             (tm_ls_eop_se0_en),              
.test_eop_se0_fs                (tm_eop_se0_fs),                 
.test_eop_se0_ls                (tm_eop_se0_ls),                 
.test_timeout_all_enable        (tm_timeout_all_enable),         
.test_timeout_enable            (tm_timeout_enable),             
.test_timeout_value             (tm_timeout_value),              
.test_fs_preamble_en            (tm_fs_preamble_en),             
.test_fs_preamble               (tm_fs_preamble),                
.test_hscalib                   (tm_hscalib),
.test_fscalib                   (tm_fscalib),
.test_bccalib                   (tm_bccalib),
.test_hscalib_offset            (tm_hscalib_offset),
.test_fscalib_offset            (tm_fscalib_offset),
.test_bccalib_offset            (tm_bccalib_offset),
.test_ana_block_en              (tm_ana_block_en),
.test_clipper_en                (tm_clipper_en),
.test_hs_sof_reg                (tm_hs_sof_reg),               
.test_ana_powerup               (tm_ana_powerup),
.test_txvalid_ungate            (tm_txvalid_ungate),                   
.test_hostdiscon_rst_reg        (tm_hostdiscon_rst_reg),       
.test_serx_bias_en              (tm_serx_bias_en),
.i_bg_powergood                 (bg_powergood),          
.i_bg_powergood_ats             (bg_powergood_ats),       
.i_hsrx_sampler_calib_done      (i_hsrx_sampler_calib_done),     
.i_afe_hsrx_rec_clk             (o_afe_hsrx_rec_clk),          
.i_afe_hsrx_rec_data            (i_afe_hsrx_rec_data),         
.i_afe_hsrx_rec_data_valid      (i_afe_hsrx_rec_data_valid),     
.i_afe_hsrx_rec_decision_error  (i_afe_hsrx_rec_decision_error), 
.i_afe_hsrx_diff_data           (i_afe_hsrx_diff_data),          
.i_afe_lsfsrx_ana               (o_afe_lsfsrx_ana),              
.test_tx_sq_cnt                 (tm_tx_sq_cnt),
.test_calib_rstn_dt             (tm_calib_rstn_dt),
.test_spare_out                 (tm_spare_out),
.test_clk_gate_ovr              (tm_clk_gate_ovr_scan),
.test_serx_en_cntrl_opmode01    (tm_serx_en_cntrl_opmode01),
.i_pll_lock_ana                 (o_pll_lock_ana),                
.i_pll_lock_ana_ats             (o_pll_lock_ana_ats),            
.i_pll_coarse_code_done_ana     (o_pll_coarse_done),     
.i_pll_fbdiv                    (pll_fbdiv),             
.i_pll_ipdiv                    (pll_ipdiv),     
.i_ted_calib_done               (o_ted_calib_done),              
.i_ted_squelch_ana              (ted_squelch_ana),               
.i_ded_ana                      (o_ded_ana),                     
.i_rescal_calib_done            (usb2_calib_done),
.i_res_calib_code               (res_calib_code),        
.pll_standalone                 (pll_standalone_testmuxed),
.pll_vco_cnt_window             (pll_vco_cnt_window),
.pll_startloop                  (scan_pll_startloop),
.pll_pfd_pd                     (pll_pfd_pd),
.sieclock                       (sieclock),                      
.pll_gate                       (pll_gate),                     
.rstn_pll_clockout              (rstn_pll_clockout),
.o_usb2_1M_calib_clock          (o_usb2_calib_clock),            
.byte_clock                     (byte_clock),
.hs_clock                       (hs_clock),
.o_scan_ats_sieclock            (scan_ats_sieclock),
.o_scan_ats_hsclock             (scan_ats_hsclock),
.o_scan_ats_hssiclock           (scan_ats_hssiclock),
.o_pll_480p0_clk                (o_pll_480p0_clk),
.o_fb_clk                       (fb_clk),                      
.o_vco_pll_clk                  (o_vco_pll_clk),
.o_div_refclock                 (div_refclock),                
.o_dig_div_refclock             (dig_div_refclock),
.o_rstn_cdr_async               (o_rstn_cdr_async),              
.xcvr_sie_rstn                  (xcvr_sie_rstn),                 
.xcvr_aon_rstn                  (xcvr_aon_rstn),                 
.o_usb2_calib_rstn              (o_usb2_calib_rstn),             
.udc_bc_calib_rstn              (udc_bc_calib_rstn),             
.o_pll_calib_rstn_int           (o_pll_calib_rstn_int),
.udc_calib_rstn                 (udc_calib_rstn),
.primary_count_rstn             (primary_count_rstn),
.udc_rstn_cdr_async             (udc_rstn_cdr_async),
.rstn_calib_clkdiv              (rstn_calib_clkdiv),
.rstn_clkdiv                    (rstn_clkdiv),
.rstn_sieclock                  (rstn_sieclock),
.rstn_byte_clock                (rstn_byte_clock),
.rstn_ats_clkdiv                (rstn_ats_clkdiv),
.rstn_refclock                  (rstn_refclock),
.rstn_hs_clock                  (rstn_hs_clock),
.rstn_bist_mode                 (rstn_bist_mode),
.pclk                           (pclk),
.presetn                        (presetn),
.rxactive                       (rxactive),                      
.rxvalid                        (rxvalid),                       
.rxvalidh                       (rxvalidh),                      
.rxerror                        (rxerror),                       
.dataout                        (dataout),                       
.txready                        (txready),                       
.hostdisconnect                 (hostdisconnect),                
.rx_dp                          (rx_dp),                         
.rx_dm                          (rx_dm),                         
.rx_rcv                         (rx_rcv),                        
.bist_ana_powerup               (bist_ana_powerup),              
.fmeda_linestate_se0            (fmeda_linestate_se0),
.databus                        (databus),                       
.dprpu1_en                      (dprpu1_en),               
.dmrpu1_en                      (dmrpu1_en),               
.dprpu2_en                      (dprpu2_en),               
.dmrpu2_en                      (dmrpu2_en),               
.dprpd_en                       (dprpd_en),                
.dmrpd_en                       (dmrpd_en),                
.o_hsrx_en                      (o_hsrx_en),                     
.o_hsrx_sampler_enable          (o_hsrx_sampler_enable),         
.o_chirp_mode_en                (chirp_mode_en),                 
.o_hstx_en                      (hstx_en),                       
.o_hstx_en_delayed              (hstx_en_delayed),               
.o_hspredrv_en                  (hspredrv_en),           
.o_hsdrv_en                     (hsdrv_en),                      
.o_hsddi                        (hsddi),                         
.o_fs_edge_sel                  (fs_edge_sel),           
.o_lsfstx_en                    (lsfstx_en),                     
.o_lsfsdrv_en                   (lsfsdrv_en),                    
.o_lsfs_ddi                     (lsfs_ddi),                      
.o_assert_sezero                (assert_sezero),                 
.o_lsfsrx_en                    (lsfsrx_en),                     
.o_serx_en                      (serx_en),                       
.o_serx_bias_en                 (serx_bias_en),                
.o_afe_suspendm_rx              (afe_suspendm_rx),               
.o_afe_suspendm_tx              (afe_suspendm_tx),               
.o_afe_hscalib_code             (afe_hscalib_code),
.o_afe_fscalib_code             (afe_fscalib_code),
.o_afe_bccalib_code             (afe_bccalib_code),
.o_afe_clipper_en               (afe_clipper_en),                
.o_otgc_vbusvalid_en            (otgc_vbusvalid_en),             
.o_otgc_absvalid_en             (otgc_absvalid_en),              
.o_pll_pso                      (pll_pso),                       
.o_pll_pso_delay                (pll_pso_delay),                 
.o_pll_pd                       (pll_pd),                        
.o_pll_pd_ana                   (pll_pd_ana),
.o_pll_standby                  (pll_standby),                   
.o_pll_ldo_core_en              (pll_ldo_core_en),               
.o_pll_ldo_ref_en               (pll_ldo_ref_en),                
.o_pll_ldo_ref_core             (pll_ldo_ref_core),
.o_ed_en                        (ed_en),                         
.o_ted_en                       (ted_en),                        
.o_bg_pd_bg_ok                  (bg_pd_bg_ok),                   
.o_bg_pd                        (bg_pd),                         
.debug_rstn_refclock            (debug_rstn_refclock),
.debug_rstn_hs_clock            (debug_rstn_hs_clock),
.debug_rstn_hs_tx_clock         (debug_rstn_hs_tx_clock),
.debug_rstn_byte_clock          (debug_rstn_byte_clock),
.debug_rstn_sieclock            (debug_rstn_sieclock),
.debug_rstn_clkdiv              (debug_rstn_clkdiv),
.debug_rstn_calib_clkdiv        (debug_rstn_calib_clkdiv),
.debug_udc_rstn_cdr_async       (debug_udc_rstn_cdr_async),
.debug_udc_calib_rstn           (debug_udc_calib_rstn),
.debug_o_rstn_cdr_async         (debug_o_rstn_cdr_async),
.debug_o_pll_calib_rstn_int     (debug_o_pll_calib_rstn_int),
.debug_o_usb2_calib_rstn        (debug_o_usb2_calib_rstn),
.debug_all_calib_done           (debug_all_calib_done),
.debug_global_resetn            (debug_global_resetn),
.debug_tx_hs_state              (debug_tx_hs_state),     
.debug_eop_transmitted          (debug_eop_transmitted),
.debug_hs_bitstuff_en           (debug_hs_bitstuff_en),
.debug_pd_state                 (debug_pd_state),                
.debug_hs_sof                   (debug_hs_sof),
.debug_hs_hostdisconnect        (debug_hs_hostdisconnect),
.debug_rstn_bist_mode           (debug_rstn_bist_mode),
.debug_tx_lsfs_state            (debug_tx_lsfs_state),   
.debug_resume_eop               (debug_resume_eop),
.debug_remote_wakeup            (debug_remote_wakeup),
.debug_preamble_sent            (debug_preamble_sent),
.debug_ls_keep_alive            (debug_ls_keep_alive),
.debug_lsfs_bitstuff_en         (debug_lsfs_bitstuff_en),
.debug_eb_error                 (debug_eb_error),
.debug_cdr_error                (debug_cdr_error),
.debug_fs_mode_pre              (debug_fs_mode_pre),
.debug_ls_mode                  (debug_ls_mode),
.debug_sync_detected            (debug_sync_detected),
.debug_eop_detected             (debug_eop_detected),
.debug_hs_eop_condition         (debug_hs_eop_condition),
.debug_normal_eop               (debug_normal_eop),
.debug_alignment_error          (debug_alignment_error),
.debug_no_eop                   (debug_no_eop),
.debug_hs_eop_detected          (debug_hs_eop_detected),
.debug_se0_validated            (debug_se0_validated),
.debug_lsfs_eop_detected        (debug_lsfs_eop_detected),
.debug_bitunstuff_error         (debug_bitunstuff_error),
.debug_bus_state                (debug_bus_state),               
.debug_phy_cnt                  (debug_phy_cnt),                 
.debug_sie_cnt                  (debug_sie_cnt),                 
.debug_start_flag               (debug_start_flag),
.debug_rxactive_reg             (debug_rxactive_reg),
.debug_deassert_rxactive_reg    (debug_deassert_rxactive_reg),
.debug_lsfs_hostdisconnect      (debug_lsfs_hostdisconnect),
.debug_recovery_cnt_en          (debug_recovery_cnt_en),
.debug_clean_linestate          (debug_clean_linestate),         
.debug_filter_cnt_en            (debug_filter_cnt_en),
.debug_host_opmode              (debug_host_opmode),     
.debug_dev_opmode               (debug_dev_opmode),      
.debug_afe_suspendm             (debug_afe_suspendm),   
.debug_otgc_vbusvalid_en        (debug_otgc_vbusvalid_en),      
.debug_otgc_absvalid_en         (debug_otgc_absvalid_en),       
.debug_o_bg_pd                  (debug_o_bg_pd),                
.debug_o_bg_pd_bg_ok            (debug_o_bg_pd_bg_ok),          
.debug_afe_clipper_en           (debug_afe_clipper_en), 
.debug_pullup_en                (debug_pullup_en), 
.debug_ana_enable               (debug_ana_enable),
.debug_hscalib_code             (debug_hscalib_code),
.debug_fscalib_code             (debug_fscalib_code),
.debug_bccalib_code             (debug_bccalib_code),
.hssi_mode              (hssi_mode),
.hssi_datain            (hssi_datain),
.hssi_txvalid           (hssi_txvalid),
.hssi_tx_enable         (hssi_tx_enable),
.hssi_ted_en            (hssi_ted_en),
.idle_rpu_enable        (idle_rpu_enable),
.hssi_tx_clockin        (hssi_tx_clockin),       
.scan_hsclock           (scan_hsclock),          
.scan_hssiclock         (scan_hssiclock),        
.scan_sieclock          (scan_sieclock),         
.hssi_dataout           (hssi_dataout),
.hssi_rxvalid           (hssi_rxvalid),
.hssi_squelch           (hssi_squelch),
.hssi_rxerror           (hssi_rxerror),
.hssi_ded_ana           (hssi_ded_ana),
.hssi_chirp_data        (hssi_chirp_data),
.hssi_tx_clockout       (hssi_tx_clockout),
.hssi_rx_clockout       (hssi_rx_clockout),
.linestate_sel(linestate_sel),
.filter_linestate_d(filter_linestate_d),
.fslsserialmode_sync(fslsserialmode_sync),
.hsrx_diff_data(hsrx_diff_data),
.internal_opmode(internal_opmode),
.i_afe_rxdp_ana (i_afe_rxdp_ana),              
.i_afe_rxdm_ana (i_afe_rxdm_ana),              
.rxdm_ana(rxdm_ana),
.rxdp_ana(rxdp_ana)
);
usb2_ted_dig_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_ted_dig_top (
.o_calib_code_down(ted_calib_code_down),         
.o_calib_code_up(ted_calib_code_up),             
.o_calib_done(o_ted_calib_done),                         
.o_calib_mode_down(ted_calib_mode_down),         
.o_calib_mode_up(ted_calib_mode_up),             
.o_ed_en(w_ed_en),                               
.o_status_down(tm_ted_reg3),                     
.o_status_up(tm_ted_reg4),                       
.o_ted_en(w_ted_en),                             
.i_TM_bits({tm_ted_reg2[7:0], tm_ted_reg1[7:0], tm_ted_reg0[7:0]}), 
.i_clk(o_usb2_calib_clock),                      
.i_comp_out_down(o_ted_comp_out_down),           
.i_comp_out_up(o_ted_comp_out_up),               
.i_ed_en(ed_en),                                 
.i_rstn(udc_calib_rstn),                         
.i_ted_en(ted_en)                                
);  
usb2_pll_dig_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_pll_dig_top (
.o_FBDIV(pll_fbdiv),                     
.o_IPDIV(pll_ipdiv),                     
.o_VCO_CNT_WINDOW(pll_vco_cnt_window), 
.o_ana_COARSEDONE(o_pll_coarse_done),    
.o_ana_COARSE_CODE(pll_coarse_code),     
.o_ana_PD_PFD(pll_pfd_pd),               
.o_ana_STARTLOOP(pll_startloop),         
.o_pll_lock_ana(o_pll_lock_ana),         
.o_pll_lock_ana_ats(o_pll_lock_ana_ats),
.o_pll_reg15(tm_pll_reg15),              
.o_pll_reg16(tm_pll_reg16),              
.o_pllrefsel(o_pllrefsel),               
.o_ats_pll_ldo_ref_en(ats_pll_ldo_ref_en),  
.i_PD(o_pll_pd_int),                     
.i_pll_bypass_mode(i_pll_bypass_mode),
.reset(reset),
.scan_en (scan_en_ats),
.scan_mode_sel(scan_mode_sel),
.scan_ats_mode(scan_ats_mode),
.scan_clock(scan_clock),
.pllrefsel(pllrefsel),
.i_REFCLK(dig_div_refclock),             
.i_vco_pll_clk(o_vco_pll_clk),
.i_STDBY(pll_standby),           
.i_pll_reg0(tm_pll_reg0),                        
.i_pll_reg1(tm_pll_reg1),                        
.i_pll_reg2(tm_pll_reg2),                        
.i_pll_reg3(tm_pll_reg3),                        
.i_pll_reg4(tm_pll_reg4),                        
.i_pll_reg5(tm_pll_reg5),                        
.i_pll_reg6(tm_pll_reg6),                        
.i_pll_reg7(tm_pll_reg7),                        
.i_pll_reg8(tm_pll_reg8),                        
.i_pll_reg9(tm_pll_reg9),                        
.i_pll_reg10(tm_pll_reg10)                       
);
usb2_calib_dig_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_calib_dig_top(
.reset(reset),
.i_calib_clk(o_usb2_calib_clock), 
.i_calib_rstb(o_usb2_calib_rstn),
.i_calib_cmp_out(o_calib_cmp_out),
.tm_calib_clk_ovr(tm_calib_clk_ovr),
.tm_calib_cmp_override(tm_calib_cmp_override),
.tm_calib_init_wait_ovr(tm_calib_init_wait_ovr),
.tm_calib_init_wait_ovr_en(tm_calib_init_wait_ovr_en),
.tm_res_calib_code(tm_res_calib_code),
.scan_sieclock(scan_sieclock),
.scan_mode(scan_mode),
.debug_calib(debug_calib),
.o_usb2_calib_done(usb2_calib_done),
.o_calib_pd_bias_comp(calib_pd_bias_comp),
.o_res_calib_code(res_calib_code),
.debug_res_calib_code(debug_res_calib_code)
);
usb2_spare_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r  
#(
.p_APB_CLK_REG_CNT              (16'd500),
.p_SCAN_CLOCK_REG_CNT           (16'd500),
.p_REF_CLK_REG_CNT              (16'd500),
.p_PLL_DIV_CLK_REG_CNT          (16'd500),
.p_480_TX_CLK_REG_CNT           (16'd500),
.p_480_RX_CLK_REG_CNT           (16'd500),
.p_REC_CLK_REG_CNT              (16'd500),
.p_TXCLK_240_REG_CNT            (16'd500),
.p_USB_CALIB_CLK_RST_CNT        (16'd500),
.p_UDC_CALIB_CLK_REG_CNT        (16'd500),
.p_UDC_CALIB_CLK_DIV_REG_CNT    (16'd500),
.p_SIECLOCK_REG_CNT             (16'd500),
.p_BYTE_CLOCK_REG_CNT           (16'd500),
.p_HS_CLOCK_REG_CNT             (16'd500),
.p_HS_TX_CLOCK_REG_CNT          (16'd500),
.p_PLL_EXT_CLK_REG_CNT          (16'd500)
)
c_spare_top(
.i_pclk                         (pclk),
.i_pll_div_refclk               (dig_div_refclock),
.i_pll_480p0_clk                (o_pll_480p0_clk),
.i_afe_hsrx_rec_clk             (o_afe_hsrx_rec_clk),
.i_usb2_calib_clock             (o_usb2_calib_clock),
.i_udc_refclock                 (udc_refclock),
.i_sieclock                     (sieclock),
.i_byte_clock                   (byte_clock),
.i_hs_clock                     (hs_clock),
.i_presetn                      (presetn),
.i_pll_pd                       (o_pll_pd_int),
.i_pll_calib_rstn_int           (o_pll_calib_rstn_int),
.i_udc_calib_rstn               (udc_calib_rstn),
.i_primary_count_rstn           (primary_count_rstn),
.i_udc_rstn_cdr_async           (udc_rstn_cdr_async),
.i_rstn_calib_clkdiv            (rstn_calib_clkdiv),
.i_rstn_clkdiv                  (rstn_clkdiv),
.i_rstn_sieclock                (rstn_sieclock),
.i_rstn_byte_clock              (rstn_byte_clock),
.i_rstn_refclock                (rstn_refclock),
.i_rstn_hs_clock                (rstn_hs_clock),
.i_xcvr_sie_rstn                (xcvr_sie_rstn),                 
.i_usb2_calib_rstn              (o_usb2_calib_rstn)              
);
linestate_checker_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_linestate_checker (
.apb_pclk            (pclk),
.apb_presetn         (presetn),
.internal_opmode     (internal_opmode),
.squelch             (ted_squelch_ana),
.hsdrv_en            (hsdrv_en),
.rxdm                (rxdm_ana),
.rxdp                (rxdp_ana),
.hsrx_diff_data      (hsrx_diff_data),
.linestate           (linestate),
.fmeda_linestate_se0 (fmeda_linestate_se0),
.threshold_ovr_en    (threshold_ovr_en),
.threshold_ovr_value (threshold_ovr_value),
.interrupt           (interrupt)
);
endmodule
`timescale 1ns / 1ps
module usb2_pll_tx_pll_mode_change_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r
  (
   o_ana_PD_PFD, o_ana_START_LOOP, o_ana_pll_lock,
   o_COARSE_DONE_del,
   i_TM, i_PD, i_REFCLK, i_STDBY, pllrefsel,
   i_COARSE_DONE, i_CONFIG_CHANGE_CYCLES, i_PLL_LOCK_TIME_15,
   i_PD_PFD_FORCE_EN, i_PD_PFD_FORCE,
   i_BYPASS_LOCK_EN, i_BYPASS_LOCK
   );
   parameter p_num_cfg_change_bits = 5;
   input        i_PD;		 
   input        i_REFCLK;
   input        i_STDBY;
   input        i_PLL_LOCK_TIME_15;
   input     	i_COARSE_DONE;
   input [3:0]  pllrefsel;
   input [p_num_cfg_change_bits -1:0] i_CONFIG_CHANGE_CYCLES;
   input [p_num_cfg_change_bits+2:0]  i_TM;   
   input	i_BYPASS_LOCK_EN;
   input	i_BYPASS_LOCK;
   input	i_PD_PFD_FORCE_EN;
   input	i_PD_PFD_FORCE;
   output 			      o_ana_PD_PFD;   
   output 			      o_ana_START_LOOP;  
   output 			      o_COARSE_DONE_del;
   output			      o_ana_pll_lock;
   reg 				      r_COARSE_DONE_del;
   reg 				      r_START_LOOP;
   reg 				      r_PD_PFD;
   wire [p_num_cfg_change_bits - 1 :0] w_TM_COARSE_SETTLE_CNT;
   reg [p_num_cfg_change_bits - 1 :0]  w_settle_count;
   reg [p_num_cfg_change_bits -1 :0]   r_settle_count;
   reg [4:0] 				r_done_wait_cnt, r_done_count;
   reg [6:0]				r_lock_wait_cnt, r_lock_count;
   reg					r_stndby_del, r_coarse_done_int, r_en_done_count, r_sl_del, r_en_lock_count;
   reg					r_pll_lock;
   wire                               w_PLL_LOCK_TIME_15;
   assign 			       o_COARSE_DONE_del = r_COARSE_DONE_del;
   assign 	o_ana_START_LOOP = ( i_TM[p_num_cfg_change_bits+1]) ? i_TM[p_num_cfg_change_bits] : r_START_LOOP;   
   assign 	w_TM_COARSE_SETTLE_CNT = i_TM[p_num_cfg_change_bits-1:0];
   assign 	o_ana_PD_PFD = i_PD_PFD_FORCE_EN  ? i_PD_PFD_FORCE : r_PD_PFD;
   assign	o_ana_pll_lock = i_BYPASS_LOCK_EN ? i_BYPASS_LOCK : r_pll_lock;
   assign       w_PLL_LOCK_TIME_15 =  i_PLL_LOCK_TIME_15;
   always @(*)
     if (i_TM[p_num_cfg_change_bits+2] == 1'b1)
       w_settle_count = w_TM_COARSE_SETTLE_CNT ;
     else
       w_settle_count = i_CONFIG_CHANGE_CYCLES;
   always @(posedge i_REFCLK or posedge i_PD)
     if (i_PD)
       begin
	r_COARSE_DONE_del <= 1'b0;	
	r_START_LOOP <= 1'b0;	
       end
     else if(i_STDBY)
       begin
	 r_START_LOOP <= 1'b0;
         r_COARSE_DONE_del <= 1'b0;
       end
     else
       begin
	r_COARSE_DONE_del <= r_coarse_done_int; 	
	if (r_coarse_done_int & ~r_COARSE_DONE_del)
	  begin
	     r_START_LOOP <= 1'b0;
	  end
	if (r_settle_count == w_settle_count)
	  begin
	     r_START_LOOP <= 1'b1;
	  end
       end
   always @(posedge i_REFCLK or posedge i_PD)
     if (i_PD)
       r_settle_count <= 5'd0;
     else if(i_STDBY)
       r_settle_count <= 5'd0;
     else
     begin
       if (r_settle_count == w_settle_count)
         r_settle_count <= 5'd0;
       else if(|r_settle_count)
         r_settle_count <= r_settle_count + 1'b1;
       else if(r_coarse_done_int & ~r_COARSE_DONE_del)
         r_settle_count <= 5'd1;
     end
  always @(posedge i_REFCLK or posedge i_PD)
  if(i_PD)
  begin
    r_done_count <= 5'd0;
    r_stndby_del <= 1'b0;
    r_coarse_done_int <= 1'b0;
    r_en_done_count <= 1'b0;
  end	
  else
  begin
    r_stndby_del <= i_STDBY;
    if(i_STDBY || (~i_STDBY & r_stndby_del) || r_en_done_count )
      r_coarse_done_int <= 1'b0;
    else
      r_coarse_done_int <= i_COARSE_DONE;
    if(~i_STDBY & r_stndby_del) 	       
    begin
      r_done_count <= 5'd0;
      r_en_done_count <= 1'b1;
    end
    if(r_en_done_count )
      r_done_count <= r_done_count+ 1'b1;
    if(r_done_count == r_done_wait_cnt)
    begin
      r_coarse_done_int <= 1'b1;
      r_done_count <= 5'd0;
      r_en_done_count <= 1'b0;
    end
  end
  always @(posedge i_REFCLK or posedge i_PD)
  if(i_PD)
  begin
    r_lock_count <= 7'd0;
    r_sl_del <= 1'd0;
    r_en_lock_count <= 1'b0;
    r_pll_lock <= 1'b0;
  end
  else if(i_STDBY)
    r_pll_lock <= 1'b0;
  else
  begin
    r_sl_del <= r_START_LOOP ;
    if(r_START_LOOP & ~r_sl_del)
      r_en_lock_count <= 1'b1;
    if(r_en_lock_count)
      r_lock_count <= r_lock_count + 1'b1;
    if(r_lock_count == r_lock_wait_cnt)
    begin
      r_lock_count <= 7'd0;
      r_pll_lock <= 1'b1;
      r_en_lock_count <= 1'b0;
    end
  end
   always @(negedge i_REFCLK or posedge i_PD)
   if (i_PD)
     r_PD_PFD <= 1'b1;
   else if(i_STDBY)
     r_PD_PFD <= 1'b1;
   else
   begin
     if(r_START_LOOP == 1'b1)
       r_PD_PFD <= 1'b0;
   end
always @*
begin
    case(pllrefsel)
    4'b 0000:			     
    begin
    	r_done_wait_cnt = 5'd29;
    	r_lock_wait_cnt = w_PLL_LOCK_TIME_15 ? 7'd 73 : 7'd 121;
    end
    4'b 0001:			     
    begin
    	r_done_wait_cnt = 5'd30;
    	r_lock_wait_cnt = w_PLL_LOCK_TIME_15 ? 7'd 75 : 7'd125 ;
    end
    4'b 0010:			     
    begin
    	r_done_wait_cnt = 5'd24;
    	r_lock_wait_cnt = w_PLL_LOCK_TIME_15 ? 7'd60 : 7'd100 ;
    end
    4'b 0011:			     
    begin
        r_done_wait_cnt = 5'd29;
    	r_lock_wait_cnt = w_PLL_LOCK_TIME_15 ? 7'd 73 :  7'd 121;
    end
    4'b 0100:			     
    begin
        r_done_wait_cnt = 5'd30;
    	r_lock_wait_cnt = w_PLL_LOCK_TIME_15 ? 7'd 75 : 7'd125 ;
    end
    4'b 0101:			     
    begin
        r_done_wait_cnt = 5'd24;
    	r_lock_wait_cnt = w_PLL_LOCK_TIME_15 ? 7'd60 : 7'd100 ;
    end
    4'b 0110:			   
    begin
        r_done_wait_cnt = 5'd30;
    	r_lock_wait_cnt = w_PLL_LOCK_TIME_15 ? 7'd 75 : 7'd125 ;
    end     
    4'b 0111:			   
    begin
        r_done_wait_cnt = 5'd12;
    	r_lock_wait_cnt = w_PLL_LOCK_TIME_15 ? 7'd 28 :7'd48 ;
    end
    4'b 1000:			     
    begin
        r_done_wait_cnt = 5'd29;
    	r_lock_wait_cnt = w_PLL_LOCK_TIME_15 ? 7'd 73 : 7'd 121;
    end
    4'b 1001:			     
    begin
        r_done_wait_cnt = 5'd24;
    	r_lock_wait_cnt = w_PLL_LOCK_TIME_15 ? 7'd60 : 7'd100 ;
    end
    4'b 1010:			     
    begin
        r_done_wait_cnt = 5'd24;
    	r_lock_wait_cnt = w_PLL_LOCK_TIME_15 ? 7'd60 : 7'd100 ;
    end
    4'b 1011:			     
    begin
        r_done_wait_cnt = 5'd30;
    	r_lock_wait_cnt = w_PLL_LOCK_TIME_15 ? 7'd 75 : 7'd125 ;
    end
    4'b 1100:			   
    begin
        r_done_wait_cnt = 5'd12;
    	r_lock_wait_cnt = w_PLL_LOCK_TIME_15 ? 7'd 28 : 7'd48 ;
    end
    4'b 1101:			     
    begin
        r_done_wait_cnt = 5'd30;
    	r_lock_wait_cnt = w_PLL_LOCK_TIME_15 ? 7'd 75 : 7'd125 ;
    end
    default:			     
    begin
        r_done_wait_cnt = 5'd29;
    	r_lock_wait_cnt = w_PLL_LOCK_TIME_15 ? 7'd 73 : 7'd 121;
    end
    endcase
end
endmodule  
module JTAG_MACRO_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r(JTAG_SE, JTAG_SE_CG, JTAG_IOTEST, JTAG_TDI, JTAG_TMS, JTAG_TCK, JTAG_TRST,
                  JTAG_TEST_CLOCK, JTAG_TEST_ENABLE, JTAG_BOUNDARY_TDO, JTAG_RESET,
                  JTAG_SHIFTDR, JTAG_SHIFTDR_STATE, JTAG_BOUNDARY_SHIFTDR, JTAG_RUNIDLE,
                  JTAG_TDO, JTAG_ENABLE_TDO, JTAG_CLOCKDR, JTAG_BOUNDARY_CLOCKDR,
                  JTAG_INSTRUCTION_DECODE_MODE_A, JTAG_INSTRUCTION_DECODE_MODE_B,
                  JTAG_INSTRUCTION_DECODE_MODE_C, JTAG_INSTRUCTION_DECODE_CTRL_HIGHZ,
                  JTAG_CAPTUREDR_STATE, JTAG_UPDATEDR_STATE,
                  JTAG_INSTRUCTION_DECODE_INCTRL, JTAG_BOUNDARY_UPDATEDR,
                  JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_5, JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_2, 
                  JTAG_INSTRUCTION_DECODE_EXTEST_TRAIN, JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_9, 
                  JTAG_INSTRUCTION_DECODE_EXTEST, JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_6, 
                  JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_4, JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_1, 
                  JTAG_INSTRUCTION_DECODE_BYPASS, JTAG_INSTRUCTION_DECODE_PRELOAD, 
                  JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_8, JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_3, 
                  JTAG_INSTRUCTION_DECODE_EXTEST_PULSE, JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_10, 
                  JTAG_INSTRUCTION_DECODE_SAMPLE, JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_7, 
                  JTAG_TDR_BOUNDARY, JTAG_TDR_BYPASS,
                  JTAG_TDR_CUSTOM_REG_10, JTAG_TDR_CUSTOM_REG_1, 
                  JTAG_TDR_CUSTOM_REG_9, JTAG_TDR_CUSTOM_REG_5, 
                  JTAG_TDR_CUSTOM_REG_6, JTAG_TDR_CUSTOM_REG_2, 
                  JTAG_TDR_CUSTOM_REG_7, JTAG_TDR_CUSTOM_REG_3, 
                  JTAG_TDR_CUSTOM_REG_8, JTAG_TDR_CUSTOM_REG_4,                   
                  JTAG_INSTR_CAPTURE_2, JTAG_INSTR_CAPTURE_3, 
                  JTAG_CUSTOM_REG_10_TDO, JTAG_CUSTOM_REG_1_TDO, 
                  JTAG_CUSTOM_REG_9_TDO, JTAG_CUSTOM_REG_5_TDO, 
                  JTAG_CUSTOM_REG_6_TDO, JTAG_CUSTOM_REG_2_TDO, 
                  JTAG_CUSTOM_REG_7_TDO, JTAG_CUSTOM_REG_3_TDO, 
                  JTAG_CUSTOM_REG_8_TDO, JTAG_CUSTOM_REG_4_TDO, 
                  JTAG_ACTRENBL,
                  JTAG_ACDCSEL, JTAG_ACPSCLK, JTAG_ACPULSE, JTAG_ACPSEN, 
                  JTAG_RESET_STATE, JTAG_UPDATEDR);
      input  JTAG_SE;
      input  JTAG_SE_CG;
      input  JTAG_IOTEST;
      input  JTAG_TDI;
      input  JTAG_TMS;
      input  JTAG_TCK;
      input  JTAG_TRST;
      input  JTAG_TEST_CLOCK;
      input  JTAG_TEST_ENABLE;
      input  JTAG_BOUNDARY_TDO;
      input  JTAG_INSTR_CAPTURE_2;
      input  JTAG_INSTR_CAPTURE_3;
      input  JTAG_CUSTOM_REG_10_TDO;
      input  JTAG_CUSTOM_REG_1_TDO;
      input  JTAG_CUSTOM_REG_9_TDO;
      input  JTAG_CUSTOM_REG_5_TDO;
      input  JTAG_CUSTOM_REG_6_TDO;
      input  JTAG_CUSTOM_REG_2_TDO;
      input  JTAG_CUSTOM_REG_7_TDO;
      input  JTAG_CUSTOM_REG_3_TDO;
      input  JTAG_CUSTOM_REG_8_TDO;
      input  JTAG_CUSTOM_REG_4_TDO;
      output JTAG_RESET;
      output JTAG_SHIFTDR;
      output JTAG_SHIFTDR_STATE;
      output JTAG_BOUNDARY_SHIFTDR;
      output JTAG_RUNIDLE;
      output JTAG_RESET_STATE;
      output JTAG_CAPTUREDR_STATE;
      output JTAG_UPDATEDR_STATE;
      output JTAG_TDO;
      output JTAG_ENABLE_TDO;
      output JTAG_CLOCKDR;
      output JTAG_BOUNDARY_CLOCKDR;
      output JTAG_INSTRUCTION_DECODE_MODE_A;
      output JTAG_INSTRUCTION_DECODE_MODE_B;
      output JTAG_INSTRUCTION_DECODE_MODE_C;
      output JTAG_INSTRUCTION_DECODE_CTRL_HIGHZ;
      output JTAG_INSTRUCTION_DECODE_INCTRL;
      output JTAG_BOUNDARY_UPDATEDR;
      output JTAG_UPDATEDR;
      output JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_5;
      output JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_2;
      output JTAG_INSTRUCTION_DECODE_EXTEST_TRAIN;
      output JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_9;
      output JTAG_INSTRUCTION_DECODE_EXTEST;
      output JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_6;
      output JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_4;
      output JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_1;
      output JTAG_INSTRUCTION_DECODE_BYPASS;
      output JTAG_INSTRUCTION_DECODE_PRELOAD;
      output JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_8;
      output JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_3;
      output JTAG_INSTRUCTION_DECODE_EXTEST_PULSE;
      output JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_10;
      output JTAG_INSTRUCTION_DECODE_SAMPLE;
      output JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_7;
      output JTAG_TDR_BOUNDARY;
      output JTAG_TDR_BYPASS;
      output JTAG_TDR_CUSTOM_REG_10;
      output JTAG_TDR_CUSTOM_REG_1;
      output JTAG_TDR_CUSTOM_REG_9;
      output JTAG_TDR_CUSTOM_REG_5;
      output JTAG_TDR_CUSTOM_REG_6;
      output JTAG_TDR_CUSTOM_REG_2;
      output JTAG_TDR_CUSTOM_REG_7;
      output JTAG_TDR_CUSTOM_REG_3;
      output JTAG_TDR_CUSTOM_REG_8;
      output JTAG_TDR_CUSTOM_REG_4;
      output JTAG_ACTRENBL;
      output JTAG_ACDCSEL;
      output JTAG_ACPSCLK;
      output JTAG_ACPULSE;
      output JTAG_ACPSEN;
   wire JTAG_NTCK;
   wire JTAG_NTCK_MUX;
   wire JTAG_TCK_MUX;
   wire NetHighzOrBypass;
   wire JTAG_INV_RESET_MOD;
   wire NET_BOUNDARY_UPDATEDR_STATE;
   wire BOUNDARY_CLOCKDR_STATES;
   wire JTAG_BOUNDARY;
   reg  JTAG_TDO_S;
   wire NetUnlatchedTDO;
   wire JTAG_MUX_DATA_TDO;
   wire UPDATEDR_int;
   wire CLOCKDR_int;
   reg EXTEST_RETIMED;
   wire ACPSCLK_EXTEST_AND;
   reg EXIT1_DR_OR_EXIT2_DR_RETIMED;
   wire ACPSCLK_TRAIN_PULSE_AND;
   wire ACPSCLK_TRAIN_PULSE_OR;
   reg ACPSCLK_TRAIN_PULSE_RETIMED;
   reg SELECTDR_STATE_RETIMED;
   reg JTAG_ACPULSE_S;
   wire ACPULSE_FEEDBACK;
   wire ACPULSE_D;
   TAP_CONTROLLER_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r TAP_CONTROLLER_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r(
       .TRST(JTAG_TRST),
       .TCK(JTAG_TCK_MUX),
       .NTCK(JTAG_NTCK_MUX),
       .TMS(JTAG_TMS),
       .SE(JTAG_SE_CG),
       .RESET(JTAG_INV_RESET),
       .RESET_STATE(TAP_CONTROLLER_RESET_STATE),
       .SEL(JTAG_SELECT),
       .ENABLE(JTAG_ENABLE_TDO),
       .SHIFTIR(JTAG_SHIFTIR),
       .CLOCKIR(JTAG_CLOCKIR),
       .UPDATEIR(JTAG_UPDATEIR),
       .SHIFTDR(JTAG_SHIFTDR),
       .CLOCKDR(TAP_CONTROLLER_CLOCKDR),
       .UPDATEDR(JTAG_UPDATEDR),
       .RUNIDLE(TAP_CONTROLLER_RUNIDLE),
       .SHIFTDR_STATE(TAP_CONTROLLER_SHIFTDR_STATE),
       .SELECTDR_STATE(TAP_CONTROLLER_SELECTDR_STATE),
       .CAPTUREDR_STATE(TAP_CONTROLLER_CAPTUREDR_STATE),
       .EXIT1_DR_OR_EXIT2_DR(TAP_CONTROLLER_EXIT1_DR_OR_EXIT2_DR),
       .UPDATEDR_STATE(TAP_CONTROLLER_UPDATEDR_STATE)
   );
   assign JTAG_RUNIDLE = TAP_CONTROLLER_RUNIDLE;
   assign JTAG_RESET_STATE = TAP_CONTROLLER_RESET_STATE;
   assign JTAG_CAPTUREDR_STATE = TAP_CONTROLLER_CAPTUREDR_STATE;
   assign JTAG_SHIFTDR_STATE = TAP_CONTROLLER_SHIFTDR_STATE;
   assign JTAG_UPDATEDR_STATE = TAP_CONTROLLER_UPDATEDR_STATE;
   assign JTAG_NTCK = ~(JTAG_TCK);
   phy_scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r u_phy_scan_mux_JTAG_TCK_MUX (
      .scan_mode_en_in    (JTAG_TEST_ENABLE),
      .scan_signal_in     (JTAG_TEST_CLOCK),
      .fcn_signal_in      (JTAG_TCK),
      .fcn_signal_out     (JTAG_TCK_MUX)
      );
   phy_scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r u_phy_scan_mux_JTAG_NTCK_MUX (
      .scan_mode_en_in    (JTAG_TEST_ENABLE),
      .scan_signal_in     (JTAG_TEST_CLOCK),
      .fcn_signal_in      (JTAG_NTCK),
      .fcn_signal_out     (JTAG_NTCK_MUX)
      );
   assign JTAG_RESET = ~(JTAG_INV_RESET);
   assign JTAG_INV_RESET_MOD = ((JTAG_INV_RESET & ~(JTAG_TEST_ENABLE)) | (JTAG_TRST & JTAG_TEST_ENABLE));
   INSTRUCTION_REGISTER_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r INSTRUCTION_REGISTER_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r(
       .SHIFTIR(JTAG_SHIFTIR),
       .CLOCKIR(JTAG_CLOCKIR),
       .TDI(JTAG_TDI),
       .RESET(JTAG_INV_RESET_MOD),
       .JTAG_INSTR_CAPTURE_2(JTAG_INSTR_CAPTURE_2),
       .JTAG_INSTR_CAPTURE_3(JTAG_INSTR_CAPTURE_3),
       .BIT0(JTAG_DECODE_BIT0),
       .BIT1(JTAG_DECODE_BIT1),
       .BIT2(JTAG_DECODE_BIT2),
       .BIT3(JTAG_DECODE_BIT3),
       .TDO(JTAG_INSTRUCT_TDO)
   );
   INSTRUCTION_DECODE_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r INSTRUCTION_DECODE_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r(
       .UPDATEIR(JTAG_UPDATEIR),
       .RESET(JTAG_INV_RESET_MOD),
       .TCK(JTAG_TCK_MUX),
       .SE(JTAG_SE),
       .IOTEST(JTAG_IOTEST),
       .BIT0(JTAG_DECODE_BIT0),
       .BIT1(JTAG_DECODE_BIT1),
       .BIT2(JTAG_DECODE_BIT2),
       .BIT3(JTAG_DECODE_BIT3),
       .JTAG_BOUNDARY(JTAG_BOUNDARY),
       .HighzOrBypass(NetHighzOrBypass),
       .MODE_A(INSTRUCTION_DECODE_MODE_A),
       .MODE_B(INSTRUCTION_DECODE_MODE_B),
       .MODE_C(INSTRUCTION_DECODE_MODE_C),
       .CTRL_HIGHZ(INSTRUCTION_DECODE_CTRL_HIGHZ),
       .INCTRL(INSTRUCTION_DECODE_INCTRL),
       .CUSTOM_INSTR_5(INSTRUCTION_DECODE_CUSTOM_INSTR_5),
       .CUSTOM_INSTR_2(INSTRUCTION_DECODE_CUSTOM_INSTR_2),
       .EXTEST_TRAIN(INSTRUCTION_DECODE_EXTEST_TRAIN),
       .CUSTOM_INSTR_9(INSTRUCTION_DECODE_CUSTOM_INSTR_9),
       .EXTEST(INSTRUCTION_DECODE_EXTEST),
       .CUSTOM_INSTR_6(INSTRUCTION_DECODE_CUSTOM_INSTR_6),
       .CUSTOM_INSTR_4(INSTRUCTION_DECODE_CUSTOM_INSTR_4),
       .CUSTOM_INSTR_1(INSTRUCTION_DECODE_CUSTOM_INSTR_1),
       .BYPASS(INSTRUCTION_DECODE_BYPASS),
       .PRELOAD(INSTRUCTION_DECODE_PRELOAD),
       .CUSTOM_INSTR_8(INSTRUCTION_DECODE_CUSTOM_INSTR_8),
       .CUSTOM_INSTR_3(INSTRUCTION_DECODE_CUSTOM_INSTR_3),
       .EXTEST_PULSE(INSTRUCTION_DECODE_EXTEST_PULSE),
       .CUSTOM_INSTR_10(INSTRUCTION_DECODE_CUSTOM_INSTR_10),
       .SAMPLE(INSTRUCTION_DECODE_SAMPLE),
       .CUSTOM_INSTR_7(INSTRUCTION_DECODE_CUSTOM_INSTR_7),
       .JTAG_BYPASS_DEFAULT()
   );
   BYPASS_REGISTER_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r BYPASS_REGISTER_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r(
       .TDI(JTAG_TDI),
       .SHIFTDR(JTAG_SHIFTDR),
       .CLOCKDR(BYPASS_REGISTER_CLOCKDR),
       .TDO(JTAG_BYPASS_TDO)
   );
   JTAG_CLOCK_GATE_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r JTAG_CLOCK_GATE_BYPASS_CLOCKDR(
       .test(JTAG_SE_CG),
       .enable(NetHighzOrBypass),
       .ck_in(TAP_CONTROLLER_CLOCKDR),
       .ck_out(BYPASS_REGISTER_CLOCKDR)
   );
   assign NET_BOUNDARY_UPDATEDR_STATE = (TAP_CONTROLLER_UPDATEDR_STATE & JTAG_BOUNDARY);
   JTAG_CLOCK_GATE_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r JTAG_CLOCK_GATE_BOUNDARY_UPDATEDR(
       .test(JTAG_SE_CG),
       .enable(NET_BOUNDARY_UPDATEDR_STATE),
       .ck_in(JTAG_NTCK_MUX),
       .ck_out(UPDATEDR_int)
   );
   assign JTAG_CLOCKDR = TAP_CONTROLLER_CLOCKDR;
   assign BOUNDARY_CLOCKDR_STATES = ((TAP_CONTROLLER_CAPTUREDR_STATE | TAP_CONTROLLER_SHIFTDR_STATE) & JTAG_BOUNDARY);
   JTAG_CLOCK_GATE_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r JTAG_CLOCK_GATE_BOUNDARY_CLOCKDR(
       .test(JTAG_SE_CG),
       .enable(BOUNDARY_CLOCKDR_STATES),
       .ck_in(JTAG_TCK_MUX),
       .ck_out(CLOCKDR_int)
   );
   assign JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_5 = INSTRUCTION_DECODE_CUSTOM_INSTR_5;
   assign JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_2 = INSTRUCTION_DECODE_CUSTOM_INSTR_2;
   assign JTAG_INSTRUCTION_DECODE_EXTEST_TRAIN = INSTRUCTION_DECODE_EXTEST_TRAIN;
   assign JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_9 = INSTRUCTION_DECODE_CUSTOM_INSTR_9;
   assign JTAG_INSTRUCTION_DECODE_EXTEST = INSTRUCTION_DECODE_EXTEST;
   assign JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_6 = INSTRUCTION_DECODE_CUSTOM_INSTR_6;
   assign JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_4 = INSTRUCTION_DECODE_CUSTOM_INSTR_4;
   assign JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_1 = INSTRUCTION_DECODE_CUSTOM_INSTR_1;
   assign JTAG_INSTRUCTION_DECODE_BYPASS = INSTRUCTION_DECODE_BYPASS;
   assign JTAG_INSTRUCTION_DECODE_PRELOAD = INSTRUCTION_DECODE_PRELOAD;
   assign JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_8 = INSTRUCTION_DECODE_CUSTOM_INSTR_8;
   assign JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_3 = INSTRUCTION_DECODE_CUSTOM_INSTR_3;
   assign JTAG_INSTRUCTION_DECODE_EXTEST_PULSE = INSTRUCTION_DECODE_EXTEST_PULSE;
   assign JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_10 = INSTRUCTION_DECODE_CUSTOM_INSTR_10;
   assign JTAG_INSTRUCTION_DECODE_SAMPLE = INSTRUCTION_DECODE_SAMPLE;
   assign JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_7 = INSTRUCTION_DECODE_CUSTOM_INSTR_7;
   assign JTAG_INSTRUCTION_DECODE_MODE_A = INSTRUCTION_DECODE_MODE_A;
   assign JTAG_INSTRUCTION_DECODE_MODE_B = INSTRUCTION_DECODE_MODE_B;
   assign JTAG_INSTRUCTION_DECODE_MODE_C = INSTRUCTION_DECODE_MODE_C;
   assign JTAG_INSTRUCTION_DECODE_CTRL_HIGHZ = INSTRUCTION_DECODE_CTRL_HIGHZ;
   assign JTAG_INSTRUCTION_DECODE_INCTRL = INSTRUCTION_DECODE_INCTRL;
   assign JTAG_BOUNDARY_SHIFTDR = JTAG_SHIFTDR; 
   assign JTAG_BOUNDARY_CLOCKDR = CLOCKDR_int;
   assign JTAG_BOUNDARY_UPDATEDR = UPDATEDR_int;
   always @(NetUnlatchedTDO or JTAG_TCK_MUX)
   begin : JTAG_TDO_LATCH
     if (~JTAG_TCK_MUX)
       JTAG_TDO_S <= NetUnlatchedTDO;
   end
   assign NetUnlatchedTDO = ((JTAG_MUX_DATA_TDO & ~(JTAG_SELECT)) | (JTAG_INSTRUCT_TDO & JTAG_SELECT));
   assign JTAG_MUX_DATA_TDO = (JTAG_BOUNDARY & JTAG_BOUNDARY_TDO) | (NetHighzOrBypass & JTAG_BYPASS_TDO) | (INSTRUCTION_DECODE_CUSTOM_INSTR_5 & JTAG_CUSTOM_REG_5_TDO) | (INSTRUCTION_DECODE_CUSTOM_INSTR_2 & JTAG_CUSTOM_REG_2_TDO) | (INSTRUCTION_DECODE_CUSTOM_INSTR_9 & JTAG_CUSTOM_REG_9_TDO) | (INSTRUCTION_DECODE_CUSTOM_INSTR_6 & JTAG_CUSTOM_REG_6_TDO) | (INSTRUCTION_DECODE_CUSTOM_INSTR_4 & JTAG_CUSTOM_REG_4_TDO) | (INSTRUCTION_DECODE_CUSTOM_INSTR_1 & JTAG_CUSTOM_REG_1_TDO) | (INSTRUCTION_DECODE_CUSTOM_INSTR_8 & JTAG_CUSTOM_REG_8_TDO) | (INSTRUCTION_DECODE_CUSTOM_INSTR_3 & JTAG_CUSTOM_REG_3_TDO) | (INSTRUCTION_DECODE_CUSTOM_INSTR_10 & JTAG_CUSTOM_REG_10_TDO) | (INSTRUCTION_DECODE_CUSTOM_INSTR_7 & JTAG_CUSTOM_REG_7_TDO);
   assign JTAG_TDO = JTAG_TDO_S;
   assign JTAG_ACTRENBL = (JTAG_BOUNDARY & ~INSTRUCTION_DECODE_MODE_A);
   always @(posedge JTAG_TCK_MUX)
   begin : EXTEST_RETIMED_DFF
   EXTEST_RETIMED <= INSTRUCTION_DECODE_EXTEST;
   end
   always @(posedge JTAG_NTCK_MUX)
     begin : EXIT1_DR_OR_EXIT2_DR_RETIMED_DFF
       EXIT1_DR_OR_EXIT2_DR_RETIMED <= TAP_CONTROLLER_EXIT1_DR_OR_EXIT2_DR;
     end
   assign ACPSCLK_TRAIN_PULSE_OR = (INSTRUCTION_DECODE_EXTEST_PULSE | INSTRUCTION_DECODE_EXTEST_TRAIN);
   assign ACPSCLK_TRAIN_PULSE_AND = ((ACPSCLK_TRAIN_PULSE_OR & EXIT1_DR_OR_EXIT2_DR_RETIMED) & JTAG_TCK);
   assign ACPSCLK_EXTEST_AND = ((TAP_CONTROLLER_CAPTUREDR_STATE & EXTEST_RETIMED) & JTAG_NTCK);
   assign JTAG_ACPSCLK = (ACPSCLK_EXTEST_AND | ACPSCLK_TRAIN_PULSE_AND);
   assign ACPULSE_FEEDBACK = ~((JTAG_ACPULSE_S & INSTRUCTION_DECODE_EXTEST_TRAIN));
   assign ACPULSE_D = (ACPULSE_FEEDBACK & TAP_CONTROLLER_RUNIDLE);
   always @(posedge JTAG_NTCK_MUX)
   begin : ACPULSE_DFF
   JTAG_ACPULSE_S <= ACPULSE_D;
   end
   assign JTAG_ACPULSE = JTAG_ACPULSE_S;
   assign JTAG_ACDCSEL = (INSTRUCTION_DECODE_EXTEST_PULSE | INSTRUCTION_DECODE_EXTEST_TRAIN);
   always @(posedge JTAG_NTCK_MUX)
     begin : SELECTDR_RETIMED_DFF
       SELECTDR_STATE_RETIMED <= TAP_CONTROLLER_SELECTDR_STATE ;
     end
   always @(posedge JTAG_TCK_MUX)
     begin : ACPSCLK_TRAIN_PULSE_OR_DFF
       ACPSCLK_TRAIN_PULSE_RETIMED <= ( ACPSCLK_TRAIN_PULSE_OR );
     end
   assign JTAG_ACPSEN = ( ( SELECTDR_STATE_RETIMED & INSTRUCTION_DECODE_EXTEST  & JTAG_TCK) | ( TAP_CONTROLLER_EXIT1_DR_OR_EXIT2_DR & ACPSCLK_TRAIN_PULSE_RETIMED & ~(JTAG_TCK) ) );
   assign JTAG_TDR_BOUNDARY = ( JTAG_INSTRUCTION_DECODE_EXTEST_TRAIN | JTAG_INSTRUCTION_DECODE_EXTEST | JTAG_INSTRUCTION_DECODE_PRELOAD | JTAG_INSTRUCTION_DECODE_EXTEST_PULSE | JTAG_INSTRUCTION_DECODE_SAMPLE );
   assign JTAG_TDR_BYPASS = ( JTAG_INSTRUCTION_DECODE_BYPASS );
   assign JTAG_TDR_CUSTOM_REG_10 = ( JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_10 );
   assign JTAG_TDR_CUSTOM_REG_1 = ( JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_1 );
   assign JTAG_TDR_CUSTOM_REG_9 = ( JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_9 );
   assign JTAG_TDR_CUSTOM_REG_5 = ( JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_5 );
   assign JTAG_TDR_CUSTOM_REG_6 = ( JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_6 );
   assign JTAG_TDR_CUSTOM_REG_2 = ( JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_2 );
   assign JTAG_TDR_CUSTOM_REG_7 = ( JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_7 );
   assign JTAG_TDR_CUSTOM_REG_3 = ( JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_3 );
   assign JTAG_TDR_CUSTOM_REG_8 = ( JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_8 );
   assign JTAG_TDR_CUSTOM_REG_4 = ( JTAG_INSTRUCTION_DECODE_CUSTOM_INSTR_4 );
endmodule
`timescale 1ns/1ps
module udc_pll_cntrl_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
input refclock,
input usb2_calib_clock,
input udc_bc_calib_rstn,
input pll_standalone,
input pll_clkon,
input suspendm,
input sleepm,
input hs_clock_gate_ack,
input pll_clk_gate_ack,
input [7:0] test_pll_reg11,
input [7:0] test_pll_reg12,
input [7:0] test_pll_reg13,
input [7:0] test_pll_reg14,
output o_pll_pso,                        
output o_pll_pso_delay,                  
output o_pll_pd,                         
output o_pll_pd_ana,
output o_pll_standby,                    
output o_pll_ldo_ref_en,
output o_pll_ldo_core_en,
output [5:0] o_pll_ldo_ref_core,
output reg hs_clock_ungate,
output pll_clockout_gate
);
parameter IDLE                 = 3'b000;  
parameter SIECLOCK_CLOSURE     = 3'b001;  
parameter LP_WAIT              = 3'b010;  
parameter PLL_CLOCKOUT_CLOSURE = 3'b011;  
parameter PLL_POWERDOWN        = 3'b100;  
parameter PLL_STANDBY          = 3'b101;  
parameter UNGATE_CLOCKS        = 3'b110;  
parameter PLL_START            = 3'b111;  
wire       w_pll_pso, w_pll_standby, w_pll_pso_delay;
reg        suspendm_first, suspendm_first_d, pll_pso_int, pll_standby_int, suspendm_ref_d, sleepm_ref_d;
wire       suspendm_sleepm_ref, suspendm_ref, sleepm_ref, pos_suspendm_first, pos_suspendm_ref, neg_suspendm_ref, pos_sleepm_ref, sleepm_ref_4d;
reg  [2:0] pll_cntrl_state, pll_cntrl_next_state;
wire       hs_clock_gate_ack_ref;
wire       pll_clockout_gate_ack_ref;
reg        pll_pso_delay, pll_pso_delay_d, pll_pso_standby, pll_ldo_ref_en;
wire [2:0] pll_ldo_cnt_threshold, pll_ldo_iso_cnt_threshold; 
wire       pll_ldo_cnt_reached, neg_pll_pso_standby;
reg        pll_ldo_cnt_en, l1_l3_detectm;
reg  [2:0] pll_ldo_cnt;
wire       test_pll_pso_en, test_pll_pso_delay_en, test_pll_pd_en, test_pll_standby_en, test_pll_pd_ana_en, test_pll_ldo_core_en_en,
           test_pll_ldo_ref_en_en, test_pll_ldo_ref_core_en, test_pll_ldo_cnt_threshold_en, test_pll_ldo_iso_cnt_threshold_en;
reg [1:0]  delay_cnt;
wire       delay_en, delay_cnt_reached;
reg        pll_clockout_gate_clkon;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_test_pll_pso_en_sync (
.clock          (refclock) ,
.reset_n        (udc_bc_calib_rstn) ,
.d_in           (test_pll_reg11[0]) ,
.d_out          (test_pll_pso_en)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_test_pll_pso_delay_en_sync (
.clock          (refclock) ,
.reset_n        (udc_bc_calib_rstn) ,
.d_in           (test_pll_reg11[2]) ,
.d_out          (test_pll_pso_delay_en)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_test_pll_pd_en_sync (
.clock          (refclock) ,
.reset_n        (udc_bc_calib_rstn) ,
.d_in           (test_pll_reg11[4]) ,
.d_out          (test_pll_pd_en)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_test_pll_standby_en_sync (
.clock          (refclock) ,
.reset_n        (udc_bc_calib_rstn) ,
.d_in           (test_pll_reg11[6]) ,
.d_out          (test_pll_standby_en)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_test_pll_pd_ana_en_sync (
.clock          (refclock) ,
.reset_n        (udc_bc_calib_rstn) ,
.d_in           (test_pll_reg12[0]) ,
.d_out          (test_pll_pd_ana_en)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_test_pll_ldo_core_en_en_sync (
.clock          (refclock) ,
.reset_n        (udc_bc_calib_rstn) ,
.d_in           (test_pll_reg12[2]) ,
.d_out          (test_pll_ldo_core_en_en)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_test_pll_ldo_ref_en_en_sync (
.clock          (refclock) ,
.reset_n        (udc_bc_calib_rstn) ,
.d_in           (test_pll_reg12[4]) ,
.d_out          (test_pll_ldo_ref_en_en)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_test_pll_ldo_ref_core_en_sync (
.clock          (refclock) ,
.reset_n        (udc_bc_calib_rstn) ,
.d_in           (test_pll_reg13[0]) ,
.d_out          (test_pll_ldo_ref_core_en)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_test_pll_ldo_iso_cnt_threshold_en_sync (
.clock          (refclock) ,
.reset_n        (udc_bc_calib_rstn) ,
.d_in           (test_pll_reg14[0]) ,
.d_out          (test_pll_ldo_iso_cnt_threshold_en)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_test_pll_ldo_cnt_threshold_en_sync (
.clock          (refclock) ,
.reset_n        (udc_bc_calib_rstn) ,
.d_in           (test_pll_reg14[4]) ,
.d_out          (test_pll_ldo_cnt_threshold_en)
);
assign suspendm_sleepm_ref       = suspendm_ref & sleepm_ref_d ;
assign w_pll_pso                 = pll_standalone                    ? 1'b0 : pll_pso_int;
assign w_pll_standby             = (pll_standalone | pll_clkon)      ? 1'b0 : pll_standby_int;
assign w_pll_pso_delay           = pll_pso_delay | pll_pso_delay_d | w_pll_pso;
assign neg_pll_pso_standby       = ~(w_pll_pso | w_pll_standby) & pll_pso_standby;
assign o_pll_pso                 = test_pll_pso_en                   ? test_pll_reg11[1] : w_pll_pso;
assign o_pll_pso_delay           = test_pll_pso_delay_en             ? test_pll_reg11[3] : w_pll_pso_delay;
assign o_pll_pd                  = test_pll_pd_en                    ? test_pll_reg11[5] : w_pll_pso_delay;
assign o_pll_standby             = test_pll_standby_en               ? test_pll_reg11[7] : w_pll_standby;
assign o_pll_pd_ana              = test_pll_pd_ana_en                ? test_pll_reg12[1] : (w_pll_pso_delay | w_pll_standby);
assign o_pll_ldo_core_en         = test_pll_ldo_core_en_en           ? test_pll_reg12[3] : ~(w_pll_pso | w_pll_standby);
assign o_pll_ldo_ref_en          = test_pll_ldo_ref_en_en            ? test_pll_reg12[5] : pll_ldo_ref_en;
assign o_pll_ldo_ref_core        = test_pll_ldo_ref_core_en          ? test_pll_reg13[6:1] : 6'd0;
assign pll_ldo_iso_cnt_threshold = test_pll_ldo_iso_cnt_threshold_en ? test_pll_reg14[3:1] : 3'd5;
assign pll_ldo_cnt_threshold     = test_pll_ldo_cnt_threshold_en     ? test_pll_reg14[7:5] : 3'd1;
assign pll_ldo_cnt_reached       = pll_ldo_cnt >= pll_ldo_cnt_threshold;
assign pll_ldo_iso_cnt_reached   = pll_ldo_cnt == pll_ldo_iso_cnt_threshold;
assign pll_clockout_gate         = pll_standalone ? 1'b0 : (pll_clkon ? pll_clockout_gate_clkon : 1'b1);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b1)) c_suspendm_sync (
.clock          (refclock) ,
.reset_n        (udc_bc_calib_rstn) ,
.d_in           (suspendm) ,
.d_out          (suspendm_ref)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b1)) c_sleepm_sync (
.clock          (refclock) ,
.reset_n        (udc_bc_calib_rstn) ,
.d_in           (sleepm) ,
.d_out          (sleepm_ref)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b1)) c_hs_clock_gate_ack_sync (
.clock          (refclock) ,
.reset_n        (udc_bc_calib_rstn) ,
.d_in           (hs_clock_gate_ack) ,
.d_out          (hs_clock_gate_ack_ref)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b1)) c_pll_clk_gate_ack_sync (
.clock          (refclock) ,
.reset_n        (udc_bc_calib_rstn) ,
.d_in           (pll_clk_gate_ack) ,
.d_out          (pll_clockout_gate_ack_ref)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_tm_pll_clkon_sync (
.clock          (refclock),
.reset_n        (udc_bc_calib_rstn),
.d_in           (test_pll_reg13[7]),
.d_out          (tm_pll_clkon)
);
always @(posedge refclock or negedge udc_bc_calib_rstn)
begin
        if(~udc_bc_calib_rstn)
                suspendm_first <= 1'b 0 ;
        else if (suspendm_ref)
                suspendm_first <= 1'b 1 ;
end
always @(posedge refclock or negedge udc_bc_calib_rstn)
begin
        if(~udc_bc_calib_rstn)
                l1_l3_detectm <= 1'b 0 ;
        else if (pll_cntrl_state == IDLE)
                l1_l3_detectm <= 1'b 0 ;
        else if (neg_suspendm_ref & ~sleepm_ref_4d)
                l1_l3_detectm <= 1'b 1 ;
end
always @(posedge refclock or negedge udc_bc_calib_rstn)
begin
        if(~udc_bc_calib_rstn)
            begin
                suspendm_first_d <= 1'b 0 ;
                suspendm_ref_d   <= 1'b 0 ;
                sleepm_ref_d     <= 1'b 1 ;
            end
        else 
            begin
                suspendm_first_d <= suspendm_first ;
                suspendm_ref_d   <= suspendm_ref ;
                sleepm_ref_d     <= sleepm_ref ;
            end
end
assign pos_suspendm_first        = ~suspendm_first_d & suspendm_first;
assign pos_suspendm_ref          = ~suspendm_ref_d   & suspendm_ref;
assign neg_suspendm_ref          = suspendm_ref_d   & ~suspendm_ref;
assign pos_sleepm_ref            = ~sleepm_ref_d   & sleepm_ref;
data_delay_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_FLOPS(4)) sleepm_4d(
.clock          (refclock),
.reset_n        (udc_bc_calib_rstn),
.delay_en       (4'hF),
.delay_half_en  (1'b0),
.d_in           (sleepm_ref_d),
.d_out          (sleepm_ref_4d)
);
always @(posedge refclock or negedge udc_bc_calib_rstn)
      if (~udc_bc_calib_rstn)
         begin
            pll_pso_int <= 1'b1;
            pll_standby_int <= 1'b0;
         end
      else
         begin
            if (pll_cntrl_state == PLL_START) 
                 begin
                     pll_pso_int <= 1'b0;
                     pll_standby_int <= 1'b0;
                 end
            else 
                 begin
                     if (pll_cntrl_state == PLL_POWERDOWN)
                        begin
                          pll_pso_int     <= 1'b1;
                          pll_standby_int <= 1'b0;
                        end
                     if (pll_cntrl_state == PLL_STANDBY)
                          pll_standby_int <= 1'b1;
                 end
         end
always @(posedge usb2_calib_clock or negedge udc_bc_calib_rstn)
      if (~udc_bc_calib_rstn)
          begin
            pll_pso_delay   <= 1'b1;
            pll_pso_delay_d <= 1'b1;
            pll_pso_standby <= 1'b1;
          end
      else
          begin
            pll_pso_delay   <= w_pll_pso;
            pll_pso_delay_d <= pll_pso_delay;
            pll_pso_standby <= (w_pll_pso | w_pll_standby);
          end
always @(posedge refclock or negedge udc_bc_calib_rstn)
      if (~udc_bc_calib_rstn)
            pll_ldo_ref_en  <= 1'b0;
      else if (pll_ldo_cnt_reached)
            pll_ldo_ref_en  <= 1'b1;
      else if (w_pll_pso | w_pll_standby)
            pll_ldo_ref_en  <= 1'b0;
always @(posedge usb2_calib_clock or negedge udc_bc_calib_rstn)
      if (~udc_bc_calib_rstn)
            pll_ldo_cnt   <= 3'b000;
      else if (pll_ldo_iso_cnt_reached & pll_ldo_cnt_reached)
            pll_ldo_cnt   <= 3'b000;
      else if (pll_ldo_cnt_en)
            pll_ldo_cnt   <= pll_ldo_cnt + 3'b001;
always @(posedge usb2_calib_clock or negedge udc_bc_calib_rstn)
      if (~udc_bc_calib_rstn)
            pll_ldo_cnt_en   <= 1'b0;
      else if (pll_ldo_iso_cnt_reached & pll_ldo_cnt_reached)
            pll_ldo_cnt_en   <= 1'b0;
      else if (neg_pll_pso_standby)
            pll_ldo_cnt_en   <= 1'b1;
always @*
begin
      pll_clockout_gate_clkon = 1'b0;
      hs_clock_ungate         = 1'b0;
      case (pll_cntrl_state)
            IDLE : 
            begin 
                   if (pos_suspendm_first)
                       pll_cntrl_next_state = PLL_START;
                   else if (~suspendm_sleepm_ref)
                       pll_cntrl_next_state = SIECLOCK_CLOSURE;
                   else
                       pll_cntrl_next_state = IDLE;
            end
            SIECLOCK_CLOSURE : 
            begin 
                   if (~suspendm_sleepm_ref & pll_clkon)
                       pll_cntrl_next_state = LP_WAIT;
                   else if (~pll_clkon & ~suspendm_ref & ~hs_clock_gate_ack_ref)
                       pll_cntrl_next_state = PLL_POWERDOWN;
                   else if (~pll_clkon & ~sleepm_ref & ~hs_clock_gate_ack_ref)
                       pll_cntrl_next_state = PLL_STANDBY;
                   else 
                       pll_cntrl_next_state = SIECLOCK_CLOSURE;
            end
            LP_WAIT : 
            begin 
                   if ((pos_suspendm_ref & tm_pll_clkon) | pos_sleepm_ref)
                       pll_cntrl_next_state = UNGATE_CLOCKS;
                   else if (pos_suspendm_ref & ~tm_pll_clkon)
                       pll_cntrl_next_state = PLL_CLOCKOUT_CLOSURE;
                   else 
                       pll_cntrl_next_state = LP_WAIT;
            end
            PLL_CLOCKOUT_CLOSURE : 
            begin 
                   pll_clockout_gate_clkon = 1'b1;
                   if (~pll_clockout_gate_ack_ref)
                       pll_cntrl_next_state = PLL_POWERDOWN;
                   else 
                       pll_cntrl_next_state = PLL_CLOCKOUT_CLOSURE;
            end
            PLL_POWERDOWN : 
            begin 
                   if (pll_clkon & ~delay_cnt_reached)
                       pll_cntrl_next_state = PLL_POWERDOWN;
                   else 
                       pll_cntrl_next_state = UNGATE_CLOCKS;
            end
            PLL_STANDBY : 
            begin 
                       pll_cntrl_next_state = UNGATE_CLOCKS;
            end
            UNGATE_CLOCKS : 
            begin 
                   hs_clock_ungate  = 1'b1;
                   if (tm_pll_clkon & ~suspendm_ref & pll_clkon & l1_l3_detectm)
                       pll_cntrl_next_state = LP_WAIT;
                   else if ((tm_pll_clkon | ~sleepm_ref_4d) & pll_clkon)
                       pll_cntrl_next_state = IDLE;
                   else if (~suspendm_sleepm_ref & l1_l3_detectm) 
                       pll_cntrl_next_state = PLL_POWERDOWN;
                   else if (suspendm_sleepm_ref) 
                       pll_cntrl_next_state = PLL_START;
                   else
                       pll_cntrl_next_state = UNGATE_CLOCKS;
            end
            PLL_START : 
            begin 
                       pll_cntrl_next_state = IDLE;
            end
            default : 
            begin 
                       pll_cntrl_next_state = IDLE;
            end
      endcase
end
always @(posedge refclock or negedge udc_bc_calib_rstn)
      if (~udc_bc_calib_rstn)
           pll_cntrl_state <= IDLE;
      else
           pll_cntrl_state <= pll_cntrl_next_state;
assign delay_en = pll_clkon ? (pll_cntrl_state==PLL_POWERDOWN) : 1'b0;
assign delay_cnt_reached = (delay_cnt==2'b10);
always @(posedge usb2_calib_clock or negedge udc_bc_calib_rstn)
      if (~udc_bc_calib_rstn)
           delay_cnt <= 2'b00;
      else if(delay_en)
           delay_cnt <= delay_cnt + 2'b01;
      else 
           delay_cnt <= 2'b00;
endmodule
module usb2_pll_tx_pll_wait_time_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
			 i_FBDIV,
			 o_INIT_WAIT_CYCLES ,
			 o_VCO_SETTLE_CYCLES,
			 o_CONFIG_CHANGE_CYCLES,
			 o_LDO_REF_EN_CYCLES,
			 o_RST_FDBK_DIV_CYCLES
			 );
   parameter p_fbdiv_len = 8;
   parameter p_num_init_wait_bits = 8;
   parameter p_num_vco_settle_bits = 6;
   parameter p_num_cfg_change_bits = 5;
   parameter p_num_ldo_ref_en_bits = 3;
   parameter p_num_rst_fdbk_div_bits = 5;
   input  [p_fbdiv_len -1 : 0] i_FBDIV;
   output [p_num_init_wait_bits - 1 : 0] o_INIT_WAIT_CYCLES;
   output [p_num_vco_settle_bits -1 : 0] o_VCO_SETTLE_CYCLES;
   output [p_num_cfg_change_bits -1 : 0] o_CONFIG_CHANGE_CYCLES;
   output [p_num_ldo_ref_en_bits -1 : 0] o_LDO_REF_EN_CYCLES;
   output [p_num_rst_fdbk_div_bits -1 : 0] o_RST_FDBK_DIV_CYCLES;
   reg [p_num_init_wait_bits - 1 : 0] 	 o_INIT_WAIT_CYCLES;
   reg [p_num_vco_settle_bits -1 : 0] 	 o_VCO_SETTLE_CYCLES;
   reg [p_num_cfg_change_bits -1 : 0] 	 o_CONFIG_CHANGE_CYCLES;
   reg [p_num_ldo_ref_en_bits -1 : 0]    o_LDO_REF_EN_CYCLES;
   reg [p_num_rst_fdbk_div_bits -1 : 0]  o_RST_FDBK_DIV_CYCLES;
   always @(*)
       if (i_FBDIV <= 8'd96 )
	 begin
	    o_INIT_WAIT_CYCLES = 42;
	    o_VCO_SETTLE_CYCLES = 8;
	    o_CONFIG_CHANGE_CYCLES = 13;
	    o_LDO_REF_EN_CYCLES = 5;
	    o_RST_FDBK_DIV_CYCLES = 31;
	 end
       else if (i_FBDIV <= 8'd100)
	 begin
	    o_INIT_WAIT_CYCLES = 40;
	    o_VCO_SETTLE_CYCLES = 8;
	    o_CONFIG_CHANGE_CYCLES = 10;
	    o_LDO_REF_EN_CYCLES = 5;
	    o_RST_FDBK_DIV_CYCLES = 31;
	 end
       else if (i_FBDIV <= 8'd120)
	 begin
	    o_INIT_WAIT_CYCLES = 33;
	    o_VCO_SETTLE_CYCLES = 6;
	    o_CONFIG_CHANGE_CYCLES = 10;
	    o_LDO_REF_EN_CYCLES = 4;
	    o_RST_FDBK_DIV_CYCLES = 25;
	 end
       else if (i_FBDIV <= 8'd240)
	 begin
	    o_INIT_WAIT_CYCLES = 15;
	    o_VCO_SETTLE_CYCLES = 3;
	    o_CONFIG_CHANGE_CYCLES = 5;
	    o_LDO_REF_EN_CYCLES = 2;
	    o_RST_FDBK_DIV_CYCLES = 13;
	 end
       else 
	 begin
	    o_INIT_WAIT_CYCLES = 42;
	    o_VCO_SETTLE_CYCLES = 8;
	    o_CONFIG_CHANGE_CYCLES = 10;
	    o_LDO_REF_EN_CYCLES = 5;
	    o_RST_FDBK_DIV_CYCLES = 31;
	 end
endmodule 
module linestate_checker_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
input        apb_pclk,
input        apb_presetn,
input [1:0]  internal_opmode,
input        squelch,
input        hsdrv_en,
input        rxdm,
input        rxdp,
input        hsrx_diff_data,
input [1:0]  linestate,
input        fmeda_linestate_se0,
input        threshold_ovr_en,
input [9:0]  threshold_ovr_value,
output wire  interrupt
);
reg  [9:0]   count;
reg          interrupt_level, interrupt_level_d, interrupt_level_2d;
reg  [1:0]   linestate_internal;
wire [9:0]   count_threshold;
wire         count_threshold_reached;
wire         interrupt_active;
wire         interrupt_active_sync;
wire [1:0]   linestate_check;
assign linestate_check         = fmeda_linestate_se0 ? 2'b00 : linestate_internal;
assign interrupt_active        = linestate != linestate_check;
assign count_threshold         = threshold_ovr_en ? threshold_ovr_value : 10'b10_0000_0000;  
assign count_threshold_reached = (count == count_threshold);
always @*
begin
        case(internal_opmode)
        2'b00: linestate_internal = hsdrv_en ? 2'b01 : (squelch ? 2'b00 : 2'b01);
        2'b01: linestate_internal = {rxdm, rxdp};
        2'b10: linestate_internal = {rxdm, rxdp};
        2'b11: linestate_internal = squelch ? 2'b00 : (hsrx_diff_data ? 2'b01 : 2'b10);
        endcase
end
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r c_interrupt_active_sync (
.clock          (apb_pclk),
.reset_n        (apb_presetn),
.d_in           (interrupt_active),
.d_out          (interrupt_active_sync)
);
always @(posedge apb_pclk or negedge apb_presetn)
    begin
        if (!apb_presetn)
            begin
                count              <= 10'd0;
                interrupt_level    <= 1'b0;
            end
        else
            begin
                if (count_threshold_reached & interrupt_active_sync)
                    begin
                        count              <= count_threshold;
                        interrupt_level    <= 1'b1;
                    end
                else if (interrupt_active_sync)
                    begin
                        count              <= count + 10'd1;
                        interrupt_level    <= 1'b0;
                    end
                else
                    begin
                        count              <= 10'd0;
                        interrupt_level    <= 1'b0;
                    end
            end
end
always @(posedge apb_pclk or negedge apb_presetn)
    begin
        if (!apb_presetn)
            begin
                interrupt_level_d  <= 1'b0;
                interrupt_level_2d <= 1'b0;
            end
        else
            begin
                interrupt_level_d  <= interrupt_level;
                interrupt_level_2d <= interrupt_level_d;
            end
end
assign interrupt = interrupt_level & ~interrupt_level_2d;
endmodule
module udc_primary_counter_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
clk,
rst,
data_out,
data_out_bar
);
input clk, rst ;
output data_out, data_out_bar ;
reg data_out_reg ;
always @(posedge clk or negedge rst)
begin
	if(~rst)
	data_out_reg	<= 1'b 0 ;
	else	
	data_out_reg	<= ~data_out_reg ;
end
assign data_out = data_out_reg ;
assign data_out_bar = ~data_out_reg ;
endmodule
module usb2_spare_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r(
i_pclk,
i_pll_div_refclk,
i_pll_480p0_clk,
i_afe_hsrx_rec_clk,
i_usb2_calib_clock,
i_udc_refclock,
i_sieclock,
i_byte_clock,
i_hs_clock,
i_presetn,
i_pll_pd,
i_pll_calib_rstn_int,
i_udc_calib_rstn,
i_primary_count_rstn,
i_udc_rstn_cdr_async,
i_rstn_calib_clkdiv,
i_rstn_clkdiv,
i_rstn_sieclock,
i_rstn_byte_clock,
i_rstn_refclock ,
i_rstn_hs_clock,
i_xcvr_sie_rstn,
i_usb2_calib_rstn
);
   parameter p_APB_CLK_REG_CNT	 	= 16'd5;
   parameter p_SCAN_CLOCK_REG_CNT	= 16'd870;
   parameter p_REF_CLK_REG_CNT	 	= 16'd117;
   parameter p_PLL_DIV_CLK_REG_CNT      = 16'd68;
   parameter p_480_TX_CLK_REG_CNT   	= 16'd31;
   parameter p_480_RX_CLK_REG_CNT    	= 16'd31;
   parameter p_REC_CLK_REG_CNT    	= 16'd351;
   parameter p_TXCLK_240_REG_CNT  	= 16'd1586;
   parameter p_USB_CALIB_CLK_RST_CNT  	= 16'd2;
   parameter p_UDC_CALIB_CLK_REG_CNT  	= 16'd104;
   parameter p_UDC_CALIB_CLK_DIV_REG_CNT= 16'd572;
   parameter p_SIECLOCK_REG_CNT  	= 16'd702;
   parameter p_BYTE_CLOCK_REG_CNT  	= 16'd572;
   parameter p_HS_CLOCK_REG_CNT  	= 16'd702;
   parameter p_HS_TX_CLOCK_REG_CNT  	= 16'd702;
   parameter p_PLL_EXT_CLK_REG_CNT  	= 16'd702;
   parameter p_UDC_CALIB_CLK_RST_CNT    = 16'd20;
   parameter p_PRIMARY_COUNT_RST_CNT    = 16'd10;
input	i_pclk;
input	i_pll_div_refclk;
input	i_pll_480p0_clk;
input	i_afe_hsrx_rec_clk;
input	i_usb2_calib_clock;
input	i_udc_refclock;
input	i_sieclock;
input	i_byte_clock;
input	i_hs_clock;
input	i_presetn;
input	i_pll_pd;
input	i_pll_calib_rstn_int;
input	i_udc_calib_rstn;
input	i_primary_count_rstn;
input	i_udc_rstn_cdr_async;
input	i_rstn_calib_clkdiv;
input	i_rstn_clkdiv;
input	i_rstn_sieclock;
input	i_rstn_byte_clock;
input	i_rstn_refclock ;
input	i_rstn_hs_clock;
input	i_xcvr_sie_rstn;
input	i_usb2_calib_rstn;
   usb2_spare_wrap_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r C_apb_clk_spare[(p_APB_CLK_REG_CNT/100) + 1 : 0] (.clk (i_pclk), .rst_n (i_presetn));
   usb2_spare_wrap_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r C_refclock_spare[(p_REF_CLK_REG_CNT/100) + 1 : 0] (.clk (i_udc_refclock), .rst_n (i_rstn_refclock));
   usb2_spare_wrap_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r C_refclock_pll_spare[(p_REF_CLK_REG_CNT/100) + 1 : 0] (.clk (i_udc_refclock), .rst_n (i_pll_calib_rstn_int));
   usb2_spare_wrap_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r C_refclock_clkdiv_spare[(p_REF_CLK_REG_CNT/100) + 1 : 0] (.clk (i_udc_refclock), .rst_n (i_rstn_calib_clkdiv));
   usb2_spare_wrap_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r C_refclk_div_spare[(p_PLL_DIV_CLK_REG_CNT/100) + 1 : 0] (.clk (i_pll_div_refclk), .rst_n (~i_pll_pd));
   usb2_spare_wrap_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r C_480_rx_spare[(p_480_RX_CLK_REG_CNT/100) + 1 : 0] (.clk (i_pll_480p0_clk), .rst_n (i_xcvr_sie_rstn));
   usb2_spare_wrap_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r C_480_tx_spare[(p_480_TX_CLK_REG_CNT/100) + 1 : 0] (.clk (i_pll_480p0_clk), .rst_n (i_xcvr_sie_rstn));
   usb2_spare_wrap_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r C_rec_clk_spare[(p_REC_CLK_REG_CNT/100) + 1 : 0] (.clk (i_afe_hsrx_rec_clk), .rst_n (i_udc_rstn_cdr_async));
   usb2_spare_wrap_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r C_usb2_calib_clk_rescalib_rstn_spare[(p_USB_CALIB_CLK_RST_CNT/100) + 1 : 0] (.clk (i_usb2_calib_clock), .rst_n (i_usb2_calib_rstn));
   usb2_spare_wrap_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r C_sieclock_spare[(p_SIECLOCK_REG_CNT/100) + 1 : 0] (.clk (i_sieclock), .rst_n (i_rstn_sieclock));
   usb2_spare_wrap_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r C_sieclock_xcvr_spare[(p_SIECLOCK_REG_CNT/100) + 1 : 0] (.clk (i_sieclock), .rst_n (i_xcvr_sie_rstn));
  usb2_spare_wrap_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r C_byte_clk_spare[(p_BYTE_CLOCK_REG_CNT/100) + 1 : 0] (.clk (i_byte_clock), .rst_n (i_rstn_byte_clock));
  usb2_spare_wrap_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r C_hs_clock_spare[(p_HS_CLOCK_REG_CNT/100) + 1 : 0] (.clk (i_hs_clock), .rst_n (i_rstn_hs_clock));
  usb2_spare_wrap_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r C_hs_clock_clkdiv_spare[(p_HS_CLOCK_REG_CNT/100) + 1 : 0] (.clk (i_hs_clock), .rst_n (i_rstn_clkdiv));
  usb2_spare_wrap_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r C_hs_tx_clock_spare[(p_HS_TX_CLOCK_REG_CNT/100) + 1 : 0] (.clk (i_hs_clock), .rst_n (i_rstn_hs_clock));
   usb2_spare_wrap_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r C_udc_calib_clk_spare[(p_UDC_CALIB_CLK_RST_CNT/100) + 1 : 0] (.clk (i_usb2_calib_clock), .rst_n (i_udc_calib_rstn));
   usb2_spare_wrap_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r C_primary_count_spare[(p_PRIMARY_COUNT_RST_CNT/100) + 1 : 0] (.clk (i_usb2_calib_clock), .rst_n (i_primary_count_rstn));
endmodule
module phy_data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r 
#( 
   parameter
      RESET_VALUE = 1'b0,
      NUM_FLOPS = 2
)(   
   input  clock,       
   input  reset_n,     
   input  d_in,        
   output d_out        
);
   reg [NUM_FLOPS-1:0] data_sync_flop;
   always @(posedge clock or negedge reset_n) 
   begin
      if (!reset_n) 
         data_sync_flop <= {NUM_FLOPS{RESET_VALUE}};
      else 
         data_sync_flop <= {data_sync_flop[NUM_FLOPS-2:0], d_in};
   end
   assign d_out = data_sync_flop[NUM_FLOPS-1];
endmodule
`timescale 1ns/1ps
module udc_rx_bitunstuff_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r ( 
hs_clock,		 
rstn_hs_clock,		 
bitunstuff_soft_reset,	 
bitunstuff_en,		 
hs_mode,		 
rxactive_off,		 
sync_detected,		 
eop_detected,		 
rx_nrzi_dec_data,	 
rx_data_valid,		 
posedge_eop_detected,	 
bitunstuff_flag,	 
bitunstuff_error,	 
bitunstuff_data,	 
bitunstuff_data_valid,	 
debug_bus_state
);
parameter BUS_IDLE	= 3'b 000 ;
parameter BUS_1ST_1	= 3'b 001 ;
parameter BUS_2ND_1	= 3'b 010 ;
parameter BUS_3RD_1	= 3'b 011 ;
parameter BUS_4TH_1	= 3'b 100 ;
parameter BUS_5TH_1	= 3'b 101 ;
parameter BUS_6TH_1	= 3'b 110 ;
parameter BUS_UNSTUFF	= 3'b 111 ;
input	hs_clock, rstn_hs_clock ;
input	bitunstuff_soft_reset, bitunstuff_en, rxactive_off, sync_detected, 
	eop_detected, rx_nrzi_dec_data, rx_data_valid, hs_mode ;
output	bitunstuff_flag, bitunstuff_error, bitunstuff_data, bitunstuff_data_valid, posedge_eop_detected ;
output	wire	[2:0] debug_bus_state ;
reg		error_detected, sync_detected_d, eop_detected_d, eop_detected_2d, eop_detected_3d ;
reg	[2:0]	bus_state, bus_next_state ;
wire	 	one_detected, error_detected_flag, bitunstuff_error, bitunstuff_data, posedge_eop_detected,  
		bitunstuff_data_valid, bitunstuff_start, bitunstuff_flag, posedge_sync_detected;
assign debug_bus_state = bus_state ;
assign bitunstuff_data		= rx_nrzi_dec_data ;
assign bitunstuff_data_valid	= (rx_data_valid & ((bus_state != BUS_IDLE & bus_state != BUS_UNSTUFF) | error_detected_flag)) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		bus_state <= BUS_IDLE ;
	else if(bitunstuff_soft_reset | (hs_mode & posedge_eop_detected) | (~hs_mode & rxactive_off) | ~bitunstuff_en)
		bus_state <= BUS_IDLE ;
	else
		bus_state <= bus_next_state ;
end
assign one_detected = (rx_data_valid & rx_nrzi_dec_data) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
	begin
		sync_detected_d <= 1'b 0 ;
		eop_detected_d	<= 1'b 0 ;
		eop_detected_2d	<= 1'b 0 ;
		eop_detected_3d	<= 1'b 0 ;
	end
	else 
	begin
		sync_detected_d <= sync_detected ;
		eop_detected_d	<= eop_detected ;
		eop_detected_2d	<= eop_detected_d ;
		eop_detected_3d	<= eop_detected_2d ;
	end
end
assign posedge_sync_detected = (sync_detected & ~sync_detected_d) ;
assign posedge_eop_detected  = (eop_detected_2d & ~eop_detected_3d) ;
assign bitunstuff_start = (bitunstuff_en & posedge_sync_detected & ~error_detected) ;
always @*
begin
	case(bus_state)
	BUS_IDLE:
	begin
		if(bitunstuff_start)
			bus_next_state = BUS_2ND_1 ;
		else
			bus_next_state = BUS_IDLE ;
	end
	BUS_2ND_1:
	begin
		if(hs_mode)
		begin
			if(one_detected)
				bus_next_state = BUS_3RD_1 ;
			else
				bus_next_state = BUS_1ST_1 ;
		end
		else
		begin
			if(rx_data_valid)
				bus_next_state = rx_nrzi_dec_data ? BUS_3RD_1 : BUS_1ST_1 ;
			else
				bus_next_state = BUS_2ND_1 ;
		end
	end
	BUS_3RD_1:
	begin
		if(hs_mode)
		begin
			if(one_detected)
				bus_next_state = BUS_4TH_1 ;
			else
				bus_next_state = BUS_1ST_1 ;
		end
		else
		begin
			if(rx_data_valid)
				bus_next_state = rx_nrzi_dec_data ? BUS_4TH_1 : BUS_1ST_1 ;
			else
				bus_next_state = BUS_3RD_1 ;
		end
	end
	BUS_4TH_1:
	begin
		if(hs_mode)
		begin
			if(one_detected)
				bus_next_state = BUS_5TH_1 ;
			else
				bus_next_state = BUS_1ST_1 ;
		end
		else
		begin
			if(rx_data_valid)
				bus_next_state = rx_nrzi_dec_data ? BUS_5TH_1 : BUS_1ST_1 ;
			else
				bus_next_state = BUS_4TH_1 ;
		end
	end
	BUS_5TH_1:
	begin
		if(hs_mode)
		begin
			if(one_detected)
				bus_next_state = BUS_6TH_1 ;
			else
				bus_next_state = BUS_1ST_1 ;
		end
		else
		begin
			if(rx_data_valid)
				bus_next_state = rx_nrzi_dec_data ? BUS_6TH_1 : BUS_1ST_1 ;
			else
				bus_next_state = BUS_5TH_1 ;
		end
	end
	BUS_6TH_1:
	begin
		if(hs_mode)
		begin
			if(one_detected)
				bus_next_state = BUS_UNSTUFF ;
			else
				bus_next_state = BUS_1ST_1 ;
		end
		else
		begin
			if(rx_data_valid)
				bus_next_state = rx_nrzi_dec_data ? BUS_UNSTUFF : BUS_1ST_1 ;
			else
				bus_next_state = BUS_6TH_1 ;
		end
	end
	BUS_UNSTUFF:
	begin
		if(hs_mode)
		begin
			if(one_detected)
				bus_next_state = BUS_IDLE ;
			else
				bus_next_state = BUS_1ST_1 ;
		end
		else
		begin
			if(rx_data_valid)
				bus_next_state = rx_nrzi_dec_data ? BUS_1ST_1 : BUS_1ST_1 ;
			else
				bus_next_state = BUS_UNSTUFF ;
		end
	end
	BUS_1ST_1:
	begin
		if(hs_mode)
		begin
			if(one_detected)
				bus_next_state = BUS_2ND_1 ;
			else
				bus_next_state = BUS_1ST_1 ;
		end
		else
		begin
			if(rx_data_valid)
				bus_next_state = rx_nrzi_dec_data ? BUS_2ND_1 : BUS_1ST_1 ;
			else
				bus_next_state = BUS_1ST_1 ;
		end
	end
	default:	bus_next_state = BUS_IDLE ;
	endcase
end
assign bitunstuff_flag = (bus_state == BUS_UNSTUFF & ~one_detected) ;
assign error_detected_flag = (bus_state == BUS_UNSTUFF & one_detected) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		error_detected <= 1'b 0 ;
	else if(bitunstuff_soft_reset | (hs_mode & posedge_eop_detected) | (~hs_mode & rxactive_off) | ~bitunstuff_en)
		error_detected <= 1'b 0 ;
	else if(error_detected_flag)
		error_detected <= 1'b 1 ;
end
assign bitunstuff_error = (error_detected_flag | error_detected) ;
reg	[8*16:0] ascii_state ;
always @*
begin
	case(bus_state)
	BUS_IDLE	: ascii_state = "BUS_IDLE" ;
	BUS_1ST_1	: ascii_state = "BUS_1ST_1" ;
	BUS_2ND_1	: ascii_state = "BUS_2ND_1" ;
	BUS_3RD_1	: ascii_state = "BUS_3RD_1" ;
	BUS_4TH_1	: ascii_state = "BUS_4TH_1" ;
	BUS_5TH_1	: ascii_state = "BUS_5TH_1" ;
	BUS_6TH_1	: ascii_state = "BUS_6TH_1" ;
	BUS_UNSTUFF	: ascii_state = "BUS_UNSTUFF" ;
	default		: ascii_state = "****UNKNOWN****" ;
	endcase
end
endmodule
module usb2_spare_wrap_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r
  (
    clk, rst_n
   );
   input clk;
   input rst_n;
endmodule
module phy_reset_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r 
#( 
   parameter
      NUM_FLOPS = 2
)(   
   input  sync_clock_in,         
   input  reset_in_n,            
   output reset_out_n,           
   input  upstream_reset_in_n,   
   input  scan_mode_en_in,       
   input  scan_reset_in_n        
);
   wire   reset_n_synced;
   reg [NUM_FLOPS-1:0] reset_sync_flop;
phy_scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r u_phy_scan_mux_reset_in_n(
   .scan_mode_en_in (scan_mode_en_in),
   .scan_signal_in  (scan_reset_in_n), 
   .fcn_signal_in   (reset_in_n),  
   .fcn_signal_out  (scan_reset_out_n) 
);
generate
   if (NUM_FLOPS == 0)
   begin : NO_SYNC_FLOPS
   assign reset_n_synced = scan_reset_out_n;
   end
   else
   begin : WITH_SYNC_FLOPS
   always @(posedge sync_clock_in or negedge scan_reset_out_n) 
   begin
      if (!scan_reset_out_n) 
         reset_sync_flop <= {NUM_FLOPS{1'b0}};
      else 
         reset_sync_flop <= {reset_sync_flop[NUM_FLOPS-2:0], upstream_reset_in_n};
   end
   assign reset_n_synced = reset_sync_flop[NUM_FLOPS-1];
   end
endgenerate
phy_scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r u_phy_scan_mux_reset_n_out(
   .scan_mode_en_in (scan_mode_en_in),
   .scan_signal_in  (scan_reset_in_n), 
   .fcn_signal_in   (reset_n_synced),  
   .fcn_signal_out  (reset_out_n) 
);
endmodule
`timescale 1ns/1ps
module udc_rx_cntrl_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r ( 
hs_clock,		 
rstn_hs_clock,		 
sieclock,		 
rstn_sieclock,		 
test_hs_rx_err_reg,
rx_cntrl_soft_reset,	 
hs_mode,		 
fslsserialmode_sync,	 
databus,		 
squelch,		 
negedge_squelch,	 
sync_detected,		 
eop_detected,		 
no_eop_detected,	 
bitunstuff_flag,	 
bitunstuff_error,	 
cdr_error,		 
byte_value,		 
byte_valid,		 
error_byte_valid,	 
bit_count,		 
lsfs_dll_se0,		 
i_bist_on,
rxerror_ack,
lsfs_dll_en,		 
alignment_error,	 
rxactive_off,		 
hs_rxactive_off,	 
rxactive,		 
rxactive_reg,		 
rxvalid,		 
rxvalidh,		 
rxerror,		 
dataout,			 
debug_phy_cnt,
debug_sie_cnt,
debug_start_flag,
debug_deassert_rxactive_reg
);
input	hs_clock, rstn_hs_clock, sieclock, rstn_sieclock ;
input	rx_cntrl_soft_reset, hs_mode, databus, squelch, sync_detected, eop_detected, no_eop_detected, bitunstuff_error, 
	cdr_error, bitunstuff_flag, byte_valid, error_byte_valid, negedge_squelch, fslsserialmode_sync, test_hs_rx_err_reg,
	lsfs_dll_se0, i_bist_on ;
input	[2:0] 	bit_count ;
input	[7:0]	byte_value ;
output		alignment_error, rxactive_off, hs_rxactive_off, rxactive, rxactive_reg, rxvalid, rxvalidh, rxerror_ack,
		rxerror, lsfs_dll_en ;
output	[15:0]	dataout ;
output wire	[11:0]	debug_phy_cnt ;
output wire	[11:0]	debug_sie_cnt ;
output wire		debug_start_flag ;
output wire		debug_deassert_rxactive_reg ;
reg		deassert_rxvalid_d,hold_reg1_valid, hold_reg1_validh, deassert_rxvalid, hold_reg2_valid, 
		hold_reg2_validh, rxactive, start_flag_d, eop_d, rxvalid_loc, rxvalidh_loc, rxerror_loc, byte_toggle, 
		word_toggle, alignment_error, rxactive_delay, bitunstuff_error_d, eop_identify_d, eop_detected_d, 
		eop_detected_2d, squelch_d, sync_detected_d, rxerror_reg, hold_reg3_valid, hold_reg3_validh, 
		hr3_toggle, rxactive_d, hold_reg4_valid, hold_reg4_validh, deassert_rxactive_reg, rxactive_reg,
		lsfs_rxerror, rxerror_ack_loc ;
reg	[1:0]	byte_cnt, output_toggle ;
reg	[3:0]	bit_unstuffcount ;
reg	[11:0]	phy_cnt, sie_cnt ;
reg	[15:0]	hold_reg1, hold_reg2, hold_reg3, hold_reg4, dataout ;
wire		rxactive_off, bit_unstuffcount_reached, deassert_rxvalid_loc, deassert_rxvalid_rst, rxerror_ack,
      		start_8b, start_16b, short_packet, start_flag_condition, hs_eop, lsfs_eop, 
		eop_identify, eop, error_detected, hr1_valid_16b, hr1_validh_16b, hr1_valid_8b, hr2_valid_16b,
		hr2_validh_16b, hr2_valid_8b, lsfs_dll_en, assert_rxactive, rxvalid_rst, rxerror_detected,
		posedge_bitunstuff_error, deassert_rxactive, hs_rx_end, hold_reg2_rst,
		output_toggle_en, rx_finished, start_flag, posedge_eop_identify, hr3_valid_16b, hr3_validh_16b, 
		hr4_valid_16b, hr4_validh_16b, hs_rx_finished, alignment_error_en, hs_rxactive_off, deassert_rxactive_loc,
		rxvalid, rxvalidh, rxerror  ;
wire	[3:0]	bit_unstuff_terminal_count ;
assign debug_phy_cnt = phy_cnt ;
assign debug_sie_cnt = sie_cnt ;
assign debug_start_flag = start_flag ;
assign debug_deassert_rxactive_reg = deassert_rxactive_reg ;
assign rxvalid  = rxactive ? (hs_mode ? (rxvalid_loc | rxerror) : rxvalid_loc) : 1'b 0 ;
assign rxvalidh = rxactive ? rxvalidh_loc : 1'b 0 ;
assign rxerror  = rxactive ? rxerror_loc  : 1'b 0 ; 
assign lsfs_dll_en = fslsserialmode_sync ? 1'b 0 : ~hs_mode ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
	begin
		bitunstuff_error_d <= 1'b 0 ;
		rxactive_d	<= 1'b 0 ;
	end
	else
	begin
		bitunstuff_error_d <= bitunstuff_error ;
		rxactive_d	<= rxactive ;
	end
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		sync_detected_d <= 1'b 0 ;
	else if(i_bist_on | rx_cntrl_soft_reset | (hs_mode & negedge_squelch) | (~hs_mode & rxactive_off))
		sync_detected_d <= 1'b 0 ;
	else if(~rxactive_delay & sync_detected & ~sync_detected_d)
		sync_detected_d <= 1'b 1 ;
end
assign posedge_bitunstuff_error = (bitunstuff_error & ~bitunstuff_error_d) ;
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
	begin
		rxactive_delay <= 1'b 0 ;
		squelch_d      <= 1'b 1 ;
	end
	else
	begin
		rxactive_delay <= rxactive ;
		squelch_d      <= squelch ;
	end
end
assign rxactive_off    = (rxactive_delay & ~rxactive) ;
assign hs_rxactive_off = (rxactive_d & ~rxactive) ;
assign bit_unstuff_terminal_count = databus ? 4'd 15 : 4'd 7 ;
assign bit_unstuffcount_reached	  = (bitunstuff_flag & bit_unstuffcount == bit_unstuff_terminal_count) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		bit_unstuffcount <= 4'd 0;
	else if(rx_cntrl_soft_reset | hs_rxactive_off | bit_unstuffcount_reached | ~hs_mode)
		bit_unstuffcount <= 4'd0;
	else if(bitunstuff_flag)
		bit_unstuffcount <= bit_unstuffcount + 4'd 1;
end
assign deassert_rxvalid_rst = (deassert_rxvalid) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		deassert_rxvalid_d <= 1'b 0 ;
	else if(rx_cntrl_soft_reset | deassert_rxvalid_rst | hs_rxactive_off | ~hs_mode)
		deassert_rxvalid_d <= 1'b 0 ;
	else if(~deassert_rxvalid_d & bit_unstuffcount_reached)
		deassert_rxvalid_d <= 1'b 1 ;
end
assign #0.001 deassert_rxvalid_loc = (~deassert_rxvalid_rst & (bit_unstuffcount_reached | deassert_rxvalid_d)) ;
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
		deassert_rxvalid <= 1'b 0 ;
	else if(rx_cntrl_soft_reset | rxactive_off | ~hs_mode)
		deassert_rxvalid <= 1'b 0 ;
	else 
		deassert_rxvalid <= deassert_rxvalid_loc ;
end
assign alignment_error_en = (hs_mode & posedge_bitunstuff_error & ~error_byte_valid) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		alignment_error <= 1'b 0;
	else if(rx_cntrl_soft_reset | hs_rxactive_off)
		alignment_error <= 1'b 0;
	else if(alignment_error_en)
		alignment_error <= 1'b 1;
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		byte_toggle <= 1'b 0 ;
	else if(rx_cntrl_soft_reset | hs_rx_finished | (~hs_mode & rxactive_off) | rxerror_reg)
		byte_toggle <= 1'b 0 ;
	else if(byte_valid)
		byte_toggle <= ~byte_toggle ;
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		word_toggle <= 1'b 0 ;
	else if(rx_cntrl_soft_reset | (~hs_mode & rxactive_off) | hs_rx_finished | rxerror_reg)
		word_toggle <= 1'b 0 ;
	else if(byte_toggle & byte_valid)
		word_toggle <= ~word_toggle ;
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		hr3_toggle <= 1'b 0 ;
	else if(rx_cntrl_soft_reset | (~hs_mode & rxactive_off) | hs_rx_finished | rxerror_reg)
		hr3_toggle <= 1'b 0 ;
	else if(hr1_validh_16b & byte_valid)
		hr3_toggle <= ~hr3_toggle ;
end
assign hr1_valid_16b  = (~word_toggle & ~byte_toggle) ;
assign hr1_validh_16b = (~word_toggle &  byte_toggle) ;
assign hr1_valid_8b = ~byte_toggle ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		hold_reg1 <= 16'd0 ;
	else if(rx_cntrl_soft_reset | (~hs_mode & rxactive_off) | hold_reg2_rst | (~databus & ~hs_mode) | hs_rx_finished | rxerror_reg)
		hold_reg1 <= 16'd0 ;
	else if(byte_valid)
	begin
		if(hs_mode)
		begin
			if(databus)
			begin
				hold_reg1[7:0]  <= #0.1 (~hr3_toggle & hr1_valid_16b)  ? byte_value : hold_reg1[7:0]  ;
				hold_reg1[15:8] <= #0.1 (~hr3_toggle & hr1_validh_16b) ? byte_value : hold_reg1[15:8] ;
			end
			else
			begin
				hold_reg1[7:0]  <= #0.1 (~word_toggle & hr1_valid_8b & ~(eop_identify & ~hs_rxactive_off)) ? byte_value : hold_reg1[7:0] ;
				hold_reg1[15:8] <= #0.1 8'h 00 ;
			end
		end
		else
		begin
			if(hr1_valid_8b)
			begin
				hold_reg1[7:0]  <= #0.1 byte_value ;
				hold_reg1[15:8] <= #0.1 8'h 00 ;
			end
		end
	end
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
	begin
		hold_reg1_valid  <= 1'b 0 ;
		hold_reg1_validh <= 1'b 0 ;
	end
	else if(rx_cntrl_soft_reset | (~hs_mode & rxactive_off) | hold_reg2_rst | (~databus & ~hs_mode) | hs_rx_finished | rxerror_reg)
	begin
		hold_reg1_valid  <= 1'b 0 ;
		hold_reg1_validh <= 1'b 0 ;
	end
	else if(byte_valid)
	begin
		if(hs_mode)
		begin
			if(databus)
			begin
				hold_reg1_valid  <= (~hr3_toggle & hr1_valid_16b)  ? ~(eop_detected & ~hs_rxactive_off) : hold_reg1_valid ;
				hold_reg1_validh <= (~hr3_toggle & hr1_validh_16b) ? ~(eop_detected & ~hs_rxactive_off) : hold_reg1_validh;
			end
			else
			begin
				hold_reg1_valid  <= (~word_toggle & hr1_valid_8b & ~(eop_identify & ~hs_rxactive_off)) ? ~(eop_detected & ~hs_rxactive_off) : hold_reg1_valid;
				hold_reg1_validh <= 1'b 0 ;
			end
		end
		else
		begin
			if(hr1_valid_8b)
			begin
				hold_reg1_valid  <= ~eop_detected ;
				hold_reg1_validh <= 1'b 0 ;
			end
		end
	end
end
assign hr2_valid_16b  = (word_toggle & ~byte_toggle) ;
assign hr2_validh_16b = (word_toggle &  byte_toggle) ;
assign hr2_valid_8b = byte_toggle ;
assign hold_reg2_rst = (~hs_mode & rxactive & rxvalid_loc & hold_reg2_valid) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		hold_reg2 <= 16'd0 ;
	else if(rx_cntrl_soft_reset | (~hs_mode & rxactive_off) | hold_reg2_rst | hs_rx_finished | rxerror_reg)
		hold_reg2 <= 16'd0 ;
	else if(byte_valid | posedge_eop_identify)
	begin
		if(hs_mode)
		begin
			if(databus)
			begin
				hold_reg2[7:0]  <= #0.1 (hr3_toggle & hr2_valid_16b)  ? byte_value : hold_reg2[7:0]  ;
				hold_reg2[15:8] <= #0.1 (hr3_toggle & hr2_validh_16b) ? byte_value : hold_reg2[15:8] ;
			end
			else
			begin
				hold_reg2[7:0]  <= #0.1 (~word_toggle & hr2_valid_8b & ~(eop_identify & ~hs_rxactive_off)) ? byte_value : hold_reg2[7:0] ;
				hold_reg2[15:8] <= #0.1 8'h 00 ;
			end
		end
		else
		begin
			if(databus)
			begin
				if(hr2_valid_8b)
				begin
					hold_reg2[7:0]  <= #0.1 hold_reg1[7:0] ;
					hold_reg2[15:8] <= #0.1 byte_value ;
				end
			end
			else if(~databus)
			begin
				hold_reg2[7:0]  <= #0.1 byte_value ;
				hold_reg2[15:8] <= #0.1 8'h 00 ;
			end
		end
	end
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
	begin
		hold_reg2_valid  <= 1'b 0 ;
		hold_reg2_validh <= 1'b 0 ;
	end
	else if(rx_cntrl_soft_reset | (~hs_mode & rxactive_off) | hold_reg2_rst | hs_rx_finished | rxerror_reg)
	begin
		hold_reg2_valid  <= 1'b 0 ;
		hold_reg2_validh <= 1'b 0 ;
	end
	else if(byte_valid | posedge_eop_identify)
	begin
		if(hs_mode)
		begin
			if(databus)
			begin
				hold_reg2_valid  <= (hr3_toggle & hr2_valid_16b)  ? ~(eop_detected & ~hs_rxactive_off) : hold_reg2_valid ;
				hold_reg2_validh <= (hr3_toggle & hr2_validh_16b) ? ~(eop_detected & ~hs_rxactive_off) : hold_reg2_validh;
			end
			else
			begin
				hold_reg2_valid  <= (~word_toggle & hr2_valid_8b & ~(eop_identify & ~hs_rxactive_off)) ? ~(eop_detected & ~hs_rxactive_off) : hold_reg2_valid  ;
				hold_reg2_validh <= 1'b 0 ;
			end
		end
		else
		begin
			if(databus & hr2_valid_8b)
			begin
				hold_reg2_valid  <= hold_reg1_valid ;
				hold_reg2_validh <= ~eop_detected ;
			end
			else if(~databus)
			begin
				hold_reg2_valid  <= ~eop ;
				hold_reg2_validh <= 1'b 0 ;
			end
		end
	end
end
assign hr3_valid_16b  = (hr3_toggle & hr1_valid_16b)  ;
assign hr3_validh_16b = (hr3_toggle & hr1_validh_16b) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		hold_reg3 <= 16'd0 ;
	else if(rx_cntrl_soft_reset | ~hs_mode | hs_rx_finished | rxerror_reg)
		hold_reg3 <= 16'd0 ;
	else if(byte_valid)
	begin
		if(databus)
		begin
			hold_reg3[7:0]  <= #0.1 hr3_valid_16b  ? byte_value : hold_reg3[7:0]  ;
			hold_reg3[15:8] <= #0.1 hr3_validh_16b ? byte_value : hold_reg3[15:8] ;
		end
		else if(~databus)
		begin
			hold_reg3[7:0]  <= #0.1 (word_toggle & hr1_valid_8b) ? byte_value : hold_reg3[7:0] ;
			hold_reg3[15:8] <= #0.1 8'h 00 ;
		end
	end
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
	begin
		hold_reg3_valid  <= 1'b 0 ;
		hold_reg3_validh <= 1'b 0 ;
	end
	else if(rx_cntrl_soft_reset | ~hs_mode | hs_rx_finished | rxerror_reg)
	begin
		hold_reg3_valid  <= 1'b 0 ;
		hold_reg3_validh <= 1'b 0 ;
	end
	else if(byte_valid)
	begin
		if(databus)
		begin
			hold_reg3_valid  <= hr3_valid_16b  ? ~(eop_detected & ~hs_rxactive_off) : hold_reg3_valid ;
			hold_reg3_validh <= hr3_validh_16b ? ~(eop_detected & ~hs_rxactive_off) : hold_reg3_validh;
		end
		else if(~databus)
		begin
			hold_reg3_valid  <= (word_toggle & hr1_valid_8b & ~(eop_identify & ~hs_rxactive_off)) ? ~(eop_detected & ~hs_rxactive_off) : hold_reg2_valid  ;
			hold_reg3_validh <= 1'b 0 ;
		end
	end
end
assign hr4_valid_16b  = (~hr3_toggle & hr2_valid_16b)  ;
assign hr4_validh_16b = (~hr3_toggle & hr2_validh_16b) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		hold_reg4 <= 16'd0 ;
	else if(rx_cntrl_soft_reset | ~hs_mode | hs_rx_finished | rxerror_reg)
		hold_reg4 <= 16'd0 ;
	else if(byte_valid)
	begin
		if(databus)
		begin
			hold_reg4[7:0]  <= #0.1 hr4_valid_16b  ? byte_value : hold_reg4[7:0]  ;
			hold_reg4[15:8] <= #0.1 hr4_validh_16b ? byte_value : hold_reg4[15:8] ;
		end
		else if(~databus)
		begin
			hold_reg4[7:0]  <= #0.1 (word_toggle & hr2_valid_8b) ? byte_value : hold_reg4[7:0] ;
			hold_reg4[15:8] <= #0.1 8'h 00 ;
		end
	end
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
	begin
		hold_reg4_valid  <= 1'b 0 ;
		hold_reg4_validh <= 1'b 0 ;
	end
	else if(rx_cntrl_soft_reset | ~hs_mode | hs_rx_finished | rxerror_reg)
	begin
		hold_reg4_valid  <= 1'b 0 ;
		hold_reg4_validh <= 1'b 0 ;
	end
	else if(byte_valid)
	begin
		if(databus)
		begin
			hold_reg4_valid  <= hr4_valid_16b  ? ~(eop_detected & ~hs_rxactive_off) : hold_reg4_valid ;
			hold_reg4_validh <= hr4_validh_16b ? ~(eop_detected & ~hs_rxactive_off) : hold_reg4_validh;
		end
		else if(~databus)
		begin
			hold_reg4_valid  <= (word_toggle & hr2_valid_8b & ~(eop_identify & ~hs_rxactive_off)) ? ~(eop_detected & ~hs_rxactive_off) : hold_reg2_valid  ;
			hold_reg4_validh <= 1'b 0 ;
		end
	end
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		byte_cnt <= 2'd 0 ;
	else if(rx_cntrl_soft_reset | (~hs_mode & rxactive_off) | hs_rx_finished | rxerror_reg)
		byte_cnt <= 2'd 0 ;
	else if(byte_cnt != 2'd 3 & byte_valid)
		byte_cnt <= byte_cnt + 2'd 1 ;
end
assign start_8b  = (~databus & (hs_mode ? (byte_valid & byte_cnt == 2'd 1) : byte_valid)) ;
assign start_16b = ( databus & (hs_mode ? (byte_valid & byte_cnt == 2'd 3) : ((byte_valid | posedge_eop_identify) & byte_cnt == 2'd 1))) ;
assign short_packet = (hs_mode & (byte_cnt <= 2'd 3) & eop) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		start_flag_d <= 1'b 0 ;
	else if(rx_cntrl_soft_reset | rxactive_off)
		start_flag_d <= 1'b 0 ;
	else if(start_flag_condition)
		start_flag_d <= 1'b 1 ;
end
assign start_flag_condition = (start_8b | start_16b | short_packet) ;
assign start_flag           = ((start_flag_condition | start_flag_d) & ~rxactive_off) ;
assign hs_eop   = ( hs_mode & eop_detected) ;
assign lsfs_eop = (~hs_mode & eop_detected) ;
assign eop_identify = hs_mode ? hs_eop : lsfs_eop ; 
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		eop_identify_d <= 1'b 0 ;
	else if(rx_cntrl_soft_reset | rxactive_off | hs_mode)		 
		eop_identify_d <= 1'b 0 ;
	else 
		eop_identify_d <= eop_identify ;
end
assign posedge_eop_identify = (~hs_mode & eop_identify & ~eop_identify_d) ;
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
		eop_d <= 1'b 0 ;
	else if(rx_cntrl_soft_reset | rxactive_off)		 
		eop_d <= 1'b 0 ;
	else if(eop_identify)
		eop_d <= 1'b 1 ;
end
assign eop = databus ? eop_d : (eop_identify | eop_d) ;
assign output_toggle_en = (hs_mode & start_flag & ~deassert_rxvalid_loc);
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
		output_toggle <= 2'd0 ;
	else if(rx_cntrl_soft_reset | rxactive_off)
		output_toggle <= 2'd0 ;
	else if(output_toggle_en)
	begin
		output_toggle <= output_toggle + 2'd 1 ;
	end
end
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
		sie_cnt <= 12'd0 ;
	else if(rx_cntrl_soft_reset | rxactive_off | ~hs_mode | rxerror_reg)
		sie_cnt <= 12'd0 ;
	else if(rxactive & rxvalid_loc)
	begin
		if(databus)
			sie_cnt <= rxvalidh_loc ? (sie_cnt + 12'd2) : (sie_cnt + 12'd1) ;
		else
			sie_cnt <= sie_cnt + 12'd1 ;
	end
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		phy_cnt <= 12'd 0 ;
	else if(rx_cntrl_soft_reset | hs_rx_finished | ~hs_mode | rxerror_reg)
		phy_cnt <= 12'd 0 ;
	else if(byte_valid & ~(eop_detected & ~hs_rxactive_off))
	begin
		phy_cnt <= phy_cnt + 12'd 1 ;
	end
end
assign hs_rx_end = (hs_mode & ~alignment_error_en & ~error_detected & eop_detected & rxactive & rxvalid_loc & (databus ? (rxvalidh_loc ? ((sie_cnt+12'd 2) == phy_cnt) : ((sie_cnt+12'd 1) == phy_cnt)) : ((sie_cnt+12'd 1) == phy_cnt))) ;
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
	begin
		eop_detected_d <= 1'b 0 ;
		eop_detected_2d <= 1'b 0 ;
	end
	else if(rx_cntrl_soft_reset | deassert_rxactive)
	begin
		eop_detected_d <= 1'b 0 ;
		eop_detected_2d <= 1'b 0 ;
	end
	else 
	begin
		eop_detected_d <= eop_detected ;
		eop_detected_2d <= eop_detected_d ;
	end
end
assign hs_rx_finished   = (rxactive & hs_mode & (hs_rx_end | (~error_detected & eop & (sie_cnt >= phy_cnt)))) ;
assign rx_finished      = hs_mode ? (hs_rx_finished & (~sync_detected | squelch_d)) : eop_detected_2d ;
assign assert_rxactive   = (~rxactive_reg & ~deassert_rxactive & ~rxactive_off & sync_detected & ~sync_detected_d) ;
assign deassert_rxactive_loc = hs_mode ? ((start_flag & rx_finished) | (squelch_d & rxerror_reg)) : (rx_finished | (eop_detected & rxerror_reg)) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		deassert_rxactive_reg <= 1'b 0 ;
	else if(rx_cntrl_soft_reset | hs_rxactive_off | ~hs_mode)
		deassert_rxactive_reg <= 1'b 0 ;
	else if(deassert_rxactive_loc)
		deassert_rxactive_reg <= 1'b 1 ;
end
assign deassert_rxactive = (deassert_rxactive_loc | deassert_rxactive_reg) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		rxactive_reg <= 1'b 0 ;
	else if(rx_cntrl_soft_reset | deassert_rxactive)
		rxactive_reg <= 1'b 0 ;
	else if(assert_rxactive)
		rxactive_reg <= 1'b 1 ;
end
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
		rxactive <= 1'b 0 ;
	else
		rxactive <= rxactive_reg ;
end
assign #0.001 rxvalid_rst = (rx_cntrl_soft_reset | rxactive_off | deassert_rxvalid_loc | deassert_rxactive | rx_finished
					| hs_rx_finished | (rxerror_loc | rxerror_reg)) ;
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
		rxvalid_loc <= 1'b 0 ;
	else if(rxvalid_rst)
		rxvalid_loc <= 1'b 0 ;
	else if(start_flag)
	begin
		if(hs_mode)
		begin
			if(output_toggle == 2'd 3)
				rxvalid_loc <= hold_reg4_valid ;
			else if(output_toggle == 2'd 2)
				rxvalid_loc <= hold_reg3_valid ;
			else if(output_toggle == 2'd 1)
				rxvalid_loc <= hold_reg2_valid ;
			else
				rxvalid_loc <= hold_reg1_valid ;
		end
		else
			rxvalid_loc <= hold_reg2_valid ;
	end
end
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
		rxvalidh_loc <= 1'b 0 ;
	else if(rxvalid_rst)
		rxvalidh_loc <= 1'b 0 ;
	else if(databus & start_flag)
	begin
		if(hs_mode)
		begin
			if(output_toggle == 2'd 3)
				rxvalidh_loc <= hold_reg4_validh ;
			else if(output_toggle == 2'd 2)
				rxvalidh_loc <= hold_reg3_validh ;
			else if(output_toggle == 2'd 1)
				rxvalidh_loc <= hold_reg2_validh ;
			else
				rxvalidh_loc <= hold_reg1_validh ;
		end
		else
			rxvalidh_loc <= hold_reg2_validh ;
	end
end
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
		lsfs_rxerror <= 1'b 0 ;
	else if(rx_cntrl_soft_reset | rxactive_off | deassert_rxactive | hs_mode)
		lsfs_rxerror <= 1'b 0 ;
	else if(lsfs_dll_se0 & (bit_count > 3'd1 & bit_count <= 3'd 7))
		lsfs_rxerror <= 1'b 1 ;
end
assign error_detected   = hs_mode ? (cdr_error | alignment_error | no_eop_detected) : (bitunstuff_error | lsfs_rxerror) ;
assign rxerror_detected = (rxactive & error_detected) ;
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
		rxerror_reg <= 1'b 0 ;
	else if(rx_cntrl_soft_reset | rxactive_off | deassert_rxactive)
		rxerror_reg <= 1'b 0 ;
	else if(rxerror_detected)
		rxerror_reg <= 1'b1 ;
end
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
                rxerror_ack_loc <= 1'b0;
        else
        begin
                if(rxerror_detected)
                        rxerror_ack_loc <= 1'b1;
                else
                        rxerror_ack_loc <= 1'b0;
        end
end
assign rxerror_ack = test_hs_rx_err_reg ? rxerror_ack_loc : 1'b0;
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
		rxerror_loc <= 1'b 0 ;
	else if(rx_cntrl_soft_reset | rxactive_off | rxerror_loc)
		rxerror_loc <= 1'b 0 ;
	else if(rxerror_detected & ~rxerror_reg)
		rxerror_loc <= 1'b1 ;
end
always @(posedge sieclock or negedge rstn_sieclock)
begin
	if(~rstn_sieclock)
		dataout <= 16'd0 ;
	else if(rx_cntrl_soft_reset | rxactive_off | deassert_rxvalid_loc | rxvalid_rst)
		dataout <= 16'd0 ;
	else if(start_flag)
	begin
		if(hs_mode)
		begin
			if(output_toggle == 2'd 3)
				dataout <=  hold_reg4 ;
			else if(output_toggle == 2'd 2)
				dataout <=  hold_reg3 ;
			else if(output_toggle == 2'd 1)
				dataout <=  hold_reg2 ;
			else
				dataout <=  hold_reg1 ;
		end
		else
			dataout <= hold_reg2 ;
	end
end
endmodule
`timescale 1ns/1ps
module usb2_ted_dig_top_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
                        i_rstn,
                        i_clk,
                        i_ed_en,
                        i_ted_en,
                        i_comp_out_up,
                        i_comp_out_down,
                        i_TM_bits,
                        o_ed_en,
                        o_ted_en,
                        o_status_up,
                        o_status_down,
                        o_calib_mode_up,
                        o_calib_mode_down,
                        o_calib_code_up,
                        o_calib_code_down,                      
                        o_calib_done
                        );
   parameter    p_code_len = 4;                  
   parameter    p_init_wait_time_up = 3'd1;
   parameter    p_init_wait_time_down = 3'd2;    
   input                   i_rstn;
   input                   i_clk;
   input                   i_ed_en;
   input                   i_ted_en;
   input                   i_comp_out_up;
   input                   i_comp_out_down;
   input [23:0]            i_TM_bits;
   output                  o_ed_en;
   output                  o_ted_en;
   output                  o_calib_mode_up;
   output                  o_calib_mode_down;
   output [7:0]            o_status_up;
   output [7:0]            o_status_down;
   output [p_code_len-1:0] o_calib_code_up;
   output                  o_calib_done;
   output [p_code_len-1:0] o_calib_code_down;
   wire [p_code_len-1:0]   w_calib_code_sar_up;
   wire                    w_calib_done_sar_up;   
   wire [p_code_len-1:0]   w_calib_code_sar_down;
   wire                    w_calib_done_sar_down;
   wire [p_code_len-1:0]   w_calib_code_up;
   wire [p_code_len-1:0]   w_calib_code_down;   
   wire                    w_calib_done_up;
   wire                    w_calib_done_down; 
   wire [7:0]              o_status_up;
   wire [7:0]              o_status_down;
   wire [1:0]              w_del_sel;
   reg  [3:0]              r_cnt, r_ted_del;
   reg                     r_ed_en_int, r_ted_en_int  ;
   reg                     r_start_calib;
   wire                    w_del_en, w_sar_en_up, w_comp_out_up, w_sar_en_down, w_comp_out_down;
   assign w_del_en               = i_TM_bits[4];       
   assign w_del_sel              = i_TM_bits[6:5];
   assign o_calib_done           = i_TM_bits[2] ? i_TM_bits[3]   : w_calib_done_up & w_calib_done_down;
   assign w_comp_out_up          = i_TM_bits[0] ?  ~i_comp_out_up : i_comp_out_up;
   assign w_comp_out_down        = i_TM_bits[1] ? ~i_comp_out_down : i_comp_out_down;
   assign o_calib_code_up        = (i_TM_bits[7] ? i_TM_bits[11:8] : w_calib_code_up);
   assign o_calib_code_down      = (i_TM_bits[16] ? i_TM_bits[15:12] : w_calib_code_down);
   assign o_ed_en                = ((o_calib_done) ? i_ed_en : r_ed_en_int);        
   assign o_ted_en               = ((o_calib_done) ? i_ted_en : r_ted_en_int);
   assign o_status_up            = {o_calib_code_up, w_comp_out_up, w_calib_done_up, 2'd0};
   assign o_status_down          = {o_calib_code_down, w_comp_out_down, w_calib_done_down, 2'd0};
   assign o_calib_mode_up        = (i_TM_bits[17] ? i_TM_bits[18] : ~w_calib_done_up);
   assign o_calib_mode_down      = (i_TM_bits[19] ? i_TM_bits[20] : (w_calib_done_down ? 1'b0 : w_calib_done_up)) ;
always @(*)
begin
  if(w_del_en)
  begin
    if(w_del_sel == 2'b00)
      r_ted_del = 4'd4;
    else if(w_del_sel == 2'b01)
      r_ted_del = 4'd0;
    else if(w_del_sel == 2'b10)
      r_ted_del = 4'd2;
    else
      r_ted_del = 4'd6;
  end
  else
    r_ted_del = 4'd4;
end
always @(posedge i_clk or negedge i_rstn)
if(~i_rstn)
begin
  r_ed_en_int <= 1'b0;
  r_ted_en_int <= 1'b0;
  r_cnt <= 4'd0;
  r_start_calib <= 1'b0;
end
else
begin
  r_ed_en_int <= 1'b1;
  r_ted_en_int <= 1'b1;
  if(r_ed_en_int && r_ted_en_int && (r_cnt < r_ted_del))
    r_cnt <= r_cnt + 1'b1;
  if(r_cnt == r_ted_del)
    r_start_calib <= 1'b1;
end
   ted_calib_core_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r
     #(
       .p_code_len (p_code_len),
       .p_init_wait_time (p_init_wait_time_up)
       )
       I_ted_calib_core_up
         (
          .i_rstn         (i_rstn),
          .i_calib        (r_start_calib),
          .i_clk          (i_clk),
          .i_calib_done   (w_calib_done_sar_up),
          .i_calib_code   (w_calib_code_sar_up),
          .o_sar_en       (w_sar_en_up),
          .o_calib_code   (w_calib_code_up),
          .o_calib_done   (w_calib_done_up)
          );
  ted_calib_core_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r
     #(
       .p_code_len (p_code_len),
       .p_init_wait_time (p_init_wait_time_down)
       )
       I_ted_calib_core_down
         (
          .i_rstn         (i_rstn),
          .i_calib        (w_calib_done_up),
          .i_clk          (i_clk),
          .i_calib_done   (w_calib_done_sar_down),
          .i_calib_code   (w_calib_code_sar_down),
          .o_sar_en       (w_sar_en_down),
          .o_calib_code   (w_calib_code_down),
          .o_calib_done   (w_calib_done_down)
          );
   ted_sar_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r
     #(.p_code_len (p_code_len))
     I_ted_sar_up
       ( 
         .i_rstn       (i_rstn), 
         .i_comp_out   (w_comp_out_up),
         .i_clk        (i_clk),
         .i_sar_en     (w_sar_en_up),
         .o_calib_done (w_calib_done_sar_up),
         .o_sar_code   (w_calib_code_sar_up)
         );
    ted_sar_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r
     #(.p_code_len (p_code_len))
     I_ted_sar_down
       ( 
         .i_rstn       (i_rstn), 
         .i_comp_out   (w_comp_out_down),
         .i_clk        (i_clk),
         .i_sar_en     (w_sar_en_down),
         .o_calib_done (w_calib_done_sar_down),
         .o_sar_code   (w_calib_code_sar_down)
         );
always @(posedge w_calib_done_down)
begin
   if (w_calib_code_down == 4'b0000 | w_calib_code_down == 4'b1111)
              $display("Error : TED_down calibration code saturated");
end
always @(posedge w_calib_done_up)
begin
   if (w_calib_code_up == 4'b0000 | w_calib_code_up == 4'b1111)
              $display("Error : TED_up calibration code saturated");
end
endmodule 
module phy_scan_mux_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
   input  scan_mode_en_in,  
   input  scan_signal_in,   
   input  fcn_signal_in,    
   output fcn_signal_out    
);
   assign fcn_signal_out = scan_mode_en_in ?  
                           scan_signal_in : fcn_signal_in;
endmodule
`timescale 1ns/1ps
module udc_rx_eop_det_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r ( 
hs_clock,		 
rstn_hs_clock,		 
byte_clock,		 
rstn_byte_clock,	 
eop_det_soft_reset,	 
test_fs_eop_se0_en,	 
test_ls_eop_se0_en,	 
test_eop_se0_fs,	 
test_eop_se0_ls,	 
test_timeout_all_enable, 
test_timeout_enable,	 
test_timeout_value,	 
rxactive,		 
hs_mode,		 
fs_mode,		 
ls_mode,		 
fs_mode_pre,		 
squelch,		 
cdr_eb_empty,		 
cdr_error,		 
bitunstuff_error,	 
alignment_error,	 
rxdp_dly3,		 
rxdm_dly3,		 
lsfs_dll_se0,		 
rxactive_off,		 
hs_rxactive_off,	 
no_eop_detected,	 
eop_detected,		 
debug_hs_eop_condition,
debug_normal_eop,
debug_no_eop,
debug_hs_eop_detected,
debug_se0_validated,
debug_lsfs_eop_detected
);
input	hs_clock, rstn_hs_clock, byte_clock, rstn_byte_clock ;
input		rxactive, eop_det_soft_reset, hs_mode, fs_mode, ls_mode, fs_mode_pre, squelch, cdr_eb_empty, 
		cdr_error, bitunstuff_error, alignment_error, lsfs_dll_se0, rxdp_dly3, rxdm_dly3, 
		rxactive_off, hs_rxactive_off, test_fs_eop_se0_en, test_ls_eop_se0_en, test_timeout_all_enable,
		test_timeout_enable ;
input	[1:0]	test_eop_se0_fs ;
input	[2:0]	test_timeout_value ;
input	[5:0]	test_eop_se0_ls ;
output	wire eop_detected ;
output 	wire	debug_hs_eop_condition ;
output	wire	debug_normal_eop ;
output  wire	debug_no_eop ;
output	wire	debug_hs_eop_detected ;
output	wire	debug_se0_validated ;
output	wire	debug_lsfs_eop_detected ;
output 	reg	no_eop_detected ;
wire		fsls_mode, lsfs_j_dly3, lsfs_j_dly4, counter_reached, no_eop,
		lsfs_j_detected, lsfs_eop_detected, normal_eop, hs_eop_condition,
		lsfs_valid_eop, lsfs_no_eop, timeout_reached, timeout_enable,
		linestate_stable, linestate_j, linestate_all ;
wire	[1:0]	linestate, linestate_dly ;
wire	[5:0]	se0_terminal_count ; 
wire	[9:0] 	timeout_fs_threshold, timeout_ls_threshold, timeout_threshold ;
reg		rxdp_dly4, rxdm_dly4, se0_validated, hs_eop_detected ; 
reg	[5:0]	counter ;
reg	[9:0]	test_timeout_fs, test_timeout_ls, timeout_counter ;
assign debug_hs_eop_condition = hs_eop_condition ;
assign debug_normal_eop = normal_eop ;
assign debug_no_eop = no_eop_detected ;
assign debug_hs_eop_detected = hs_eop_detected ;
assign debug_se0_validated = se0_validated ;
assign debug_lsfs_eop_detected = lsfs_eop_detected ;
assign eop_detected = hs_mode ? (hs_eop_condition | hs_eop_detected) : lsfs_eop_detected ;
assign normal_eop	= (bitunstuff_error & ~alignment_error) ;
assign no_eop		= (cdr_eb_empty & squelch & ~bitunstuff_error) ;
assign hs_eop_condition = (rxactive & (normal_eop | alignment_error | cdr_error)) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		hs_eop_detected <= 1'b 0 ;
	else if(eop_det_soft_reset | ~hs_mode | hs_rxactive_off)
		hs_eop_detected <= 1'b 0 ;
	else if(hs_eop_condition)
		hs_eop_detected <= 1'b 1 ;
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		no_eop_detected <= 1'b 0 ;
	else if(eop_det_soft_reset | ~hs_mode | hs_rxactive_off | hs_eop_detected)
		no_eop_detected <= 1'b 0 ;
	else if(rxactive & no_eop)
		no_eop_detected <= 1'b 1 ;
end
assign fsls_mode = (rxactive & (fs_mode | ls_mode | fs_mode_pre)) ;
assign se0_terminal_count = ls_mode ? (test_ls_eop_se0_en ? test_eop_se0_ls : 6'd 12) : 
					(test_fs_eop_se0_en ? {4'd 0,test_eop_se0_fs} : 6'd 1) ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
	if(~rstn_byte_clock)
		counter <= 6'd 0 ;
	else if(eop_det_soft_reset | ~fsls_mode | rxactive_off)
		counter <= 6'd 0 ;
	else if(~lsfs_eop_detected & lsfs_dll_se0)
		counter <= counter + 6'd 1 ;
end
assign counter_reached = (counter == se0_terminal_count) ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
	if(~rstn_byte_clock)
		se0_validated <= 1'b 0;
	else if(eop_det_soft_reset | ~fsls_mode | rxactive_off)
		se0_validated <= 1'b 0;
	else if(counter_reached)
		se0_validated <= 1'b 1;
end
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
	if(~rstn_byte_clock)
	begin
		rxdp_dly4 <= 1'b0 ;
		rxdm_dly4 <= 1'b0 ;
	end
	else
	begin
		rxdp_dly4 <= rxdp_dly3 ;
		rxdm_dly4 <= rxdm_dly3 ;
	end
end
assign lsfs_j_dly3	= (~rxdm_dly3 & rxdp_dly3) ;
assign lsfs_j_dly4	= (~rxdm_dly4 & rxdp_dly4) ;
assign lsfs_j_detected	= (lsfs_j_dly3 & lsfs_j_dly4) ;
assign lsfs_valid_eop = (se0_validated & lsfs_j_detected) ;
assign linestate     		= {rxdm_dly3,rxdp_dly3} ;
assign linestate_dly 		= {rxdm_dly4,rxdp_dly4} ;
assign linestate_j		= ((linestate == 2'b 01) && (linestate_dly == 2'b 01)) ;	 
assign linestate_all		= (linestate == linestate_dly) ; 				 
assign linestate_stable		= test_timeout_all_enable ? linestate_all : linestate_j ;
assign timeout_enable 		= (fsls_mode & ~lsfs_valid_eop & linestate_stable) ;
always @(posedge byte_clock or negedge rstn_byte_clock)
begin
	if(~rstn_byte_clock)
	begin
		timeout_counter <= 10'd0 ;
	end
	else if(eop_det_soft_reset | ~fsls_mode | rxactive_off | lsfs_valid_eop)
	begin
		timeout_counter <= 10'd0 ;
	end
	else if(~timeout_reached)
	begin
		if(timeout_enable)
			timeout_counter <= timeout_counter + 10'd 1 ;
		else
			timeout_counter <= 10'd0 ;
	end
end
always @(*)
begin
	if(fs_mode)
	begin
		test_timeout_ls = 10'd 640 ;
		case(test_timeout_value)
		3'b 000: test_timeout_fs = 10'd 80 ;
		3'b 001: test_timeout_fs = 10'd 75 ;
		3'b 010: test_timeout_fs = 10'd 70 ;
		3'b 011: test_timeout_fs = 10'd 65 ;
		3'b 100: test_timeout_fs = 10'd 60 ;
		3'b 101: test_timeout_fs = 10'd 55 ;
		3'b 110: test_timeout_fs = 10'd 50 ;
		3'b 111: test_timeout_fs = 10'd 45 ;
		default: test_timeout_fs = 10'd 80 ;
		endcase
	end
	else
	begin
		test_timeout_fs = 10'd 80 ;
		case(test_timeout_value)
		3'b 000: test_timeout_ls = 10'd 640 ;
		3'b 001: test_timeout_ls = 10'd 600 ;
		3'b 010: test_timeout_ls = 10'd 560 ;
		3'b 011: test_timeout_ls = 10'd 520 ;
		3'b 100: test_timeout_ls = 10'd 480 ;
		3'b 101: test_timeout_ls = 10'd 440 ;
		3'b 110: test_timeout_ls = 10'd 400 ;
		3'b 111: test_timeout_ls = 10'd 360 ;
		default: test_timeout_ls = 10'd 640 ;
		endcase
	end
end
assign timeout_fs_threshold 	= test_timeout_enable ? test_timeout_fs : 10'd 80 ;
assign timeout_ls_threshold 	= test_timeout_enable ? test_timeout_ls : 10'd 640 ;
assign timeout_threshold 	= fs_mode ? timeout_fs_threshold : timeout_ls_threshold ;
assign timeout_reached   	= (timeout_counter == timeout_threshold) ;
assign lsfs_no_eop = timeout_reached ;
assign lsfs_eop_detected = (lsfs_valid_eop | lsfs_no_eop) ;
endmodule
module utmi_reg_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
  UTMI_REG0_loopback_sel_OUT,
  UTMI_REG0_loopback_en_OUT,
  UTMI_REG0_bist_mode_sel_OUT,
  UTMI_REG0_bist_en_OUT,
  UTMI_REG1_bist_err_OUT,
  UTMI_REG1_bist_soft_rst_OUT,
  UTMI_REG1_tx_lsfs_soft_rst_OUT,
  UTMI_REG1_tx_hs_soft_rst_OUT,
  UTMI_REG1_clkdiv_soft_rst_OUT,
  UTMI_REG1_calib_soft_rst_OUT,
  UTMI_REG1_phy_soft_rst_OUT,
  UTMI_REG2_rx_cntrl_soft_rst_OUT,
  UTMI_REG2_shift_reg_soft_rst_OUT,
  UTMI_REG2_bitunstuff_soft_rst_OUT,
  UTMI_REG2_nrzi_dec_soft_rst_OUT,
  UTMI_REG2_eop_det_soft_rst_OUT,
  UTMI_REG2_sync_det_soft_rst_OUT,
  UTMI_REG2_lsfs_dll_soft_rst_OUT,
  UTMI_REG2_rx_hs_soft_rst_OUT,
  UTMI_REG3_hs_rx_err_OUT,
  UTMI_REG3_ls_linestate_fil_en_OUT,
  UTMI_REG3_fs_linestate_fil_cnt_OUT,
  UTMI_REG3_fs_linestate_fil_en_OUT,
  UTMI_REG4_ls_linestate_fil_cnt_OUT,
  UTMI_REG5_bist_mode_en_OUT,
  UTMI_REG5_bist_on_OUT,
  UTMI_REG5_hstx_boost_deamp_off_OUT,
  UTMI_REG5_hstx_boost_OUT,
  UTMI_REG5_hs_samp_OUT,
  UTMI_REG5_hs_samp_en_OUT,
  UTMI_REG5_hsrx_OUT,
  UTMI_REG5_hsrx_en_OUT,
  UTMI_REG6_vbusvalid_cntrl_OUT,
  UTMI_REG6_vbusvalid_l3_dev_en_OUT,
  UTMI_REG6_hs_drven_threshold_OUT,
  UTMI_REG6_hs_drven_th_en_OUT,
  UTMI_REG7_hstx_bc_mode_OUT,
  UTMI_REG7_hstx_bc_en_OUT,
  UTMI_REG7_hstx_chirp_mode_OUT,
  UTMI_REG7_hstx_chirp_en_OUT,
  UTMI_REG7_hstx_en_del_OUT,
  UTMI_REG7_hstx_en_del_en_OUT,
  UTMI_REG7_hstx_OUT,
  UTMI_REG7_hstx_en_OUT,
  UTMI_REG8_hs_term_OUT,
  UTMI_REG8_hs_term_en_OUT,
  UTMI_REG8_hstx_data_OUT,
  UTMI_REG8_hstx_data_en_OUT,
  UTMI_REG8_hstx_drv_OUT,
  UTMI_REG8_hstx_drv_en_OUT,
  UTMI_REG8_hstx_predrv_OUT,
  UTMI_REG8_hstx_predrv_en_OUT,
  UTMI_REG9_clkoff_en_OUT,
  UTMI_REG9_sdc_space_OUT,
  UTMI_REG9_sdc_space_en_OUT,
  UTMI_REG9_hstx_en_del_th_OUT,
  UTMI_REG9_hstx_en_del_th_en_OUT,
  UTMI_REG10_pll_clkon_OUT,
  UTMI_REG10_pll_clkon_en_OUT,
  UTMI_REG10_bg_pd_bg_ok_OUT,
  UTMI_REG10_bg_pd_bg_ok_en_OUT,
  UTMI_REG10_lsfs_serx_OUT,
  UTMI_REG10_lsfs_serx_en_OUT,
  UTMI_REG10_lsfs_rx_OUT,
  UTMI_REG10_lsfs_rx_en_OUT,
  UTMI_REG11_clean_linestate_serx_mask_en_OUT,
  UTMI_REG11_serx_mask_en_OUT,
  UTMI_REG11_serx_mask_threshold_OUT,
  UTMI_REG11_lsfs_tx_OUT,
  UTMI_REG11_lsfs_tx_en_OUT,
  UTMI_REG11_fsls_edgesel_OUT,
  UTMI_REG11_fsls_edgesel_en_OUT,
  UTMI_REG12_serx_bias_en_OUT,
  UTMI_REG12_fsls_tx_data_OUT,
  UTMI_REG12_fsls_tx_data_en_OUT,
  UTMI_REG12_fsls_tx_se0_OUT,
  UTMI_REG12_fsls_tx_se0_en_OUT,
  UTMI_REG12_fsls_tx_drv_OUT,
  UTMI_REG12_fsls_tx_drv_en_OUT,
  UTMI_REG13_fsls_serialmode_pullup2_OUT,
  UTMI_REG13_fsls_serialmode_pullup2_en_OUT,
  UTMI_REG13_dm_pulldown_OUT,
  UTMI_REG13_dm_pulldown_en_OUT,
  UTMI_REG13_dp_pulldown_OUT,
  UTMI_REG13_dp_pulldown_en_OUT,
  UTMI_REG13_lane_reverse_OUT,
  UTMI_REG13_lane_reverse_en_OUT,
  UTMI_REG14_dm_pullup2_OUT,
  UTMI_REG14_dm_pullup2_en_OUT,
  UTMI_REG14_dp_pullup2_OUT,
  UTMI_REG14_dp_pullup2_en_OUT,
  UTMI_REG14_dm_pullup1_OUT,
  UTMI_REG14_dm_pullup1_en_OUT,
  UTMI_REG14_dp_pullup1_OUT,
  UTMI_REG14_dp_pullup1_en_OUT,
  UTMI_REG15_txvalid_gate_threshold_fs_OUT,
  UTMI_REG15_txvalid_gate_threshold_hs_OUT,
  UTMI_REG15_ted_en_value_OUT,
  UTMI_REG15_ted_en_cnt_OUT,
  UTMI_REG15_ed_en_value_OUT,
  UTMI_REG15_ed_en_cnt_OUT,
  UTMI_REG16_unused_OUT,
  UTMI_REG17_squelch_count_idle_OUT,
  UTMI_REG17_squelch_count_idle_en_OUT,
  UTMI_REG17_tx_sq_cnt_OUT,
  UTMI_REG17_tx_sq_cnt_en_OUT,
  UTMI_REG18_sleep_value_OUT,
  UTMI_REG18_sleep_en_OUT,
  UTMI_REG18_bist_powerup_OUT,
  UTMI_REG18_bist_powerup_en_OUT,
  UTMI_REG18_powerup_en_OUT,
  UTMI_REG18_unused_OUT,
  UTMI_REG18_clipper_en_OUT,
  UTMI_REG18_clipper_en_en_OUT,
  UTMI_REG19_unused_OUT,
  UTMI_REG19_ted_sw_en_OUT,
  UTMI_REG20_hostdiscon_rst_reg_OUT,
  UTMI_REG20_hostdiscon_rst_reg_en_OUT,
  UTMI_REG20_calib_rst_dt_OUT,
  UTMI_REG20_calib_rst_dt_en_OUT,
  UTMI_REG21_calib_triger_posedge_OUT,
  UTMI_REG21_auto_cal_enable_OUT,
  UTMI_REG21_absvalid_OUT,
  UTMI_REG21_absvalid_en_OUT,
  UTMI_REG21_vbusvalid_OUT,
  UTMI_REG21_vbusvalid_en_OUT,
  UTMI_REG21_suspendm_OUT,
  UTMI_REG21_suspendm_en_OUT,
  UTMI_REG22_bccalib_offset_OUT,
  UTMI_REG23_hscalib_offset_OUT,
  UTMI_REG24_fscalib_offset_OUT,
  UTMI_REG25_unused_OUT,
  UTMI_REG25_hscalib_OUT,
  UTMI_REG26_unused_OUT,
  UTMI_REG26_fscalib_OUT,
  UTMI_REG27_unused_OUT,
  UTMI_REG27_bccalib_OUT,
  UTMI_REG28_cdr_eb_wr_reset_OUT,
  UTMI_REG28_unused_OUT,
  UTMI_REG29_unused_OUT,
  UTMI_REG29_pll_standalone_OUT,
  UTMI_REG29_pll_standalone_en_OUT,
  UTMI_REG29_spare_out_OUT,
  UTMI_REG30_unused_OUT,
  UTMI_REG30_pll_480_clock_gate_ovr_OUT,
  UTMI_REG30_scan_ats_hs_clock_gate_ovr_OUT,
  UTMI_REG30_vco_pll_clock_gate_ovr_OUT,
  UTMI_REG30_dig_div_refclock_gate_ovr_OUT,
  UTMI_REG30_fb_clock_gate_ovr_OUT,
  UTMI_REG30_ana_div_refclock_gate_ovr_OUT,
  UTMI_REG30_hs_clock_gate_ovr_OUT,
  UTMI_UNUSED_REG0_unused_OUT,
  UTMI_UNUSED_REG1_unused_OUT,
  UTMI_UNUSED_REG2_unused_OUT,
  UTMI_UNUSED_REG3_unused_OUT,
  UTMI_REG31_unused_IN,
  UTMI_REG31_bist_error_IN,
  UTMI_REG31_bist_complete_IN,
  UTMI_REG32_bist_err_count_IN,
  UTMI_REG33_bg_powergood_IN,
  UTMI_REG33_afe_hsrx_diff_data_IN,
  UTMI_REG33_hsrx_en_IN,
  UTMI_REG33_hsrx_sampler_enable_IN,
  UTMI_REG33_chirp_mode_en_IN,
  UTMI_REG33_hstx_en_IN,
  UTMI_REG33_hstx_en_delayed_IN,
  UTMI_REG33_hstx_boost_deamp_off_IN,
  UTMI_REG34_o_dprpu1_en_IN,
  UTMI_REG34_o_dmrpu1_en_IN,
  UTMI_REG34_o_dprpu2_en_IN,
  UTMI_REG34_o_dmrpu2_en_IN,
  UTMI_REG34_o_dprpd_en_IN,
  UTMI_REG34_o_dmrpd_en_IN,
  UTMI_REG34_o_otgc_id_pullup_en_IN,
  UTMI_REG34_o_fs_edge_sel_IN,
  UTMI_REG35_i_afe_lsfsrx_ana_IN,
  UTMI_REG35_o_lsfstx_en_IN,
  UTMI_REG35_o_lsfsdrv_en_IN,
  UTMI_REG35_o_lsfs_ddi_IN,
  UTMI_REG35_o_assert_sezero_IN,
  UTMI_REG35_o_lsfsrx_en_IN,
  UTMI_REG35_o_serx_en_IN,
  UTMI_REG35_o_serx_bias_en_IN,
  UTMI_REG36_o_pll_pso_IN,
  UTMI_REG36_o_pll_pso_delay_IN,
  UTMI_REG36_o_pll_pd_IN,
  UTMI_REG36_o_pll_ipdiv_IN,
  UTMI_REG37_o_pll_fbdiv_value_IN,
  UTMI_REG38_o_pll_standby_IN,
  UTMI_REG38_o_pll_ldo_core_en_IN,
  UTMI_REG38_o_pll_ldo_ref_en_IN,
  UTMI_REG38_o_afe_suspendm_IN,
  UTMI_REG38_o_otgc_vbusvalid_en_IN,
  UTMI_REG38_o_otgc_absvalid_en_IN,
  UTMI_REG38_o_afe_clipper_en_IN,
  UTMI_REG38_o_pll_ldo_isolation_cntrl_IN,
  UTMI_REG39_unused_IN,
  UTMI_REG40_unused_IN,
  UTMI_REG41_i_ted_squelch_ana_IN,
  UTMI_REG41_i_usb2_rescal_calib_done_IN,
  UTMI_REG41_hs_calib_code_IN,
  UTMI_REG42_hs_sof_IN,
  UTMI_REG42_all_calib_done_IN,
  UTMI_REG42_fs_calib_code_IN,
  UTMI_REG43_ls_mode_IN,
  UTMI_REG43_fs_mode_pre_IN,
  UTMI_REG43_bc_calib_code_IN,
  UTMI_REG44_rstn_refclock_IN,
  UTMI_REG44_rstn_hs_clock_IN,
  UTMI_REG44_rstn_hs_tx_clock_IN,
  UTMI_REG44_rstn_byte_clock_IN,
  UTMI_REG44_rstn_sieclock_IN,
  UTMI_REG44_rstn_clkdiv_IN,
  UTMI_REG44_rstn_calib_clkdiv_IN,
  UTMI_REG44_udc_rstn_cdr_async_IN,
  UTMI_REG45_udc_calib_rstn_IN,
  UTMI_REG45_udc_apb_rstn_IN,
  UTMI_REG45_o_rstn_cdr_async_IN,
  UTMI_REG45_o_pll_calib_rstn_IN,
  UTMI_REG45_bist_mode_rstn_IN,
  UTMI_REG45_o_usb2_calib_rstn_IN,
  UTMI_REG45_udc_bc_calib_rstn_IN,
  UTMI_REG45_global_resetn_IN,
  UTMI_REG46_unused_IN,
  UTMI_REG46_recovery_cnt_en_IN,
  UTMI_REG46_clean_linestate_IN,
  UTMI_REG46_bc_state_machine_status_IN,
  UTMI_REG47_filter_cnt_en_IN,
  UTMI_REG47_host_opmode_IN,
  UTMI_REG47_dev_opmode_IN,
  UTMI_REG47_i_ded_ana_IN,
  UTMI_REG47_hs_hostdisconnect_IN,
  UTMI_REG47_lsfs_hostdisconnect_IN,
  UTMI_REG48_bist_tx_state_IN,
  UTMI_REG48_data_cnt_tx_IN,
  UTMI_REG49_bist_rx_state_IN,
  UTMI_REG49_data_cnt_rx_IN,
  UTMI_REG50_bist_top_state_IN,
  UTMI_REG50_inc_data_cnt_tx_IN,
  UTMI_REG50_inc_data_cnt_rx_IN,
  UTMI_REG50_o_bg_pd_IN,
  UTMI_REG50_o_bg_pd_bg_ok_IN,
  UTMI_REG51_powerdown_IN,
  UTMI_REG51_reset_IN,
  UTMI_REG51_suspendm_IN,
  UTMI_REG51_termselect_IN,
  UTMI_REG51_databus16_8_IN,
  UTMI_REG51_dppulldown_IN,
  UTMI_REG51_dmpulldown_IN,
  UTMI_REG52_lane_reverse_IN,
  UTMI_REG52_txbitstuffenable_IN,
  UTMI_REG52_txbitstuffenableh_IN,
  UTMI_REG52_xcvrselect_IN,
  UTMI_REG52_linestate_IN,
  UTMI_REG52_hostdisconnect_IN,
  UTMI_REG53_fslsserialmode_IN,
  UTMI_REG53_tx_enable_n_IN,
  UTMI_REG53_tx_dat_IN,
  UTMI_REG53_tx_se0_IN,
  UTMI_REG53_sleepm_IN,
  UTMI_REG53_unused_IN,
  UTMI_REG53_opmode_IN,
  UTMI_REG54_rx_dp_IN,
  UTMI_REG54_rx_dm_IN,
  UTMI_REG54_rx_rcv_IN,
  UTMI_REG54_unused_IN,
  UTMI_REG55_txvalidh_IN,
  UTMI_REG55_txvalid_IN,
  UTMI_REG55_txready_IN,
  UTMI_REG55_rxvalidh_IN,
  UTMI_REG55_rxvalid_IN,
  UTMI_REG55_rxactive_IN,
  UTMI_REG55_rxerror_IN,
  UTMI_REG55_unused_IN,
  UTMI_REG56_datain_upper_IN,
  UTMI_REG57_datain_lower_IN,
  UTMI_REG58_dataout_upper_IN,
  UTMI_REG59_dataout_lower_IN,
  UTMI_UNUSED_REG6_unused_IN,
  UTMI_UNUSED_REG7_unused_IN,
  PRDATA,
  PADDR,
  PWDATA,
  PWRITE,
  PSELx,
  PENABLE,
  PCLK,
  PRESETn
);
output [7:0]   PRDATA;
input  [7:0]   PADDR;
input  [7:0]   PWDATA;
input          PWRITE;
input          PSELx;
input          PENABLE;
input          PCLK;
input          PRESETn;
output [1:0]   UTMI_REG0_loopback_sel_OUT;
output         UTMI_REG0_loopback_en_OUT;
output [3:0]   UTMI_REG0_bist_mode_sel_OUT;
output         UTMI_REG0_bist_en_OUT;
output [1:0]   UTMI_REG1_bist_err_OUT;
output         UTMI_REG1_bist_soft_rst_OUT;
output         UTMI_REG1_tx_lsfs_soft_rst_OUT;
output         UTMI_REG1_tx_hs_soft_rst_OUT;
output         UTMI_REG1_clkdiv_soft_rst_OUT;
output         UTMI_REG1_calib_soft_rst_OUT;
output         UTMI_REG1_phy_soft_rst_OUT;
output         UTMI_REG2_rx_cntrl_soft_rst_OUT;
output         UTMI_REG2_shift_reg_soft_rst_OUT;
output         UTMI_REG2_bitunstuff_soft_rst_OUT;
output         UTMI_REG2_nrzi_dec_soft_rst_OUT;
output         UTMI_REG2_eop_det_soft_rst_OUT;
output         UTMI_REG2_sync_det_soft_rst_OUT;
output         UTMI_REG2_lsfs_dll_soft_rst_OUT;
output         UTMI_REG2_rx_hs_soft_rst_OUT;
output         UTMI_REG3_hs_rx_err_OUT;
output         UTMI_REG3_ls_linestate_fil_en_OUT;
output [4:0]   UTMI_REG3_fs_linestate_fil_cnt_OUT;
output         UTMI_REG3_fs_linestate_fil_en_OUT;
output [7:0]   UTMI_REG4_ls_linestate_fil_cnt_OUT;
output         UTMI_REG5_bist_mode_en_OUT;
output         UTMI_REG5_bist_on_OUT;
output         UTMI_REG5_hstx_boost_deamp_off_OUT;
output         UTMI_REG5_hstx_boost_OUT;
output         UTMI_REG5_hs_samp_OUT;
output         UTMI_REG5_hs_samp_en_OUT;
output         UTMI_REG5_hsrx_OUT;
output         UTMI_REG5_hsrx_en_OUT;
output         UTMI_REG6_vbusvalid_cntrl_OUT;
output         UTMI_REG6_vbusvalid_l3_dev_en_OUT;
output [4:0]   UTMI_REG6_hs_drven_threshold_OUT;
output         UTMI_REG6_hs_drven_th_en_OUT;
output         UTMI_REG7_hstx_bc_mode_OUT;
output         UTMI_REG7_hstx_bc_en_OUT;
output         UTMI_REG7_hstx_chirp_mode_OUT;
output         UTMI_REG7_hstx_chirp_en_OUT;
output         UTMI_REG7_hstx_en_del_OUT;
output         UTMI_REG7_hstx_en_del_en_OUT;
output         UTMI_REG7_hstx_OUT;
output         UTMI_REG7_hstx_en_OUT;
output         UTMI_REG8_hs_term_OUT;
output         UTMI_REG8_hs_term_en_OUT;
output         UTMI_REG8_hstx_data_OUT;
output         UTMI_REG8_hstx_data_en_OUT;
output         UTMI_REG8_hstx_drv_OUT;
output         UTMI_REG8_hstx_drv_en_OUT;
output         UTMI_REG8_hstx_predrv_OUT;
output         UTMI_REG8_hstx_predrv_en_OUT;
output         UTMI_REG9_clkoff_en_OUT;
output [2:0]   UTMI_REG9_sdc_space_OUT;
output         UTMI_REG9_sdc_space_en_OUT;
output [1:0]   UTMI_REG9_hstx_en_del_th_OUT;
output         UTMI_REG9_hstx_en_del_th_en_OUT;
output         UTMI_REG10_pll_clkon_OUT;
output         UTMI_REG10_pll_clkon_en_OUT;
output         UTMI_REG10_bg_pd_bg_ok_OUT;
output         UTMI_REG10_bg_pd_bg_ok_en_OUT;
output         UTMI_REG10_lsfs_serx_OUT;
output         UTMI_REG10_lsfs_serx_en_OUT;
output         UTMI_REG10_lsfs_rx_OUT;
output         UTMI_REG10_lsfs_rx_en_OUT;
output         UTMI_REG11_clean_linestate_serx_mask_en_OUT;
output         UTMI_REG11_serx_mask_en_OUT;
output [1:0]   UTMI_REG11_serx_mask_threshold_OUT;
output         UTMI_REG11_lsfs_tx_OUT;
output         UTMI_REG11_lsfs_tx_en_OUT;
output         UTMI_REG11_fsls_edgesel_OUT;
output         UTMI_REG11_fsls_edgesel_en_OUT;
output [1:0]   UTMI_REG12_serx_bias_en_OUT;
output         UTMI_REG12_fsls_tx_data_OUT;
output         UTMI_REG12_fsls_tx_data_en_OUT;
output         UTMI_REG12_fsls_tx_se0_OUT;
output         UTMI_REG12_fsls_tx_se0_en_OUT;
output         UTMI_REG12_fsls_tx_drv_OUT;
output         UTMI_REG12_fsls_tx_drv_en_OUT;
output         UTMI_REG13_fsls_serialmode_pullup2_OUT;
output         UTMI_REG13_fsls_serialmode_pullup2_en_OUT;
output         UTMI_REG13_dm_pulldown_OUT;
output         UTMI_REG13_dm_pulldown_en_OUT;
output         UTMI_REG13_dp_pulldown_OUT;
output         UTMI_REG13_dp_pulldown_en_OUT;
output         UTMI_REG13_lane_reverse_OUT;
output         UTMI_REG13_lane_reverse_en_OUT;
output         UTMI_REG14_dm_pullup2_OUT;
output         UTMI_REG14_dm_pullup2_en_OUT;
output         UTMI_REG14_dp_pullup2_OUT;
output         UTMI_REG14_dp_pullup2_en_OUT;
output         UTMI_REG14_dm_pullup1_OUT;
output         UTMI_REG14_dm_pullup1_en_OUT;
output         UTMI_REG14_dp_pullup1_OUT;
output         UTMI_REG14_dp_pullup1_en_OUT;
output [1:0]   UTMI_REG15_txvalid_gate_threshold_fs_OUT;
output [1:0]   UTMI_REG15_txvalid_gate_threshold_hs_OUT;
output         UTMI_REG15_ted_en_value_OUT;
output         UTMI_REG15_ted_en_cnt_OUT;
output         UTMI_REG15_ed_en_value_OUT;
output         UTMI_REG15_ed_en_cnt_OUT;
output [7:0]   UTMI_REG16_unused_OUT;
output [1:0]   UTMI_REG17_squelch_count_idle_OUT;
output         UTMI_REG17_squelch_count_idle_en_OUT;
output [3:0]   UTMI_REG17_tx_sq_cnt_OUT;
output         UTMI_REG17_tx_sq_cnt_en_OUT;
output         UTMI_REG18_sleep_value_OUT;
output         UTMI_REG18_sleep_en_OUT;
output         UTMI_REG18_bist_powerup_OUT;
output         UTMI_REG18_bist_powerup_en_OUT;
output         UTMI_REG18_powerup_en_OUT;
output         UTMI_REG18_unused_OUT;
output         UTMI_REG18_clipper_en_OUT;
output         UTMI_REG18_clipper_en_en_OUT;
output [6:0]   UTMI_REG19_unused_OUT;
output         UTMI_REG19_ted_sw_en_OUT;
output         UTMI_REG20_hostdiscon_rst_reg_OUT;
output         UTMI_REG20_hostdiscon_rst_reg_en_OUT;
output [4:0]   UTMI_REG20_calib_rst_dt_OUT;
output         UTMI_REG20_calib_rst_dt_en_OUT;
output         UTMI_REG21_calib_triger_posedge_OUT;
output         UTMI_REG21_auto_cal_enable_OUT;
output         UTMI_REG21_absvalid_OUT;
output         UTMI_REG21_absvalid_en_OUT;
output         UTMI_REG21_vbusvalid_OUT;
output         UTMI_REG21_vbusvalid_en_OUT;
output         UTMI_REG21_suspendm_OUT;
output         UTMI_REG21_suspendm_en_OUT;
output [7:0]   UTMI_REG22_bccalib_offset_OUT;
output [7:0]   UTMI_REG23_hscalib_offset_OUT;
output [7:0]   UTMI_REG24_fscalib_offset_OUT;
output         UTMI_REG25_unused_OUT;
output [6:0]   UTMI_REG25_hscalib_OUT;
output         UTMI_REG26_unused_OUT;
output [6:0]   UTMI_REG26_fscalib_OUT;
output         UTMI_REG27_unused_OUT;
output [6:0]   UTMI_REG27_bccalib_OUT;
output         UTMI_REG28_cdr_eb_wr_reset_OUT;
output [6:0]   UTMI_REG28_unused_OUT;
output [1:0]   UTMI_REG29_unused_OUT;
output         UTMI_REG29_pll_standalone_OUT;
output         UTMI_REG29_pll_standalone_en_OUT;
output [3:0]   UTMI_REG29_spare_out_OUT;
output         UTMI_REG30_unused_OUT;
output         UTMI_REG30_pll_480_clock_gate_ovr_OUT;
output         UTMI_REG30_scan_ats_hs_clock_gate_ovr_OUT;
output         UTMI_REG30_vco_pll_clock_gate_ovr_OUT;
output         UTMI_REG30_dig_div_refclock_gate_ovr_OUT;
output         UTMI_REG30_fb_clock_gate_ovr_OUT;
output         UTMI_REG30_ana_div_refclock_gate_ovr_OUT;
output         UTMI_REG30_hs_clock_gate_ovr_OUT;
output [7:0]   UTMI_UNUSED_REG0_unused_OUT;
output [7:0]   UTMI_UNUSED_REG1_unused_OUT;
output [7:0]   UTMI_UNUSED_REG2_unused_OUT;
output [7:0]   UTMI_UNUSED_REG3_unused_OUT;
input  [5:0]   UTMI_REG31_unused_IN;
input          UTMI_REG31_bist_error_IN;
input          UTMI_REG31_bist_complete_IN;
input  [7:0]   UTMI_REG32_bist_err_count_IN;
input          UTMI_REG33_bg_powergood_IN;
input          UTMI_REG33_afe_hsrx_diff_data_IN;
input          UTMI_REG33_hsrx_en_IN;
input          UTMI_REG33_hsrx_sampler_enable_IN;
input          UTMI_REG33_chirp_mode_en_IN;
input          UTMI_REG33_hstx_en_IN;
input          UTMI_REG33_hstx_en_delayed_IN;
input          UTMI_REG33_hstx_boost_deamp_off_IN;
input          UTMI_REG34_o_dprpu1_en_IN;
input          UTMI_REG34_o_dmrpu1_en_IN;
input          UTMI_REG34_o_dprpu2_en_IN;
input          UTMI_REG34_o_dmrpu2_en_IN;
input          UTMI_REG34_o_dprpd_en_IN;
input          UTMI_REG34_o_dmrpd_en_IN;
input          UTMI_REG34_o_otgc_id_pullup_en_IN;
input          UTMI_REG34_o_fs_edge_sel_IN;
input          UTMI_REG35_i_afe_lsfsrx_ana_IN;
input          UTMI_REG35_o_lsfstx_en_IN;
input          UTMI_REG35_o_lsfsdrv_en_IN;
input          UTMI_REG35_o_lsfs_ddi_IN;
input          UTMI_REG35_o_assert_sezero_IN;
input          UTMI_REG35_o_lsfsrx_en_IN;
input          UTMI_REG35_o_serx_en_IN;
input          UTMI_REG35_o_serx_bias_en_IN;
input          UTMI_REG36_o_pll_pso_IN;
input          UTMI_REG36_o_pll_pso_delay_IN;
input          UTMI_REG36_o_pll_pd_IN;
input  [4:0]   UTMI_REG36_o_pll_ipdiv_IN;
input  [7:0]   UTMI_REG37_o_pll_fbdiv_value_IN;
input          UTMI_REG38_o_pll_standby_IN;
input          UTMI_REG38_o_pll_ldo_core_en_IN;
input          UTMI_REG38_o_pll_ldo_ref_en_IN;
input          UTMI_REG38_o_afe_suspendm_IN;
input          UTMI_REG38_o_otgc_vbusvalid_en_IN;
input          UTMI_REG38_o_otgc_absvalid_en_IN;
input          UTMI_REG38_o_afe_clipper_en_IN;
input          UTMI_REG38_o_pll_ldo_isolation_cntrl_IN;
input  [7:0]   UTMI_REG39_unused_IN;
input  [7:0]   UTMI_REG40_unused_IN;
input          UTMI_REG41_i_ted_squelch_ana_IN;
input          UTMI_REG41_i_usb2_rescal_calib_done_IN;
input  [5:0]   UTMI_REG41_hs_calib_code_IN;
input          UTMI_REG42_hs_sof_IN;
input          UTMI_REG42_all_calib_done_IN;
input  [5:0]   UTMI_REG42_fs_calib_code_IN;
input          UTMI_REG43_ls_mode_IN;
input          UTMI_REG43_fs_mode_pre_IN;
input  [5:0]   UTMI_REG43_bc_calib_code_IN;
input          UTMI_REG44_rstn_refclock_IN;
input          UTMI_REG44_rstn_hs_clock_IN;
input          UTMI_REG44_rstn_hs_tx_clock_IN;
input          UTMI_REG44_rstn_byte_clock_IN;
input          UTMI_REG44_rstn_sieclock_IN;
input          UTMI_REG44_rstn_clkdiv_IN;
input          UTMI_REG44_rstn_calib_clkdiv_IN;
input          UTMI_REG44_udc_rstn_cdr_async_IN;
input          UTMI_REG45_udc_calib_rstn_IN;
input          UTMI_REG45_udc_apb_rstn_IN;
input          UTMI_REG45_o_rstn_cdr_async_IN;
input          UTMI_REG45_o_pll_calib_rstn_IN;
input          UTMI_REG45_bist_mode_rstn_IN;
input          UTMI_REG45_o_usb2_calib_rstn_IN;
input          UTMI_REG45_udc_bc_calib_rstn_IN;
input          UTMI_REG45_global_resetn_IN;
input          UTMI_REG46_unused_IN;
input          UTMI_REG46_recovery_cnt_en_IN;
input  [1:0]   UTMI_REG46_clean_linestate_IN;
input  [3:0]   UTMI_REG46_bc_state_machine_status_IN;
input          UTMI_REG47_filter_cnt_en_IN;
input  [1:0]   UTMI_REG47_host_opmode_IN;
input  [1:0]   UTMI_REG47_dev_opmode_IN;
input          UTMI_REG47_i_ded_ana_IN;
input          UTMI_REG47_hs_hostdisconnect_IN;
input          UTMI_REG47_lsfs_hostdisconnect_IN;
input  [1:0]   UTMI_REG48_bist_tx_state_IN;
input  [5:0]   UTMI_REG48_data_cnt_tx_IN;
input  [1:0]   UTMI_REG49_bist_rx_state_IN;
input  [5:0]   UTMI_REG49_data_cnt_rx_IN;
input  [3:0]   UTMI_REG50_bist_top_state_IN;
input          UTMI_REG50_inc_data_cnt_tx_IN;
input          UTMI_REG50_inc_data_cnt_rx_IN;
input          UTMI_REG50_o_bg_pd_IN;
input          UTMI_REG50_o_bg_pd_bg_ok_IN;
input  [1:0]   UTMI_REG51_powerdown_IN;
input          UTMI_REG51_reset_IN;
input          UTMI_REG51_suspendm_IN;
input          UTMI_REG51_termselect_IN;
input          UTMI_REG51_databus16_8_IN;
input          UTMI_REG51_dppulldown_IN;
input          UTMI_REG51_dmpulldown_IN;
input          UTMI_REG52_lane_reverse_IN;
input          UTMI_REG52_txbitstuffenable_IN;
input          UTMI_REG52_txbitstuffenableh_IN;
input  [1:0]   UTMI_REG52_xcvrselect_IN;
input  [1:0]   UTMI_REG52_linestate_IN;
input          UTMI_REG52_hostdisconnect_IN;
input          UTMI_REG53_fslsserialmode_IN;
input          UTMI_REG53_tx_enable_n_IN;
input          UTMI_REG53_tx_dat_IN;
input          UTMI_REG53_tx_se0_IN;
input          UTMI_REG53_sleepm_IN;
input          UTMI_REG53_unused_IN;
input  [1:0]   UTMI_REG53_opmode_IN;
input          UTMI_REG54_rx_dp_IN;
input          UTMI_REG54_rx_dm_IN;
input          UTMI_REG54_rx_rcv_IN;
input  [4:0]   UTMI_REG54_unused_IN;
input          UTMI_REG55_txvalidh_IN;
input          UTMI_REG55_txvalid_IN;
input          UTMI_REG55_txready_IN;
input          UTMI_REG55_rxvalidh_IN;
input          UTMI_REG55_rxvalid_IN;
input          UTMI_REG55_rxactive_IN;
input          UTMI_REG55_rxerror_IN;
input          UTMI_REG55_unused_IN;
input  [7:0]   UTMI_REG56_datain_upper_IN;
input  [7:0]   UTMI_REG57_datain_lower_IN;
input  [7:0]   UTMI_REG58_dataout_upper_IN;
input  [7:0]   UTMI_REG59_dataout_lower_IN;
input  [7:0]   UTMI_UNUSED_REG6_unused_IN;
input  [7:0]   UTMI_UNUSED_REG7_unused_IN;
reg [7:0]   PRDATA;
reg [1:0]   UTMI_REG0_loopback_sel;
reg         UTMI_REG0_loopback_en;
reg [3:0]   UTMI_REG0_bist_mode_sel;
reg         UTMI_REG0_bist_en;
reg [1:0]   UTMI_REG1_bist_err;
reg         UTMI_REG1_bist_soft_rst;
reg         UTMI_REG1_tx_lsfs_soft_rst;
reg         UTMI_REG1_tx_hs_soft_rst;
reg         UTMI_REG1_clkdiv_soft_rst;
reg         UTMI_REG1_calib_soft_rst;
reg         UTMI_REG1_phy_soft_rst;
reg         UTMI_REG2_rx_cntrl_soft_rst;
reg         UTMI_REG2_shift_reg_soft_rst;
reg         UTMI_REG2_bitunstuff_soft_rst;
reg         UTMI_REG2_nrzi_dec_soft_rst;
reg         UTMI_REG2_eop_det_soft_rst;
reg         UTMI_REG2_sync_det_soft_rst;
reg         UTMI_REG2_lsfs_dll_soft_rst;
reg         UTMI_REG2_rx_hs_soft_rst;
reg         UTMI_REG3_hs_rx_err;
reg         UTMI_REG3_ls_linestate_fil_en;
reg [4:0]   UTMI_REG3_fs_linestate_fil_cnt;
reg         UTMI_REG3_fs_linestate_fil_en;
reg [7:0]   UTMI_REG4_ls_linestate_fil_cnt;
reg         UTMI_REG5_bist_mode_en;
reg         UTMI_REG5_bist_on;
reg         UTMI_REG5_hstx_boost_deamp_off;
reg         UTMI_REG5_hstx_boost;
reg         UTMI_REG5_hs_samp;
reg         UTMI_REG5_hs_samp_en;
reg         UTMI_REG5_hsrx;
reg         UTMI_REG5_hsrx_en;
reg         UTMI_REG6_vbusvalid_cntrl;
reg         UTMI_REG6_vbusvalid_l3_dev_en;
reg [4:0]   UTMI_REG6_hs_drven_threshold;
reg         UTMI_REG6_hs_drven_th_en;
reg         UTMI_REG7_hstx_bc_mode;
reg         UTMI_REG7_hstx_bc_en;
reg         UTMI_REG7_hstx_chirp_mode;
reg         UTMI_REG7_hstx_chirp_en;
reg         UTMI_REG7_hstx_en_del;
reg         UTMI_REG7_hstx_en_del_en;
reg         UTMI_REG7_hstx;
reg         UTMI_REG7_hstx_en;
reg         UTMI_REG8_hs_term;
reg         UTMI_REG8_hs_term_en;
reg         UTMI_REG8_hstx_data;
reg         UTMI_REG8_hstx_data_en;
reg         UTMI_REG8_hstx_drv;
reg         UTMI_REG8_hstx_drv_en;
reg         UTMI_REG8_hstx_predrv;
reg         UTMI_REG8_hstx_predrv_en;
reg         UTMI_REG9_clkoff_en;
reg [2:0]   UTMI_REG9_sdc_space;
reg         UTMI_REG9_sdc_space_en;
reg [1:0]   UTMI_REG9_hstx_en_del_th;
reg         UTMI_REG9_hstx_en_del_th_en;
reg         UTMI_REG10_pll_clkon;
reg         UTMI_REG10_pll_clkon_en;
reg         UTMI_REG10_bg_pd_bg_ok;
reg         UTMI_REG10_bg_pd_bg_ok_en;
reg         UTMI_REG10_lsfs_serx;
reg         UTMI_REG10_lsfs_serx_en;
reg         UTMI_REG10_lsfs_rx;
reg         UTMI_REG10_lsfs_rx_en;
reg         UTMI_REG11_clean_linestate_serx_mask_en;
reg         UTMI_REG11_serx_mask_en;
reg [1:0]   UTMI_REG11_serx_mask_threshold;
reg         UTMI_REG11_lsfs_tx;
reg         UTMI_REG11_lsfs_tx_en;
reg         UTMI_REG11_fsls_edgesel;
reg         UTMI_REG11_fsls_edgesel_en;
reg [1:0]   UTMI_REG12_serx_bias_en;
reg         UTMI_REG12_fsls_tx_data;
reg         UTMI_REG12_fsls_tx_data_en;
reg         UTMI_REG12_fsls_tx_se0;
reg         UTMI_REG12_fsls_tx_se0_en;
reg         UTMI_REG12_fsls_tx_drv;
reg         UTMI_REG12_fsls_tx_drv_en;
reg         UTMI_REG13_fsls_serialmode_pullup2;
reg         UTMI_REG13_fsls_serialmode_pullup2_en;
reg         UTMI_REG13_dm_pulldown;
reg         UTMI_REG13_dm_pulldown_en;
reg         UTMI_REG13_dp_pulldown;
reg         UTMI_REG13_dp_pulldown_en;
reg         UTMI_REG13_lane_reverse;
reg         UTMI_REG13_lane_reverse_en;
reg         UTMI_REG14_dm_pullup2;
reg         UTMI_REG14_dm_pullup2_en;
reg         UTMI_REG14_dp_pullup2;
reg         UTMI_REG14_dp_pullup2_en;
reg         UTMI_REG14_dm_pullup1;
reg         UTMI_REG14_dm_pullup1_en;
reg         UTMI_REG14_dp_pullup1;
reg         UTMI_REG14_dp_pullup1_en;
reg [1:0]   UTMI_REG15_txvalid_gate_threshold_fs;
reg [1:0]   UTMI_REG15_txvalid_gate_threshold_hs;
reg         UTMI_REG15_ted_en_value;
reg         UTMI_REG15_ted_en_cnt;
reg         UTMI_REG15_ed_en_value;
reg         UTMI_REG15_ed_en_cnt;
reg [7:0]   UTMI_REG16_unused;
reg [1:0]   UTMI_REG17_squelch_count_idle;
reg         UTMI_REG17_squelch_count_idle_en;
reg [3:0]   UTMI_REG17_tx_sq_cnt;
reg         UTMI_REG17_tx_sq_cnt_en;
reg         UTMI_REG18_sleep_value;
reg         UTMI_REG18_sleep_en;
reg         UTMI_REG18_bist_powerup;
reg         UTMI_REG18_bist_powerup_en;
reg         UTMI_REG18_powerup_en;
reg         UTMI_REG18_unused;
reg         UTMI_REG18_clipper_en;
reg         UTMI_REG18_clipper_en_en;
reg [6:0]   UTMI_REG19_unused;
reg         UTMI_REG19_ted_sw_en;
reg         UTMI_REG20_hostdiscon_rst_reg;
reg         UTMI_REG20_hostdiscon_rst_reg_en;
reg [4:0]   UTMI_REG20_calib_rst_dt;
reg         UTMI_REG20_calib_rst_dt_en;
reg         UTMI_REG21_calib_triger_posedge;
reg         UTMI_REG21_auto_cal_enable;
reg         UTMI_REG21_absvalid;
reg         UTMI_REG21_absvalid_en;
reg         UTMI_REG21_vbusvalid;
reg         UTMI_REG21_vbusvalid_en;
reg         UTMI_REG21_suspendm;
reg         UTMI_REG21_suspendm_en;
reg [7:0]   UTMI_REG22_bccalib_offset;
reg [7:0]   UTMI_REG23_hscalib_offset;
reg [7:0]   UTMI_REG24_fscalib_offset;
reg         UTMI_REG25_unused;
reg [6:0]   UTMI_REG25_hscalib;
reg         UTMI_REG26_unused;
reg [6:0]   UTMI_REG26_fscalib;
reg         UTMI_REG27_unused;
reg [6:0]   UTMI_REG27_bccalib;
reg         UTMI_REG28_cdr_eb_wr_reset;
reg [6:0]   UTMI_REG28_unused;
reg [1:0]   UTMI_REG29_unused;
reg         UTMI_REG29_pll_standalone;
reg         UTMI_REG29_pll_standalone_en;
reg [3:0]   UTMI_REG29_spare_out;
reg         UTMI_REG30_unused;
reg         UTMI_REG30_pll_480_clock_gate_ovr;
reg         UTMI_REG30_scan_ats_hs_clock_gate_ovr;
reg         UTMI_REG30_vco_pll_clock_gate_ovr;
reg         UTMI_REG30_dig_div_refclock_gate_ovr;
reg         UTMI_REG30_fb_clock_gate_ovr;
reg         UTMI_REG30_ana_div_refclock_gate_ovr;
reg         UTMI_REG30_hs_clock_gate_ovr;
reg [7:0]   UTMI_UNUSED_REG0_unused;
reg [7:0]   UTMI_UNUSED_REG1_unused;
reg [7:0]   UTMI_UNUSED_REG2_unused;
reg [7:0]   UTMI_UNUSED_REG3_unused;
localparam UTMI_REG0_REG_OFFSET = 8'b10100000;
localparam UTMI_REG0_loopback_sel_BIT_RESET = 2'b00;
localparam UTMI_REG0_loopback_en_BIT_RESET = 1'b0;
localparam UTMI_REG0_bist_mode_sel_BIT_RESET = 4'b0000;
localparam UTMI_REG0_bist_en_BIT_RESET = 1'b0;
localparam UTMI_REG1_REG_OFFSET = 8'b10100001;
localparam UTMI_REG1_bist_err_BIT_RESET = 2'b00;
localparam UTMI_REG1_bist_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG1_tx_lsfs_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG1_tx_hs_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG1_clkdiv_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG1_calib_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG1_phy_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG2_REG_OFFSET = 8'b10100010;
localparam UTMI_REG2_rx_cntrl_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG2_shift_reg_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG2_bitunstuff_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG2_nrzi_dec_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG2_eop_det_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG2_sync_det_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG2_lsfs_dll_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG2_rx_hs_soft_rst_BIT_RESET = 1'b0;
localparam UTMI_REG3_REG_OFFSET = 8'b10100011;
localparam UTMI_REG3_hs_rx_err_BIT_RESET = 1'b0;
localparam UTMI_REG3_ls_linestate_fil_en_BIT_RESET = 1'b0;
localparam UTMI_REG3_fs_linestate_fil_cnt_BIT_RESET = 5'b00000;
localparam UTMI_REG3_fs_linestate_fil_en_BIT_RESET = 1'b0;
localparam UTMI_REG4_REG_OFFSET = 8'b10100100;
localparam UTMI_REG4_ls_linestate_fil_cnt_BIT_RESET = 8'b00000000;
localparam UTMI_REG5_REG_OFFSET = 8'b10100101;
localparam UTMI_REG5_bist_mode_en_BIT_RESET = 1'b0;
localparam UTMI_REG5_bist_on_BIT_RESET = 1'b0;
localparam UTMI_REG5_hstx_boost_deamp_off_BIT_RESET = 1'b0;
localparam UTMI_REG5_hstx_boost_BIT_RESET = 1'b0;
localparam UTMI_REG5_hs_samp_BIT_RESET = 1'b0;
localparam UTMI_REG5_hs_samp_en_BIT_RESET = 1'b0;
localparam UTMI_REG5_hsrx_BIT_RESET = 1'b0;
localparam UTMI_REG5_hsrx_en_BIT_RESET = 1'b0;
localparam UTMI_REG6_REG_OFFSET = 8'b10100110;
localparam UTMI_REG6_vbusvalid_cntrl_BIT_RESET = 1'b0;
localparam UTMI_REG6_vbusvalid_l3_dev_en_BIT_RESET = 1'b0;
localparam UTMI_REG6_hs_drven_threshold_BIT_RESET = 5'b00000;
localparam UTMI_REG6_hs_drven_th_en_BIT_RESET = 1'b0;
localparam UTMI_REG7_REG_OFFSET = 8'b10100111;
localparam UTMI_REG7_hstx_bc_mode_BIT_RESET = 1'b0;
localparam UTMI_REG7_hstx_bc_en_BIT_RESET = 1'b0;
localparam UTMI_REG7_hstx_chirp_mode_BIT_RESET = 1'b0;
localparam UTMI_REG7_hstx_chirp_en_BIT_RESET = 1'b0;
localparam UTMI_REG7_hstx_en_del_BIT_RESET = 1'b0;
localparam UTMI_REG7_hstx_en_del_en_BIT_RESET = 1'b0;
localparam UTMI_REG7_hstx_BIT_RESET = 1'b0;
localparam UTMI_REG7_hstx_en_BIT_RESET = 1'b0;
localparam UTMI_REG8_REG_OFFSET = 8'b10101000;
localparam UTMI_REG8_hs_term_BIT_RESET = 1'b0;
localparam UTMI_REG8_hs_term_en_BIT_RESET = 1'b0;
localparam UTMI_REG8_hstx_data_BIT_RESET = 1'b0;
localparam UTMI_REG8_hstx_data_en_BIT_RESET = 1'b0;
localparam UTMI_REG8_hstx_drv_BIT_RESET = 1'b0;
localparam UTMI_REG8_hstx_drv_en_BIT_RESET = 1'b0;
localparam UTMI_REG8_hstx_predrv_BIT_RESET = 1'b0;
localparam UTMI_REG8_hstx_predrv_en_BIT_RESET = 1'b0;
localparam UTMI_REG9_REG_OFFSET = 8'b10101001;
localparam UTMI_REG9_clkoff_en_BIT_RESET = 1'b0;
localparam UTMI_REG9_sdc_space_BIT_RESET = 3'b000;
localparam UTMI_REG9_sdc_space_en_BIT_RESET = 1'b0;
localparam UTMI_REG9_hstx_en_del_th_BIT_RESET = 2'b00;
localparam UTMI_REG9_hstx_en_del_th_en_BIT_RESET = 1'b0;
localparam UTMI_REG10_REG_OFFSET = 8'b10101010;
localparam UTMI_REG10_pll_clkon_BIT_RESET = 1'b0;
localparam UTMI_REG10_pll_clkon_en_BIT_RESET = 1'b0;
localparam UTMI_REG10_bg_pd_bg_ok_BIT_RESET = 1'b0;
localparam UTMI_REG10_bg_pd_bg_ok_en_BIT_RESET = 1'b0;
localparam UTMI_REG10_lsfs_serx_BIT_RESET = 1'b0;
localparam UTMI_REG10_lsfs_serx_en_BIT_RESET = 1'b0;
localparam UTMI_REG10_lsfs_rx_BIT_RESET = 1'b0;
localparam UTMI_REG10_lsfs_rx_en_BIT_RESET = 1'b0;
localparam UTMI_REG11_REG_OFFSET = 8'b10101011;
localparam UTMI_REG11_clean_linestate_serx_mask_en_BIT_RESET = 1'b0;
localparam UTMI_REG11_serx_mask_en_BIT_RESET = 1'b0;
localparam UTMI_REG11_serx_mask_threshold_BIT_RESET = 2'b00;
localparam UTMI_REG11_lsfs_tx_BIT_RESET = 1'b0;
localparam UTMI_REG11_lsfs_tx_en_BIT_RESET = 1'b0;
localparam UTMI_REG11_fsls_edgesel_BIT_RESET = 1'b0;
localparam UTMI_REG11_fsls_edgesel_en_BIT_RESET = 1'b0;
localparam UTMI_REG12_REG_OFFSET = 8'b10101100;
localparam UTMI_REG12_serx_bias_en_BIT_RESET = 2'b00;
localparam UTMI_REG12_fsls_tx_data_BIT_RESET = 1'b0;
localparam UTMI_REG12_fsls_tx_data_en_BIT_RESET = 1'b0;
localparam UTMI_REG12_fsls_tx_se0_BIT_RESET = 1'b0;
localparam UTMI_REG12_fsls_tx_se0_en_BIT_RESET = 1'b0;
localparam UTMI_REG12_fsls_tx_drv_BIT_RESET = 1'b0;
localparam UTMI_REG12_fsls_tx_drv_en_BIT_RESET = 1'b0;
localparam UTMI_REG13_REG_OFFSET = 8'b10101101;
localparam UTMI_REG13_fsls_serialmode_pullup2_BIT_RESET = 1'b0;
localparam UTMI_REG13_fsls_serialmode_pullup2_en_BIT_RESET = 1'b0;
localparam UTMI_REG13_dm_pulldown_BIT_RESET = 1'b0;
localparam UTMI_REG13_dm_pulldown_en_BIT_RESET = 1'b0;
localparam UTMI_REG13_dp_pulldown_BIT_RESET = 1'b0;
localparam UTMI_REG13_dp_pulldown_en_BIT_RESET = 1'b0;
localparam UTMI_REG13_lane_reverse_BIT_RESET = 1'b0;
localparam UTMI_REG13_lane_reverse_en_BIT_RESET = 1'b0;
localparam UTMI_REG14_REG_OFFSET = 8'b10101110;
localparam UTMI_REG14_dm_pullup2_BIT_RESET = 1'b0;
localparam UTMI_REG14_dm_pullup2_en_BIT_RESET = 1'b0;
localparam UTMI_REG14_dp_pullup2_BIT_RESET = 1'b0;
localparam UTMI_REG14_dp_pullup2_en_BIT_RESET = 1'b0;
localparam UTMI_REG14_dm_pullup1_BIT_RESET = 1'b0;
localparam UTMI_REG14_dm_pullup1_en_BIT_RESET = 1'b0;
localparam UTMI_REG14_dp_pullup1_BIT_RESET = 1'b0;
localparam UTMI_REG14_dp_pullup1_en_BIT_RESET = 1'b0;
localparam UTMI_REG15_REG_OFFSET = 8'b10101111;
localparam UTMI_REG15_txvalid_gate_threshold_fs_BIT_RESET = 2'b00;
localparam UTMI_REG15_txvalid_gate_threshold_hs_BIT_RESET = 2'b00;
localparam UTMI_REG15_ted_en_value_BIT_RESET = 1'b0;
localparam UTMI_REG15_ted_en_cnt_BIT_RESET = 1'b0;
localparam UTMI_REG15_ed_en_value_BIT_RESET = 1'b0;
localparam UTMI_REG15_ed_en_cnt_BIT_RESET = 1'b0;
localparam UTMI_REG16_REG_OFFSET = 8'b10110000;
localparam UTMI_REG16_unused_BIT_RESET = 8'b00000000;
localparam UTMI_REG17_REG_OFFSET = 8'b10110001;
localparam UTMI_REG17_squelch_count_idle_BIT_RESET = 2'b00;
localparam UTMI_REG17_squelch_count_idle_en_BIT_RESET = 1'b0;
localparam UTMI_REG17_tx_sq_cnt_BIT_RESET = 4'b0000;
localparam UTMI_REG17_tx_sq_cnt_en_BIT_RESET = 1'b0;
localparam UTMI_REG18_REG_OFFSET = 8'b10110010;
localparam UTMI_REG18_sleep_value_BIT_RESET = 1'b0;
localparam UTMI_REG18_sleep_en_BIT_RESET = 1'b0;
localparam UTMI_REG18_bist_powerup_BIT_RESET = 1'b0;
localparam UTMI_REG18_bist_powerup_en_BIT_RESET = 1'b0;
localparam UTMI_REG18_powerup_en_BIT_RESET = 1'b0;
localparam UTMI_REG18_unused_BIT_RESET = 1'b0;
localparam UTMI_REG18_clipper_en_BIT_RESET = 1'b0;
localparam UTMI_REG18_clipper_en_en_BIT_RESET = 1'b0;
localparam UTMI_REG19_REG_OFFSET = 8'b10110011;
localparam UTMI_REG19_unused_BIT_RESET = 7'b0000000;
localparam UTMI_REG19_ted_sw_en_BIT_RESET = 1'b0;
localparam UTMI_REG20_REG_OFFSET = 8'b10110100;
localparam UTMI_REG20_hostdiscon_rst_reg_BIT_RESET = 1'b0;
localparam UTMI_REG20_hostdiscon_rst_reg_en_BIT_RESET = 1'b0;
localparam UTMI_REG20_calib_rst_dt_BIT_RESET = 5'b00000;
localparam UTMI_REG20_calib_rst_dt_en_BIT_RESET = 1'b0;
localparam UTMI_REG21_REG_OFFSET = 8'b10110101;
localparam UTMI_REG21_calib_triger_posedge_BIT_RESET = 1'b0;
localparam UTMI_REG21_auto_cal_enable_BIT_RESET = 1'b0;
localparam UTMI_REG21_absvalid_BIT_RESET = 1'b0;
localparam UTMI_REG21_absvalid_en_BIT_RESET = 1'b0;
localparam UTMI_REG21_vbusvalid_BIT_RESET = 1'b0;
localparam UTMI_REG21_vbusvalid_en_BIT_RESET = 1'b0;
localparam UTMI_REG21_suspendm_BIT_RESET = 1'b0;
localparam UTMI_REG21_suspendm_en_BIT_RESET = 1'b0;
localparam UTMI_REG22_REG_OFFSET = 8'b10110110;
localparam UTMI_REG22_bccalib_offset_BIT_RESET = 8'b00000000;
localparam UTMI_REG23_REG_OFFSET = 8'b10110111;
localparam UTMI_REG23_hscalib_offset_BIT_RESET = 8'b00000000;
localparam UTMI_REG24_REG_OFFSET = 8'b10111000;
localparam UTMI_REG24_fscalib_offset_BIT_RESET = 8'b00000000;
localparam UTMI_REG25_REG_OFFSET = 8'b10111001;
localparam UTMI_REG25_unused_BIT_RESET = 1'b0;
localparam UTMI_REG25_hscalib_BIT_RESET = 7'b0000000;
localparam UTMI_REG26_REG_OFFSET = 8'b10111010;
localparam UTMI_REG26_unused_BIT_RESET = 1'b0;
localparam UTMI_REG26_fscalib_BIT_RESET = 7'b0000000;
localparam UTMI_REG27_REG_OFFSET = 8'b10111011;
localparam UTMI_REG27_unused_BIT_RESET = 1'b0;
localparam UTMI_REG27_bccalib_BIT_RESET = 7'b0000000;
localparam UTMI_REG28_REG_OFFSET = 8'b10111100;
localparam UTMI_REG28_cdr_eb_wr_reset_BIT_RESET = 1'b0;
localparam UTMI_REG28_unused_BIT_RESET = 7'b0000000;
localparam UTMI_REG29_REG_OFFSET = 8'b10111101;
localparam UTMI_REG29_unused_BIT_RESET = 2'b00;
localparam UTMI_REG29_pll_standalone_BIT_RESET = 1'b0;
localparam UTMI_REG29_pll_standalone_en_BIT_RESET = 1'b0;
localparam UTMI_REG29_spare_out_BIT_RESET = 4'b0000;
localparam UTMI_REG30_REG_OFFSET = 8'b10111110;
localparam UTMI_REG30_unused_BIT_RESET = 1'b0;
localparam UTMI_REG30_pll_480_clock_gate_ovr_BIT_RESET = 1'b0;
localparam UTMI_REG30_scan_ats_hs_clock_gate_ovr_BIT_RESET = 1'b0;
localparam UTMI_REG30_vco_pll_clock_gate_ovr_BIT_RESET = 1'b0;
localparam UTMI_REG30_dig_div_refclock_gate_ovr_BIT_RESET = 1'b0;
localparam UTMI_REG30_fb_clock_gate_ovr_BIT_RESET = 1'b0;
localparam UTMI_REG30_ana_div_refclock_gate_ovr_BIT_RESET = 1'b0;
localparam UTMI_REG30_hs_clock_gate_ovr_BIT_RESET = 1'b0;
localparam UTMI_UNUSED_REG0_REG_OFFSET = 8'b10111111;
localparam UTMI_UNUSED_REG0_unused_BIT_RESET = 8'b00000000;
localparam UTMI_UNUSED_REG1_REG_OFFSET = 8'b11000000;
localparam UTMI_UNUSED_REG1_unused_BIT_RESET = 8'b00000000;
localparam UTMI_UNUSED_REG2_REG_OFFSET = 8'b11000001;
localparam UTMI_UNUSED_REG2_unused_BIT_RESET = 8'b00000000;
localparam UTMI_UNUSED_REG3_REG_OFFSET = 8'b11000010;
localparam UTMI_UNUSED_REG3_unused_BIT_RESET = 8'b00000000;
localparam UTMI_REG31_REG_OFFSET = 8'b11000011;
localparam UTMI_REG31_unused_BIT_RESET = 6'b000000;
localparam UTMI_REG31_bist_error_BIT_RESET = 1'b0;
localparam UTMI_REG31_bist_complete_BIT_RESET = 1'b0;
localparam UTMI_REG32_REG_OFFSET = 8'b11000100;
localparam UTMI_REG32_bist_err_count_BIT_RESET = 8'b00000000;
localparam UTMI_REG33_REG_OFFSET = 8'b11000101;
localparam UTMI_REG33_bg_powergood_BIT_RESET = 1'b0;
localparam UTMI_REG33_afe_hsrx_diff_data_BIT_RESET = 1'b0;
localparam UTMI_REG33_hsrx_en_BIT_RESET = 1'b0;
localparam UTMI_REG33_hsrx_sampler_enable_BIT_RESET = 1'b0;
localparam UTMI_REG33_chirp_mode_en_BIT_RESET = 1'b0;
localparam UTMI_REG33_hstx_en_BIT_RESET = 1'b0;
localparam UTMI_REG33_hstx_en_delayed_BIT_RESET = 1'b0;
localparam UTMI_REG33_hstx_boost_deamp_off_BIT_RESET = 1'b0;
localparam UTMI_REG34_REG_OFFSET = 8'b11000110;
localparam UTMI_REG34_o_dprpu1_en_BIT_RESET = 1'b0;
localparam UTMI_REG34_o_dmrpu1_en_BIT_RESET = 1'b0;
localparam UTMI_REG34_o_dprpu2_en_BIT_RESET = 1'b0;
localparam UTMI_REG34_o_dmrpu2_en_BIT_RESET = 1'b0;
localparam UTMI_REG34_o_dprpd_en_BIT_RESET = 1'b0;
localparam UTMI_REG34_o_dmrpd_en_BIT_RESET = 1'b0;
localparam UTMI_REG34_o_otgc_id_pullup_en_BIT_RESET = 1'b0;
localparam UTMI_REG34_o_fs_edge_sel_BIT_RESET = 1'b0;
localparam UTMI_REG35_REG_OFFSET = 8'b11000111;
localparam UTMI_REG35_i_afe_lsfsrx_ana_BIT_RESET = 1'b0;
localparam UTMI_REG35_o_lsfstx_en_BIT_RESET = 1'b0;
localparam UTMI_REG35_o_lsfsdrv_en_BIT_RESET = 1'b0;
localparam UTMI_REG35_o_lsfs_ddi_BIT_RESET = 1'b0;
localparam UTMI_REG35_o_assert_sezero_BIT_RESET = 1'b0;
localparam UTMI_REG35_o_lsfsrx_en_BIT_RESET = 1'b0;
localparam UTMI_REG35_o_serx_en_BIT_RESET = 1'b0;
localparam UTMI_REG35_o_serx_bias_en_BIT_RESET = 1'b0;
localparam UTMI_REG36_REG_OFFSET = 8'b11001000;
localparam UTMI_REG36_o_pll_pso_BIT_RESET = 1'b0;
localparam UTMI_REG36_o_pll_pso_delay_BIT_RESET = 1'b0;
localparam UTMI_REG36_o_pll_pd_BIT_RESET = 1'b0;
localparam UTMI_REG36_o_pll_ipdiv_BIT_RESET = 5'b00000;
localparam UTMI_REG37_REG_OFFSET = 8'b11001001;
localparam UTMI_REG37_o_pll_fbdiv_value_BIT_RESET = 8'b00000000;
localparam UTMI_REG38_REG_OFFSET = 8'b11001010;
localparam UTMI_REG38_o_pll_standby_BIT_RESET = 1'b0;
localparam UTMI_REG38_o_pll_ldo_core_en_BIT_RESET = 1'b0;
localparam UTMI_REG38_o_pll_ldo_ref_en_BIT_RESET = 1'b0;
localparam UTMI_REG38_o_afe_suspendm_BIT_RESET = 1'b0;
localparam UTMI_REG38_o_otgc_vbusvalid_en_BIT_RESET = 1'b0;
localparam UTMI_REG38_o_otgc_absvalid_en_BIT_RESET = 1'b0;
localparam UTMI_REG38_o_afe_clipper_en_BIT_RESET = 1'b0;
localparam UTMI_REG38_o_pll_ldo_isolation_cntrl_BIT_RESET = 1'b0;
localparam UTMI_REG39_REG_OFFSET = 8'b11001011;
localparam UTMI_REG39_unused_BIT_RESET = 8'b00000000;
localparam UTMI_REG40_REG_OFFSET = 8'b11001100;
localparam UTMI_REG40_unused_BIT_RESET = 8'b00000000;
localparam UTMI_REG41_REG_OFFSET = 8'b11001101;
localparam UTMI_REG41_i_ted_squelch_ana_BIT_RESET = 1'b0;
localparam UTMI_REG41_i_usb2_rescal_calib_done_BIT_RESET = 1'b0;
localparam UTMI_REG41_hs_calib_code_BIT_RESET = 6'b000000;
localparam UTMI_REG42_REG_OFFSET = 8'b11001110;
localparam UTMI_REG42_hs_sof_BIT_RESET = 1'b0;
localparam UTMI_REG42_all_calib_done_BIT_RESET = 1'b0;
localparam UTMI_REG42_fs_calib_code_BIT_RESET = 6'b000000;
localparam UTMI_REG43_REG_OFFSET = 8'b11001111;
localparam UTMI_REG43_ls_mode_BIT_RESET = 1'b0;
localparam UTMI_REG43_fs_mode_pre_BIT_RESET = 1'b0;
localparam UTMI_REG43_bc_calib_code_BIT_RESET = 6'b000000;
localparam UTMI_REG44_REG_OFFSET = 8'b11010000;
localparam UTMI_REG44_rstn_refclock_BIT_RESET = 1'b0;
localparam UTMI_REG44_rstn_hs_clock_BIT_RESET = 1'b0;
localparam UTMI_REG44_rstn_hs_tx_clock_BIT_RESET = 1'b0;
localparam UTMI_REG44_rstn_byte_clock_BIT_RESET = 1'b0;
localparam UTMI_REG44_rstn_sieclock_BIT_RESET = 1'b0;
localparam UTMI_REG44_rstn_clkdiv_BIT_RESET = 1'b0;
localparam UTMI_REG44_rstn_calib_clkdiv_BIT_RESET = 1'b0;
localparam UTMI_REG44_udc_rstn_cdr_async_BIT_RESET = 1'b0;
localparam UTMI_REG45_REG_OFFSET = 8'b11010001;
localparam UTMI_REG45_udc_calib_rstn_BIT_RESET = 1'b0;
localparam UTMI_REG45_udc_apb_rstn_BIT_RESET = 1'b0;
localparam UTMI_REG45_o_rstn_cdr_async_BIT_RESET = 1'b0;
localparam UTMI_REG45_o_pll_calib_rstn_BIT_RESET = 1'b0;
localparam UTMI_REG45_bist_mode_rstn_BIT_RESET = 1'b0;
localparam UTMI_REG45_o_usb2_calib_rstn_BIT_RESET = 1'b0;
localparam UTMI_REG45_udc_bc_calib_rstn_BIT_RESET = 1'b0;
localparam UTMI_REG45_global_resetn_BIT_RESET = 1'b0;
localparam UTMI_REG46_REG_OFFSET = 8'b11010010;
localparam UTMI_REG46_unused_BIT_RESET = 1'b0;
localparam UTMI_REG46_recovery_cnt_en_BIT_RESET = 1'b0;
localparam UTMI_REG46_clean_linestate_BIT_RESET = 2'b00;
localparam UTMI_REG46_bc_state_machine_status_BIT_RESET = 4'b0000;
localparam UTMI_REG47_REG_OFFSET = 8'b11010011;
localparam UTMI_REG47_filter_cnt_en_BIT_RESET = 1'b0;
localparam UTMI_REG47_host_opmode_BIT_RESET = 2'b00;
localparam UTMI_REG47_dev_opmode_BIT_RESET = 2'b00;
localparam UTMI_REG47_i_ded_ana_BIT_RESET = 1'b0;
localparam UTMI_REG47_hs_hostdisconnect_BIT_RESET = 1'b0;
localparam UTMI_REG47_lsfs_hostdisconnect_BIT_RESET = 1'b0;
localparam UTMI_REG48_REG_OFFSET = 8'b11010100;
localparam UTMI_REG48_bist_tx_state_BIT_RESET = 2'b00;
localparam UTMI_REG48_data_cnt_tx_BIT_RESET = 6'b000000;
localparam UTMI_REG49_REG_OFFSET = 8'b11010101;
localparam UTMI_REG49_bist_rx_state_BIT_RESET = 2'b00;
localparam UTMI_REG49_data_cnt_rx_BIT_RESET = 6'b000000;
localparam UTMI_REG50_REG_OFFSET = 8'b11010110;
localparam UTMI_REG50_bist_top_state_BIT_RESET = 4'b0000;
localparam UTMI_REG50_inc_data_cnt_tx_BIT_RESET = 1'b0;
localparam UTMI_REG50_inc_data_cnt_rx_BIT_RESET = 1'b0;
localparam UTMI_REG50_o_bg_pd_BIT_RESET = 1'b0;
localparam UTMI_REG50_o_bg_pd_bg_ok_BIT_RESET = 1'b0;
localparam UTMI_REG51_REG_OFFSET = 8'b11010111;
localparam UTMI_REG51_powerdown_BIT_RESET = 2'b00;
localparam UTMI_REG51_reset_BIT_RESET = 1'b0;
localparam UTMI_REG51_suspendm_BIT_RESET = 1'b0;
localparam UTMI_REG51_termselect_BIT_RESET = 1'b0;
localparam UTMI_REG51_databus16_8_BIT_RESET = 1'b0;
localparam UTMI_REG51_dppulldown_BIT_RESET = 1'b0;
localparam UTMI_REG51_dmpulldown_BIT_RESET = 1'b0;
localparam UTMI_REG52_REG_OFFSET = 8'b11011000;
localparam UTMI_REG52_lane_reverse_BIT_RESET = 1'b0;
localparam UTMI_REG52_txbitstuffenable_BIT_RESET = 1'b0;
localparam UTMI_REG52_txbitstuffenableh_BIT_RESET = 1'b0;
localparam UTMI_REG52_xcvrselect_BIT_RESET = 2'b00;
localparam UTMI_REG52_linestate_BIT_RESET = 2'b00;
localparam UTMI_REG52_hostdisconnect_BIT_RESET = 1'b0;
localparam UTMI_REG53_REG_OFFSET = 8'b11011001;
localparam UTMI_REG53_fslsserialmode_BIT_RESET = 1'b0;
localparam UTMI_REG53_tx_enable_n_BIT_RESET = 1'b0;
localparam UTMI_REG53_tx_dat_BIT_RESET = 1'b0;
localparam UTMI_REG53_tx_se0_BIT_RESET = 1'b0;
localparam UTMI_REG53_sleepm_BIT_RESET = 1'b0;
localparam UTMI_REG53_unused_BIT_RESET = 1'b0;
localparam UTMI_REG53_opmode_BIT_RESET = 2'b00;
localparam UTMI_REG54_REG_OFFSET = 8'b11011010;
localparam UTMI_REG54_rx_dp_BIT_RESET = 1'b0;
localparam UTMI_REG54_rx_dm_BIT_RESET = 1'b0;
localparam UTMI_REG54_rx_rcv_BIT_RESET = 1'b0;
localparam UTMI_REG54_unused_BIT_RESET = 5'b00000;
localparam UTMI_REG55_REG_OFFSET = 8'b11011011;
localparam UTMI_REG55_txvalidh_BIT_RESET = 1'b0;
localparam UTMI_REG55_txvalid_BIT_RESET = 1'b0;
localparam UTMI_REG55_txready_BIT_RESET = 1'b0;
localparam UTMI_REG55_rxvalidh_BIT_RESET = 1'b0;
localparam UTMI_REG55_rxvalid_BIT_RESET = 1'b0;
localparam UTMI_REG55_rxactive_BIT_RESET = 1'b0;
localparam UTMI_REG55_rxerror_BIT_RESET = 1'b0;
localparam UTMI_REG55_unused_BIT_RESET = 1'b0;
localparam UTMI_REG56_REG_OFFSET = 8'b11011100;
localparam UTMI_REG56_datain_upper_BIT_RESET = 8'b00000000;
localparam UTMI_REG57_REG_OFFSET = 8'b11011101;
localparam UTMI_REG57_datain_lower_BIT_RESET = 8'b00000000;
localparam UTMI_REG58_REG_OFFSET = 8'b11011110;
localparam UTMI_REG58_dataout_upper_BIT_RESET = 8'b00000000;
localparam UTMI_REG59_REG_OFFSET = 8'b11011111;
localparam UTMI_REG59_dataout_lower_BIT_RESET = 8'b00000000;
localparam UTMI_UNUSED_REG6_REG_OFFSET = 8'b11100000;
localparam UTMI_UNUSED_REG6_unused_BIT_RESET = 8'b00000000;
localparam UTMI_UNUSED_REG7_REG_OFFSET = 8'b11100001;
localparam UTMI_UNUSED_REG7_unused_BIT_RESET = 8'b00000000;
always @(posedge PCLK or negedge PRESETn)
begin
if(!PRESETn)
  begin
    UTMI_REG0_loopback_sel             <= UTMI_REG0_loopback_sel_BIT_RESET;
    UTMI_REG0_loopback_en              <= UTMI_REG0_loopback_en_BIT_RESET;
    UTMI_REG0_bist_mode_sel            <= UTMI_REG0_bist_mode_sel_BIT_RESET;
    UTMI_REG0_bist_en                  <= UTMI_REG0_bist_en_BIT_RESET;
    UTMI_REG1_bist_err                 <= UTMI_REG1_bist_err_BIT_RESET;
    UTMI_REG1_bist_soft_rst            <= UTMI_REG1_bist_soft_rst_BIT_RESET;
    UTMI_REG1_tx_lsfs_soft_rst         <= UTMI_REG1_tx_lsfs_soft_rst_BIT_RESET;
    UTMI_REG1_tx_hs_soft_rst           <= UTMI_REG1_tx_hs_soft_rst_BIT_RESET;
    UTMI_REG1_clkdiv_soft_rst          <= UTMI_REG1_clkdiv_soft_rst_BIT_RESET;
    UTMI_REG1_calib_soft_rst           <= UTMI_REG1_calib_soft_rst_BIT_RESET;
    UTMI_REG1_phy_soft_rst             <= UTMI_REG1_phy_soft_rst_BIT_RESET;
    UTMI_REG2_rx_cntrl_soft_rst        <= UTMI_REG2_rx_cntrl_soft_rst_BIT_RESET;
    UTMI_REG2_shift_reg_soft_rst       <= UTMI_REG2_shift_reg_soft_rst_BIT_RESET;
    UTMI_REG2_bitunstuff_soft_rst      <= UTMI_REG2_bitunstuff_soft_rst_BIT_RESET;
    UTMI_REG2_nrzi_dec_soft_rst        <= UTMI_REG2_nrzi_dec_soft_rst_BIT_RESET;
    UTMI_REG2_eop_det_soft_rst         <= UTMI_REG2_eop_det_soft_rst_BIT_RESET;
    UTMI_REG2_sync_det_soft_rst        <= UTMI_REG2_sync_det_soft_rst_BIT_RESET;
    UTMI_REG2_lsfs_dll_soft_rst        <= UTMI_REG2_lsfs_dll_soft_rst_BIT_RESET;
    UTMI_REG2_rx_hs_soft_rst           <= UTMI_REG2_rx_hs_soft_rst_BIT_RESET;
    UTMI_REG3_hs_rx_err                <= UTMI_REG3_hs_rx_err_BIT_RESET;
    UTMI_REG3_ls_linestate_fil_en      <= UTMI_REG3_ls_linestate_fil_en_BIT_RESET;
    UTMI_REG3_fs_linestate_fil_cnt     <= UTMI_REG3_fs_linestate_fil_cnt_BIT_RESET;
    UTMI_REG3_fs_linestate_fil_en      <= UTMI_REG3_fs_linestate_fil_en_BIT_RESET;
    UTMI_REG4_ls_linestate_fil_cnt     <= UTMI_REG4_ls_linestate_fil_cnt_BIT_RESET;
    UTMI_REG5_bist_mode_en             <= UTMI_REG5_bist_mode_en_BIT_RESET;
    UTMI_REG5_bist_on                  <= UTMI_REG5_bist_on_BIT_RESET;
    UTMI_REG5_hstx_boost_deamp_off     <= UTMI_REG5_hstx_boost_deamp_off_BIT_RESET;
    UTMI_REG5_hstx_boost               <= UTMI_REG5_hstx_boost_BIT_RESET;
    UTMI_REG5_hs_samp                  <= UTMI_REG5_hs_samp_BIT_RESET;
    UTMI_REG5_hs_samp_en               <= UTMI_REG5_hs_samp_en_BIT_RESET;
    UTMI_REG5_hsrx                     <= UTMI_REG5_hsrx_BIT_RESET;
    UTMI_REG5_hsrx_en                  <= UTMI_REG5_hsrx_en_BIT_RESET;
    UTMI_REG6_vbusvalid_cntrl          <= UTMI_REG6_vbusvalid_cntrl_BIT_RESET;
    UTMI_REG6_vbusvalid_l3_dev_en      <= UTMI_REG6_vbusvalid_l3_dev_en_BIT_RESET;
    UTMI_REG6_hs_drven_threshold       <= UTMI_REG6_hs_drven_threshold_BIT_RESET;
    UTMI_REG6_hs_drven_th_en           <= UTMI_REG6_hs_drven_th_en_BIT_RESET;
    UTMI_REG7_hstx_bc_mode             <= UTMI_REG7_hstx_bc_mode_BIT_RESET;
    UTMI_REG7_hstx_bc_en               <= UTMI_REG7_hstx_bc_en_BIT_RESET;
    UTMI_REG7_hstx_chirp_mode          <= UTMI_REG7_hstx_chirp_mode_BIT_RESET;
    UTMI_REG7_hstx_chirp_en            <= UTMI_REG7_hstx_chirp_en_BIT_RESET;
    UTMI_REG7_hstx_en_del              <= UTMI_REG7_hstx_en_del_BIT_RESET;
    UTMI_REG7_hstx_en_del_en           <= UTMI_REG7_hstx_en_del_en_BIT_RESET;
    UTMI_REG7_hstx                     <= UTMI_REG7_hstx_BIT_RESET;
    UTMI_REG7_hstx_en                  <= UTMI_REG7_hstx_en_BIT_RESET;
    UTMI_REG8_hs_term                  <= UTMI_REG8_hs_term_BIT_RESET;
    UTMI_REG8_hs_term_en               <= UTMI_REG8_hs_term_en_BIT_RESET;
    UTMI_REG8_hstx_data                <= UTMI_REG8_hstx_data_BIT_RESET;
    UTMI_REG8_hstx_data_en             <= UTMI_REG8_hstx_data_en_BIT_RESET;
    UTMI_REG8_hstx_drv                 <= UTMI_REG8_hstx_drv_BIT_RESET;
    UTMI_REG8_hstx_drv_en              <= UTMI_REG8_hstx_drv_en_BIT_RESET;
    UTMI_REG8_hstx_predrv              <= UTMI_REG8_hstx_predrv_BIT_RESET;
    UTMI_REG8_hstx_predrv_en           <= UTMI_REG8_hstx_predrv_en_BIT_RESET;
    UTMI_REG9_clkoff_en                <= UTMI_REG9_clkoff_en_BIT_RESET;
    UTMI_REG9_sdc_space                <= UTMI_REG9_sdc_space_BIT_RESET;
    UTMI_REG9_sdc_space_en             <= UTMI_REG9_sdc_space_en_BIT_RESET;
    UTMI_REG9_hstx_en_del_th           <= UTMI_REG9_hstx_en_del_th_BIT_RESET;
    UTMI_REG9_hstx_en_del_th_en        <= UTMI_REG9_hstx_en_del_th_en_BIT_RESET;
    UTMI_REG10_pll_clkon               <= UTMI_REG10_pll_clkon_BIT_RESET;
    UTMI_REG10_pll_clkon_en            <= UTMI_REG10_pll_clkon_en_BIT_RESET;
    UTMI_REG10_bg_pd_bg_ok             <= UTMI_REG10_bg_pd_bg_ok_BIT_RESET;
    UTMI_REG10_bg_pd_bg_ok_en          <= UTMI_REG10_bg_pd_bg_ok_en_BIT_RESET;
    UTMI_REG10_lsfs_serx               <= UTMI_REG10_lsfs_serx_BIT_RESET;
    UTMI_REG10_lsfs_serx_en            <= UTMI_REG10_lsfs_serx_en_BIT_RESET;
    UTMI_REG10_lsfs_rx                 <= UTMI_REG10_lsfs_rx_BIT_RESET;
    UTMI_REG10_lsfs_rx_en              <= UTMI_REG10_lsfs_rx_en_BIT_RESET;
    UTMI_REG11_clean_linestate_serx_mask_en <= UTMI_REG11_clean_linestate_serx_mask_en_BIT_RESET;
    UTMI_REG11_serx_mask_en            <= UTMI_REG11_serx_mask_en_BIT_RESET;
    UTMI_REG11_serx_mask_threshold     <= UTMI_REG11_serx_mask_threshold_BIT_RESET;
    UTMI_REG11_lsfs_tx                 <= UTMI_REG11_lsfs_tx_BIT_RESET;
    UTMI_REG11_lsfs_tx_en              <= UTMI_REG11_lsfs_tx_en_BIT_RESET;
    UTMI_REG11_fsls_edgesel            <= UTMI_REG11_fsls_edgesel_BIT_RESET;
    UTMI_REG11_fsls_edgesel_en         <= UTMI_REG11_fsls_edgesel_en_BIT_RESET;
    UTMI_REG12_serx_bias_en            <= UTMI_REG12_serx_bias_en_BIT_RESET;
    UTMI_REG12_fsls_tx_data            <= UTMI_REG12_fsls_tx_data_BIT_RESET;
    UTMI_REG12_fsls_tx_data_en         <= UTMI_REG12_fsls_tx_data_en_BIT_RESET;
    UTMI_REG12_fsls_tx_se0             <= UTMI_REG12_fsls_tx_se0_BIT_RESET;
    UTMI_REG12_fsls_tx_se0_en          <= UTMI_REG12_fsls_tx_se0_en_BIT_RESET;
    UTMI_REG12_fsls_tx_drv             <= UTMI_REG12_fsls_tx_drv_BIT_RESET;
    UTMI_REG12_fsls_tx_drv_en          <= UTMI_REG12_fsls_tx_drv_en_BIT_RESET;
    UTMI_REG13_fsls_serialmode_pullup2 <= UTMI_REG13_fsls_serialmode_pullup2_BIT_RESET;
    UTMI_REG13_fsls_serialmode_pullup2_en <= UTMI_REG13_fsls_serialmode_pullup2_en_BIT_RESET;
    UTMI_REG13_dm_pulldown             <= UTMI_REG13_dm_pulldown_BIT_RESET;
    UTMI_REG13_dm_pulldown_en          <= UTMI_REG13_dm_pulldown_en_BIT_RESET;
    UTMI_REG13_dp_pulldown             <= UTMI_REG13_dp_pulldown_BIT_RESET;
    UTMI_REG13_dp_pulldown_en          <= UTMI_REG13_dp_pulldown_en_BIT_RESET;
    UTMI_REG13_lane_reverse            <= UTMI_REG13_lane_reverse_BIT_RESET;
    UTMI_REG13_lane_reverse_en         <= UTMI_REG13_lane_reverse_en_BIT_RESET;
    UTMI_REG14_dm_pullup2              <= UTMI_REG14_dm_pullup2_BIT_RESET;
    UTMI_REG14_dm_pullup2_en           <= UTMI_REG14_dm_pullup2_en_BIT_RESET;
    UTMI_REG14_dp_pullup2              <= UTMI_REG14_dp_pullup2_BIT_RESET;
    UTMI_REG14_dp_pullup2_en           <= UTMI_REG14_dp_pullup2_en_BIT_RESET;
    UTMI_REG14_dm_pullup1              <= UTMI_REG14_dm_pullup1_BIT_RESET;
    UTMI_REG14_dm_pullup1_en           <= UTMI_REG14_dm_pullup1_en_BIT_RESET;
    UTMI_REG14_dp_pullup1              <= UTMI_REG14_dp_pullup1_BIT_RESET;
    UTMI_REG14_dp_pullup1_en           <= UTMI_REG14_dp_pullup1_en_BIT_RESET;
    UTMI_REG15_txvalid_gate_threshold_fs <= UTMI_REG15_txvalid_gate_threshold_fs_BIT_RESET;
    UTMI_REG15_txvalid_gate_threshold_hs <= UTMI_REG15_txvalid_gate_threshold_hs_BIT_RESET;
    UTMI_REG15_ted_en_value            <= UTMI_REG15_ted_en_value_BIT_RESET;
    UTMI_REG15_ted_en_cnt              <= UTMI_REG15_ted_en_cnt_BIT_RESET;
    UTMI_REG15_ed_en_value             <= UTMI_REG15_ed_en_value_BIT_RESET;
    UTMI_REG15_ed_en_cnt               <= UTMI_REG15_ed_en_cnt_BIT_RESET;
    UTMI_REG16_unused                  <= UTMI_REG16_unused_BIT_RESET;
    UTMI_REG17_squelch_count_idle      <= UTMI_REG17_squelch_count_idle_BIT_RESET;
    UTMI_REG17_squelch_count_idle_en   <= UTMI_REG17_squelch_count_idle_en_BIT_RESET;
    UTMI_REG17_tx_sq_cnt               <= UTMI_REG17_tx_sq_cnt_BIT_RESET;
    UTMI_REG17_tx_sq_cnt_en            <= UTMI_REG17_tx_sq_cnt_en_BIT_RESET;
    UTMI_REG18_sleep_value             <= UTMI_REG18_sleep_value_BIT_RESET;
    UTMI_REG18_sleep_en                <= UTMI_REG18_sleep_en_BIT_RESET;
    UTMI_REG18_bist_powerup            <= UTMI_REG18_bist_powerup_BIT_RESET;
    UTMI_REG18_bist_powerup_en         <= UTMI_REG18_bist_powerup_en_BIT_RESET;
    UTMI_REG18_powerup_en              <= UTMI_REG18_powerup_en_BIT_RESET;
    UTMI_REG18_unused                  <= UTMI_REG18_unused_BIT_RESET;
    UTMI_REG18_clipper_en              <= UTMI_REG18_clipper_en_BIT_RESET;
    UTMI_REG18_clipper_en_en           <= UTMI_REG18_clipper_en_en_BIT_RESET;
    UTMI_REG19_unused                  <= UTMI_REG19_unused_BIT_RESET;
    UTMI_REG19_ted_sw_en               <= UTMI_REG19_ted_sw_en_BIT_RESET;
    UTMI_REG20_hostdiscon_rst_reg      <= UTMI_REG20_hostdiscon_rst_reg_BIT_RESET;
    UTMI_REG20_hostdiscon_rst_reg_en   <= UTMI_REG20_hostdiscon_rst_reg_en_BIT_RESET;
    UTMI_REG20_calib_rst_dt            <= UTMI_REG20_calib_rst_dt_BIT_RESET;
    UTMI_REG20_calib_rst_dt_en         <= UTMI_REG20_calib_rst_dt_en_BIT_RESET;
    UTMI_REG21_calib_triger_posedge    <= UTMI_REG21_calib_triger_posedge_BIT_RESET;
    UTMI_REG21_auto_cal_enable         <= UTMI_REG21_auto_cal_enable_BIT_RESET;
    UTMI_REG21_absvalid                <= UTMI_REG21_absvalid_BIT_RESET;
    UTMI_REG21_absvalid_en             <= UTMI_REG21_absvalid_en_BIT_RESET;
    UTMI_REG21_vbusvalid               <= UTMI_REG21_vbusvalid_BIT_RESET;
    UTMI_REG21_vbusvalid_en            <= UTMI_REG21_vbusvalid_en_BIT_RESET;
    UTMI_REG21_suspendm                <= UTMI_REG21_suspendm_BIT_RESET;
    UTMI_REG21_suspendm_en             <= UTMI_REG21_suspendm_en_BIT_RESET;
    UTMI_REG22_bccalib_offset          <= UTMI_REG22_bccalib_offset_BIT_RESET;
    UTMI_REG23_hscalib_offset          <= UTMI_REG23_hscalib_offset_BIT_RESET;
    UTMI_REG24_fscalib_offset          <= UTMI_REG24_fscalib_offset_BIT_RESET;
    UTMI_REG25_unused                  <= UTMI_REG25_unused_BIT_RESET;
    UTMI_REG25_hscalib                 <= UTMI_REG25_hscalib_BIT_RESET;
    UTMI_REG26_unused                  <= UTMI_REG26_unused_BIT_RESET;
    UTMI_REG26_fscalib                 <= UTMI_REG26_fscalib_BIT_RESET;
    UTMI_REG27_unused                  <= UTMI_REG27_unused_BIT_RESET;
    UTMI_REG27_bccalib                 <= UTMI_REG27_bccalib_BIT_RESET;
    UTMI_REG28_cdr_eb_wr_reset         <= UTMI_REG28_cdr_eb_wr_reset_BIT_RESET;
    UTMI_REG28_unused                  <= UTMI_REG28_unused_BIT_RESET;
    UTMI_REG29_unused                  <= UTMI_REG29_unused_BIT_RESET;
    UTMI_REG29_pll_standalone          <= UTMI_REG29_pll_standalone_BIT_RESET;
    UTMI_REG29_pll_standalone_en       <= UTMI_REG29_pll_standalone_en_BIT_RESET;
    UTMI_REG29_spare_out               <= UTMI_REG29_spare_out_BIT_RESET;
    UTMI_REG30_unused                  <= UTMI_REG30_unused_BIT_RESET;
    UTMI_REG30_pll_480_clock_gate_ovr  <= UTMI_REG30_pll_480_clock_gate_ovr_BIT_RESET;
    UTMI_REG30_scan_ats_hs_clock_gate_ovr <= UTMI_REG30_scan_ats_hs_clock_gate_ovr_BIT_RESET;
    UTMI_REG30_vco_pll_clock_gate_ovr  <= UTMI_REG30_vco_pll_clock_gate_ovr_BIT_RESET;
    UTMI_REG30_dig_div_refclock_gate_ovr <= UTMI_REG30_dig_div_refclock_gate_ovr_BIT_RESET;
    UTMI_REG30_fb_clock_gate_ovr       <= UTMI_REG30_fb_clock_gate_ovr_BIT_RESET;
    UTMI_REG30_ana_div_refclock_gate_ovr <= UTMI_REG30_ana_div_refclock_gate_ovr_BIT_RESET;
    UTMI_REG30_hs_clock_gate_ovr       <= UTMI_REG30_hs_clock_gate_ovr_BIT_RESET;
    UTMI_UNUSED_REG0_unused            <= UTMI_UNUSED_REG0_unused_BIT_RESET;
    UTMI_UNUSED_REG1_unused            <= UTMI_UNUSED_REG1_unused_BIT_RESET;
    UTMI_UNUSED_REG2_unused            <= UTMI_UNUSED_REG2_unused_BIT_RESET;
    UTMI_UNUSED_REG3_unused            <= UTMI_UNUSED_REG3_unused_BIT_RESET;
  end
else  
  begin
    if ((PSELx == 1'b1) && (PWRITE == 1'b1) )
    begin  
      case (PADDR[7:0])
        UTMI_REG0_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG0_loopback_sel[1:0] <= PWDATA[7:6];
            UTMI_REG0_loopback_en      <= PWDATA[5];
            UTMI_REG0_bist_mode_sel[3:0] <= PWDATA[4:1];
            UTMI_REG0_bist_en          <= PWDATA[0];
          end
        UTMI_REG1_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG1_bist_err[1:0]    <= PWDATA[7:6];
            UTMI_REG1_bist_soft_rst    <= PWDATA[5];
            UTMI_REG1_tx_lsfs_soft_rst <= PWDATA[4];
            UTMI_REG1_tx_hs_soft_rst   <= PWDATA[3];
            UTMI_REG1_clkdiv_soft_rst  <= PWDATA[2];
            UTMI_REG1_calib_soft_rst   <= PWDATA[1];
            UTMI_REG1_phy_soft_rst     <= PWDATA[0];
          end
        UTMI_REG2_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG2_rx_cntrl_soft_rst <= PWDATA[7];
            UTMI_REG2_shift_reg_soft_rst <= PWDATA[6];
            UTMI_REG2_bitunstuff_soft_rst <= PWDATA[5];
            UTMI_REG2_nrzi_dec_soft_rst <= PWDATA[4];
            UTMI_REG2_eop_det_soft_rst <= PWDATA[3];
            UTMI_REG2_sync_det_soft_rst <= PWDATA[2];
            UTMI_REG2_lsfs_dll_soft_rst <= PWDATA[1];
            UTMI_REG2_rx_hs_soft_rst   <= PWDATA[0];
          end
        UTMI_REG3_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG3_hs_rx_err        <= PWDATA[7];
            UTMI_REG3_ls_linestate_fil_en <= PWDATA[6];
            UTMI_REG3_fs_linestate_fil_cnt[4:0] <= PWDATA[5:1];
            UTMI_REG3_fs_linestate_fil_en <= PWDATA[0];
          end
        UTMI_REG4_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG4_ls_linestate_fil_cnt[7:0] <= PWDATA[7:0];
          end
        UTMI_REG5_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG5_bist_mode_en     <= PWDATA[7];
            UTMI_REG5_bist_on          <= PWDATA[6];
            UTMI_REG5_hstx_boost_deamp_off <= PWDATA[5];
            UTMI_REG5_hstx_boost       <= PWDATA[4];
            UTMI_REG5_hs_samp          <= PWDATA[3];
            UTMI_REG5_hs_samp_en       <= PWDATA[2];
            UTMI_REG5_hsrx             <= PWDATA[1];
            UTMI_REG5_hsrx_en          <= PWDATA[0];
          end
        UTMI_REG6_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG6_vbusvalid_cntrl  <= PWDATA[7];
            UTMI_REG6_vbusvalid_l3_dev_en <= PWDATA[6];
            UTMI_REG6_hs_drven_threshold[4:0] <= PWDATA[5:1];
            UTMI_REG6_hs_drven_th_en   <= PWDATA[0];
          end
        UTMI_REG7_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG7_hstx_bc_mode     <= PWDATA[7];
            UTMI_REG7_hstx_bc_en       <= PWDATA[6];
            UTMI_REG7_hstx_chirp_mode  <= PWDATA[5];
            UTMI_REG7_hstx_chirp_en    <= PWDATA[4];
            UTMI_REG7_hstx_en_del      <= PWDATA[3];
            UTMI_REG7_hstx_en_del_en   <= PWDATA[2];
            UTMI_REG7_hstx             <= PWDATA[1];
            UTMI_REG7_hstx_en          <= PWDATA[0];
          end
        UTMI_REG8_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG8_hs_term          <= PWDATA[7];
            UTMI_REG8_hs_term_en       <= PWDATA[6];
            UTMI_REG8_hstx_data        <= PWDATA[5];
            UTMI_REG8_hstx_data_en     <= PWDATA[4];
            UTMI_REG8_hstx_drv         <= PWDATA[3];
            UTMI_REG8_hstx_drv_en      <= PWDATA[2];
            UTMI_REG8_hstx_predrv      <= PWDATA[1];
            UTMI_REG8_hstx_predrv_en   <= PWDATA[0];
          end
        UTMI_REG9_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG9_clkoff_en        <= PWDATA[7];
            UTMI_REG9_sdc_space[2:0]   <= PWDATA[6:4];
            UTMI_REG9_sdc_space_en     <= PWDATA[3];
            UTMI_REG9_hstx_en_del_th[1:0] <= PWDATA[2:1];
            UTMI_REG9_hstx_en_del_th_en <= PWDATA[0];
          end
        UTMI_REG10_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG10_pll_clkon       <= PWDATA[7];
            UTMI_REG10_pll_clkon_en    <= PWDATA[6];
            UTMI_REG10_bg_pd_bg_ok     <= PWDATA[5];
            UTMI_REG10_bg_pd_bg_ok_en  <= PWDATA[4];
            UTMI_REG10_lsfs_serx       <= PWDATA[3];
            UTMI_REG10_lsfs_serx_en    <= PWDATA[2];
            UTMI_REG10_lsfs_rx         <= PWDATA[1];
            UTMI_REG10_lsfs_rx_en      <= PWDATA[0];
          end
        UTMI_REG11_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG11_clean_linestate_serx_mask_en <= PWDATA[7];
            UTMI_REG11_serx_mask_en    <= PWDATA[6];
            UTMI_REG11_serx_mask_threshold[1:0] <= PWDATA[5:4];
            UTMI_REG11_lsfs_tx         <= PWDATA[3];
            UTMI_REG11_lsfs_tx_en      <= PWDATA[2];
            UTMI_REG11_fsls_edgesel    <= PWDATA[1];
            UTMI_REG11_fsls_edgesel_en <= PWDATA[0];
          end
        UTMI_REG12_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG12_serx_bias_en[1:0] <= PWDATA[7:6];
            UTMI_REG12_fsls_tx_data    <= PWDATA[5];
            UTMI_REG12_fsls_tx_data_en <= PWDATA[4];
            UTMI_REG12_fsls_tx_se0     <= PWDATA[3];
            UTMI_REG12_fsls_tx_se0_en  <= PWDATA[2];
            UTMI_REG12_fsls_tx_drv     <= PWDATA[1];
            UTMI_REG12_fsls_tx_drv_en  <= PWDATA[0];
          end
        UTMI_REG13_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG13_fsls_serialmode_pullup2 <= PWDATA[7];
            UTMI_REG13_fsls_serialmode_pullup2_en <= PWDATA[6];
            UTMI_REG13_dm_pulldown     <= PWDATA[5];
            UTMI_REG13_dm_pulldown_en  <= PWDATA[4];
            UTMI_REG13_dp_pulldown     <= PWDATA[3];
            UTMI_REG13_dp_pulldown_en  <= PWDATA[2];
            UTMI_REG13_lane_reverse    <= PWDATA[1];
            UTMI_REG13_lane_reverse_en <= PWDATA[0];
          end
        UTMI_REG14_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG14_dm_pullup2      <= PWDATA[7];
            UTMI_REG14_dm_pullup2_en   <= PWDATA[6];
            UTMI_REG14_dp_pullup2      <= PWDATA[5];
            UTMI_REG14_dp_pullup2_en   <= PWDATA[4];
            UTMI_REG14_dm_pullup1      <= PWDATA[3];
            UTMI_REG14_dm_pullup1_en   <= PWDATA[2];
            UTMI_REG14_dp_pullup1      <= PWDATA[1];
            UTMI_REG14_dp_pullup1_en   <= PWDATA[0];
          end
        UTMI_REG15_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG15_txvalid_gate_threshold_fs[1:0] <= PWDATA[7:6];
            UTMI_REG15_txvalid_gate_threshold_hs[1:0] <= PWDATA[5:4];
            UTMI_REG15_ted_en_value    <= PWDATA[3];
            UTMI_REG15_ted_en_cnt      <= PWDATA[2];
            UTMI_REG15_ed_en_value     <= PWDATA[1];
            UTMI_REG15_ed_en_cnt       <= PWDATA[0];
          end
        UTMI_REG16_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG16_unused[7:0]     <= PWDATA[7:0];
          end
        UTMI_REG17_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG17_squelch_count_idle[1:0] <= PWDATA[7:6];
            UTMI_REG17_squelch_count_idle_en <= PWDATA[5];
            UTMI_REG17_tx_sq_cnt[3:0]  <= PWDATA[4:1];
            UTMI_REG17_tx_sq_cnt_en    <= PWDATA[0];
          end
        UTMI_REG18_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG18_sleep_value     <= PWDATA[7];
            UTMI_REG18_sleep_en        <= PWDATA[6];
            UTMI_REG18_bist_powerup    <= PWDATA[5];
            UTMI_REG18_bist_powerup_en <= PWDATA[4];
            UTMI_REG18_powerup_en      <= PWDATA[3];
            UTMI_REG18_unused          <= PWDATA[2];
            UTMI_REG18_clipper_en      <= PWDATA[1];
            UTMI_REG18_clipper_en_en   <= PWDATA[0];
          end
        UTMI_REG19_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG19_unused[6:0]     <= PWDATA[7:1];
            UTMI_REG19_ted_sw_en       <= PWDATA[0];
          end
        UTMI_REG20_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG20_hostdiscon_rst_reg <= PWDATA[7];
            UTMI_REG20_hostdiscon_rst_reg_en <= PWDATA[6];
            UTMI_REG20_calib_rst_dt[4:0] <= PWDATA[5:1];
            UTMI_REG20_calib_rst_dt_en <= PWDATA[0];
          end
        UTMI_REG21_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG21_calib_triger_posedge <= PWDATA[7];
            UTMI_REG21_auto_cal_enable <= PWDATA[6];
            UTMI_REG21_absvalid        <= PWDATA[5];
            UTMI_REG21_absvalid_en     <= PWDATA[4];
            UTMI_REG21_vbusvalid       <= PWDATA[3];
            UTMI_REG21_vbusvalid_en    <= PWDATA[2];
            UTMI_REG21_suspendm        <= PWDATA[1];
            UTMI_REG21_suspendm_en     <= PWDATA[0];
          end
        UTMI_REG22_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG22_bccalib_offset[7:0] <= PWDATA[7:0];
          end
        UTMI_REG23_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG23_hscalib_offset[7:0] <= PWDATA[7:0];
          end
        UTMI_REG24_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG24_fscalib_offset[7:0] <= PWDATA[7:0];
          end
        UTMI_REG25_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG25_unused          <= PWDATA[7];
            UTMI_REG25_hscalib[6:0]    <= PWDATA[6:0];
          end
        UTMI_REG26_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG26_unused          <= PWDATA[7];
            UTMI_REG26_fscalib[6:0]    <= PWDATA[6:0];
          end
        UTMI_REG27_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG27_unused          <= PWDATA[7];
            UTMI_REG27_bccalib[6:0]    <= PWDATA[6:0];
          end
        UTMI_REG28_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG28_cdr_eb_wr_reset <= PWDATA[7];
            UTMI_REG28_unused[6:0]     <= PWDATA[6:0];
          end
        UTMI_REG29_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG29_unused[1:0]     <= PWDATA[7:6];
            UTMI_REG29_pll_standalone  <= PWDATA[5];
            UTMI_REG29_pll_standalone_en <= PWDATA[4];
            UTMI_REG29_spare_out[3:0]  <= PWDATA[3:0];
          end
        UTMI_REG30_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_REG30_unused          <= PWDATA[7];
            UTMI_REG30_pll_480_clock_gate_ovr <= PWDATA[6];
            UTMI_REG30_scan_ats_hs_clock_gate_ovr <= PWDATA[5];
            UTMI_REG30_vco_pll_clock_gate_ovr <= PWDATA[4];
            UTMI_REG30_dig_div_refclock_gate_ovr <= PWDATA[3];
            UTMI_REG30_fb_clock_gate_ovr <= PWDATA[2];
            UTMI_REG30_ana_div_refclock_gate_ovr <= PWDATA[1];
            UTMI_REG30_hs_clock_gate_ovr <= PWDATA[0];
          end
        UTMI_UNUSED_REG0_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_UNUSED_REG0_unused[7:0] <= PWDATA[7:0];
          end
        UTMI_UNUSED_REG1_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_UNUSED_REG1_unused[7:0] <= PWDATA[7:0];
          end
        UTMI_UNUSED_REG2_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_UNUSED_REG2_unused[7:0] <= PWDATA[7:0];
          end
        UTMI_UNUSED_REG3_REG_OFFSET[7:0]:
          if (PENABLE == 1'b1) begin
            UTMI_UNUSED_REG3_unused[7:0] <= PWDATA[7:0];
          end
        endcase
    end  
  end  
end  
always @(*)
begin
  PRDATA[7:0] = 8'h0;
    if ((PSELx == 1'b1) && (PWRITE == 1'b0))
    begin
      case (PADDR[7:0])
        UTMI_REG0_REG_OFFSET[7:0]: begin
          PRDATA[7:6] = UTMI_REG0_loopback_sel[1:0];
          PRDATA[5] = UTMI_REG0_loopback_en;
          PRDATA[4:1] = UTMI_REG0_bist_mode_sel[3:0];
          PRDATA[0] = UTMI_REG0_bist_en;
        end
        UTMI_REG1_REG_OFFSET[7:0]: begin
          PRDATA[7:6] = UTMI_REG1_bist_err[1:0];
          PRDATA[5] = UTMI_REG1_bist_soft_rst;
          PRDATA[4] = UTMI_REG1_tx_lsfs_soft_rst;
          PRDATA[3] = UTMI_REG1_tx_hs_soft_rst;
          PRDATA[2] = UTMI_REG1_clkdiv_soft_rst;
          PRDATA[1] = UTMI_REG1_calib_soft_rst;
          PRDATA[0] = UTMI_REG1_phy_soft_rst;
        end
        UTMI_REG2_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG2_rx_cntrl_soft_rst;
          PRDATA[6] = UTMI_REG2_shift_reg_soft_rst;
          PRDATA[5] = UTMI_REG2_bitunstuff_soft_rst;
          PRDATA[4] = UTMI_REG2_nrzi_dec_soft_rst;
          PRDATA[3] = UTMI_REG2_eop_det_soft_rst;
          PRDATA[2] = UTMI_REG2_sync_det_soft_rst;
          PRDATA[1] = UTMI_REG2_lsfs_dll_soft_rst;
          PRDATA[0] = UTMI_REG2_rx_hs_soft_rst;
        end
        UTMI_REG3_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG3_hs_rx_err;
          PRDATA[6] = UTMI_REG3_ls_linestate_fil_en;
          PRDATA[5:1] = UTMI_REG3_fs_linestate_fil_cnt[4:0];
          PRDATA[0] = UTMI_REG3_fs_linestate_fil_en;
        end
        UTMI_REG4_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = UTMI_REG4_ls_linestate_fil_cnt[7:0];
        end
        UTMI_REG5_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG5_bist_mode_en;
          PRDATA[6] = UTMI_REG5_bist_on;
          PRDATA[5] = UTMI_REG5_hstx_boost_deamp_off;
          PRDATA[4] = UTMI_REG5_hstx_boost;
          PRDATA[3] = UTMI_REG5_hs_samp;
          PRDATA[2] = UTMI_REG5_hs_samp_en;
          PRDATA[1] = UTMI_REG5_hsrx;
          PRDATA[0] = UTMI_REG5_hsrx_en;
        end
        UTMI_REG6_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG6_vbusvalid_cntrl;
          PRDATA[6] = UTMI_REG6_vbusvalid_l3_dev_en;
          PRDATA[5:1] = UTMI_REG6_hs_drven_threshold[4:0];
          PRDATA[0] = UTMI_REG6_hs_drven_th_en;
        end
        UTMI_REG7_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG7_hstx_bc_mode;
          PRDATA[6] = UTMI_REG7_hstx_bc_en;
          PRDATA[5] = UTMI_REG7_hstx_chirp_mode;
          PRDATA[4] = UTMI_REG7_hstx_chirp_en;
          PRDATA[3] = UTMI_REG7_hstx_en_del;
          PRDATA[2] = UTMI_REG7_hstx_en_del_en;
          PRDATA[1] = UTMI_REG7_hstx;
          PRDATA[0] = UTMI_REG7_hstx_en;
        end
        UTMI_REG8_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG8_hs_term;
          PRDATA[6] = UTMI_REG8_hs_term_en;
          PRDATA[5] = UTMI_REG8_hstx_data;
          PRDATA[4] = UTMI_REG8_hstx_data_en;
          PRDATA[3] = UTMI_REG8_hstx_drv;
          PRDATA[2] = UTMI_REG8_hstx_drv_en;
          PRDATA[1] = UTMI_REG8_hstx_predrv;
          PRDATA[0] = UTMI_REG8_hstx_predrv_en;
        end
        UTMI_REG9_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG9_clkoff_en;
          PRDATA[6:4] = UTMI_REG9_sdc_space[2:0];
          PRDATA[3] = UTMI_REG9_sdc_space_en;
          PRDATA[2:1] = UTMI_REG9_hstx_en_del_th[1:0];
          PRDATA[0] = UTMI_REG9_hstx_en_del_th_en;
        end
        UTMI_REG10_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG10_pll_clkon;
          PRDATA[6] = UTMI_REG10_pll_clkon_en;
          PRDATA[5] = UTMI_REG10_bg_pd_bg_ok;
          PRDATA[4] = UTMI_REG10_bg_pd_bg_ok_en;
          PRDATA[3] = UTMI_REG10_lsfs_serx;
          PRDATA[2] = UTMI_REG10_lsfs_serx_en;
          PRDATA[1] = UTMI_REG10_lsfs_rx;
          PRDATA[0] = UTMI_REG10_lsfs_rx_en;
        end
        UTMI_REG11_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG11_clean_linestate_serx_mask_en;
          PRDATA[6] = UTMI_REG11_serx_mask_en;
          PRDATA[5:4] = UTMI_REG11_serx_mask_threshold[1:0];
          PRDATA[3] = UTMI_REG11_lsfs_tx;
          PRDATA[2] = UTMI_REG11_lsfs_tx_en;
          PRDATA[1] = UTMI_REG11_fsls_edgesel;
          PRDATA[0] = UTMI_REG11_fsls_edgesel_en;
        end
        UTMI_REG12_REG_OFFSET[7:0]: begin
          PRDATA[7:6] = UTMI_REG12_serx_bias_en[1:0];
          PRDATA[5] = UTMI_REG12_fsls_tx_data;
          PRDATA[4] = UTMI_REG12_fsls_tx_data_en;
          PRDATA[3] = UTMI_REG12_fsls_tx_se0;
          PRDATA[2] = UTMI_REG12_fsls_tx_se0_en;
          PRDATA[1] = UTMI_REG12_fsls_tx_drv;
          PRDATA[0] = UTMI_REG12_fsls_tx_drv_en;
        end
        UTMI_REG13_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG13_fsls_serialmode_pullup2;
          PRDATA[6] = UTMI_REG13_fsls_serialmode_pullup2_en;
          PRDATA[5] = UTMI_REG13_dm_pulldown;
          PRDATA[4] = UTMI_REG13_dm_pulldown_en;
          PRDATA[3] = UTMI_REG13_dp_pulldown;
          PRDATA[2] = UTMI_REG13_dp_pulldown_en;
          PRDATA[1] = UTMI_REG13_lane_reverse;
          PRDATA[0] = UTMI_REG13_lane_reverse_en;
        end
        UTMI_REG14_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG14_dm_pullup2;
          PRDATA[6] = UTMI_REG14_dm_pullup2_en;
          PRDATA[5] = UTMI_REG14_dp_pullup2;
          PRDATA[4] = UTMI_REG14_dp_pullup2_en;
          PRDATA[3] = UTMI_REG14_dm_pullup1;
          PRDATA[2] = UTMI_REG14_dm_pullup1_en;
          PRDATA[1] = UTMI_REG14_dp_pullup1;
          PRDATA[0] = UTMI_REG14_dp_pullup1_en;
        end
        UTMI_REG15_REG_OFFSET[7:0]: begin
          PRDATA[7:6] = UTMI_REG15_txvalid_gate_threshold_fs[1:0];
          PRDATA[5:4] = UTMI_REG15_txvalid_gate_threshold_hs[1:0];
          PRDATA[3] = UTMI_REG15_ted_en_value;
          PRDATA[2] = UTMI_REG15_ted_en_cnt;
          PRDATA[1] = UTMI_REG15_ed_en_value;
          PRDATA[0] = UTMI_REG15_ed_en_cnt;
        end
        UTMI_REG16_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = UTMI_REG16_unused[7:0];
        end
        UTMI_REG17_REG_OFFSET[7:0]: begin
          PRDATA[7:6] = UTMI_REG17_squelch_count_idle[1:0];
          PRDATA[5] = UTMI_REG17_squelch_count_idle_en;
          PRDATA[4:1] = UTMI_REG17_tx_sq_cnt[3:0];
          PRDATA[0] = UTMI_REG17_tx_sq_cnt_en;
        end
        UTMI_REG18_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG18_sleep_value;
          PRDATA[6] = UTMI_REG18_sleep_en;
          PRDATA[5] = UTMI_REG18_bist_powerup;
          PRDATA[4] = UTMI_REG18_bist_powerup_en;
          PRDATA[3] = UTMI_REG18_powerup_en;
          PRDATA[2] = UTMI_REG18_unused;
          PRDATA[1] = UTMI_REG18_clipper_en;
          PRDATA[0] = UTMI_REG18_clipper_en_en;
        end
        UTMI_REG19_REG_OFFSET[7:0]: begin
          PRDATA[7:1] = UTMI_REG19_unused[6:0];
          PRDATA[0] = UTMI_REG19_ted_sw_en;
        end
        UTMI_REG20_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG20_hostdiscon_rst_reg;
          PRDATA[6] = UTMI_REG20_hostdiscon_rst_reg_en;
          PRDATA[5:1] = UTMI_REG20_calib_rst_dt[4:0];
          PRDATA[0] = UTMI_REG20_calib_rst_dt_en;
        end
        UTMI_REG21_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG21_calib_triger_posedge;
          PRDATA[6] = UTMI_REG21_auto_cal_enable;
          PRDATA[5] = UTMI_REG21_absvalid;
          PRDATA[4] = UTMI_REG21_absvalid_en;
          PRDATA[3] = UTMI_REG21_vbusvalid;
          PRDATA[2] = UTMI_REG21_vbusvalid_en;
          PRDATA[1] = UTMI_REG21_suspendm;
          PRDATA[0] = UTMI_REG21_suspendm_en;
        end
        UTMI_REG22_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = UTMI_REG22_bccalib_offset[7:0];
        end
        UTMI_REG23_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = UTMI_REG23_hscalib_offset[7:0];
        end
        UTMI_REG24_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = UTMI_REG24_fscalib_offset[7:0];
        end
        UTMI_REG25_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG25_unused;
          PRDATA[6:0] = UTMI_REG25_hscalib[6:0];
        end
        UTMI_REG26_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG26_unused;
          PRDATA[6:0] = UTMI_REG26_fscalib[6:0];
        end
        UTMI_REG27_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG27_unused;
          PRDATA[6:0] = UTMI_REG27_bccalib[6:0];
        end
        UTMI_REG28_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG28_cdr_eb_wr_reset;
          PRDATA[6:0] = UTMI_REG28_unused[6:0];
        end
        UTMI_REG29_REG_OFFSET[7:0]: begin
          PRDATA[7:6] = UTMI_REG29_unused[1:0];
          PRDATA[5] = UTMI_REG29_pll_standalone;
          PRDATA[4] = UTMI_REG29_pll_standalone_en;
          PRDATA[3:0] = UTMI_REG29_spare_out[3:0];
        end
        UTMI_REG30_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG30_unused;
          PRDATA[6] = UTMI_REG30_pll_480_clock_gate_ovr;
          PRDATA[5] = UTMI_REG30_scan_ats_hs_clock_gate_ovr;
          PRDATA[4] = UTMI_REG30_vco_pll_clock_gate_ovr;
          PRDATA[3] = UTMI_REG30_dig_div_refclock_gate_ovr;
          PRDATA[2] = UTMI_REG30_fb_clock_gate_ovr;
          PRDATA[1] = UTMI_REG30_ana_div_refclock_gate_ovr;
          PRDATA[0] = UTMI_REG30_hs_clock_gate_ovr;
        end
        UTMI_UNUSED_REG0_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = UTMI_UNUSED_REG0_unused[7:0];
        end
        UTMI_UNUSED_REG1_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = UTMI_UNUSED_REG1_unused[7:0];
        end
        UTMI_UNUSED_REG2_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = UTMI_UNUSED_REG2_unused[7:0];
        end
        UTMI_UNUSED_REG3_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = UTMI_UNUSED_REG3_unused[7:0];
        end
        UTMI_REG31_REG_OFFSET[7:0]: begin
          PRDATA[7:2] = UTMI_REG31_unused_IN[5:0];
          PRDATA[1] = UTMI_REG31_bist_error_IN;
          PRDATA[0] = UTMI_REG31_bist_complete_IN;
        end
        UTMI_REG32_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = UTMI_REG32_bist_err_count_IN[7:0];
        end
        UTMI_REG33_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG33_bg_powergood_IN;
          PRDATA[6] = UTMI_REG33_afe_hsrx_diff_data_IN;
          PRDATA[5] = UTMI_REG33_hsrx_en_IN;
          PRDATA[4] = UTMI_REG33_hsrx_sampler_enable_IN;
          PRDATA[3] = UTMI_REG33_chirp_mode_en_IN;
          PRDATA[2] = UTMI_REG33_hstx_en_IN;
          PRDATA[1] = UTMI_REG33_hstx_en_delayed_IN;
          PRDATA[0] = UTMI_REG33_hstx_boost_deamp_off_IN;
        end
        UTMI_REG34_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG34_o_dprpu1_en_IN;
          PRDATA[6] = UTMI_REG34_o_dmrpu1_en_IN;
          PRDATA[5] = UTMI_REG34_o_dprpu2_en_IN;
          PRDATA[4] = UTMI_REG34_o_dmrpu2_en_IN;
          PRDATA[3] = UTMI_REG34_o_dprpd_en_IN;
          PRDATA[2] = UTMI_REG34_o_dmrpd_en_IN;
          PRDATA[1] = UTMI_REG34_o_otgc_id_pullup_en_IN;
          PRDATA[0] = UTMI_REG34_o_fs_edge_sel_IN;
        end
        UTMI_REG35_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG35_i_afe_lsfsrx_ana_IN;
          PRDATA[6] = UTMI_REG35_o_lsfstx_en_IN;
          PRDATA[5] = UTMI_REG35_o_lsfsdrv_en_IN;
          PRDATA[4] = UTMI_REG35_o_lsfs_ddi_IN;
          PRDATA[3] = UTMI_REG35_o_assert_sezero_IN;
          PRDATA[2] = UTMI_REG35_o_lsfsrx_en_IN;
          PRDATA[1] = UTMI_REG35_o_serx_en_IN;
          PRDATA[0] = UTMI_REG35_o_serx_bias_en_IN;
        end
        UTMI_REG36_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG36_o_pll_pso_IN;
          PRDATA[6] = UTMI_REG36_o_pll_pso_delay_IN;
          PRDATA[5] = UTMI_REG36_o_pll_pd_IN;
          PRDATA[4:0] = UTMI_REG36_o_pll_ipdiv_IN[4:0];
        end
        UTMI_REG37_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = UTMI_REG37_o_pll_fbdiv_value_IN[7:0];
        end
        UTMI_REG38_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG38_o_pll_standby_IN;
          PRDATA[6] = UTMI_REG38_o_pll_ldo_core_en_IN;
          PRDATA[5] = UTMI_REG38_o_pll_ldo_ref_en_IN;
          PRDATA[4] = UTMI_REG38_o_afe_suspendm_IN;
          PRDATA[3] = UTMI_REG38_o_otgc_vbusvalid_en_IN;
          PRDATA[2] = UTMI_REG38_o_otgc_absvalid_en_IN;
          PRDATA[1] = UTMI_REG38_o_afe_clipper_en_IN;
          PRDATA[0] = UTMI_REG38_o_pll_ldo_isolation_cntrl_IN;
        end
        UTMI_REG39_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = UTMI_REG39_unused_IN[7:0];
        end
        UTMI_REG40_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = UTMI_REG40_unused_IN[7:0];
        end
        UTMI_REG41_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG41_i_ted_squelch_ana_IN;
          PRDATA[6] = UTMI_REG41_i_usb2_rescal_calib_done_IN;
          PRDATA[5:0] = UTMI_REG41_hs_calib_code_IN[5:0];
        end
        UTMI_REG42_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG42_hs_sof_IN;
          PRDATA[6] = UTMI_REG42_all_calib_done_IN;
          PRDATA[5:0] = UTMI_REG42_fs_calib_code_IN[5:0];
        end
        UTMI_REG43_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG43_ls_mode_IN;
          PRDATA[6] = UTMI_REG43_fs_mode_pre_IN;
          PRDATA[5:0] = UTMI_REG43_bc_calib_code_IN[5:0];
        end
        UTMI_REG44_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG44_rstn_refclock_IN;
          PRDATA[6] = UTMI_REG44_rstn_hs_clock_IN;
          PRDATA[5] = UTMI_REG44_rstn_hs_tx_clock_IN;
          PRDATA[4] = UTMI_REG44_rstn_byte_clock_IN;
          PRDATA[3] = UTMI_REG44_rstn_sieclock_IN;
          PRDATA[2] = UTMI_REG44_rstn_clkdiv_IN;
          PRDATA[1] = UTMI_REG44_rstn_calib_clkdiv_IN;
          PRDATA[0] = UTMI_REG44_udc_rstn_cdr_async_IN;
        end
        UTMI_REG45_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG45_udc_calib_rstn_IN;
          PRDATA[6] = UTMI_REG45_udc_apb_rstn_IN;
          PRDATA[5] = UTMI_REG45_o_rstn_cdr_async_IN;
          PRDATA[4] = UTMI_REG45_o_pll_calib_rstn_IN;
          PRDATA[3] = UTMI_REG45_bist_mode_rstn_IN;
          PRDATA[2] = UTMI_REG45_o_usb2_calib_rstn_IN;
          PRDATA[1] = UTMI_REG45_udc_bc_calib_rstn_IN;
          PRDATA[0] = UTMI_REG45_global_resetn_IN;
        end
        UTMI_REG46_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG46_unused_IN;
          PRDATA[6] = UTMI_REG46_recovery_cnt_en_IN;
          PRDATA[5:4] = UTMI_REG46_clean_linestate_IN[1:0];
          PRDATA[3:0] = UTMI_REG46_bc_state_machine_status_IN[3:0];
        end
        UTMI_REG47_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG47_filter_cnt_en_IN;
          PRDATA[6:5] = UTMI_REG47_host_opmode_IN[1:0];
          PRDATA[4:3] = UTMI_REG47_dev_opmode_IN[1:0];
          PRDATA[2] = UTMI_REG47_i_ded_ana_IN;
          PRDATA[1] = UTMI_REG47_hs_hostdisconnect_IN;
          PRDATA[0] = UTMI_REG47_lsfs_hostdisconnect_IN;
        end
        UTMI_REG48_REG_OFFSET[7:0]: begin
          PRDATA[7:6] = UTMI_REG48_bist_tx_state_IN[1:0];
          PRDATA[5:0] = UTMI_REG48_data_cnt_tx_IN[5:0];
        end
        UTMI_REG49_REG_OFFSET[7:0]: begin
          PRDATA[7:6] = UTMI_REG49_bist_rx_state_IN[1:0];
          PRDATA[5:0] = UTMI_REG49_data_cnt_rx_IN[5:0];
        end
        UTMI_REG50_REG_OFFSET[7:0]: begin
          PRDATA[7:4] = UTMI_REG50_bist_top_state_IN[3:0];
          PRDATA[3] = UTMI_REG50_inc_data_cnt_tx_IN;
          PRDATA[2] = UTMI_REG50_inc_data_cnt_rx_IN;
          PRDATA[1] = UTMI_REG50_o_bg_pd_IN;
          PRDATA[0] = UTMI_REG50_o_bg_pd_bg_ok_IN;
        end
        UTMI_REG51_REG_OFFSET[7:0]: begin
          PRDATA[7:6] = UTMI_REG51_powerdown_IN[1:0];
          PRDATA[5] = UTMI_REG51_reset_IN;
          PRDATA[4] = UTMI_REG51_suspendm_IN;
          PRDATA[3] = UTMI_REG51_termselect_IN;
          PRDATA[2] = UTMI_REG51_databus16_8_IN;
          PRDATA[1] = UTMI_REG51_dppulldown_IN;
          PRDATA[0] = UTMI_REG51_dmpulldown_IN;
        end
        UTMI_REG52_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG52_lane_reverse_IN;
          PRDATA[6] = UTMI_REG52_txbitstuffenable_IN;
          PRDATA[5] = UTMI_REG52_txbitstuffenableh_IN;
          PRDATA[4:3] = UTMI_REG52_xcvrselect_IN[1:0];
          PRDATA[2:1] = UTMI_REG52_linestate_IN[1:0];
          PRDATA[0] = UTMI_REG52_hostdisconnect_IN;
        end
        UTMI_REG53_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG53_fslsserialmode_IN;
          PRDATA[6] = UTMI_REG53_tx_enable_n_IN;
          PRDATA[5] = UTMI_REG53_tx_dat_IN;
          PRDATA[4] = UTMI_REG53_tx_se0_IN;
          PRDATA[3] = UTMI_REG53_sleepm_IN;
          PRDATA[2] = UTMI_REG53_unused_IN;
          PRDATA[1:0] = UTMI_REG53_opmode_IN[1:0];
        end
        UTMI_REG54_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG54_rx_dp_IN;
          PRDATA[6] = UTMI_REG54_rx_dm_IN;
          PRDATA[5] = UTMI_REG54_rx_rcv_IN;
          PRDATA[4:0] = UTMI_REG54_unused_IN[4:0];
        end
        UTMI_REG55_REG_OFFSET[7:0]: begin
          PRDATA[7] = UTMI_REG55_txvalidh_IN;
          PRDATA[6] = UTMI_REG55_txvalid_IN;
          PRDATA[5] = UTMI_REG55_txready_IN;
          PRDATA[4] = UTMI_REG55_rxvalidh_IN;
          PRDATA[3] = UTMI_REG55_rxvalid_IN;
          PRDATA[2] = UTMI_REG55_rxactive_IN;
          PRDATA[1] = UTMI_REG55_rxerror_IN;
          PRDATA[0] = UTMI_REG55_unused_IN;
        end
        UTMI_REG56_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = UTMI_REG56_datain_upper_IN[7:0];
        end
        UTMI_REG57_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = UTMI_REG57_datain_lower_IN[7:0];
        end
        UTMI_REG58_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = UTMI_REG58_dataout_upper_IN[7:0];
        end
        UTMI_REG59_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = UTMI_REG59_dataout_lower_IN[7:0];
        end
        UTMI_UNUSED_REG6_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = UTMI_UNUSED_REG6_unused_IN[7:0];
        end
        UTMI_UNUSED_REG7_REG_OFFSET[7:0]: begin
          PRDATA[7:0] = UTMI_UNUSED_REG7_unused_IN[7:0];
        end
       default:
          PRDATA = 8'h0;
      endcase
    end  
end  
assign UTMI_REG0_loopback_sel_OUT[1:0] = UTMI_REG0_loopback_sel[1:0];
assign UTMI_REG0_loopback_en_OUT       = UTMI_REG0_loopback_en;
assign UTMI_REG0_bist_mode_sel_OUT[3:0] = UTMI_REG0_bist_mode_sel[3:0];
assign UTMI_REG0_bist_en_OUT           = UTMI_REG0_bist_en;
assign UTMI_REG1_bist_err_OUT[1:0]     = UTMI_REG1_bist_err[1:0];
assign UTMI_REG1_bist_soft_rst_OUT     = UTMI_REG1_bist_soft_rst;
assign UTMI_REG1_tx_lsfs_soft_rst_OUT  = UTMI_REG1_tx_lsfs_soft_rst;
assign UTMI_REG1_tx_hs_soft_rst_OUT    = UTMI_REG1_tx_hs_soft_rst;
assign UTMI_REG1_clkdiv_soft_rst_OUT   = UTMI_REG1_clkdiv_soft_rst;
assign UTMI_REG1_calib_soft_rst_OUT    = UTMI_REG1_calib_soft_rst;
assign UTMI_REG1_phy_soft_rst_OUT      = UTMI_REG1_phy_soft_rst;
assign UTMI_REG2_rx_cntrl_soft_rst_OUT = UTMI_REG2_rx_cntrl_soft_rst;
assign UTMI_REG2_shift_reg_soft_rst_OUT = UTMI_REG2_shift_reg_soft_rst;
assign UTMI_REG2_bitunstuff_soft_rst_OUT = UTMI_REG2_bitunstuff_soft_rst;
assign UTMI_REG2_nrzi_dec_soft_rst_OUT = UTMI_REG2_nrzi_dec_soft_rst;
assign UTMI_REG2_eop_det_soft_rst_OUT  = UTMI_REG2_eop_det_soft_rst;
assign UTMI_REG2_sync_det_soft_rst_OUT = UTMI_REG2_sync_det_soft_rst;
assign UTMI_REG2_lsfs_dll_soft_rst_OUT = UTMI_REG2_lsfs_dll_soft_rst;
assign UTMI_REG2_rx_hs_soft_rst_OUT    = UTMI_REG2_rx_hs_soft_rst;
assign UTMI_REG3_hs_rx_err_OUT         = UTMI_REG3_hs_rx_err;
assign UTMI_REG3_ls_linestate_fil_en_OUT = UTMI_REG3_ls_linestate_fil_en;
assign UTMI_REG3_fs_linestate_fil_cnt_OUT[4:0] = UTMI_REG3_fs_linestate_fil_cnt[4:0];
assign UTMI_REG3_fs_linestate_fil_en_OUT = UTMI_REG3_fs_linestate_fil_en;
assign UTMI_REG4_ls_linestate_fil_cnt_OUT[7:0] = UTMI_REG4_ls_linestate_fil_cnt[7:0];
assign UTMI_REG5_bist_mode_en_OUT      = UTMI_REG5_bist_mode_en;
assign UTMI_REG5_bist_on_OUT           = UTMI_REG5_bist_on;
assign UTMI_REG5_hstx_boost_deamp_off_OUT = UTMI_REG5_hstx_boost_deamp_off;
assign UTMI_REG5_hstx_boost_OUT        = UTMI_REG5_hstx_boost;
assign UTMI_REG5_hs_samp_OUT           = UTMI_REG5_hs_samp;
assign UTMI_REG5_hs_samp_en_OUT        = UTMI_REG5_hs_samp_en;
assign UTMI_REG5_hsrx_OUT              = UTMI_REG5_hsrx;
assign UTMI_REG5_hsrx_en_OUT           = UTMI_REG5_hsrx_en;
assign UTMI_REG6_vbusvalid_cntrl_OUT   = UTMI_REG6_vbusvalid_cntrl;
assign UTMI_REG6_vbusvalid_l3_dev_en_OUT = UTMI_REG6_vbusvalid_l3_dev_en;
assign UTMI_REG6_hs_drven_threshold_OUT[4:0] = UTMI_REG6_hs_drven_threshold[4:0];
assign UTMI_REG6_hs_drven_th_en_OUT    = UTMI_REG6_hs_drven_th_en;
assign UTMI_REG7_hstx_bc_mode_OUT      = UTMI_REG7_hstx_bc_mode;
assign UTMI_REG7_hstx_bc_en_OUT        = UTMI_REG7_hstx_bc_en;
assign UTMI_REG7_hstx_chirp_mode_OUT   = UTMI_REG7_hstx_chirp_mode;
assign UTMI_REG7_hstx_chirp_en_OUT     = UTMI_REG7_hstx_chirp_en;
assign UTMI_REG7_hstx_en_del_OUT       = UTMI_REG7_hstx_en_del;
assign UTMI_REG7_hstx_en_del_en_OUT    = UTMI_REG7_hstx_en_del_en;
assign UTMI_REG7_hstx_OUT              = UTMI_REG7_hstx;
assign UTMI_REG7_hstx_en_OUT           = UTMI_REG7_hstx_en;
assign UTMI_REG8_hs_term_OUT           = UTMI_REG8_hs_term;
assign UTMI_REG8_hs_term_en_OUT        = UTMI_REG8_hs_term_en;
assign UTMI_REG8_hstx_data_OUT         = UTMI_REG8_hstx_data;
assign UTMI_REG8_hstx_data_en_OUT      = UTMI_REG8_hstx_data_en;
assign UTMI_REG8_hstx_drv_OUT          = UTMI_REG8_hstx_drv;
assign UTMI_REG8_hstx_drv_en_OUT       = UTMI_REG8_hstx_drv_en;
assign UTMI_REG8_hstx_predrv_OUT       = UTMI_REG8_hstx_predrv;
assign UTMI_REG8_hstx_predrv_en_OUT    = UTMI_REG8_hstx_predrv_en;
assign UTMI_REG9_clkoff_en_OUT         = UTMI_REG9_clkoff_en;
assign UTMI_REG9_sdc_space_OUT[2:0]    = UTMI_REG9_sdc_space[2:0];
assign UTMI_REG9_sdc_space_en_OUT      = UTMI_REG9_sdc_space_en;
assign UTMI_REG9_hstx_en_del_th_OUT[1:0] = UTMI_REG9_hstx_en_del_th[1:0];
assign UTMI_REG9_hstx_en_del_th_en_OUT = UTMI_REG9_hstx_en_del_th_en;
assign UTMI_REG10_pll_clkon_OUT        = UTMI_REG10_pll_clkon;
assign UTMI_REG10_pll_clkon_en_OUT     = UTMI_REG10_pll_clkon_en;
assign UTMI_REG10_bg_pd_bg_ok_OUT      = UTMI_REG10_bg_pd_bg_ok;
assign UTMI_REG10_bg_pd_bg_ok_en_OUT   = UTMI_REG10_bg_pd_bg_ok_en;
assign UTMI_REG10_lsfs_serx_OUT        = UTMI_REG10_lsfs_serx;
assign UTMI_REG10_lsfs_serx_en_OUT     = UTMI_REG10_lsfs_serx_en;
assign UTMI_REG10_lsfs_rx_OUT          = UTMI_REG10_lsfs_rx;
assign UTMI_REG10_lsfs_rx_en_OUT       = UTMI_REG10_lsfs_rx_en;
assign UTMI_REG11_clean_linestate_serx_mask_en_OUT = UTMI_REG11_clean_linestate_serx_mask_en;
assign UTMI_REG11_serx_mask_en_OUT     = UTMI_REG11_serx_mask_en;
assign UTMI_REG11_serx_mask_threshold_OUT[1:0] = UTMI_REG11_serx_mask_threshold[1:0];
assign UTMI_REG11_lsfs_tx_OUT          = UTMI_REG11_lsfs_tx;
assign UTMI_REG11_lsfs_tx_en_OUT       = UTMI_REG11_lsfs_tx_en;
assign UTMI_REG11_fsls_edgesel_OUT     = UTMI_REG11_fsls_edgesel;
assign UTMI_REG11_fsls_edgesel_en_OUT  = UTMI_REG11_fsls_edgesel_en;
assign UTMI_REG12_serx_bias_en_OUT[1:0] = UTMI_REG12_serx_bias_en[1:0];
assign UTMI_REG12_fsls_tx_data_OUT     = UTMI_REG12_fsls_tx_data;
assign UTMI_REG12_fsls_tx_data_en_OUT  = UTMI_REG12_fsls_tx_data_en;
assign UTMI_REG12_fsls_tx_se0_OUT      = UTMI_REG12_fsls_tx_se0;
assign UTMI_REG12_fsls_tx_se0_en_OUT   = UTMI_REG12_fsls_tx_se0_en;
assign UTMI_REG12_fsls_tx_drv_OUT      = UTMI_REG12_fsls_tx_drv;
assign UTMI_REG12_fsls_tx_drv_en_OUT   = UTMI_REG12_fsls_tx_drv_en;
assign UTMI_REG13_fsls_serialmode_pullup2_OUT = UTMI_REG13_fsls_serialmode_pullup2;
assign UTMI_REG13_fsls_serialmode_pullup2_en_OUT = UTMI_REG13_fsls_serialmode_pullup2_en;
assign UTMI_REG13_dm_pulldown_OUT      = UTMI_REG13_dm_pulldown;
assign UTMI_REG13_dm_pulldown_en_OUT   = UTMI_REG13_dm_pulldown_en;
assign UTMI_REG13_dp_pulldown_OUT      = UTMI_REG13_dp_pulldown;
assign UTMI_REG13_dp_pulldown_en_OUT   = UTMI_REG13_dp_pulldown_en;
assign UTMI_REG13_lane_reverse_OUT     = UTMI_REG13_lane_reverse;
assign UTMI_REG13_lane_reverse_en_OUT  = UTMI_REG13_lane_reverse_en;
assign UTMI_REG14_dm_pullup2_OUT       = UTMI_REG14_dm_pullup2;
assign UTMI_REG14_dm_pullup2_en_OUT    = UTMI_REG14_dm_pullup2_en;
assign UTMI_REG14_dp_pullup2_OUT       = UTMI_REG14_dp_pullup2;
assign UTMI_REG14_dp_pullup2_en_OUT    = UTMI_REG14_dp_pullup2_en;
assign UTMI_REG14_dm_pullup1_OUT       = UTMI_REG14_dm_pullup1;
assign UTMI_REG14_dm_pullup1_en_OUT    = UTMI_REG14_dm_pullup1_en;
assign UTMI_REG14_dp_pullup1_OUT       = UTMI_REG14_dp_pullup1;
assign UTMI_REG14_dp_pullup1_en_OUT    = UTMI_REG14_dp_pullup1_en;
assign UTMI_REG15_txvalid_gate_threshold_fs_OUT[1:0] = UTMI_REG15_txvalid_gate_threshold_fs[1:0];
assign UTMI_REG15_txvalid_gate_threshold_hs_OUT[1:0] = UTMI_REG15_txvalid_gate_threshold_hs[1:0];
assign UTMI_REG15_ted_en_value_OUT     = UTMI_REG15_ted_en_value;
assign UTMI_REG15_ted_en_cnt_OUT       = UTMI_REG15_ted_en_cnt;
assign UTMI_REG15_ed_en_value_OUT      = UTMI_REG15_ed_en_value;
assign UTMI_REG15_ed_en_cnt_OUT        = UTMI_REG15_ed_en_cnt;
assign UTMI_REG16_unused_OUT[7:0]      = UTMI_REG16_unused[7:0];
assign UTMI_REG17_squelch_count_idle_OUT[1:0] = UTMI_REG17_squelch_count_idle[1:0];
assign UTMI_REG17_squelch_count_idle_en_OUT = UTMI_REG17_squelch_count_idle_en;
assign UTMI_REG17_tx_sq_cnt_OUT[3:0]   = UTMI_REG17_tx_sq_cnt[3:0];
assign UTMI_REG17_tx_sq_cnt_en_OUT     = UTMI_REG17_tx_sq_cnt_en;
assign UTMI_REG18_sleep_value_OUT      = UTMI_REG18_sleep_value;
assign UTMI_REG18_sleep_en_OUT         = UTMI_REG18_sleep_en;
assign UTMI_REG18_bist_powerup_OUT     = UTMI_REG18_bist_powerup;
assign UTMI_REG18_bist_powerup_en_OUT  = UTMI_REG18_bist_powerup_en;
assign UTMI_REG18_powerup_en_OUT       = UTMI_REG18_powerup_en;
assign UTMI_REG18_unused_OUT           = UTMI_REG18_unused;
assign UTMI_REG18_clipper_en_OUT       = UTMI_REG18_clipper_en;
assign UTMI_REG18_clipper_en_en_OUT    = UTMI_REG18_clipper_en_en;
assign UTMI_REG19_unused_OUT[6:0]      = UTMI_REG19_unused[6:0];
assign UTMI_REG19_ted_sw_en_OUT        = UTMI_REG19_ted_sw_en;
assign UTMI_REG20_hostdiscon_rst_reg_OUT = UTMI_REG20_hostdiscon_rst_reg;
assign UTMI_REG20_hostdiscon_rst_reg_en_OUT = UTMI_REG20_hostdiscon_rst_reg_en;
assign UTMI_REG20_calib_rst_dt_OUT[4:0] = UTMI_REG20_calib_rst_dt[4:0];
assign UTMI_REG20_calib_rst_dt_en_OUT  = UTMI_REG20_calib_rst_dt_en;
assign UTMI_REG21_calib_triger_posedge_OUT = UTMI_REG21_calib_triger_posedge;
assign UTMI_REG21_auto_cal_enable_OUT  = UTMI_REG21_auto_cal_enable;
assign UTMI_REG21_absvalid_OUT         = UTMI_REG21_absvalid;
assign UTMI_REG21_absvalid_en_OUT      = UTMI_REG21_absvalid_en;
assign UTMI_REG21_vbusvalid_OUT        = UTMI_REG21_vbusvalid;
assign UTMI_REG21_vbusvalid_en_OUT     = UTMI_REG21_vbusvalid_en;
assign UTMI_REG21_suspendm_OUT         = UTMI_REG21_suspendm;
assign UTMI_REG21_suspendm_en_OUT      = UTMI_REG21_suspendm_en;
assign UTMI_REG22_bccalib_offset_OUT[7:0] = UTMI_REG22_bccalib_offset[7:0];
assign UTMI_REG23_hscalib_offset_OUT[7:0] = UTMI_REG23_hscalib_offset[7:0];
assign UTMI_REG24_fscalib_offset_OUT[7:0] = UTMI_REG24_fscalib_offset[7:0];
assign UTMI_REG25_unused_OUT           = UTMI_REG25_unused;
assign UTMI_REG25_hscalib_OUT[6:0]     = UTMI_REG25_hscalib[6:0];
assign UTMI_REG26_unused_OUT           = UTMI_REG26_unused;
assign UTMI_REG26_fscalib_OUT[6:0]     = UTMI_REG26_fscalib[6:0];
assign UTMI_REG27_unused_OUT           = UTMI_REG27_unused;
assign UTMI_REG27_bccalib_OUT[6:0]     = UTMI_REG27_bccalib[6:0];
assign UTMI_REG28_cdr_eb_wr_reset_OUT  = UTMI_REG28_cdr_eb_wr_reset;
assign UTMI_REG28_unused_OUT[6:0]      = UTMI_REG28_unused[6:0];
assign UTMI_REG29_unused_OUT[1:0]      = UTMI_REG29_unused[1:0];
assign UTMI_REG29_pll_standalone_OUT   = UTMI_REG29_pll_standalone;
assign UTMI_REG29_pll_standalone_en_OUT = UTMI_REG29_pll_standalone_en;
assign UTMI_REG29_spare_out_OUT[3:0]   = UTMI_REG29_spare_out[3:0];
assign UTMI_REG30_unused_OUT           = UTMI_REG30_unused;
assign UTMI_REG30_pll_480_clock_gate_ovr_OUT = UTMI_REG30_pll_480_clock_gate_ovr;
assign UTMI_REG30_scan_ats_hs_clock_gate_ovr_OUT = UTMI_REG30_scan_ats_hs_clock_gate_ovr;
assign UTMI_REG30_vco_pll_clock_gate_ovr_OUT = UTMI_REG30_vco_pll_clock_gate_ovr;
assign UTMI_REG30_dig_div_refclock_gate_ovr_OUT = UTMI_REG30_dig_div_refclock_gate_ovr;
assign UTMI_REG30_fb_clock_gate_ovr_OUT = UTMI_REG30_fb_clock_gate_ovr;
assign UTMI_REG30_ana_div_refclock_gate_ovr_OUT = UTMI_REG30_ana_div_refclock_gate_ovr;
assign UTMI_REG30_hs_clock_gate_ovr_OUT = UTMI_REG30_hs_clock_gate_ovr;
assign UTMI_UNUSED_REG0_unused_OUT[7:0] = UTMI_UNUSED_REG0_unused[7:0];
assign UTMI_UNUSED_REG1_unused_OUT[7:0] = UTMI_UNUSED_REG1_unused[7:0];
assign UTMI_UNUSED_REG2_unused_OUT[7:0] = UTMI_UNUSED_REG2_unused[7:0];
assign UTMI_UNUSED_REG3_unused_OUT[7:0] = UTMI_UNUSED_REG3_unused[7:0];
endmodule
module pll_clk_divider_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r (
output       pll_clockout,
output       pll_clk_gate_ack,   
input	     i_dvdd_core_powergood,
output	     dvdd_iso,
input [1:0]  pll_clk_sel,   
input        i_pll_480p0_rx_clk, 
input        test_pll_480_clock_gate_ovr,
input        rstn_pll_clockout,
input        reset,
input        scan_mode,
input        scan_en_cg,
input [2:0]  i_tm_pll_clk_div,
input        pll_gate         
);
reg [3:0] clk_div_val;
wire scan_reset, pll_clockout_div, ONE, pll_clk_en;
wire [1:0] clk_sel;
assign scan_reset = ~reset;
assign clk_sel = i_tm_pll_clk_div[0] ? i_tm_pll_clk_div[2:1] : pll_clk_sel;
assign ONE = 1'b1;
assign dvdd_iso = ~i_dvdd_core_powergood;
always@(*)
begin
    case(clk_sel)    
    2'd0: clk_div_val = 1;
    2'd1: clk_div_val = 2;
    2'd2: clk_div_val = 4;
    2'd3: clk_div_val = 8;
    endcase  
end
clock_div_prog_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.DIV_CTRL_WIDTH(4)) pll_clk_div (
.clock_div_sel           (clk_div_val),
.clock_in                (i_pll_480p0_rx_clk),
.clock_div_out           (pll_clockout_div),
.reset_in_n              (rstn_pll_clockout),
.reset_out_n             (),
.upstream_reset_in_n     (ONE),
.scan_reset_in_n         (scan_reset),
.scan_mode_en_in         (scan_mode)
);
assign pll_clk_en = test_pll_480_clock_gate_ovr | ~pll_gate;
clk_gating_cell_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.NUM_SYNC_FLOPS(2)) pll_480_clk_gate (
.reset_n (rstn_pll_clockout),
.en (pll_clk_en),
.scanen (scan_en_cg),
.clk_in (pll_clockout_div),
.en_synced (),
.en_ack (pll_clk_gate_ack),
.clk_out (pll_clockout)
);
endmodule
`timescale 1ns/1ps
module udc_rx_hs_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r ( 
rec_clock,		 
rstn_eb_async,		 
hs_clock,		 
rstn_hs_clock,		 
test_hs_rx_err_reg,
hs_cdr_data,		 
hs_cdr_data_valid,	 
hs_cdr_decision_error,	 
rx_hs_soft_reset,	 
hs_mode,		 
squelch,		 
i_ted_squelch_ana,	 
eop_detected,		 
rxerror_ack,             
set1_dis,                
reset_wr_ind,		 
negedge_squelch,	 
cdr_error,		 
hs_eb_data,		 
hs_eb_data_valid,	 
hs_eb_empty,		 
debug_eb_error
);
input		rec_clock, rstn_eb_async, hs_clock, rstn_hs_clock, i_ted_squelch_ana, rxerror_ack, test_hs_rx_err_reg;
input		rx_hs_soft_reset, hs_mode, squelch, eop_detected, hs_cdr_data, hs_cdr_data_valid, hs_cdr_decision_error ;
input    	set1_dis;
output 		reset_wr_ind, cdr_error, hs_eb_data, hs_eb_data_valid, hs_eb_empty, negedge_squelch ;
output		debug_eb_error ;
wire		eb_error_detected, cdr_decision_error_sync, reset_wr_ind, rst_first_valid, posedge_eop_detected,
		hs_eb_empty_loc, negedge_squelch, read_start, posedge_first_valid, first_valid_sync, squelch_sync, 
		read_start_sync, cdr_error ;
wire	[25:0]	elasticity_buffer, RD_IND_DEFAULT, WR_IND_DEFAULT ;
wire            long_eop_case_wr_sync, long_eop_case_rd_sync, long_eop_case_wr;
reg		eb_00, eb_01, eb_02, eb_03, eb_04, eb_05, eb_06, eb_07, eb_08, eb_09, eb_10, eb_11, eb_12,  
		eb_13, eb_14, eb_15, eb_16, eb_17, eb_18, eb_19, eb_20, eb_21, eb_22, eb_23, eb_24, eb_25 ;
reg		first_valid, read_start_d, hs_eb_empty, cdr_error_d, eb_error, hs_eb_data, hs_eb_data_valid,
		squelch_d, negedge_squelch_d, first_valid_sync_d, eop_detected_d ;
reg	[25:0]	wr_ind, wr_ind_d, rd_ind ;
reg             cdr_error_loc, rec_valid_reg;
wire		debug_eb_error ,hs_cdr_data_int;
assign debug_eb_error = eb_error ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
	begin
		hs_eb_data_valid <= 1'b 0 ;
		hs_eb_data       <= 1'b 1 ;
	end
	else
	begin
		hs_eb_data_valid <= read_start ;
		hs_eb_data       <= (|(rd_ind & elasticity_buffer)) ;
	end
end
assign hs_eb_empty_loc = (read_start & squelch & wr_ind_d == rd_ind) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
	begin
		hs_eb_empty <= 1'b 0 ;
		eop_detected_d <= 1'b 0 ;
	end
	else
	begin
		hs_eb_empty <= hs_eb_empty_loc ;
		eop_detected_d <= eop_detected ;
	end
end
assign posedge_eop_detected = (hs_mode & eop_detected & ~eop_detected_d) ;
assign eb_error_detected = (read_start & ~squelch & ~eop_detected & (wr_ind_d == rd_ind)) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		eb_error <= 1'b 0 ;
	else if(rx_hs_soft_reset | posedge_eop_detected | ~hs_mode | negedge_squelch)
		eb_error <= 1'b 0 ;
	else if(eb_error_detected)
		eb_error <= 1'b 1 ;
end
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_hseb_sync (
.clock		(hs_clock) ,
.reset_n	(rstn_hs_clock) ,
.d_in	        (hs_cdr_decision_error) ,
.d_out	        (cdr_decision_error_sync)
);
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
	begin
		cdr_error_loc <= 1'b 0 ;
		squelch_d <= 1'b 1 ;
		negedge_squelch_d <= 1'b 0 ;
	end
	else
	begin
		cdr_error_loc <= (eb_error | cdr_decision_error_sync) ;
		squelch_d <= squelch ;
		negedge_squelch_d <= negedge_squelch ;
	end
end
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
                cdr_error_d <= 1'b0 ;
        else
        begin
                if(cdr_error_loc)
                        cdr_error_d <= 1'b1;
                if(rxerror_ack)
                        cdr_error_d <= 1'b0;
        end
end
assign cdr_error = test_hs_rx_err_reg ? cdr_error_d : cdr_error_loc;
assign negedge_squelch = (~squelch & squelch_d) ;
assign reset_wr_ind    = (negedge_squelch | negedge_squelch_d) ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_hseb_rst_first_valid_sync (
.clock		(rec_clock) ,
.reset_n	(rstn_eb_async) ,
.d_in	        (first_valid_sync) ,
.d_out	        (rst_first_valid)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b1)) c_hseb_ted_squelch_ana_sync (
.clock		(rec_clock) ,
.reset_n	(rstn_eb_async) ,
.d_in	        (i_ted_squelch_ana) ,
.d_out	        (squelch_sync)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_hseb_read_start_sync (
.clock		(rec_clock) ,
.reset_n	(rstn_eb_async) ,
.d_in	        (read_start) ,
.d_out	        (read_start_sync)
);
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		first_valid <= 1'b 0 ;
	else if(  rst_first_valid)
		first_valid <= 1'b 0 ;
	else if(~read_start_sync & ~first_valid & rec_valid_reg & ~squelch_sync & ~long_eop_case_wr_sync)
		first_valid <= 1'b 1 ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		rec_valid_reg <= 1'b 0 ;
	else 
		rec_valid_reg <= hs_cdr_data_valid ;
end
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_hseb_first_valid_sync (
.clock		(hs_clock) ,
.reset_n	(rstn_hs_clock) ,
.d_in	        (first_valid) ,
.d_out	        (first_valid_sync)
);
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
	begin
		first_valid_sync_d <= 1'b 0 ;
	end
	else
	begin
		first_valid_sync_d <= first_valid_sync ;
	end
end
assign posedge_first_valid = (first_valid_sync & ~first_valid_sync_d) ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		read_start_d <= 1'b 0 ;
	else if(rx_hs_soft_reset | posedge_eop_detected | hs_eb_empty_loc | ~hs_mode)
		read_start_d <= 1'b 0 ;
	else if(posedge_first_valid)
		read_start_d <= 1'b 1 ;
end
assign read_start = (posedge_first_valid | read_start_d) ;
assign long_eop_case_rd = eop_detected & rec_valid_reg ;
assign long_eop_case_wr_sync = long_eop_case_wr & rec_valid_reg ;
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_hseb_long_eop_wr_sync (
.clock		(rec_clock) ,
.reset_n	(rstn_eb_async) ,
.d_in	        (eop_detected_d) ,
.d_out	        (long_eop_case_wr)
);
data_sync_cdn_sd1000_t16ffc_01_vc176_2xa1xd3xe2y2r #(.RESET_VALUE(1'b0)) c_hseb_long_eop_rd_sync (
.clock		(hs_clock) ,
.reset_n	(rstn_hs_clock) ,
.d_in	        (long_eop_case_rd) ,
.d_out	        (long_eop_case_rd_sync)
);
assign RD_IND_DEFAULT = 26'b 0000_0000_0000_0000_0000_0000_10 ;
always @(posedge hs_clock or negedge rstn_hs_clock)
begin
	if(~rstn_hs_clock)
		rd_ind <=  RD_IND_DEFAULT;
	else if ((rd_ind == 26'h0) && (set1_dis == 1'b0)) rd_ind <=  RD_IND_DEFAULT;
	else if(rx_hs_soft_reset | posedge_eop_detected | long_eop_case_rd_sync | hs_eb_empty_loc | ~hs_mode)
		rd_ind <=  RD_IND_DEFAULT;
	else if(read_start & ~hs_eb_empty_loc & ~long_eop_case_rd_sync)
	  begin
	     if ((rd_ind[0]) && (set1_dis == 1'b0))
	       rd_ind <=  RD_IND_DEFAULT;
	     else
	       rd_ind <=  {rd_ind[24:0],rd_ind[25]};
	  end
end
assign WR_IND_DEFAULT = 26'b 0000_0000_0001_0000_0000_0000_00 ;
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		wr_ind <=  WR_IND_DEFAULT;
	else if ((wr_ind == 26'h0) && (set1_dis == 1'b0))
	        wr_ind <=  WR_IND_DEFAULT;
	else if(long_eop_case_wr_sync)
                wr_ind <=  WR_IND_DEFAULT;
	else if(rec_valid_reg & ~long_eop_case_wr_sync)
 	        begin
		   if ((wr_ind[13]) && (set1_dis == 1'b0))
		     wr_ind <=  WR_IND_DEFAULT;
		   else
		     wr_ind <=  {wr_ind[24:0],wr_ind[25]};
		end
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		wr_ind_d <=  WR_IND_DEFAULT;
	else 
		wr_ind_d <=  wr_ind ;
end
assign elasticity_buffer = 	{
					eb_25, eb_24,
					eb_23, eb_22, eb_21, eb_20,
					eb_19, eb_18, eb_17, eb_16,
					eb_15, eb_14, eb_13, eb_12,
					eb_11, eb_10, eb_09, eb_08,
					eb_07, eb_06, eb_05, eb_04,
					eb_03, eb_02, eb_01, eb_00 
				} ;
assign #0.01 hs_cdr_data_int = hs_cdr_data ;
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_00 <= 1'b 1 ;
	else if(wr_ind[0])
		eb_00 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_01 <= 1'b 1 ;
	else if(wr_ind[1])
		eb_01 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_02 <= 1'b 1 ;
	else if(wr_ind[2])
		eb_02 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_03 <= 1'b 1 ;
	else if(wr_ind[3])
		eb_03 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_04 <= 1'b 1 ;
	else if(wr_ind[4])
		eb_04 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_05 <= 1'b 1 ;
	else if(wr_ind[5])
		eb_05 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_06 <= 1'b 1 ;
	else if(wr_ind[6])
		eb_06 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_07 <= 1'b 1 ;
	else if(wr_ind[7])
		eb_07 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_08 <= 1'b 1 ;
	else if(wr_ind[8])
		eb_08 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_09 <= 1'b 1 ;
	else if(wr_ind[9])
		eb_09 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_10 <= 1'b 1 ;
	else if(wr_ind[10])
		eb_10 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_11 <= 1'b 1 ;
	else if(wr_ind[11])
		eb_11 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_12 <= 1'b 1 ;
	else if(wr_ind[12])
		eb_12 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_13 <= 1'b 1 ;
	else if(wr_ind[13])
		eb_13 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_14 <= 1'b 1 ;
	else if(wr_ind[14])
		eb_14 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_15 <= 1'b 1 ;
	else if(wr_ind[15])
		eb_15 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_16 <= 1'b 1 ;
	else if(wr_ind[16])
		eb_16 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_17 <= 1'b 1 ;
	else if(wr_ind[17])
		eb_17 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_18 <= 1'b 1 ;
	else if(wr_ind[18])
		eb_18 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_19 <= 1'b 1 ;
	else if(wr_ind[19])
		eb_19 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_20 <= 1'b 1 ;
	else if(wr_ind[20])
		eb_20 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_21 <= 1'b 1 ;
	else if(wr_ind[21])
		eb_21 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_22 <= 1'b 1 ;
	else if(wr_ind[22])
		eb_22 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_23 <= 1'b 1 ;
	else if(wr_ind[23])
		eb_23 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_24 <= 1'b 1 ;
	else if(wr_ind[24])
		eb_24 <= hs_cdr_data_int ;
end
always @(posedge rec_clock or negedge rstn_eb_async)
begin
	if(~rstn_eb_async)
		eb_25 <= 1'b 1 ;
	else if(wr_ind[25])
		eb_25 <= hs_cdr_data_int ;
end
endmodule
