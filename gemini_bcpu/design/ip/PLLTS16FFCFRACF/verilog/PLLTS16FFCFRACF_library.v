// Silicon Creations Verilog Library File
// Product: PLLTS16FFCFRACF
// Generated by: akisiel
// Date:  Thu Mar 21 05:46:14 EDT 2019
// Copyright 2017, Silicon Creations Inc.



`timescale 1ps/1fs


///////////////////////////////////////////////////////////////////////
// Port information for PLLTS16FFCFRACF:

// supply1 VDDHV;
// 1.8V analog supply

// supply1 VDDPOST;
// 0.8V supply for post dividers

// supply1 VDDREF;
// 0.8V supply for reference rate circuits

// supply0 VSS;
// 0V supply and substrate connection

// input DACEN;
// Enable fractional noise canceling DAC in FRAC mode (this has no function in integer mode)
// 0 -> Fractional noise canceling DAC is not active (test mode only)
// 1 -> Fractional noise canceling DAC is active (default mode)

// input DSKEWCALBYP;
// Deskew calibration bypass
// 1'b0 - use the skew calibration output (when DSKEWCALEN=1) to set the phase correction
// 1'b1 - use the DSKEWCALIN[11:0] value (when DSKEWCALEN=1) to set the phase correction

// input [2:0] DSKEWCALCNT;
// Programmable counter for deskew calibration loop
// Selects the number of PFD edges to wait after each deskew calibration step. Count is defined as $2^{DSKEWCALCNT+4}$ (e.g. if DSKEWCALCNT=3'd6, the loop will wait 1024 PFD periods before trying a new setting)
// Default setting is 3'd2

// input DSKEWCALEN;
// Deskew calibration enable to actively adjust for input skew
// 1'b0 - skew calibration is disabled.  Static phase offset is determined by analog matching only.
// 1'b1 - skew calibration is enabled.  Static phase offset is adjusted by sensing phase at the input.

// input [11:0] DSKEWCALIN;
// DSKEWCALBYP == 1'b0: Initial condition for deskew calibration logic.
// DSKEWCALBYP == 1'b1: Override value for deskew calibration. It is a signed integer with positive values delaying the reset of the faster path, and negative values delaying the reset of the slower path. 5'b0 is the minimum value, with each count increasing the reset time by one buffer delay.  
// If DSKEWCALEN=1, this can be used to force a skew correction value based on a previous readout of DSKEWCALOUT[11:0].  If DSKEWCALBYP=1 this value is forced directly into the calibration logic.  If DSKEWCALBYP=0 this is the initial condition for the calibration sequence.

// input DSKEWFASTCAL;
// Deskew fast calibration enable 
// Set this to 1 for initial calibration if an initial value is not already known
// Should be set to 0 for normal operation

// input DSMEN;
// Enable Delta-Sigma Modulator
// 0 -> DSM is powered down (integer mode)
// 1 -> DSM is active (fractional mode)

// input [11:0] FBDIV;
// PLL Feedback divide value (16 to 1000 in integer mode, 20 to 1000 in fractional mode)

// input FOUTCMLEN;
// 0 -> FOUTCMLP CML positive phase output clock is powered down (output at 0V)
//      FOUTCMLN CML negative phase output clock is powered down (output at 0V)
// 1 -> FOUTCMLP CML positive phase output clock is enabled (Frequency is FVCO/(POSTDIV4 value))
//      FOUTCMLN CML negative phase output clock is enabled (Frequency is FVCO/(POSTDIV4 value))

// input FOUTDIFFEN;
// For glitch-free operation when enable goes high, FOUTCMLEN must be 0 (or changed to 1 after FOUTDIFFEN is enabled)
// 0 -> FOUTDIFFP pseudo-differential positive phase output clock is powered down (output held at 1'b0)
//      FOUTDIFFN pseudo-differential negative phase output clock is powered down (output held at 1'b1)
// 1 -> FOUTDIFFP pseudo-differential positive phase output clock is enabled (Frequency is FVCO/(POSTDIV4 value))
//      FOUTDIFFN pseudo-differential negative phase output clock is enabled (Frequency is FVCO/(POSTDIV4 value))

// input [3:0] FOUTEN;
// Bit-wise Post Divide Enable
// FOUTEN[3] enables FOUT[3]
// FOUTEN[2] enables FOUT[2]
// FOUTEN[1] enables FOUT[1]
// FOUTEN[0] enables FOUT[0]
// 0 -> Respective FOUT clock is powered down (output held at 1'b0)
// 1 -> Respective FOUT clock is enabled

// input [4:0] FOUTVCOBYP;
// Bypasses undivided VCO clock to respective output
// FOUTVCOBYP[4]=1 bypasses the VCO clock to FOUTCMLP, (inverted to) FOUTCMLN, FOUTDIFFP, (inverted to) FOUTDIFFN
// FOUTVCOBYP[3]=1 bypasses the VCO clock to FOUT[3]
// FOUTVCOBYP[2]=1 bypasses the VCO clock to FOUT[2]
// FOUTVCOBYP[1]=1 bypasses the VCO clock to FOUT[1]
// FOUTVCOBYP[0]=1 bypasses the VCO clock to FOUT[0]

// input FOUTVCOEN;
// VCO rate output clock (FOUTVCO) enable
// 0 -> FOUTVCO is powered down (output is held at 1'b0)
// 1 -> FOUTVCO is enabled

// input [23:0] FRAC;
// Fractional portion of feedback divide value

// input FREF;
// Single-ended CMOS reference clock input (8MHz to 650MHz, in integer mode, 10MHz to 650MHz, in fractional mode)
// Only the rising edge is used by the PLL

// input FREFCMLEN;
// Enable FREF CML Input
// 0 -> Reference clock input is taken from single-ended CMOS level input FREF
// 1 -> Reference clock input is taken from differential CML level inputs FREFCMLP and FREFCMLN

// input FREFCMLN;
// CML negative phase reference clock input (ground-referenced) (8MHz to 650MHz, in integer mode, 10MHz to 650MHz, in fractional mode)

// input FREFCMLP;
// CML positive phase reference clock input (ground-referenced) (8MHz to 650MHz, in integer mode, 10MHz to 650MHz, in fractional mode)

// input PLLEN;
// Global enable signal for PLL
// 0 -> FREF bypassed to all Outputs (except FOUTVCO)
// 1 -> Entire PLL is enabled

// input [3:0] POSTDIV0;
// PLL post divide 0 setting (2 to 64)
// 4'b1111=divide-by-64
// 4'b1110=divide-by-48
// 4'b1101=divide-by-40
// 4'b1100=divide-by-32
// 4'b1011=divide-by-24
// 4'b1010=divide-by-20
// 4'b1001=divide-by-16
// 4'b1000=divide-by-12
// 4'b0111=divide-by-10
// 4'b0110=divide-by-8
// 4'b0101=divide-by-6
// 4'b0100=divide-by-5
// 4'b0011=divide-by-4
// 4'b0010=divide-by-3
// 4'b0001=divide-by-2
// 4'b0000=FREF bypassed to output

// input [3:0] POSTDIV1;
// PLL post divide 1 setting (2 to 64)
// 4'b1111=divide-by-64
// 4'b1110=divide-by-48
// 4'b1101=divide-by-40
// 4'b1100=divide-by-32
// 4'b1011=divide-by-24
// 4'b1010=divide-by-20
// 4'b1001=divide-by-16
// 4'b1000=divide-by-12
// 4'b0111=divide-by-10
// 4'b0110=divide-by-8
// 4'b0101=divide-by-6
// 4'b0100=divide-by-5
// 4'b0011=divide-by-4
// 4'b0010=divide-by-3
// 4'b0001=divide-by-2
// 4'b0000=FREF bypassed to output

// input [3:0] POSTDIV2;
// PLL post divide 2 setting (2 to 64)
// 4'b1111=divide-by-64
// 4'b1110=divide-by-48
// 4'b1101=divide-by-40
// 4'b1100=divide-by-32
// 4'b1011=divide-by-24
// 4'b1010=divide-by-20
// 4'b1001=divide-by-16
// 4'b1000=divide-by-12
// 4'b0111=divide-by-10
// 4'b0110=divide-by-8
// 4'b0101=divide-by-6
// 4'b0100=divide-by-5
// 4'b0011=divide-by-4
// 4'b0010=divide-by-3
// 4'b0001=divide-by-2
// 4'b0000=FREF bypassed to output

// input [3:0] POSTDIV3;
// PLL post divide 3 setting (2 to 64)
// 4'b1111=divide-by-64
// 4'b1110=divide-by-48
// 4'b1101=divide-by-40
// 4'b1100=divide-by-32
// 4'b1011=divide-by-24
// 4'b1010=divide-by-20
// 4'b1001=divide-by-16
// 4'b1000=divide-by-12
// 4'b0111=divide-by-10
// 4'b0110=divide-by-8
// 4'b0101=divide-by-6
// 4'b0100=divide-by-5
// 4'b0011=divide-by-4
// 4'b0010=divide-by-3
// 4'b0001=divide-by-2
// 4'b0000=FREF bypassed to output

// input [1:0] POSTDIV4;
// PLL post divide 4 setting (4 to 12)
// 2'b11=divide-by-12
// 2'b10=divide-by-8
// 2'b01=divide-by-6
// 2'b00=divide-by-4

// input [5:0] REFDIV;
// Reference divide value (1 to 63)

// output CLKSSCG;
// Synchronization clock for spread spectrum modulation.  Minimum pulse width is 1.0ns.
// Hold time for FBDIV and FRAC is negative when synchronized with CLKSSCG
// Setup time is 1/FPFD - 10/FVCO 

// output DSKEWCALLOCK;
// Deskew Calibration settled indicator for the PLL 
// 1'b0 --> Deskew calibration not yet settled
// 1'b1 --> Deskew calibration settled

// output [11:0] DSKEWCALOUT;
// This is the output of either the skew calibration block (if DSKEWCALBYP=0) or a buffered
// version of DSKEWCALIN[11:0] (if DSKEWCALBYP=1).  It can be used to read out the phase 
// calibration state to use as an override value so that skew calibration can be bypassed
// for faster locking.  The value changes on the rising edge of FREF, so it can be clocked out on the falling edge of FREF.

// output [3:0] FOUT;
// PLL post divided CMOS outputs (31MHz to 4000MHz)
// VCO frequency divided by selected post divide value

// output FOUTCMLN;
// Negative phase CML output clock (166MHz to 2000MHz)
// Enabled with FOUTCMLEN
// Output goes to 0V when disabled

// output FOUTCMLP;
// Positive phase CML output clock (166MHz to 2000MHz)
// Enabled with FOUTCMLEN
// Output goes to 0V when disabled

// output FOUTDIFFN;
// Require clock gating circuit for glitch-free output when enable goes high 
// Negative phase pseudo-differential output clock (166MHz to 2000MHz)
// Enabled with FOUTDIFFEN
// Output driven high when disabled

// output FOUTDIFFP;
// Require clock gating circuit for glitch-free output when enable goes high 
// Positive phase pseudo-differential output clock (166MHz to 2000MHz)
// Enabled with FOUTDIFFEN
// Output driven low when disabled

// output FOUTVCO;
// VCO rate output clock (2000MHz to 8000MHz)

// output LOCK;
// Lock signal
// Lock detector can measure frequency accuracy down to 0.8% of programmed target frequency
// 0.8% is the value of the lock circuit measurement uncertainty
// Actual frequency will be much closer to the final target.  Phase settling is guaranteed by design after 2000 PFD cycles.


///////////////////////////////////////////////////////////////////////

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA ( 
CMLOUTEN,
CMOS_IN_SEL,
CMOSIN,
CMOSOUTEN,
INN,
INP,
CMOSOUT,
OUTN,
OUTP,
VDDA,
VSS
);
input  CMLOUTEN;
input  CMOSOUTEN;
input  INP;
input  INN;
input  CMOSIN;
input  CMOS_IN_SEL;
output  CMOSOUT;
output  OUTP;
output  OUTN;
input  VDDA;
input  VSS;
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_CORE XCMLBUFFERTS16FFCGRA_CORE (
	.VDDA(VDDA), .VSS(VSS), .CMLOUTEN(CMLOUTEN), 
	.CMOSOUTEN(CMOSOUTEN), .INP(INP), .INN(INN), 
	.CMOSIN(CMOSIN), .CMOS_IN_SEL(CMOS_IN_SEL), .CMOSOUT(CMOSOUT), 
	.OUTP(OUTP), .OUTN(OUTN)
);
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_CORE
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_CORE (CMLOUTEN, CMOS_IN_SEL, CMOSIN, CMOSOUT, CMOSOUTEN,
	INN, INP, OUTN, OUTP, VDDA, VSS);
inout OUTN;
inout INN;
inout CMOS_IN_SEL;
inout OUTP;
inout CMLOUTEN;
inout VDDA;
inout VSS;
inout CMOSIN;
inout INP;
inout CMOSOUT;
inout CMOSOUTEN;
wire innmux;
wire OUTN;
wire CMOS_IN_SEL_buf;
wire CMOS_IN_SEL;
wire OUTP;
wire NET2;
wire inpmux;
wire VDDA;
wire CMLOUTEN_buf;
wire ckoutb;
wire CMOSOUTEN;
wire CMOSOUT;
wire cmos_in_selb;
wire CMOSOUTEN_buf;
wire INN;
wire NET1;
wire CMLOUTEN;
wire ckout;
wire VSS;
wire CMOSIN;
wire INP;
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_ckBgenx128_svt X3 ( .IN(NET2), .OUT(ckout), .OUTB(ckoutb), .VDD(VDDA),
	.VSS(VSS));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx1cstm_cml X6 ( .IN(CMOS_IN_SEL), .OUT(cmos_in_selb), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDA));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx1cstm_cml X7 ( .IN(cmos_in_selb), .OUT(CMOS_IN_SEL_buf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDA));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_bufx1cstm_cml Xbuf1_1_ ( .IN(CMLOUTEN), .OUT(CMLOUTEN_buf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDA));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_bufx1cstm_cml Xbuf1_0_ ( .IN(CMOSOUTEN), .OUT(CMOSOUTEN_buf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDA));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cmlbuffer_output Xcml ( .en(CMLOUTEN_buf), .inn(innmux), .inp(inpmux), .outn(OUTN),
	.outp(OUTP), .VDDA(VDDA), .VSSA(VSS));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cml2cmos_fref Xcml2cmos ( .cmosout(CMOSOUT), .en(CMOSOUTEN_buf), .inn(innmux), .inp(inpmux),
	.VDDLV(VDDA), .VSS(VSS));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_passgx8cstm Xcmlen_2_ ( .EN(cmos_in_selb), .ENB(CMOS_IN_SEL_buf), .IN(INP), .OUT(inpmux),
	.SUB(VSS), .VPOS(VDDA));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_passgx8cstm Xcmlen_1_ ( .EN(cmos_in_selb), .ENB(CMOS_IN_SEL_buf), .IN(INN), .OUT(innmux),
	.SUB(VSS), .VPOS(VDDA));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_passgx8cstm Xcmosen_2_ ( .EN(CMOS_IN_SEL_buf), .ENB(cmos_in_selb), .IN(ckout), .OUT(inpmux),
	.SUB(VSS), .VPOS(VDDA));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_passgx8cstm Xcmosen_1_ ( .EN(CMOS_IN_SEL_buf), .ENB(cmos_in_selb), .IN(ckoutb), .OUT(innmux),
	.SUB(VSS), .VPOS(VDDA));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_nand2x8cml X1 ( .IN0(CMOS_IN_SEL_buf), .IN1(CMOSIN), .OUT(NET1), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDA));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_nand2x8cml X2_3_ ( .IN0(CMOS_IN_SEL_buf), .IN1(NET1), .OUT(NET2), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDA));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_nand2x8cml X2_2_ ( .IN0(CMOS_IN_SEL_buf), .IN1(NET1), .OUT(NET2), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDA));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_nand2x8cml X2_1_ ( .IN0(CMOS_IN_SEL_buf), .IN1(NET1), .OUT(NET2), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDA));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_bufx16cstm_cml_ulvt
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_bufx16cstm_cml_ulvt (IN, OUT, SUB, VNEG, VPOS);
inout VPOS;
inout SUB;
inout VNEG;
inout OUT;
inout IN;
wire VPOS;
wire SUB;
wire VNEG;
wire OUT;
wire IN;
wire outB;
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx4cstm_cml_ulvt X1 ( .IN(IN), .OUT(outB), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml_ulvt Xinv2 ( .IN(outB), .OUT(OUT), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_bufx1cstm_cml
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_bufx1cstm_cml (IN, OUT, SUB, VNEG, VPOS);
inout VPOS;
inout SUB;
inout VNEG;
inout OUT;
inout IN;
wire VPOS;
wire SUB;
wire VNEG;
wire OUT;
wire IN;
wire NET1;
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx1cstm_cml X1 ( .IN(IN), .OUT(NET1), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx1cstm_cml X2 ( .IN(NET1), .OUT(OUT), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_ckBgenx128_svt
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_ckBgenx128_svt (IN, OUT, OUTB, VDD, VSS);
inout VDD;
inout VSS;
inout OUT;
inout OUTB;
inout IN;
wire VDD;
wire NET2;
wire VSS;
wire OUT;
wire OUTB;
wire IN;
wire clkb1;
wire NET1;
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X1_8_ ( .IN(NET2), .OUT(OUT), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X1_7_ ( .IN(NET2), .OUT(OUT), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X1_6_ ( .IN(NET2), .OUT(OUT), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X1_5_ ( .IN(NET2), .OUT(OUT), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X1_4_ ( .IN(NET2), .OUT(OUT), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X1_3_ ( .IN(NET2), .OUT(OUT), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X1_2_ ( .IN(NET2), .OUT(OUT), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X1_1_ ( .IN(NET2), .OUT(OUT), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X2_3_ ( .IN(IN), .OUT(NET2), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X2_2_ ( .IN(IN), .OUT(NET2), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X2_1_ ( .IN(IN), .OUT(NET2), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X3_2_ ( .IN(IN), .OUT(clkb1), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X3_1_ ( .IN(IN), .OUT(clkb1), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X5_4_ ( .IN(clkb1), .OUT(NET1), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X5_3_ ( .IN(clkb1), .OUT(NET1), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X5_2_ ( .IN(clkb1), .OUT(NET1), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X5_1_ ( .IN(clkb1), .OUT(NET1), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X9_8_ ( .IN(NET1), .OUT(OUTB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X9_7_ ( .IN(NET1), .OUT(OUTB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X9_6_ ( .IN(NET1), .OUT(OUTB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X9_5_ ( .IN(NET1), .OUT(OUTB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X9_4_ ( .IN(NET1), .OUT(OUTB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X9_3_ ( .IN(NET1), .OUT(OUTB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X9_2_ ( .IN(NET1), .OUT(OUTB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml X9_1_ ( .IN(NET1), .OUT(OUTB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cml2cmos_0p125mA_pdiff_cmlbuffer
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cml2cmos_0p125mA_pdiff_cmlbuffer (enB, inm, inp, outm, outp, vcsps, VDD, VSS);
input VDD;
input VSS;
inout vcsps;
input inm;
input inp;
input enB;
output outp;
output outm;
wire out1B;
wire out1;
wire diff_int;
assign diff_int = (out1 & ~out1B);
assign #(5) outp = ~enB ? diff_int : 1'b0;
assign #(5) outm = ~enB ? ~diff_int : 1'b0;
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cml2cmos_sub_pdiff_cmlbuffer X1 ( .enB(enB), .inm(inp), .inp(inm), .out(out1B),
	.vcsps(vcsps), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cml2cmos_sub_pdiff_cmlbuffer X2 ( .enB(enB), .inm(inm), .inp(inp), .out(out1),
	.vcsps(vcsps), .VDD(VDD), .VSS(VSS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cml2cmos_fref
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cml2cmos_fref (cmosout, en, inn, inp, VDDLV,
	VSS);
inout en;
inout inp;
inout inn;
inout cmosout;
inout VSS;
inout VDDLV;
wire inp;
wire cmloutp;
wire vcmref;
wire cmosout;
wire vpcs;
wire enB;
wire en;
wire inn;
wire cmloutn;
wire VSS;
wire VDDLV;
wire vcm;
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cmlbuffer_out_ptype_0p125 Xcmlbuf ( .enB(enB), .inn(inn), .inp(inp), .outn(cmloutn),
	.outp(cmloutp), .vcm(vcm), .vcs(vpcs), .VDDA(VDDLV), .VSSA(VSS));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx1cstm_cml X2 ( .IN(en), .OUT(enB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDLV));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cmlbuffer_ota_ptype Xbias ( .en(en), .inn(vcmref), .inp(vcm), .out(vpcs),
	.VDDA(VDDLV), .VSSA(VSS));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cml2cmosbuf_pdiff_cmlbuffer Xcml2cmos ( .en(en), .inm(cmloutn), .inp(cmloutp), .outm(cmosout),
	.vcsps(vpcs), .VDDLV(VDDLV), .VSS(VSS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cml2cmos_sub_pdiff_cmlbuffer
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cml2cmos_sub_pdiff_cmlbuffer (enB, inm, inp, out, vcsps,	VDD, VSS);
input VDD;
input VSS;
input vcsps;
input enB;
input inp;
input inm;
output out;
assign #(5) out = (~enB & ~vcsps) ? (inp & ~inm) : 1'b0;
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cml2cmosbuf_pdiff_cmlbuffer
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cml2cmosbuf_pdiff_cmlbuffer (en, inm, inp, outm, vcsps,
	VDDLV, VSS);
inout inp;
inout outm;
inout vcsps;
inout inm;
inout en;
inout VSS;
inout VDDLV;
wire out1;
wire outm;
wire inp;
wire outcmosp;
wire outsrb;
wire vcsps;
wire out_sm_nc;
wire inm;
wire outcmosm;
wire enB;
wire en;
wire VSS;
wire out_sp;
wire VDDLV;
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_bufx16cstm_cml_ulvt X3 ( .IN(out1), .OUT(outm), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDLV));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx2cstm_cml_ulvt X1 ( .IN(outsrb), .OUT(out1), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDLV));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx1cstm_cml X2 ( .IN(en), .OUT(enB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDLV));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_nand2x2cstm_lvdsrx X6 ( .IN0(en), .IN1(out_sp), .OUT(outsrb), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cml2cmos_0p125mA_pdiff_cmlbuffer Xcml2cmosdiff ( .enB(enB), .inm(inm), .inp(inp), .outm(outcmosm),
	.outp(outcmosp), .vcsps(vcsps), .VDD(VDDLV), .VSS(VSS));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_jkffx2 Xjkff ( .J(outcmosp), .K(outcmosm), .Q(out_sp), .QB(out_sm_nc),
	.VDD(VDDLV), .VSS(VSS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cmlbuffer_ota_ptype
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cmlbuffer_ota_ptype (en, inn, inp, out, VDDA, VSSA);
input VSSA;
input VDDA;
input en;
inout inn;
input inp;
output reg out;
assign inn = 0;
always begin
	wait(en);
	out = 1'b0;
	#(5 * 100);
	fork: ota_fork
		forever @(inp) 
			if(inp) out = 1'b0;
			else out = 1'bx;
		begin
			wait(!en) out = 1'bx;
			disable ota_fork;
		end
	join
end
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cmlbuffer_out_ptype
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cmlbuffer_out_ptype (enB, inn, inp, outn, outp, vcm, vcs, VDDA, VSSA);
input VDDA;
input VSSA;
input vcs;
input enB;
input inp;
input inn;
output outn;
output outp;
output vcm;
wire diff_int;
assign diff_int = (inp & ~inn);
assign #(5) outn = (~enB & ~vcs) ? ~diff_int : 1'b0;
assign #(5) outp = (~enB & ~vcs) ? diff_int : 1'b0;
assign #(5) vcm = (~enB & ~vcs) ? 1'b1 : 1'b0;
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cmlbuffer_out_ptype_0p125
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cmlbuffer_out_ptype_0p125 (enB, inn, inp, outn, outp,
	vcm, vcs, VDDA, VSSA);
input VDDA;
input VSSA;
input vcs;
input enB;
input inp;
input inn;
output outn;
output outp;
output vcm;
wire diff_int;
assign diff_int = (inp & ~inn);
assign #(5) outn = (~enB & ~vcs) ? ~diff_int : 1'b0;
assign #(5) outp = (~enB & ~vcs) ? diff_int : 1'b0;
assign #(5) vcm = (~enB & ~vcs) ? 1'b1 : 1'b0;
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cmlbuffer_output
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cmlbuffer_output (en, inn, inp, outn, outp,
	VDDA, VSSA);
inout inp;
inout outn;
inout VSSA;
inout en;
inout inn;
inout VDDA;
inout outp;
wire vcmref;
wire inp;
wire vpcs;
wire outn;
wire VSSA;
wire enB;
wire en;
wire inn;
wire VDDA;
wire vcm;
wire outp;
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx1cstm_cml X2 ( .IN(en), .OUT(enB), .SUB(VSSA), .VNEG(VSSA),
	.VPOS(VDDA));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cmlbuffer_ota_ptype Xbias ( .en(en), .inn(vcmref), .inp(vcm), .out(vpcs),
	.VDDA(VDDA), .VSSA(VSSA));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_cmlbuffer_out_ptype Xcmlbuf ( .enB(enB), .inn(inn), .inp(inp), .outn(outn),
	.outp(outp), .vcm(vcm), .vcs(vpcs), .VDDA(VDDA), .VSSA(VSSA));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml (VPOS, SUB, VNEG, OUT, IN);
	input 	VPOS;
	input 	SUB;
	input 	VNEG;
	output 	OUT;
	input 	IN;
    PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx1cstm Xinvx1cstm (
	.IN(IN), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml_ulvt
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx16cstm_cml_ulvt (VPOS, SUB, VNEG, OUT, IN);
	input 	VPOS;
	input 	SUB;
	input 	VNEG;
	output 	OUT;
	input 	IN;
    PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx1cstm Xinvx1cstm (
	.IN(IN), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx1cstm
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx1cstm (IN, OUT, SUB, VNEG, VPOS);
	input VPOS;
	input VNEG;
	input SUB;
	output OUT;
	input IN;
	not (OUT,IN);
	specify
		specparam
			tplh0 = 1*5,
			tphl0 = 1*5;
		(IN => OUT) = (tplh0,tphl0);
	endspecify
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx1cstm_cml
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx1cstm_cml (VPOS, SUB, VNEG, OUT, IN);
	input 	VPOS;
	input 	SUB;
	input 	VNEG;
	output 	OUT;
	input 	IN;
    PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx1cstm Xinvx1cstm (
	.IN(IN), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx2cstm_cml_ulvt
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx2cstm_cml_ulvt (VPOS, SUB, VNEG, OUT, IN);
	input 	VPOS;
	input 	SUB;
	input 	VNEG;
	output 	OUT;
	input 	IN;
    PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx1cstm Xinvx1cstm (
	.IN(IN), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx4cstm_cml_ulvt
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx4cstm_cml_ulvt (VPOS, SUB, VNEG, OUT, IN);
	input 	VPOS;
	input 	SUB;
	input 	VNEG;
	output 	OUT;
	input 	IN;
    PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_invx1cstm Xinvx1cstm (
	.IN(IN), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_jkffx1cstm
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_jkffx1cstm (J,K,Q,QB, VDD, VSS);
	input VDD;
	input VSS;
	input J;
	input K;
	output Q;
	output QB;
	specify
		specparam
			tplh0 = 4*5,
			tphl0 = 4*5;
		(J => Q) = (tplh0,tphl0);
		(J => QB) = (tplh0,tphl0);
	endspecify
	reg q1;
	reg q2; 
	initial begin
		q1 = 1'b0;
		q2 = 1'b0;
	end
	always @(posedge J or posedge K) begin
		if ((J==1'b1) && (K==1'b0)) begin
			q1 = 1'b1; 
		end 
		else if ((J==1'b0) && (K==1'b1)) begin
			q1 = 1'b0;
		end
		else begin
			q1 = ~q1; 
		end
	end
	always @(*) 
		case (q1)
			1'b1 : q2 = 1'b1;
			default : q2 = 1'b0; 
		endcase
	buf (Q,q2);
	not (QB,q2);
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_jkffx2
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_jkffx2 (VDD, J, Q, VSS, QB, K);
	input 	VDD;
	input 	J;
	output 	Q;
	input 	VSS;
	output 	QB;
	input 	K;
    PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_jkffx1cstm Xjkffx1cstm (
	.J(J), .K(K), .VDD(VDD), .VSS(VSS), 
	.Q(Q), .QB(QB)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_nand2x1cstm
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_nand2x1cstm (IN0, IN1, OUT, SUB, VNEG, VPOS);
	input VPOS;
	input VNEG;
	input SUB;
	output OUT;
	input IN1;
	input IN0;
	nand (OUT,IN1,IN0);
	specify
		specparam
			tplh0 = 2*5,
			tphl0 = 2*5,
			tplh1 = 2*5,
			tphl1 = 2*5;
		(IN0 => OUT) = (tplh0,tphl0);
		(IN1 => OUT) = (tplh1,tphl1);
	endspecify
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_nand2x2cstm_lvdsrx
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_nand2x2cstm_lvdsrx (VPOS, SUB, IN0, VNEG, OUT, IN1);
	input 	VPOS;
	input 	SUB;
	input 	IN0;
	input 	VNEG;
	output 	OUT;
	input 	IN1;
    PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_nand2x1cstm Xnand2x1cstm (
	.IN0(IN0), .IN1(IN1), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_nand2x8cml
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_nand2x8cml (VPOS, SUB, IN0, VNEG, OUT, IN1);
	input 	VPOS;
	input 	SUB;
	input 	IN0;
	input 	VNEG;
	output 	OUT;
	input 	IN1;
    PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_nand2x1cstm Xnand2x1cstm (
	.IN0(IN0), .IN1(IN1), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_passgx1cstm
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_passgx1cstm ( IN, EN, ENB, VPOS, SUB, OUT); 
input IN;
input EN;
input ENB;
input VPOS;
input SUB;
output OUT;
	wire en_diff = EN & ~ENB; 
	tranif1 #(1*5) tgate (OUT,IN,en_diff); 
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_passgx8cstm
// *
module PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_passgx8cstm (VPOS, SUB, ENB, OUT, IN, EN);
	input 	VPOS;
	input 	SUB;
	input 	ENB;
	output 	OUT;
	input 	IN;
	input 	EN;
    PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA_passgx1cstm Xpassgx1cstm (
	.EN(EN), .ENB(ENB), .IN(IN), .SUB(SUB), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_DIV_SYNC_TOP
// *
module PLLTS16FFCFRACF_DIV_SYNC_TOP (FOUTEN_sync, foutpost, FOUTVCOBYP, FOUTVCOBYP_sync, PLLEN,
	POSTDIV0, POSTDIV1, POSTDIV2, POSTDIV3, POSTDIV4, POSTDIV0_sync, POSTDIV1_sync,
	POSTDIV2_sync, POSTDIV3_sync, POSTDIV4_sync, VDD, VSS);
inout [4:0] FOUTVCOBYP_sync;
inout [1:0] POSTDIV4;
inout [4:0] foutpost;
inout VDD;
inout [3:0] POSTDIV0;
inout [3:0] POSTDIV1_sync;
inout [3:0] POSTDIV1;
inout [4:0] FOUTVCOBYP;
inout [3:0] POSTDIV2_sync;
inout PLLEN;
inout [3:0] POSTDIV0_sync;
inout [3:0] POSTDIV2;
inout [3:0] POSTDIV3;
inout [1:0] POSTDIV4_sync;
inout [3:0] POSTDIV3_sync;
inout [4:0] FOUTEN_sync;
inout VSS;
wire [4:0] FOUTVCOBYP_sync;
wire [1:0] POSTDIV4;
wire [4:0] foutpost;
wire VDD;
wire [3:0] POSTDIV0;
wire [3:0] POSTDIV1_sync;
wire [3:0] POSTDIV1;
wire [4:0] FOUTVCOBYP;
wire [3:0] POSTDIV2_sync;
wire PLLEN;
wire [3:0] POSTDIV0_sync;
wire [3:0] POSTDIV2;
wire [3:0] POSTDIV3;
wire [1:0] POSTDIV4_sync;
wire [3:0] POSTDIV3_sync;
wire [4:0] FOUTEN_sync;
wire VSS;
PLLTS16FFCFRACF_postdiv_sync_3b Xsync4 ( .CLK(foutpost[4]), .DIV({POSTDIV4[1], POSTDIV4[0], FOUTVCOBYP[4]}),
	.DIV_SYNC({POSTDIV4_sync[1], POSTDIV4_sync[0], FOUTVCOBYP_sync[4]}), .fouten(FOUTEN_sync[4]), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_postdiv_sync_5b Xsync0 ( .CLK(foutpost[0]), .DIV({POSTDIV0[3], POSTDIV0[2], POSTDIV0[1],
	POSTDIV0[0], FOUTVCOBYP[0]}), .DIV_SYNC({POSTDIV0_sync[3], POSTDIV0_sync[2], POSTDIV0_sync[1], POSTDIV0_sync[0], FOUTVCOBYP_sync[0]}),
	.fouten(FOUTEN_sync[0]), .PLLEN(PLLEN), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_postdiv_sync_5b Xsync1 ( .CLK(foutpost[1]), .DIV({POSTDIV1[3], POSTDIV1[2], POSTDIV1[1],
	POSTDIV1[0], FOUTVCOBYP[1]}), .DIV_SYNC({POSTDIV1_sync[3], POSTDIV1_sync[2], POSTDIV1_sync[1], POSTDIV1_sync[0], FOUTVCOBYP_sync[1]}),
	.fouten(FOUTEN_sync[1]), .PLLEN(PLLEN), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_postdiv_sync_5b Xsync2 ( .CLK(foutpost[2]), .DIV({POSTDIV2[3], POSTDIV2[2], POSTDIV2[1],
	POSTDIV2[0], FOUTVCOBYP[2]}), .DIV_SYNC({POSTDIV2_sync[3], POSTDIV2_sync[2], POSTDIV2_sync[1], POSTDIV2_sync[0], FOUTVCOBYP_sync[2]}),
	.fouten(FOUTEN_sync[2]), .PLLEN(PLLEN), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_postdiv_sync_5b Xsync3 ( .CLK(foutpost[3]), .DIV({POSTDIV3[3], POSTDIV3[2], POSTDIV3[1],
	POSTDIV3[0], FOUTVCOBYP[3]}), .DIV_SYNC({POSTDIV3_sync[3], POSTDIV3_sync[2], POSTDIV3_sync[1], POSTDIV3_sync[0], FOUTVCOBYP_sync[3]}),
	.fouten(FOUTEN_sync[3]), .PLLEN(PLLEN), .VDD(VDD), .VSS(VSS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_ASSERTIONS
// *
module PLLTS16FFCFRACF_ASSERTIONS (
	input wire DACEN,
	input wire DSKEWCALBYP,
	input wire [2:0] DSKEWCALCNT,
	input wire DSKEWCALEN,
	input wire [11:0] DSKEWCALIN,
	input wire DSKEWFASTCAL,
	input wire DSMEN,
	input wire [11:0] FBDIV,
	input wire FOUTCMLEN,
	input wire FOUTDIFFEN,
	input wire [3:0] FOUTEN,
	input wire [4:0] FOUTVCOBYP,
	input wire FOUTVCOEN,
	input wire [23:0] FRAC,
	input wire FREF,
	input wire FREFCMLEN,
	input wire FREFCMLN,
	input wire FREFCMLP,
	input wire PLLEN,
	input wire [3:0] POSTDIV0,
	input wire [3:0] POSTDIV1,
	input wire [3:0] POSTDIV2,
	input wire [3:0] POSTDIV3,
	input wire [1:0] POSTDIV4,
	input wire [5:0] REFDIV,
	input wire CLKSSCG,
	input wire DSKEWCALLOCK,
	input wire [11:0] DSKEWCALOUT,
	input wire [3:0] FOUT,
	input wire FOUTCMLN,
	input wire FOUTCMLP,
	input wire FOUTDIFFN,
	input wire FOUTDIFFP,
	input wire FOUTVCO,
	input wire LOCK
);
reg suppress_all_checks = 0;
reg stop_on_error = 0;
reg input_checks_void;
wire clk_ref_valid;
reg clk_ref_internal;
always begin
    case(get_active_fref(input_checks_void))
		default: @(FREF) clk_ref_internal = FREF;
            "FREF":  @(FREF) clk_ref_internal = FREF;
            "FREFCML":  @(FREFCMLN) clk_ref_internal = (~FREFCMLN) & FREFCMLP;
    endcase
end
PLLTS16FFCFRACF_frefmon #(
    .timescale_val(1e-12),
    .avg_samples_nr(7),
    .settling_threshold_pct(1)
) Xfrefmon (
    .en(PLLEN),
    .report_en(1'b0),
    .clkref(clk_ref_internal),
    .valid(clk_ref_valid)
);
wire [94:0] inputs_no_ckfb_fref = { clk_ref_valid,
								DACEN,
								DSKEWCALBYP,
								DSKEWCALCNT,
								DSKEWCALEN,
								DSKEWCALIN,
								DSKEWFASTCAL,
								DSMEN,
								FBDIV,
								FOUTCMLEN,
								FOUTDIFFEN,
								FOUTEN,
								FOUTVCOBYP,
								FOUTVCOEN,
								FRAC,
								FREFCMLEN,
								PLLEN,
								POSTDIV0,
								POSTDIV1,
								POSTDIV2,
								POSTDIV3,
								POSTDIV4,
								REFDIV };
initial begin
    wait($test$plusargs("PLLTS16FFCFRACF_SUPPRESS_ALL_CHECKS"));
    $display("%m: PLLTS16FFCFRACF_SUPPRESS_ALL_CHECKS detected. All errors will be ignored.");
    suppress_all_checks = 1;
end
initial begin
    wait($test$plusargs("PLLTS16FFCFRACF_STOP_ON_ERROR"));
    $display("%m: PLLTS16FFCFRACF_STOP_ON_ERROR detected. Simulation will stop if error is encountered.");
    stop_on_error = 1;
end
always @(inputs_no_ckfb_fref) begin
    if(!get_checks_suppressed(input_checks_void)) begin
        if(get_clk_ref_valid(input_checks_void))
            set_fref(get_frefmon_freq(input_checks_void));
        launch_all_checks;
    end
end
function reg get_checks_suppressed;
    input reg dummy;
    begin
        get_checks_suppressed = suppress_all_checks;
    end
endfunction
function reg get_stop_on_error;
    input reg dummy;
    begin
        get_stop_on_error = stop_on_error;
    end
endfunction
function reg get_clk_ref_valid;
    input reg dummy;
    begin
        get_clk_ref_valid = clk_ref_valid;
    end
endfunction
function real get_frefmon_freq;
    input reg dummy;
    begin
        get_frefmon_freq = Xfrefmon.freq_mean;
    end
endfunction
task launch_all_checks;
begin
	input_check_fastlock;
	input_check_fbdiv;
	input_check_fpfd;
	input_check_fref;
	input_check_fvco;
	input_check_x;
end
endtask
event fvcoprog_reload;
real fvcoprog;
reg fastlock_void;
reg ref_reload;
task input_check_fastlock;
    real fvco_expected_hz;
    real ferr_abs;
begin
    if ( PLLEN) begin
        fvco_expected_hz = 1e6*get_fvco_expected(fastlock_void);
        ferr_abs = abs(fvcoprog - fvco_expected_hz);
        if (fvco_expected_hz <= 0) begin 
            ref_reload = 1;
            ->fvcoprog_reload;
        end
        else if (!clk_ref_valid) begin
            ref_reload = 1;
            fvcoprog = 1e6 * get_fvco_expected(fastlock_void); 
            ->fvcoprog_reload;
        end 
        else if ( fvcoprog == 0 && ref_reload ) begin
            ref_reload = 0;
            fvcoprog = 1e6 * get_fvco_expected(fastlock_void); 
        end
        else if ( fvcoprog == 0 && !ref_reload ) begin
            fvcoprog = 1e6 * get_fvco_expected(fastlock_void); 
            ->fvcoprog_reload;
        end
        else if ( ferr_abs/fvcoprog < 0.001 ) begin 
            ref_reload = 0;
        end 
        else if ( (ferr_abs/fvcoprog > 0.001) && ref_reload ) begin
            ref_reload = 0;
            fvcoprog = 1e6 * get_fvco_expected(fastlock_void); 
        end
        else if ( (ferr_abs/fvcoprog > 0.001) && !ref_reload ) begin
            fvcoprog = 1e6 * get_fvco_expected(fastlock_void); 
            ->fvcoprog_reload;
        end
    end
end     
endtask 
initial begin : fastlock_block
    integer lock_time;
    integer lock_count;
    wait($value$plusargs("USER_CONTROLLED_PLLTS16FFCFRACF_LOCK_TIME=%d", lock_time));
    
    if (lock_time < 10 && !$test$plusargs("USER_CONTROLLED_PLLTS16FFCFRACF_LOCK_TIME_SUPPRESS_ERRORS")) begin
        $display("%m [FATAL ERROR]: USER_CONTROLLED_PLLTS16FFCFRACF_LOCK_TIME Lock cycles should be >= 10 ");
        $stop;
    end
    else begin
        $display("%m User defined lock is enabled.  LOCK signal will go high %1d FREF cycles after unlock event",lock_time);
    end
        fork
            forever begin
                begin : lock_assertion_block
                    force LOCK = 1'b0;
                    if(PLLEN == !1'b1) begin
                        XPLLTS16FFCFRACF_CORE.Xpllcore.Xvco.Xvcoana.Xvco.fvcoprog = 0.0;
                    end
                    wait(PLLEN == 1'b1);
                    repeat(10) @(posedge FREF);
                    if(~clk_ref_valid && !$test$plusargs("USER_CONTROLLED_PLLTS16FFCFRACF_LOCK_TIME_SUPPRESS_ERRORS")) begin
                        $display("%m [FATAL ERROR]: Reference frequency measurement not finished. LOCK Time must be at least 10 FREF cycles.");
                        $stop;
                    end
                    XPLLTS16FFCFRACF_CORE.Xpllcore.Xvco.Xvcoana.Xvco.fvcoprog = fvcoprog;
                    if(lock_time > 10) begin
                        repeat(lock_time - 10) @(posedge FREF);
                    end
                    force LOCK = 1'b1;
                    wait(1 == 0);
                end
            end
            forever @(negedge PLLEN or fvcoprog_reload) begin
                disable lock_assertion_block;
            end
        join
end
task input_check_fbdiv; 
    reg input_check_fbdiv_void;
    begin
        if(!$test$plusargs("PLLTS16FFCFRACF_SUPPRESS_CHECK_FBDIV") && PLLEN == 1'b1) begin
           chk_fbdiv;
           if(get_error(input_check_fbdiv_void) && get_stop_on_error(input_check_fbdiv_void)) begin
                $stop;
           end
           reset_error;
        end
    end
endtask
task input_check_fpfd;
    reg input_check_fpfd_void;
    begin
        if(!$test$plusargs("PLLTS16FFCFRACF_SUPPRESS_CHECK_FPFD") && PLLEN == 1'b1 && get_clk_ref_valid(input_check_fpfd_void)) begin
           chk_fq_pfd;
           if(get_error(input_check_fpfd_void) && get_stop_on_error(input_check_fpfd_void)) begin
                $stop;
           end
           reset_error;
        end
    end
endtask
task input_check_fref;
    reg input_check_fref_void;
    begin
        if(!$test$plusargs("PLLTS16FFCFRACF_SUPPRESS_CHECK_FREF") && PLLEN == 1'b1 && get_clk_ref_valid(input_check_fref_void)) begin
           chk_fref;
           if(get_error(input_check_fref_void) && get_stop_on_error(input_check_fref_void)) begin
                $stop;
           end
           reset_error;
        end
    end
endtask
task input_check_fvco;
    reg input_check_fvco_void;
    begin
        if(!$test$plusargs("PLLTS16FFCFRACF_SUPPRESS_CHECK_FVCO") && PLLEN == 1'b1 && get_clk_ref_valid(input_check_fvco_void)) begin
           chk_fvco_expected;
           if(get_error(input_check_fvco_void) && get_stop_on_error(input_check_fvco_void)) begin
                $stop;
           end
           reset_error;
        end
    end
endtask
task input_check_x;
    reg PLLEN_previous;
    reg input_check_x_void;
    begin
        if(!$test$plusargs("PLLTS16FFCFRACF_SUPPRESS_CHECK_X")) begin
            if(PLLEN == 1'b1) begin
                if(^DACEN === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin DACEN is %0b when PLLEN is %0b, at time: %0.3f us", DACEN, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^DSKEWCALBYP === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin DSKEWCALBYP is %0b when PLLEN is %0b, at time: %0.3f us", DSKEWCALBYP, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^DSKEWCALCNT === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin DSKEWCALCNT is %0b when PLLEN is %0b, at time: %0.3f us", DSKEWCALCNT, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^DSKEWCALEN === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin DSKEWCALEN is %0b when PLLEN is %0b, at time: %0.3f us", DSKEWCALEN, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^DSKEWCALIN === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin DSKEWCALIN is %0b when PLLEN is %0b, at time: %0.3f us", DSKEWCALIN, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^DSKEWFASTCAL === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin DSKEWFASTCAL is %0b when PLLEN is %0b, at time: %0.3f us", DSKEWFASTCAL, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^DSMEN === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin DSMEN is %0b when PLLEN is %0b, at time: %0.3f us", DSMEN, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^FBDIV === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin FBDIV is %0b when PLLEN is %0b, at time: %0.3f us", FBDIV, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^FOUTCMLEN === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin FOUTCMLEN is %0b when PLLEN is %0b, at time: %0.3f us", FOUTCMLEN, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^FOUTDIFFEN === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin FOUTDIFFEN is %0b when PLLEN is %0b, at time: %0.3f us", FOUTDIFFEN, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^FOUTEN === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin FOUTEN is %0b when PLLEN is %0b, at time: %0.3f us", FOUTEN, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^FOUTVCOBYP === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin FOUTVCOBYP is %0b when PLLEN is %0b, at time: %0.3f us", FOUTVCOBYP, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^FOUTVCOEN === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin FOUTVCOEN is %0b when PLLEN is %0b, at time: %0.3f us", FOUTVCOEN, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^FRAC === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin FRAC is %0b when PLLEN is %0b, at time: %0.3f us", FRAC, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^FREF === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin FREF is %0b when PLLEN is %0b, at time: %0.3f us", FREF, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^FREFCMLEN === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin FREFCMLEN is %0b when PLLEN is %0b, at time: %0.3f us", FREFCMLEN, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^FREFCMLN === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin FREFCMLN is %0b when PLLEN is %0b, at time: %0.3f us", FREFCMLN, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^FREFCMLP === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin FREFCMLP is %0b when PLLEN is %0b, at time: %0.3f us", FREFCMLP, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^PLLEN === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin PLLEN is %0b when PLLEN is %0b, at time: %0.3f us", PLLEN, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^POSTDIV0 === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin POSTDIV0 is %0b when PLLEN is %0b, at time: %0.3f us", POSTDIV0, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^POSTDIV1 === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin POSTDIV1 is %0b when PLLEN is %0b, at time: %0.3f us", POSTDIV1, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^POSTDIV2 === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin POSTDIV2 is %0b when PLLEN is %0b, at time: %0.3f us", POSTDIV2, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^POSTDIV3 === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin POSTDIV3 is %0b when PLLEN is %0b, at time: %0.3f us", POSTDIV3, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^POSTDIV4 === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin POSTDIV4 is %0b when PLLEN is %0b, at time: %0.3f us", POSTDIV4, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
                if(^REFDIV === 1'bx) begin
                   
                   $display("%m: [ERROR]: Pin REFDIV is %0b when PLLEN is %0b, at time: %0.3f us", REFDIV, PLLEN, $realtime*1e-12*1e6);
                   if(get_stop_on_error(input_check_x_void)) begin
                        $stop;
                   end
                end
            end
            if(PLLEN_previous === 1'bx && PLLEN == 1'b1) begin
                
                   $display("%m: [ERROR]: PLL was enabled from an 'x' state on a PLLEN pin, at time: %0.3f us", $realtime*1e-12*1e6);
               if(get_stop_on_error(input_check_x_void)) begin
                    $stop;
               end
            end
            PLLEN_previous = PLLEN;
        end
    end
endtask
function real abs;
input real value;
begin
    if(value < 0) begin
        abs = -value;
    end
    else begin
        abs = value;
    end
end
endfunction


reg core_measure_report_en = 1;
reg lock_err = 0;
reg fvco_expected_err = 0;
reg fvco_requested_err = 0;
reg core_measure_void; 
real lock_time_cycles;
real lock_time;
real vcofq_mhz_var = 1400;  
real FREFfq_mhz_var = -1; 
real FREFCMLfq_mhz_var = -1; 

task run_lock_timer;
    real start_lock_time;
    reg lock_lost;
    reg lock_init;
    begin
        start_lock_time = $realtime;
        lock_lost = 0;
        lock_time_cycles = 0;
        lock_init = LOCK;
        fork : lock_timer_fork
            begin
                repeat(2000) begin
                        #(1.0/1e-12/1e6/get_fq_pfd(core_measure_void));
                        lock_time_cycles = lock_time_cycles + 1;
                end
                lock_time = -1;
                lock_err = 1;
                disable lock_timer_fork;
            end
            begin: count_lock_time
                @(posedge LOCK);
                lock_time = $realtime - start_lock_time;
                disable lock_timer_fork;
            end
            begin: check_if_lock_lost
                @(negedge LOCK);
                lock_lost = 1;
            end
        join
        if(lock_init && !lock_lost && (lock_time == -1)) begin
            lock_time = -100;
            lock_err = 0;
        end
    end
endtask
task report_lock_time;
begin
    if(core_measure_report_en)
    begin
        if(lock_time == -1)
        begin
            $display("NOT LOCKED in time specified in datasheet : %0d input clock cycles.", 2000);
        end
        if(lock_time == -100)
        begin
            $display("The PLL didn't lose LOCK during last lock timer run.");
        end
        else
        begin
            $display("LOCK in: %.2f us (%.0f PFD cycles).", lock_time/1e6, lock_time_cycles);
        end
    end
end
endtask
task report_fvco_expected;
begin
	if(core_measure_report_en)
	begin
		$display("Expected VCO frequency: %.2f MHz", get_fvco_expected(core_measure_void));
	end
end
endtask
task chk_fvco_expected;
begin
	if(get_fvco_expected(core_measure_void) < 2000 * 0.99) begin
        if(core_measure_report_en) begin
            $display("%m: [ERROR]: Expected VCO frequency is too low: %0.2f MHz, at time: %0.3f us", get_fvco_expected(core_measure_void), $realtime*1e-12*1e6);
        end
        fvco_expected_err = 1;
	end
	else if(get_fvco_expected(core_measure_void) > 8000 * 1.01) begin
        if(core_measure_report_en) begin
            $display("%m: [ERROR]: Expected VCO frequency is too high: %0.2f MHz, at time: %0.3f us", get_fvco_expected(core_measure_void), $realtime*1e-12*1e6);
        end
        fvco_expected_err = 1;
	end
end
endtask
task set_fref; 
input real frequency; 
reg dummy;
begin 
    case(get_active_fref(dummy))
        "FREF":  set_FREF(frequency);
        "FREFCML":  set_FREFCML(frequency);
    endcase
end 
endtask 

task wait_on_FREF_active;
begin
    wait(FREFfq_mhz_var > 0);
end
endtask
task wait_on_FREFCML_active;
begin
    wait(FREFCMLfq_mhz_var > 0);
end
endtask
task set_fvco_requested;
input real frequency;
begin
    vcofq_mhz_var = frequency;
end
endtask
task chk_fvco_requested;
begin
	if(get_fvco_requested(core_measure_void) < 2000) begin
        if(core_measure_report_en) begin
            $display("%m: [ERROR]: Requested VCO frequency is too low: %0.2f MHz, at time: %0.3f us", get_fvco_requested(core_measure_void), $realtime*1e-12*1e6);
        end
        fvco_requested_err = 1;
	end
	else if(get_fvco_requested(core_measure_void) > 8000) begin
        if(core_measure_report_en) begin
            $display("%m: [ERROR]: Requested VCO frequency is too high: %0.2f MHz, at time: %0.3f us", get_fvco_requested(core_measure_void), $realtime*1e-12*1e6);
        end
        fvco_requested_err = 1;
	end
end
endtask

function real get_REFDIV_val;
input reg dummy;
begin
    if (REFDIV == 0) get_REFDIV_val = 1; else get_REFDIV_val = REFDIV;
end
endfunction

function real get_FREF;
input reg dummy;
begin
    get_FREF = FREFfq_mhz_var;
end
endfunction
function real get_FREFCML;
input reg dummy;
begin
    get_FREFCML = FREFCMLfq_mhz_var;
end
endfunction

task set_FREF;
input real frequency;
begin
    FREFfq_mhz_var = frequency;
end
endtask
task set_FREFCML;
input real frequency;
begin
    FREFCMLfq_mhz_var = frequency;
end
endtask
function real get_fvco_requested;
input reg dummy;
begin
    get_fvco_requested = vcofq_mhz_var;
end
endfunction
function reg [32*32-1:0] get_active_fref;
input reg dummy;
begin
    case(FREFCMLEN)
        1'b0: get_active_fref = "FREF";
        1'b1: get_active_fref = "FREFCML";
    endcase
end
endfunction
function real get_fref;
input reg dummy;
begin
    case(get_active_fref(dummy))
        "FREF":  get_fref = get_FREF(dummy);
        "FREFCML":  get_fref = get_FREFCML(dummy);
    endcase
end
endfunction
function real get_fq_pfd; 
input reg dummy; 
begin 
    case(get_active_fref(dummy))
		"FREF":  get_fq_pfd = get_FREF(dummy)/get_REFDIV_val(dummy);		"FREFCML":  get_fq_pfd = get_FREFCML(dummy)/get_REFDIV_val(dummy);
    endcase
end 
endfunction 
function reg get_core_measure_error;
input reg dummy;
    begin
        get_core_measure_error = lock_err | fvco_expected_err | fvco_requested_err;
    end
endfunction
task reset_core_measure_error;
    begin
        lock_err = 0;
        fvco_expected_err = 0;
        fvco_requested_err = 0;
    end
endtask
task core_measure_report_on;
    begin
        core_measure_report_en = 1;
    end
endtask
task core_measure_report_off;
    begin
        core_measure_report_en = 0;
    end
endtask


real fbdiv_val		= 0;
real frac_val		= 0;
reg pll_mode = 0;
reg fq_pfd_err = 0;
reg fq_ref_err = 0;
reg fbdiv_val_err = 0;
reg frac_config_report_en = 1;
reg frac_config_void; 

function reg [1:0] get_fq_pfd_in_range; 
input reg dummy;
real fq_pfd;
begin
    fq_pfd = get_fq_pfd(dummy);
	if(DSMEN == !1'b1) begin 
		if(fq_pfd < 8 * 0.99) begin
			get_fq_pfd_in_range = 2'b01;
		end
		else if(fq_pfd > (get_fvco_expected(frac_config_void)/16) * 1.01) begin
			get_fq_pfd_in_range = 2'b10;
		end
		else begin
			get_fq_pfd_in_range = 2'b00;
		end
	end
	else begin 
		if(fq_pfd < 10 * 0.99) begin
			get_fq_pfd_in_range = 2'b01;
		end
		else if(fq_pfd > (get_fvco_expected(frac_config_void)/20) * 1.01) begin
			get_fq_pfd_in_range = 2'b10;
		end
		else begin
			get_fq_pfd_in_range = 2'b00;
		end
	end
end
endfunction
function real get_fvco_expected;
input reg dummy;
begin
	get_fvco_expected = get_fq_pfd(dummy)*($itor(FBDIV)+DSMEN*($itor(FRAC)/16777216));
end
endfunction
task calc_fbdiv_frac;
real total_div;
real rint_div;
real rfrac_div;
integer frac_div;
integer int_div;
begin
	frac_div = 0;
	total_div = get_fvco_requested(frac_config_void)  / get_fq_pfd(frac_config_void);
	int_div = $rtoi(total_div);
	rint_div = $itor(int_div);
	if(int_div != total_div) begin
		rfrac_div = total_div - rint_div;
		rfrac_div = rfrac_div * 16777216;
		frac_div = $rtoi(rfrac_div);
	end
	if(frac_div > 0) begin
		fbdiv_val = int_div;
		frac_val = frac_div;
		pll_mode = 1;
	end
	else begin
		fbdiv_val = int_div;
		frac_val = frac_div;
		pll_mode = 0;
	end
end
endtask
task report_fq_pfd;
begin
	if(frac_config_report_en)
	begin
		$display("Expected frequency at the PFD: %.2f MHz", get_fq_pfd(frac_config_void));
	end
end
endtask
task chk_fq_pfd;
begin
	if(get_fq_pfd_in_range(frac_config_void) == 2'b01) begin
        if (frac_config_report_en) begin
            $display("%m: [ERROR]: Expected PFD frequency is too low: %0.2f MHz, at time: %0.3f us", get_fq_pfd(frac_config_void), $realtime*1e-12*1e6);
        end
        fq_pfd_err = 1;
	end
	else if(get_fq_pfd_in_range(frac_config_void) == 2'b10) begin
        if (frac_config_report_en) begin
            $display("%m: [ERROR]: Expected PFD frequency is too high: %0.2f MHz, at time: %0.3f us", get_fq_pfd(frac_config_void), $realtime*1e-12*1e6);
        end
        fq_pfd_err = 1;
	end
end
endtask
task chk_fref;
    real fq_ref;
    reg dummy;
begin
    fq_ref = get_fref(dummy);
	if(DSMEN == !1'b1) begin 
		if(fq_ref < 8 * 0.99) begin
            fq_ref_err = 1;
            if (frac_config_report_en) begin
                $display("%m: [ERROR]: Reference frequency is too low: %0.2f MHz, at time: %0.3f us", get_fref(dummy), $realtime*1e-12*1e6);
            end
		end
		else if(fq_ref > 650 * 1.01) begin
            fq_ref_err = 1;
            if (frac_config_report_en) begin
                $display("%m: [ERROR]: Reference frequency is too high: %0.2f MHz, at time: %0.3f us", get_fref(dummy), $realtime*1e-12*1e6);
            end
		end
	end
	else begin 
		if(fq_ref < 10 * 0.99) begin
            fq_ref_err = 1;
            if (frac_config_report_en) begin
                $display("%m: [ERROR]: Reference frequency is too low: %0.2f MHz, at time: %0.3f us", get_fref(dummy), $realtime*1e-12*1e6);
            end
		end
		else if(fq_ref > 650 * 1.01) begin
            fq_ref_err = 1;
            if (frac_config_report_en) begin
                $display("%m: [ERROR]: Reference frequency is too high: %0.2f MHz, at time: %0.3f us", get_fref(dummy), $realtime*1e-12*1e6);
            end
		end
	end
end
endtask
task chk_fbdiv;
begin
	if(DSMEN == !1'b1) begin 
		if(FBDIV < 16) begin
            fbdiv_val_err = 1;
            if (frac_config_report_en) begin
                $display("%m: [ERROR]: FBDIV value is too low: %0d, at time: %0.3f us", FBDIV, $realtime*1e-12*1e6);
            end
		end
		else if(FBDIV > 1000) begin
            fbdiv_val_err = 1;
            if (frac_config_report_en) begin
                $display("%m: [ERROR]: FBDIV value is too high: %0d, at time: %0.3f us", FBDIV, $realtime*1e-12*1e6);
            end
		end
	end
	else begin 
		if(FBDIV < 20) begin
            fbdiv_val_err = 1;
            if (frac_config_report_en) begin
                $display("%m: [ERROR]: FBDIV value is too low: %0d, at time: %0.3f us", FBDIV, $realtime*1e-12*1e6);
            end
		end
		else if(FBDIV > 800) begin
            fbdiv_val_err = 1;
            if (frac_config_report_en) begin
                $display("%m: [ERROR]: FBDIV value is too high: %0d, at time: %0.3f us", FBDIV, $realtime*1e-12*1e6);
            end
		end
	end
end
endtask
task frac_config_report_on;
begin
    frac_config_report_en = 1;
end
endtask
task frac_config_report_off;
begin
    frac_config_report_en = 0;
end
endtask
function reg frac_config_get_error;
input reg dummy;
reg error;
begin
    frac_config_get_error = fq_pfd_err || fq_ref_err || fbdiv_val_err;
end
endfunction
task frac_config_reset_error;
begin
    fq_pfd_err = 0;
    fq_ref_err = 0;
    fbdiv_val_err = 0;
end
endtask


reg outputs_calc_void; 


function real get_FOUT0_freq;
input reg [32*32:0] vco_value;
begin
    if (vco_value == "requested") begin
        get_FOUT0_freq = get_fvco_requested(outputs_calc_void)/get_FOUT0_div(outputs_calc_void);
    end
	else if (POSTDIV0==0)
		get_FOUT0_freq = get_fref(outputs_calc_void);
	else if (!PLLEN)
		get_FOUT0_freq = get_fref(outputs_calc_void);
	else if (!FOUTEN[0])
		get_FOUT0_freq = -1;
    else if (vco_value == "expected") begin
        get_FOUT0_freq = get_fvco_expected(outputs_calc_void)/get_FOUT0_div(outputs_calc_void);
    end
end
endfunction
function real get_FOUT1_freq;
input reg [32*32:0] vco_value;
begin
    if (vco_value == "requested") begin
        get_FOUT1_freq = get_fvco_requested(outputs_calc_void)/get_FOUT1_div(outputs_calc_void);
    end
	else if (POSTDIV1==0)
		get_FOUT1_freq = get_fref(outputs_calc_void);
	else if (!PLLEN)
		get_FOUT1_freq = get_fref(outputs_calc_void);
	else if (!FOUTEN[1])
		get_FOUT1_freq = -1;
    else if (vco_value == "expected") begin
        get_FOUT1_freq = get_fvco_expected(outputs_calc_void)/get_FOUT1_div(outputs_calc_void);
    end
end
endfunction
function real get_FOUT2_freq;
input reg [32*32:0] vco_value;
begin
    if (vco_value == "requested") begin
        get_FOUT2_freq = get_fvco_requested(outputs_calc_void)/get_FOUT2_div(outputs_calc_void);
    end
	else if (POSTDIV2==0)
		get_FOUT2_freq = get_fref(outputs_calc_void);
	else if (!PLLEN)
		get_FOUT2_freq = get_fref(outputs_calc_void);
	else if (!FOUTEN[2])
		get_FOUT2_freq = -1;
    else if (vco_value == "expected") begin
        get_FOUT2_freq = get_fvco_expected(outputs_calc_void)/get_FOUT2_div(outputs_calc_void);
    end
end
endfunction
function real get_FOUT3_freq;
input reg [32*32:0] vco_value;
begin
    if (vco_value == "requested") begin
        get_FOUT3_freq = get_fvco_requested(outputs_calc_void)/get_FOUT3_div(outputs_calc_void);
    end
	else if (POSTDIV3==0)
		get_FOUT3_freq = get_fref(outputs_calc_void);
	else if (!PLLEN)
		get_FOUT3_freq = get_fref(outputs_calc_void);
	else if (!FOUTEN[3])
		get_FOUT3_freq = -1;
    else if (vco_value == "expected") begin
        get_FOUT3_freq = get_fvco_expected(outputs_calc_void)/get_FOUT3_div(outputs_calc_void);
    end
end
endfunction
function real get_FOUTVCO_freq;
input reg [32*32:0] vco_value;
begin
    if (vco_value == "requested") begin
        get_FOUTVCO_freq = get_fvco_requested(outputs_calc_void)/get_FOUTVCO_div(outputs_calc_void);
    end
	else if (!PLLEN)
		get_FOUTVCO_freq = -1;
	else if (!FOUTVCOEN)
		get_FOUTVCO_freq = -1;
    else if (vco_value == "expected") begin
        get_FOUTVCO_freq = get_fvco_expected(outputs_calc_void)/get_FOUTVCO_div(outputs_calc_void);
    end
end
endfunction
function real get_FOUTCMLP_freq;
input reg [32*32:0] vco_value;
begin
    if (vco_value == "requested") begin
        get_FOUTCMLP_freq = get_fvco_requested(outputs_calc_void)/get_FOUTCMLP_div(outputs_calc_void);
    end
	else if (!PLLEN)
		get_FOUTCMLP_freq = -1;
	else if (!FOUTCMLEN)
		get_FOUTCMLP_freq = -1;
    else if (vco_value == "expected") begin
        get_FOUTCMLP_freq = get_fvco_expected(outputs_calc_void)/get_FOUTCMLP_div(outputs_calc_void);
    end
end
endfunction
function real get_FOUTCMLN_freq;
input reg [32*32:0] vco_value;
begin
    if (vco_value == "requested") begin
        get_FOUTCMLN_freq = get_fvco_requested(outputs_calc_void)/get_FOUTCMLN_div(outputs_calc_void);
    end
	else if (!PLLEN)
		get_FOUTCMLN_freq = -1;
	else if (!FOUTCMLEN)
		get_FOUTCMLN_freq = -1;
    else if (vco_value == "expected") begin
        get_FOUTCMLN_freq = get_fvco_expected(outputs_calc_void)/get_FOUTCMLN_div(outputs_calc_void);
    end
end
endfunction
function real get_FOUTDIFFP_freq;
input reg [32*32:0] vco_value;
begin
    if (vco_value == "requested") begin
        get_FOUTDIFFP_freq = get_fvco_requested(outputs_calc_void)/get_FOUTDIFFP_div(outputs_calc_void);
    end
	else if (!PLLEN)
		get_FOUTDIFFP_freq = -1;
	else if (!FOUTDIFFEN)
		get_FOUTDIFFP_freq = -1;
    else if (vco_value == "expected") begin
        get_FOUTDIFFP_freq = get_fvco_expected(outputs_calc_void)/get_FOUTDIFFP_div(outputs_calc_void);
    end
end
endfunction
function real get_FOUTDIFFN_freq;
input reg [32*32:0] vco_value;
begin
    if (vco_value == "requested") begin
        get_FOUTDIFFN_freq = get_fvco_requested(outputs_calc_void)/get_FOUTDIFFN_div(outputs_calc_void);
    end
	else if (!PLLEN)
		get_FOUTDIFFN_freq = -1;
	else if (!FOUTDIFFEN)
		get_FOUTDIFFN_freq = -1;
    else if (vco_value == "expected") begin
        get_FOUTDIFFN_freq = get_fvco_expected(outputs_calc_void)/get_FOUTDIFFN_div(outputs_calc_void);
    end
end
endfunction

function real get_FOUT0_div;
input reg dummy;
begin
		get_FOUT0_div = 1*get_POSTDIV0(outputs_calc_void);
end
endfunction
function real get_FOUT1_div;
input reg dummy;
begin
		get_FOUT1_div = 1*get_POSTDIV1(outputs_calc_void);
end
endfunction
function real get_FOUT2_div;
input reg dummy;
begin
		get_FOUT2_div = 1*get_POSTDIV2(outputs_calc_void);
end
endfunction
function real get_FOUT3_div;
input reg dummy;
begin
		get_FOUT3_div = 1*get_POSTDIV3(outputs_calc_void);
end
endfunction
function real get_FOUTVCO_div;
input reg dummy;
begin
		get_FOUTVCO_div = 1;
end
endfunction
function real get_FOUTCMLP_div;
input reg dummy;
begin
		get_FOUTCMLP_div = 1*get_POSTDIV4(outputs_calc_void);
end
endfunction
function real get_FOUTCMLN_div;
input reg dummy;
begin
		get_FOUTCMLN_div = 1*get_POSTDIV4(outputs_calc_void);
end
endfunction
function real get_FOUTDIFFP_div;
input reg dummy;
begin
		get_FOUTDIFFP_div = 1*get_POSTDIV4(outputs_calc_void);
end
endfunction
function real get_FOUTDIFFN_div;
input reg dummy;
begin
		get_FOUTDIFFN_div = 1*get_POSTDIV4(outputs_calc_void);
end
endfunction

function real get_POSTDIV0;
input reg dummy;
begin
    casez ({FOUTVCOBYP[0],POSTDIV0}) 
        5'b1???? : get_POSTDIV0 = 1; 
        5'b00001 : get_POSTDIV0 = 2; 
        5'b00010 : get_POSTDIV0 = 3;
        5'b00011 : get_POSTDIV0 = 4;
        5'b00100 : get_POSTDIV0 = 5;
        5'b00101 : get_POSTDIV0 = 6;
        5'b00110 : get_POSTDIV0 = 8;
        5'b00111 : get_POSTDIV0 = 10;
        5'b01000 : get_POSTDIV0 = 12;
        5'b01001 : get_POSTDIV0 = 16;
        5'b01010 : get_POSTDIV0 = 20;
        5'b01011 : get_POSTDIV0 = 24;
        5'b01100 : get_POSTDIV0 = 32;
        5'b01101 : get_POSTDIV0 = 40;
        5'b01110 : get_POSTDIV0 = 48;
        5'b01111 : get_POSTDIV0 = 64;
    endcase
end
endfunction
function real get_POSTDIV1;
input reg dummy;
begin
    casez ({FOUTVCOBYP[1],POSTDIV1}) 
        5'b1???? : get_POSTDIV1 = 1; 
        5'b00001 : get_POSTDIV1 = 2; 
        5'b00010 : get_POSTDIV1 = 3;
        5'b00011 : get_POSTDIV1 = 4;
        5'b00100 : get_POSTDIV1 = 5;
        5'b00101 : get_POSTDIV1 = 6;
        5'b00110 : get_POSTDIV1 = 8;
        5'b00111 : get_POSTDIV1 = 10;
        5'b01000 : get_POSTDIV1 = 12;
        5'b01001 : get_POSTDIV1 = 16;
        5'b01010 : get_POSTDIV1 = 20;
        5'b01011 : get_POSTDIV1 = 24;
        5'b01100 : get_POSTDIV1 = 32;
        5'b01101 : get_POSTDIV1 = 40;
        5'b01110 : get_POSTDIV1 = 48;
        5'b01111 : get_POSTDIV1 = 64;
    endcase
end
endfunction
function real get_POSTDIV2;
input reg dummy;
begin
    casez ({FOUTVCOBYP[2],POSTDIV2}) 
        5'b1???? : get_POSTDIV2 = 1; 
        5'b00001 : get_POSTDIV2 = 2; 
        5'b00010 : get_POSTDIV2 = 3;
        5'b00011 : get_POSTDIV2 = 4;
        5'b00100 : get_POSTDIV2 = 5;
        5'b00101 : get_POSTDIV2 = 6;
        5'b00110 : get_POSTDIV2 = 8;
        5'b00111 : get_POSTDIV2 = 10;
        5'b01000 : get_POSTDIV2 = 12;
        5'b01001 : get_POSTDIV2 = 16;
        5'b01010 : get_POSTDIV2 = 20;
        5'b01011 : get_POSTDIV2 = 24;
        5'b01100 : get_POSTDIV2 = 32;
        5'b01101 : get_POSTDIV2 = 40;
        5'b01110 : get_POSTDIV2 = 48;
        5'b01111 : get_POSTDIV2 = 64;
    endcase
end
endfunction
function real get_POSTDIV3;
input reg dummy;
begin
    casez ({FOUTVCOBYP[3],POSTDIV3}) 
        5'b1???? : get_POSTDIV3 = 1; 
        5'b00001 : get_POSTDIV3 = 2; 
        5'b00010 : get_POSTDIV3 = 3;
        5'b00011 : get_POSTDIV3 = 4;
        5'b00100 : get_POSTDIV3 = 5;
        5'b00101 : get_POSTDIV3 = 6;
        5'b00110 : get_POSTDIV3 = 8;
        5'b00111 : get_POSTDIV3 = 10;
        5'b01000 : get_POSTDIV3 = 12;
        5'b01001 : get_POSTDIV3 = 16;
        5'b01010 : get_POSTDIV3 = 20;
        5'b01011 : get_POSTDIV3 = 24;
        5'b01100 : get_POSTDIV3 = 32;
        5'b01101 : get_POSTDIV3 = 40;
        5'b01110 : get_POSTDIV3 = 48;
        5'b01111 : get_POSTDIV3 = 64;
    endcase
end
endfunction
function real get_POSTDIV4;
input reg dummy;
begin
    casez ({FOUTVCOBYP[4],POSTDIV4}) 
        3'b1?? : get_POSTDIV4 = 1; 
        3'b000 : get_POSTDIV4 = 4; 
        3'b001 : get_POSTDIV4 = 6; 
        3'b010 : get_POSTDIV4 = 8;
        3'b011 : get_POSTDIV4 = 12;
    endcase
end
endfunction
function reg outputs_calc_get_error;
input reg dummy;
reg error;
begin
    outputs_calc_get_error = 0;
end
endfunction
task outputs_calc_reset_error;
begin
end
endtask
task outputs_calc_report_on;
begin
end
endtask
task outputs_calc_report_off;
begin
end
endtask
function reg get_error;
input reg dummy;
reg error;
begin
    error = 0;
	error = error | get_core_measure_error(dummy);
	error = error | frac_config_get_error(dummy);
	error = error | outputs_calc_get_error(dummy);
    get_error = error;
end
endfunction
task reset_error;
begin
	reset_core_measure_error;
	frac_config_reset_error;
	outputs_calc_reset_error;
end
endtask
task report_enable;
begin
	core_measure_report_on;
	frac_config_report_on;
	outputs_calc_report_on;
end
endtask
task report_disable;
begin
	core_measure_report_off;
	frac_config_report_off;
	outputs_calc_report_off;
end
endtask
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_CORE
// *
module PLLTS16FFCFRACF_CORE (CLKSSCG, DACEN, DSKEWCALBYP, DSKEWCALCNT, DSKEWCALEN,
	DSKEWCALIN, DSKEWCALLOCK, DSKEWCALOUT, DSKEWFASTCAL, DSMEN, FBDIV, FOUT,
	FOUTCMLEN, FOUTCMLN, FOUTCMLP, FOUTDIFFEN, FOUTDIFFN, FOUTDIFFP, FOUTEN,
	FOUTVCO, FOUTVCOBYP, FOUTVCOEN, FRAC, FREF, FREFCMLEN, FREFCMLN,
	FREFCMLP, LOCK, PLLEN, POSTDIV0, POSTDIV1, POSTDIV2, POSTDIV3,
	POSTDIV4, REFDIV, VDDHV, VDDPOST, VDDREF, VSS);
inout [3:0] FOUT;
inout FOUTVCO;
inout FREFCMLN;
inout FOUTCMLN;
inout [1:0] POSTDIV4;
inout DSKEWCALBYP;
inout [11:0] FBDIV;
inout FOUTVCOEN;
inout FOUTCMLEN;
inout FOUTDIFFP;
inout [11:0] DSKEWCALOUT;
inout [3:0] POSTDIV0;
inout [2:0] DSKEWCALCNT;
inout FOUTDIFFEN;
inout [3:0] POSTDIV1;
inout VDDHV;
inout FOUTDIFFN;
inout [23:0] FRAC;
inout DSKEWFASTCAL;
inout [4:0] FOUTVCOBYP;
inout [3:0] FOUTEN;
inout PLLEN;
inout CLKSSCG;
inout [5:0] REFDIV;
inout LOCK;
inout [3:0] POSTDIV2;
inout FREFCMLEN;
inout [3:0] POSTDIV3;
inout DACEN;
inout DSMEN;
inout VDDREF;
inout VDDPOST;
inout FREF;
inout FOUTCMLP;
inout FREFCMLP;
inout DSKEWCALEN;
inout [11:0] DSKEWCALIN;
inout DSKEWCALLOCK;
inout VSS;
wire FREFCMLN;
wire FOUTCMLN;
wire [3:0] POSTDIV0_buf;
wire DSMEN_buf;
wire FOUT_ck1;
wire [1:0] POSTDIV4;
wire refbuf;
wire [11:0] FBDIV;
wire [11:0] FBDIV_buf;
wire PLLEN_buf;
wire FOUTVCOEN;
wire [2:0] DSKEWCALCNT_buf;
wire FOUTDIFFP;
wire FOUTCMLEN;
wire DACEN_buf;
wire [11:0] DSKEWCALOUT;
wire [3:0] POSTDIV1;
wire FOUTDIFFEN;
wire [2:0] DSKEWCALCNT;
wire refDivEn;
wire VDDHV;
wire FOUTDIFFN;
wire DSKEWFASTCAL;
wire [4:0] FOUTVCOBYP;
wire [3:0] FOUTEN;
wire ckdsm;
wire [3:0] POSTDIV3_buf;
wire [4:0] errorneg;
wire NET3;
wire cklock;
wire LOCK;
wire [3:0] POSTDIV2;
wire [3:0] POSTDIV3;
wire FREFCMLEN;
wire LOCK_out;
wire DACEN;
wire DSMEN;
wire [1:0] POSTDIV4_buf;
wire refEn;
wire VDDPOST;
wire lock_int;
wire FREF;
wire FOUTCMLP;
wire [3:0] POSTDIV1_buf;
wire FREFCMLP;
wire callock;
wire [11:0] fbdiv_out;
wire FOUTDIFFEN_buf;
wire VSS;
wire DSKEWFASTCAL_buf;
wire FREF_buf;
wire [3:0] FOUT;
wire FOUTVCO;
wire ncp;
wire frefcml;
wire [4:0] FOUTVCOBYP_buf;
wire DSKEWCALEN_buf;
wire DSKEWCALBYP;
wire FREFCMLEN_buf;
wire PD;
wire FOUTVCOEN_buf;
wire refbufpost;
wire [3:0] FOUTEN_buf;
wire [11:0] DSKEWCALOUT_from_core;
wire [3:0] POSTDIV0;
wire [5:0] REFDIV_buf;
wire [23:0] FRAC;
wire DSKEWCALBYP_buf;
wire PLLEN;
wire [4:0] errorpos;
wire CLKSSCG;
wire [5:0] REFDIV;
wire FOUTCMLEN_buf;
wire VDDREF;
wire NET2;
wire FREF_SEL;
wire [23:0] FRAC_buf;
wire resetlock;
wire [11:0] DSKEWCALIN_buf;
wire [3:0] POSTDIV2_buf;
wire dskewcaleni;
wire DSKEWCALEN;
wire [11:0] DSKEWCALIN;
wire dskewcalenB;
wire NET1;
wire DSKEWCALLOCK;
wire ncn;
PLLTS16FFCFRACF_dsp_top X5 ( .clk(ckdsm), .CLKSSCG(CLKSSCG), .DSMEN(DSMEN_buf), .errorneg({errorneg[4],
	errorneg[3], errorneg[2], errorneg[1], errorneg[0]}), .errorpos({errorpos[4], errorpos[3], errorpos[2],
	errorpos[1], errorpos[0]}), .fbdiv({fbdiv_out[11], fbdiv_out[10], fbdiv_out[9], fbdiv_out[8], fbdiv_out[7],
	fbdiv_out[6], fbdiv_out[5], fbdiv_out[4], fbdiv_out[3], fbdiv_out[2], fbdiv_out[1], fbdiv_out[0]}),
	.fracin({FRAC_buf[23], FRAC_buf[22], FRAC_buf[21], FRAC_buf[20], FRAC_buf[19], FRAC_buf[18], FRAC_buf[17],
	FRAC_buf[16], FRAC_buf[15], FRAC_buf[14], FRAC_buf[13], FRAC_buf[12], FRAC_buf[11], FRAC_buf[10],
	FRAC_buf[9], FRAC_buf[8], FRAC_buf[7], FRAC_buf[6], FRAC_buf[5], FRAC_buf[4], FRAC_buf[3],
	FRAC_buf[2], FRAC_buf[1], FRAC_buf[0]}), .intin({FBDIV_buf[11], FBDIV_buf[10], FBDIV_buf[9], FBDIV_buf[8],
	FBDIV_buf[7], FBDIV_buf[6], FBDIV_buf[5], FBDIV_buf[4], FBDIV_buf[3], FBDIV_buf[2], FBDIV_buf[1],
	FBDIV_buf[0]}), .lock_int(lock_int), .VDD(VDDREF), .VSS(VSS));
PLLTS16FFCFRACF_mux2x1cstm X6 ( .IN0(FREF_buf), .IN1(frefcml), .OUT(FREF_SEL), .SEL(FREFCMLEN_buf),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDDREF));
PLLTS16FFCFRACF_lock_counter Xlockdet ( .cklock(cklock), .lock(LOCK_out), .lock_int(lock_int), .resetlock(resetlock),
	.VDD(VDDREF), .VSS(VSS));
PLLTS16FFCFRACF_pllcore Xpllcore ( .calcnt({DSKEWCALCNT_buf[2], DSKEWCALCNT_buf[1], DSKEWCALCNT_buf[0]}), .callock(callock),
	.ckdsm(ckdsm), .cklock(cklock), .DACEN(DACEN_buf), .DSKEWCALBYP(DSKEWCALBYP_buf), .DSKEWCALEN(dskewcaleni), .DSKEWCALIN({DSKEWCALIN_buf[11], DSKEWCALIN_buf[10],
	DSKEWCALIN_buf[9], DSKEWCALIN_buf[8], DSKEWCALIN_buf[7], DSKEWCALIN_buf[6], DSKEWCALIN_buf[5], DSKEWCALIN_buf[4], DSKEWCALIN_buf[3],
	DSKEWCALIN_buf[2], DSKEWCALIN_buf[1], DSKEWCALIN_buf[0]}), .DSKEWCALOUT({DSKEWCALOUT_from_core[11], DSKEWCALOUT_from_core[10], DSKEWCALOUT_from_core[9], DSKEWCALOUT_from_core[8],
	DSKEWCALOUT_from_core[7], DSKEWCALOUT_from_core[6], DSKEWCALOUT_from_core[5], DSKEWCALOUT_from_core[4], DSKEWCALOUT_from_core[3], DSKEWCALOUT_from_core[2], DSKEWCALOUT_from_core[1],
	DSKEWCALOUT_from_core[0]}), .DSKEWFASTCAL(DSKEWFASTCAL_buf), .DSMEN(DSMEN_buf), .errorneg({errorneg[4], errorneg[3], errorneg[2], errorneg[1],
	errorneg[0]}), .errorpos({errorpos[4], errorpos[3], errorpos[2], errorpos[1], errorpos[0]}), .FBDIV({fbdiv_out[11],
	fbdiv_out[10], fbdiv_out[9], fbdiv_out[8], fbdiv_out[7], fbdiv_out[6], fbdiv_out[5], fbdiv_out[4],
	fbdiv_out[3], fbdiv_out[2], fbdiv_out[1], fbdiv_out[0]}), .FOUT(FOUT_ck1), .FREF(refbuf), .lock_int(lock_int),
	.PD(PD), .refDivEn(refDivEn), .refEn(refEn), .resetlock(resetlock), .VDDHV(VDDHV), .VDDPOST(VDDPOST), .VDDREF(VDDREF),
	.VSSHV(VSS), .VSSREF(VSS));
PLLTS16FFCFRACF_postdiv_top_5ch Xpostdiv_top ( .ck1(FOUT_ck1), .FOUT({FOUT[3], FOUT[2], FOUT[1],
	FOUT[0]}), .FOUTCMLEN(FOUTCMLEN_buf), .FOUTCMLN(FOUTCMLN), .FOUTCMLP(FOUTCMLP), .FOUTDIFFEN(FOUTDIFFEN_buf), .FOUTDIFFN(FOUTDIFFN), .FOUTDIFFP(FOUTDIFFP),
	.FOUTEN({FOUTEN_buf[3], FOUTEN_buf[2], FOUTEN_buf[1], FOUTEN_buf[0]}), .FOUTVCO(FOUTVCO), .FOUTVCOBYP({FOUTVCOBYP_buf[4], FOUTVCOBYP_buf[3],
	FOUTVCOBYP_buf[2], FOUTVCOBYP_buf[1], FOUTVCOBYP_buf[0]}), .FOUTVCOEN(FOUTVCOEN_buf), .FREF(refbufpost), .PLLEN(PLLEN_buf), .POSTDIV0({POSTDIV0_buf[3],
	POSTDIV0_buf[2], POSTDIV0_buf[1], POSTDIV0_buf[0]}), .POSTDIV1({POSTDIV1_buf[3], POSTDIV1_buf[2], POSTDIV1_buf[1], POSTDIV1_buf[0]}),
	.POSTDIV2({POSTDIV2_buf[3], POSTDIV2_buf[2], POSTDIV2_buf[1], POSTDIV2_buf[0]}), .POSTDIV3({POSTDIV3_buf[3], POSTDIV3_buf[2], POSTDIV3_buf[1],
	POSTDIV3_buf[0]}), .POSTDIV4({POSTDIV4_buf[1], POSTDIV4_buf[0]}), .VDDPOST(VDDPOST), .VSS(VSS));
PLLTS16FFCFRACF_cmosdiv_2to63 Xrefdiv ( .CLK(refbuf), .div({REFDIV_buf[5], REFDIV_buf[4], REFDIV_buf[3],
	REFDIV_buf[2], REFDIV_buf[1], REFDIV_buf[0]}), .divEn(refDivEn), .OUT(refEn), .PD(PD), .VDD(VDDREF),
	.VSS(VSS));
PLLTS16FFCFRACF_bufx1cstm Xbuf6 ( .IN(FREF), .OUT(FREF_buf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf5 ( .IN(LOCK_out), .OUT(LOCK), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_11_ ( .IN(DSKEWCALOUT_from_core[11]), .OUT(DSKEWCALOUT[11]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_10_ ( .IN(DSKEWCALOUT_from_core[10]), .OUT(DSKEWCALOUT[10]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_9_ ( .IN(DSKEWCALOUT_from_core[9]), .OUT(DSKEWCALOUT[9]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_8_ ( .IN(DSKEWCALOUT_from_core[8]), .OUT(DSKEWCALOUT[8]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_7_ ( .IN(DSKEWCALOUT_from_core[7]), .OUT(DSKEWCALOUT[7]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_6_ ( .IN(DSKEWCALOUT_from_core[6]), .OUT(DSKEWCALOUT[6]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_5_ ( .IN(DSKEWCALOUT_from_core[5]), .OUT(DSKEWCALOUT[5]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_4_ ( .IN(DSKEWCALOUT_from_core[4]), .OUT(DSKEWCALOUT[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_3_ ( .IN(DSKEWCALOUT_from_core[3]), .OUT(DSKEWCALOUT[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_2_ ( .IN(DSKEWCALOUT_from_core[2]), .OUT(DSKEWCALOUT[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_1_ ( .IN(DSKEWCALOUT_from_core[1]), .OUT(DSKEWCALOUT[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_0_ ( .IN(DSKEWCALOUT_from_core[0]), .OUT(DSKEWCALOUT[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_29_ ( .IN(POSTDIV0[3]), .OUT(POSTDIV0_buf[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_28_ ( .IN(POSTDIV0[2]), .OUT(POSTDIV0_buf[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_27_ ( .IN(POSTDIV0[1]), .OUT(POSTDIV0_buf[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_26_ ( .IN(POSTDIV0[0]), .OUT(POSTDIV0_buf[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_25_ ( .IN(POSTDIV1[3]), .OUT(POSTDIV1_buf[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_24_ ( .IN(POSTDIV1[2]), .OUT(POSTDIV1_buf[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_23_ ( .IN(POSTDIV1[1]), .OUT(POSTDIV1_buf[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_22_ ( .IN(POSTDIV1[0]), .OUT(POSTDIV1_buf[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_21_ ( .IN(POSTDIV2[3]), .OUT(POSTDIV2_buf[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_20_ ( .IN(POSTDIV2[2]), .OUT(POSTDIV2_buf[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_19_ ( .IN(POSTDIV2[1]), .OUT(POSTDIV2_buf[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_18_ ( .IN(POSTDIV2[0]), .OUT(POSTDIV2_buf[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_17_ ( .IN(POSTDIV3[3]), .OUT(POSTDIV3_buf[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_16_ ( .IN(POSTDIV3[2]), .OUT(POSTDIV3_buf[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_15_ ( .IN(POSTDIV3[1]), .OUT(POSTDIV3_buf[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_14_ ( .IN(POSTDIV3[0]), .OUT(POSTDIV3_buf[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_13_ ( .IN(POSTDIV4[1]), .OUT(POSTDIV4_buf[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_12_ ( .IN(POSTDIV4[0]), .OUT(POSTDIV4_buf[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_11_ ( .IN(FOUTEN[3]), .OUT(FOUTEN_buf[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_10_ ( .IN(FOUTEN[2]), .OUT(FOUTEN_buf[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_9_ ( .IN(FOUTEN[1]), .OUT(FOUTEN_buf[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_8_ ( .IN(FOUTEN[0]), .OUT(FOUTEN_buf[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_7_ ( .IN(FOUTCMLEN), .OUT(FOUTCMLEN_buf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_6_ ( .IN(FOUTDIFFEN), .OUT(FOUTDIFFEN_buf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_5_ ( .IN(FOUTVCOEN), .OUT(FOUTVCOEN_buf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_4_ ( .IN(FOUTVCOBYP[4]), .OUT(FOUTVCOBYP_buf[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_3_ ( .IN(FOUTVCOBYP[3]), .OUT(FOUTVCOBYP_buf[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_2_ ( .IN(FOUTVCOBYP[2]), .OUT(FOUTVCOBYP_buf[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_1_ ( .IN(FOUTVCOBYP[1]), .OUT(FOUTVCOBYP_buf[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_0_ ( .IN(FOUTVCOBYP[0]), .OUT(FOUTVCOBYP_buf[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDPOST));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_17_ ( .IN(DSKEWCALIN[11]), .OUT(DSKEWCALIN_buf[11]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_16_ ( .IN(DSKEWCALIN[10]), .OUT(DSKEWCALIN_buf[10]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_15_ ( .IN(DSKEWCALIN[9]), .OUT(DSKEWCALIN_buf[9]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_14_ ( .IN(DSKEWCALIN[8]), .OUT(DSKEWCALIN_buf[8]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_13_ ( .IN(DSKEWCALIN[7]), .OUT(DSKEWCALIN_buf[7]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_12_ ( .IN(DSKEWCALIN[6]), .OUT(DSKEWCALIN_buf[6]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_11_ ( .IN(DSKEWCALIN[5]), .OUT(DSKEWCALIN_buf[5]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_10_ ( .IN(DSKEWCALIN[4]), .OUT(DSKEWCALIN_buf[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_9_ ( .IN(DSKEWCALIN[3]), .OUT(DSKEWCALIN_buf[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_8_ ( .IN(DSKEWCALIN[2]), .OUT(DSKEWCALIN_buf[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_7_ ( .IN(DSKEWCALIN[1]), .OUT(DSKEWCALIN_buf[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_6_ ( .IN(DSKEWCALIN[0]), .OUT(DSKEWCALIN_buf[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_5_ ( .IN(DSKEWCALBYP), .OUT(DSKEWCALBYP_buf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_4_ ( .IN(DSKEWCALEN), .OUT(DSKEWCALEN_buf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_3_ ( .IN(DSKEWCALCNT[2]), .OUT(DSKEWCALCNT_buf[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_2_ ( .IN(DSKEWCALCNT[1]), .OUT(DSKEWCALCNT_buf[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_1_ ( .IN(DSKEWCALCNT[0]), .OUT(DSKEWCALCNT_buf[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_0_ ( .IN(DSKEWFASTCAL), .OUT(DSKEWFASTCAL_buf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_44_ ( .IN(REFDIV[5]), .OUT(REFDIV_buf[5]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_43_ ( .IN(REFDIV[4]), .OUT(REFDIV_buf[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_42_ ( .IN(REFDIV[3]), .OUT(REFDIV_buf[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_41_ ( .IN(REFDIV[2]), .OUT(REFDIV_buf[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_40_ ( .IN(REFDIV[1]), .OUT(REFDIV_buf[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_39_ ( .IN(REFDIV[0]), .OUT(REFDIV_buf[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_38_ ( .IN(FBDIV[11]), .OUT(FBDIV_buf[11]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_37_ ( .IN(FBDIV[10]), .OUT(FBDIV_buf[10]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_36_ ( .IN(FBDIV[9]), .OUT(FBDIV_buf[9]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_35_ ( .IN(FBDIV[8]), .OUT(FBDIV_buf[8]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_34_ ( .IN(FBDIV[7]), .OUT(FBDIV_buf[7]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_33_ ( .IN(FBDIV[6]), .OUT(FBDIV_buf[6]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_32_ ( .IN(FBDIV[5]), .OUT(FBDIV_buf[5]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_31_ ( .IN(FBDIV[4]), .OUT(FBDIV_buf[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_30_ ( .IN(FBDIV[3]), .OUT(FBDIV_buf[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_29_ ( .IN(FBDIV[2]), .OUT(FBDIV_buf[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_28_ ( .IN(FBDIV[1]), .OUT(FBDIV_buf[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_27_ ( .IN(FBDIV[0]), .OUT(FBDIV_buf[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_26_ ( .IN(FRAC[23]), .OUT(FRAC_buf[23]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_25_ ( .IN(FRAC[22]), .OUT(FRAC_buf[22]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_24_ ( .IN(FRAC[21]), .OUT(FRAC_buf[21]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_23_ ( .IN(FRAC[20]), .OUT(FRAC_buf[20]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_22_ ( .IN(FRAC[19]), .OUT(FRAC_buf[19]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_21_ ( .IN(FRAC[18]), .OUT(FRAC_buf[18]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_20_ ( .IN(FRAC[17]), .OUT(FRAC_buf[17]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_19_ ( .IN(FRAC[16]), .OUT(FRAC_buf[16]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_18_ ( .IN(FRAC[15]), .OUT(FRAC_buf[15]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_17_ ( .IN(FRAC[14]), .OUT(FRAC_buf[14]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_16_ ( .IN(FRAC[13]), .OUT(FRAC_buf[13]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_15_ ( .IN(FRAC[12]), .OUT(FRAC_buf[12]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_14_ ( .IN(FRAC[11]), .OUT(FRAC_buf[11]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_13_ ( .IN(FRAC[10]), .OUT(FRAC_buf[10]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_12_ ( .IN(FRAC[9]), .OUT(FRAC_buf[9]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_11_ ( .IN(FRAC[8]), .OUT(FRAC_buf[8]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_10_ ( .IN(FRAC[7]), .OUT(FRAC_buf[7]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_9_ ( .IN(FRAC[6]), .OUT(FRAC_buf[6]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_8_ ( .IN(FRAC[5]), .OUT(FRAC_buf[5]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_7_ ( .IN(FRAC[4]), .OUT(FRAC_buf[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_6_ ( .IN(FRAC[3]), .OUT(FRAC_buf[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_5_ ( .IN(FRAC[2]), .OUT(FRAC_buf[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_4_ ( .IN(FRAC[1]), .OUT(FRAC_buf[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_3_ ( .IN(FRAC[0]), .OUT(FRAC_buf[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_2_ ( .IN(DACEN), .OUT(DACEN_buf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_1_ ( .IN(DSMEN), .OUT(DSMEN_buf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_0_ ( .IN(FREFCMLEN), .OUT(FREFCMLEN_buf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_invx1cstm Xinv1 ( .IN(PD), .OUT(PLLEN_buf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx4cstm Xrefbufpost ( .IN(FREF_SEL), .OUT(refbufpost), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx4cstm_en Xrefbuf ( .EN(PLLEN_buf), .IN(FREF_SEL), .OUT(refbuf), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDREF));
PLLTS16FFCFRACF_invx1cstm X1 ( .IN(PLLEN), .OUT(PD), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_invx1cstm X2 ( .IN(DSKEWCALEN_buf), .OUT(dskewcalenB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_nor2x1cstm X3 ( .IN0(dskewcalenB), .IN1(DSKEWCALBYP_buf), .OUT(dskewcaleni), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDREF));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA X7 ( .VSS(VSS), .VDDA(VDDREF), .OUTP(ncp), .OUTN(ncn),
	.INP(FREFCMLP), .INN(FREFCMLN), .CMOS_IN_SEL(NET2), .CMOSOUTEN(FREFCMLEN_buf), .CMOSOUT(frefcml), .CMOSIN(NET1), .CMLOUTEN(NET3));
PLLTS16FFCFRACF_tielowx1cstm X9 ( .OUT(NET3), .SUB(VSS), .VNEG(VSS), .VPOS(VDDREF));
PLLTS16FFCFRACF_tielowx1cstm X8 ( .OUT(NET2), .SUB(VSS), .VNEG(VSS), .VPOS(VDDREF));
PLLTS16FFCFRACF_tielowx1cstm X4 ( .OUT(NET1), .SUB(VSS), .VNEG(VSS), .VPOS(VDDREF));
PLLTS16FFCFRACF_bufx4cstm X11 ( .IN(callock), .OUT(DSKEWCALLOCK), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_and2x1cstm
// *
module PLLTS16FFCFRACF_and2x1cstm (IN0, IN1, OUT, SUB, VNEG,
	VPOS);
inout VPOS;
inout IN0;
inout SUB;
inout VNEG;
inout IN1;
inout OUT;
wire VPOS;
wire IN0;
wire SUB;
wire VNEG;
wire IN1;
wire OUT;
wire outB;
PLLTS16FFCFRACF_nand2x1cstm X2 ( .IN0(IN0), .IN1(IN1), .OUT(outB), .SUB(SUB),
	.VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_invx1cstm X3 ( .IN(outB), .OUT(OUT), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_and3x1cstm
// *
module PLLTS16FFCFRACF_and3x1cstm (IN0, IN1, IN2, OUT, SUB,
	VNEG, VPOS);
inout VPOS;
inout IN0;
inout SUB;
inout VNEG;
inout IN2;
inout IN1;
inout OUT;
wire VPOS;
wire IN0;
wire SUB;
wire VNEG;
wire IN2;
wire IN1;
wire OUT;
wire outB;
PLLTS16FFCFRACF_nand3x1cstm X1 ( .IN0(IN0), .IN1(IN1), .IN2(IN2), .OUT(outB),
	.SUB(SUB), .VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_invx1cstm X2 ( .IN(outB), .OUT(OUT), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_and4x1cstm
// *
module PLLTS16FFCFRACF_and4x1cstm (IN0, IN1, IN2, IN3, OUT,
	SUB, VNEG, VPOS);
inout VPOS;
inout IN0;
inout SUB;
inout IN3;
inout VNEG;
inout IN2;
inout IN1;
inout OUT;
wire VPOS;
wire SUB;
wire IN3;
wire IN2;
wire OUT;
wire IN1;
wire NET1;
wire NET2;
wire IN0;
wire VNEG;
PLLTS16FFCFRACF_and2x1cstm X1 ( .IN0(NET2), .IN1(IN3), .OUT(OUT), .SUB(SUB),
	.VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_nand3x1cstm X2 ( .IN0(IN0), .IN1(IN1), .IN2(IN2), .OUT(NET1),
	.SUB(SUB), .VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_invx1cstm X3 ( .IN(NET1), .OUT(NET2), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_bbcomp2
// *
module PLLTS16FFCFRACF_bbcomp2 (dnin, upbb, upin, VDD, VSS);
inout upbb;
inout VDD;
inout upin;
inout VSS;
inout dnin;
wire VDD;
wire upbb;
wire dnin2;
wire NET1;
wire upin2;
wire dninB1;
wire upin;
wire upinB1;
wire clk;
wire NET2;
wire VSS;
wire dnin;
wire upin3;
PLLTS16FFCFRACF_nand2x1cstm X3 ( .IN0(upinB1), .IN1(dnin), .OUT(dninB1), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X4 ( .IN0(dninB1), .IN1(upin), .OUT(upinB1), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X5 ( .IN(upin), .OUT(clk), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X8 ( .IN(NET1), .OUT(upin2), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X9 ( .IN(dnin), .OUT(NET2), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X6 ( .IN(dninB1), .OUT(dnin2), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm X2 ( .IN(upinB1), .OUT(NET1), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X1 ( .CLK(clk), .D(upin2), .Q(upin3), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X7 ( .CLK(clk), .D(upin3), .Q(upbb), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_bbm_HV
// *
module PLLTS16FFCFRACF_bbm_HV (inh, outh, outh_pre, outhb, outhb_pre,
	VDDHV, VSS);
inout outh_pre;
inout outhb_pre;
inout outhb;
inout outh;
inout VDDHV;
inout VSS;
inout inh;
wire outh3;
wire outh_pre;
wire NET3;
wire outhb3;
wire outhb_pre;
wire inhb;
wire outhb;
wire outh;
wire NET4;
wire NET1;
wire VDDHV;
wire NET2;
wire VSS;
wire inh;
PLLTS16FFCFRACF_nand2x2sym Xnd1 ( .IN0(inh), .IN1(NET3), .OUT(outhb3), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDHV));
PLLTS16FFCFRACF_nand2x2sym Xnd2 ( .IN0(inhb), .IN1(NET1), .OUT(outh3), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDHV));
PLLTS16FFCFRACF_invx4cstm X1 ( .IN(outhb_pre), .OUT(outh), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDHV));
PLLTS16FFCFRACF_invx4cstm X2 ( .IN(outh_pre), .OUT(outhb), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDHV));
PLLTS16FFCFRACF_invx2cstm X3 ( .IN(NET3), .OUT(outhb_pre), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDHV));
PLLTS16FFCFRACF_invx1cstm X4 ( .IN(inh), .OUT(inhb), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDHV));
PLLTS16FFCFRACF_invx2cstm X5 ( .IN(NET1), .OUT(outh_pre), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDHV));
PLLTS16FFCFRACF_invx2cstm X6 ( .IN(outhb3), .OUT(NET2), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDHV));
PLLTS16FFCFRACF_invx2cstm X7 ( .IN(NET2), .OUT(NET1), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDHV));
PLLTS16FFCFRACF_invx2cstm X8 ( .IN(outh3), .OUT(NET4), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDHV));
PLLTS16FFCFRACF_invx2cstm X9 ( .IN(NET4), .OUT(NET3), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDHV));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_bbpfd2
// *
module PLLTS16FFCFRACF_bbpfd2 (calbyp, calcnt, calEn, calin, callock,
	ckpfd, clkshift, count_out, fastcal, LOCK, phshift, upbb,
	VDD, VSS);
inout callock;
inout upbb;
inout VDD;
inout [2:0] calcnt;
inout LOCK;
inout [11:0] count_out;
inout ckpfd;
inout fastcal;
inout [4:0] phshift;
inout [11:0] calin;
inout VSS;
inout calbyp;
inout clkshift;
inout calEn;
wire callock;
wire upbb;
wire VDD;
wire [2:0] calcnt;
wire LOCK;
wire [11:0] count_out;
wire ckpfd;
wire fastcal;
wire [4:0] phshift;
wire [11:0] calin;
wire dnbb;
wire VSS;
wire calbyp;
wire clkshift;
wire calEn;
PLLTS16FFCFRACF_bbpfd_logic2 Xbbpfd_logic ( .calbyp(calbyp), .calcnt({calcnt[2], calcnt[1], calcnt[0]}),
	.calEn(calEn), .calin({calin[11], calin[10], calin[9], calin[8], calin[7], calin[6],
	calin[5], calin[4], calin[3], calin[2], calin[1], calin[0]}), .callock(callock),
	.ckpfd(ckpfd), .clkshift(clkshift), .count_out({count_out[11], count_out[10], count_out[9], count_out[8], count_out[7],
	count_out[6], count_out[5], count_out[4], count_out[3], count_out[2], count_out[1], count_out[0]}),
	.dnbb(dnbb), .fastcal(fastcal), .LOCK(LOCK), .phshift({phshift[4], phshift[3], phshift[2], phshift[1],
	phshift[0]}), .upbb(upbb), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_invx1cstm X2 ( .IN(upbb), .OUT(dnbb), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_bbpfd_logic2
// *
module PLLTS16FFCFRACF_bbpfd_logic2 (calbyp, calcnt, calEn, calin, callock,
	ckpfd, clkshift, count_out, dnbb, fastcal, LOCK, phshift,
	upbb, VDD, VSS);
inout callock;
inout upbb;
inout VDD;
inout [2:0] calcnt;
inout LOCK;
inout [11:0] count_out;
inout ckpfd;
inout fastcal;
inout [4:0] phshift;
inout [11:0] calin;
inout dnbb;
inout VSS;
inout calbyp;
inout clkshift;
inout calEn;
wire upbb;
wire fastcalB;
wire rstB;
wire fastcal;
wire ckpfdB;
wire clkshift;
wire calEn;
wire VDD;
wire NET4;
wire ckpfd;
wire enclk;
wire [4:0] phshift;
wire [11:0] calin;
wire callockint;
wire calbypb;
wire ckdivout_buf;
wire count_up;
wire NET3;
wire LOCK;
wire [3:0] count_out1;
wire [11:0] ckdiv;
wire dnbb;
wire NET2;
wire count_up_lock;
wire [4:0] phshft_int;
wire calbyp;
wire fastcali;
wire callock;
wire count_dn;
wire [2:0] calcnt;
wire [11:0] ckdivb;
wire [11:0] count_out;
wire ckdivout;
wire NET1;
wire rst_lock;
wire v1;
wire ckpfddiv4;
wire VSS;
PLLTS16FFCFRACF_mux2x1cstm X12_4_ ( .IN0(phshft_int[4]), .IN1(calin[11]), .OUT(phshift[4]), .SEL(calbyp),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm X12_3_ ( .IN0(phshft_int[3]), .IN1(calin[10]), .OUT(phshift[3]), .SEL(calbyp),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm X12_2_ ( .IN0(phshft_int[2]), .IN1(calin[9]), .OUT(phshift[2]), .SEL(calbyp),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm X12_1_ ( .IN0(phshft_int[1]), .IN1(calin[8]), .OUT(phshift[1]), .SEL(calbyp),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm X12_0_ ( .IN0(phshft_int[0]), .IN1(calin[7]), .OUT(phshift[0]), .SEL(calbyp),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux8x1cstm1 X8 ( .IN({ckdivb[11], ckdivb[10], ckdivb[9], ckdivb[8],
	ckdivb[7], ckdivb[6], ckdivb[5], ckdivb[4]}), .OUT(ckdivout), .SEL({calcnt[2], calcnt[1],
	calcnt[0]}), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_up_dn_cnt_4b X2 ( .CLK(ckpfdB), .COUNT_DOWN(dnbb), .COUNT_OUT({count_out1[3], count_out1[2],
	count_out1[1], count_out1[0]}), .COUNT_UP(upbb), .DISABLEB(v1), .RST(ckdivout_buf), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_up_dn_cnt_12b_in5b Xcnt2 ( .calin({calin[11], calin[10], calin[9], calin[8],
	calin[7], calin[6], calin[5], calin[4], calin[3], calin[2], calin[1],
	calin[0]}), .CLK(ckdivout_buf), .COUNT_DOWN(count_dn), .COUNT_OUT({count_out[11], count_out[10], count_out[9], count_out[8],
	count_out[7], count_out[6], count_out[5], count_out[4], count_out[3], count_out[2], count_out[1],
	count_out[0]}), .COUNT_UP(count_up), .DISABLEB(v1), .fastcal(fastcali), .RB(rstB), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_dsm_requant_opt_12b_5b Xdsm ( .clk(ckpfddiv4), .in({count_out[11], count_out[10], count_out[9],
	count_out[8], count_out[7], count_out[6], count_out[5], count_out[4], count_out[3], count_out[2],
	count_out[1], count_out[0]}), .out({phshft_int[4], phshft_int[3], phshft_int[2], phshft_int[1], phshft_int[0]}),
	.rb(rstB), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_invx1cstm X17 ( .IN(count_dn), .OUT(count_up_lock), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand2x1clk X5 ( .IN0(enclk), .IN1(ckdivout), .OUT(NET3), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_lock_counter_phase X15 ( .cklock(count_up_lock), .lock(callock), .lock_int(callockint), .resetlock(rst_lock),
	.VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_nand2x1cstm X16 ( .IN0(v1), .IN1(rstB), .OUT(rst_lock), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm X14 ( .CLK(ckdiv[7]), .D(NET2), .Q(fastcali), .QB(NET1),
	.RB(rstB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nor2x1cstm X13 ( .IN0(callockint), .IN1(fastcalB), .OUT(NET2), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X3a ( .IN(fastcal), .OUT(fastcalB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_and2x1cstm X7 ( .IN0(calbypb), .IN1(rstB), .OUT(enclk), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and2x1cstm X12 ( .IN0(calEn), .IN1(LOCK), .OUT(rstB), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X3 ( .IN(calbyp), .OUT(calbypb), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X11 ( .IN(count_dn), .OUT(count_up), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X9 ( .CLK(ckdivout_buf), .D(count_out1[3]), .Q(count_dn), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xffdov_11_ ( .CLK(ckpfdB), .D(ckdivb[0]), .Q(ckdiv[0]), .QB(ckdivb[0]),
	.RB(rstB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xffdov_10_ ( .CLK(ckdivb[0]), .D(ckdivb[1]), .Q(ckdiv[1]), .QB(ckdivb[1]),
	.RB(rstB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xffdov_9_ ( .CLK(ckdivb[1]), .D(ckdivb[2]), .Q(ckdiv[2]), .QB(ckdivb[2]),
	.RB(rstB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xffdov_8_ ( .CLK(ckdivb[2]), .D(ckdivb[3]), .Q(ckdiv[3]), .QB(ckdivb[3]),
	.RB(rstB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xffdov_7_ ( .CLK(ckdivb[3]), .D(ckdivb[4]), .Q(ckdiv[4]), .QB(ckdivb[4]),
	.RB(rstB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xffdov_6_ ( .CLK(ckdivb[4]), .D(ckdivb[5]), .Q(ckdiv[5]), .QB(ckdivb[5]),
	.RB(rstB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xffdov_5_ ( .CLK(ckdivb[5]), .D(ckdivb[6]), .Q(ckdiv[6]), .QB(ckdivb[6]),
	.RB(rstB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xffdov_4_ ( .CLK(ckdivb[6]), .D(ckdivb[7]), .Q(ckdiv[7]), .QB(ckdivb[7]),
	.RB(rstB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xffdov_3_ ( .CLK(ckdivb[7]), .D(ckdivb[8]), .Q(ckdiv[8]), .QB(ckdivb[8]),
	.RB(rstB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xffdov_2_ ( .CLK(ckdivb[8]), .D(ckdivb[9]), .Q(ckdiv[9]), .QB(ckdivb[9]),
	.RB(rstB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xffdov_1_ ( .CLK(ckdivb[9]), .D(ckdivb[10]), .Q(ckdiv[10]), .QB(ckdivb[10]),
	.RB(rstB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xffdov_0_ ( .CLK(ckdivb[10]), .D(ckdivb[11]), .Q(ckdiv[11]), .QB(ckdivb[11]),
	.RB(rstB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_bufx4cstm X1 ( .IN(ckdivb[1]), .OUT(clkshift), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_tiehighx1cstm X6 ( .OUT(v1), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx4cstm X4 ( .IN(ckpfd), .OUT(ckpfdB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx4cstm X18 ( .IN(NET3), .OUT(ckdivout_buf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand2x1clk X10 ( .IN0(enclk), .IN1(ckdivb[1]), .OUT(NET4), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx4cstm X19 ( .IN(NET4), .OUT(ckpfddiv4), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_bufx12cstm
// *
module PLLTS16FFCFRACF_bufx12cstm (IN, OUT, SUB, VNEG, VPOS);
inout VPOS;
inout SUB;
inout OUT;
inout VNEG;
inout IN;
wire VPOS;
wire SUB;
wire OUT;
wire VNEG;
wire IN;
wire inB;
PLLTS16FFCFRACF_invx4cstm X1 ( .IN(IN), .OUT(inB), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
PLLTS16FFCFRACF_invx6cstm X2_2_ ( .IN(inB), .OUT(OUT), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
PLLTS16FFCFRACF_invx6cstm X2_1_ ( .IN(inB), .OUT(OUT), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_bufx1cstm
// *
module PLLTS16FFCFRACF_bufx1cstm (IN, OUT, SUB, VNEG, VPOS);
inout VPOS;
inout SUB;
inout OUT;
inout VNEG;
inout IN;
wire VPOS;
wire SUB;
wire OUT;
wire VNEG;
wire NET1;
wire IN;
PLLTS16FFCFRACF_invx1cstm X1 ( .IN(NET1), .OUT(OUT), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
PLLTS16FFCFRACF_invx1cstm X3 ( .IN(IN), .OUT(NET1), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_bufx2cstm
// *
module PLLTS16FFCFRACF_bufx2cstm (IN, OUT, SUB, VNEG, VPOS);
inout VPOS;
inout SUB;
inout OUT;
inout VNEG;
inout IN;
wire VPOS;
wire SUB;
wire OUT;
wire VNEG;
wire IN;
wire NET1;
PLLTS16FFCFRACF_invx1cstm X1 ( .IN(IN), .OUT(NET1), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
PLLTS16FFCFRACF_invx2cstm X2 ( .IN(NET1), .OUT(OUT), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_bufx4cstm
// *
module PLLTS16FFCFRACF_bufx4cstm (IN, OUT, SUB, VNEG, VPOS);
inout VPOS;
inout SUB;
inout OUT;
inout VNEG;
inout IN;
wire VPOS;
wire SUB;
wire OUT;
wire outB;
wire VNEG;
wire IN;
PLLTS16FFCFRACF_invx1cstm X1 ( .IN(IN), .OUT(outB), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
PLLTS16FFCFRACF_invx4cstm X2 ( .IN(outB), .OUT(OUT), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_bufx4cstm_en
// *
module PLLTS16FFCFRACF_bufx4cstm_en (EN, IN, OUT, SUB, VNEG,
	VPOS);
inout VPOS;
inout SUB;
inout OUT;
inout EN;
inout VNEG;
inout IN;
wire VPOS;
wire tiehigh;
wire SUB;
wire OUT;
wire outB;
wire EN;
wire VNEG;
wire in2;
wire IN;
wire inB;
PLLTS16FFCFRACF_tiehighx1cstm X1 ( .OUT(tiehigh), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_invx1cstm Xinv1 ( .IN(IN), .OUT(inB), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
PLLTS16FFCFRACF_invx4cstm Xinv2 ( .IN(outB), .OUT(OUT), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
PLLTS16FFCFRACF_nand2x1clk_sub Xnd1 ( .IN0(tiehigh), .IN1(inB), .OUT(in2), .SUB(SUB),
	.VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_nand2x2clk Xnd2 ( .IN0(EN), .IN1(in2), .OUT(outB), .SUB(SUB),
	.VNEG(VNEG), .VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_ckBgenx8_pd
// *
module PLLTS16FFCFRACF_ckBgenx8_pd (EN, IN, OUT, OUTB, VDD,
	VSS);
inout VDD;
inout OUT;
inout EN;
inout OUTB;
inout IN;
inout VSS;
wire clk1b;
wire VDD;
wire clk2;
wire OUT;
wire clkb1;
wire EN;
wire OUTB;
wire IN;
wire VSS;
PLLTS16FFCFRACF_invx8cstm X2_1_ ( .IN(clk1b), .OUT(OUT), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand2x2clk X3 ( .IN0(EN), .IN1(IN), .OUT(clk1b), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx8cstm X5_1_ ( .IN(clk2), .OUT(OUTB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx2cstm X6_1_ ( .IN(clkb1), .OUT(clk2), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand2x2clk X7 ( .IN0(EN), .IN1(IN), .OUT(clkb1), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_clkgate_foutvco
// *
module PLLTS16FFCFRACF_clkgate_foutvco (clkin, clkout, EN, VDD, VSS);
inout VDD;
inout clkout;
inout EN;
inout clkin;
inout VSS;
wire VDD;
wire clkbuf;
wire EN;
wire clkout;
wire enable1;
wire clkoutB;
wire clk_enable;
wire clkin;
wire NET1;
wire shut_off_rt;
wire VSS;
PLLTS16FFCFRACF_ffbrbx1cstm_v2 Xff2 ( .CLK(clkbuf), .D(enable1), .Q(clk_enable), .QB(shut_off_rt),
	.RB(EN), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm_v2 Xff1 ( .CLK(clkbuf), .D(EN), .Q(enable1), .QB(NET1),
	.RB(EN), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx16cstm Xinv_4_ ( .IN(clkoutB), .OUT(clkout), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx16cstm Xinv_3_ ( .IN(clkoutB), .OUT(clkout), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx16cstm Xinv_2_ ( .IN(clkoutB), .OUT(clkout), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx16cstm Xinv_1_ ( .IN(clkoutB), .OUT(clkout), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand2x4clk Xnand_4_ ( .IN0(clk_enable), .IN1(clkin), .OUT(clkoutB), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x4clk Xnand_3_ ( .IN0(clk_enable), .IN1(clkin), .OUT(clkoutB), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x4clk Xnand_2_ ( .IN0(clk_enable), .IN1(clkin), .OUT(clkoutB), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x4clk Xnand_1_ ( .IN0(clk_enable), .IN1(clkin), .OUT(clkoutB), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xinv2 ( .IN0(shut_off_rt), .IN1(clkin), .OUT(clkbuf), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_clkgate_postdiv_noreset
// *
module PLLTS16FFCFRACF_clkgate_postdiv_noreset (clkin, clkout, EN, EN_rt, VDD,
	VSS);
inout EN_rt;
inout VDD;
inout clkout;
inout EN;
inout clkin;
inout VSS;
wire EN_rt;
wire VDD;
wire clkbuf;
wire EN_rtb;
wire clkout;
wire EN;
wire clkoutB;
wire enable1;
wire clk_enable;
wire clkin;
wire VSS;
PLLTS16FFCFRACF_invx1cstm Xinv ( .IN(clkoutB), .OUT(clkout), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand2x2clk_fast Xnand ( .IN0(clk_enable), .IN1(clkin), .OUT(clkoutB), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X1 ( .CLK(clkbuf), .D(EN), .Q(enable1), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X2 ( .CLK(clkbuf), .D(enable1), .Q(clk_enable), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X3 ( .IN(clk_enable), .OUT(EN_rtb), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X5 ( .IN(clkin), .OUT(clkbuf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X4 ( .IN(EN_rtb), .OUT(EN_rt), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_cmosdiv_2to1023_ep
// *
module PLLTS16FFCFRACF_cmosdiv_2to1023_ep (ckdsmB, CLK, DACen, div, load,
	RST, VDD, VSS);
inout DACen;
inout load;
inout VDD;
inout ckdsmB;
inout RST;
inout [9:0] div;
inout CLK;
inout VSS;
wire ckdsmB0;
wire t7B;
wire qload;
wire DACen;
wire qb5;
wire qb8;
wire load;
wire qb67B;
wire qb678B;
wire t5B;
wire qb9;
wire VDD;
wire qb67;
wire clkB;
wire qb9orloadbB;
wire qb1;
wire t3B;
wire t9B;
wire q1;
wire qb7;
wire ckdsmB;
wire qb2;
wire qborloadb;
wire t1B;
wire t4B;
wire qloadb;
wire RST;
wire t2B;
wire [9:0] div;
wire qb3;
wire qb6;
wire t6B;
wire t8B;
wire qb678;
wire dacenB;
wire ckdsmB10;
wire qb2345;
wire ckdsmB2;
wire CLK;
wire ckdsmB1;
wire qb0;
wire VSS;
wire qb2345B;
wire loadbi;
wire qb4;
PLLTS16FFCFRACF_bufx12cstm X4 ( .IN(qload), .OUT(load), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm X5 ( .CLK(CLK), .D(loadbi), .Q(qloadb), .QB(qload),
	.RST(RST), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_latchx1cstmb_ulvt X8 ( .CLK(clkB), .CLKB(CLK), .D(load), .QB(dacenB),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx2cstm X10 ( .IN(dacenB), .OUT(DACen), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X1 ( .IN(qb0), .OUT(t1B), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X2 ( .IN(load), .OUT(ckdsmB2), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X3 ( .CLK(CLK), .D(ckdsmB2), .Q(ckdsmB1), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X6 ( .IN(qborloadb), .OUT(qb9orloadbB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X7 ( .IN0(qloadb), .IN1(qb9), .OUT(qborloadb), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X9 ( .IN(CLK), .OUT(clkB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X11 ( .CLK(CLK), .D(ckdsmB10), .Q(ckdsmB), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and2x1cstm X12 ( .IN0(ckdsmB0), .IN1(ckdsmB1), .OUT(ckdsmB10), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand3x1cstm X20 ( .IN0(qb2), .IN1(qb1), .IN2(qb0), .OUT(t3B),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand5x1cstm X24 ( .IN0(qb4), .IN1(qb3), .IN2(qb2), .IN3(qb1),
	.IN4(qb0), .OUT(t5B), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand3x1cstm X28 ( .IN0(qb2345), .IN1(qb1), .IN2(qb0), .OUT(t6B),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X42 ( .IN(qb67B), .OUT(qb67), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand3x1cstm X49 ( .IN0(qb8), .IN1(qb7), .IN2(qb6), .OUT(qb678B),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X50 ( .IN0(qb7), .IN1(qb6), .OUT(qb67B), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X72 ( .IN(qb678B), .OUT(qb678), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand4x1cstm X83 ( .IN0(qb3), .IN1(qb2), .IN2(qb1), .IN3(qb0),
	.OUT(t4B), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X84 ( .IN0(qb1), .IN1(qb0), .OUT(t2B), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx2cstm X92 ( .IN(qb2345B), .OUT(qb2345), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand4x1cstm X93 ( .IN0(qb6), .IN1(qb2345), .IN2(qb1), .IN3(qb0),
	.OUT(t7B), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand4x1cstm X94 ( .IN0(qb67), .IN1(qb2345), .IN2(qb1), .IN3(qb0),
	.OUT(t8B), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand4x1cstm X95 ( .IN0(qb678), .IN1(qb2345), .IN2(qb1), .IN3(qb0),
	.OUT(t9B), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X98 ( .CLK(CLK), .D(ckdsmB1), .Q(ckdsmB0), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X100 ( .IN(qb1), .OUT(q1), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand5x1cstm Xloadbi ( .IN0(qb9orloadbB), .IN1(qb2345), .IN2(qb678), .IN3(q1),
	.IN4(qb0), .OUT(loadbi), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand4x1cstm Xqb2345 ( .IN0(qb5), .IN1(qb4), .IN2(qb3), .IN3(qb2),
	.OUT(qb2345B), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tff_st4x_tff0_fb Xtff0 ( .CLK(CLK), .D(div[0]), .LOAD(load), .QB(qb0),
	.VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_tff_st1x Xtff2 ( .CLK(CLK), .D(div[2]), .LOAD(load), .QB(qb2),
	.TB(t2B), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_tff_st1x Xtff3 ( .CLK(CLK), .D(div[3]), .LOAD(load), .QB(qb3),
	.TB(t3B), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_tff_st1x Xtff4 ( .CLK(CLK), .D(div[4]), .LOAD(load), .QB(qb4),
	.TB(t4B), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_tff_st1x Xtff5 ( .CLK(CLK), .D(div[5]), .LOAD(load), .QB(qb5),
	.TB(t5B), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_tff_st1x Xtff6 ( .CLK(CLK), .D(div[6]), .LOAD(load), .QB(qb6),
	.TB(t6B), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_tff_st1x Xtff7 ( .CLK(CLK), .D(div[7]), .LOAD(load), .QB(qb7),
	.TB(t7B), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_tff_st1x Xtff8 ( .CLK(CLK), .D(div[8]), .LOAD(load), .QB(qb8),
	.TB(t8B), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_tff_st1x Xtff9 ( .CLK(CLK), .D(div[9]), .LOAD(load), .QB(qb9),
	.TB(t9B), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_tff_st1x_fb Xtff1 ( .CLK(CLK), .D(div[1]), .LOAD(load), .QB(qb1),
	.TB(t1B), .VDD(VDD), .VSS(VSS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_cmosdiv_2to63
// *
module PLLTS16FFCFRACF_cmosdiv_2to63 (CLK, div, divEn, OUT, PD,
	VDD, VSS);
inout divEn;
inout PD;
inout VDD;
inout OUT;
inout [5:0] div;
inout CLK;
inout VSS;
wire clki;
wire pd_int;
wire loadb;
wire qload;
wire refdiv21B;
wire qb23B;
wire qb5;
wire divEn;
wire PD;
wire clkb;
wire load;
wire t5B;
wire VDD;
wire OUT;
wire qb1;
wire q1;
wire t3B;
wire pdB_int;
wire qb2;
wire t1B;
wire t4B;
wire t2B;
wire [5:0] div;
wire qb3;
wire refdiv543B;
wire qb23;
wire div1;
wire qb2345;
wire CLK;
wire qbload;
wire qb0;
wire VSS;
wire qb2345B;
wire qb4;
PLLTS16FFCFRACF_nand2x2clk X1 ( .IN0(pdB_int), .IN1(CLK), .OUT(clkb), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx8cstm X2 ( .IN(clkb), .OUT(clki), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X3 ( .IN(qb0), .OUT(t1B), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X4 ( .IN(qb1), .OUT(q1), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nor2x1cstm X6 ( .IN0(PD), .IN1(div1), .OUT(pdB_int), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X7 ( .IN0(qb1), .IN1(qb0), .OUT(t2B), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X8 ( .IN(pdB_int), .OUT(pd_int), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X9 ( .IN(divEn), .OUT(div1), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx4cstm X11 ( .IN(qload), .OUT(OUT), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx4cstm X12 ( .IN(qbload), .OUT(load), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand4x1cstm X13 ( .IN0(qload), .IN1(qb2345), .IN2(q1), .IN3(qb0),
	.OUT(loadb), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nor3x1cstm X14 ( .IN0(div[3]), .IN1(div[4]), .IN2(div[5]), .OUT(refdiv543B),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X15 ( .IN0(refdiv21B), .IN1(refdiv543B), .OUT(divEn), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nor2x1cstm X16 ( .IN0(div[1]), .IN1(div[2]), .OUT(refdiv21B), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm X17 ( .CLK(clki), .D(loadb), .Q(qload), .QB(qbload),
	.RST(pd_int), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand3x1cstm X20 ( .IN0(qb2), .IN1(qb1), .IN2(qb0), .OUT(t3B),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand4x1cstm X24 ( .IN0(qb4), .IN1(qb23), .IN2(qb1), .IN3(qb0),
	.OUT(t5B), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand3x1cstm X28 ( .IN0(qb23), .IN1(qb1), .IN2(qb0), .OUT(t4B),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X30 ( .IN0(qb3), .IN1(qb2), .OUT(qb23B), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X33 ( .IN(qb2345B), .OUT(qb2345), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand3x1cstm X34 ( .IN0(qb5), .IN1(qb4), .IN2(qb23), .OUT(qb2345B),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx2cstm X36 ( .IN(qb23B), .OUT(qb23), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_tff_st1x Xtff0 ( .CLK(clki), .D(div[0]), .LOAD(load), .QB(qb0),
	.TB(pd_int), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_tff_st1x Xtff1 ( .CLK(clki), .D(div[1]), .LOAD(load), .QB(qb1),
	.TB(t1B), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_tff_st1x Xtff2 ( .CLK(clki), .D(div[2]), .LOAD(load), .QB(qb2),
	.TB(t2B), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_tff_st1x Xtff3 ( .CLK(clki), .D(div[3]), .LOAD(load), .QB(qb3),
	.TB(t3B), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_tff_st1x Xtff4 ( .CLK(clki), .D(div[4]), .LOAD(load), .QB(qb4),
	.TB(t4B), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_tff_st1x Xtff5 ( .CLK(clki), .D(div[5]), .LOAD(load), .QB(qb5),
	.TB(t5B), .VDD(VDD), .VSS(VSS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_dac_driver_logic
// *
module PLLTS16FFCFRACF_dac_driver_logic (DACen, DACin, DACout, DACPD, DSMPD,
	PFDinB, VDD, VSS);
inout DACen;
inout VDD;
inout DACout;
inout DACPD;
inout PFDinB;
inout DSMPD;
inout DACin;
inout VSS;
wire DAC2B;
wire DACen;
wire VDD;
wire DAC1B;
wire DACout;
wire dacoutB;
wire DACPD;
wire PFDinB;
wire DSMPD;
wire DACin;
wire VSS;
PLLTS16FFCFRACF_mux2x1cstm X10 ( .IN0(DAC2B), .IN1(PFDinB), .OUT(dacoutB), .SEL(DSMPD),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm X11 ( .IN0(DAC1B), .IN1(DACPD), .OUT(DAC2B), .SEL(DACPD),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X1 ( .IN(dacoutB), .OUT(DACout), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X12 ( .IN0(DACen), .IN1(DACin), .OUT(DAC1B), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_dff2x2_fast_ulvt
// *
module PLLTS16FFCFRACF_dff2x2_fast_ulvt (CLK, D, QB, VDD, VSS);
inout VDD;
inout D;
inout CLK;
inout QB;
inout VSS;
wire in2b;
wire in1b;
wire VDD;
wire D;
wire QI;
wire CLK;
wire CLKB;
wire QB;
wire VSS;
PLLTS16FFCFRACF_latchx2cstmb X5 ( .CLK(CLK), .CLKB(CLKB), .D(QI), .QB(QB),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x2sym_ulvt X2 ( .IN0(D), .IN1(CLKB), .OUT(in1b), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x2sym_ulvt X13 ( .IN0(in2b), .IN1(in1b), .OUT(QI), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x2sym_ulvt X1 ( .IN0(QI), .IN1(CLK), .OUT(in2b), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx3cstm X11 ( .IN(CLK), .OUT(CLKB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_dffnand2x2
// *
module PLLTS16FFCFRACF_dffnand2x2 (CLK, D0, D1, QB, VDD,
	VSS);
inout VDD;
inout CLK;
inout D1;
inout D0;
inout QB;
inout VSS;
wire in2b;
wire in1b;
wire VDD;
wire QI;
wire CLK;
wire CLKB;
wire D1;
wire D0;
wire VSS;
wire QB;
PLLTS16FFCFRACF_invx3cstm X11 ( .IN(CLK), .OUT(CLKB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand2x2sym_ulvt X13 ( .IN0(in2b), .IN1(in1b), .OUT(QI), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand3x2sym X9 ( .IN0(D0), .IN1(D1), .IN2(CLKB), .OUT(in1b),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_latchx2cstmb X5 ( .CLK(CLK), .CLKB(CLKB), .D(QI), .QB(QB),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x2sym_ulvt X1 ( .IN0(QI), .IN1(CLK), .OUT(in2b), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_dither_top
// *
module PLLTS16FFCFRACF_dither_top (clk, dither0, dither1, lock, VDD,
	VSS);
inout lock;
inout [3:0] dither1;
inout VDD;
inout [3:0] dither0;
inout clk;
inout VSS;
wire lock;
wire [3:0] dither1;
wire VDD;
wire [3:0] dither0;
wire reset;
wire clk;
wire VSS;
PLLTS16FFCFRACF_prbs_par_gen_2t21_rst Xprbs21 ( .clk(clk), .prbs({dither0[3], dither0[2], dither0[1],
	dither0[0]}), .reset(reset), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_prbs_par_gen_2t22_rst Xprbs22 ( .clk(clk), .prbs({dither1[3], dither1[2], dither1[1],
	dither1[0]}), .reset(reset), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_invx1cstm X1 ( .IN(lock), .OUT(reset), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_div16to4095_ep
// *
module PLLTS16FFCFRACF_div16to4095_ep (ck1, ckDACen, ckdmd, ckdsm, ckpfdEn,
	div, dsmen, rst, VDD, VSS);
inout ckdmd;
inout VDD;
inout dsmen;
inout ckdsm;
inout ckDACen;
inout [11:0] div;
inout ckpfdEn;
inout rst;
inout VSS;
inout ck1;
wire mc;
wire ckdmd;
wire load;
wire VDD;
wire clkdsmB1;
wire ckdsm1;
wire ckdsmB;
wire ckdmdi;
wire dsmen;
wire ckdmdB;
wire ckdsm;
wire ckDACen;
wire [11:0] div;
wire ckpfdEn;
wire rst;
wire ckdmd1;
wire VSS;
wire ck1;
PLLTS16FFCFRACF_cmosdiv_2to1023_ep Xpc ( .ckdsmB(clkdsmB1), .CLK(ckdmd1), .DACen(ckDACen), .div({div[11],
	div[10], div[9], div[8], div[7], div[6], div[5], div[4],
	div[3], div[2]}), .load(load), .RST(rst), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_dmd45_dffnand_ulvt Xdmd ( .CLK(ck1), .MC(mc), .OUT(ckdmdi), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_nand2x4clk X1 ( .IN0(dsmen), .IN1(clkdsmB1), .OUT(ckdsm1), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx4cstm X2 ( .IN(ckdmdB), .OUT(ckdmd), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx16cstm X3 ( .IN(ckdsm1), .OUT(ckdsmB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx16cstm X4_4_ ( .IN(ckdsmB), .OUT(ckdsm), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx16cstm X4_3_ ( .IN(ckdsmB), .OUT(ckdsm), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx16cstm X4_2_ ( .IN(ckdsmB), .OUT(ckdsm), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx16cstm X4_1_ ( .IN(ckdsmB), .OUT(ckdsm), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx4cstm X8 ( .IN(load), .OUT(ckpfdEn), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx6cstm X20 ( .IN(ckdmdi), .OUT(ckdmdB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx16cstm X21 ( .IN(ckdmdB), .OUT(ckdmd1), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_divsw4_ulvt X4 ( .CLK(ckdmd1), .div({div[1], div[0]}), .LOAD(load),
	.OUT(mc), .VDD(VDD), .VSS(VSS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_div2
// *
module PLLTS16FFCFRACF_div2 (ck1, ck2, VDD, VSS);
inout VDD;
inout VSS;
inout ck2;
inout ck1;
wire VDD;
wire ck21;
wire ck2B;
wire VSS;
wire ck2;
wire ck1;
PLLTS16FFCFRACF_ffx1cstm X4 ( .CLK(ck1), .D(ck21), .Q(ck2B), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx2cstm X5 ( .IN(ck2B), .OUT(ck2), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X2 ( .IN(ck2B), .OUT(ck21), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_div2_rst
// *
module PLLTS16FFCFRACF_div2_rst (ck1, ck2, en, VDD, VSS);
inout VDD;
inout en;
inout VSS;
inout ck2;
inout ck1;
wire nc_qB;
wire VDD;
wire en;
wire ck21;
wire ck2B;
wire VSS;
wire ck2;
wire ck1;
PLLTS16FFCFRACF_invx2cstm X5 ( .IN(ck2B), .OUT(ck2), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm_v2 X4 ( .CLK(ck1), .D(ck21), .Q(ck2B), .QB(nc_qB),
	.RB(en), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X2 ( .IN(ck2B), .OUT(ck21), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_div3_rst
// *
module PLLTS16FFCFRACF_div3_rst (ck1, ck3, en, VDD, VSS);
inout VDD;
inout en;
inout ck3;
inout VSS;
inout ck1;
wire q3b;
wire q3;
wire q3ab;
wire VDD;
wire qb3a;
wire en;
wire d3b;
wire ck3B;
wire q3a;
wire ck3;
wire qb3aB;
wire VSS;
wire ck1;
PLLTS16FFCFRACF_ffbrbqix2cstm X8 ( .CLK(ck1), .D(q3b), .Q(q3a), .QB(q3ab),
	.QIB(qb3a), .RB(en), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x2sym X12 ( .IN0(q3b), .IN1(q3a), .OUT(d3b), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx2cstm X16 ( .IN(ck3B), .OUT(ck3), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X15 ( .IN(qb3a), .OUT(qb3aB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx2cstm X7 ( .CLK(ck1), .D(d3b), .Q(q3b), .QB(q3),
	.RB(en), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1sym X3 ( .IN0(qb3aB), .IN1(q3a), .OUT(ck3B), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_div5_rst
// *
module PLLTS16FFCFRACF_div5_rst (ck1, ck5, en, VDD, VSS);
inout VDD;
inout en;
inout ck5;
inout VSS;
inout ck1;
wire ck5B;
wire q5ab;
wire q5b;
wire qb5a;
wire VDD;
wire q5cb;
wire d5c;
wire en;
wire qb5aB;
wire q5c;
wire ck5;
wire VSS;
wire nc_q5bb;
wire ck1;
wire q5a;
PLLTS16FFCFRACF_ffbrbqix2cstm X17 ( .CLK(ck1), .D(q5b), .Q(q5a), .QB(q5ab),
	.QIB(qb5a), .RB(en), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x2sym_ulvt Xnd3 ( .IN0(q5b), .IN1(q5a), .OUT(d5c), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx2cstm X16 ( .IN(ck5B), .OUT(ck5), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X11 ( .IN(qb5a), .OUT(qb5aB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx2cstm X10 ( .CLK(ck1), .D(d5c), .Q(q5c), .QB(q5cb),
	.RB(en), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx2cstm X14 ( .CLK(ck1), .D(q5c), .Q(q5b), .QB(nc_q5bb),
	.RB(en), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1sym X15 ( .IN0(qb5aB), .IN1(q5a), .OUT(ck5B), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_diven_decoder
// *
module PLLTS16FFCFRACF_diven_decoder (div10en, div12en, div16en, div20en, div24en,
	div2en, div32en, div3en, div40en, div48en, div4en, div5en,
	div64en, div6en, div8en, en2, en3, en4, en5,
	en6, en8, en10, en12, en16, en20, en24,
	en32, en40, en48, en64, VDD, VSS);
inout en2;
inout en40;
inout div12en;
inout en10;
inout div5en;
inout en12;
inout en24;
inout en5;
inout en64;
inout en4;
inout div48en;
inout div16en;
inout div40en;
inout div8en;
inout VDD;
inout en32;
inout en3;
inout en6;
inout en8;
inout div64en;
inout div10en;
inout div2en;
inout en16;
inout div24en;
inout div3en;
inout en20;
inout div20en;
inout div32en;
inout div6en;
inout VSS;
inout div4en;
inout en48;
wire en2;
wire en40;
wire div12en;
wire en10;
wire div5en;
wire en24;
wire en12;
wire en5;
wire en64;
wire en4;
wire div48en;
wire div40en;
wire div8en;
wire div16en;
wire VDD;
wire en32;
wire en3;
wire en6;
wire en8;
wire div64en;
wire div10en;
wire div2en;
wire en16;
wire div24en;
wire div3en;
wire en20;
wire div20en;
wire div6en;
wire div32en;
wire VSS;
wire div4en;
wire en48;
PLLTS16FFCFRACF_or4x1cstm X15 ( .IN0(en40), .IN1(en20), .IN2(en10), .IN3(en5),
	.OUT(div5en), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm X12 ( .IN(en40), .OUT(div40en), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_or2x1cstm X13 ( .IN0(en40), .IN1(en20), .OUT(div20en), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or3x1cstm X14 ( .IN0(en40), .IN1(en20), .IN2(en10), .OUT(div10en),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm X9 ( .IN(en48), .OUT(div48en), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_or2x1cstm X3 ( .IN0(en48), .IN1(en24), .OUT(div24en), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or3x1cstm X4 ( .IN0(en48), .IN1(en24), .IN2(en12), .OUT(div12en),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or4x1cstm X11 ( .IN0(en48), .IN1(en24), .IN2(en12), .IN3(en6),
	.OUT(div6en), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or5x1cstm X10 ( .IN0(en48), .IN1(en24), .IN2(en12), .IN3(en6),
	.IN4(en3), .OUT(div3en), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm X2 ( .IN(en64), .OUT(div64en), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_or2x1cstm X1 ( .IN0(en64), .IN1(en32), .OUT(div32en), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or6x1cstm X5 ( .IN0(en64), .IN1(en32), .IN2(en16), .IN3(en8),
	.IN4(en4), .IN5(en2), .OUT(div2en), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or4x1cstm X6 ( .IN0(en64), .IN1(en32), .IN2(en16), .IN3(en8),
	.OUT(div8en), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or5x1cstm X7 ( .IN0(en64), .IN1(en32), .IN2(en16), .IN3(en8),
	.IN4(en4), .OUT(div4en), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or3x1cstm X8 ( .IN0(en64), .IN1(en32), .IN2(en16), .OUT(div16en),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_divsw4_ulvt
// *
module PLLTS16FFCFRACF_divsw4_ulvt (CLK, div, LOAD, OUT, VDD,
	VSS);
inout VDD;
inout OUT;
inout LOAD;
inout [1:0] div;
inout CLK;
inout VSS;
wire VDD;
wire OUT;
wire qb1;
wire tb1;
wire tb0;
wire LOAD;
wire [1:0] div;
wire NET3;
wire CLK;
wire qb0;
wire VSS;
PLLTS16FFCFRACF_tff_st1x_ulvt_v2 Xtff0 ( .CLK(CLK), .D(div[0]), .LOAD(LOAD), .QB(qb0),
	.TB(tb0), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_tff_st1x_ulvt_v2 Xtff1 ( .CLK(CLK), .D(div[1]), .LOAD(LOAD), .QB(qb1),
	.TB(tb1), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_invx1cstm X1 ( .IN(OUT), .OUT(tb0), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X2 ( .IN0(qb0), .IN1(NET3), .OUT(tb1), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X3 ( .IN(qb1), .OUT(NET3), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand2x2cstm X6 ( .IN0(qb0), .IN1(qb1), .OUT(OUT), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_dmd45_dffnand_ulvt
// *
module PLLTS16FFCFRACF_dmd45_dffnand_ulvt (CLK, MC, OUT, VDD, VSS);
inout VDD;
inout OUT;
inout CLK;
inout MC;
inout VSS;
wire q3;
wire VDD;
wire clkB;
wire OUT;
wire qb1;
wire qb2;
wire qb3;
wire CLK;
wire MC;
wire VSS;
PLLTS16FFCFRACF_invx16cstm X2 ( .IN(CLK), .OUT(clkB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx2cstm X1 ( .IN(q3), .OUT(OUT), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_dff2x2_fast_ulvt X3 ( .CLK(clkB), .D(qb2), .QB(qb3), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_invx2cstm X9 ( .IN(qb3), .OUT(q3), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_dffnand2x2 X8 ( .CLK(clkB), .D0(MC), .D1(qb3), .QB(qb1),
	.VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_dffnand2x2 X7 ( .CLK(clkB), .D0(qb1), .D1(q3), .QB(qb2),
	.VDD(VDD), .VSS(VSS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_dsm_36b_eout_opt
// *
module PLLTS16FFCFRACF_dsm_36b_eout_opt (clk, dither, fracin, interror, intin,
	intout, VDD, VSS);
inout [11:0] intin;
inout VDD;
inout [11:0] intout;
inout [3:0] dither;
inout [11:0] interror;
inout [23:0] fracin;
inout clk;
inout VSS;
wire tiehigh;
wire [35:0] int1_del;
wire [35:0] int2_del;
wire [11:0] intin;
wire VDD;
wire [11:0] intout;
wire [35:0] int1_ndel;
wire [3:0] dither;
wire [11:0] interror;
wire tielow;
wire NET3;
wire [23:0] fracin;
wire [15:0] quant_in;
wire [35:0] int2_ndel;
wire [11:0] fbB;
wire clk;
wire VSS;
wire [11:0] errorint2;
PLLTS16FFCFRACF_ffx1cstm Xffdel1_11_ ( .CLK(clk), .D(quant_in[15]), .Q(intout[11]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffdel1_10_ ( .CLK(clk), .D(quant_in[14]), .Q(intout[10]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffdel1_9_ ( .CLK(clk), .D(quant_in[13]), .Q(intout[9]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffdel1_8_ ( .CLK(clk), .D(quant_in[12]), .Q(intout[8]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffdel1_7_ ( .CLK(clk), .D(quant_in[11]), .Q(intout[7]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffdel1_6_ ( .CLK(clk), .D(quant_in[10]), .Q(intout[6]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffdel1_5_ ( .CLK(clk), .D(quant_in[9]), .Q(intout[5]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffdel1_4_ ( .CLK(clk), .D(quant_in[8]), .Q(intout[4]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffdel1_3_ ( .CLK(clk), .D(quant_in[7]), .Q(intout[3]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffdel1_2_ ( .CLK(clk), .D(quant_in[6]), .Q(intout[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffdel1_1_ ( .CLK(clk), .D(quant_in[5]), .Q(intout[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffdel1_0_ ( .CLK(clk), .D(quant_in[4]), .Q(intout[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_11_ ( .IN(quant_in[15]), .OUT(fbB[11]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_10_ ( .IN(quant_in[14]), .OUT(fbB[10]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_9_ ( .IN(quant_in[13]), .OUT(fbB[9]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_8_ ( .IN(quant_in[12]), .OUT(fbB[8]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_7_ ( .IN(quant_in[11]), .OUT(fbB[7]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_6_ ( .IN(quant_in[10]), .OUT(fbB[6]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_5_ ( .IN(quant_in[9]), .OUT(fbB[5]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_4_ ( .IN(quant_in[8]), .OUT(fbB[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_3_ ( .IN(quant_in[7]), .OUT(fbB[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_2_ ( .IN(quant_in[6]), .OUT(fbB[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_1_ ( .IN(quant_in[5]), .OUT(fbB[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_0_ ( .IN(quant_in[4]), .OUT(fbB[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_tiehighx1cstm Xtiehigh ( .OUT(tiehigh), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tielowx1cstm Xtielow ( .OUT(tielow), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_fulladd16b_cbp Xditheradd ( .A({tielow, tielow, tielow, tielow,
	tielow, tielow, tielow, tielow, tielow, tielow, tielow,
	tielow, dither[3], dither[2], dither[1], dither[0]}), .B({int2_del[35], int2_del[34],
	int2_del[33], int2_del[32], int2_del[31], int2_del[30], int2_del[29], int2_del[28], int2_del[27],
	int2_del[26], int2_del[25], int2_del[24], int2_del[23], int2_del[22], int2_del[21], int2_del[20]}),
	.Ci(tielow), .Co(NET3), .S({quant_in[15], quant_in[14], quant_in[13], quant_in[12], quant_in[11],
	quant_in[10], quant_in[9], quant_in[8], quant_in[7], quant_in[6], quant_in[5], quant_in[4],
	quant_in[3], quant_in[2], quant_in[1], quant_in[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_dsm_36b_stage Xstage1 ( .clk(clk), .fbB({fbB[11], fbB[10], fbB[9],
	fbB[8], fbB[7], fbB[6], fbB[5], fbB[4], fbB[3], fbB[2],
	fbB[1], fbB[0]}), .fracin({fracin[23], fracin[22], fracin[21], fracin[20], fracin[19],
	fracin[18], fracin[17], fracin[16], fracin[15], fracin[14], fracin[13], fracin[12],
	fracin[11], fracin[10], fracin[9], fracin[8], fracin[7], fracin[6], fracin[5],
	fracin[4], fracin[3], fracin[2], fracin[1], fracin[0]}), .interror({interror[11], interror[10],
	interror[9], interror[8], interror[7], interror[6], interror[5], interror[4], interror[3],
	interror[2], interror[1], interror[0]}), .intin({intin[11], intin[10], intin[9], intin[8],
	intin[7], intin[6], intin[5], intin[4], intin[3], intin[2], intin[1],
	intin[0]}), .out_del({int1_del[35], int1_del[34], int1_del[33], int1_del[32], int1_del[31], int1_del[30],
	int1_del[29], int1_del[28], int1_del[27], int1_del[26], int1_del[25], int1_del[24], int1_del[23],
	int1_del[22], int1_del[21], int1_del[20], int1_del[19], int1_del[18], int1_del[17], int1_del[16],
	int1_del[15], int1_del[14], int1_del[13], int1_del[12], int1_del[11], int1_del[10], int1_del[9],
	int1_del[8], int1_del[7], int1_del[6], int1_del[5], int1_del[4], int1_del[3], int1_del[2],
	int1_del[1], int1_del[0]}), .out_nondel({int1_ndel[35], int1_ndel[34], int1_ndel[33], int1_ndel[32], int1_ndel[31],
	int1_ndel[30], int1_ndel[29], int1_ndel[28], int1_ndel[27], int1_ndel[26], int1_ndel[25], int1_ndel[24],
	int1_ndel[23], int1_ndel[22], int1_ndel[21], int1_ndel[20], int1_ndel[19], int1_ndel[18], int1_ndel[17],
	int1_ndel[16], int1_ndel[15], int1_ndel[14], int1_ndel[13], int1_ndel[12], int1_ndel[11], int1_ndel[10],
	int1_ndel[9], int1_ndel[8], int1_ndel[7], int1_ndel[6], int1_ndel[5], int1_ndel[4], int1_ndel[3],
	int1_ndel[2], int1_ndel[1], int1_ndel[0]}), .tiehigh(tiehigh), .tielow(tielow), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_dsm_36b_stage Xstage2 ( .clk(clk), .fbB({fbB[11], fbB[10], fbB[9],
	fbB[8], fbB[7], fbB[6], fbB[5], fbB[4], fbB[3], fbB[2],
	fbB[1], fbB[0]}), .fracin({int1_ndel[23], int1_ndel[22], int1_ndel[21], int1_ndel[20], int1_ndel[19],
	int1_ndel[18], int1_ndel[17], int1_ndel[16], int1_ndel[15], int1_ndel[14], int1_ndel[13], int1_ndel[12],
	int1_ndel[11], int1_ndel[10], int1_ndel[9], int1_ndel[8], int1_ndel[7], int1_ndel[6], int1_ndel[5],
	int1_ndel[4], int1_ndel[3], int1_ndel[2], int1_ndel[1], int1_ndel[0]}), .interror({errorint2[11], errorint2[10],
	errorint2[9], errorint2[8], errorint2[7], errorint2[6], errorint2[5], errorint2[4], errorint2[3],
	errorint2[2], errorint2[1], errorint2[0]}), .intin({int1_ndel[35], int1_ndel[34], int1_ndel[33], int1_ndel[32],
	int1_ndel[31], int1_ndel[30], int1_ndel[29], int1_ndel[28], int1_ndel[27], int1_ndel[26], int1_ndel[25],
	int1_ndel[24]}), .out_del({int2_del[35], int2_del[34], int2_del[33], int2_del[32], int2_del[31], int2_del[30],
	int2_del[29], int2_del[28], int2_del[27], int2_del[26], int2_del[25], int2_del[24], int2_del[23],
	int2_del[22], int2_del[21], int2_del[20], int2_del[19], int2_del[18], int2_del[17], int2_del[16],
	int2_del[15], int2_del[14], int2_del[13], int2_del[12], int2_del[11], int2_del[10], int2_del[9],
	int2_del[8], int2_del[7], int2_del[6], int2_del[5], int2_del[4], int2_del[3], int2_del[2],
	int2_del[1], int2_del[0]}), .out_nondel({int2_ndel[35], int2_ndel[34], int2_ndel[33], int2_ndel[32], int2_ndel[31],
	int2_ndel[30], int2_ndel[29], int2_ndel[28], int2_ndel[27], int2_ndel[26], int2_ndel[25], int2_ndel[24],
	int2_ndel[23], int2_ndel[22], int2_ndel[21], int2_ndel[20], int2_ndel[19], int2_ndel[18], int2_ndel[17],
	int2_ndel[16], int2_ndel[15], int2_ndel[14], int2_ndel[13], int2_ndel[12], int2_ndel[11], int2_ndel[10],
	int2_ndel[9], int2_ndel[8], int2_ndel[7], int2_ndel[6], int2_ndel[5], int2_ndel[4], int2_ndel[3],
	int2_ndel[2], int2_ndel[1], int2_ndel[0]}), .tiehigh(tiehigh), .tielow(tielow), .VDD(VDD), .VSS(VSS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_dsm_36b_stage
// *
module PLLTS16FFCFRACF_dsm_36b_stage (clk, fbB, fracin, interror, intin,
	out_del, out_nondel, tiehigh, tielow, VDD, VSS);
inout tiehigh;
inout [11:0] intin;
inout VDD;
inout [35:0] out_nondel;
inout [35:0] out_del;
inout [11:0] interror;
inout tielow;
inout [23:0] fracin;
inout [11:0] fbB;
inout clk;
inout VSS;
wire tiehigh;
wire [11:0] intin;
wire VDD;
wire [35:0] out_nondel;
wire [35:0] out_del;
wire [11:0] interror;
wire tielow;
wire NET2;
wire [23:0] fracin;
wire [11:0] fbB;
wire clk;
wire VSS;
PLLTS16FFCFRACF_fulladd12b_cbp Xadd1 ( .A({intin[11], intin[10], intin[9], intin[8],
	intin[7], intin[6], intin[5], intin[4], intin[3], intin[2], intin[1],
	intin[0]}), .B({fbB[11], fbB[10], fbB[9], fbB[8], fbB[7], fbB[6],
	fbB[5], fbB[4], fbB[3], fbB[2], fbB[1], fbB[0]}), .Ci(tiehigh),
	.Co(NET2), .S({interror[11], interror[10], interror[9], interror[8], interror[7], interror[6],
	interror[5], interror[4], interror[3], interror[2], interror[1], interror[0]}), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_dsm_int_36b Xint1 ( .clk(clk), .in({interror[11], interror[10], interror[9],
	interror[8], interror[7], interror[6], interror[5], interror[4], interror[3], interror[2],
	interror[1], interror[0], fracin[23], fracin[22], fracin[21], fracin[20], fracin[19],
	fracin[18], fracin[17], fracin[16], fracin[15], fracin[14], fracin[13], fracin[12],
	fracin[11], fracin[10], fracin[9], fracin[8], fracin[7], fracin[6], fracin[5],
	fracin[4], fracin[3], fracin[2], fracin[1], fracin[0]}), .out_del({out_del[35], out_del[34],
	out_del[33], out_del[32], out_del[31], out_del[30], out_del[29], out_del[28], out_del[27],
	out_del[26], out_del[25], out_del[24], out_del[23], out_del[22], out_del[21], out_del[20],
	out_del[19], out_del[18], out_del[17], out_del[16], out_del[15], out_del[14], out_del[13],
	out_del[12], out_del[11], out_del[10], out_del[9], out_del[8], out_del[7], out_del[6],
	out_del[5], out_del[4], out_del[3], out_del[2], out_del[1], out_del[0]}), .out_nondel({out_nondel[35],
	out_nondel[34], out_nondel[33], out_nondel[32], out_nondel[31], out_nondel[30], out_nondel[29], out_nondel[28],
	out_nondel[27], out_nondel[26], out_nondel[25], out_nondel[24], out_nondel[23], out_nondel[22], out_nondel[21],
	out_nondel[20], out_nondel[19], out_nondel[18], out_nondel[17], out_nondel[16], out_nondel[15], out_nondel[14],
	out_nondel[13], out_nondel[12], out_nondel[11], out_nondel[10], out_nondel[9], out_nondel[8], out_nondel[7],
	out_nondel[6], out_nondel[5], out_nondel[4], out_nondel[3], out_nondel[2], out_nondel[1], out_nondel[0]}),
	.tielow(tielow), .VDD(VDD), .VSS(VSS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_dsm_int_12b_del
// *
module PLLTS16FFCFRACF_dsm_int_12b_del (clk, in, out, rb, tielow,
	VDD, VSS);
inout rb;
inout [11:0] in;
inout [11:0] out;
inout VDD;
inout tielow;
inout clk;
inout VSS;
wire rb;
wire [11:0] in;
wire [11:0] out;
wire [11:0] int1;
wire VDD;
wire [11:0] outB;
wire tielow;
wire NET3;
wire clk;
wire VSS;
PLLTS16FFCFRACF_fulladd12b_cbp Xaddint1 ( .A({out[11], out[10], out[9], out[8],
	out[7], out[6], out[5], out[4], out[3], out[2], out[1],
	out[0]}), .B({in[11], in[10], in[9], in[8], in[7], in[6],
	in[5], in[4], in[3], in[2], in[1], in[0]}), .Ci(tielow),
	.Co(NET3), .S({int1[11], int1[10], int1[9], int1[8], int1[7], int1[6],
	int1[5], int1[4], int1[3], int1[2], int1[1], int1[0]}), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_ffbrbx1cstm Xint1_11_ ( .CLK(clk), .D(int1[11]), .Q(out[11]), .QB(outB[11]),
	.RB(rb), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xint1_10_ ( .CLK(clk), .D(int1[10]), .Q(out[10]), .QB(outB[10]),
	.RB(rb), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xint1_9_ ( .CLK(clk), .D(int1[9]), .Q(out[9]), .QB(outB[9]),
	.RB(rb), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xint1_8_ ( .CLK(clk), .D(int1[8]), .Q(out[8]), .QB(outB[8]),
	.RB(rb), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xint1_7_ ( .CLK(clk), .D(int1[7]), .Q(out[7]), .QB(outB[7]),
	.RB(rb), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xint1_6_ ( .CLK(clk), .D(int1[6]), .Q(out[6]), .QB(outB[6]),
	.RB(rb), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xint1_5_ ( .CLK(clk), .D(int1[5]), .Q(out[5]), .QB(outB[5]),
	.RB(rb), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xint1_4_ ( .CLK(clk), .D(int1[4]), .Q(out[4]), .QB(outB[4]),
	.RB(rb), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xint1_3_ ( .CLK(clk), .D(int1[3]), .Q(out[3]), .QB(outB[3]),
	.RB(rb), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xint1_2_ ( .CLK(clk), .D(int1[2]), .Q(out[2]), .QB(outB[2]),
	.RB(rb), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xint1_1_ ( .CLK(clk), .D(int1[1]), .Q(out[1]), .QB(outB[1]),
	.RB(rb), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xint1_0_ ( .CLK(clk), .D(int1[0]), .Q(out[0]), .QB(outB[0]),
	.RB(rb), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_dsm_int_28b_del
// *
module PLLTS16FFCFRACF_dsm_int_28b_del (clk, in, out, tielow, VDD,
	VSS);
inout [27:0] in;
inout [27:0] out;
inout VDD;
inout tielow;
inout clk;
inout VSS;
wire [27:0] in;
wire [27:0] out;
wire [27:0] int1;
wire VDD;
wire tielow;
wire NET3;
wire clk;
wire VSS;
PLLTS16FFCFRACF_fulladd28b_cbp Xaddint1 ( .A({out[27], out[26], out[25], out[24],
	out[23], out[22], out[21], out[20], out[19], out[18], out[17],
	out[16], out[15], out[14], out[13], out[12], out[11], out[10],
	out[9], out[8], out[7], out[6], out[5], out[4], out[3],
	out[2], out[1], out[0]}), .B({in[27], in[26], in[25], in[24],
	in[23], in[22], in[21], in[20], in[19], in[18], in[17],
	in[16], in[15], in[14], in[13], in[12], in[11], in[10],
	in[9], in[8], in[7], in[6], in[5], in[4], in[3],
	in[2], in[1], in[0]}), .Ci(tielow), .Co(NET3), .S({int1[27], int1[26],
	int1[25], int1[24], int1[23], int1[22], int1[21], int1[20], int1[19],
	int1[18], int1[17], int1[16], int1[15], int1[14], int1[13], int1[12],
	int1[11], int1[10], int1[9], int1[8], int1[7], int1[6], int1[5],
	int1[4], int1[3], int1[2], int1[1], int1[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_ffx1cstm Xint1_27_ ( .CLK(clk), .D(int1[27]), .Q(out[27]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_26_ ( .CLK(clk), .D(int1[26]), .Q(out[26]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_25_ ( .CLK(clk), .D(int1[25]), .Q(out[25]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_24_ ( .CLK(clk), .D(int1[24]), .Q(out[24]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_23_ ( .CLK(clk), .D(int1[23]), .Q(out[23]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_22_ ( .CLK(clk), .D(int1[22]), .Q(out[22]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_21_ ( .CLK(clk), .D(int1[21]), .Q(out[21]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_20_ ( .CLK(clk), .D(int1[20]), .Q(out[20]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_19_ ( .CLK(clk), .D(int1[19]), .Q(out[19]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_18_ ( .CLK(clk), .D(int1[18]), .Q(out[18]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_17_ ( .CLK(clk), .D(int1[17]), .Q(out[17]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_16_ ( .CLK(clk), .D(int1[16]), .Q(out[16]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_15_ ( .CLK(clk), .D(int1[15]), .Q(out[15]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_14_ ( .CLK(clk), .D(int1[14]), .Q(out[14]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_13_ ( .CLK(clk), .D(int1[13]), .Q(out[13]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_12_ ( .CLK(clk), .D(int1[12]), .Q(out[12]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_11_ ( .CLK(clk), .D(int1[11]), .Q(out[11]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_10_ ( .CLK(clk), .D(int1[10]), .Q(out[10]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_9_ ( .CLK(clk), .D(int1[9]), .Q(out[9]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_8_ ( .CLK(clk), .D(int1[8]), .Q(out[8]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_7_ ( .CLK(clk), .D(int1[7]), .Q(out[7]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_6_ ( .CLK(clk), .D(int1[6]), .Q(out[6]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_5_ ( .CLK(clk), .D(int1[5]), .Q(out[5]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_4_ ( .CLK(clk), .D(int1[4]), .Q(out[4]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_3_ ( .CLK(clk), .D(int1[3]), .Q(out[3]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_2_ ( .CLK(clk), .D(int1[2]), .Q(out[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_1_ ( .CLK(clk), .D(int1[1]), .Q(out[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_0_ ( .CLK(clk), .D(int1[0]), .Q(out[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_dsm_int_28b_del_lossy
// *
module PLLTS16FFCFRACF_dsm_int_28b_del_lossy (clk, in, lock, lockrt, out,
	VDD, VSS);
inout lock;
inout [27:0] in;
inout [27:0] out;
inout VDD;
inout clk;
inout VSS;
inout lockrt;
wire tiehigh;
wire lock;
wire [27:0] intr;
wire [27:0] in;
wire [27:0] out;
wire [27:0] int1;
wire VDD;
wire [27:10] outB;
wire tielow;
wire NET3;
wire [27:0] NET2;
wire [27:0] ints;
wire NET1;
wire clk;
wire VSS;
wire lockrt;
PLLTS16FFCFRACF_fulladd28b_cbp X1 ( .A({int1[27], int1[26], int1[25], int1[24],
	int1[23], int1[22], int1[21], int1[20], int1[19], int1[18], int1[17],
	int1[16], int1[15], int1[14], int1[13], int1[12], int1[11], int1[10],
	int1[9], int1[8], int1[7], int1[6], int1[5], int1[4], int1[3],
	int1[2], int1[1], int1[0]}), .B({outB[27], outB[27], outB[27], outB[27],
	outB[27], outB[27], outB[27], outB[27], outB[27], outB[27], outB[27],
	outB[26], outB[25], outB[24], outB[23], outB[22], outB[21], outB[20],
	outB[19], outB[18], outB[17], outB[16], outB[15], outB[14], outB[13],
	outB[12], outB[11], outB[10]}), .Ci(tiehigh), .Co(NET1), .S({ints[27], ints[26],
	ints[25], ints[24], ints[23], ints[22], ints[21], ints[20], ints[19],
	ints[18], ints[17], ints[16], ints[15], ints[14], ints[13], ints[12],
	ints[11], ints[10], ints[9], ints[8], ints[7], ints[6], ints[5],
	ints[4], ints[3], ints[2], ints[1], ints[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd28b_cbp X4 ( .A({out[27], out[26], out[25], out[24],
	out[23], out[22], out[21], out[20], out[19], out[18], out[17],
	out[16], out[15], out[14], out[13], out[12], out[11], out[10],
	out[9], out[8], out[7], out[6], out[5], out[4], out[3],
	out[2], out[1], out[0]}), .B({in[27], in[26], in[25], in[24],
	in[23], in[22], in[21], in[20], in[19], in[18], in[17],
	in[16], in[15], in[14], in[13], in[12], in[11], in[10],
	in[9], in[8], in[7], in[6], in[5], in[4], in[3],
	in[2], in[1], in[0]}), .Ci(tielow), .Co(NET3), .S({int1[27], int1[26],
	int1[25], int1[24], int1[23], int1[22], int1[21], int1[20], int1[19],
	int1[18], int1[17], int1[16], int1[15], int1[14], int1[13], int1[12],
	int1[11], int1[10], int1[9], int1[8], int1[7], int1[6], int1[5],
	int1[4], int1[3], int1[2], int1[1], int1[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_tielowx1cstm X2 ( .OUT(tielow), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tiehighx1cstm X3 ( .OUT(tiehigh), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X6 ( .CLK(clk), .D(lock), .Q(lockrt), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_27_ ( .CLK(clk), .D(intr[27]), .Q(out[27]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_26_ ( .CLK(clk), .D(intr[26]), .Q(out[26]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_25_ ( .CLK(clk), .D(intr[25]), .Q(out[25]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_24_ ( .CLK(clk), .D(intr[24]), .Q(out[24]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_23_ ( .CLK(clk), .D(intr[23]), .Q(out[23]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_22_ ( .CLK(clk), .D(intr[22]), .Q(out[22]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_21_ ( .CLK(clk), .D(intr[21]), .Q(out[21]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_20_ ( .CLK(clk), .D(intr[20]), .Q(out[20]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_19_ ( .CLK(clk), .D(intr[19]), .Q(out[19]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_18_ ( .CLK(clk), .D(intr[18]), .Q(out[18]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_17_ ( .CLK(clk), .D(intr[17]), .Q(out[17]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_16_ ( .CLK(clk), .D(intr[16]), .Q(out[16]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_15_ ( .CLK(clk), .D(intr[15]), .Q(out[15]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_14_ ( .CLK(clk), .D(intr[14]), .Q(out[14]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_13_ ( .CLK(clk), .D(intr[13]), .Q(out[13]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_12_ ( .CLK(clk), .D(intr[12]), .Q(out[12]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_11_ ( .CLK(clk), .D(intr[11]), .Q(out[11]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_10_ ( .CLK(clk), .D(intr[10]), .Q(out[10]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_9_ ( .CLK(clk), .D(intr[9]), .Q(out[9]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_8_ ( .CLK(clk), .D(intr[8]), .Q(out[8]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_7_ ( .CLK(clk), .D(intr[7]), .Q(out[7]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_6_ ( .CLK(clk), .D(intr[6]), .Q(out[6]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_5_ ( .CLK(clk), .D(intr[5]), .Q(out[5]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_4_ ( .CLK(clk), .D(intr[4]), .Q(out[4]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_3_ ( .CLK(clk), .D(intr[3]), .Q(out[3]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_2_ ( .CLK(clk), .D(intr[2]), .Q(out[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_1_ ( .CLK(clk), .D(intr[1]), .Q(out[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_0_ ( .CLK(clk), .D(intr[0]), .Q(out[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_27_ ( .IN(out[27]), .OUT(outB[27]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_26_ ( .IN(out[26]), .OUT(outB[26]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_25_ ( .IN(out[25]), .OUT(outB[25]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_24_ ( .IN(out[24]), .OUT(outB[24]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_23_ ( .IN(out[23]), .OUT(outB[23]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_22_ ( .IN(out[22]), .OUT(outB[22]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_21_ ( .IN(out[21]), .OUT(outB[21]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_20_ ( .IN(out[20]), .OUT(outB[20]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_19_ ( .IN(out[19]), .OUT(outB[19]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_18_ ( .IN(out[18]), .OUT(outB[18]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_17_ ( .IN(out[17]), .OUT(outB[17]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_16_ ( .IN(out[16]), .OUT(outB[16]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_15_ ( .IN(out[15]), .OUT(outB[15]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_14_ ( .IN(out[14]), .OUT(outB[14]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_13_ ( .IN(out[13]), .OUT(outB[13]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_12_ ( .IN(out[12]), .OUT(outB[12]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_11_ ( .IN(out[11]), .OUT(outB[11]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_10_ ( .IN(out[10]), .OUT(outB[10]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_27_ ( .IN(NET2[0]), .OUT(intr[27]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_26_ ( .IN(NET2[1]), .OUT(intr[26]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_25_ ( .IN(NET2[2]), .OUT(intr[25]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_24_ ( .IN(NET2[3]), .OUT(intr[24]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_23_ ( .IN(NET2[4]), .OUT(intr[23]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_22_ ( .IN(NET2[5]), .OUT(intr[22]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_21_ ( .IN(NET2[6]), .OUT(intr[21]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_20_ ( .IN(NET2[7]), .OUT(intr[20]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_19_ ( .IN(NET2[8]), .OUT(intr[19]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_18_ ( .IN(NET2[9]), .OUT(intr[18]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_17_ ( .IN(NET2[10]), .OUT(intr[17]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_16_ ( .IN(NET2[11]), .OUT(intr[16]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_15_ ( .IN(NET2[12]), .OUT(intr[15]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_14_ ( .IN(NET2[13]), .OUT(intr[14]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_13_ ( .IN(NET2[14]), .OUT(intr[13]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_12_ ( .IN(NET2[15]), .OUT(intr[12]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_11_ ( .IN(NET2[16]), .OUT(intr[11]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_10_ ( .IN(NET2[17]), .OUT(intr[10]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_9_ ( .IN(NET2[18]), .OUT(intr[9]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_8_ ( .IN(NET2[19]), .OUT(intr[8]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_7_ ( .IN(NET2[20]), .OUT(intr[7]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_6_ ( .IN(NET2[21]), .OUT(intr[6]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_5_ ( .IN(NET2[22]), .OUT(intr[5]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_4_ ( .IN(NET2[23]), .OUT(intr[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_3_ ( .IN(NET2[24]), .OUT(intr[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_2_ ( .IN(NET2[25]), .OUT(intr[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_1_ ( .IN(NET2[26]), .OUT(intr[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvrst_0_ ( .IN(NET2[27]), .OUT(intr[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_27_ ( .IN0(lockrt), .IN1(ints[27]), .OUT(NET2[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_26_ ( .IN0(lockrt), .IN1(ints[26]), .OUT(NET2[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_25_ ( .IN0(lockrt), .IN1(ints[25]), .OUT(NET2[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_24_ ( .IN0(lockrt), .IN1(ints[24]), .OUT(NET2[3]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_23_ ( .IN0(lockrt), .IN1(ints[23]), .OUT(NET2[4]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_22_ ( .IN0(lockrt), .IN1(ints[22]), .OUT(NET2[5]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_21_ ( .IN0(lockrt), .IN1(ints[21]), .OUT(NET2[6]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_20_ ( .IN0(lockrt), .IN1(ints[20]), .OUT(NET2[7]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_19_ ( .IN0(lockrt), .IN1(ints[19]), .OUT(NET2[8]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_18_ ( .IN0(lockrt), .IN1(ints[18]), .OUT(NET2[9]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_17_ ( .IN0(lockrt), .IN1(ints[17]), .OUT(NET2[10]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_16_ ( .IN0(lockrt), .IN1(ints[16]), .OUT(NET2[11]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_15_ ( .IN0(lockrt), .IN1(ints[15]), .OUT(NET2[12]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_14_ ( .IN0(lockrt), .IN1(ints[14]), .OUT(NET2[13]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_13_ ( .IN0(lockrt), .IN1(ints[13]), .OUT(NET2[14]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_12_ ( .IN0(lockrt), .IN1(ints[12]), .OUT(NET2[15]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_11_ ( .IN0(lockrt), .IN1(ints[11]), .OUT(NET2[16]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_10_ ( .IN0(lockrt), .IN1(ints[10]), .OUT(NET2[17]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_9_ ( .IN0(lockrt), .IN1(ints[9]), .OUT(NET2[18]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_8_ ( .IN0(lockrt), .IN1(ints[8]), .OUT(NET2[19]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_7_ ( .IN0(lockrt), .IN1(ints[7]), .OUT(NET2[20]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_6_ ( .IN0(lockrt), .IN1(ints[6]), .OUT(NET2[21]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_5_ ( .IN0(lockrt), .IN1(ints[5]), .OUT(NET2[22]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_4_ ( .IN0(lockrt), .IN1(ints[4]), .OUT(NET2[23]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_3_ ( .IN0(lockrt), .IN1(ints[3]), .OUT(NET2[24]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_2_ ( .IN0(lockrt), .IN1(ints[2]), .OUT(NET2[25]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_1_ ( .IN0(lockrt), .IN1(ints[1]), .OUT(NET2[26]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xndrst_0_ ( .IN0(lockrt), .IN1(ints[0]), .OUT(NET2[27]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_dsm_int_36b
// *
module PLLTS16FFCFRACF_dsm_int_36b (clk, in, out_del, out_nondel, tielow,
	VDD, VSS);
inout [35:0] in;
inout VDD;
inout [35:0] out_nondel;
inout [35:0] out_del;
inout tielow;
inout clk;
inout VSS;
wire [35:0] in;
wire VDD;
wire [35:0] out_nondel;
wire [35:0] out_del;
wire tielow;
wire NET3;
wire clk;
wire VSS;
PLLTS16FFCFRACF_fulladd36b_cbp Xaddint1 ( .A({out_del[35], out_del[34], out_del[33], out_del[32],
	out_del[31], out_del[30], out_del[29], out_del[28], out_del[27], out_del[26], out_del[25],
	out_del[24], out_del[23], out_del[22], out_del[21], out_del[20], out_del[19], out_del[18],
	out_del[17], out_del[16], out_del[15], out_del[14], out_del[13], out_del[12], out_del[11],
	out_del[10], out_del[9], out_del[8], out_del[7], out_del[6], out_del[5], out_del[4],
	out_del[3], out_del[2], out_del[1], out_del[0]}), .B({in[35], in[34], in[33],
	in[32], in[31], in[30], in[29], in[28], in[27], in[26],
	in[25], in[24], in[23], in[22], in[21], in[20], in[19],
	in[18], in[17], in[16], in[15], in[14], in[13], in[12],
	in[11], in[10], in[9], in[8], in[7], in[6], in[5],
	in[4], in[3], in[2], in[1], in[0]}), .Ci(tielow), .Co(NET3),
	.S({out_nondel[35], out_nondel[34], out_nondel[33], out_nondel[32], out_nondel[31], out_nondel[30], out_nondel[29],
	out_nondel[28], out_nondel[27], out_nondel[26], out_nondel[25], out_nondel[24], out_nondel[23], out_nondel[22],
	out_nondel[21], out_nondel[20], out_nondel[19], out_nondel[18], out_nondel[17], out_nondel[16], out_nondel[15],
	out_nondel[14], out_nondel[13], out_nondel[12], out_nondel[11], out_nondel[10], out_nondel[9], out_nondel[8],
	out_nondel[7], out_nondel[6], out_nondel[5], out_nondel[4], out_nondel[3], out_nondel[2], out_nondel[1],
	out_nondel[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_ffx1cstm Xint1_35_ ( .CLK(clk), .D(out_nondel[35]), .Q(out_del[35]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_34_ ( .CLK(clk), .D(out_nondel[34]), .Q(out_del[34]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_33_ ( .CLK(clk), .D(out_nondel[33]), .Q(out_del[33]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_32_ ( .CLK(clk), .D(out_nondel[32]), .Q(out_del[32]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_31_ ( .CLK(clk), .D(out_nondel[31]), .Q(out_del[31]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_30_ ( .CLK(clk), .D(out_nondel[30]), .Q(out_del[30]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_29_ ( .CLK(clk), .D(out_nondel[29]), .Q(out_del[29]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_28_ ( .CLK(clk), .D(out_nondel[28]), .Q(out_del[28]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_27_ ( .CLK(clk), .D(out_nondel[27]), .Q(out_del[27]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_26_ ( .CLK(clk), .D(out_nondel[26]), .Q(out_del[26]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_25_ ( .CLK(clk), .D(out_nondel[25]), .Q(out_del[25]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_24_ ( .CLK(clk), .D(out_nondel[24]), .Q(out_del[24]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_23_ ( .CLK(clk), .D(out_nondel[23]), .Q(out_del[23]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_22_ ( .CLK(clk), .D(out_nondel[22]), .Q(out_del[22]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_21_ ( .CLK(clk), .D(out_nondel[21]), .Q(out_del[21]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_20_ ( .CLK(clk), .D(out_nondel[20]), .Q(out_del[20]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_19_ ( .CLK(clk), .D(out_nondel[19]), .Q(out_del[19]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_18_ ( .CLK(clk), .D(out_nondel[18]), .Q(out_del[18]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_17_ ( .CLK(clk), .D(out_nondel[17]), .Q(out_del[17]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_16_ ( .CLK(clk), .D(out_nondel[16]), .Q(out_del[16]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_15_ ( .CLK(clk), .D(out_nondel[15]), .Q(out_del[15]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_14_ ( .CLK(clk), .D(out_nondel[14]), .Q(out_del[14]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_13_ ( .CLK(clk), .D(out_nondel[13]), .Q(out_del[13]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_12_ ( .CLK(clk), .D(out_nondel[12]), .Q(out_del[12]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_11_ ( .CLK(clk), .D(out_nondel[11]), .Q(out_del[11]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_10_ ( .CLK(clk), .D(out_nondel[10]), .Q(out_del[10]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_9_ ( .CLK(clk), .D(out_nondel[9]), .Q(out_del[9]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_8_ ( .CLK(clk), .D(out_nondel[8]), .Q(out_del[8]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_7_ ( .CLK(clk), .D(out_nondel[7]), .Q(out_del[7]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_6_ ( .CLK(clk), .D(out_nondel[6]), .Q(out_del[6]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_5_ ( .CLK(clk), .D(out_nondel[5]), .Q(out_del[5]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_4_ ( .CLK(clk), .D(out_nondel[4]), .Q(out_del[4]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_3_ ( .CLK(clk), .D(out_nondel[3]), .Q(out_del[3]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_2_ ( .CLK(clk), .D(out_nondel[2]), .Q(out_del[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_1_ ( .CLK(clk), .D(out_nondel[1]), .Q(out_del[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xint1_0_ ( .CLK(clk), .D(out_nondel[0]), .Q(out_del[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_dsm_requant_opt
// *
module PLLTS16FFCFRACF_dsm_requant_opt (clk, dither, in, outs, VDD,
	VSS);
inout [27:0] in;
inout [6:0] outs;
inout VDD;
inout [3:0] dither;
inout clk;
inout VSS;
wire tiehigh;
wire [27:0] in;
wire [6:0] outs;
wire VDD;
wire [27:0] integout;
wire [3:0] dither;
wire tielow;
wire NET3;
wire [7:0] error1;
wire [4:0] outsbdp;
wire [7:0] fbB;
wire NET1;
wire clk;
wire VSS;
PLLTS16FFCFRACF_dsm_int_28b_del X4 ( .clk(clk), .in({error1[7], error1[6], error1[5],
	error1[4], error1[3], error1[2], error1[1], error1[0], in[19], in[18],
	in[17], in[16], in[15], in[14], in[13], in[12], in[11],
	in[10], in[9], in[8], in[7], in[6], in[5], in[4],
	in[3], in[2], in[1], in[0]}), .out({integout[27], integout[26], integout[25],
	integout[24], integout[23], integout[22], integout[21], integout[20], integout[19], integout[18],
	integout[17], integout[16], integout[15], integout[14], integout[13], integout[12], integout[11],
	integout[10], integout[9], integout[8], integout[7], integout[6], integout[5], integout[4],
	integout[3], integout[2], integout[1], integout[0]}), .tielow(tielow), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd12b_cbp X3 ( .A({integout[27], integout[26], integout[25], integout[24],
	integout[23], integout[22], integout[21], integout[20], integout[19], integout[18], integout[17],
	integout[16]}), .B({tielow, tielow, tielow, tielow, tielow, tielow,
	tielow, dither[3], dither[2], dither[1], dither[0], tielow}), .Ci(tielow),
	.Co(NET1), .S({outs[6], outs[5], outs[4], outs[3], outs[2], outs[1],
	outs[0], outsbdp[4], outsbdp[3], outsbdp[2], outsbdp[1], outsbdp[0]}), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_fulladd8b_cbp X10 ( .A({in[27], in[26], in[25], in[24],
	in[23], in[22], in[21], in[20]}), .B({fbB[7], fbB[6], fbB[5],
	fbB[4], fbB[3], fbB[2], fbB[1], fbB[0]}), .Ci(tiehigh), .Co(NET3),
	.S({error1[7], error1[6], error1[5], error1[4], error1[3], error1[2], error1[1],
	error1[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_tiehighx1cstm X1 ( .OUT(tiehigh), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tielowx1cstm X2 ( .OUT(tielow), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_7_ ( .IN(outs[6]), .OUT(fbB[7]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_6_ ( .IN(outs[5]), .OUT(fbB[6]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_5_ ( .IN(outs[4]), .OUT(fbB[5]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_4_ ( .IN(outs[3]), .OUT(fbB[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_3_ ( .IN(outs[2]), .OUT(fbB[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_2_ ( .IN(outs[1]), .OUT(fbB[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_1_ ( .IN(outs[0]), .OUT(fbB[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_0_ ( .IN(tielow), .OUT(fbB[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_dsm_requant_opt_12b_5b
// *
module PLLTS16FFCFRACF_dsm_requant_opt_12b_5b (clk, in, out, rb, VDD,
	VSS);
inout rb;
inout [11:0] in;
inout [4:0] out;
inout VDD;
inout clk;
inout VSS;
wire tiehigh;
wire rb;
wire [6:0] outnc;
wire [11:0] in;
wire [4:0] out;
wire VDD;
wire tielow;
wire NET3;
wire [7:0] error1;
wire [7:0] fbB;
wire clk;
wire VSS;
PLLTS16FFCFRACF_tiehighx1cstm X1 ( .OUT(tiehigh), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tielowx1cstm X2 ( .OUT(tielow), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_dsm_int_12b_del X4 ( .clk(clk), .in({error1[7], error1[6], error1[5],
	error1[4], error1[3], error1[2], error1[1], error1[0], in[3], in[2],
	in[1], in[0]}), .out({out[4], out[3], out[2], out[1], out[0],
	outnc[6], outnc[5], outnc[4], outnc[3], outnc[2], outnc[1], outnc[0]}),
	.rb(rb), .tielow(tielow), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd8b_cbp X10 ( .A({in[11], in[10], in[9], in[8],
	in[7], in[6], in[5], in[4]}), .B({fbB[7], fbB[6], fbB[5],
	fbB[4], fbB[3], fbB[2], fbB[1], fbB[0]}), .Ci(tiehigh), .Co(NET3),
	.S({error1[7], error1[6], error1[5], error1[4], error1[3], error1[2], error1[1],
	error1[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_invx1cstm Xinvfb_7_ ( .IN(out[4]), .OUT(fbB[7]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_6_ ( .IN(out[3]), .OUT(fbB[6]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_5_ ( .IN(out[2]), .OUT(fbB[5]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_4_ ( .IN(out[1]), .OUT(fbB[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_3_ ( .IN(out[0]), .OUT(fbB[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_2_ ( .IN(tielow), .OUT(fbB[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_1_ ( .IN(tielow), .OUT(fbB[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvfb_0_ ( .IN(tielow), .OUT(fbB[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_dsp_top
// *
module PLLTS16FFCFRACF_dsp_top (clk, CLKSSCG, DSMEN, errorneg, errorpos,
	fbdiv, fracin, intin, lock_int, VDD, VSS);
inout [11:0] fbdiv;
inout [11:0] intin;
inout VDD;
inout [4:0] errorpos;
inout CLKSSCG;
inout [4:0] errorneg;
inout DSMEN;
inout [23:0] fracin;
inout lock_int;
inout clk;
inout VSS;
wire [11:0] fbdiv;
wire [3:0] dither1;
wire dsm_muxsel;
wire [11:0] intin;
wire VDD;
wire [11:0] intout;
wire [27:0] errorint;
wire [11:0] interror;
wire [4:0] errorpos;
wire [6:0] errors;
wire [4:0] errorneg;
wire CLKSSCG;
wire [3:0] dither0;
wire DSMEN;
wire [23:0] fracin;
wire lock_int;
wire clk;
wire VSS;
wire lockrt;
PLLTS16FFCFRACF_mux2x1cstm X1_11_ ( .IN0(intout[11]), .IN1(intin[11]), .OUT(fbdiv[11]), .SEL(dsm_muxsel),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm X1_10_ ( .IN0(intout[10]), .IN1(intin[10]), .OUT(fbdiv[10]), .SEL(dsm_muxsel),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm X1_9_ ( .IN0(intout[9]), .IN1(intin[9]), .OUT(fbdiv[9]), .SEL(dsm_muxsel),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm X1_8_ ( .IN0(intout[8]), .IN1(intin[8]), .OUT(fbdiv[8]), .SEL(dsm_muxsel),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm X1_7_ ( .IN0(intout[7]), .IN1(intin[7]), .OUT(fbdiv[7]), .SEL(dsm_muxsel),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm X1_6_ ( .IN0(intout[6]), .IN1(intin[6]), .OUT(fbdiv[6]), .SEL(dsm_muxsel),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm X1_5_ ( .IN0(intout[5]), .IN1(intin[5]), .OUT(fbdiv[5]), .SEL(dsm_muxsel),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm X1_4_ ( .IN0(intout[4]), .IN1(intin[4]), .OUT(fbdiv[4]), .SEL(dsm_muxsel),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm X1_3_ ( .IN0(intout[3]), .IN1(intin[3]), .OUT(fbdiv[3]), .SEL(dsm_muxsel),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm X1_2_ ( .IN0(intout[2]), .IN1(intin[2]), .OUT(fbdiv[2]), .SEL(dsm_muxsel),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm X1_1_ ( .IN0(intout[1]), .IN1(intin[1]), .OUT(fbdiv[1]), .SEL(dsm_muxsel),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm X1_0_ ( .IN0(intout[0]), .IN1(intin[0]), .OUT(fbdiv[0]), .SEL(dsm_muxsel),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_dither_top Xdither_top ( .clk(clk), .dither0({dither0[3], dither0[2], dither0[1],
	dither0[0]}), .dither1({dither1[3], dither1[2], dither1[1], dither1[0]}), .lock(lockrt), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_dsm_36b_eout_opt Xdsm_div ( .clk(clk), .dither({dither1[3], dither1[2], dither1[1],
	dither1[0]}), .fracin({fracin[23], fracin[22], fracin[21], fracin[20], fracin[19], fracin[18],
	fracin[17], fracin[16], fracin[15], fracin[14], fracin[13], fracin[12], fracin[11],
	fracin[10], fracin[9], fracin[8], fracin[7], fracin[6], fracin[5], fracin[4],
	fracin[3], fracin[2], fracin[1], fracin[0]}), .interror({interror[11], interror[10], interror[9],
	interror[8], interror[7], interror[6], interror[5], interror[4], interror[3], interror[2],
	interror[1], interror[0]}), .intin({intin[11], intin[10], intin[9], intin[8], intin[7],
	intin[6], intin[5], intin[4], intin[3], intin[2], intin[1], intin[0]}),
	.intout({intout[11], intout[10], intout[9], intout[8], intout[7], intout[6], intout[5],
	intout[4], intout[3], intout[2], intout[1], intout[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_dsm_requant_opt Xdsm_rq ( .clk(clk), .dither({dither0[3], dither0[2], dither0[1],
	dither0[0]}), .in({errorint[27], errorint[26], errorint[25], errorint[24], errorint[23], errorint[22],
	errorint[21], errorint[20], errorint[19], errorint[18], errorint[17], errorint[16], errorint[15],
	errorint[14], errorint[13], errorint[12], errorint[11], errorint[10], errorint[9], errorint[8],
	errorint[7], errorint[6], errorint[5], errorint[4], errorint[3], errorint[2], errorint[1],
	errorint[0]}), .outs({errors[6], errors[5], errors[4], errors[3], errors[2], errors[1],
	errors[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_dsm_int_28b_del_lossy Xint ( .clk(clk), .in({interror[3], interror[2], interror[1],
	interror[0], fracin[23], fracin[22], fracin[21], fracin[20], fracin[19], fracin[18],
	fracin[17], fracin[16], fracin[15], fracin[14], fracin[13], fracin[12], fracin[11],
	fracin[10], fracin[9], fracin[8], fracin[7], fracin[6], fracin[5], fracin[4],
	fracin[3], fracin[2], fracin[1], fracin[0]}), .lock(lock_int), .lockrt(lockrt), .out({errorint[27],
	errorint[26], errorint[25], errorint[24], errorint[23], errorint[22], errorint[21], errorint[20],
	errorint[19], errorint[18], errorint[17], errorint[16], errorint[15], errorint[14], errorint[13],
	errorint[12], errorint[11], errorint[10], errorint[9], errorint[8], errorint[7], errorint[6],
	errorint[5], errorint[4], errorint[3], errorint[2], errorint[1], errorint[0]}), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_sign_split Xsign ( .in({errors[5], errors[4], errors[3], errors[2],
	errors[1], errors[0]}), .outneg({errorneg[4], errorneg[3], errorneg[2], errorneg[1], errorneg[0]}),
	.outpos({errorpos[4], errorpos[3], errorpos[2], errorpos[1], errorpos[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_nand2x1cstm X3 ( .IN0(lock_int), .IN1(DSMEN), .OUT(dsm_muxsel), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_bufx4cstm X5 ( .IN(clk), .OUT(CLKSSCG), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_ffbrbqix2cstm
// *
module PLLTS16FFCFRACF_ffbrbqix2cstm (VPOS, SUB, RB, CLK, QIB, Q, D, QB, VNEG);
	input 	VPOS;
	input 	SUB;
	input 	RB;
	input 	CLK;
	output 	QIB;
	output 	Q;
	input 	D;
	output 	QB;
	input 	VNEG;
    PLLTS16FFCFRACF_ffqbibrbx1cstm Xffqbibrbx1cstm (
	.CLK(CLK), .D(D), .RB(RB), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.Q(Q), .QB(QB), .QIB(QIB)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_ffbrbx1cstm
// *
module PLLTS16FFCFRACF_ffbrbx1cstm (CLK, D, Q, QB, RB,
    SUB, VNEG, VPOS);
input VPOS;
input VNEG;
input SUB;
input D;
input CLK;
input RB;
output QB;
output Q;
`ifdef SICR_SV_ENABLE
    
    
    int init_seed = 1;
    process h_main;
`endif
specify
    `ifdef MY_TIMING_CHECKS
        $setup(D, posedge CLK, 2*5 * 1e-12 / 1.0e-12);
        $hold(posedge CLK, D, 1*5 * 1e-12 / 1.0e-12);
        $setup(posedge RB, posedge CLK, 3*5 * 1e-12 / 1.0e-12);
    `endif
    specparam
    tplh0 = 5*5 * 1e-12 / 1.0e-12,
        tphl0 = 5*5 * 1e-12 / 1.0e-12,
        tplh1 = 6*5 * 1e-12 / 1.0e-12,
        tphl1 = 6*5 * 1e-12 / 1.0e-12,
        tplh3 = 1*5 * 1e-12 / 1.0e-12,
        tphl3 = 1*5 * 1e-12 / 1.0e-12,
        tplh4 = 2*5 * 1e-12 / 1.0e-12,
        tphl4 = 2*5 * 1e-12 / 1.0e-12;
        (CLK => QB) = (tplh0,tphl0);
        (CLK => Q) = (tplh1,tphl1);
        (RB => QB) = (tplh3,tphl3);
        (RB => Q) = (tplh4,tphl4);
endspecify
reg q_int;
initial begin
    `ifdef SICR_SV_ENABLE
        
        
        q_int = $urandom(init_seed);
    `else
        q_int = 1'b0;
    `endif
    wait(~VNEG && ~SUB && VPOS);
    if (~RB && ~VNEG && VPOS)
        q_int = 1'b0;
    forever @(posedge CLK or negedge RB or VNEG or VPOS or SUB) begin
        if (RB && ~VNEG && ~SUB && VPOS)
            q_int <= (D === 1'b1) ? 1'b1 : 1'b0;
        else if (~RB && ~VNEG && ~SUB && VPOS)
            q_int <= 1'b0;
        else if (VNEG || SUB || ~VPOS) begin
            wait(~VNEG && ~SUB && VPOS);
            `ifdef SICR_SV_ENABLE
                if (~RB)
                    q_int = 1'b0;
                else
                    q_int = $urandom();
            `else
                q_int = 1'b0;
            `endif
        end
    end
end
assign Q = (VNEG || SUB || ~VPOS) ? 1'bx : q_int;
assign QB = (VNEG || SUB || ~VPOS) ? 1'bx : ~q_int;
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_ffbrbx1cstm_v2
// *
module PLLTS16FFCFRACF_ffbrbx1cstm_v2 (VPOS, SUB, CLK, RB, Q, D, QB, VNEG);
	input 	VPOS;
	input 	SUB;
	input 	CLK;
	input 	RB;
	output 	Q;
	input 	D;
	output 	QB;
	input 	VNEG;
    PLLTS16FFCFRACF_ffbrbx1cstm Xffbrbx1cstm (
	.CLK(CLK), .D(D), .RB(RB), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.Q(Q), .QB(QB)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_ffbrbx2cstm
// *
module PLLTS16FFCFRACF_ffbrbx2cstm (VPOS, SUB, CLK, RB, Q, D, QB, VNEG);
	input 	VPOS;
	input 	SUB;
	input 	CLK;
	input 	RB;
	output 	Q;
	input 	D;
	output 	QB;
	input 	VNEG;
    PLLTS16FFCFRACF_ffbrbx1cstm Xffbrbx1cstm (
	.CLK(CLK), .D(D), .RB(RB), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.Q(Q), .QB(QB)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_ffbrx1cstm
// *
module PLLTS16FFCFRACF_ffbrx1cstm (CLK, D, Q, QB, RST,
    SUB, VNEG, VPOS);
input VPOS;
input VNEG;
input SUB;
input D;
input CLK;
input RST;
output QB;
output Q;
wire RB;
assign RB = ~RST; 
PLLTS16FFCFRACF_ffbrbx1cstm Xffbrbx1cstm (.CLK(CLK), .D(D), .Q(Q), .QB(QB), .RB(RB),
    .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_ffqbibrbx1cstm
// *
module PLLTS16FFCFRACF_ffqbibrbx1cstm (CLK, D, Q, QB, QIB, RB, SUB, VNEG, VPOS);

input VPOS;
input SUB;
input VNEG;

output Q;
output QB;
output QIB;

input RB;
input D;
input CLK;
`ifdef SICR_SV_ENABLE
    
    
    int init_seed = 1;
    process h_main;
`endif
specify
    `ifdef MY_TIMING_CHECKS
        $setup(D, posedge CLK, 2*5 * 1e-12 / 1.0e-12);
        $hold(posedge CLK, D, 1*5 * 1e-12 / 1.0e-12);
    `endif
    specparam
    tplh0 = 1*5 * 1e-12 / 1.0e-12,
        tphl0 = 1*5 * 1e-12 / 1.0e-12,
        tplh1 = 2*5 * 1e-12 / 1.0e-12,
        tphl1 = 2*5 * 1e-12 / 1.0e-12,
        tplh2 = 3*5 * 1e-12 / 1.0e-12,
        tphl2 = 3*5 * 1e-12 / 1.0e-12;
    (CLK => QIB) = (tplh0,tphl0);
    (CLK => QB) = (tplh1,tphl1);
    (CLK => Q) = (tplh2,tphl2);
    (RB => QIB) = (tplh0,tphl0);
    (RB => QB) = (tplh0,tphl0);
    (RB => Q) = (tplh1,tphl1);
endspecify
reg q_out;
reg q_midb;
initial begin
    `ifdef SICR_SV_ENABLE
    
    
        q_midb = $urandom(init_seed);
        q_out = $urandom(init_seed);
    `else
        q_midb = 1'b0;
        q_out = 1'b0;
    `endif
    wait(~VNEG && ~SUB && VPOS);
    if (~RB && ~VNEG && VPOS) begin
        q_midb = 1'b1;
        q_out = 1'b0;
    end
    forever @(CLK or D or RB or VNEG or SUB or VPOS) begin
        if (RB && ~CLK && ~VNEG && ~SUB && VPOS)
            q_midb = (D === 1'b1) ? 1'b0 : 1'b1;
        else if (RB && CLK && ~VNEG && ~SUB && VPOS)
            q_out = (q_midb === 1'b1) ? 1'b0 : 1'b1;
        else if (~RB && ~VNEG && ~SUB && VPOS) begin
            q_midb = 1'b1;
            q_out = 1'b0;
        end
        else if (VNEG || SUB || ~VPOS) begin
            wait(~VNEG && ~SUB && VPOS);
                if (~RB) begin
                    q_midb = 1'b1;
                    q_out = 1'b0;
                end
            `ifdef SICR_SV_ENABLE
                else begin
                    q_midb = $urandom();
                    q_out = $urandom();
                end
            `else
                else begin
                    q_midb = 1'b0;
                    q_out = 1'b0;
                end
            `endif
        end
    end
end

assign  QIB = (VNEG || SUB || ~VPOS) ? 1'bx : q_midb;
assign  QB = (VNEG || SUB || ~VPOS) ? 1'bx : ~q_out;
assign  Q = (VNEG || SUB || ~VPOS) ? 1'bx : q_out;
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_ffx1cstm
// *
module PLLTS16FFCFRACF_ffx1cstm (CLK, D, Q, SUB, VNEG, VPOS);

input VPOS;
input VNEG;
input SUB;

output Q;

input D;
input CLK;
reg q_int;
`ifdef SICR_SV_ENABLE
    
    
    int init_seed = 1;
    process h_main;
`endif
specify
    `ifdef MY_TIMING_CHECKS
        $setup(D, posedge CLK, 2*5 * 1e-12 / 1.0e-12);
        $hold(posedge CLK, D, 1*5 * 1e-12 / 1.0e-12);
    `endif
    specparam
    tplh0 = 5*5 * 1e-12 / 1.0e-12,
        tphl0 = 5*5 * 1e-12 / 1.0e-12;
    (CLK => Q) = (tplh0,tphl0);
endspecify
initial begin
    `ifdef SICR_SV_ENABLE
        
        
        q_int = $urandom(init_seed);
    `else
        q_int = 1'b0;
    `endif
    wait(~VNEG && ~SUB && VPOS) ;
    forever @(posedge CLK or VNEG or VPOS or SUB) begin
        if (~VNEG && VPOS && ~SUB)
            q_int <= (D === 1'b1) ? 1'b1 : 1'b0;
        else if (VNEG || ~VPOS || SUB) begin
           wait(~VNEG && ~SUB && VPOS) ;
            `ifdef SICR_SV_ENABLE
                q_int <= $urandom();
            `else
                q_int <= 1'b0;
            `endif
        end
    end
end
assign Q = (VNEG || SUB || ~VPOS) ? 1'bx : q_int;
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_ffx1cstm_v2
// *
module PLLTS16FFCFRACF_ffx1cstm_v2 (CLK, D, Q, SUB, VNEG,
	VPOS);
inout VPOS;
inout SUB;
inout D;
inout Q;
inout VNEG;
inout CLK;
wire VPOS;
wire SUB;
wire QBI;
wire D;
wire Q;
wire VNEG;
wire CLK;
wire CLKB;
PLLTS16FFCFRACF_invx1cstm X3 ( .IN(CLK), .OUT(CLKB), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
PLLTS16FFCFRACF_latchx1cstmb_v2 X1 ( .CLK(CLKB), .CLKB(CLK), .D(D), .QB(QBI),
	.SUB(SUB), .VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_latchx1cstmb_v2 X2 ( .CLK(CLK), .CLKB(CLKB), .D(QBI), .QB(Q),
	.SUB(SUB), .VNEG(VNEG), .VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_ffx2cstm
// *
module PLLTS16FFCFRACF_ffx2cstm (CLK, D, Q, SUB, VNEG,
	VPOS);
inout VPOS;
inout SUB;
inout D;
inout Q;
inout VNEG;
inout CLK;
wire VPOS;
wire SUB;
wire QBI;
wire D;
wire Q;
wire VNEG;
wire CLK;
wire CLKB;
PLLTS16FFCFRACF_invx2cstm X3 ( .IN(CLK), .OUT(CLKB), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
PLLTS16FFCFRACF_latchx2cstmb Xmaster ( .CLK(CLKB), .CLKB(CLK), .D(D), .QB(QBI),
	.SUB(SUB), .VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_latchx2cstmb Xslave ( .CLK(CLK), .CLKB(CLKB), .D(QBI), .QB(Q),
	.SUB(SUB), .VNEG(VNEG), .VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_frefmon
// *
module PLLTS16FFCFRACF_frefmon (en, report_en, clkref, valid);
input clkref;
input en;
input report_en;
output valid;
reg is_valid;
parameter settling_threshold_pct = 35;
parameter avg_samples_nr = 7; 
parameter fchange_counter_value = 5;
parameter timescale_val = 1e-12;

real t_rise_current, t_rise_previous, period_instant;

real freq_instant_mhz, freq_mean, previous_freq_mean, freq_mean_change_value;
real fout;
real freq_instant_array [avg_samples_nr-1 : 0]; 
real avg_samples_sum;
reg  array_full;
integer freq_instant_counter;
reg freq_ready;
assign valid = is_valid;

integer freq_up_counter;
integer freq_down_counter;
reg freq_change;
always begin

	if(avg_samples_nr < fchange_counter_value) begin
		$display("%m: [FATAL ERROR] fchange_counter_vaulue can't be bigger then avg_samples_nr");
		$finish;
	end
	freq_ready = 0;
	is_valid = 0;
	t_rise_current = 0;
	t_rise_previous = 0;
	period_instant = 0;
	freq_instant_mhz = 0;
	freq_mean = 0;
    avg_samples_sum = 0;
	array_full = 0;
	for (freq_instant_counter = 0; freq_instant_counter < avg_samples_nr; freq_instant_counter = freq_instant_counter + 1) begin
		freq_instant_array[freq_instant_counter] = 0.0;		
	end
	freq_instant_counter = 0;
	fout = 0;
	freq_up_counter = 0;
	freq_down_counter = 0;
	freq_change = 0;
	wait(en);
fork: frefmon_fork



	forever @(posedge clkref) begin
		t_rise_current = $realtime;
		if (t_rise_previous > 0) begin
			period_instant = (t_rise_current - t_rise_previous)*timescale_val; 
			freq_instant_mhz = 1/(period_instant*(1e6)); 
			avg_samples_sum = avg_samples_sum + freq_instant_mhz;
			avg_samples_sum = avg_samples_sum - freq_instant_array[freq_instant_counter];
			freq_instant_array[freq_instant_counter] = freq_instant_mhz;	
			freq_instant_counter = freq_instant_counter + 1;
			if(freq_instant_counter == avg_samples_nr) begin
			     freq_instant_counter = 0;
			     array_full = 1'b1;
			end
			previous_freq_mean = freq_mean;
			freq_mean = avg_samples_sum/avg_samples_nr; 	
			freq_mean_change_value = freq_mean - previous_freq_mean;

			if (freq_mean_change_value ==  0) begin
				freq_up_counter = 0;
				freq_down_counter = 0;
			end
			else begin
				if(freq_mean_change_value > 0) begin
					freq_down_counter = 0;
					freq_up_counter = freq_up_counter + 1;
				end
				if(freq_mean_change_value < 0) begin
					freq_up_counter = 0;
					freq_down_counter = freq_down_counter + 1;
				end
			end
			if( (freq_up_counter == fchange_counter_value ) || (freq_down_counter == fchange_counter_value))begin 
				freq_change = 1;
				freq_ready = 0;
			end

			if(freq_mean_change_value < 0) begin
				freq_mean_change_value	= freq_mean_change_value*(-1);
			end	
			if( (freq_change == 1) && (freq_mean_change_value <= freq_mean*settling_threshold_pct*1e-2) && (array_full == 1) ) begin
				freq_change = 0;
				freq_ready = 1;
			end
		end	
		t_rise_previous = t_rise_current;
	end
	wait(!en) disable frefmon_fork;
join
end



always @(freq_ready) begin 
	if(freq_ready == 1) begin		 
		if(freq_mean > 0)begin
			fout = freq_mean;
			is_valid = 1;
		end
		else begin
			is_valid = 0;
			if(report_en == 1) begin
				$display("%m [ERROR] Negative frequency mean value: %f", freq_mean);
			end
		end
	end
	else begin 				
		is_valid = 0;
	end
end
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_fulladd12b_cbp
// *
module PLLTS16FFCFRACF_fulladd12b_cbp (A, B, Ci, Co, S,
	VDD, VSS);
inout Co;
inout [11:0] S;
inout Ci;
inout VDD;
inout [11:0] B;
inout [11:0] A;
inout VSS;
wire [11:0] S;
wire Co;
wire Ci;
wire VDD;
wire [11:0] B;
wire [1:0] C;
wire [11:0] A;
wire VSS;
PLLTS16FFCFRACF_fulladd4b_cbp X1 ( .A({A[3], A[2], A[1], A[0]}),
	.B({B[3], B[2], B[1], B[0]}), .Ci(Ci), .Co(C[0]), .S({S[3],
	S[2], S[1], S[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd4b_cbp X2 ( .A({A[7], A[6], A[5], A[4]}),
	.B({B[7], B[6], B[5], B[4]}), .Ci(C[0]), .Co(C[1]), .S({S[7],
	S[6], S[5], S[4]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd4b_cbp X3 ( .A({A[11], A[10], A[9], A[8]}),
	.B({B[11], B[10], B[9], B[8]}), .Ci(C[1]), .Co(Co), .S({S[11],
	S[10], S[9], S[8]}), .VDD(VDD), .VSS(VSS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_fulladd16b_cbp
// *
module PLLTS16FFCFRACF_fulladd16b_cbp (A, B, Ci, Co, S,
	VDD, VSS);
inout Co;
inout [15:0] S;
inout Ci;
inout VDD;
inout [15:0] B;
inout [15:0] A;
inout VSS;
wire [15:0] S;
wire Co;
wire Ci;
wire VDD;
wire [15:0] B;
wire [2:0] C;
wire [15:0] A;
wire VSS;
PLLTS16FFCFRACF_fulladd4b_cbp X1 ( .A({A[3], A[2], A[1], A[0]}),
	.B({B[3], B[2], B[1], B[0]}), .Ci(Ci), .Co(C[0]), .S({S[3],
	S[2], S[1], S[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd4b_cbp X2 ( .A({A[7], A[6], A[5], A[4]}),
	.B({B[7], B[6], B[5], B[4]}), .Ci(C[0]), .Co(C[1]), .S({S[7],
	S[6], S[5], S[4]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd4b_cbp X3 ( .A({A[11], A[10], A[9], A[8]}),
	.B({B[11], B[10], B[9], B[8]}), .Ci(C[1]), .Co(C[2]), .S({S[11],
	S[10], S[9], S[8]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd4b_cbp X4 ( .A({A[15], A[14], A[13], A[12]}),
	.B({B[15], B[14], B[13], B[12]}), .Ci(C[2]), .Co(Co), .S({S[15],
	S[14], S[13], S[12]}), .VDD(VDD), .VSS(VSS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_fulladd1b
// *
module PLLTS16FFCFRACF_fulladd1b (A, B, Ci, Co, P,
	S, VDD, VSS);
inout Co;
inout S;
inout Ci;
inout VDD;
inout B;
inout A;
inout P;
inout VSS;
wire Co;
wire S;
wire Ci;
wire VDD;
wire B;
wire NET2;
wire A;
wire P;
wire VSS;
wire generateB;
PLLTS16FFCFRACF_nand2x1cstm X1 ( .IN0(B), .IN1(A), .OUT(generateB), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X4 ( .IN0(Ci), .IN1(P), .OUT(NET2), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X6 ( .IN0(NET2), .IN1(generateB), .OUT(Co), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tgxor2x1cstm X8 ( .IN0(Ci), .IN1(P), .OUT(S), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tgxor2x1cstm X9 ( .IN0(B), .IN1(A), .OUT(P), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_fulladd28b_cbp
// *
module PLLTS16FFCFRACF_fulladd28b_cbp (A, B, Ci, Co, S,
	VDD, VSS);
inout Co;
inout [27:0] S;
inout Ci;
inout VDD;
inout [27:0] B;
inout [27:0] A;
inout VSS;
wire [27:0] S;
wire Co;
wire Ci;
wire VDD;
wire [27:0] B;
wire [5:0] C;
wire [27:0] A;
wire VSS;
PLLTS16FFCFRACF_fulladd4b_cbp X1 ( .A({A[3], A[2], A[1], A[0]}),
	.B({B[3], B[2], B[1], B[0]}), .Ci(Ci), .Co(C[0]), .S({S[3],
	S[2], S[1], S[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd4b_cbp X2 ( .A({A[7], A[6], A[5], A[4]}),
	.B({B[7], B[6], B[5], B[4]}), .Ci(C[0]), .Co(C[1]), .S({S[7],
	S[6], S[5], S[4]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd4b_cbp X3 ( .A({A[11], A[10], A[9], A[8]}),
	.B({B[11], B[10], B[9], B[8]}), .Ci(C[1]), .Co(C[2]), .S({S[11],
	S[10], S[9], S[8]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd4b_cbp X4 ( .A({A[15], A[14], A[13], A[12]}),
	.B({B[15], B[14], B[13], B[12]}), .Ci(C[2]), .Co(C[3]), .S({S[15],
	S[14], S[13], S[12]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd4b_cbp X5 ( .A({A[19], A[18], A[17], A[16]}),
	.B({B[19], B[18], B[17], B[16]}), .Ci(C[3]), .Co(C[4]), .S({S[19],
	S[18], S[17], S[16]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd4b_cbp X8 ( .A({A[23], A[22], A[21], A[20]}),
	.B({B[23], B[22], B[21], B[20]}), .Ci(C[4]), .Co(C[5]), .S({S[23],
	S[22], S[21], S[20]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd4b_cbp X9 ( .A({A[27], A[26], A[25], A[24]}),
	.B({B[27], B[26], B[25], B[24]}), .Ci(C[5]), .Co(Co), .S({S[27],
	S[26], S[25], S[24]}), .VDD(VDD), .VSS(VSS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_fulladd36b_cbp
// *
module PLLTS16FFCFRACF_fulladd36b_cbp (A, B, Ci, Co, S,
	VDD, VSS);
inout Co;
inout [35:0] S;
inout Ci;
inout VDD;
inout [35:0] B;
inout [35:0] A;
inout VSS;
wire [35:0] S;
wire Co;
wire Ci;
wire VDD;
wire [35:0] B;
wire [7:0] C;
wire [35:0] A;
wire VSS;
PLLTS16FFCFRACF_fulladd4b_cbp X1 ( .A({A[3], A[2], A[1], A[0]}),
	.B({B[3], B[2], B[1], B[0]}), .Ci(Ci), .Co(C[0]), .S({S[3],
	S[2], S[1], S[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd4b_cbp X2 ( .A({A[7], A[6], A[5], A[4]}),
	.B({B[7], B[6], B[5], B[4]}), .Ci(C[0]), .Co(C[1]), .S({S[7],
	S[6], S[5], S[4]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd4b_cbp X3 ( .A({A[11], A[10], A[9], A[8]}),
	.B({B[11], B[10], B[9], B[8]}), .Ci(C[1]), .Co(C[2]), .S({S[11],
	S[10], S[9], S[8]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd4b_cbp X4 ( .A({A[15], A[14], A[13], A[12]}),
	.B({B[15], B[14], B[13], B[12]}), .Ci(C[2]), .Co(C[3]), .S({S[15],
	S[14], S[13], S[12]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd4b_cbp X5 ( .A({A[19], A[18], A[17], A[16]}),
	.B({B[19], B[18], B[17], B[16]}), .Ci(C[3]), .Co(C[4]), .S({S[19],
	S[18], S[17], S[16]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd4b_cbp X8 ( .A({A[23], A[22], A[21], A[20]}),
	.B({B[23], B[22], B[21], B[20]}), .Ci(C[4]), .Co(C[5]), .S({S[23],
	S[22], S[21], S[20]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd4b_cbp X9 ( .A({A[27], A[26], A[25], A[24]}),
	.B({B[27], B[26], B[25], B[24]}), .Ci(C[5]), .Co(C[6]), .S({S[27],
	S[26], S[25], S[24]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd4b_cbp X10 ( .A({A[31], A[30], A[29], A[28]}),
	.B({B[31], B[30], B[29], B[28]}), .Ci(C[6]), .Co(C[7]), .S({S[31],
	S[30], S[29], S[28]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd4b_cbp X11 ( .A({A[35], A[34], A[33], A[32]}),
	.B({B[35], B[34], B[33], B[32]}), .Ci(C[7]), .Co(Co), .S({S[35],
	S[34], S[33], S[32]}), .VDD(VDD), .VSS(VSS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_fulladd4b_cbp
// *
module PLLTS16FFCFRACF_fulladd4b_cbp (A, B, Ci, Co, S,
	VDD, VSS);
inout Co;
inout [3:0] S;
inout Ci;
inout VDD;
inout [3:0] B;
inout [3:0] A;
inout VSS;
wire [3:0] S;
wire Co;
wire Ci;
wire VDD;
wire [3:0] B;
wire NET2;
wire [3:0] C;
wire [3:0] A;
wire [3:0] P;
wire NET1;
wire VSS;
PLLTS16FFCFRACF_fulladd1b X1 ( .A(A[0]), .B(B[0]), .Ci(Ci), .Co(C[0]),
	.P(P[0]), .S(S[0]), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd1b X2 ( .A(A[1]), .B(B[1]), .Ci(C[0]), .Co(C[1]),
	.P(P[1]), .S(S[1]), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd1b X3 ( .A(A[2]), .B(B[2]), .Ci(C[1]), .Co(C[2]),
	.P(P[2]), .S(S[2]), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd1b X4 ( .A(A[3]), .B(B[3]), .Ci(C[2]), .Co(C[3]),
	.P(P[3]), .S(S[3]), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_nand5x1cstm X5 ( .IN0(P[0]), .IN1(P[1]), .IN2(P[2]), .IN3(P[3]),
	.IN4(Ci), .OUT(NET2), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X6 ( .IN0(NET1), .IN1(NET2), .OUT(Co), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X7 ( .IN(C[3]), .OUT(NET1), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_fulladd5b_cbp
// *
module PLLTS16FFCFRACF_fulladd5b_cbp (A, B, Ci, Co, S,
	VDD, VSS);
inout Co;
inout [4:0] S;
inout Ci;
inout VDD;
inout [4:0] B;
inout [4:0] A;
inout VSS;
wire [4:0] S;
wire Co;
wire Ci;
wire VDD;
wire [4:0] B;
wire [0:0] C;
wire [4:0] A;
wire [4:4] P;
wire VSS;
PLLTS16FFCFRACF_fulladd4b_cbp X1 ( .A({A[3], A[2], A[1], A[0]}),
	.B({B[3], B[2], B[1], B[0]}), .Ci(Ci), .Co(C[0]), .S({S[3],
	S[2], S[1], S[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd1b X2 ( .A(A[4]), .B(B[4]), .Ci(C[0]), .Co(Co),
	.P(P[4]), .S(S[4]), .VDD(VDD), .VSS(VSS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_fulladd8b_cbp
// *
module PLLTS16FFCFRACF_fulladd8b_cbp (A, B, Ci, Co, S,
	VDD, VSS);
inout Co;
inout [7:0] S;
inout Ci;
inout VDD;
inout [7:0] B;
inout [7:0] A;
inout VSS;
wire [7:0] S;
wire Co;
wire Ci;
wire VDD;
wire [7:0] B;
wire [0:0] C;
wire [7:0] A;
wire VSS;
PLLTS16FFCFRACF_fulladd4b_cbp X1 ( .A({A[3], A[2], A[1], A[0]}),
	.B({B[3], B[2], B[1], B[0]}), .Ci(Ci), .Co(C[0]), .S({S[3],
	S[2], S[1], S[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_fulladd4b_cbp X2 ( .A({A[7], A[6], A[5], A[4]}),
	.B({B[7], B[6], B[5], B[4]}), .Ci(C[0]), .Co(Co), .S({S[7],
	S[6], S[5], S[4]}), .VDD(VDD), .VSS(VSS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_invx16cstm
// *
module PLLTS16FFCFRACF_invx16cstm (VPOS, SUB, VNEG, OUT, IN);
	input 	VPOS;
	input 	SUB;
	input 	VNEG;
	output 	OUT;
	input 	IN;
    PLLTS16FFCFRACF_invx1cstm Xinvx1cstm (
	.IN(IN), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_invx1cstm
// *
module PLLTS16FFCFRACF_invx1cstm (IN, OUT, SUB, VNEG, VPOS);
input VPOS;
input VNEG;
input SUB;
output OUT;
input IN;
not (OUT,IN);
specify
    specparam
    tplh0 = 1*5 * 1e-12 / 1.0e-12,
        tphl0 = 1*5 * 1e-12 / 1.0e-12;
    (IN => OUT) = (tplh0,tphl0);
endspecify
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_invx2cstm
// *
module PLLTS16FFCFRACF_invx2cstm (VPOS, SUB, VNEG, OUT, IN);
	input 	VPOS;
	input 	SUB;
	input 	VNEG;
	output 	OUT;
	input 	IN;
    PLLTS16FFCFRACF_invx1cstm Xinvx1cstm (
	.IN(IN), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_invx3cstm
// *
module PLLTS16FFCFRACF_invx3cstm (VPOS, SUB, VNEG, OUT, IN);
	input 	VPOS;
	input 	SUB;
	input 	VNEG;
	output 	OUT;
	input 	IN;
    PLLTS16FFCFRACF_invx1cstm Xinvx1cstm (
	.IN(IN), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_invx4cstm
// *
module PLLTS16FFCFRACF_invx4cstm (VPOS, SUB, VNEG, OUT, IN);
	input 	VPOS;
	input 	SUB;
	input 	VNEG;
	output 	OUT;
	input 	IN;
    PLLTS16FFCFRACF_invx1cstm Xinvx1cstm (
	.IN(IN), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_invx6cstm
// *
module PLLTS16FFCFRACF_invx6cstm (VPOS, SUB, VNEG, OUT, IN);
	input 	VPOS;
	input 	SUB;
	input 	VNEG;
	output 	OUT;
	input 	IN;
    PLLTS16FFCFRACF_invx1cstm Xinvx1cstm (
	.IN(IN), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_invx8cstm
// *
module PLLTS16FFCFRACF_invx8cstm (VPOS, SUB, VNEG, OUT, IN);
	input 	VPOS;
	input 	SUB;
	input 	VNEG;
	output 	OUT;
	input 	IN;
    PLLTS16FFCFRACF_invx1cstm Xinvx1cstm (
	.IN(IN), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_latchx1cstmb
// *
module PLLTS16FFCFRACF_latchx1cstmb (CLK, CLKB, D, QB, SUB, VNEG,
    VPOS);
input VPOS;
input VNEG;
input SUB;
output QB;
input D;
input CLK;
input CLKB;
wire clki;
reg q_intb;
assign clki = (CLK && ~CLKB);
`ifdef SICR_SV_ENABLE
    
    
    int init_seed = 1;
    process h_main;
`endif

specify
    `ifdef MY_TIMING_CHECKS
        $setup(D, negedge clki, 2*5 * 1e-12 / 1.0e-12);
        $hold(negedge clki, D, 1*5 * 1e-12 / 1.0e-12);
    `endif
    specparam
    tplh0 = 5*5 * 1e-12 / 1.0e-12,
        tphl0 = 5*5 * 1e-12 / 1.0e-12,
        tplhd = 5*5 * 1e-12 / 1.0e-12,
        tphld = 5*5 * 1e-12 / 1.0e-12;
    (CLK => QB) = (tplh0,tphl0);
    if (CLK) (D => QB) = (tplhd,tphld);
endspecify
initial begin
    `ifdef SICR_SV_ENABLE
    
    
        q_intb = $urandom(init_seed);
    `else
        q_intb = 1'b0;
    `endif
    wait(~VNEG && ~SUB && VPOS);
    if (clki)
        q_intb = (D === 1'b1) ? 1'b0 : 1'b1;
    forever @(posedge clki or D or VNEG or VPOS or SUB) begin
        if (clki && ~VNEG && ~SUB && VPOS)
            q_intb = (D === 1'b1) ? 1'b0 : 1'b1;
        else if (VNEG || SUB || ~VPOS) begin
            wait(~VNEG && ~SUB && VPOS);
                if (clki)
                    q_intb = (D === 1'b1) ? 1'b0 : 1'b1;
                else begin
                    `ifdef SICR_SV_ENABLE
                        q_intb = $urandom();
                    `else
                        q_intb = 1'b0;
                    `endif
                end
        end
    end
end

assign QB = (VNEG || SUB || ~VPOS) ? 1'bx : q_intb;
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_latchx1cstmb_ulvt
// *
module PLLTS16FFCFRACF_latchx1cstmb_ulvt (VPOS, SUB, CLK, QB, D, VNEG, CLKB);
	input 	VPOS;
	input 	SUB;
	input 	CLK;
	output 	QB;
	input 	D;
	input 	VNEG;
	input 	CLKB;
    PLLTS16FFCFRACF_latchx1cstmb Xlatchx1cstmb (
	.CLK(CLK), .CLKB(CLKB), .D(D), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.QB(QB)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_latchx1cstmb_v2
// *
module PLLTS16FFCFRACF_latchx1cstmb_v2 (VPOS, SUB, CLK, QB, D, VNEG, CLKB);
	input 	VPOS;
	input 	SUB;
	input 	CLK;
	output 	QB;
	input 	D;
	input 	VNEG;
	input 	CLKB;
    PLLTS16FFCFRACF_latchx1cstmb Xlatchx1cstmb (
	.CLK(CLK), .CLKB(CLKB), .D(D), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.QB(QB)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_latchx2cstmb
// *
module PLLTS16FFCFRACF_latchx2cstmb (VPOS, SUB, CLK, QB, D, VNEG, CLKB);
	input 	VPOS;
	input 	SUB;
	input 	CLK;
	output 	QB;
	input 	D;
	input 	VNEG;
	input 	CLKB;
    PLLTS16FFCFRACF_latchx1cstmb Xlatchx1cstmb (
	.CLK(CLK), .CLKB(CLKB), .D(D), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.QB(QB)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_lock_counter
// *
module PLLTS16FFCFRACF_lock_counter (cklock, lock, lock_int, resetlock, VDD,
	VSS);
inout lock;
inout VDD;
inout cklock;
inout lock_int;
inout resetlock;
inout VSS;
wire lockB;
wire q5;
wire q0;
wire lock;
wire qb5;
wire q2;
wire q9;
wire q3;
wire qb8;
wire cklockB;
wire qb9;
wire VDD;
wire lock_intB;
wire q10;
wire qb1;
wire q1;
wire qb10;
wire qb7;
wire qb2;
wire q7;
wire q6;
wire qb3;
wire cklock;
wire qb6;
wire q8;
wire lock_int;
wire resetlock;
wire q4;
wire qb0;
wire v1;
wire VSS;
wire resetlockbuf;
wire qb4;
PLLTS16FFCFRACF_tiehighx1cstm X1 ( .OUT(v1), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_bufx4cstm X2 ( .IN(resetlock), .OUT(resetlockbuf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand2x1sym_svt X3 ( .IN0(lockB), .IN1(cklock), .OUT(cklockB), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xffdmy2 ( .CLK(qb9), .D(qb10), .Q(q10), .QB(qb10),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xffdmy1 ( .CLK(qb8), .D(qb9), .Q(q9), .QB(qb9),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xff8 ( .CLK(qb7), .D(qb8), .Q(q8), .QB(qb8),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xff0 ( .CLK(cklockB), .D(qb0), .Q(q0), .QB(qb0),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xff1 ( .CLK(qb0), .D(qb1), .Q(q1), .QB(qb1),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xff2 ( .CLK(qb1), .D(qb2), .Q(q2), .QB(qb2),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xff3 ( .CLK(qb2), .D(qb3), .Q(q3), .QB(qb3),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xff4 ( .CLK(qb3), .D(qb4), .Q(q4), .QB(qb4),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xff5 ( .CLK(qb4), .D(qb5), .Q(q5), .QB(qb5),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xff6 ( .CLK(qb5), .D(qb6), .Q(q6), .QB(qb6),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xff7 ( .CLK(qb6), .D(qb7), .Q(q7), .QB(qb7),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xff10 ( .CLK(qb8), .D(lock_int), .Q(lock), .QB(lockB),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xff9 ( .CLK(qb8), .D(v1), .Q(lock_int), .QB(lock_intB),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_lock_counter_phase
// *
module PLLTS16FFCFRACF_lock_counter_phase (cklock, lock, lock_int, resetlock, VDD,
	VSS);
inout lock;
inout VDD;
inout cklock;
inout lock_int;
inout resetlock;
inout VSS;
wire lockB;
wire q5;
wire q0;
wire tiehigh;
wire lock;
wire qb5;
wire q2;
wire q3;
wire cklockB;
wire VDD;
wire lock_intB;
wire qb1;
wire q1;
wire qb7;
wire qb2;
wire q7;
wire cklockgate;
wire q6;
wire qb3;
wire cklock;
wire qb6;
wire lock_int;
wire resetlock;
wire q4;
wire qb0;
wire VSS;
wire resetlockbuf;
wire qb4;
PLLTS16FFCFRACF_tiehighx1cstm X1 ( .OUT(tiehigh), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_bufx4cstm X2 ( .IN(resetlock), .OUT(resetlockbuf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X3 ( .IN0(lockB), .IN1(cklockB), .OUT(cklockgate), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X4 ( .IN(cklock), .OUT(cklockB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xff0 ( .CLK(cklockgate), .D(qb0), .Q(q0), .QB(qb0),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xff1 ( .CLK(qb0), .D(qb1), .Q(q1), .QB(qb1),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xff2 ( .CLK(qb1), .D(qb2), .Q(q2), .QB(qb2),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xff3 ( .CLK(qb2), .D(qb3), .Q(q3), .QB(qb3),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xff4 ( .CLK(qb3), .D(qb4), .Q(q4), .QB(qb4),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xff5 ( .CLK(qb4), .D(qb5), .Q(q5), .QB(qb5),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xff6 ( .CLK(qb5), .D(qb6), .Q(q6), .QB(qb6),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xff7 ( .CLK(qb6), .D(qb7), .Q(q7), .QB(qb7),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xff8 ( .CLK(qb2), .D(lock_int), .Q(lock), .QB(lockB),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm Xff9 ( .CLK(qb1), .D(tiehigh), .Q(lock_int), .QB(lock_intB),
	.RST(resetlockbuf), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_loopfilter_sc
// *
module PLLTS16FFCFRACF_loopfilter_sc (PD, vtunei, VDDREF, VDDPOST, VDDHV, VSS, phi1, phi2, pdH, pdHB, startup, vfollow);


input VDDHV ;
input VSS ;
input VDDREF;
input VDDPOST;

input PD;  

input startup;  
input phi1, phi2;

inout [3*16-1:0] vtunei;

output pdH, pdHB;
output vfollow;  


parameter tsample = 111; 			

parameter cscale_factor = 1.0e-15;					

parameter startup_sig_pairs = 1;

parameter [(startup_sig_pairs*32-1):0] startup_caps_vct = {32'd378}; 	

parameter cint = 32'd100000; 						

parameter vsupply = 1.8;

parameter tstep_lf = 1e-12;

parameter lbint_mode = 0;

parameter voltage_bus_size = 2*16;
parameter current_bus_size = 16;
parameter maxv = 3.0;                 
parameter maxi = 3.0e-3;                 


wire [startup_sig_pairs*2-1:0] phi;

wire fastlock;

assign fastlock = $test$plusargs("USER_CONTROLLED_PLLTS16FFCFRACF_LOCK_TIME") ? 1'b1 : 1'b0;


assign #(5 * 2) pdH = PD;
assign #(5 * 2) pdHB = ~PD;
assign vfollow = ~PD;


assign phi = {phi1, phi2};


PLLTS16FFCFRACF_loopfilter_sc_core #(	
	.tsample(tsample), 
	.cscale_factor(cscale_factor), 
	.startup_sig_pairs(startup_sig_pairs), 
	.startup_caps_vct(startup_caps_vct), 
	.cint(cint),
	.vsupply(vsupply),
	.tstep_lf(tstep_lf),
	.lbint_mode(lbint_mode),
    .voltage_bus_size(voltage_bus_size),
    .current_bus_size(current_bus_size),
    .maxv(maxv),
    .maxi(maxi)
) Xloopfilter (vtunei, phi, PD, fastlock);
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_loopfilter_sc_core
// *
module PLLTS16FFCFRACF_loopfilter_sc_core (
VTUNEI,
phi,
PD,
fastlock
);


parameter tsample = 100; 			

parameter cscale_factor = 1.0e-15;					

parameter startup_sig_pairs = 1;

parameter [(startup_sig_pairs*32-1):0] startup_caps_vct = {32'd527}; 	

parameter cint = 32'd45000; 						

parameter vsupply = 3.0;

parameter tstep_lf = 3.0;

parameter lbint_mode = 0;

parameter voltage_bus_size = 32;
parameter current_bus_size = 16;

parameter maxv = 5.0;
parameter maxi = 1.0e-3;

localparam two_to_31 = 2147483648.0;

localparam STARTUP_TRIGGERED = 2'd0;
localparam CURRENT_TRIGGERED = 2'd1;
localparam PD_TRIGGERED = 2'd2;
localparam DELAY_ELAPSED = 2'd3;


input PD;  

input [startup_sig_pairs*2-1:0] phi;

inout [(voltage_bus_size+current_bus_size-1):0] VTUNEI;

input fastlock;


real iin;
real vout;

reg [voltage_bus_size-1:0] VTUNEI_v_reg;

reg [1:0] lf_state;

reg reg_semaphore;

wire [current_bus_size-1:0] VTUNEI_i;
wire [voltage_bus_size-1:0] VTUNEI_v;


assign VTUNEI_i = VTUNEI[current_bus_size-1:0];
assign VTUNEI_v = VTUNEI[(voltage_bus_size+current_bus_size-1):current_bus_size];


assign (weak0, weak1) VTUNEI = {VTUNEI_v_reg, {current_bus_size{1'bz}}};

function automatic reg [voltage_bus_size-1:0] volttobin;
    input real voltage;
    volttobin = $rtoi((voltage/maxv)*(2.0**$itor(voltage_bus_size-1)-1.0));
endfunction
function automatic real  bintovolt;
    input reg [voltage_bus_size-1:0] binary;
    bintovolt = $itor($signed(binary))/(2.0**$itor(voltage_bus_size-1)-1.0)*maxv;
endfunction
function automatic reg [current_bus_size-1:0] currenttobin;
    input real current;
    currenttobin = $rtoi((current/maxi)*(2.0**$itor(current_bus_size-1)-1.0));
endfunction
function automatic real  bintocurrent;
    input reg [current_bus_size-1:0] binary;
    bintocurrent = $itor($signed(binary))/(2.0**$itor(current_bus_size-1)-1.0)*maxi;
endfunction


initial begin
	wait (fastlock);
	disable calc_vout;
end

initial begin : calc_vout
	integer i;
    realtime tlast;
    realtime tdither;
	reg [current_bus_size-1:0] VTUNEI_i_last;
	reg [voltage_bus_size-1:0] VTUNEI_v_last;
    reg_semaphore = 0;
    lf_state = PD_TRIGGERED;
	forever begin
        case (lf_state) 
            PD_TRIGGERED: begin
                initialize(vout, iin, VTUNEI_i_last, VTUNEI_v_reg, VTUNEI_v_last);
                
                wait(!PD);
                tlast = $realtime;
            end
            STARTUP_TRIGGERED: begin
                apply_startup(vout);
                integrate_current(tlast, vout, iin);
                check_vout_bounds(vout);
                convert_to_vtunei_v(vout, VTUNEI_v_reg, VTUNEI_v_last);
            end
            CURRENT_TRIGGERED, DELAY_ELAPSED: begin
                
                if (lbint_mode && VTUNEI_v_last != VTUNEI_v) begin
                    vout = bintovolt(VTUNEI_v);
                end
                integrate_current(tlast, vout, iin);
                check_vout_bounds(vout);
                convert_to_vtunei_v(vout, VTUNEI_v_reg, VTUNEI_v_last);
            end
        endcase
        gen_tdither(tdither);
        get_current(VTUNEI_i_last, VTUNEI_i, iin);
		
        fork : calc_vout_pd_fork
            begin 
                @(phi) take_semaphore;
                lf_state = STARTUP_TRIGGERED;
                disable calc_vout_pd_fork;
            end
            begin
                @(VTUNEI_i) take_semaphore;
                lf_state = CURRENT_TRIGGERED;
                disable calc_vout_pd_fork;
            end
            begin
                #(tdither) take_semaphore;
                lf_state = DELAY_ELAPSED;
                disable calc_vout_pd_fork;
            end
            begin
                wait(PD) take_semaphore;
                lf_state = PD_TRIGGERED;
                disable calc_vout_pd_fork;
            end
        join
        release_semaphore;
	end
end
task gen_tdither;
    output realtime t;
    begin
        t = tsample * (1 + 0.01 * $random / two_to_31);
    end
endtask
task apply_startup;
    inout real v;
    integer total_switched_c;
    integer i;
	reg [(startup_sig_pairs*32-1):0] startup_caps_reg;
    begin
        
        
        startup_caps_reg = startup_caps_vct; 
        total_switched_c = 0;
        for (i = 0; i < startup_sig_pairs; i = i+1) begin
            if (|phi[2*i +: 2]) begin
                total_switched_c = total_switched_c + startup_caps_reg[32*i +: 32];
            end
        end
        v = v * $itor(cint)/$itor(cint + total_switched_c) ;
    end
endtask
task check_vout_bounds;
    inout real v;
    begin
        if (v > vsupply) begin
            v = vsupply;
        end
        else begin
            v = (v < 0) ? 0 : v;
        end
    end
endtask
task initialize;
    output real vout;
    output real iin;
    output reg [current_bus_size-1:0] VTUNEI_i_last;
    output reg [voltage_bus_size-1:0] VTUNEI_v_reg;
    output reg [voltage_bus_size-1:0] VTUNEI_v_last;
    begin
        vout = vsupply;
        iin = 0;
        VTUNEI_i_last = 0;
        convert_to_vtunei_v(vout, VTUNEI_v_reg, VTUNEI_v_last);
    end
endtask
task convert_to_vtunei_v;
    input real vout;
    output reg [voltage_bus_size-1:0] VTUNEI_v_reg;
    output reg [voltage_bus_size-1:0] VTUNEI_v_last;
    begin
        VTUNEI_v_reg = volttobin(vout);
        VTUNEI_v_last = VTUNEI_v_reg;
    end
endtask
task get_current;
    inout reg [current_bus_size-1:0] VTUNEI_i_last;
    input reg [current_bus_size-1:0] VTUNEI_i;
    output real iin;
    begin
        if(VTUNEI_i_last != VTUNEI_i) begin
            iin = bintocurrent(VTUNEI_i);
            VTUNEI_i_last = VTUNEI_i;
        end
    end
endtask
task integrate_current;
    inout realtime tlast;
    inout real v;
    input real i;
    realtime tdiff;
    begin
        tdiff = $realtime - tlast;
        v = v + tstep_lf * (tdiff * i)/($itor(cint)*cscale_factor);
        tlast = $realtime;
    end
endtask
task automatic take_semaphore;
    begin
        wait(!reg_semaphore);
        reg_semaphore = 1'b1;
    end
endtask
task automatic release_semaphore;
    begin
        reg_semaphore = 1'b0;
    end
endtask
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_lvlshft
// *
module PLLTS16FFCFRACF_lvlshft (in, outhvB, outhv, VDDLV, VDDHV, VSS, pdHB);
input  VDDHV;
input  VDDLV;
input VSS; 
input pdHB;
output outhv;
output outhvB;
input in;
bufif1 #(5 * 2) (outhv,in,pdHB);
notif1 #(5 * 2) (outhvB,in,pdHB);
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_lvlshft_down
// *
module PLLTS16FFCFRACF_lvlshft_down (inH, VDDLV, VDDHV, VSS, outlv, outlvB );
input VDDLV;
input VDDHV;
input VSS; 
output outlv;
output outlvB;
input inH;
bufif1 #(5 * 2) (outlv,inH,1'b1);
notif1 #(5 * 2) (outlvB,inH,1'b1);
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_lvlshft_fast
// *
module PLLTS16FFCFRACF_lvlshft_fast (ibias, in, outhvB, outhv, VDDLV, VDDHV, VSS, PDHB, PDH);
input VDDHV;
input VDDLV;
input VSS;
input PDHB;
input PDH;
output outhv;
output outhvB;
input ibias;
input in;
bufif1 #(5 * 10) (outhv ,in, ibias & PDHB);
notif1 #(5 * 10) (outhvB,in, ibias & PDHB);
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_mux16to1_sym_gate_ulvt
// *
module PLLTS16FFCFRACF_mux16to1_sym_gate_ulvt (IN, OUT, SEL, VDD, VSS);
inout VDD;
inout OUT;
inout [3:0] SEL;
inout [15:0] IN;
inout VSS;
wire mux1out4;
wire mux2out2;
wire VDD;
wire mux2out3;
wire mux3out1;
wire mux1out7;
wire OUT;
wire mux3out2;
wire [3:0] SEL;
wire mux1out3;
wire mux2out1;
wire mux1out5;
wire mux1out1;
wire mux1out2;
wire mux2out4;
wire mux1out6;
wire [15:0] IN;
wire mux1out8;
wire VSS;
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt X1 ( .IN0(IN[14]), .IN1(IN[15]), .OUT(mux1out1), .SEL(SEL[0]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt X2 ( .IN0(IN[12]), .IN1(IN[13]), .OUT(mux1out2), .SEL(SEL[0]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt X3 ( .IN0(IN[10]), .IN1(IN[11]), .OUT(mux1out3), .SEL(SEL[0]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt X4 ( .IN0(IN[8]), .IN1(IN[9]), .OUT(mux1out4), .SEL(SEL[0]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt X5 ( .IN0(IN[6]), .IN1(IN[7]), .OUT(mux1out5), .SEL(SEL[0]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt X6 ( .IN0(IN[4]), .IN1(IN[5]), .OUT(mux1out6), .SEL(SEL[0]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt X7 ( .IN0(IN[2]), .IN1(IN[3]), .OUT(mux1out7), .SEL(SEL[0]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt X8 ( .IN0(IN[0]), .IN1(IN[1]), .OUT(mux1out8), .SEL(SEL[0]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt X9 ( .IN0(mux1out2), .IN1(mux1out1), .OUT(mux2out1), .SEL(SEL[1]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt X10 ( .IN0(mux1out4), .IN1(mux1out3), .OUT(mux2out2), .SEL(SEL[1]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt X11 ( .IN0(mux1out8), .IN1(mux1out7), .OUT(mux2out4), .SEL(SEL[1]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt X12 ( .IN0(mux1out6), .IN1(mux1out5), .OUT(mux2out3), .SEL(SEL[1]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt X13 ( .IN0(mux2out4), .IN1(mux2out3), .OUT(mux3out2), .SEL(SEL[2]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt X14 ( .IN0(mux2out2), .IN1(mux2out1), .OUT(mux3out1), .SEL(SEL[2]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt X15 ( .IN0(mux3out2), .IN1(mux3out1), .OUT(OUT), .SEL(SEL[3]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_mux2x1cstm
// *
module PLLTS16FFCFRACF_mux2x1cstm (IN0, IN1, OUT, SEL, SUB,
	VNEG, VPOS);
inout VPOS;
inout SUB;
inout IN1;
inout OUT;
inout SEL;
inout VNEG;
inout IN0;
wire VPOS;
wire SUB;
wire OUT;
wire IN1;
wire SEL;
wire NET3;
wire NET2;
wire VNEG;
wire NET1;
wire IN0;
PLLTS16FFCFRACF_nand2x1cstm X2 ( .IN0(NET1), .IN1(IN0), .OUT(NET3), .SUB(SUB),
	.VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_invx1cstm X4 ( .IN(SEL), .OUT(NET1), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
PLLTS16FFCFRACF_nand2x1cstm X3 ( .IN0(NET3), .IN1(NET2), .OUT(OUT), .SUB(SUB),
	.VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_nand2x1cstm X1 ( .IN0(SEL), .IN1(IN1), .OUT(NET2), .SUB(SUB),
	.VNEG(VNEG), .VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_mux2x1sym
// *
module PLLTS16FFCFRACF_mux2x1sym (IN0, IN1, OUT, SEL, SUB,
	VNEG, VPOS);
inout VPOS;
inout SUB;
inout IN1;
inout OUT;
inout SEL;
inout VNEG;
inout IN0;
wire VPOS;
wire selB;
wire SUB;
wire IN1;
wire OUT;
wire SEL;
wire VNEG;
wire in0B;
wire in1B;
wire IN0;
PLLTS16FFCFRACF_nand2x1sym X1 ( .IN0(SEL), .IN1(IN1), .OUT(in1B), .SUB(SUB),
	.VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_nand2x1sym X2 ( .IN0(selB), .IN1(IN0), .OUT(in0B), .SUB(SUB),
	.VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_nand2x1sym X3 ( .IN0(in0B), .IN1(in1B), .OUT(OUT), .SUB(SUB),
	.VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_invx1cstm X4 ( .IN(SEL), .OUT(selB), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
PLLTS16FFCFRACF_nand2x1sym X5 ( .IN0(in1B), .IN1(in0B), .OUT(OUT), .SUB(SUB),
	.VNEG(VNEG), .VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_mux2x1sym_gate_ulvt
// *
module PLLTS16FFCFRACF_mux2x1sym_gate_ulvt (OUT,IN1,IN0,SEL,VPOS,VNEG,SUB); 
   input IN1, IN0, SEL, VPOS, VNEG, SUB ; 
   output OUT; 
   wire   OUT ; 
   assign #(2*5) OUT = 1'b1==SEL ? IN1 : 1'b0 == SEL ? IN0 : 1'b1 == ~(IN1^IN0) ? IN1 : 1'bx ; 
endmodule 

// *
// * Schematic name: PLLTS16FFCFRACF_mux2x1sym_svt
// *
module PLLTS16FFCFRACF_mux2x1sym_svt (IN0, IN1, OUT, SEL, SUB,
	VNEG, VPOS);
inout VPOS;
inout SUB;
inout IN1;
inout OUT;
inout SEL;
inout VNEG;
inout IN0;
wire selB;
wire VPOS;
wire SUB;
wire IN1;
wire OUT;
wire SEL;
wire VNEG;
wire in0B;
wire in1B;
wire IN0;
PLLTS16FFCFRACF_invx1cstm X4 ( .IN(SEL), .OUT(selB), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
PLLTS16FFCFRACF_nand2x1sym_svt X1 ( .IN0(SEL), .IN1(IN1), .OUT(in1B), .SUB(SUB),
	.VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_nand2x1sym_svt X2 ( .IN0(selB), .IN1(IN0), .OUT(in0B), .SUB(SUB),
	.VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_nand2x1sym_svt X3 ( .IN0(in0B), .IN1(in1B), .OUT(OUT), .SUB(SUB),
	.VNEG(VNEG), .VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_mux2x2cstm
// *
module PLLTS16FFCFRACF_mux2x2cstm (IN0, IN1, OUT, SEL, SUB,
	VNEG, VPOS);
inout VPOS;
inout SUB;
inout IN1;
inout OUT;
inout SEL;
inout VNEG;
inout IN0;
wire VPOS;
wire SUB;
wire IN1;
wire OUT;
wire SEL;
wire NET3;
wire NET2;
wire VNEG;
wire NET1;
wire IN0;
PLLTS16FFCFRACF_nand2x1cstm X1 ( .IN0(SEL), .IN1(IN1), .OUT(NET2), .SUB(SUB),
	.VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_nand2x1cstm X2 ( .IN0(NET1), .IN1(IN0), .OUT(NET3), .SUB(SUB),
	.VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_nand2x2cstm X3 ( .IN0(NET3), .IN1(NET2), .OUT(OUT), .SUB(SUB),
	.VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_invx1cstm X4 ( .IN(SEL), .OUT(NET1), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_mux2x2cstm_ulvt
// *
module PLLTS16FFCFRACF_mux2x2cstm_ulvt (IN0, IN1, OUT, SEL, SUB,
	VNEG, VPOS);
inout VPOS;
inout SUB;
inout IN1;
inout OUT;
inout SEL;
inout VNEG;
inout IN0;
wire VPOS;
wire SUB;
wire IN1;
wire OUT;
wire SEL;
wire NET3;
wire NET2;
wire VNEG;
wire NET1;
wire IN0;
PLLTS16FFCFRACF_nand2x1cstm X1 ( .IN0(SEL), .IN1(IN1), .OUT(NET2), .SUB(SUB),
	.VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_nand2x1cstm X2 ( .IN0(NET1), .IN1(IN0), .OUT(NET3), .SUB(SUB),
	.VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_nand2x2cstm X3 ( .IN0(NET3), .IN1(NET2), .OUT(OUT), .SUB(SUB),
	.VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_invx1cstm X4 ( .IN(SEL), .OUT(NET1), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_mux4to1_sym_gate_ulvt
// *
module PLLTS16FFCFRACF_mux4to1_sym_gate_ulvt (IN, OUT, SEL, VDD, VSS);
inout VDD;
inout OUT;
inout [1:0] SEL;
inout [3:0] IN;
inout VSS;
wire VDD;
wire OUT;
wire [1:0] SEL;
wire mux1out1;
wire mux1out2;
wire [3:0] IN;
wire VSS;
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt X13 ( .IN0(IN[0]), .IN1(IN[1]), .OUT(mux1out2), .SEL(SEL[0]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt X14 ( .IN0(IN[2]), .IN1(IN[3]), .OUT(mux1out1), .SEL(SEL[0]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt X15 ( .IN0(mux1out2), .IN1(mux1out1), .OUT(OUT), .SEL(SEL[1]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_mux4x1cstm
// *
module PLLTS16FFCFRACF_mux4x1cstm (IN0, IN1, IN2, IN3, OUT,
	SEL, SUB, VNEG, VPOS);
inout VPOS;
inout IN2;
inout SUB;
inout IN1;
inout OUT;
inout [1:0] SEL;
inout VNEG;
inout IN3;
inout IN0;
wire VPOS;
wire IN2;
wire SUB;
wire IN1;
wire OUT;
wire out_dn;
wire [1:0] SEL;
wire VNEG;
wire out_up;
wire IN3;
wire IN0;
PLLTS16FFCFRACF_mux2x1cstm Xbot ( .IN0(IN0), .IN1(IN1), .OUT(out_dn), .SEL(SEL[0]),
	.SUB(SUB), .VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_mux2x1cstm Xout ( .IN0(out_dn), .IN1(out_up), .OUT(OUT), .SEL(SEL[1]),
	.SUB(SUB), .VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_mux2x1cstm Xtop ( .IN0(IN2), .IN1(IN3), .OUT(out_up), .SEL(SEL[0]),
	.SUB(SUB), .VNEG(VNEG), .VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_mux8x1cstm1
// *
module PLLTS16FFCFRACF_mux8x1cstm1 (IN, OUT, SEL, SUB, VNEG,
	VPOS);
inout VPOS;
inout SUB;
inout OUT;
inout [2:0] SEL;
inout VNEG;
inout [7:0] IN;
wire VPOS;
wire SUB;
wire OUT;
wire out_dn;
wire [2:0] SEL;
wire VNEG;
wire out_up;
wire [7:0] IN;
PLLTS16FFCFRACF_mux2x1cstm Xout ( .IN0(out_dn), .IN1(out_up), .OUT(OUT), .SEL(SEL[2]),
	.SUB(SUB), .VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_mux4x1cstm Xdn ( .IN0(IN[0]), .IN1(IN[1]), .IN2(IN[2]), .IN3(IN[3]),
	.OUT(out_dn), .SEL({SEL[1], SEL[0]}), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_mux4x1cstm Xup ( .IN0(IN[4]), .IN1(IN[5]), .IN2(IN[6]), .IN3(IN[7]),
	.OUT(out_up), .SEL({SEL[1], SEL[0]}), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_nand2x1clk
// *
module PLLTS16FFCFRACF_nand2x1clk (VPOS, SUB, IN0, VNEG, OUT, IN1);
	input 	VPOS;
	input 	SUB;
	input 	IN0;
	input 	VNEG;
	output 	OUT;
	input 	IN1;
    PLLTS16FFCFRACF_nand2x1cstm Xnand2x1cstm (
	.IN0(IN0), .IN1(IN1), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_nand2x1clk_sub
// *
module PLLTS16FFCFRACF_nand2x1clk_sub (VPOS, SUB, OUT, IN1, IN0, VNEG);
	input 	VPOS;
	input 	SUB;
	output 	OUT;
	input 	IN1;
	input 	IN0;
	input 	VNEG;
    PLLTS16FFCFRACF_nand2x1cstm Xnand2x1cstm (
	.IN0(IN0), .IN1(IN1), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_nand2x1cstm
// *
module PLLTS16FFCFRACF_nand2x1cstm (IN0, IN1, OUT, SUB, VNEG, VPOS);
input VPOS;
input VNEG;
input SUB;
output OUT;
input IN1;
input IN0;
nand (OUT,IN1,IN0);
specify
    specparam
    tplh0 = 2*5 * 1e-12 / 1.0e-12,
        tphl0 = 2*5 * 1e-12 / 1.0e-12,
        tplh1 = 2*5 * 1e-12 / 1.0e-12,
        tphl1 = 2*5 * 1e-12 / 1.0e-12;
    (IN0 => OUT) = (tplh0,tphl0);
    (IN1 => OUT) = (tplh1,tphl1);
endspecify
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_nand2x1sym
// *
module PLLTS16FFCFRACF_nand2x1sym (VPOS, SUB, IN0, VNEG, OUT, IN1);
	input 	VPOS;
	input 	SUB;
	input 	IN0;
	input 	VNEG;
	output 	OUT;
	input 	IN1;
    PLLTS16FFCFRACF_nand2x1cstm Xnand2x1cstm (
	.IN0(IN0), .IN1(IN1), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_nand2x1sym_svt
// *
module PLLTS16FFCFRACF_nand2x1sym_svt (VPOS, SUB, IN0, VNEG, OUT, IN1);
	input 	VPOS;
	input 	SUB;
	input 	IN0;
	input 	VNEG;
	output 	OUT;
	input 	IN1;
    PLLTS16FFCFRACF_nand2x1cstm Xnand2x1cstm (
	.IN0(IN0), .IN1(IN1), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_nand2x2clk
// *
module PLLTS16FFCFRACF_nand2x2clk (VPOS, SUB, IN0, VNEG, OUT, IN1);
	input 	VPOS;
	input 	SUB;
	input 	IN0;
	input 	VNEG;
	output 	OUT;
	input 	IN1;
    PLLTS16FFCFRACF_nand2x1cstm Xnand2x1cstm (
	.IN0(IN0), .IN1(IN1), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_nand2x2clk_fast
// *
module PLLTS16FFCFRACF_nand2x2clk_fast (VPOS, SUB, IN0, VNEG, OUT, IN1);
	input 	VPOS;
	input 	SUB;
	input 	IN0;
	input 	VNEG;
	output 	OUT;
	input 	IN1;
    PLLTS16FFCFRACF_nand2x1cstm Xnand2x1cstm (
	.IN0(IN0), .IN1(IN1), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_nand2x2cstm
// *
module PLLTS16FFCFRACF_nand2x2cstm (VPOS, SUB, IN0, VNEG, OUT, IN1);
	input 	VPOS;
	input 	SUB;
	input 	IN0;
	input 	VNEG;
	output 	OUT;
	input 	IN1;
    PLLTS16FFCFRACF_nand2x1cstm Xnand2x1cstm (
	.IN0(IN0), .IN1(IN1), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_nand2x2sym
// *
module PLLTS16FFCFRACF_nand2x2sym (VPOS, SUB, IN0, VNEG, OUT, IN1);
	input 	VPOS;
	input 	SUB;
	input 	IN0;
	input 	VNEG;
	output 	OUT;
	input 	IN1;
    PLLTS16FFCFRACF_nand2x1cstm Xnand2x1cstm (
	.IN0(IN0), .IN1(IN1), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_nand2x2sym_svt_v2
// *
module PLLTS16FFCFRACF_nand2x2sym_svt_v2 (VPOS, SUB, OUT, IN1, IN0, VNEG);
	input 	VPOS;
	input 	SUB;
	output 	OUT;
	input 	IN1;
	input 	IN0;
	input 	VNEG;
    PLLTS16FFCFRACF_nand2x1cstm Xnand2x1cstm (
	.IN0(IN0), .IN1(IN1), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_nand2x2sym_ulvt
// *
module PLLTS16FFCFRACF_nand2x2sym_ulvt (VPOS, SUB, OUT, IN1, IN0, VNEG);
	input 	VPOS;
	input 	SUB;
	output 	OUT;
	input 	IN1;
	input 	IN0;
	input 	VNEG;
    PLLTS16FFCFRACF_nand2x1cstm Xnand2x1cstm (
	.IN0(IN0), .IN1(IN1), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_nand2x4clk
// *
module PLLTS16FFCFRACF_nand2x4clk (VPOS, SUB, IN0, VNEG, OUT, IN1);
	input 	VPOS;
	input 	SUB;
	input 	IN0;
	input 	VNEG;
	output 	OUT;
	input 	IN1;
    PLLTS16FFCFRACF_nand2x1cstm Xnand2x1cstm (
	.IN0(IN0), .IN1(IN1), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_nand3x1cstm
// *
module PLLTS16FFCFRACF_nand3x1cstm (IN0, IN1, IN2, OUT, SUB, VNEG, VPOS);
input VPOS;
input VNEG;
input SUB;
output OUT;
input IN2;
input IN1;
input IN0;
nand (OUT,IN2,IN1,IN0);
specify
    specparam
    tplh0 = 1*5 * 1e-12 / 1.0e-12,
        tphl0 = 2*5 * 1e-12 / 1.0e-12,
        tplh1 = 1*5 * 1e-12 / 1.0e-12,
        tphl1 = 2*5 * 1e-12 / 1.0e-12,
        tplh2 = 1*5 * 1e-12 / 1.0e-12,
        tphl2 = 2*5 * 1e-12 / 1.0e-12;
    (IN0 => OUT) = (tplh0,tphl0);
    (IN1 => OUT) = (tplh1,tphl1);
    (IN2 => OUT) = (tplh2,tphl2);
endspecify
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_nand3x2sym
// *
module PLLTS16FFCFRACF_nand3x2sym (VPOS, SUB, IN0, VNEG, IN2, OUT, IN1);
	input 	VPOS;
	input 	SUB;
	input 	IN0;
	input 	VNEG;
	input 	IN2;
	output 	OUT;
	input 	IN1;
    PLLTS16FFCFRACF_nand3x1cstm Xnand3x1cstm (
	.IN0(IN0), .IN1(IN1), .IN2(IN2), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_nand4x1cstm
// *
module PLLTS16FFCFRACF_nand4x1cstm (IN0, IN1, IN2, IN3, OUT, SUB, VNEG, VPOS);
input VPOS;
input VNEG;
input SUB;
output OUT;
input IN3;
input IN2;
input IN1;
input IN0;
nand (OUT,IN3,IN2,IN1,IN0);
specify
    specparam
    tplh0 = 1*5 * 1e-12 / 1.0e-12,
        tphl0 = 2*5 * 1e-12 / 1.0e-12,
        tplh1 = 1*5 * 1e-12 / 1.0e-12,
        tphl1 = 2*5 * 1e-12 / 1.0e-12,
        tplh2 = 1*5 * 1e-12 / 1.0e-12,
        tphl2 = 2*5 * 1e-12 / 1.0e-12,
        tplh3 = 1*5 * 1e-12 / 1.0e-12,
        tphl3 = 2*5 * 1e-12 / 1.0e-12;
    (IN0 => OUT) = (tplh0,tphl0);
    (IN1 => OUT) = (tplh1,tphl1);
    (IN2 => OUT) = (tplh2,tphl2);
    (IN3 => OUT) = (tplh3,tphl3);
endspecify
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_nand5x1cstm
// *
module PLLTS16FFCFRACF_nand5x1cstm (IN0, IN1, IN2, IN3, IN4, OUT, SUB, VNEG, VPOS);
input VPOS;
input VNEG;
input SUB;
output OUT;
input IN4;
input IN3;
input IN2;
input IN1;
input IN0;
nand (OUT,IN4,IN3,IN2,IN1,IN0);
specify
    specparam
    tplh0 = 1*5 * 1e-12 / 1.0e-12,
        tphl0 = 2*5 * 1e-12 / 1.0e-12,
        tplh1 = 1*5 * 1e-12 / 1.0e-12,
        tphl1 = 2*5 * 1e-12 / 1.0e-12,
        tplh2 = 1*5 * 1e-12 / 1.0e-12,
        tphl2 = 2*5 * 1e-12 / 1.0e-12,
        tplh3 = 1*5 * 1e-12 / 1.0e-12,
        tphl3 = 2*5 * 1e-12 / 1.0e-12,
        tplh4 = 1*5 * 1e-12 / 1.0e-12,
        tphl4 = 2*5 * 1e-12 / 1.0e-12;
    (IN0 => OUT) = (tplh0,tphl0);
    (IN1 => OUT) = (tplh1,tphl1);
    (IN2 => OUT) = (tplh2,tphl2);
    (IN3 => OUT) = (tplh3,tphl3);
    (IN4 => OUT) = (tplh3,tphl3);
endspecify
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_nor2x1cstm
// *
module PLLTS16FFCFRACF_nor2x1cstm (IN0, IN1, OUT, SUB, VNEG, VPOS);
input VPOS;
input VNEG;
input SUB;
output OUT;
input IN1;
input IN0;
nor (OUT,IN0,IN1);
specify
    specparam
    tplh0 = 3*5 * 1e-12 / 1.0e-12,
        tphl0 = 1*5 * 1e-12 / 1.0e-12,
        tplh1 = 3*5 * 1e-12 / 1.0e-12,
        tphl1 = 1*5 * 1e-12 / 1.0e-12;
    (IN0 => OUT) = (tplh0,tphl0);
    (IN1 => OUT) = (tplh1,tphl1);
endspecify
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_nor3x1cstm
// *
module PLLTS16FFCFRACF_nor3x1cstm (IN0, IN1, IN2, OUT, SUB, VNEG, VPOS);
input VPOS;
input VNEG;
input SUB;
output OUT;
input IN2;
input IN1;
input IN0;
nor (OUT,IN0,IN1,IN2);
specify
    specparam
    tplh0 = 6*5 * 1e-12 / 1.0e-12,
        tphl0 = 1*5 * 1e-12 / 1.0e-12,
        tplh1 = 6*5 * 1e-12 / 1.0e-12,
        tphl1 = 1*5 * 1e-12 / 1.0e-12,
        tplh2 = 6*5 * 1e-12 / 1.0e-12,
        tphl2 = 1*5 * 1e-12 / 1.0e-12;
    (IN0 => OUT) = (tplh0,tphl0);
    (IN1 => OUT) = (tplh1,tphl1);
    (IN2 => OUT) = (tplh2,tphl2);
endspecify
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_nor4x1cstm
// *
module PLLTS16FFCFRACF_nor4x1cstm (IN0, IN1, IN2, IN3, OUT, SUB, VNEG, VPOS);
input VPOS;
input VNEG;
input SUB;
output OUT;
input IN3;
input IN2;
input IN1;
input IN0;
nor (OUT,IN0,IN1,IN2,IN3);
specify
    specparam
    tplh0 = 6*5 * 1e-12 / 1.0e-12,
        tphl0 = 1*5 * 1e-12 / 1.0e-12,
        tplh1 = 6*5 * 1e-12 / 1.0e-12,
        tphl1 = 1*5 * 1e-12 / 1.0e-12,
        tplh2 = 6*5 * 1e-12 / 1.0e-12,
        tphl2 = 1*5 * 1e-12 / 1.0e-12,
        tplh3 = 6*5 * 1e-12 / 1.0e-12,
        tphl3 = 1*5 * 1e-12 / 1.0e-12;
    (IN0 => OUT) = (tplh0,tphl0);
    (IN1 => OUT) = (tplh1,tphl1);
    (IN2 => OUT) = (tplh2,tphl2);
    (IN3 => OUT) = (tplh3,tphl3);
endspecify
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_nor5x1cstm
// *
module PLLTS16FFCFRACF_nor5x1cstm (IN0, IN1, IN2, IN3, IN4, OUT, SUB, VNEG, VPOS);
input VPOS;
input VNEG;
input SUB;
output OUT;
input IN4;
input IN3;
input IN2;
input IN1;
input IN0;
nor (OUT,IN0,IN1,IN2,IN3,IN4);
specify
    specparam
    tplh0 = 6*5 * 1e-12 / 1.0e-12,
        tphl0 = 1*5 * 1e-12 / 1.0e-12,
        tplh1 = 6*5 * 1e-12 / 1.0e-12,
        tphl1 = 1*5 * 1e-12 / 1.0e-12,
        tplh2 = 6*5 * 1e-12 / 1.0e-12,
        tphl2 = 1*5 * 1e-12 / 1.0e-12,
        tplh3 = 6*5 * 1e-12 / 1.0e-12,
        tphl3 = 1*5 * 1e-12 / 1.0e-12,
        tplh4 = 6*5 * 1e-12 / 1.0e-12,
        tphl4 = 1*5 * 1e-12 / 1.0e-12;
    (IN0 => OUT) = (tplh0,tphl0);
    (IN1 => OUT) = (tplh1,tphl1);
    (IN2 => OUT) = (tplh2,tphl2);
    (IN3 => OUT) = (tplh3,tphl3);
    (IN4 => OUT) = (tplh4,tphl4);
endspecify
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_nor6x1cstm
// *
module PLLTS16FFCFRACF_nor6x1cstm (IN0, IN1, IN2, IN3, IN4,
	IN5, OUT, SUB, VNEG, VPOS);
inout VPOS;
inout IN4;
inout IN2;
inout SUB;
inout IN1;
inout OUT;
inout IN5;
inout VNEG;
inout IN3;
inout IN0;
wire VPOS;
wire IN4;
wire IN2;
wire SUB;
wire OUT;
wire IN1;
wire nor_up;
wire IN5;
wire VNEG;
wire IN3;
wire nor_dn;
wire IN0;
PLLTS16FFCFRACF_and2x1cstm Xand_out ( .IN0(nor_dn), .IN1(nor_up), .OUT(OUT), .SUB(SUB),
	.VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_nor3x1cstm Xnor_up ( .IN0(IN3), .IN1(IN4), .IN2(IN5), .OUT(nor_up),
	.SUB(SUB), .VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_nor3x1cstm Xnor_dn ( .IN0(IN0), .IN1(IN1), .IN2(IN2), .OUT(nor_dn),
	.SUB(SUB), .VNEG(VNEG), .VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_or2x1cstm
// *
module PLLTS16FFCFRACF_or2x1cstm (IN0, IN1, OUT, SUB, VNEG,
	VPOS);
inout VPOS;
inout SUB;
inout IN1;
inout OUT;
inout VNEG;
inout IN0;
wire VPOS;
wire SUB;
wire IN1;
wire OUT;
wire outB;
wire VNEG;
wire IN0;
PLLTS16FFCFRACF_nor2x1cstm X1 ( .IN0(IN0), .IN1(IN1), .OUT(outB), .SUB(SUB),
	.VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_invx1cstm X2 ( .IN(outB), .OUT(OUT), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_or3x1cstm
// *
module PLLTS16FFCFRACF_or3x1cstm (IN0, IN1, IN2, OUT, SUB,
	VNEG, VPOS);
inout VPOS;
inout IN2;
inout SUB;
inout IN1;
inout OUT;
inout VNEG;
inout IN0;
wire VPOS;
wire IN2;
wire outb;
wire SUB;
wire IN1;
wire OUT;
wire VNEG;
wire IN0;
PLLTS16FFCFRACF_nor3x1cstm X1 ( .IN0(IN0), .IN1(IN1), .IN2(IN2), .OUT(outb),
	.SUB(SUB), .VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_invx1cstm Xand_out ( .IN(outb), .OUT(OUT), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_or4x1cstm
// *
module PLLTS16FFCFRACF_or4x1cstm (IN0, IN1, IN2, IN3, OUT,
	SUB, VNEG, VPOS);
inout VPOS;
inout IN2;
inout SUB;
inout IN1;
inout OUT;
inout VNEG;
inout IN3;
inout IN0;
wire VPOS;
wire IN2;
wire outb;
wire SUB;
wire IN1;
wire OUT;
wire VNEG;
wire IN3;
wire IN0;
PLLTS16FFCFRACF_nor4x1cstm X1 ( .IN0(IN0), .IN1(IN1), .IN2(IN2), .IN3(IN3),
	.OUT(outb), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_invx1cstm Xand_out ( .IN(outb), .OUT(OUT), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_or5x1cstm
// *
module PLLTS16FFCFRACF_or5x1cstm (IN0, IN1, IN2, IN3, IN4,
	OUT, SUB, VNEG, VPOS);
inout VPOS;
inout IN4;
inout IN2;
inout SUB;
inout IN1;
inout OUT;
inout VNEG;
inout IN3;
inout IN0;
wire VPOS;
wire IN4;
wire IN2;
wire outb;
wire SUB;
wire IN1;
wire OUT;
wire VNEG;
wire IN3;
wire IN0;
PLLTS16FFCFRACF_nor5x1cstm X1 ( .IN0(IN0), .IN1(IN1), .IN2(IN2), .IN3(IN3),
	.IN4(IN4), .OUT(outb), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS));
PLLTS16FFCFRACF_invx1cstm Xand_out ( .IN(outb), .OUT(OUT), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_or6x1cstm
// *
module PLLTS16FFCFRACF_or6x1cstm (IN0, IN1, IN2, IN3, IN4,
	IN5, OUT, SUB, VNEG, VPOS);
inout VPOS;
inout IN4;
inout IN2;
inout SUB;
inout IN1;
inout OUT;
inout IN5;
inout VNEG;
inout IN3;
inout IN0;
wire VPOS;
wire IN4;
wire IN2;
wire outb;
wire SUB;
wire OUT;
wire IN1;
wire IN5;
wire VNEG;
wire IN3;
wire IN0;
PLLTS16FFCFRACF_invx1cstm Xand_out ( .IN(outb), .OUT(OUT), .SUB(SUB), .VNEG(VNEG),
	.VPOS(VPOS));
PLLTS16FFCFRACF_nor6x1cstm X1 ( .IN0(IN0), .IN1(IN1), .IN2(IN2), .IN3(IN3),
	.IN4(IN4), .IN5(IN5), .OUT(outb), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_pfdet2
// *
module PLLTS16FFCFRACF_pfdet2 (cklock, ckpfd, clkDiv, clkRef, divEn,
	faster, PD, pfdresetB, refEn, resetlock, slower, slowerbb,
	VDD, VSS);
inout divEn;
inout faster;
inout PD;
inout VDD;
inout ckpfd;
inout clkDiv;
inout slowerbb;
inout cklock;
inout slower;
inout refEn;
inout resetlock;
inout clkRef;
inout pfdresetB;
inout VSS;
wire fasteri;
wire divEni;
wire divEnB;
wire divEn;
wire faster;
wire refEnB;
wire PD;
wire VDD;
wire ckpfd;
wire sloweri;
wire downb;
wire refEni;
wire divslipB;
wire slowerbb;
wire NET3;
wire clkDiv;
wire cklock;
wire divslipB_latched;
wire slower;
wire refEn;
wire NET2;
wire resetlock;
wire refslipB_latched;
wire pdB;
wire refslipB;
wire clkRef;
wire NET1;
wire pfdresetB;
wire VSS;
wire upb;
wire NET5;
wire NET6;
PLLTS16FFCFRACF_bbcomp2 X6 ( .dnin(fasteri), .upbb(slowerbb), .upin(sloweri), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_nand2x1sym X10 ( .IN0(sloweri), .IN1(fasteri), .OUT(cklock), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1sym X7 ( .IN0(sloweri), .IN1(fasteri), .OUT(NET5), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X1 ( .IN(PD), .OUT(pdB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand2x1sym X4 ( .IN0(pfdresetB), .IN1(upb), .OUT(NET2), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1sym X5 ( .IN0(pfdresetB), .IN1(downb), .OUT(NET3), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X15 ( .IN(refEn), .OUT(refEnB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand2x1sym X16 ( .IN0(upb), .IN1(refEnB), .OUT(refEni), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1sym X17 ( .IN0(downb), .IN1(divEnB), .OUT(divEni), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X18 ( .IN(divEn), .OUT(divEnB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X19 ( .CLK(clkRef), .D(refslipB), .Q(refslipB_latched), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1sym X20 ( .IN0(NET2), .IN1(refEn), .OUT(refslipB), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X21 ( .CLK(clkDiv), .D(divslipB), .Q(divslipB_latched), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1sym X22 ( .IN0(NET3), .IN1(divEn), .OUT(divslipB), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand3x1cstm X27 ( .IN0(pdB), .IN1(divslipB_latched), .IN2(refslipB_latched), .OUT(resetlock),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx8cstm X29 ( .IN(NET6), .OUT(slower), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx2cstm X30 ( .IN(sloweri), .OUT(NET6), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx8cstm X31 ( .IN(NET1), .OUT(faster), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx2cstm X32 ( .IN(fasteri), .OUT(NET1), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xdffdn ( .CLK(clkDiv), .D(divEni), .Q(sloweri), .QB(downb),
	.RB(pfdresetB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xdffup ( .CLK(clkRef), .D(refEni), .Q(fasteri), .QB(upb),
	.RB(pfdresetB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx2cstm X8 ( .IN(NET5), .OUT(ckpfd), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_pfdet_top
// *
module PLLTS16FFCFRACF_pfdet_top (callock, cklock, clkDiv, clkRef, clkshft,
	divEn, DSKEWCALBYP, DSKEWCALCNT, DSKEWCALEN, DSKEWCALIN, DSKEWCALOUT, DSKEWFASTCAL,
	faster, lock_int, PD, pfdresetB, phshft, refEn, resetlock,
	slower, VDD, VSS);
inout divEn;
inout faster;
inout DSKEWCALBYP;
inout PD;
inout VDD;
inout [11:0] DSKEWCALOUT;
inout [2:0] DSKEWCALCNT;
inout DSKEWFASTCAL;
inout clkDiv;
inout cklock;
inout slower;
inout refEn;
inout lock_int;
inout resetlock;
inout callock;
inout [4:0] phshft;
inout DSKEWCALEN;
inout clkshft;
inout [11:0] DSKEWCALIN;
inout clkRef;
inout pfdresetB;
inout VSS;
wire upbb;
wire divEn;
wire faster;
wire PD;
wire DSKEWCALBYP;
wire VDD;
wire [11:0] DSKEWCALOUT;
wire ckpfd;
wire [2:0] DSKEWCALCNT;
wire DSKEWFASTCAL;
wire clkDiv;
wire cklock;
wire slower;
wire refEn;
wire lock_int;
wire resetlock;
wire callock;
wire [4:0] phshft;
wire DSKEWCALEN;
wire [11:0] DSKEWCALIN;
wire clkshft;
wire clkRef;
wire pfdresetB;
wire VSS;
PLLTS16FFCFRACF_pfdet2 Xpfd_core ( .cklock(cklock), .ckpfd(ckpfd), .clkDiv(clkDiv), .clkRef(clkRef),
	.divEn(divEn), .faster(faster), .PD(PD), .pfdresetB(pfdresetB), .refEn(refEn), .resetlock(resetlock), .slower(slower),
	.slowerbb(upbb), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_bbpfd2 X1 ( .calbyp(DSKEWCALBYP), .calcnt({DSKEWCALCNT[2], DSKEWCALCNT[1], DSKEWCALCNT[0]}),
	.calEn(DSKEWCALEN), .calin({DSKEWCALIN[11], DSKEWCALIN[10], DSKEWCALIN[9], DSKEWCALIN[8], DSKEWCALIN[7], DSKEWCALIN[6],
	DSKEWCALIN[5], DSKEWCALIN[4], DSKEWCALIN[3], DSKEWCALIN[2], DSKEWCALIN[1], DSKEWCALIN[0]}), .callock(callock),
	.ckpfd(ckpfd), .clkshift(clkshft), .count_out({DSKEWCALOUT[11], DSKEWCALOUT[10], DSKEWCALOUT[9], DSKEWCALOUT[8], DSKEWCALOUT[7],
	DSKEWCALOUT[6], DSKEWCALOUT[5], DSKEWCALOUT[4], DSKEWCALOUT[3], DSKEWCALOUT[2], DSKEWCALOUT[1], DSKEWCALOUT[0]}),
	.fastcal(DSKEWFASTCAL), .LOCK(lock_int), .phshift({phshft[4], phshft[3], phshft[2], phshft[1], phshft[0]}),
	.upbb(upbb), .VDD(VDD), .VSS(VSS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_pllcore
// *
module PLLTS16FFCFRACF_pllcore (calcnt, callock, ckdsm, cklock, DACEN,
	DSKEWCALBYP, DSKEWCALEN, DSKEWCALIN, DSKEWCALOUT, DSKEWFASTCAL, DSMEN, errorneg,
	errorpos, FBDIV, FOUT, FREF, lock_int, PD, refDivEn,
	refEn, resetlock, VDDHV, VDDPOST, VDDREF, VSSHV, VSSREF);
inout FOUT;
inout VSSREF;
inout DSKEWCALBYP;
inout PD;
inout [11:0] FBDIV;
inout [11:0] DSKEWCALOUT;
inout refDivEn;
inout VDDHV;
inout DSKEWFASTCAL;
inout VSSHV;
inout ckdsm;
inout [4:0] errorpos;
inout [4:0] errorneg;
inout cklock;
inout DACEN;
inout DSMEN;
inout VDDREF;
inout refEn;
inout VDDPOST;
inout lock_int;
inout resetlock;
inout FREF;
inout callock;
inout [2:0] calcnt;
inout DSKEWCALEN;
inout [11:0] DSKEWCALIN;
wire FOUT;
wire clkshift_cp;
wire VSSREF;
wire [16-1:0] ibias_1_;
wire [2:0] vfollow;
wire divEn;
wire faster;
wire phi1;
wire [1:0] uphb;
wire [1:0] uph;
wire PD;
wire DSKEWCALBYP;
wire clkshift;
wire [11:0] FBDIV;
wire lock_intB;
wire startup;
wire [11:0] DSKEWCALOUT;
wire VDDHV;
wire refDivEn;
wire v0;
wire foutvcofb;
wire vring;
wire DSKEWFASTCAL;
wire [1:0] dnh;
wire VSSHV;
wire ckdsm;
wire PLLEN;
wire [4:0] errorpos;
wire [4:0] errorneg;
wire pdHB;
wire cklock;
wire [16-1:0] ibias_0_;
wire ckdiv;
wire DSMEN;
wire DACEN;
wire slower;
wire VDDREF;
wire [1:0] dnhb;
wire [4:0] phshiftcp;
wire VDDPOST;
wire refEn;
wire lock_int;
wire [3*16-1:0] vtunei;
wire resetlock;
wire ckdacen;
wire FREF;
wire [4:0] phshftpfd;
wire callock;
wire [2:0] calcnt;
wire DSKEWCALEN;
wire [11:0] DSKEWCALIN;
wire phi2;
wire pdH;
wire pfdresetB;
PLLTS16FFCFRACF_div16to4095_ep Xfbdiv ( .ck1(foutvcofb), .ckDACen(ckdacen), .ckdmd(ckdiv), .ckdsm(ckdsm),
	.ckpfdEn(divEn), .div({FBDIV[11], FBDIV[10], FBDIV[9], FBDIV[8], FBDIV[7], FBDIV[6],
	FBDIV[5], FBDIV[4], FBDIV[3], FBDIV[2], FBDIV[1], FBDIV[0]}), .dsmen(DSMEN),
	.rst(PD), .VDD(VDDREF), .VSS(VSSREF));
PLLTS16FFCFRACF_mux2x1cstm Xclkshiftmux ( .IN0(clkshift), .IN1(FREF), .OUT(clkshift_cp), .SEL(DSKEWCALBYP),
	.SUB(VSSREF), .VNEG(VSSREF), .VPOS(VDDREF));
PLLTS16FFCFRACF_nor2x1cstm X3 ( .IN0(PD), .IN1(lock_int), .OUT(lock_intB), .SUB(VSSREF),
	.VNEG(VSSREF), .VPOS(VDDREF));
PLLTS16FFCFRACF_vco_ring_hv_2pole Xvco ( .ckDACen(ckdacen), .DACEN(DACEN), .DSMEN(DSMEN), .errordown({errorneg[4],
	errorneg[3], errorneg[2], errorneg[1], errorneg[0]}), .errorup({errorpos[4], errorpos[3], errorpos[2],
	errorpos[1], errorpos[0]}), .faster(faster), .ibias_1_(ibias_1_), .ibias_0_(ibias_0_), .outfb(foutvcofb), .outpost(FOUT),
	.PD(PD), .slower(slower), .v0(v0), .VDDHV(VDDHV), .VDDPOST(VDDPOST), .VDDREF(VDDREF), .vfollow({vfollow[2],
	vfollow[1], vfollow[0]}), .vring(vring), .VSSHV(VSSHV), .VSSREF(VSSREF), .VTUNEI(vtunei));
PLLTS16FFCFRACF_loopfilter_sc Xloopfilter_sc ( .PD(PD), .pdH(pdH), .pdHB(pdHB), .phi1(phi1),
	.phi2(phi2), .startup(startup), .VDDHV(VDDHV), .VDDPOST(VDDPOST), .VDDREF(VDDREF), .vfollow(vfollow[0]), .VSS(VSSREF),
	.vtunei(vtunei));
PLLTS16FFCFRACF_startup_logic_sc Xstartup ( .clkref(FREF), .divEn(divEn), .lock_int(lock_int), .pd(PD),
	.phi1(phi1), .phi2(phi2), .refDivEn(refDivEn), .refEn(refEn), .startup(startup), .VDD(VDDREF), .VSS(VSSREF));
PLLTS16FFCFRACF_mux2x1cstm Xphshftmux_4_ ( .IN0(phshftpfd[4]), .IN1(DSKEWCALIN[11]), .OUT(phshiftcp[4]), .SEL(DSKEWCALBYP),
	.SUB(VSSREF), .VNEG(VSSREF), .VPOS(VDDREF));
PLLTS16FFCFRACF_mux2x1cstm Xphshftmux_3_ ( .IN0(phshftpfd[3]), .IN1(DSKEWCALIN[10]), .OUT(phshiftcp[3]), .SEL(DSKEWCALBYP),
	.SUB(VSSREF), .VNEG(VSSREF), .VPOS(VDDREF));
PLLTS16FFCFRACF_mux2x1cstm Xphshftmux_2_ ( .IN0(phshftpfd[2]), .IN1(DSKEWCALIN[9]), .OUT(phshiftcp[2]), .SEL(DSKEWCALBYP),
	.SUB(VSSREF), .VNEG(VSSREF), .VPOS(VDDREF));
PLLTS16FFCFRACF_mux2x1cstm Xphshftmux_1_ ( .IN0(phshftpfd[1]), .IN1(DSKEWCALIN[8]), .OUT(phshiftcp[1]), .SEL(DSKEWCALBYP),
	.SUB(VSSREF), .VNEG(VSSREF), .VPOS(VDDREF));
PLLTS16FFCFRACF_mux2x1cstm Xphshftmux_0_ ( .IN0(phshftpfd[0]), .IN1(DSKEWCALIN[7]), .OUT(phshiftcp[0]), .SEL(DSKEWCALBYP),
	.SUB(VSSREF), .VNEG(VSSREF), .VPOS(VDDREF));
PLLTS16FFCFRACF_invx1cstm X1 ( .IN(PD), .OUT(PLLEN), .SUB(VSSREF), .VNEG(VSSREF),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_qpmp Xqpmp ( .clkshft(clkshift_cp), .dnh({dnh[1], dnh[0]}), .dnhb({dnhb[1],
	dnhb[0]}), .faster(faster), .fastlockEn(lock_intB), .ibias_1_(ibias_1_), .ibias_0_(ibias_0_), .PD(PD), .pdH(pdH),
	.pdHB(pdHB), .pfdresetB(pfdresetB), .phshft({phshiftcp[4], phshiftcp[3], phshiftcp[2], phshiftcp[1], phshiftcp[0]}),
	.slower(slower), .uph({uph[1], uph[0]}), .uphb({uphb[1], uphb[0]}), .VDDHV(VDDHV), .VDDLV(VDDREF),
	.vfollow({vfollow[2], vfollow[1], vfollow[0]}), .VSS(VSSHV), .VTUNEI(vtunei));
PLLTS16FFCFRACF_pfdet_top Xpfd ( .callock(callock), .cklock(cklock), .clkDiv(ckdiv), .clkRef(FREF),
	.clkshft(clkshift), .divEn(divEn), .DSKEWCALBYP(DSKEWCALBYP), .DSKEWCALCNT({calcnt[2], calcnt[1], calcnt[0]}), .DSKEWCALEN(DSKEWCALEN),
	.DSKEWCALIN({DSKEWCALIN[11], DSKEWCALIN[10], DSKEWCALIN[9], DSKEWCALIN[8], DSKEWCALIN[7], DSKEWCALIN[6], DSKEWCALIN[5],
	DSKEWCALIN[4], DSKEWCALIN[3], DSKEWCALIN[2], DSKEWCALIN[1], DSKEWCALIN[0]}), .DSKEWCALOUT({DSKEWCALOUT[11], DSKEWCALOUT[10],
	DSKEWCALOUT[9], DSKEWCALOUT[8], DSKEWCALOUT[7], DSKEWCALOUT[6], DSKEWCALOUT[5], DSKEWCALOUT[4], DSKEWCALOUT[3],
	DSKEWCALOUT[2], DSKEWCALOUT[1], DSKEWCALOUT[0]}), .DSKEWFASTCAL(DSKEWFASTCAL), .faster(faster), .lock_int(lock_int), .PD(PD),
	.pfdresetB(pfdresetB), .phshft({phshftpfd[4], phshftpfd[3], phshftpfd[2], phshftpfd[1], phshftpfd[0]}), .refEn(refEn),
	.resetlock(resetlock), .slower(slower), .VDD(VDDREF), .VSS(VSSREF));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_postdiv_2to64
// *
module PLLTS16FFCFRACF_postdiv_2to64 (ck1, ck2, ck3, ck4, ck5,
	ck6, ck8, ck10, ck12, ck16, ck20, ck24,
	ck32, ck40, ck48, ck64, div10en, div12en, div16en,
	div20en, div24en, div2en, div32en, div3en, div40en, div48en,
	div4en, div5en, div64en, div6en, div8en, VDD, VSS);
inout ck8;
inout ck24;
inout div48en;
inout div40en;
inout VDD;
inout ck10;
inout ck4;
inout ck6;
inout div64en;
inout div10en;
inout ck3;
inout div3en;
inout ck16;
inout div6en;
inout VSS;
inout ck2;
inout ck48;
inout ck1;
inout div12en;
inout div5en;
inout ck12;
inout ck20;
inout div16en;
inout div8en;
inout ck64;
inout ck40;
inout div2en;
inout ck5;
inout div24en;
inout div20en;
inout div32en;
inout ck32;
inout div4en;
wire ck8;
wire ck24;
wire div48en;
wire div40en;
wire VDD;
wire ck10;
wire ck4;
wire ck6;
wire div64en;
wire div10en;
wire ck3;
wire div3en;
wire ck16;
wire div6en;
wire VSS;
wire ck2;
wire ck48;
wire ck1;
wire div12en;
wire div5en;
wire ck12;
wire ck20;
wire div8en;
wire div16en;
wire ck64;
wire ck40;
wire div2en;
wire ck5;
wire div24en;
wire div20en;
wire div32en;
wire ck32;
wire div4en;
PLLTS16FFCFRACF_div2_rst Xdiv2 ( .ck1(ck1), .ck2(ck2), .en(div2en), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_div3_rst Xdiv3 ( .ck1(ck1), .ck3(ck3), .en(div3en), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_div2_rst Xdiv4 ( .ck1(ck2), .ck2(ck4), .en(div4en), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_div5_rst Xdiv5 ( .ck1(ck1), .ck5(ck5), .en(div5en), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_div2_rst Xdiv6 ( .ck1(ck3), .ck2(ck6), .en(div6en), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_div2_rst Xdiv8 ( .ck1(ck4), .ck2(ck8), .en(div8en), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_div2_rst Xdiv10 ( .ck1(ck5), .ck2(ck10), .en(div10en), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_div2_rst Xdiv12 ( .ck1(ck6), .ck2(ck12), .en(div12en), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_div2_rst Xdiv16 ( .ck1(ck8), .ck2(ck16), .en(div16en), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_div2_rst Xdiv20 ( .ck1(ck10), .ck2(ck20), .en(div20en), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_div2_rst Xdiv24 ( .ck1(ck12), .ck2(ck24), .en(div24en), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_div2_rst Xdiv32 ( .ck1(ck16), .ck2(ck32), .en(div32en), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_div2_rst Xdiv40 ( .ck1(ck20), .ck2(ck40), .en(div40en), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_div2_rst Xdiv48 ( .ck1(ck24), .ck2(ck48), .en(div48en), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_div2_rst Xdiv64 ( .ck1(ck32), .ck2(ck64), .en(div64en), .VDD(VDD),
	.VSS(VSS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_postdiv_decoder_2b
// *
module PLLTS16FFCFRACF_postdiv_decoder_2b (en, en4, en6, en8, en12,
	postdiv, VDD, VSS);
inout en12;
inout en4;
inout VDD;
inout [1:0] postdiv;
inout VSS;
inout en6;
inout en;
inout en8;
wire en4_buf;
wire en8_buf;
wire en12;
wire en4;
wire [1:0] divb;
wire VDD;
wire en12_buf;
wire en6_buf;
wire [1:0] postdiv;
wire VSS;
wire en6;
wire en;
wire en8;
PLLTS16FFCFRACF_and2x1cstm Xand2 ( .IN0(en), .IN1(en6_buf), .OUT(en6), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and2x1cstm Xand3 ( .IN0(en), .IN1(en8_buf), .OUT(en8), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and2x1cstm Xand4 ( .IN0(en), .IN1(en12_buf), .OUT(en12), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and2x1cstm Xand1 ( .IN0(en), .IN1(en4_buf), .OUT(en4), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and2x1cstm X2 ( .IN0(postdiv[0]), .IN1(divb[1]), .OUT(en6_buf), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and2x1cstm X3 ( .IN0(postdiv[0]), .IN1(postdiv[1]), .OUT(en12_buf), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and2x1cstm X4 ( .IN0(divb[0]), .IN1(postdiv[1]), .OUT(en8_buf), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and2x1cstm X1 ( .IN0(divb[0]), .IN1(divb[1]), .OUT(en4_buf), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv1_1_ ( .IN(postdiv[1]), .OUT(divb[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv1_0_ ( .IN(postdiv[0]), .OUT(divb[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_postdiv_decoder_4b
// *
module PLLTS16FFCFRACF_postdiv_decoder_4b (en, en2, en3, en4, en5,
	en6, en8, en10, en12, en16, en20, en24,
	en32, en40, en48, en64, postdiv, VDD, VSS);
inout en2;
inout en40;
inout en10;
inout en12;
inout en5;
inout en4;
inout VDD;
inout en32;
inout en3;
inout [3:0] postdiv;
inout en16;
inout VSS;
inout en48;
inout en24;
inout en64;
inout en6;
inout en;
inout en8;
inout en20;
wire en2;
wire en40;
wire en10;
wire en12;
wire en5;
wire [3:0] divb;
wire en4;
wire VDD;
wire en32;
wire en3;
wire [3:0] postdiv;
wire en16;
wire VSS;
wire en48;
wire en24;
wire en64;
wire en6;
wire en;
wire en8;
wire [3:0] div;
wire en20;
PLLTS16FFCFRACF_and2x1cstm Xand1_3_ ( .IN0(en), .IN1(postdiv[3]), .OUT(div[3]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and2x1cstm Xand1_2_ ( .IN0(en), .IN1(postdiv[2]), .OUT(div[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and2x1cstm Xand1_1_ ( .IN0(en), .IN1(postdiv[1]), .OUT(div[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and2x1cstm Xand1_0_ ( .IN0(en), .IN1(postdiv[0]), .OUT(div[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and4x1cstm X13 ( .IN0(div[0]), .IN1(div[1]), .IN2(div[2]), .IN3(div[3]),
	.OUT(en64), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and4x1cstm X14 ( .IN0(div[0]), .IN1(divb[1]), .IN2(div[2]), .IN3(div[3]),
	.OUT(en40), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and4x1cstm X15 ( .IN0(divb[0]), .IN1(div[1]), .IN2(div[2]), .IN3(div[3]),
	.OUT(en48), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and4x1cstm X9 ( .IN0(div[0]), .IN1(div[1]), .IN2(divb[2]), .IN3(div[3]),
	.OUT(en24), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and4x1cstm X10 ( .IN0(divb[0]), .IN1(div[1]), .IN2(divb[2]), .IN3(div[3]),
	.OUT(en20), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and4x1cstm X11 ( .IN0(divb[0]), .IN1(divb[1]), .IN2(div[2]), .IN3(div[3]),
	.OUT(en32), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and4x1cstm X12 ( .IN0(div[0]), .IN1(divb[1]), .IN2(divb[2]), .IN3(div[3]),
	.OUT(en16), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and4x1cstm X5 ( .IN0(divb[0]), .IN1(div[1]), .IN2(div[2]), .IN3(divb[3]),
	.OUT(en8), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and4x1cstm X6 ( .IN0(div[0]), .IN1(div[1]), .IN2(div[2]), .IN3(divb[3]),
	.OUT(en10), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and4x1cstm X7 ( .IN0(div[0]), .IN1(divb[1]), .IN2(div[2]), .IN3(divb[3]),
	.OUT(en6), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and4x1cstm X8 ( .IN0(divb[0]), .IN1(divb[1]), .IN2(divb[2]), .IN3(div[3]),
	.OUT(en12), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and4x1cstm X4 ( .IN0(div[0]), .IN1(div[1]), .IN2(divb[2]), .IN3(divb[3]),
	.OUT(en4), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and4x1cstm X3 ( .IN0(divb[0]), .IN1(divb[1]), .IN2(div[2]), .IN3(divb[3]),
	.OUT(en5), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and4x1cstm X2 ( .IN0(divb[0]), .IN1(div[1]), .IN2(divb[2]), .IN3(divb[3]),
	.OUT(en3), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and4x1cstm X1 ( .IN0(div[0]), .IN1(divb[1]), .IN2(divb[2]), .IN3(divb[3]),
	.OUT(en2), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv1_3_ ( .IN(div[3]), .OUT(divb[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv1_2_ ( .IN(div[2]), .OUT(divb[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv1_1_ ( .IN(div[1]), .OUT(divb[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv1_0_ ( .IN(div[0]), .OUT(divb[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_postdiv_decoder_top
// *
module PLLTS16FFCFRACF_postdiv_decoder_top (div10en, div12en, div16en, div20en, div24en,
	div2en, div32en, div3en, div40en, div48en, div4en, div5en,
	div64en, div6en, div8en, FOUTEN, POSTDIV0, POSTDIV1, POSTDIV2,
	POSTDIV3, POSTDIV4, VDD, VSS);
inout [1:0] POSTDIV4;
inout div48en;
inout div40en;
inout VDD;
inout [3:0] POSTDIV1;
inout div64en;
inout [4:0] FOUTEN;
inout div10en;
inout [3:0] POSTDIV2;
inout [3:0] POSTDIV3;
inout div3en;
inout div6en;
inout VSS;
inout div12en;
inout div5en;
inout div16en;
inout div8en;
inout [3:0] POSTDIV0;
inout div2en;
inout div24en;
inout div20en;
inout div32en;
inout div4en;
wire [3:0] en2;
wire [3:0] en40;
wire en10_out;
wire [3:0] en10;
wire [4:0] en12;
wire [1:0] POSTDIV4;
wire en2_out;
wire en5_out;
wire [3:0] en5;
wire [4:0] en4;
wire div48en;
wire div40en;
wire VDD;
wire [3:0] en32;
wire [3:0] en3;
wire [3:0] POSTDIV1;
wire en3_out;
wire en64_out;
wire [4:0] FOUTEN;
wire div64en;
wire en24_out;
wire div10en;
wire en16_out;
wire [3:0] POSTDIV2;
wire en4_out;
wire [3:0] POSTDIV3;
wire en20_out;
wire [3:0] en16;
wire div3en;
wire div6en;
wire VSS;
wire [3:0] en48;
wire en12_out;
wire en48_out;
wire en32_out;
wire div12en;
wire [3:0] en24;
wire div5en;
wire [3:0] en64;
wire div16en;
wire div8en;
wire en6_out;
wire [3:0] POSTDIV0;
wire [4:0] en6;
wire [4:0] en8;
wire en40_out;
wire div2en;
wire en8_out;
wire div24en;
wire [3:0] en20;
wire div20en;
wire div32en;
wire div4en;
PLLTS16FFCFRACF_or4x1cstm X16 ( .IN0(en40[0]), .IN1(en40[1]), .IN2(en40[2]), .IN3(en40[3]),
	.OUT(en40_out), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or4x1cstm X14 ( .IN0(en24[0]), .IN1(en24[1]), .IN2(en24[2]), .IN3(en24[3]),
	.OUT(en24_out), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or4x1cstm X15 ( .IN0(en32[0]), .IN1(en32[1]), .IN2(en32[2]), .IN3(en32[3]),
	.OUT(en32_out), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or4x1cstm X17 ( .IN0(en48[0]), .IN1(en48[1]), .IN2(en48[2]), .IN3(en48[3]),
	.OUT(en48_out), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or4x1cstm X18 ( .IN0(en64[0]), .IN1(en64[1]), .IN2(en64[2]), .IN3(en64[3]),
	.OUT(en64_out), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or4x1cstm X13 ( .IN0(en20[0]), .IN1(en20[1]), .IN2(en20[2]), .IN3(en20[3]),
	.OUT(en20_out), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or5x1cstm X9 ( .IN0(en8[0]), .IN1(en8[1]), .IN2(en8[2]), .IN3(en8[3]),
	.IN4(en8[4]), .OUT(en8_out), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or4x1cstm X10 ( .IN0(en10[0]), .IN1(en10[1]), .IN2(en10[2]), .IN3(en10[3]),
	.OUT(en10_out), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or5x1cstm X11 ( .IN0(en12[0]), .IN1(en12[1]), .IN2(en12[2]), .IN3(en12[3]),
	.IN4(en12[4]), .OUT(en12_out), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or4x1cstm X12 ( .IN0(en16[0]), .IN1(en16[1]), .IN2(en16[2]), .IN3(en16[3]),
	.OUT(en16_out), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or5x1cstm X8 ( .IN0(en6[0]), .IN1(en6[1]), .IN2(en6[2]), .IN3(en6[3]),
	.IN4(en6[4]), .OUT(en6_out), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or5x1cstm X6 ( .IN0(en4[0]), .IN1(en4[1]), .IN2(en4[2]), .IN3(en4[3]),
	.IN4(en4[4]), .OUT(en4_out), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or4x1cstm X7 ( .IN0(en5[0]), .IN1(en5[1]), .IN2(en5[2]), .IN3(en5[3]),
	.OUT(en5_out), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or4x1cstm X5 ( .IN0(en3[0]), .IN1(en3[1]), .IN2(en3[2]), .IN3(en3[3]),
	.OUT(en3_out), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or4x1cstm X4 ( .IN0(en2[0]), .IN1(en2[1]), .IN2(en2[2]), .IN3(en2[3]),
	.OUT(en2_out), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_postdiv_decoder_2b X1 ( .en(FOUTEN[4]), .en4(en4[4]), .en6(en6[4]), .en8(en8[4]),
	.en12(en12[4]), .postdiv({POSTDIV4[1], POSTDIV4[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_postdiv_decoder_4b X2_3_ ( .en(FOUTEN[3]), .en2(en2[3]), .en3(en3[3]), .en4(en4[3]),
	.en5(en5[3]), .en6(en6[3]), .en8(en8[3]), .en10(en10[3]), .en12(en12[3]), .en16(en16[3]), .en20(en20[3]),
	.en24(en24[3]), .en32(en32[3]), .en40(en40[3]), .en48(en48[3]), .en64(en64[3]), .postdiv({POSTDIV3[3], POSTDIV3[2],
	POSTDIV3[1], POSTDIV3[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_postdiv_decoder_4b X2_2_ ( .en(FOUTEN[2]), .en2(en2[2]), .en3(en3[2]), .en4(en4[2]),
	.en5(en5[2]), .en6(en6[2]), .en8(en8[2]), .en10(en10[2]), .en12(en12[2]), .en16(en16[2]), .en20(en20[2]),
	.en24(en24[2]), .en32(en32[2]), .en40(en40[2]), .en48(en48[2]), .en64(en64[2]), .postdiv({POSTDIV2[3], POSTDIV2[2],
	POSTDIV2[1], POSTDIV2[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_postdiv_decoder_4b X2_1_ ( .en(FOUTEN[1]), .en2(en2[1]), .en3(en3[1]), .en4(en4[1]),
	.en5(en5[1]), .en6(en6[1]), .en8(en8[1]), .en10(en10[1]), .en12(en12[1]), .en16(en16[1]), .en20(en20[1]),
	.en24(en24[1]), .en32(en32[1]), .en40(en40[1]), .en48(en48[1]), .en64(en64[1]), .postdiv({POSTDIV1[3], POSTDIV1[2],
	POSTDIV1[1], POSTDIV1[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_postdiv_decoder_4b X2_0_ ( .en(FOUTEN[0]), .en2(en2[0]), .en3(en3[0]), .en4(en4[0]),
	.en5(en5[0]), .en6(en6[0]), .en8(en8[0]), .en10(en10[0]), .en12(en12[0]), .en16(en16[0]), .en20(en20[0]),
	.en24(en24[0]), .en32(en32[0]), .en40(en40[0]), .en48(en48[0]), .en64(en64[0]), .postdiv({POSTDIV0[3], POSTDIV0[2],
	POSTDIV0[1], POSTDIV0[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_diven_decoder X3 ( .div10en(div10en), .div12en(div12en), .div16en(div16en), .div20en(div20en),
	.div24en(div24en), .div2en(div2en), .div32en(div32en), .div3en(div3en), .div40en(div40en), .div48en(div48en), .div4en(div4en),
	.div5en(div5en), .div64en(div64en), .div6en(div6en), .div8en(div8en), .en2(en2_out), .en3(en3_out), .en4(en4_out),
	.en5(en5_out), .en6(en6_out), .en8(en8_out), .en10(en10_out), .en12(en12_out), .en16(en16_out), .en20(en20_out),
	.en24(en24_out), .en32(en32_out), .en40(en40_out), .en48(en48_out), .en64(en64_out), .VDD(VDD), .VSS(VSS));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_postdiv_sync_3b
// *
module PLLTS16FFCFRACF_postdiv_sync_3b (CLK, DIV, DIV_SYNC, fouten, VDD,
	VSS);
inout VDD;
inout CLK;
inout VSS;
inout [2:0] DIV_SYNC;
inout [2:0] DIV;
inout fouten;
wire clk16_int2;
wire fouten2;
wire VDD;
wire [2:0] postdiv_sync;
wire [2:0] divsync2;
wire [2:0] postdiv_changed;
wire [2:0] postdiv_sync_int;
wire CLK;
wire VSS;
wire fouten1;
wire clk4_buf;
wire [2:0] DIV_SYNC;
wire clk16_buf;
wire [2:0] DIV;
wire fouten;
wire [2:0] postdiv_int;
wire fouten1b;
wire [2:0] divsync1;
wire clk16_buf2;
wire clk16_int1;
wire clk4_int1;
wire CLKB;
wire clk4_int2;
wire postdiv_stable;
PLLTS16FFCFRACF_invx4cstm Xinv2div16 ( .IN(clk16_int2), .OUT(clk16_buf2), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx4cstm Xinv1div16 ( .IN(clk16_int2), .OUT(clk16_buf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffx2cstm Xff2div16 ( .CLK(clk4_buf), .D(clk16_int1), .Q(clk16_int2), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xff1div16 ( .CLK(clk4_buf), .D(clk16_buf), .Q(clk16_int1), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xff2div4 ( .CLK(CLKB), .D(clk4_int1), .Q(clk4_int2), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx2cstm Xinvdiv4 ( .IN(clk4_int2), .OUT(clk4_buf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xff1div4 ( .CLK(CLKB), .D(clk4_buf), .Q(clk4_int1), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx8cstm X3 ( .IN(CLK), .OUT(CLKB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X4 ( .CLK(clk16_buf), .D(fouten2), .Q(fouten), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nor3x1cstm Xnor_alarms ( .IN0(postdiv_changed[0]), .IN1(postdiv_changed[1]), .IN2(postdiv_changed[2]), .OUT(postdiv_stable),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X5 ( .IN0(postdiv_stable), .IN1(fouten1b), .OUT(fouten2), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xsel_postdiven_2_ ( .IN0(divsync2[2]), .IN1(postdiv_sync[2]), .OUT(postdiv_sync_int[2]), .SEL(postdiv_stable),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xsel_postdiven_1_ ( .IN0(divsync2[1]), .IN1(postdiv_sync[1]), .OUT(postdiv_sync_int[1]), .SEL(postdiv_stable),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xsel_postdiven_0_ ( .IN0(divsync2[0]), .IN1(postdiv_sync[0]), .OUT(postdiv_sync_int[0]), .SEL(postdiv_stable),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X7_2_ ( .IN(divsync1[2]), .OUT(DIV_SYNC[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X7_1_ ( .IN(divsync1[1]), .OUT(DIV_SYNC[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X7_0_ ( .IN(divsync1[0]), .OUT(DIV_SYNC[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X6_2_ ( .IN(divsync2[2]), .OUT(divsync1[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X6_1_ ( .IN(divsync2[1]), .OUT(divsync1[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X6_0_ ( .IN(divsync2[0]), .OUT(divsync1[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X1 ( .CLK(clk16_buf2), .D(postdiv_stable), .Q(fouten1), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X2 ( .IN(fouten1), .OUT(fouten1b), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xff_enout_2_ ( .CLK(clk16_buf2), .D(postdiv_sync_int[2]), .Q(divsync2[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xff_enout_1_ ( .CLK(clk16_buf2), .D(postdiv_sync_int[1]), .Q(divsync2[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xff_enout_0_ ( .CLK(clk16_buf2), .D(postdiv_sync_int[0]), .Q(divsync2[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffsync1_2_ ( .CLK(clk16_buf2), .D(DIV[2]), .Q(postdiv_int[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffsync1_1_ ( .CLK(clk16_buf2), .D(DIV[1]), .Q(postdiv_int[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffsync1_0_ ( .CLK(clk16_buf2), .D(DIV[0]), .Q(postdiv_int[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffsync2_2_ ( .CLK(clk16_buf2), .D(postdiv_int[2]), .Q(postdiv_sync[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffsync2_1_ ( .CLK(clk16_buf2), .D(postdiv_int[1]), .Q(postdiv_sync[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffsync2_0_ ( .CLK(clk16_buf2), .D(postdiv_int[0]), .Q(postdiv_sync[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tgxor2x1cstm Xxor_postdiv_2_ ( .IN0(postdiv_sync[2]), .IN1(postdiv_int[2]), .OUT(postdiv_changed[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tgxor2x1cstm Xxor_postdiv_1_ ( .IN0(postdiv_sync[1]), .IN1(postdiv_int[1]), .OUT(postdiv_changed[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tgxor2x1cstm Xxor_postdiv_0_ ( .IN0(postdiv_sync[0]), .IN1(postdiv_int[0]), .OUT(postdiv_changed[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_postdiv_sync_5b
// *
module PLLTS16FFCFRACF_postdiv_sync_5b (CLK, DIV, DIV_SYNC, fouten, PLLEN,
	VDD, VSS);
inout VDD;
inout CLK;
inout VSS;
inout [4:0] DIV_SYNC;
inout [4:0] DIV;
inout fouten;
inout PLLEN;
wire clk16_int2;
wire fouten2;
wire VDD;
wire [4:0] postdiv_sync;
wire [4:0] divsync2;
wire [4:0] postdiv_changed;
wire [4:0] postdiv_sync_int;
wire CLK;
wire VSS;
wire fouten1;
wire clk4_buf;
wire [4:0] DIV_SYNC;
wire clk16_buf;
wire [4:0] DIV;
wire fouten;
wire [4:0] postdiv_int;
wire PLLEN;
wire [4:0] divsync1;
wire fouten1b;
wire clk16_int1;
wire clk16_buf2;
wire clk4_int1;
wire CLKB;
wire clk4_int2;
wire postdiv_stable;
PLLTS16FFCFRACF_ffx1cstm X4 ( .CLK(clk16_buf), .D(fouten2), .Q(fouten), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xff1div16 ( .CLK(clk4_buf), .D(clk16_buf), .Q(clk16_int1), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xff1div4 ( .CLK(CLKB), .D(clk4_buf), .Q(clk4_int1), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx8cstm X3 ( .IN(CLK), .OUT(CLKB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xff2div4 ( .CLK(CLKB), .D(clk4_int1), .Q(clk4_int2), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx2cstm Xinvdiv4 ( .IN(clk4_int2), .OUT(clk4_buf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffx2cstm Xff2div16 ( .CLK(clk4_buf), .D(clk16_int1), .Q(clk16_int2), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx4cstm Xinv1div16 ( .IN(clk16_int2), .OUT(clk16_buf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx4cstm Xinv2div16 ( .IN(clk16_int2), .OUT(clk16_buf2), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X6_4_ ( .IN0(PLLEN), .IN1(divsync2[4]), .OUT(divsync1[4]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X6_3_ ( .IN0(PLLEN), .IN1(divsync2[3]), .OUT(divsync1[3]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X6_2_ ( .IN0(PLLEN), .IN1(divsync2[2]), .OUT(divsync1[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X6_1_ ( .IN0(PLLEN), .IN1(divsync2[1]), .OUT(divsync1[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X6_0_ ( .IN0(PLLEN), .IN1(divsync2[0]), .OUT(divsync1[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nor5x1cstm Xnor_alarms ( .IN0(postdiv_changed[0]), .IN1(postdiv_changed[1]), .IN2(postdiv_changed[2]), .IN3(postdiv_changed[3]),
	.IN4(postdiv_changed[4]), .OUT(postdiv_stable), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X5 ( .IN0(postdiv_stable), .IN1(fouten1b), .OUT(fouten2), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xsel_postdiven_4_ ( .IN0(divsync2[4]), .IN1(postdiv_sync[4]), .OUT(postdiv_sync_int[4]), .SEL(postdiv_stable),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xsel_postdiven_3_ ( .IN0(divsync2[3]), .IN1(postdiv_sync[3]), .OUT(postdiv_sync_int[3]), .SEL(postdiv_stable),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xsel_postdiven_2_ ( .IN0(divsync2[2]), .IN1(postdiv_sync[2]), .OUT(postdiv_sync_int[2]), .SEL(postdiv_stable),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xsel_postdiven_1_ ( .IN0(divsync2[1]), .IN1(postdiv_sync[1]), .OUT(postdiv_sync_int[1]), .SEL(postdiv_stable),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xsel_postdiven_0_ ( .IN0(divsync2[0]), .IN1(postdiv_sync[0]), .OUT(postdiv_sync_int[0]), .SEL(postdiv_stable),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X7_4_ ( .IN(divsync1[4]), .OUT(DIV_SYNC[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X7_3_ ( .IN(divsync1[3]), .OUT(DIV_SYNC[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X7_2_ ( .IN(divsync1[2]), .OUT(DIV_SYNC[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X7_1_ ( .IN(divsync1[1]), .OUT(DIV_SYNC[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X7_0_ ( .IN(divsync1[0]), .OUT(DIV_SYNC[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X1 ( .CLK(clk16_buf2), .D(postdiv_stable), .Q(fouten1), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X2 ( .IN(fouten1), .OUT(fouten1b), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xff_enout_4_ ( .CLK(clk16_buf2), .D(postdiv_sync_int[4]), .Q(divsync2[4]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xff_enout_3_ ( .CLK(clk16_buf2), .D(postdiv_sync_int[3]), .Q(divsync2[3]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xff_enout_2_ ( .CLK(clk16_buf2), .D(postdiv_sync_int[2]), .Q(divsync2[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xff_enout_1_ ( .CLK(clk16_buf2), .D(postdiv_sync_int[1]), .Q(divsync2[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xff_enout_0_ ( .CLK(clk16_buf2), .D(postdiv_sync_int[0]), .Q(divsync2[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffsync1_4_ ( .CLK(clk16_buf2), .D(DIV[4]), .Q(postdiv_int[4]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffsync1_3_ ( .CLK(clk16_buf2), .D(DIV[3]), .Q(postdiv_int[3]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffsync1_2_ ( .CLK(clk16_buf2), .D(DIV[2]), .Q(postdiv_int[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffsync1_1_ ( .CLK(clk16_buf2), .D(DIV[1]), .Q(postdiv_int[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffsync1_0_ ( .CLK(clk16_buf2), .D(DIV[0]), .Q(postdiv_int[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffsync2_4_ ( .CLK(clk16_buf2), .D(postdiv_int[4]), .Q(postdiv_sync[4]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffsync2_3_ ( .CLK(clk16_buf2), .D(postdiv_int[3]), .Q(postdiv_sync[3]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffsync2_2_ ( .CLK(clk16_buf2), .D(postdiv_int[2]), .Q(postdiv_sync[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffsync2_1_ ( .CLK(clk16_buf2), .D(postdiv_int[1]), .Q(postdiv_sync[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm Xffsync2_0_ ( .CLK(clk16_buf2), .D(postdiv_int[0]), .Q(postdiv_sync[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tgxor2x1cstm Xxor_postdiv_4_ ( .IN0(postdiv_sync[4]), .IN1(postdiv_int[4]), .OUT(postdiv_changed[4]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tgxor2x1cstm Xxor_postdiv_3_ ( .IN0(postdiv_sync[3]), .IN1(postdiv_int[3]), .OUT(postdiv_changed[3]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tgxor2x1cstm Xxor_postdiv_2_ ( .IN0(postdiv_sync[2]), .IN1(postdiv_int[2]), .OUT(postdiv_changed[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tgxor2x1cstm Xxor_postdiv_1_ ( .IN0(postdiv_sync[1]), .IN1(postdiv_int[1]), .OUT(postdiv_changed[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tgxor2x1cstm Xxor_postdiv_0_ ( .IN0(postdiv_sync[0]), .IN1(postdiv_int[0]), .OUT(postdiv_changed[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_postdiv_top
// *
module PLLTS16FFCFRACF_postdiv_top (CK1, FOUT, FOUTEN, FOUTVCOBYP, FREF,
	PLLEN, POSTDIV0, POSTDIV1, POSTDIV2, POSTDIV3, POSTDIV4, VDD,
	VSS);
inout [1:0] POSTDIV4;
inout VDD;
inout [3:0] POSTDIV1;
inout CK1;
inout [4:0] FOUTVCOBYP;
inout [4:0] FOUTEN;
inout [3:0] POSTDIV2;
inout [3:0] POSTDIV3;
inout FREF;
inout VSS;
inout [4:0] FOUT;
inout [3:0] POSTDIV0;
inout PLLEN;
wire ck8;
wire ck24;
wire [1:0] POSTDIV4;
wire [4:0] foutpost1;
wire [4:0] foutpost;
wire foutmux0;
wire div48en;
wire div40en;
wire VDD;
wire foutmux1;
wire [3:0] POSTDIV1_sync;
wire [3:0] POSTDIV1;
wire ck10;
wire ck6;
wire ck4;
wire CK1;
wire [4:0] FOUTVCOBYP;
wire div64en;
wire [4:0] FOUTEN;
wire div10en;
wire [3:0] POSTDIV2_sync;
wire [3:0] POSTDIV0_sync;
wire foutmux2;
wire [3:0] POSTDIV2;
wire [3:0] POSTDIV3;
wire [1:0] POSTDIV4_sync;
wire FREF;
wire ck3;
wire div3en;
wire ck16;
wire div6en;
wire VSS;
wire ck48;
wire ck2;
wire [4:0] FOUT;
wire div12en;
wire [4:0] FOUTVCOBYP_sync;
wire [4:0] fouten_or_fouten_rt;
wire div5en;
wire ck12;
wire ck20;
wire div16en;
wire div8en;
wire [3:0] POSTDIV0;
wire ck64;
wire foutmux3;
wire ck40;
wire foutmux4;
wire [4:0] foutpostB;
wire PLLEN;
wire div2en;
wire ck5;
wire [3:0] POSTDIV3_sync;
wire div24en;
wire [4:0] FOUTEN_rt;
wire div20en;
wire div32en;
wire [4:0] FOUTEN_sync;
wire ck32;
wire div4en;
PLLTS16FFCFRACF_invx4cstm Xinvout_4_ ( .IN(foutpostB[4]), .OUT(FOUT[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx4cstm Xinvout_3_ ( .IN(foutpostB[3]), .OUT(FOUT[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx4cstm Xinvout_2_ ( .IN(foutpostB[2]), .OUT(FOUT[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx4cstm Xinvout_1_ ( .IN(foutpostB[1]), .OUT(FOUT[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx4cstm Xinvout_0_ ( .IN(foutpostB[0]), .OUT(FOUT[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt Xbypmux0 ( .IN0(foutmux0), .IN1(CK1), .OUT(foutpost1[0]), .SEL(FOUTVCOBYP_sync[0]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt Xbypmux1 ( .IN0(foutmux1), .IN1(CK1), .OUT(foutpost1[1]), .SEL(FOUTVCOBYP_sync[1]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt Xbypmux2 ( .IN0(foutmux2), .IN1(CK1), .OUT(foutpost1[2]), .SEL(FOUTVCOBYP_sync[2]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt Xbypmux3 ( .IN0(foutmux3), .IN1(CK1), .OUT(foutpost1[3]), .SEL(FOUTVCOBYP_sync[3]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_gate_ulvt Xbypmux4 ( .IN0(foutmux4), .IN1(CK1), .OUT(foutpost1[4]), .SEL(FOUTVCOBYP_sync[4]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_postdiv_decoder_top Xdecoder ( .div10en(div10en), .div12en(div12en), .div16en(div16en), .div20en(div20en),
	.div24en(div24en), .div2en(div2en), .div32en(div32en), .div3en(div3en), .div40en(div40en), .div48en(div48en), .div4en(div4en),
	.div5en(div5en), .div64en(div64en), .div6en(div6en), .div8en(div8en), .FOUTEN({fouten_or_fouten_rt[4], fouten_or_fouten_rt[3], fouten_or_fouten_rt[2],
	fouten_or_fouten_rt[1], fouten_or_fouten_rt[0]}), .POSTDIV0({POSTDIV0_sync[3], POSTDIV0_sync[2], POSTDIV0_sync[1], POSTDIV0_sync[0]}), .POSTDIV1({POSTDIV1_sync[3],
	POSTDIV1_sync[2], POSTDIV1_sync[1], POSTDIV1_sync[0]}), .POSTDIV2({POSTDIV2_sync[3], POSTDIV2_sync[2], POSTDIV2_sync[1], POSTDIV2_sync[0]}),
	.POSTDIV3({POSTDIV3_sync[3], POSTDIV3_sync[2], POSTDIV3_sync[1], POSTDIV3_sync[0]}), .POSTDIV4({POSTDIV4_sync[1], POSTDIV4_sync[0]}), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_DIV_SYNC_TOP Xdivsync ( .FOUTEN_sync({FOUTEN_sync[4], FOUTEN_sync[3], FOUTEN_sync[2], FOUTEN_sync[1],
	FOUTEN_sync[0]}), .foutpost({foutpost1[4], foutpost1[3], foutpost1[2], foutpost1[1], foutpost1[0]}), .FOUTVCOBYP({FOUTVCOBYP[4],
	FOUTVCOBYP[3], FOUTVCOBYP[2], FOUTVCOBYP[1], FOUTVCOBYP[0]}), .FOUTVCOBYP_sync({FOUTVCOBYP_sync[4], FOUTVCOBYP_sync[3], FOUTVCOBYP_sync[2],
	FOUTVCOBYP_sync[1], FOUTVCOBYP_sync[0]}), .PLLEN(PLLEN), .POSTDIV0({POSTDIV0[3], POSTDIV0[2], POSTDIV0[1], POSTDIV0[0]}),
	.POSTDIV1({POSTDIV1[3], POSTDIV1[2], POSTDIV1[1], POSTDIV1[0]}), .POSTDIV2({POSTDIV2[3], POSTDIV2[2], POSTDIV2[1],
	POSTDIV2[0]}), .POSTDIV3({POSTDIV3[3], POSTDIV3[2], POSTDIV3[1], POSTDIV3[0]}), .POSTDIV4({POSTDIV4[1], POSTDIV4[0]}),
	.POSTDIV0_sync({POSTDIV0_sync[3], POSTDIV0_sync[2], POSTDIV0_sync[1], POSTDIV0_sync[0]}), .POSTDIV1_sync({POSTDIV1_sync[3], POSTDIV1_sync[2], POSTDIV1_sync[1],
	POSTDIV1_sync[0]}), .POSTDIV2_sync({POSTDIV2_sync[3], POSTDIV2_sync[2], POSTDIV2_sync[1], POSTDIV2_sync[0]}), .POSTDIV3_sync({POSTDIV3_sync[3], POSTDIV3_sync[2],
	POSTDIV3_sync[1], POSTDIV3_sync[0]}), .POSTDIV4_sync({POSTDIV4_sync[1], POSTDIV4_sync[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_mux16to1_sym_gate_ulvt Xmux0 ( .IN({ck64, ck48, ck40, ck32,
	ck24, ck20, ck16, ck12, ck10, ck8, ck6,
	ck5, ck4, ck3, ck2, FREF}), .OUT(foutmux0), .SEL({POSTDIV0_sync[3],
	POSTDIV0_sync[2], POSTDIV0_sync[1], POSTDIV0_sync[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_mux16to1_sym_gate_ulvt Xmux1 ( .IN({ck64, ck48, ck40, ck32,
	ck24, ck20, ck16, ck12, ck10, ck8, ck6,
	ck5, ck4, ck3, ck2, FREF}), .OUT(foutmux1), .SEL({POSTDIV1_sync[3],
	POSTDIV1_sync[2], POSTDIV1_sync[1], POSTDIV1_sync[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_mux16to1_sym_gate_ulvt Xmux2 ( .IN({ck64, ck48, ck40, ck32,
	ck24, ck20, ck16, ck12, ck10, ck8, ck6,
	ck5, ck4, ck3, ck2, FREF}), .OUT(foutmux2), .SEL({POSTDIV2_sync[3],
	POSTDIV2_sync[2], POSTDIV2_sync[1], POSTDIV2_sync[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_mux16to1_sym_gate_ulvt Xmux3 ( .IN({ck64, ck48, ck40, ck32,
	ck24, ck20, ck16, ck12, ck10, ck8, ck6,
	ck5, ck4, ck3, ck2, FREF}), .OUT(foutmux3), .SEL({POSTDIV3_sync[3],
	POSTDIV3_sync[2], POSTDIV3_sync[1], POSTDIV3_sync[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_mux4to1_sym_gate_ulvt Xmux4 ( .IN({ck12, ck8, ck6, ck4}),
	.OUT(foutmux4), .SEL({POSTDIV4_sync[1], POSTDIV4_sync[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_nand2x2clk_fast Xnandout_4_ ( .IN0(FOUTEN_sync[4]), .IN1(foutpost[4]), .OUT(foutpostB[4]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x2clk_fast Xnandout_3_ ( .IN0(FOUTEN_sync[3]), .IN1(foutpost[3]), .OUT(foutpostB[3]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x2clk_fast Xnandout_2_ ( .IN0(FOUTEN_sync[2]), .IN1(foutpost[2]), .OUT(foutpostB[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x2clk_fast Xnandout_1_ ( .IN0(FOUTEN_sync[1]), .IN1(foutpost[1]), .OUT(foutpostB[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x2clk_fast Xnandout_0_ ( .IN0(FOUTEN_sync[0]), .IN1(foutpost[0]), .OUT(foutpostB[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_postdiv_2to64 Xpostdiv2to64 ( .ck1(CK1), .ck2(ck2), .ck3(ck3), .ck4(ck4),
	.ck5(ck5), .ck6(ck6), .ck8(ck8), .ck10(ck10), .ck12(ck12), .ck16(ck16), .ck20(ck20),
	.ck24(ck24), .ck32(ck32), .ck40(ck40), .ck48(ck48), .ck64(ck64), .div10en(div10en), .div12en(div12en),
	.div16en(div16en), .div20en(div20en), .div24en(div24en), .div2en(div2en), .div32en(div32en), .div3en(div3en), .div40en(div40en),
	.div48en(div48en), .div4en(div4en), .div5en(div5en), .div64en(div64en), .div6en(div6en), .div8en(div8en), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_clkgate_postdiv_noreset Xclkgate_4_ ( .clkin(foutpost1[4]), .clkout(foutpost[4]), .EN(FOUTEN[4]), .EN_rt(FOUTEN_rt[4]),
	.VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_clkgate_postdiv_noreset Xclkgate_3_ ( .clkin(foutpost1[3]), .clkout(foutpost[3]), .EN(FOUTEN[3]), .EN_rt(FOUTEN_rt[3]),
	.VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_clkgate_postdiv_noreset Xclkgate_2_ ( .clkin(foutpost1[2]), .clkout(foutpost[2]), .EN(FOUTEN[2]), .EN_rt(FOUTEN_rt[2]),
	.VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_clkgate_postdiv_noreset Xclkgate_1_ ( .clkin(foutpost1[1]), .clkout(foutpost[1]), .EN(FOUTEN[1]), .EN_rt(FOUTEN_rt[1]),
	.VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_clkgate_postdiv_noreset Xclkgate_0_ ( .clkin(foutpost1[0]), .clkout(foutpost[0]), .EN(FOUTEN[0]), .EN_rt(FOUTEN_rt[0]),
	.VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_or2x1cstm Xor_fouten_fouten_rt_4_ ( .IN0(FOUTEN[4]), .IN1(FOUTEN_rt[4]), .OUT(fouten_or_fouten_rt[4]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or2x1cstm Xor_fouten_fouten_rt_3_ ( .IN0(FOUTEN[3]), .IN1(FOUTEN_rt[3]), .OUT(fouten_or_fouten_rt[3]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or2x1cstm Xor_fouten_fouten_rt_2_ ( .IN0(FOUTEN[2]), .IN1(FOUTEN_rt[2]), .OUT(fouten_or_fouten_rt[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or2x1cstm Xor_fouten_fouten_rt_1_ ( .IN0(FOUTEN[1]), .IN1(FOUTEN_rt[1]), .OUT(fouten_or_fouten_rt[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_or2x1cstm Xor_fouten_fouten_rt_0_ ( .IN0(FOUTEN[0]), .IN1(FOUTEN_rt[0]), .OUT(fouten_or_fouten_rt[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_postdiv_top_5ch
// *
module PLLTS16FFCFRACF_postdiv_top_5ch (ck1, FOUT, FOUTCMLEN, FOUTCMLN, FOUTCMLP,
	FOUTDIFFEN, FOUTDIFFN, FOUTDIFFP, FOUTEN, FOUTVCO, FOUTVCOBYP, FOUTVCOEN,
	FREF, PLLEN, POSTDIV0, POSTDIV1, POSTDIV2, POSTDIV3, POSTDIV4,
	VDDPOST, VSS);
inout FOUTCMLN;
inout [1:0] POSTDIV4;
inout FOUTVCOEN;
inout FOUTCMLEN;
inout FOUTDIFFP;
inout FOUTDIFFEN;
inout [3:0] POSTDIV1;
inout FOUTDIFFN;
inout [4:0] FOUTVCOBYP;
inout [3:0] FOUTEN;
inout [3:0] POSTDIV2;
inout [3:0] POSTDIV3;
inout VDDPOST;
inout FREF;
inout FOUTCMLP;
inout VSS;
inout ck1;
inout [3:0] FOUT;
inout FOUTVCO;
inout [3:0] POSTDIV0;
inout PLLEN;
wire FOUTCMLN;
wire [1:0] POSTDIV4;
wire FOUTVCOEN;
wire FOUTCMLEN;
wire FOUTDIFFP;
wire NET4;
wire [3:0] POSTDIV1;
wire FOUTDIFFEN;
wire FOUTDIFFN;
wire FOUTEN_4_;
wire [4:0] FOUTVCOBYP;
wire [3:0] FOUTEN;
wire NET3;
wire [3:0] POSTDIV2;
wire [3:0] POSTDIV3;
wire VDDPOST;
wire FREF;
wire FOUTCMLP;
wire VSS;
wire ck1;
wire [3:0] FOUT;
wire FOUTVCO;
wire [3:0] POSTDIV0;
wire PLLEN;
wire FOUT_4_;
wire NET2;
wire cmosout;
wire NET1;
PLLTS16FFCFRACF_clkgate_foutvco Xclkgate ( .clkin(ck1), .clkout(FOUTVCO), .EN(FOUTVCOEN), .VDD(VDDPOST),
	.VSS(VSS));
PLLTS16FFCFRACF_postdiv_top Xpostdiv ( .CK1(ck1), .FOUT({FOUT_4_, FOUT[3], FOUT[2],
	FOUT[1], FOUT[0]}), .FOUTEN({FOUTEN_4_, FOUTEN[3], FOUTEN[2], FOUTEN[1], FOUTEN[0]}),
	.FOUTVCOBYP({FOUTVCOBYP[4], FOUTVCOBYP[3], FOUTVCOBYP[2], FOUTVCOBYP[1], FOUTVCOBYP[0]}), .FREF(FREF), .PLLEN(PLLEN),
	.POSTDIV0({POSTDIV0[3], POSTDIV0[2], POSTDIV0[1], POSTDIV0[0]}), .POSTDIV1({POSTDIV1[3], POSTDIV1[2], POSTDIV1[1],
	POSTDIV1[0]}), .POSTDIV2({POSTDIV2[3], POSTDIV2[2], POSTDIV2[1], POSTDIV2[0]}), .POSTDIV3({POSTDIV3[3], POSTDIV3[2],
	POSTDIV3[1], POSTDIV3[0]}), .POSTDIV4({POSTDIV4[1], POSTDIV4[0]}), .VDD(VDDPOST), .VSS(VSS));
PLLTS16FFCFRACF_or2x1cstm Xor ( .IN0(FOUTDIFFEN), .IN1(FOUTCMLEN), .OUT(FOUTEN_4_), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDPOST));
PLLTS16FFCFRACF_ckBgenx8_pd X1 ( .EN(FOUTDIFFEN), .IN(FOUT_4_), .OUT(FOUTDIFFP), .OUTB(FOUTDIFFN),
	.VDD(VDDPOST), .VSS(VSS));
PLLTS16FFCFRACF_tielowx1cstm X2 ( .OUT(NET2), .SUB(VSS), .VNEG(VSS), .VPOS(VDDPOST));
PLLTS16FFCFRACF_tielowx1cstm X3 ( .OUT(NET3), .SUB(VSS), .VNEG(VSS), .VPOS(VDDPOST));
PLLTS16FFCFRACF_tielowx1cstm X5 ( .OUT(NET1), .SUB(VSS), .VNEG(VSS), .VPOS(VDDPOST));
PLLTS16FFCFRACF_tiehighx1cstm X6 ( .OUT(NET4), .SUB(VSS), .VNEG(VSS), .VPOS(VDDPOST));
PLLTS16FFCFRACF_CMLBUFFERTS16FFCGRA X4 ( .VSS(VSS), .VDDA(VDDPOST), .OUTP(FOUTCMLP), .OUTN(FOUTCMLN),
	.INP(NET2), .INN(NET3), .CMOS_IN_SEL(NET4), .CMOSOUTEN(NET1), .CMOSOUT(cmosout), .CMOSIN(FOUT_4_), .CMLOUTEN(FOUTCMLEN));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_prbs_par_gen_2t21_rst
// *
module PLLTS16FFCFRACF_prbs_par_gen_2t21_rst (clk, prbs, reset, VDD, VSS);
inout [3:0] prbs;
inout VDD;
inout clk;
inout VSS;
inout reset;
wire [20:0] prbsout;
wire [3:0] prbs;
wire VDD;
wire prbsout16B;
wire clk;
wire VSS;
wire [3:0] prbsin;
wire reset;
wire prbsout20B;
PLLTS16FFCFRACF_ffx1cstm X1 ( .CLK(clk), .D(prbsin[3]), .Q(prbsout[3]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X2 ( .CLK(clk), .D(prbsout[3]), .Q(prbsout[7]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X3 ( .CLK(clk), .D(prbsout[5]), .Q(prbsout[9]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X4 ( .CLK(clk), .D(prbsout[7]), .Q(prbsout[11]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X5 ( .CLK(clk), .D(prbsout[6]), .Q(prbsout[10]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X6 ( .CLK(clk), .D(prbsout[4]), .Q(prbsout[8]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X7 ( .CLK(clk), .D(prbsin[2]), .Q(prbsout[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X8 ( .CLK(clk), .D(prbsin[1]), .Q(prbsout[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X9 ( .CLK(clk), .D(prbsin[0]), .Q(prbsout[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X10 ( .CLK(clk), .D(prbsout[2]), .Q(prbsout[6]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X11 ( .CLK(clk), .D(prbsout[1]), .Q(prbsout[5]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X12 ( .CLK(clk), .D(prbsout[9]), .Q(prbsout[13]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X13 ( .CLK(clk), .D(prbsout[0]), .Q(prbsout[4]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X14 ( .CLK(clk), .D(prbsout[11]), .Q(prbsout[15]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X15 ( .CLK(clk), .D(prbsout[10]), .Q(prbsout[14]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X16 ( .CLK(clk), .D(prbsout[8]), .Q(prbsout[12]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X17 ( .CLK(clk), .D(prbsout[13]), .Q(prbsout[17]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tgxor2x1cstm X18 ( .IN0(prbsout[20]), .IN1(prbsout[18]), .OUT(prbsin[3]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tgxor2x1cstm X19 ( .IN0(prbsout[19]), .IN1(prbsout[17]), .OUT(prbsin[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tgxor2x1cstm X20 ( .IN0(prbsout[18]), .IN1(prbsout[16]), .OUT(prbsin[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tgxor2x1cstm X21 ( .IN0(prbsout[17]), .IN1(prbsout[15]), .OUT(prbsin[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X26 ( .CLK(clk), .D(prbsout[15]), .Q(prbsout[19]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X27 ( .CLK(clk), .D(prbsout[14]), .Q(prbsout[18]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X28 ( .CLK(clk), .D(prbsout[12]), .Q(prbsout[16]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm X29 ( .CLK(clk), .D(prbsout16B), .Q(prbsout20B), .QB(prbsout[20]),
	.RST(reset), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X34 ( .IN(prbsout[16]), .OUT(prbsout16B), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbufout_3_ ( .IN(prbsout[3]), .OUT(prbs[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbufout_2_ ( .IN(prbsout[2]), .OUT(prbs[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbufout_1_ ( .IN(prbsout[1]), .OUT(prbs[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbufout_0_ ( .IN(prbsout[0]), .OUT(prbs[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_prbs_par_gen_2t22_rst
// *
module PLLTS16FFCFRACF_prbs_par_gen_2t22_rst (clk, prbs, reset, VDD, VSS);
inout [3:0] prbs;
inout VDD;
inout clk;
inout VSS;
inout reset;
wire [21:0] prbsout;
wire [3:0] prbs;
wire VDD;
wire prbsout16B;
wire clk;
wire VSS;
wire [3:0] prbsin;
wire reset;
wire prbsout20B;
PLLTS16FFCFRACF_ffx1cstm X1 ( .CLK(clk), .D(prbsin[3]), .Q(prbsout[3]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X2 ( .CLK(clk), .D(prbsout[3]), .Q(prbsout[7]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X3 ( .CLK(clk), .D(prbsout[5]), .Q(prbsout[9]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X4 ( .CLK(clk), .D(prbsout[7]), .Q(prbsout[11]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X5 ( .CLK(clk), .D(prbsout[6]), .Q(prbsout[10]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X6 ( .CLK(clk), .D(prbsout[4]), .Q(prbsout[8]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X7 ( .CLK(clk), .D(prbsin[2]), .Q(prbsout[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X8 ( .CLK(clk), .D(prbsin[1]), .Q(prbsout[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X9 ( .CLK(clk), .D(prbsin[0]), .Q(prbsout[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X10 ( .CLK(clk), .D(prbsout[2]), .Q(prbsout[6]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X11 ( .CLK(clk), .D(prbsout[1]), .Q(prbsout[5]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X12 ( .CLK(clk), .D(prbsout[9]), .Q(prbsout[13]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X13 ( .CLK(clk), .D(prbsout[0]), .Q(prbsout[4]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X14 ( .CLK(clk), .D(prbsout[11]), .Q(prbsout[15]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X15 ( .CLK(clk), .D(prbsout[10]), .Q(prbsout[14]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X16 ( .CLK(clk), .D(prbsout[8]), .Q(prbsout[12]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X17 ( .CLK(clk), .D(prbsout[13]), .Q(prbsout[17]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tgxor2x1cstm X18 ( .IN0(prbsout[20]), .IN1(prbsout[21]), .OUT(prbsin[3]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tgxor2x1cstm X19 ( .IN0(prbsout[19]), .IN1(prbsout[20]), .OUT(prbsin[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tgxor2x1cstm X20 ( .IN0(prbsout[18]), .IN1(prbsout[19]), .OUT(prbsin[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tgxor2x1cstm X21 ( .IN0(prbsout[17]), .IN1(prbsout[18]), .OUT(prbsin[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrx1cstm X23 ( .CLK(clk), .D(prbsout16B), .Q(prbsout20B), .QB(prbsout[20]),
	.RST(reset), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X24 ( .IN(prbsout[16]), .OUT(prbsout16B), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X26 ( .CLK(clk), .D(prbsout[15]), .Q(prbsout[19]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X27 ( .CLK(clk), .D(prbsout[14]), .Q(prbsout[18]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X28 ( .CLK(clk), .D(prbsout[12]), .Q(prbsout[16]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X29 ( .CLK(clk), .D(prbsout[17]), .Q(prbsout[21]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbufout_3_ ( .IN(prbsout[3]), .OUT(prbs[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbufout_2_ ( .IN(prbsout[2]), .OUT(prbs[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbufout_1_ ( .IN(prbsout[1]), .OUT(prbs[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbufout_0_ ( .IN(prbsout[0]), .OUT(prbs[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_progdelay4b_thermo
// *
module PLLTS16FFCFRACF_progdelay4b_thermo (in, out, sel, VDD, VSS);
inout out;
inout VDD;
inout VSS;
inout in;
inout [3:0] sel;
wire [15:0] bufo3;
wire [15:0] bufo4;
wire sel21;
wire sel31;
wire [15:0] bufo2;
wire out;
wire VDD;
wire sel10;
wire [15:0] bufo5;
wire sel310;
wire v0;
wire sel321;
wire sel30;
wire sel20;
wire sel210;
wire sel32;
wire VSS;
wire sel320;
wire in;
wire [15:1] bufo;
wire [15:0] bufo1;
wire [3:0] sel;
wire sel3210;
wire [3:0] selb;
wire [15:0] bufo6;
wire [15:0] muxo;
PLLTS16FFCFRACF_tielowx1cstm X2 ( .OUT(v0), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_svt Xmux_15_ ( .IN0(in), .IN1(v0), .OUT(muxo[15]), .SEL(v0),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_svt Xmux_14_ ( .IN0(in), .IN1(bufo[15]), .OUT(muxo[14]), .SEL(sel[0]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_svt Xmux_13_ ( .IN0(in), .IN1(bufo[14]), .OUT(muxo[13]), .SEL(sel[1]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_svt Xmux_12_ ( .IN0(in), .IN1(bufo[13]), .OUT(muxo[12]), .SEL(sel10),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_svt Xmux_11_ ( .IN0(in), .IN1(bufo[12]), .OUT(muxo[11]), .SEL(sel[2]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_svt Xmux_10_ ( .IN0(in), .IN1(bufo[11]), .OUT(muxo[10]), .SEL(sel20),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_svt Xmux_9_ ( .IN0(in), .IN1(bufo[10]), .OUT(muxo[9]), .SEL(sel21),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_svt Xmux_8_ ( .IN0(in), .IN1(bufo[9]), .OUT(muxo[8]), .SEL(sel210),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_svt Xmux_7_ ( .IN0(in), .IN1(bufo[8]), .OUT(muxo[7]), .SEL(sel[3]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_svt Xmux_6_ ( .IN0(in), .IN1(bufo[7]), .OUT(muxo[6]), .SEL(sel30),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_svt Xmux_5_ ( .IN0(in), .IN1(bufo[6]), .OUT(muxo[5]), .SEL(sel31),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_svt Xmux_4_ ( .IN0(in), .IN1(bufo[5]), .OUT(muxo[4]), .SEL(sel310),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_svt Xmux_3_ ( .IN0(in), .IN1(bufo[4]), .OUT(muxo[3]), .SEL(sel32),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_svt Xmux_2_ ( .IN0(in), .IN1(bufo[3]), .OUT(muxo[2]), .SEL(sel320),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_svt Xmux_1_ ( .IN0(in), .IN1(bufo[2]), .OUT(muxo[1]), .SEL(sel321),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym_svt Xmux_0_ ( .IN0(in), .IN1(bufo[1]), .OUT(muxo[0]), .SEL(sel3210),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_15_ ( .IN(muxo[15]), .OUT(bufo1[15]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_14_ ( .IN(muxo[14]), .OUT(bufo1[14]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_13_ ( .IN(muxo[13]), .OUT(bufo1[13]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_12_ ( .IN(muxo[12]), .OUT(bufo1[12]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_11_ ( .IN(muxo[11]), .OUT(bufo1[11]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_10_ ( .IN(muxo[10]), .OUT(bufo1[10]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_9_ ( .IN(muxo[9]), .OUT(bufo1[9]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_8_ ( .IN(muxo[8]), .OUT(bufo1[8]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_7_ ( .IN(muxo[7]), .OUT(bufo1[7]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_6_ ( .IN(muxo[6]), .OUT(bufo1[6]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_5_ ( .IN(muxo[5]), .OUT(bufo1[5]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_4_ ( .IN(muxo[4]), .OUT(bufo1[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_3_ ( .IN(muxo[3]), .OUT(bufo1[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_2_ ( .IN(muxo[2]), .OUT(bufo1[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_1_ ( .IN(muxo[1]), .OUT(bufo1[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf1_0_ ( .IN(muxo[0]), .OUT(bufo1[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand4x1cstm X3 ( .IN0(selb[3]), .IN1(selb[2]), .IN2(selb[1]), .IN3(selb[0]),
	.OUT(sel3210), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand3x1cstm X7 ( .IN0(selb[3]), .IN1(selb[1]), .IN2(selb[0]), .OUT(sel310),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand3x1cstm X5 ( .IN0(selb[3]), .IN1(selb[2]), .IN2(selb[0]), .OUT(sel320),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand3x1cstm X4 ( .IN0(selb[3]), .IN1(selb[2]), .IN2(selb[1]), .OUT(sel321),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand3x1cstm X13 ( .IN0(selb[2]), .IN1(selb[1]), .IN2(selb[0]), .OUT(sel210),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X10 ( .IN0(selb[2]), .IN1(selb[1]), .OUT(sel21), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X11 ( .IN0(selb[2]), .IN1(selb[0]), .OUT(sel20), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X6 ( .IN0(selb[3]), .IN1(selb[2]), .OUT(sel32), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X12 ( .IN0(selb[1]), .IN1(selb[0]), .OUT(sel10), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X8 ( .IN0(selb[3]), .IN1(selb[1]), .OUT(sel31), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X9 ( .IN0(selb[3]), .IN1(selb[0]), .OUT(sel30), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_3_ ( .IN(sel[3]), .OUT(selb[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_2_ ( .IN(sel[2]), .OUT(selb[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_1_ ( .IN(sel[1]), .OUT(selb[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_0_ ( .IN(sel[0]), .OUT(selb[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_15_ ( .IN(bufo1[15]), .OUT(bufo2[15]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_14_ ( .IN(bufo1[14]), .OUT(bufo2[14]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_13_ ( .IN(bufo1[13]), .OUT(bufo2[13]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_12_ ( .IN(bufo1[12]), .OUT(bufo2[12]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_11_ ( .IN(bufo1[11]), .OUT(bufo2[11]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_10_ ( .IN(bufo1[10]), .OUT(bufo2[10]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_9_ ( .IN(bufo1[9]), .OUT(bufo2[9]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_8_ ( .IN(bufo1[8]), .OUT(bufo2[8]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_7_ ( .IN(bufo1[7]), .OUT(bufo2[7]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_6_ ( .IN(bufo1[6]), .OUT(bufo2[6]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_5_ ( .IN(bufo1[5]), .OUT(bufo2[5]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_4_ ( .IN(bufo1[4]), .OUT(bufo2[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_3_ ( .IN(bufo1[3]), .OUT(bufo2[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_2_ ( .IN(bufo1[2]), .OUT(bufo2[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_1_ ( .IN(bufo1[1]), .OUT(bufo2[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf2_0_ ( .IN(bufo1[0]), .OUT(bufo2[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_15_ ( .IN(bufo2[15]), .OUT(bufo3[15]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_14_ ( .IN(bufo2[14]), .OUT(bufo3[14]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_13_ ( .IN(bufo2[13]), .OUT(bufo3[13]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_12_ ( .IN(bufo2[12]), .OUT(bufo3[12]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_11_ ( .IN(bufo2[11]), .OUT(bufo3[11]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_10_ ( .IN(bufo2[10]), .OUT(bufo3[10]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_9_ ( .IN(bufo2[9]), .OUT(bufo3[9]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_8_ ( .IN(bufo2[8]), .OUT(bufo3[8]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_7_ ( .IN(bufo2[7]), .OUT(bufo3[7]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_6_ ( .IN(bufo2[6]), .OUT(bufo3[6]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_5_ ( .IN(bufo2[5]), .OUT(bufo3[5]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_4_ ( .IN(bufo2[4]), .OUT(bufo3[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_3_ ( .IN(bufo2[3]), .OUT(bufo3[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_2_ ( .IN(bufo2[2]), .OUT(bufo3[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_1_ ( .IN(bufo2[1]), .OUT(bufo3[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf3_0_ ( .IN(bufo2[0]), .OUT(bufo3[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_15_ ( .IN(bufo3[15]), .OUT(bufo4[15]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_14_ ( .IN(bufo3[14]), .OUT(bufo4[14]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_13_ ( .IN(bufo3[13]), .OUT(bufo4[13]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_12_ ( .IN(bufo3[12]), .OUT(bufo4[12]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_11_ ( .IN(bufo3[11]), .OUT(bufo4[11]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_10_ ( .IN(bufo3[10]), .OUT(bufo4[10]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_9_ ( .IN(bufo3[9]), .OUT(bufo4[9]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_8_ ( .IN(bufo3[8]), .OUT(bufo4[8]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_7_ ( .IN(bufo3[7]), .OUT(bufo4[7]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_6_ ( .IN(bufo3[6]), .OUT(bufo4[6]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_5_ ( .IN(bufo3[5]), .OUT(bufo4[5]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_4_ ( .IN(bufo3[4]), .OUT(bufo4[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_3_ ( .IN(bufo3[3]), .OUT(bufo4[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_2_ ( .IN(bufo3[2]), .OUT(bufo4[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_1_ ( .IN(bufo3[1]), .OUT(bufo4[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf4_0_ ( .IN(bufo3[0]), .OUT(bufo4[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf5_15_ ( .IN(bufo4[15]), .OUT(bufo5[15]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf5_14_ ( .IN(bufo4[14]), .OUT(bufo5[14]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf5_13_ ( .IN(bufo4[13]), .OUT(bufo5[13]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf5_12_ ( .IN(bufo4[12]), .OUT(bufo5[12]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf5_11_ ( .IN(bufo4[11]), .OUT(bufo5[11]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf5_10_ ( .IN(bufo4[10]), .OUT(bufo5[10]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf5_9_ ( .IN(bufo4[9]), .OUT(bufo5[9]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf5_8_ ( .IN(bufo4[8]), .OUT(bufo5[8]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf5_7_ ( .IN(bufo4[7]), .OUT(bufo5[7]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf5_6_ ( .IN(bufo4[6]), .OUT(bufo5[6]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf5_5_ ( .IN(bufo4[5]), .OUT(bufo5[5]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf5_4_ ( .IN(bufo4[4]), .OUT(bufo5[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf5_3_ ( .IN(bufo4[3]), .OUT(bufo5[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf5_2_ ( .IN(bufo4[2]), .OUT(bufo5[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf5_1_ ( .IN(bufo4[1]), .OUT(bufo5[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf5_0_ ( .IN(bufo4[0]), .OUT(bufo5[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf6_15_ ( .IN(bufo5[15]), .OUT(bufo6[15]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf6_14_ ( .IN(bufo5[14]), .OUT(bufo6[14]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf6_13_ ( .IN(bufo5[13]), .OUT(bufo6[13]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf6_12_ ( .IN(bufo5[12]), .OUT(bufo6[12]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf6_11_ ( .IN(bufo5[11]), .OUT(bufo6[11]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf6_10_ ( .IN(bufo5[10]), .OUT(bufo6[10]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf6_9_ ( .IN(bufo5[9]), .OUT(bufo6[9]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf6_8_ ( .IN(bufo5[8]), .OUT(bufo6[8]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf6_7_ ( .IN(bufo5[7]), .OUT(bufo6[7]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf6_6_ ( .IN(bufo5[6]), .OUT(bufo6[6]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf6_5_ ( .IN(bufo5[5]), .OUT(bufo6[5]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf6_4_ ( .IN(bufo5[4]), .OUT(bufo6[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf6_3_ ( .IN(bufo5[3]), .OUT(bufo6[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf6_2_ ( .IN(bufo5[2]), .OUT(bufo6[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf6_1_ ( .IN(bufo5[1]), .OUT(bufo6[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf6_0_ ( .IN(bufo5[0]), .OUT(bufo6[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf7_15_ ( .IN(bufo6[15]), .OUT(bufo[15]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf7_14_ ( .IN(bufo6[14]), .OUT(bufo[14]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf7_13_ ( .IN(bufo6[13]), .OUT(bufo[13]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf7_12_ ( .IN(bufo6[12]), .OUT(bufo[12]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf7_11_ ( .IN(bufo6[11]), .OUT(bufo[11]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf7_10_ ( .IN(bufo6[10]), .OUT(bufo[10]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf7_9_ ( .IN(bufo6[9]), .OUT(bufo[9]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf7_8_ ( .IN(bufo6[8]), .OUT(bufo[8]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf7_7_ ( .IN(bufo6[7]), .OUT(bufo[7]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf7_6_ ( .IN(bufo6[6]), .OUT(bufo[6]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf7_5_ ( .IN(bufo6[5]), .OUT(bufo[5]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf7_4_ ( .IN(bufo6[4]), .OUT(bufo[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf7_3_ ( .IN(bufo6[3]), .OUT(bufo[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf7_2_ ( .IN(bufo6[2]), .OUT(bufo[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf7_1_ ( .IN(bufo6[1]), .OUT(bufo[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx1cstm Xbuf7_0_ ( .IN(bufo6[0]), .OUT(out), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_qpmp
// *
module PLLTS16FFCFRACF_qpmp (clkshft, dnh, dnhb, faster, fastlockEn,
	ibias_1_, ibias_0_, PD, pdH, pdHB, pfdresetB, phshft,
	slower, uph, uphb, VDDHV, VDDLV, vfollow, VSS,
	VTUNEI);
input [16-1:0] ibias_1_;
inout [2:0] vfollow;
inout [1:0] uphb;
inout [1:0] uph;
inout VDDHV;
input [16-1:0] ibias_0_;
inout VDDLV;
inout [4:0] phshft;
inout clkshft;
inout pfdresetB;
inout VSS;
inout fastlockEn;
inout faster;
inout PD;
inout [3*16-1:0] VTUNEI;
inout [1:0] dnh;
inout pdHB;
inout slower;
inout [1:0] dnhb;
inout pdH;
wire [16-1:0] ibias_1_;
wire [2:0] vfollow;
wire [1:0] uphb;
wire [1:0] uph;
wire VDDHV;
wire [1:0] ibias_bbm;
wire tielowH;
wire [16-1:0] ibias_0_;
wire VDDLV;
wire [4:0] phshft;
wire clkshft;
wire pfdresetB;
wire VSS;
wire fastlockEn;
wire faster;
wire PD;
wire [3*16-1:0] VTUNEI;
wire [1:0] dnh;
wire pdHB;
wire tiehighH;
wire slower;
wire [1:0] dnhb;
wire pdH;
PLLTS16FFCFRACF_qpmp_analog Xqpanalog ( .dnh({dnh[1], dnh[0]}), .dnhb({dnhb[1], dnhb[0]}),
	.ibias_1_(ibias_1_), .ibias_0_(ibias_0_), .ibias_bbm({ibias_bbm[1], ibias_bbm[0]}), .tiehighH(tiehighH), .tielowH(tielowH), .uph({uph[1],
	uph[0]}), .uphb({uphb[1], uphb[0]}), .VDDHV(VDDHV), .vfollow({vfollow[2], vfollow[1], vfollow[0]}),
	.VSS(VSS), .VTUNEI(VTUNEI));
PLLTS16FFCFRACF_qpmp_bbm2 Xbbm ( .clkshft(clkshft), .dnh({dnh[1], dnh[0]}), .dnhB({dnhb[1],
	dnhb[0]}), .FASTER(faster), .fastlockEn(fastlockEn), .ibias({ibias_bbm[1], ibias_bbm[0]}), .PD(PD), .pdH(pdH),
	.pdHB(pdHB), .pfdresetB(pfdresetB), .phshft({phshft[4], phshft[3], phshft[2], phshft[1], phshft[0]}),
	.SLOWER(slower), .uph({uph[1], uph[0]}), .uphB({uphb[1], uphb[0]}), .VDDHV(VDDHV), .VDDLV(VDDLV),
	.VSS(VSS));
PLLTS16FFCFRACF_tiehighx1cstm_HV_2 X1 ( .OUT(tiehighH), .SUB(VSS), .VNEG(VSS), .VPOS(VDDHV));
PLLTS16FFCFRACF_tielowx1cstm_HV_2 X2 ( .OUT(tielowH), .SUB(VSS), .VNEG(VSS), .VPOS(VDDHV));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_qpmp_analog
// *
module PLLTS16FFCFRACF_qpmp_analog (
dnh,
dnhb,
ibias_1_,
ibias_0_,
uph,
uphb,
VDDHV,
VSS,
VTUNEI,
vfollow,
tielowH,
tiehighH,
ibias_bbm
);


parameter up_dn_bits = 2;

parameter [(up_dn_bits*32-1):0] up_dn_weights = {32'd2, 32'd1};

parameter wscale_factor = 1e0;

parameter qpmismatch = 0.1;

parameter qpmp_ratio = 4;

parameter voltage_bus_size = 2*16; 
parameter current_bus_size = 16;
parameter maxv = 3.0;                 
parameter maxi = 3.0e-3;                 


input VDDHV;
input VSS;

input [up_dn_bits-1:0] dnh;
input [up_dn_bits-1:0] dnhb;
input [up_dn_bits-1:0] uph;
input [up_dn_bits-1:0] uphb;

input [2:0] vfollow;

inout [3*16-1:0] VTUNEI;
input [16-1:0] ibias_1_;
input [16-1:0] ibias_0_;

input tielowH, tiehighH;

output [1:0] ibias_bbm; 


wire [up_dn_bits-1:0] dn;
wire [up_dn_bits-1:0] up;

wire PD;

wire fastlock;


assign dn = dnh & ~dnhb;
assign up = uph & ~uphb;

assign ibias_bbm = ibias_1_ > 0 ? 2'b11 : 2'b00;

assign fastlock = $test$plusargs("USER_CONTROLLED_PLLTS16FFCFRACF_LOCK_TIME") ? 1'b1 : 1'b0;


PLLTS16FFCFRACF_qpmp_analog_core #(	
	.up_dn_bits(up_dn_bits), 
	.up_dn_weights(up_dn_weights), 
	.wscale_factor(wscale_factor), 
	.qpmismatch(qpmismatch), 
	.qpmp_ratio(qpmp_ratio),
    .voltage_bus_size(voltage_bus_size),
    .current_bus_size(current_bus_size),
    .maxv(maxv),
    .maxi(maxi)
) Xqpmp (VTUNEI, dn, up, ibias_1_, PD, fastlock);
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_qpmp_analog_core
// *
module PLLTS16FFCFRACF_qpmp_analog_core (
VTUNEI, 
dn, 
up, 
ibias,
PD,
fastlock
);


parameter up_dn_bits = 1;

parameter [(up_dn_bits*32-1):0] up_dn_weights = {32'b1};

parameter wscale_factor = 1e0;

parameter qpmismatch = 0.01;

parameter qpmp_ratio = 4;

parameter voltage_bus_size = 32;
parameter current_bus_size = 16;

parameter maxv = 5.0;
parameter maxi = 1.0e-3;

localparam qpm = 1.0 + qpmismatch / 2.0;
localparam qpmb = 1.0 - qpmismatch / 2.0;


input [up_dn_bits-1:0] dn;
input [up_dn_bits-1:0] up;

input PD;

input fastlock;

input [current_bus_size-1:0] ibias;
inout [voltage_bus_size+current_bus_size-1:0] VTUNEI;


real iout;

reg [current_bus_size-1:0]  VTUNEI_i_reg;


assign VTUNEI = {{current_bus_size{1'bz}}, {current_bus_size{1'bz}}, VTUNEI_i_reg};

function automatic reg [voltage_bus_size-1:0] volttobin;
    input real voltage;
    volttobin = $rtoi((voltage/maxv)*(2.0**$itor(voltage_bus_size - 1)-1.0));
endfunction
function automatic real  bintovolt;
    input reg [voltage_bus_size-1:0] binary;
    bintovolt = $itor($signed(binary))/(2.0**$itor(voltage_bus_size - 1)-1.0)*maxv;
endfunction
function automatic reg [current_bus_size-1:0] currenttobin;
    input real current;
    currenttobin = $rtoi((current/maxi)*(2.0**$itor(current_bus_size - 1)-1.0));
endfunction
function automatic real  bintocurrent;
    input reg [current_bus_size-1:0] binary;
    bintocurrent = $itor($signed(binary))/(2.0**$itor(current_bus_size-1)-1.0)*maxi;
endfunction


initial begin
	wait(fastlock);
	disable calc_iout;
end

initial begin : calc_iout
	integer i;
	real ibias_real;
	real iscale_real; 
	real iscale_up_real;
	real iscale_dn_real;
	reg [current_bus_size-1:0] ibias_last;
	reg [(up_dn_bits*32-1):0] up_dn_weights_reg;
	VTUNEI_i_reg 	  = 0;
	ibias_last 	  = 0;
	
	
	up_dn_weights_reg = up_dn_weights; 
	forever begin
		fork : calc_iout_pd_fork
			@(up or dn) disable calc_iout_pd_fork;
			wait(PD) disable calc_iout_pd_fork;
		join
		if(PD) begin
			iout 		= 0;
			iscale_up_real	= 0.0;
			iscale_dn_real	= 0.0;
			iscale_real	= 0.0;
			ibias_real	= 0;
			ibias_last	= 0;
			wait(!PD);
		end
		else begin
			
			if (ibias != ibias_last) begin : calc_ibias
				real ibias_temp; 
				ibias_temp = bintocurrent(ibias);
				ibias_real = ibias_temp/qpmp_ratio;
				ibias_last = ibias;
			end
			iscale_up_real = 0;
			iscale_dn_real = 0; 
			for (i = 0; i < up_dn_bits; i = i+1) begin
				iscale_up_real = iscale_up_real + up[i] * $itor(up_dn_weights_reg[32*i +: 32]);
				iscale_dn_real = iscale_dn_real + dn[i] * $itor(up_dn_weights_reg[32*i +: 32]);
			end
			iscale_real = (iscale_up_real*qpm - iscale_dn_real*qpmb)*wscale_factor; 
			iout = ibias_real * iscale_real;
		end
		VTUNEI_i_reg 	= currenttobin(iout);
	end
end
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_qpmp_bbm2
// *
module PLLTS16FFCFRACF_qpmp_bbm2 (clkshft, dnh, dnhB, FASTER, fastlockEn,
	ibias, PD, pdH, pdHB, pfdresetB, phshft, SLOWER,
	uph, uphB, VDDHV, VDDLV, VSS);
inout [1:0] uphB;
inout FASTER;
inout [1:0] uph;
inout VDDHV;
inout VDDLV;
inout [4:0] phshft;
inout clkshft;
inout pfdresetB;
inout VSS;
inout fastlockEn;
inout [1:0] dnhB;
inout PD;
inout [1:0] ibias;
inout [1:0] dnh;
inout pdHB;
inout SLOWER;
inout pdH;
wire [1:0] uphB;
wire up_and_dnB;
wire FASTER;
wire dn_sig;
wire uphB1;
wire [1:0] uph;
wire up_and_dn;
wire up_lvB;
wire up_latch;
wire NET4;
wire faster_rstb;
wire VDDHV;
wire uphlsB;
wire [3:0] ufrb;
wire dnhls;
wire [3:0] unsigned_faster_ret;
wire VDDLV;
wire [3:0] unsigned_slower_ret;
wire [4:0] phshft;
wire clkshft;
wire up_lv;
wire pfdresetB;
wire fastlockEnHB;
wire VSS;
wire fasterB;
wire fastlockEnH;
wire tiehigh;
wire fastlockEn;
wire [1:0] dnhB;
wire dn_latch;
wire dnh1;
wire PD;
wire [3:0] unsigned_faster;
wire pfdresetB_int;
wire [1:0] ibias;
wire uph1;
wire dnlvB;
wire [1:0] dnh;
wire [3:0] unsigned_slower;
wire dnhlsB;
wire pdHB;
wire [3:0] usrb;
wire up_latchB;
wire dn_lv;
wire dn_latchB;
wire uphls;
wire up_dig;
wire SLOWER;
wire dnhB1;
wire pdH;
wire slower_rstb;
wire PDB;
PLLTS16FFCFRACF_nand2x1sym_svt X6 ( .IN0(fasterB), .IN1(dn_latchB), .OUT(dn_sig), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_invx1cstm X3 ( .IN(FASTER), .OUT(fasterB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDLV));
PLLTS16FFCFRACF_nand2x1sym_svt X1 ( .IN0(NET4), .IN1(up_latchB), .OUT(up_dig), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_invx1cstm X2 ( .IN(SLOWER), .OUT(NET4), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDLV));
PLLTS16FFCFRACF_progdelay4b_thermo Xprogdelayfaster ( .in(pfdresetB_int), .out(faster_rstb), .sel({unsigned_faster_ret[3], unsigned_faster_ret[2],
	unsigned_faster_ret[1], unsigned_faster_ret[0]}), .VDD(VDDLV), .VSS(VSS));
PLLTS16FFCFRACF_progdelay4b_thermo Xprogdelayslower ( .in(pfdresetB_int), .out(slower_rstb), .sel({unsigned_slower_ret[3], unsigned_slower_ret[2],
	unsigned_slower_ret[1], unsigned_slower_ret[0]}), .VDD(VDDLV), .VSS(VSS));
PLLTS16FFCFRACF_signed_to_up_dn_4b Xphshft_logic ( .faster({unsigned_slower[3], unsigned_slower[2], unsigned_slower[1], unsigned_slower[0]}),
	.IN({phshft[4], phshft[3], phshft[2], phshft[1], phshft[0]}), .slower({unsigned_faster[3], unsigned_faster[2],
	unsigned_faster[1], unsigned_faster[0]}), .VDD(VDDLV), .VSS(VSS));
PLLTS16FFCFRACF_lvlshft_down X1up ( .inH(uphlsB), .outlv(up_lvB), .outlvB(up_lv), .VDDHV(VDDHV),
	.VDDLV(VDDLV), .VSS(VSS));
PLLTS16FFCFRACF_lvlshft_down X2dn ( .inH(dnhlsB), .outlv(dnlvB), .outlvB(dn_lv), .VDDHV(VDDHV),
	.VDDLV(VDDLV), .VSS(VSS));
PLLTS16FFCFRACF_bbm_HV Xbbmdn ( .inh(dnhls), .outh(dnh[0]), .outh_pre(dnh1), .outhb(dnhB[0]),
	.outhb_pre(dnhB1), .VDDHV(VDDHV), .VSS(VSS));
PLLTS16FFCFRACF_bbm_HV Xbbmup ( .inh(uphls), .outh(uph[0]), .outh_pre(uph1), .outhb(uphB[0]),
	.outhb_pre(uphB1), .VDDHV(VDDHV), .VSS(VSS));
PLLTS16FFCFRACF_lvlshft Xlspd ( .in(fastlockEn), .outhv(fastlockEnH), .outhvB(fastlockEnHB), .pdHB(pdHB),
	.VDDHV(VDDHV), .VDDLV(VDDLV), .VSS(VSS));
PLLTS16FFCFRACF_tiehighx1cstm X1tiehigh ( .OUT(tiehigh), .SUB(VSS), .VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_invx2cstm X12 ( .IN(up_and_dnB), .OUT(up_and_dn), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDLV));
PLLTS16FFCFRACF_nor2x1cstm X26_8_ ( .IN0(PD), .IN1(up_and_dn), .OUT(pfdresetB_int), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_nor2x1cstm X26_7_ ( .IN0(PD), .IN1(up_and_dn), .OUT(pfdresetB_int), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_nor2x1cstm X26_6_ ( .IN0(PD), .IN1(up_and_dn), .OUT(pfdresetB_int), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_nor2x1cstm X26_5_ ( .IN0(PD), .IN1(up_and_dn), .OUT(pfdresetB_int), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_nor2x1cstm X26_4_ ( .IN0(PD), .IN1(up_and_dn), .OUT(pfdresetB_int), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_nor2x1cstm X26_3_ ( .IN0(PD), .IN1(up_and_dn), .OUT(pfdresetB_int), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_nor2x1cstm X26_2_ ( .IN0(PD), .IN1(up_and_dn), .OUT(pfdresetB_int), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_nor2x1cstm X26_1_ ( .IN0(PD), .IN1(up_and_dn), .OUT(pfdresetB_int), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_nand2x1sym_svt X27 ( .IN0(dn_lv), .IN1(up_lv), .OUT(up_and_dnB), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_ffbrbx1cstm Xdffdn ( .CLK(FASTER), .D(tiehigh), .Q(dn_latch), .QB(dn_latchB),
	.RB(faster_rstb), .SUB(VSS), .VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_ffbrbx1cstm Xdffup ( .CLK(SLOWER), .D(tiehigh), .Q(up_latch), .QB(up_latchB),
	.RB(slower_rstb), .SUB(VSS), .VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_invx1cstm X5 ( .IN(PD), .OUT(PDB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDLV));
PLLTS16FFCFRACF_ffbrbx1cstm Xslow_3_ ( .CLK(clkshft), .D(unsigned_faster[3]), .Q(unsigned_faster_ret[3]), .QB(usrb[3]),
	.RB(PDB), .SUB(VSS), .VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_ffbrbx1cstm Xslow_2_ ( .CLK(clkshft), .D(unsigned_faster[2]), .Q(unsigned_faster_ret[2]), .QB(usrb[2]),
	.RB(PDB), .SUB(VSS), .VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_ffbrbx1cstm Xslow_1_ ( .CLK(clkshft), .D(unsigned_faster[1]), .Q(unsigned_faster_ret[1]), .QB(usrb[1]),
	.RB(PDB), .SUB(VSS), .VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_ffbrbx1cstm Xslow_0_ ( .CLK(clkshft), .D(unsigned_faster[0]), .Q(unsigned_faster_ret[0]), .QB(usrb[0]),
	.RB(PDB), .SUB(VSS), .VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_ffbrbx1cstm Xfast_3_ ( .CLK(clkshft), .D(unsigned_slower[3]), .Q(unsigned_slower_ret[3]), .QB(ufrb[3]),
	.RB(PDB), .SUB(VSS), .VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_ffbrbx1cstm Xfast_2_ ( .CLK(clkshft), .D(unsigned_slower[2]), .Q(unsigned_slower_ret[2]), .QB(ufrb[2]),
	.RB(PDB), .SUB(VSS), .VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_ffbrbx1cstm Xfast_1_ ( .CLK(clkshft), .D(unsigned_slower[1]), .Q(unsigned_slower_ret[1]), .QB(ufrb[1]),
	.RB(PDB), .SUB(VSS), .VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_ffbrbx1cstm Xfast_0_ ( .CLK(clkshft), .D(unsigned_slower[0]), .Q(unsigned_slower_ret[0]), .QB(ufrb[0]),
	.RB(PDB), .SUB(VSS), .VNEG(VSS), .VPOS(VDDLV));
PLLTS16FFCFRACF_lvlshft_fast Xlsdn ( .ibias(ibias[0]), .in(dn_sig), .outhv(dnhls), .outhvB(dnhlsB),
	.PDH(pdH), .PDHB(pdHB), .VDDHV(VDDHV), .VDDLV(VDDLV), .VSS(VSS));
PLLTS16FFCFRACF_lvlshft_fast Xlsup ( .ibias(ibias[1]), .in(up_dig), .outhv(uphls), .outhvB(uphlsB),
	.PDH(pdH), .PDHB(pdHB), .VDDHV(VDDHV), .VDDLV(VDDLV), .VSS(VSS));
PLLTS16FFCFRACF_nand2x1cstm X20 ( .IN0(fastlockEnH), .IN1(uph1), .OUT(uphB[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDHV));
PLLTS16FFCFRACF_nor2x1cstm X21 ( .IN0(fastlockEnHB), .IN1(uphB1), .OUT(uph[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDHV));
PLLTS16FFCFRACF_nor2x1cstm X22 ( .IN0(fastlockEnHB), .IN1(dnhB1), .OUT(dnh[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDHV));
PLLTS16FFCFRACF_nand2x1cstm X23 ( .IN0(fastlockEnH), .IN1(dnh1), .OUT(dnhB[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDHV));
PLLTS16FFCFRACF_nor2x1cstm Xnor_pfdresetB ( .IN0(PD), .IN1(up_and_dn), .OUT(pfdresetB), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDLV));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_sign_split
// *
module PLLTS16FFCFRACF_sign_split (in, outneg, outpos, VDD, VSS);
inout VDD;
inout [4:0] outpos;
inout VSS;
inout [5:0] in;
inout [4:0] outneg;
wire [4:0] s1;
wire VDD;
wire [4:0] outpos;
wire in5b;
wire VSS;
wire tiehigh;
wire [5:0] in;
wire tielow;
wire [4:0] outneg;
wire NET8;
wire [4:0] outposB;
PLLTS16FFCFRACF_fulladd5b_cbp X3 ( .A({in[4], in[3], in[2], in[1],
	in[0]}), .B({tiehigh, tiehigh, tiehigh, tiehigh, tiehigh}), .Ci(tielow),
	.Co(NET8), .S({s1[4], s1[3], s1[2], s1[1], s1[0]}), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_tiehighx1cstm X1 ( .OUT(tiehigh), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tielowx1cstm X2 ( .OUT(tielow), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X4 ( .IN(in[5]), .OUT(in5b), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvoutpos_4_ ( .IN(outposB[4]), .OUT(outpos[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvoutpos_3_ ( .IN(outposB[3]), .OUT(outpos[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvoutpos_2_ ( .IN(outposB[2]), .OUT(outpos[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvoutpos_1_ ( .IN(outposB[1]), .OUT(outpos[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvoutpos_0_ ( .IN(outposB[0]), .OUT(outpos[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xnandpos_4_ ( .IN0(in5b), .IN1(in[4]), .OUT(outposB[4]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xnandpos_3_ ( .IN0(in5b), .IN1(in[3]), .OUT(outposB[3]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xnandpos_2_ ( .IN0(in5b), .IN1(in[2]), .OUT(outposB[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xnandpos_1_ ( .IN0(in5b), .IN1(in[1]), .OUT(outposB[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm Xnandpos_0_ ( .IN0(in5b), .IN1(in[0]), .OUT(outposB[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nor2x1cstm Xnorneg_4_ ( .IN0(in5b), .IN1(s1[4]), .OUT(outneg[4]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nor2x1cstm Xnorneg_3_ ( .IN0(in5b), .IN1(s1[3]), .OUT(outneg[3]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nor2x1cstm Xnorneg_2_ ( .IN0(in5b), .IN1(s1[2]), .OUT(outneg[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nor2x1cstm Xnorneg_1_ ( .IN0(in5b), .IN1(s1[1]), .OUT(outneg[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nor2x1cstm Xnorneg_0_ ( .IN0(in5b), .IN1(s1[0]), .OUT(outneg[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_signed_to_up_dn_4b
// *
module PLLTS16FFCFRACF_signed_to_up_dn_4b (faster, IN, slower, VDD, VSS);
inout VDD;
inout VSS;
inout [3:0] faster;
inout [3:0] slower;
inout [4:0] IN;
wire [3:0] shiftupB;
wire VDD;
wire [4:0] phshiftB;
wire VSS;
wire Co;
wire tiehigh;
wire [3:0] faster;
wire tielow;
wire [3:0] slower;
wire [3:0] shiftdn1;
wire [4:0] IN;
PLLTS16FFCFRACF_tielowx1cstm Xtielow ( .OUT(tielow), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tiehighx1cstm Xtiehigh ( .OUT(tiehigh), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_fulladd4b_cbp Xadd_4b ( .A({phshiftB[3], phshiftB[2], phshiftB[1], phshiftB[0]}),
	.B({tielow, tielow, tielow, tielow}), .Ci(tiehigh), .Co(Co), .S({shiftdn1[3],
	shiftdn1[2], shiftdn1[1], shiftdn1[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_nor2x1cstm Xgate_dn_3_ ( .IN0(IN[4]), .IN1(phshiftB[3]), .OUT(faster[3]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nor2x1cstm Xgate_dn_2_ ( .IN0(IN[4]), .IN1(phshiftB[2]), .OUT(faster[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nor2x1cstm Xgate_dn_1_ ( .IN0(IN[4]), .IN1(phshiftB[1]), .OUT(faster[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nor2x1cstm Xgate_dn_0_ ( .IN0(IN[4]), .IN1(phshiftB[0]), .OUT(faster[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nor2x1cstm Xgate_up_3_ ( .IN0(phshiftB[4]), .IN1(shiftupB[3]), .OUT(slower[3]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nor2x1cstm Xgate_up_2_ ( .IN0(phshiftB[4]), .IN1(shiftupB[2]), .OUT(slower[2]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nor2x1cstm Xgate_up_1_ ( .IN0(phshiftB[4]), .IN1(shiftupB[1]), .OUT(slower[1]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nor2x1cstm Xgate_up_0_ ( .IN0(phshiftB[4]), .IN1(shiftupB[0]), .OUT(slower[0]), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_in_4_ ( .IN(IN[4]), .OUT(phshiftB[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_in_3_ ( .IN(IN[3]), .OUT(phshiftB[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_in_2_ ( .IN(IN[2]), .OUT(phshiftB[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_in_1_ ( .IN(IN[1]), .OUT(phshiftB[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_in_0_ ( .IN(IN[0]), .OUT(phshiftB[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_up_3_ ( .IN(shiftdn1[3]), .OUT(shiftupB[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_up_2_ ( .IN(shiftdn1[2]), .OUT(shiftupB[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_up_1_ ( .IN(shiftdn1[1]), .OUT(shiftupB[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_up_0_ ( .IN(shiftdn1[0]), .OUT(shiftupB[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_startup_logic_sc
// *
module PLLTS16FFCFRACF_startup_logic_sc (clkref, divEn, lock_int, pd, phi1,
	phi2, refDivEn, refEn, startup, VDD, VSS);
inout divEn;
inout phi1;
inout VDD;
inout startup;
inout refDivEn;
inout clkref;
inout refEn;
inout lock_int;
inout phi2;
inout VSS;
inout pd;
wire rb1;
wire divEn;
wire phi1;
wire refbuf;
wire VDD;
wire phi1B_3;
wire startup;
wire refDivEn;
wire refB;
wire ref2B;
wire clkref;
wire refEn;
wire lock_int;
wire startupB;
wire phi2;
wire VSS;
wire q0;
wire phi2B_3;
wire refbuf_sel_ref2B;
wire phi1B_2;
wire refbufB;
wire q1;
wire pd;
wire refbuf_sel_ref2;
wire phi2B_2;
wire startup1;
wire q1B;
wire ref2p5;
wire divbuf;
PLLTS16FFCFRACF_nand2x1cstm X1 ( .IN0(refEn), .IN1(refB), .OUT(refbuf), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_bufx2cstm X2 ( .IN(divEn), .OUT(divbuf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X3 ( .IN(clkref), .OUT(refB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X18 ( .CLK(divbuf), .D(q0), .Q(q1), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm X19 ( .CLK(ref2p5), .D(startup1), .Q(startup), .QB(startupB),
	.RB(rb1), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X20 ( .CLK(ref2p5), .D(q1B), .Q(q0), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tgxor2x1cstm X22 ( .IN0(q1), .IN1(q0), .OUT(startup1), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X23 ( .IN(q1), .OUT(q1B), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nor2x1cstm X25 ( .IN0(pd), .IN1(lock_int), .OUT(rb1), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_bufx2cstm X27 ( .IN(phi1B_3), .OUT(phi1B_2), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx2cstm X26 ( .IN(refbuf), .OUT(refbufB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx4cstm X29 ( .IN(phi1B_2), .OUT(phi1), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand3x1cstm X31 ( .IN0(startup), .IN1(phi2B_2), .IN2(refbuf_sel_ref2), .OUT(phi1B_3),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx4cstm X32 ( .IN(phi2B_2), .OUT(phi2), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_bufx2cstm X33 ( .IN(phi2B_3), .OUT(phi2B_2), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_nand3x1cstm X34 ( .IN0(startup), .IN1(phi1B_2), .IN2(refbuf_sel_ref2B), .OUT(phi2B_3),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_div2 Xdiv2 ( .ck1(refbuf), .ck2(ref2p5), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_invx1cstm X8 ( .IN(ref2p5), .OUT(ref2B), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym Xrefmux1 ( .IN0(refbuf), .IN1(ref2p5), .OUT(refbuf_sel_ref2), .SEL(refDivEn),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1sym Xrefmux2 ( .IN0(refbufB), .IN1(ref2B), .OUT(refbuf_sel_ref2B), .SEL(refDivEn),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_tff_st1x
// *
module PLLTS16FFCFRACF_tff_st1x (CLK, D, LOAD, QB, TB,
	VDD, VSS);
inout VDD;
inout D;
inout CLK;
inout VSS;
inout TB;
inout LOAD;
inout QB;
wire d1;
wire VDD;
wire D;
wire Q;
wire d0;
wire CLK;
wire VSS;
wire TB;
wire LOAD;
wire QB;
PLLTS16FFCFRACF_mux2x2cstm X4 ( .IN0(d0), .IN1(D), .OUT(d1), .SEL(LOAD),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx2cstm X3 ( .IN(Q), .OUT(QB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X2 ( .CLK(CLK), .D(d1), .Q(Q), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tgxnor2x1cstm X1 ( .IN0(Q), .IN1(TB), .OUT(d0), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_tff_st1x_fb
// *
module PLLTS16FFCFRACF_tff_st1x_fb (CLK, D, LOAD, QB, TB,
	VDD, VSS);
inout VDD;
inout D;
inout CLK;
inout VSS;
inout TB;
inout LOAD;
inout QB;
wire d1;
wire VDD;
wire D;
wire Q;
wire d0;
wire CLK;
wire dB;
wire VSS;
wire TB;
wire LOAD;
wire QB;
PLLTS16FFCFRACF_nand2x1cstm X1 ( .IN0(dB), .IN1(d0), .OUT(d1), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1cstm X2 ( .IN0(D), .IN1(LOAD), .OUT(dB), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm X4 ( .CLK(CLK), .D(d1), .Q(Q), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_tgxor2x1cstm X10 ( .IN0(Q), .IN1(TB), .OUT(d0), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx4cstm X11 ( .IN(Q), .OUT(QB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_tff_st1x_ulvt_v2
// *
module PLLTS16FFCFRACF_tff_st1x_ulvt_v2 (CLK, D, LOAD, QB, TB,
	VDD, VSS);
inout VDD;
inout D;
inout CLK;
inout VSS;
inout TB;
inout LOAD;
inout QB;
wire d1;
wire VDD;
wire D;
wire Q;
wire d0;
wire CLK;
wire VSS;
wire TB;
wire LOAD;
wire QB;
PLLTS16FFCFRACF_mux2x2cstm_ulvt X4 ( .IN0(d0), .IN1(D), .OUT(d1), .SEL(LOAD),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx2cstm X3 ( .IN(Q), .OUT(QB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_tgxnor2x1cstm_ulvt X1 ( .IN0(Q), .IN1(TB), .OUT(d0), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx1cstm_v2 X5 ( .CLK(CLK), .D(d1), .Q(Q), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_tff_st4x_tff0_fb
// *
module PLLTS16FFCFRACF_tff_st4x_tff0_fb (CLK, D, LOAD, QB, VDD,
	VSS);
inout VDD;
inout D;
inout CLK;
inout VSS;
inout LOAD;
inout QB;
wire d1;
wire VDD;
wire D;
wire CLK;
wire dB;
wire VSS;
wire LOAD;
wire NET2;
wire QB;
PLLTS16FFCFRACF_nand2x1sym X1 ( .IN0(dB), .IN1(NET2), .OUT(d1), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1sym X3 ( .IN0(D), .IN1(LOAD), .OUT(dB), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffx2cstm X4 ( .CLK(CLK), .D(d1), .Q(NET2), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx4cstm X11 ( .IN(NET2), .OUT(QB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_tgxnor2x1cstm
// *
module PLLTS16FFCFRACF_tgxnor2x1cstm (IN0, IN1, OUT, SUB, VNEG, VPOS);

input VPOS;
input VNEG;
input SUB;

output OUT;

input IN1;
input IN0;
xnor (OUT,IN0,IN1);
specify
    specparam
    tplh0 = 3*5 * 1e-12 / 1.0e-12,
        tphl0 = 1*5 * 1e-12 / 1.0e-12,
        tplh1 = 3*5 * 1e-12 / 1.0e-12,
        tphl1 = 1*5 * 1e-12 / 1.0e-12;
    (IN0 => OUT) = (tplh0,tphl0);
    (IN1 => OUT) = (tplh1,tphl1);
endspecify
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_tgxnor2x1cstm_ulvt
// *
module PLLTS16FFCFRACF_tgxnor2x1cstm_ulvt (VPOS, SUB, OUT, IN1, IN0, VNEG);
	input 	VPOS;
	input 	SUB;
	output 	OUT;
	input 	IN1;
	input 	IN0;
	input 	VNEG;
    PLLTS16FFCFRACF_tgxnor2x1cstm Xtgxnor2x1cstm (
	.IN0(IN0), .IN1(IN1), .SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_tgxor2x1cstm
// *
module PLLTS16FFCFRACF_tgxor2x1cstm (IN0, IN1, OUT, SUB, VNEG, VPOS);

input VPOS;
input VNEG;
input SUB;

output OUT;

input IN1;
input IN0;
xor (OUT,IN0,IN1);
specify
    specparam
    tplh0 = 3*5 * 1e-12 / 1.0e-12,
        tphl0 = 1*5 * 1e-12 / 1.0e-12,
        tplh1 = 3*5 * 1e-12 / 1.0e-12,
        tphl1 = 1*5 * 1e-12 / 1.0e-12;
    (IN0 => OUT) = (tplh0,tphl0);
    (IN1 => OUT) = (tplh1,tphl1);
endspecify
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_tiehighx1cstm
// *
module PLLTS16FFCFRACF_tiehighx1cstm (OUT, SUB, VNEG, VPOS);
input VPOS;
input VNEG;
input SUB;
output OUT;
buf (OUT,1'b1);
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_tiehighx1cstm_HV_2
// *
module PLLTS16FFCFRACF_tiehighx1cstm_HV_2 (VPOS, SUB, VNEG, OUT);
	input 	VPOS;
	input 	SUB;
	input 	VNEG;
	output 	OUT;
    PLLTS16FFCFRACF_tiehighx1cstm Xtiehighx1cstm (
	.SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_tielowx1cstm
// *
module PLLTS16FFCFRACF_tielowx1cstm (OUT, SUB, VNEG, VPOS);
input VPOS;
input VNEG;
input SUB;
output OUT;
buf (OUT,1'b0);
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_tielowx1cstm_HV_2
// *
module PLLTS16FFCFRACF_tielowx1cstm_HV_2 (VPOS, SUB, VNEG, OUT);
	input 	VPOS;
	input 	SUB;
	input 	VNEG;
	output 	OUT;
    PLLTS16FFCFRACF_tielowx1cstm Xtielowx1cstm (
	.SUB(SUB), .VNEG(VNEG), .VPOS(VPOS), 
	.OUT(OUT)
    );
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_up_dn_cnt_12b_in5b
// *
module PLLTS16FFCFRACF_up_dn_cnt_12b_in5b (calin, CLK, COUNT_DOWN, COUNT_OUT, COUNT_UP,
	DISABLEB, fastcal, RB, VDD, VSS);
inout fastcal;
inout COUNT_UP;
inout COUNT_DOWN;
inout VDD;
inout RB;
inout CLK;
inout VSS;
inout [11:0] COUNT_OUT;
inout [11:0] calin;
inout DISABLEB;
wire cnt_dn_max;
wire fastcal;
wire COUNT_UP;
wire [11:0] count_out1B;
wire COUNT_DOWN;
wire VDD;
wire cnt_dn_max_det0;
wire RB;
wire cnt_up_max_det1;
wire B_msbs;
wire [11:0] count_outb;
wire cnt_up_max_det0;
wire [11:0] count_out1;
wire cnt_up_max;
wire CLK;
wire B_lsbs;
wire VSS;
wire cnt_dn_max_det1;
wire cnt_dn_max_det2;
wire Co;
wire [11:0] count_out2;
wire Ci;
wire cnt_up_max_det2;
wire cnt_dn_maxb_12b;
wire [11:0] COUNT_OUT;
wire [11:0] calin;
wire cnt_up_maxb_12b;
wire [11:0] count_out3;
wire DISABLEB;
wire [11:0] count_out3b;
PLLTS16FFCFRACF_mux2x1cstm X1 ( .IN0(B_msbs), .IN1(Ci), .OUT(B_lsbs), .SEL(fastcal),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_fulladd12b_cbp Xadd ( .A({COUNT_OUT[11], COUNT_OUT[10], COUNT_OUT[9], COUNT_OUT[8],
	COUNT_OUT[7], COUNT_OUT[6], COUNT_OUT[5], COUNT_OUT[4], COUNT_OUT[3], COUNT_OUT[2], COUNT_OUT[1],
	COUNT_OUT[0]}), .B({B_msbs, B_msbs, B_msbs, B_msbs, B_msbs, B_msbs,
	B_msbs, B_lsbs, B_lsbs, B_lsbs, B_lsbs, B_lsbs}), .Ci(Ci),
	.Co(Co), .S({count_out1[11], count_out1[10], count_out1[9], count_out1[8], count_out1[7], count_out1[6],
	count_out1[5], count_out1[4], count_out1[3], count_out1[2], count_out1[1], count_out1[0]}), .VDD(VDD),
	.VSS(VSS));
PLLTS16FFCFRACF_invx1cstm Xinvcnt1_11_ ( .IN(count_out1[11]), .OUT(count_out1B[11]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcnt1_10_ ( .IN(count_out1[10]), .OUT(count_out1B[10]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcnt1_9_ ( .IN(count_out1[9]), .OUT(count_out1B[9]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcnt1_8_ ( .IN(count_out1[8]), .OUT(count_out1B[8]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcnt1_7_ ( .IN(count_out1[7]), .OUT(count_out1B[7]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcnt1_6_ ( .IN(count_out1[6]), .OUT(count_out1B[6]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcnt1_5_ ( .IN(count_out1[5]), .OUT(count_out1B[5]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcnt1_4_ ( .IN(count_out1[4]), .OUT(count_out1B[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcnt1_3_ ( .IN(count_out1[3]), .OUT(count_out1B[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcnt1_2_ ( .IN(count_out1[2]), .OUT(count_out1B[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcnt1_1_ ( .IN(count_out1[1]), .OUT(count_out1B[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcnt1_0_ ( .IN(count_out1[0]), .OUT(count_out1B[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xff_cnt_11_ ( .CLK(CLK), .D(count_out2[11]), .Q(count_out3[11]), .QB(count_out3b[11]),
	.RB(RB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xff_cnt_10_ ( .CLK(CLK), .D(count_out2[10]), .Q(count_out3[10]), .QB(count_out3b[10]),
	.RB(RB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xff_cnt_9_ ( .CLK(CLK), .D(count_out2[9]), .Q(count_out3[9]), .QB(count_out3b[9]),
	.RB(RB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xff_cnt_8_ ( .CLK(CLK), .D(count_out2[8]), .Q(count_out3[8]), .QB(count_out3b[8]),
	.RB(RB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xff_cnt_7_ ( .CLK(CLK), .D(count_out2[7]), .Q(count_out3[7]), .QB(count_out3b[7]),
	.RB(RB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xff_cnt_6_ ( .CLK(CLK), .D(count_out2[6]), .Q(count_out3[6]), .QB(count_out3b[6]),
	.RB(RB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xff_cnt_5_ ( .CLK(CLK), .D(count_out2[5]), .Q(count_out3[5]), .QB(count_out3b[5]),
	.RB(RB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xff_cnt_4_ ( .CLK(CLK), .D(count_out2[4]), .Q(count_out3[4]), .QB(count_out3b[4]),
	.RB(RB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xff_cnt_3_ ( .CLK(CLK), .D(count_out2[3]), .Q(count_out3[3]), .QB(count_out3b[3]),
	.RB(RB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xff_cnt_2_ ( .CLK(CLK), .D(count_out2[2]), .Q(count_out3[2]), .QB(count_out3b[2]),
	.RB(RB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xff_cnt_1_ ( .CLK(CLK), .D(count_out2[1]), .Q(count_out3[1]), .QB(count_out3b[1]),
	.RB(RB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xff_cnt_0_ ( .CLK(CLK), .D(count_out2[0]), .Q(count_out3[0]), .QB(count_out3b[0]),
	.RB(RB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcntout_11_ ( .IN(COUNT_OUT[11]), .OUT(count_outb[11]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcntout_10_ ( .IN(COUNT_OUT[10]), .OUT(count_outb[10]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcntout_9_ ( .IN(COUNT_OUT[9]), .OUT(count_outb[9]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcntout_8_ ( .IN(COUNT_OUT[8]), .OUT(count_outb[8]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcntout_7_ ( .IN(COUNT_OUT[7]), .OUT(count_outb[7]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcntout_6_ ( .IN(COUNT_OUT[6]), .OUT(count_outb[6]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcntout_5_ ( .IN(COUNT_OUT[5]), .OUT(count_outb[5]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcntout_4_ ( .IN(COUNT_OUT[4]), .OUT(count_outb[4]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcntout_3_ ( .IN(COUNT_OUT[3]), .OUT(count_outb[3]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcntout_2_ ( .IN(COUNT_OUT[2]), .OUT(count_outb[2]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcntout_1_ ( .IN(COUNT_OUT[1]), .OUT(count_outb[1]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinvcntout_0_ ( .IN(COUNT_OUT[0]), .OUT(count_outb[0]), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_and3x1cstm Xand_cnt_dn ( .IN0(DISABLEB), .IN1(cnt_dn_maxb_12b), .IN2(COUNT_DOWN), .OUT(B_msbs),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and3x1cstm Xand_cnt_up ( .IN0(DISABLEB), .IN1(cnt_up_maxb_12b), .IN2(COUNT_UP), .OUT(Ci),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand4x1cstm Xcnt_dn_max_det0 ( .IN0(count_outb[0]), .IN1(count_outb[1]), .IN2(count_outb[2]), .IN3(count_outb[3]),
	.OUT(cnt_dn_max_det0), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand4x1cstm Xcnt_dn_max_det1 ( .IN0(count_outb[4]), .IN1(count_outb[5]), .IN2(count_outb[6]), .IN3(count_outb[7]),
	.OUT(cnt_dn_max_det1), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand4x1cstm Xcnt_dn_max_det2 ( .IN0(count_outb[8]), .IN1(count_outb[9]), .IN2(count_outb[10]), .IN3(COUNT_OUT[11]),
	.OUT(cnt_dn_max_det2), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand4x1cstm Xcnt_up_max_det0 ( .IN0(COUNT_OUT[0]), .IN1(COUNT_OUT[1]), .IN2(COUNT_OUT[2]), .IN3(COUNT_OUT[3]),
	.OUT(cnt_up_max_det0), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand4x1cstm Xcnt_up_max_det1 ( .IN0(COUNT_OUT[4]), .IN1(COUNT_OUT[5]), .IN2(COUNT_OUT[6]), .IN3(COUNT_OUT[7]),
	.OUT(cnt_up_max_det1), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand4x1cstm Xcnt_up_max_det2 ( .IN0(COUNT_OUT[8]), .IN1(COUNT_OUT[9]), .IN2(COUNT_OUT[10]), .IN3(count_outb[11]),
	.OUT(cnt_up_max_det2), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_cnt_dn_max ( .IN(cnt_dn_max), .OUT(cnt_dn_maxb_12b), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm Xinv_cnt_up_max ( .IN(cnt_up_max), .OUT(cnt_up_maxb_12b), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt1_11_ ( .IN0(count_out1[11]), .IN1(count_out1B[11]), .OUT(count_out2[11]), .SEL(calin[11]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt1_10_ ( .IN0(count_out1[10]), .IN1(count_out1B[10]), .OUT(count_out2[10]), .SEL(calin[10]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt1_9_ ( .IN0(count_out1[9]), .IN1(count_out1B[9]), .OUT(count_out2[9]), .SEL(calin[9]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt1_8_ ( .IN0(count_out1[8]), .IN1(count_out1B[8]), .OUT(count_out2[8]), .SEL(calin[8]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt1_7_ ( .IN0(count_out1[7]), .IN1(count_out1B[7]), .OUT(count_out2[7]), .SEL(calin[7]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt1_6_ ( .IN0(count_out1[6]), .IN1(count_out1B[6]), .OUT(count_out2[6]), .SEL(calin[6]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt1_5_ ( .IN0(count_out1[5]), .IN1(count_out1B[5]), .OUT(count_out2[5]), .SEL(calin[5]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt1_4_ ( .IN0(count_out1[4]), .IN1(count_out1B[4]), .OUT(count_out2[4]), .SEL(calin[4]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt1_3_ ( .IN0(count_out1[3]), .IN1(count_out1B[3]), .OUT(count_out2[3]), .SEL(calin[3]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt1_2_ ( .IN0(count_out1[2]), .IN1(count_out1B[2]), .OUT(count_out2[2]), .SEL(calin[2]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt1_1_ ( .IN0(count_out1[1]), .IN1(count_out1B[1]), .OUT(count_out2[1]), .SEL(calin[1]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt1_0_ ( .IN0(count_out1[0]), .IN1(count_out1B[0]), .OUT(count_out2[0]), .SEL(calin[0]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt2_11_ ( .IN0(count_out3[11]), .IN1(count_out3b[11]), .OUT(COUNT_OUT[11]), .SEL(calin[11]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt2_10_ ( .IN0(count_out3[10]), .IN1(count_out3b[10]), .OUT(COUNT_OUT[10]), .SEL(calin[10]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt2_9_ ( .IN0(count_out3[9]), .IN1(count_out3b[9]), .OUT(COUNT_OUT[9]), .SEL(calin[9]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt2_8_ ( .IN0(count_out3[8]), .IN1(count_out3b[8]), .OUT(COUNT_OUT[8]), .SEL(calin[8]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt2_7_ ( .IN0(count_out3[7]), .IN1(count_out3b[7]), .OUT(COUNT_OUT[7]), .SEL(calin[7]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt2_6_ ( .IN0(count_out3[6]), .IN1(count_out3b[6]), .OUT(COUNT_OUT[6]), .SEL(calin[6]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt2_5_ ( .IN0(count_out3[5]), .IN1(count_out3b[5]), .OUT(COUNT_OUT[5]), .SEL(calin[5]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt2_4_ ( .IN0(count_out3[4]), .IN1(count_out3b[4]), .OUT(COUNT_OUT[4]), .SEL(calin[4]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt2_3_ ( .IN0(count_out3[3]), .IN1(count_out3b[3]), .OUT(COUNT_OUT[3]), .SEL(calin[3]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt2_2_ ( .IN0(count_out3[2]), .IN1(count_out3b[2]), .OUT(COUNT_OUT[2]), .SEL(calin[2]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt2_1_ ( .IN0(count_out3[1]), .IN1(count_out3b[1]), .OUT(COUNT_OUT[1]), .SEL(calin[1]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_mux2x1cstm Xmuxcnt2_0_ ( .IN0(count_out3[0]), .IN1(count_out3b[0]), .OUT(COUNT_OUT[0]), .SEL(calin[0]),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nor3x1cstm Xnor_cnt_dn_max ( .IN0(cnt_dn_max_det0), .IN1(cnt_dn_max_det1), .IN2(cnt_dn_max_det2), .OUT(cnt_dn_max),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nor3x1cstm Xnor_cnt_up_max ( .IN0(cnt_up_max_det0), .IN1(cnt_up_max_det1), .IN2(cnt_up_max_det2), .OUT(cnt_up_max),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_up_dn_cnt_4b
// *
module PLLTS16FFCFRACF_up_dn_cnt_4b (CLK, COUNT_DOWN, COUNT_OUT, COUNT_UP, DISABLEB,
	RST, VDD, VSS);
inout COUNT_UP;
inout COUNT_DOWN;
inout VDD;
inout RST;
inout CLK;
inout VSS;
inout [3:0] COUNT_OUT;
inout DISABLEB;
wire count_down1;
wire COUNT_UP;
wire COUNT_DOWN;
wire VDD;
wire [3:0] count_outb;
wire RST;
wire cnt_up_maxb;
wire [3:0] count_out1;
wire CLK;
wire VSS;
wire Co;
wire rstB;
wire count_up1;
wire [3:0] COUNT_OUT;
wire DISABLEB;
wire cnd_dn_maxb;
PLLTS16FFCFRACF_invx2cstm X1 ( .IN(RST), .OUT(rstB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_fulladd4b_cbp Xadd ( .A({COUNT_OUT[3], COUNT_OUT[2], COUNT_OUT[1], COUNT_OUT[0]}),
	.B({count_down1, count_down1, count_down1, count_down1}), .Ci(count_up1), .Co(Co), .S({count_out1[3],
	count_out1[2], count_out1[1], count_out1[0]}), .VDD(VDD), .VSS(VSS));
PLLTS16FFCFRACF_and3x1cstm Xand_cnt_dn ( .IN0(DISABLEB), .IN1(cnd_dn_maxb), .IN2(COUNT_DOWN), .OUT(count_down1),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_and3x1cstm Xand_cnt_up ( .IN0(DISABLEB), .IN1(cnt_up_maxb), .IN2(COUNT_UP), .OUT(count_up1),
	.SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand4x1cstm Xcnt_dn_max_det ( .IN0(count_outb[0]), .IN1(count_outb[1]), .IN2(count_outb[2]), .IN3(COUNT_OUT[3]),
	.OUT(cnd_dn_maxb), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand4x1cstm Xcnt_up_max_det ( .IN0(COUNT_OUT[0]), .IN1(COUNT_OUT[1]), .IN2(COUNT_OUT[2]), .IN3(count_outb[3]),
	.OUT(cnt_up_maxb), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xff_cnt_3_ ( .CLK(CLK), .D(count_out1[3]), .Q(COUNT_OUT[3]), .QB(count_outb[3]),
	.RB(rstB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xff_cnt_2_ ( .CLK(CLK), .D(count_out1[2]), .Q(COUNT_OUT[2]), .QB(count_outb[2]),
	.RB(rstB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xff_cnt_1_ ( .CLK(CLK), .D(count_out1[1]), .Q(COUNT_OUT[1]), .QB(count_outb[1]),
	.RB(rstB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_ffbrbx1cstm Xff_cnt_0_ ( .CLK(CLK), .D(count_out1[0]), .Q(COUNT_OUT[0]), .QB(count_outb[0]),
	.RB(rstB), .SUB(VSS), .VNEG(VSS), .VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_vco_analog_2pole
// *
module PLLTS16FFCFRACF_vco_analog_2pole (
VDDHV,
VDDPOST,
VSS,
PD,
VTUNEI,
dnb,
dni,
upb,
upi,
ibias_1_, 
ibias_0_,
gainboost,
gainboostB, 
outfb,
outpost,
tielow, 
vfollow,
vring, 
v0
);


parameter tsample       = 111;         
parameter fvcomax       = 8.0e9;   		
parameter fvcolimit     = fvcomax * 2;   	
parameter kvcoi	        = 25.0563768479078e9; 	
parameter ivcomax       = 3.160538e-03; 	
parameter vringmax      = 0.658378251423874;	
parameter crip          = 20.0e-12; 		
parameter propelements  = 4.0+16.0;                 
parameter totalelements = 1100.0;		
parameter kvcopHzV      = 1.81155e+10;          
parameter ibias_branch_no                           = 1;         
parameter [(ibias_branch_no*32-1):0] ibias_elements = {32'd30};  
parameter ibias_scale_factor                        = 1.0;       

parameter tstep_vco = 1e-12;

parameter vsupply = 1.8;

parameter vtp = 0.35;

parameter dac_mismatch = 0.0;

parameter f_vco_jitter = 1;

parameter up_dn_bits = 6;

parameter [(up_dn_bits*32-1):0] up_dn_weights = {32'd32, 32'd8, 32'd8, 32'd4, 32'd2, 32'd1};

parameter wscale_factor = 1e0;

parameter pjmaxvco 	                    = 10;        	                        
parameter pjmaxvco_scale_factor 	    = 1e-15;    	                        

parameter p_scaler_exp_ctl_width   = 1;

parameter p_fcmax_1                = 17e6;
parameter p_exp_1                  = 0.85;  
parameter p_scaler_base_1          = 0.89; 
parameter p_scaler_exp_1           = 0; 

parameter p_fcmax_2                = 14.7e6;
parameter p_exp_2                  = 0.8;  
parameter p_scaler_base_2          = 1.0; 
parameter p_scaler_exp_2           = 0; 

parameter gboost_stages       = 2;
parameter [(gboost_stages*32-1):0] gboost_weights = {32'd1, 32'd4};
parameter gboost_scale_factor = 1.0;

parameter voltage_bus_size = 2*16;
parameter current_bus_size = 16;

parameter maxv = 3.0;
parameter maxi = 3.0e-3;


input VDDHV;  
input VDDPOST;  
input VSS;

input [up_dn_bits-1:0] upi;
input [up_dn_bits-1:0] dni;
input [up_dn_bits-1:0] upb;
input [up_dn_bits-1:0] dnb;

input gainboost;
input gainboostB;

input tielow;

input PD; 

inout [3*16-1:0] VTUNEI;
output [16-1:0] ibias_0_, ibias_1_;

output v0;
output outpost;
output outfb;

output vring;
output [2:0] vfollow;


wire [up_dn_bits-1:0] up;
wire [up_dn_bits-1:0] dn;

wire fastlock;

wire [gboost_stages-1:0] gboost_enablers;

wire dsmpd;


assign vfollow = 3'b111;
assign vring = 1'b1;

assign up = upi;
assign dn = dni;

assign gboost_enablers = {gainboost&~gainboostB, 1'b1};

assign ibias_0_ = ibias_1_;

assign fastlock = $test$plusargs("USER_CONTROLLED_PLLTS16FFCFRACF_LOCK_TIME") ? 1'b1 : 1'b0;

assign outpost = PD ? 1'b0 : v0;
assign outfb = PD ? 1'b0 : v0;


PLLTS16FFCFRACF_vco_analog_2pole_core #(	
	.up_dn_bits(up_dn_bits),
	.up_dn_weights(up_dn_weights),
	.wscale_factor(wscale_factor),
	.tsample(tsample),
	.fvcomax(fvcomax),
	.fvcolimit(fvcolimit),
	.kvcoi(kvcoi),
	.ivcomax(ivcomax),
	.vringmax(vringmax),
	.crip(crip),
	.totalelements(totalelements),
	.propelements(propelements),
    .kvcopHzV(kvcopHzV),
	.tstep_vco(tstep_vco),
    .p_fcmax_1(p_fcmax_1),
    .p_fcmax_2(p_fcmax_2),
    .p_exp_1(p_exp_1),
    .p_scaler_base_1(p_scaler_base_1),
    .p_scaler_exp_1(p_scaler_exp_1),
    .p_exp_2(p_exp_2),
    .p_scaler_base_2(p_scaler_base_2),
    .p_scaler_exp_2(p_scaler_exp_2),
    .p_scaler_exp_ctl_width(p_scaler_exp_ctl_width),
    .ibias_elements(ibias_elements),
    .ibias_branch_no(ibias_branch_no),
    .ibias_scale_factor(ibias_scale_factor),
    .gboost_stages(gboost_stages),
    .gboost_weights(gboost_weights),
    .gboost_scale_factor(gboost_scale_factor),
	.vsupply(vsupply),
	.vtp(vtp),
	.dac_mismatch(dac_mismatch),
	.f_vco_jitter(f_vco_jitter),
	.pjmaxvco(pjmaxvco),
    .pjmaxvco_scale_factor(pjmaxvco_scale_factor),
    .voltage_bus_size(voltage_bus_size),
    .current_bus_size(current_bus_size),
    .maxv(maxv),
    .maxi(maxi)
) Xvco (VTUNEI, dn, up, ibias_1_, v0, PD, fastlock, 1'b0, gboost_enablers, 1'b1, dsmpd, 1'b1);
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_vco_analog_2pole_core
// *
module PLLTS16FFCFRACF_vco_analog_2pole_core (
VTUNEI, 
dn, 
up, 
ibias,
v0, 
PD,
fastlock,
mask_last_updn,
gboost_enablers,
ibias_enablers,
p_variant_switch,
p_scaler_exp_ctl
);



parameter fvcomax           = 384e6;   			                
parameter fvcolimit         = fvcomax * 1.4;   		            
parameter kvcoi	            = fvcomax / 100.0e-3;               
parameter ivcomax           = 0.1e-3;                           
parameter vringmax          = 0.4;                              
parameter crip              = 6.4e-12;                          
parameter totalelements     = 64.0;                             
parameter propelements      = 55.0;                             
parameter kvcopHzV          = fvcomax/(0.4*vringmax);           
parameter vsupply           = 3.0;                              

parameter ibias_branch_no                           = 1;        
parameter [(ibias_branch_no*32-1):0] ibias_elements = {32'd1};  
parameter ibias_scale_factor                        = 1.0;      

parameter up_dn_bits                            = 1;            
parameter [(up_dn_bits*32-1):0] up_dn_weights   = {32'd24};     
parameter wscale_factor                         = 1e0;          
parameter dac_mismatch                          = 1.0;          
parameter vtp                                   = 0.3;          

parameter f_vco_jitter                  = 1;                    
parameter pjmaxvco 	                    = 10;                   
parameter pjmaxvco_scale_factor 	    = 1e-15;                

parameter tsample 	= 100.0;		 	                        
parameter tstep_vco = 3.0;                                      

parameter p_scaler_exp_ctl_width   = 1;

parameter p_fcmax_1                = 1;
parameter p_exp_1                  = 0.8;  
parameter p_scaler_base_1          = 1; 
parameter p_scaler_exp_1           = 0; 

parameter p_fcmax_2                = 1;
parameter p_exp_2                  = 0.8;  
parameter p_scaler_base_2          = 1; 
parameter p_scaler_exp_2           = 0; 

parameter gboost_stages       = 2;
parameter [(gboost_stages*32-1):0] gboost_weights = {32'd2, 32'd4};
parameter gboost_scale_factor = 1.0;

parameter voltage_bus_size = 32;
parameter current_bus_size = 16;

parameter maxv = 5.0;
parameter maxi = 1.0e-3;

localparam cot = 1/(tsample*tstep_vco/2.0); 		

localparam vring_slope = 1/kvcopHzV;

localparam vring_intercept = vringmax - vring_slope*fvcomax;

localparam IPROP_TRIGGERED = 2'd0;
localparam DELAY_ELAPSED = 2'd1;
localparam PD_TRIGGERED = 2'd2;

localparam DELAY_ON_VCTRLI = 2'd0;
localparam DELAY_ON_POSEDGE = 2'd1 ;
localparam FVCOPROG_TRIGGERED = 2'd3;

localparam fmin = 0.01;


input PD; 

input [up_dn_bits-1:0] up;
input [up_dn_bits-1:0] dn;

input fastlock;


input mask_last_updn;

input [ibias_branch_no-1:0] ibias_enablers;

input p_variant_switch;

input [p_scaler_exp_ctl_width-1:0] p_scaler_exp_ctl;

input [gboost_stages-1:0] gboost_enablers;

inout [voltage_bus_size+current_bus_size-1:0] VTUNEI;
output [current_bus_size-1:0] ibias;

output v0;


real iunit;		
real iprop;		
real iint;		

real d0,d1,d2,n0,n1,n2; 	
real bw2pole;               

real fvconom; 		
real fvcoprog;		
real freq;		

real vring_prop;	
real vring_int;		
real vctrli;		

reg OUT_reg;		
reg v0; 

reg [current_bus_size-1:0] ibias_reg;

reg reg_semaphore;

wire [voltage_bus_size-1:0] VTUNEI_v;


assign VTUNEI_v = VTUNEI[voltage_bus_size+current_bus_size-1:current_bus_size];

assign ibias = ibias_reg;

function automatic reg [voltage_bus_size-1:0] volttobin;
    input real voltage;
    volttobin = $rtoi((voltage/maxv)*(2.0**$itor(voltage_bus_size - 1)-1.0));
endfunction
function automatic real  bintovolt;
    input reg [voltage_bus_size-1:0] binary;
    bintovolt = $itor($signed(binary))/(2.0**$itor(voltage_bus_size - 1)-1.0)*maxv;
endfunction
function automatic reg [current_bus_size-1:0] currenttobin;
    input real current;
    currenttobin = $rtoi((current/maxi)*(2.0**$itor(current_bus_size - 1)-1.0));
endfunction
function automatic real  bintocurrent;
    input reg [current_bus_size-1:0] binary;
    bintocurrent = $itor($signed(binary))/(2.0**$itor(current_bus_size-1)-1.0)*maxi;
endfunction


initial begin
	wait(fastlock);
	disable calc_integral;
	disable calc_prop_coefficients;
	disable calc_prop_difference;
end



initial begin : calc_integral
	reg [voltage_bus_size-1:0] VTUNEI_v_last;
	vctrli = vsupply;
	VTUNEI_v_last = volttobin(vsupply);
	forever begin
		if(PD) begin
			vctrli = vsupply;
			VTUNEI_v_last = volttobin(vsupply);
			fvconom = fmin;
			calc_dac_outputs(0.0, 0, 0, 0, vring_int, iint, iprop, iunit);
			wait(!PD);
		end
		else begin
			
			if (VTUNEI_v_last != VTUNEI_v) begin
				vctrli = bintovolt(VTUNEI_v);
				VTUNEI_v_last = VTUNEI_v;
			end
			if ( vctrli >= (vsupply-vtp) ) begin
				fvconom = fmin;
				calc_dac_outputs(0.0, up, dn, gboost_enablers, vring_int, iint, iprop, iunit);
			end
			else begin
				fvconom = (vsupply-vtp-vctrli) * kvcoi;
				calc_dac_outputs(fvconom, up, dn, gboost_enablers, vring_int, iint, iprop, iunit);
			end
		end
		fork : calc_integral_pd_fork
			begin
				@(VTUNEI_v or up or dn or gboost_enablers);
				disable calc_integral_pd_fork;
			end
			wait(PD) disable calc_integral_pd_fork;
		join
	end
end
task calc_dac_outputs;
	input real fvconom;
	input reg [up_dn_bits-1:0] up, dn;
    input reg [gboost_stages-1:0] gboost_enablers;
	output real vring_int, iint, iprop, iunit;
	real iup;
	real idown;
	real vscalering;	
	real iscale;		
	real iscale_up_real;
	real iscale_dn_real;
    real units_scale_gboost;
	integer i;
	reg [(up_dn_bits*32-1):0] up_dn_weights_reg;
	reg [(gboost_stages*32-1):0] gboost_weights_reg;
	begin
		up_dn_weights_reg = up_dn_weights; 
		gboost_weights_reg = gboost_weights; 
        if (mask_last_updn) begin
            
            up_dn_weights_reg[32*(up_dn_bits-1) +: 32] = 32'd0;
        end
        units_scale_gboost = 0;
		for (i = 0; i < gboost_stages; i = i+1) begin
            units_scale_gboost = units_scale_gboost +  gboost_enablers[i] * $itor(gboost_weights_reg[32*i +: 32]);
        end
        units_scale_gboost = units_scale_gboost * gboost_scale_factor;
        vring_int = fvconom * vring_slope + vring_intercept;
        iscale = (fvconom / fvcomax)**1.5;
		iint = ivcomax * iscale;
        iunit = iint / (totalelements - propelements*units_scale_gboost*wscale_factor); 
		iscale_up_real = 0;
		iscale_dn_real = 0; 
		for (i = 0; i < up_dn_bits; i = i+1) begin
			iscale_up_real = iscale_up_real + up[i] * $itor(up_dn_weights_reg[32*i +: 32]);
			iscale_dn_real = iscale_dn_real + dn[i] * $itor(up_dn_weights_reg[32*i +: 32]);
		end
		iup = iunit * iscale_up_real * (1.0 + (dac_mismatch/2)) * wscale_factor * units_scale_gboost;
		idown = iunit * iscale_dn_real * (1.0 - (dac_mismatch/2)) * wscale_factor * units_scale_gboost;
		iprop = (iup - idown);
	end
endtask


initial begin : calc_prop_coefficients
	real rring; 		
    real eps;
    eps = 1e-12;
	forever begin
        rring = (2.0 * fvcomax**(3.0/2.0) * vring_slope) / (3.0 * fvconom**(1.0/2.0) * ivcomax);		
        if (p_variant_switch) begin
            bw2pole = 2.0*3.14*p_fcmax_1 * (fvconom / fvcomax) ** (p_exp_1) * (p_scaler_base_1)**(p_scaler_exp_1*p_scaler_exp_ctl);
        end
        else begin
            bw2pole = 2.0*3.14*p_fcmax_2 * (fvconom / fvcomax) ** (p_exp_2) * (p_scaler_base_2)**(p_scaler_exp_2*p_scaler_exp_ctl);
        end
        
        if(bw2pole < eps) begin
            n0 = 0.0;
            n1 = 0.0;
            n2 = 0.0;
            d0 = 1.0;
            d1 = 0.0;
            d2 = 0.0;
        end
        
        else begin
            n0 = rring;
            n1 = 2.0*rring;
            n2 = rring;
            d0 = (rring*crip*cot**2)/bw2pole + cot*rring*crip + cot/bw2pole + 1.0;
            d1 = 2.0 - 2.0*(rring*crip*cot**2)/bw2pole;
            d2 = 1.0 - cot*rring*crip - cot/bw2pole + (rring*crip*cot**2)/bw2pole;
        end
		@(fvconom or p_scaler_exp_ctl or p_scaler_exp_ctl);
	end
end

initial begin : calc_prop_difference
	real q;
	real iprop_old;
	realtime tlast_charge;
    realtime tdither;
    realtime delay_remaining;
    realtime tfork;
    realtime ttrigger;
	real iout_0, iout_1, iout_2;	
	real vout_1, vout_2;	        
    reg [1:0] prop_state;
    prop_state = PD_TRIGGERED;
    reg_semaphore = 1'b0;
	forever begin
        case(prop_state)
            PD_TRIGGERED: begin
                init_prop_equation(q, iprop_old, iout_0, iout_1, iout_2, vring_prop, vout_1, vout_2,
                                     tdither, ttrigger, tfork, delay_remaining);
                wait(!PD);
                tlast_charge = $realtime;
            end
            DELAY_ELAPSED: begin
                integrate_charge(iprop, q, iprop_old, tlast_charge);
                
				iout_0 = q / tdither; 
                vring_prop = (1/d0) * (iout_0*n0 + iout_1*n1 + iout_2*n2 - vout_1*d1 - vout_2*d2);
				
				vout_2 = vout_1;
				vout_1 = vring_prop;
                iout_2 = iout_1;
				iout_1 = iout_0;
				
				q = 0;
                gen_tdither(tdither);
                delay_remaining = tdither;
            end
            IPROP_TRIGGERED: begin
                integrate_charge(iprop, q, iprop_old, tlast_charge);
                delay_remaining = delay_remaining - (ttrigger - tfork);
            end
        endcase
        tfork = $realtime;
		fork : calc_prop_diff_pd_fork
            begin
                @(iprop) take_semaphore;
                prop_state = IPROP_TRIGGERED;
                disable calc_prop_diff_pd_fork;
            end
            begin
                #(delay_remaining) take_semaphore;
                prop_state = DELAY_ELAPSED;
                disable calc_prop_diff_pd_fork;
            end
            begin
                wait(PD) take_semaphore;
                prop_state = PD_TRIGGERED;
                disable calc_prop_diff_pd_fork;
            end
		join
        ttrigger = $realtime;
        release_semaphore;
	end
end
task init_prop_equation;
    output real q;
    output real iprop_old;
    output real iout_0;
    output real iout_1;
    output real iout_2;
    output real vring_prop;
    output real vout_1;
    output real vout_2;
    output realtime tdither;
    output realtime tfork;
    output realtime ttrigger;
    output realtime delay_remaining;
    begin
        q = 0;
        iprop_old = 0;
        iout_0 = 0;
        iout_1 = 0;
        iout_2 = 0;
        vring_prop = 0;
        vout_1 = 0;
        vout_2 = 0;
        ttrigger = 0;
        tfork = 0;
        gen_tdither(tdither);
        delay_remaining = tdither;
    end
endtask
task gen_tdither;
    output tdither;
    realtime tdither;
    begin
        tdither = tsample * (1 + 0.01 * $random / 2147483648.0); 
    end
endtask
task integrate_charge;
    input real iprop;
    inout real q;
    inout real iprop_old; 
    inout realtime tlast_charge; 
    realtime tdiff;
    begin
        tdiff = ($realtime - tlast_charge);
        q = q + tdiff * iprop_old;
        iprop_old = iprop;
        tlast_charge = $realtime;
    end
endtask
task automatic take_semaphore;
    begin
        wait(!reg_semaphore);
        reg_semaphore = 1'b1;
    end
endtask
task automatic release_semaphore;
    begin
        reg_semaphore = 1'b0;
    end
endtask


initial begin : calc_freq
	real freq_tmp;
	freq = fmin;
	freq_tmp = fmin;
	forever @(vring_prop or fvconom or fvcoprog) begin
        if (!fastlock) begin
            freq_tmp = vring_prop/vring_slope + fvconom;
        end
        else begin
            freq_tmp = fvcoprog;
        end
		if (freq_tmp > fvcolimit) begin
			freq = fvcolimit;
		end
		else begin
			freq = (freq_tmp < fmin) ? fmin : freq_tmp;
		end
	end
end

initial begin : gen_out_reg
	real delay;
    real vctrli_last;
    integer tjit_seed;
    realtime edge_time;
    realtime elapsed_time;
    reg [1:0] gen_state;
    gen_state = PD_TRIGGERED;
    tjit_seed = 1;
	forever begin
        case(gen_state)
            PD_TRIGGERED: begin 
                delay = 0.5  / (fmin * tstep_vco);
                vctrli_last = vsupply;
                OUT_reg = 0;
                wait(!PD);
            end
            DELAY_ON_POSEDGE, FVCOPROG_TRIGGERED: begin
                 calc_delay(tjit_seed, delay);
            end
            DELAY_ON_VCTRLI: begin
                 calc_delay(tjit_seed, delay);
                if (delay <= elapsed_time) begin
                    delay = 0;
                end
                else begin
                    delay = delay - elapsed_time;
                end
            end
        endcase
        vctrli_last = vctrli;
        fork : gen_out_reg_fork
            begin: pd_triggered
                wait(PD);
                gen_state = PD_TRIGGERED;
                disable gen_out_reg_fork;
            end
            begin: delay_on_posedge
                #(delay) OUT_reg = ~OUT_reg;
                edge_time = $realtime;
                gen_state = DELAY_ON_POSEDGE;
                disable gen_out_reg_fork;
            end
            begin: delay_on_vctrli
                wait(abs(vctrli_last-vctrli)/vctrli_last>0.005);
                gen_state = DELAY_ON_VCTRLI;
                elapsed_time = $realtime - edge_time;
                disable gen_out_reg_fork;
            end
            begin: fvcoprog_triggered
                @(fvcoprog)
                gen_state = FVCOPROG_TRIGGERED;
                disable gen_out_reg_fork;
            end
        join
	end
end
task calc_delay;
    inout integer tjit_seed;
    output real delay;
    integer tjit_avg;
    integer tjit_int;
    integer pjrms;
    real tjit;
    begin
        tjit_avg = 0;
        if (f_vco_jitter && !fastlock) begin
            pjrms = $rtoi(pjmaxvco * (fvcomax/freq)**0.5);
            tjit_int = $dist_normal(tjit_seed, tjit_avg, pjrms);
            tjit = tjit_int * pjmaxvco_scale_factor;
            delay = 0.5 / (freq * tstep_vco) + 0.5 * tjit/tstep_vco;
        end
        else begin
            delay = 0.5 / (freq * tstep_vco);
        end
        if (delay <= 0) begin
            $display("Negative or Zero delay calculated by %m.  Killing simulation");
            $finish;
        end
    end
endtask
function real abs;
input real a;
begin
    if(a>0) abs = a;
    else abs = a*(-1);
end
endfunction


always @(*) begin
    case (PD)
        1'b0:       v0 = OUT_reg;
        1'bx:       v0 = 1'bx; 
        default:    v0 = 1'b0; 
    endcase
end

always @(iunit) begin : write_ibias_current
    integer i;
    real iscale;
    iscale = 0.0;
    for (i = 0; i < ibias_branch_no; i = i + 1) begin
        iscale = iscale +  ibias_enablers[i] * $itor(ibias_elements[32*i +: 32]);
    end
    iscale = iscale * ibias_scale_factor;
	ibias_reg = currenttobin(iunit*iscale);
end
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_vco_bbm_unit
// *
module PLLTS16FFCFRACF_vco_bbm_unit (in, out, outB, VDD, VSS);
inout out;
inout VDD;
inout outB;
inout VSS;
inout in;
wire out;
wire VDD;
wire outB;
wire out2;
wire VSS;
wire in;
wire outB2;
wire NET2;
wire NET1;
wire inB;
PLLTS16FFCFRACF_nand2x2sym_svt_v2 X1 ( .IN0(NET1), .IN1(inB), .OUT(NET2), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x2sym_svt_v2 X2 ( .IN0(NET2), .IN1(in), .OUT(NET1), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X3 ( .IN(in), .OUT(inB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx16cstm X6 ( .IN(out2), .OUT(outB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx16cstm X7 ( .IN(outB2), .OUT(out), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx4cstm X4 ( .IN(NET1), .OUT(out2), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx4cstm X5 ( .IN(NET2), .OUT(outB2), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_vco_bbm_unit_s
// *
module PLLTS16FFCFRACF_vco_bbm_unit_s (in, out, outB, VDD, VSS);
inout out;
inout VDD;
inout outB;
inout VSS;
inout in;
wire out;
wire VDD;
wire outB;
wire out2;
wire VSS;
wire in;
wire outB2;
wire NET2;
wire NET1;
wire inB;
PLLTS16FFCFRACF_nand2x1sym_svt X1 ( .IN0(NET1), .IN1(inB), .OUT(NET2), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_nand2x1sym_svt X2 ( .IN0(NET2), .IN1(in), .OUT(NET1), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X3 ( .IN(in), .OUT(inB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx4cstm X6 ( .IN(out2), .OUT(outB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx4cstm X7 ( .IN(outB2), .OUT(out), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X4 ( .IN(NET1), .OUT(out2), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
PLLTS16FFCFRACF_invx1cstm X5 ( .IN(NET2), .OUT(outB2), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDD));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_vco_digital_2pole
// *
module PLLTS16FFCFRACF_vco_digital_2pole (ckDACen, DACEN, DN, dnb, dni,
	DSMEN, DSMPD, errordown, errorup, tielow, UP, upb,
	upi, VDDREF, VSS);
inout [4:0] errordown;
inout ckDACen;
inout DACEN;
inout DSMEN;
inout [5:0] upi;
inout DSMPD;
inout VSS;
inout [5:0] dnb;
inout [5:0] dni;
inout [4:0] errorup;
inout tielow;
inout VDDREF;
inout UP;
inout DN;
inout [5:0] upb;
wire [4:0] up1;
wire [4:0] errordown;
wire NET4;
wire ckDACen;
wire NET3;
wire DSMEN;
wire DACEN;
wire DACPD;
wire errorup4or3;
wire [5:0] upi;
wire [4:0] dn1;
wire DSMPD;
wire VSS;
wire ckdacenbuf;
wire [5:0] dnb;
wire dnB;
wire [5:0] dni;
wire [4:0] errorup;
wire tielow;
wire VDDREF;
wire UP;
wire DN;
wire errordn4or3;
wire upB;
wire [5:0] upb;
PLLTS16FFCFRACF_invx1cstm X11 ( .IN(DSMEN), .OUT(DSMPD), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_invx1cstm X4 ( .IN(DACEN), .OUT(DACPD), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_vco_bbm_unit_s Xbbmdn_4_ ( .in(dn1[4]), .out(dni[4]), .outB(dnb[4]), .VDD(VDDREF),
	.VSS(VSS));
PLLTS16FFCFRACF_vco_bbm_unit_s Xbbmdn_3_ ( .in(dn1[3]), .out(dni[3]), .outB(dnb[3]), .VDD(VDDREF),
	.VSS(VSS));
PLLTS16FFCFRACF_vco_bbm_unit_s Xbbmdn_2_ ( .in(dn1[2]), .out(dni[2]), .outB(dnb[2]), .VDD(VDDREF),
	.VSS(VSS));
PLLTS16FFCFRACF_vco_bbm_unit_s Xbbmdn_1_ ( .in(dn1[1]), .out(dni[1]), .outB(dnb[1]), .VDD(VDDREF),
	.VSS(VSS));
PLLTS16FFCFRACF_vco_bbm_unit_s Xbbmdn_0_ ( .in(dn1[0]), .out(dni[0]), .outB(dnb[0]), .VDD(VDDREF),
	.VSS(VSS));
PLLTS16FFCFRACF_vco_bbm_unit Xbbmdn_5_ ( .in(DN), .out(dni[5]), .outB(dnb[5]), .VDD(VDDREF),
	.VSS(VSS));
PLLTS16FFCFRACF_vco_bbm_unit_s Xbbmup_4_ ( .in(up1[4]), .out(upi[4]), .outB(upb[4]), .VDD(VDDREF),
	.VSS(VSS));
PLLTS16FFCFRACF_vco_bbm_unit_s Xbbmup_3_ ( .in(up1[3]), .out(upi[3]), .outB(upb[3]), .VDD(VDDREF),
	.VSS(VSS));
PLLTS16FFCFRACF_vco_bbm_unit_s Xbbmup_2_ ( .in(up1[2]), .out(upi[2]), .outB(upb[2]), .VDD(VDDREF),
	.VSS(VSS));
PLLTS16FFCFRACF_vco_bbm_unit_s Xbbmup_1_ ( .in(up1[1]), .out(upi[1]), .outB(upb[1]), .VDD(VDDREF),
	.VSS(VSS));
PLLTS16FFCFRACF_vco_bbm_unit_s Xbbmup_0_ ( .in(up1[0]), .out(upi[0]), .outB(upb[0]), .VDD(VDDREF),
	.VSS(VSS));
PLLTS16FFCFRACF_vco_bbm_unit Xbbmup_5_ ( .in(UP), .out(upi[5]), .outB(upb[5]), .VDD(VDDREF),
	.VSS(VSS));
PLLTS16FFCFRACF_dac_driver_logic Xdnlogic_4_ ( .DACen(ckdacenbuf), .DACin(errordown[4]), .DACout(dn1[4]), .DACPD(DACPD),
	.DSMPD(DSMPD), .PFDinB(dnB), .VDD(VDDREF), .VSS(VSS));
PLLTS16FFCFRACF_dac_driver_logic Xdnlogic_3_ ( .DACen(ckdacenbuf), .DACin(errordn4or3), .DACout(dn1[3]), .DACPD(DACPD),
	.DSMPD(DSMPD), .PFDinB(dnB), .VDD(VDDREF), .VSS(VSS));
PLLTS16FFCFRACF_dac_driver_logic Xdnlogic_2_ ( .DACen(ckdacenbuf), .DACin(errordown[2]), .DACout(dn1[2]), .DACPD(DACPD),
	.DSMPD(DSMPD), .PFDinB(dnB), .VDD(VDDREF), .VSS(VSS));
PLLTS16FFCFRACF_dac_driver_logic Xdnlogic_1_ ( .DACen(ckdacenbuf), .DACin(errordown[1]), .DACout(dn1[1]), .DACPD(DACPD),
	.DSMPD(DSMPD), .PFDinB(dnB), .VDD(VDDREF), .VSS(VSS));
PLLTS16FFCFRACF_dac_driver_logic Xdnlogic_0_ ( .DACen(ckdacenbuf), .DACin(errordown[0]), .DACout(dn1[0]), .DACPD(DACPD),
	.DSMPD(DSMPD), .PFDinB(dnB), .VDD(VDDREF), .VSS(VSS));
PLLTS16FFCFRACF_dac_driver_logic Xuplogic_4_ ( .DACen(ckdacenbuf), .DACin(errorup[4]), .DACout(up1[4]), .DACPD(DACPD),
	.DSMPD(DSMPD), .PFDinB(upB), .VDD(VDDREF), .VSS(VSS));
PLLTS16FFCFRACF_dac_driver_logic Xuplogic_3_ ( .DACen(ckdacenbuf), .DACin(errorup4or3), .DACout(up1[3]), .DACPD(DACPD),
	.DSMPD(DSMPD), .PFDinB(upB), .VDD(VDDREF), .VSS(VSS));
PLLTS16FFCFRACF_dac_driver_logic Xuplogic_2_ ( .DACen(ckdacenbuf), .DACin(errorup[2]), .DACout(up1[2]), .DACPD(DACPD),
	.DSMPD(DSMPD), .PFDinB(upB), .VDD(VDDREF), .VSS(VSS));
PLLTS16FFCFRACF_dac_driver_logic Xuplogic_1_ ( .DACen(ckdacenbuf), .DACin(errorup[1]), .DACout(up1[1]), .DACPD(DACPD),
	.DSMPD(DSMPD), .PFDinB(upB), .VDD(VDDREF), .VSS(VSS));
PLLTS16FFCFRACF_dac_driver_logic Xuplogic_0_ ( .DACen(ckdacenbuf), .DACin(errorup[0]), .DACout(up1[0]), .DACPD(DACPD),
	.DSMPD(DSMPD), .PFDinB(upB), .VDD(VDDREF), .VSS(VSS));
PLLTS16FFCFRACF_invx2cstm X1 ( .IN(UP), .OUT(upB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_invx2cstm X2 ( .IN(DN), .OUT(dnB), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_bufx4cstm X3 ( .IN(ckDACen), .OUT(ckdacenbuf), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_invx1cstm X6 ( .IN(NET3), .OUT(errorup4or3), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_invx1cstm X7 ( .IN(NET4), .OUT(errordn4or3), .SUB(VSS), .VNEG(VSS),
	.VPOS(VDDREF));
PLLTS16FFCFRACF_nor2x1cstm X8 ( .IN0(errordown[3]), .IN1(errordown[4]), .OUT(NET4), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDREF));
PLLTS16FFCFRACF_nor2x1cstm X9 ( .IN0(errorup[3]), .IN1(errorup[4]), .OUT(NET3), .SUB(VSS),
	.VNEG(VSS), .VPOS(VDDREF));
PLLTS16FFCFRACF_tielowx1cstm X16 ( .OUT(tielow), .SUB(VSS), .VNEG(VSS), .VPOS(VDDREF));
endmodule

// *
// * Schematic name: PLLTS16FFCFRACF_vco_ring_hv_2pole
// *
module PLLTS16FFCFRACF_vco_ring_hv_2pole (ckDACen, DACEN, DSMEN, errordown, errorup,
	faster, ibias_1_, ibias_0_, outfb, outpost, PD, slower,
	v0, VDDHV, VDDPOST, VDDREF, vfollow, vring, VSSHV,
	VSSREF, VTUNEI);
output [16-1:0] ibias_1_;
inout [2:0] vfollow;
inout VSSREF;
inout outpost;
inout [4:0] errordown;
inout outfb;
inout VDDHV;
inout v0;
inout VSSHV;
inout ckDACen;
output [16-1:0] ibias_0_;
inout DACEN;
inout DSMEN;
inout VDDPOST;
inout faster;
inout PD;
inout [3*16-1:0] VTUNEI;
inout [4:0] errorup;
inout vring;
inout slower;
inout VDDREF;
wire [16-1:0] ibias_1_;
wire [2:0] vfollow;
wire VSSREF;
wire outpost;
wire [4:0] errordown;
wire outfb;
wire VDDHV;
wire v0;
wire VSSHV;
wire ckDACen;
wire [16-1:0] ibias_0_;
wire DSMEN;
wire DACEN;
wire [5:0] upi;
wire VDDPOST;
wire DSMPD;
wire [5:0] dnb;
wire faster;
wire PD;
wire [5:0] dni;
wire [3*16-1:0] VTUNEI;
wire [4:0] errorup;
wire vring;
wire tielow;
wire slower;
wire VDDREF;
wire [5:0] upb;
PLLTS16FFCFRACF_vco_analog_2pole Xvcoana ( .dnb({dnb[5], dnb[4], dnb[3], dnb[2],
	dnb[1], dnb[0]}), .dni({dni[5], dni[4], dni[3], dni[2], dni[1],
	dni[0]}), .gainboost(DSMEN), .gainboostB(DSMPD), .ibias_1_(ibias_1_), .ibias_0_(ibias_0_), .outfb(outfb), .outpost(outpost),
	.PD(PD), .tielow(tielow), .upb({upb[5], upb[4], upb[3], upb[2], upb[1],
	upb[0]}), .upi({upi[5], upi[4], upi[3], upi[2], upi[1], upi[0]}),
	.v0(v0), .VDDHV(VDDHV), .VDDPOST(VDDPOST), .vfollow({vfollow[2], vfollow[1], vfollow[0]}), .vring(vring),
	.VSS(VSSHV), .VTUNEI(VTUNEI));
PLLTS16FFCFRACF_vco_digital_2pole Xvcodig ( .ckDACen(ckDACen), .DACEN(DACEN), .DN(slower), .dnb({dnb[5],
	dnb[4], dnb[3], dnb[2], dnb[1], dnb[0]}), .dni({dni[5], dni[4],
	dni[3], dni[2], dni[1], dni[0]}), .DSMEN(DSMEN), .DSMPD(DSMPD), .errordown({errordown[4],
	errordown[3], errordown[2], errordown[1], errordown[0]}), .errorup({errorup[4], errorup[3], errorup[2],
	errorup[1], errorup[0]}), .tielow(tielow), .UP(faster), .upb({upb[5], upb[4], upb[3],
	upb[2], upb[1], upb[0]}), .upi({upi[5], upi[4], upi[3], upi[2],
	upi[1], upi[0]}), .VDDREF(VDDREF), .VSS(VSSREF));
endmodule

// Final Undefines:
