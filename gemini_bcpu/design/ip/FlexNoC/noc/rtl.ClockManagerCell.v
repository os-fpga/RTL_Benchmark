
// Copyright (c) 2006-2013 Arteris, Inc. All rights reserved.
// Copyright (c) 2013-2020 Qualcomm Technologies, Inc. All rights reserved.
// These files contain material which is the Confidential Information of Arteris and which is protected by various intellectual property rights.
// You may make, have made, use, reproduce, display or perform (publicly or otherwise), prepare
// derivative works based on, offer for sale, sell, distribute, import,
// disclose, license, sublicense, dispose of and otherwise exploit this RTL solely in
// accordance with your license agreement with Arteris, Inc or Arteris IP, SAS.
// If you have not agreed to all of the terms and conditions in such License
// Agreement, you should immediately return these files (including any copies)
// to your licensor Arteris, Inc or Arteris IP, SAS.
// The material in these files or portions thereof are protected under U.S. and foreign patent and patent applications.
// This software and hardware IP product is protected by patents as described at http://www.arteris.com/patents.


// Generated by FlexNoC
// Tool Version 4.7.0
// Platform     centos:7
// Date         Tue Sep 13 13:44:24 2022


// FlexNoC version    : 4.7.0
// PDD File           : /home/aptashko/GEMINI/design/ip/FlexNoC/rsnoc_arch_edit.pdd
// Exported Structure : /Specification.Architecture.Structure
// ExportOption       : /verilog

`timescale 1ps/1ps
module ClockManager_fpga_regime_m0_Cm ( In_Clk , In_RstN , In_Tm , root_Clk , root_En , root_RstN , root_Tm );
	input   In_Clk    ;
	input   In_RstN   ;
	input   In_Tm     ;
	output  root_Clk  ;
	output  root_En   ;
	output  root_RstN ;
	output  root_Tm   ;
	wire  u_root  ;
	wire  IntRstN ;
	wire  LClk_Tm ;
	assign u_root = In_Clk;
	assign root_Clk = u_root;
	assign root_En = 1'b1;
	assign IntRstN = In_RstN;
	assign root_RstN = IntRstN;
	assign LClk_Tm = In_Tm;
	assign root_Tm = LClk_Tm;
endmodule



// FlexNoC version    : 4.7.0
// PDD File           : /home/aptashko/GEMINI/design/ip/FlexNoC/rsnoc_arch_edit.pdd
// Exported Structure : /Specification.Architecture.Structure
// ExportOption       : /verilog

`timescale 1ps/1ps
module ClockManager_fpga_regime_m1_Cm ( In_Clk , In_RstN , In_Tm , root_Clk , root_En , root_RstN , root_Tm );
	input   In_Clk    ;
	input   In_RstN   ;
	input   In_Tm     ;
	output  root_Clk  ;
	output  root_En   ;
	output  root_RstN ;
	output  root_Tm   ;
	wire  u_root  ;
	wire  IntRstN ;
	wire  LClk_Tm ;
	assign u_root = In_Clk;
	assign root_Clk = u_root;
	assign root_En = 1'b1;
	assign IntRstN = In_RstN;
	assign root_RstN = IntRstN;
	assign LClk_Tm = In_Tm;
	assign root_Tm = LClk_Tm;
endmodule



// FlexNoC version    : 4.7.0
// PDD File           : /home/aptashko/GEMINI/design/ip/FlexNoC/rsnoc_arch_edit.pdd
// Exported Structure : /Specification.Architecture.Structure
// ExportOption       : /verilog

`timescale 1ps/1ps
module ClockManager_fpga_regime_s0_Cm ( In_Clk , In_RstN , In_Tm , root_Clk , root_En , root_RstN , root_Tm );
	input   In_Clk    ;
	input   In_RstN   ;
	input   In_Tm     ;
	output  root_Clk  ;
	output  root_En   ;
	output  root_RstN ;
	output  root_Tm   ;
	wire  u_root  ;
	wire  IntRstN ;
	wire  LClk_Tm ;
	assign u_root = In_Clk;
	assign root_Clk = u_root;
	assign root_En = 1'b1;
	assign IntRstN = In_RstN;
	assign root_RstN = IntRstN;
	assign LClk_Tm = In_Tm;
	assign root_Tm = LClk_Tm;
endmodule



// FlexNoC version    : 4.7.0
// PDD File           : /home/aptashko/GEMINI/design/ip/FlexNoC/rsnoc_arch_edit.pdd
// Exported Structure : /Specification.Architecture.Structure
// ExportOption       : /verilog

`timescale 1ps/1ps
module ClockManager_interconnect_synch_regime_Cm133 ( In_Clk , In_RstN , In_Tm , In_root_Clk , root_Clk , root_En , root_RstN , root_Tm );
	input   In_Clk      ;
	input   In_RstN     ;
	input   In_Tm       ;
	input   In_root_Clk ;
	output  root_Clk    ;
	output  root_En     ;
	output  root_RstN   ;
	output  root_Tm     ;
	wire       u_root     ;
	reg  [2:0] uCnt_root  ;
	wire       uEn_root   ;
	reg        uTog0_root ;
	reg        uTog1_root ;
	wire       u_17       ;
	wire       u_17_RstN  ;
	wire       IntRstN    ;
	wire       LClk       ;
	wire       LClk_RstN  ;
	wire       LClk_Tm    ;
	reg        dontStop   ;
	assign u_root = In_root_Clk;
	assign root_Clk = u_root;
	assign LClk = In_Clk;
	assign IntRstN = In_RstN;
	assign LClk_RstN = IntRstN;
	assign uEn_root = uCnt_root == 3'b0;
	assign root_En = uEn_root;
	always @( posedge LClk or negedge LClk_RstN )
		if ( ! LClk_RstN )
			uCnt_root <= #1.0 ( 3'b011 );
		else	uCnt_root <= #1.0 ( ( uEn_root ? 3'b100 : uCnt_root ) - 3'b001 );
	assign root_RstN = IntRstN;
	assign LClk_Tm = In_Tm;
	assign root_Tm = LClk_Tm;
	assign u_17 = u_root;
	assign u_17_RstN = IntRstN;
		always @( posedge LClk or negedge LClk_RstN )
			if ( ! LClk_RstN )
				uTog0_root <= #1.0 ( 1'b0 );
			else if ( uEn_root )
				uTog0_root <= #1.0 ( ~ uTog0_root );
		always @( posedge u_17 or negedge u_17_RstN )
			if ( ! u_17_RstN )
				uTog1_root <= #1.0 ( 1'b0 );
			else	uTog1_root <= #1.0 ( ~ uTog1_root );
	// synopsys translate_off
	// synthesis translate_off
	always @( posedge u_17 )
		if ( u_17 == 1'b1 )
			if ( ~ ( ~ u_17_RstN ) & 1'b1 & ( ( uTog0_root ^ uTog1_root ) ) !== 1'b0 ) begin
				dontStop = 0;
				if ($value$plusargs("dontStopOnSimulError=%0b",dontStop)) ;
				if (!dontStop) begin
					$display("On instance %m :");
					$display( "SimulError: at %0t : %s" , $realtime , "The input divided clock In_root_Clk does not have a 4 ratio with the In_Clk, or the In_RstN is not synchronous with the In_root_Clk." );
					$stop;
				end
			end
	// synthesis translate_on
	// synopsys translate_on
	// synopsys translate_off
	// synthesis translate_off
	always @( posedge LClk )
		if ( LClk == 1'b1 )
			if ( ~ ( ~ LClk_RstN ) & 1'b1 & ( ( uTog0_root ^ uTog1_root ) ) !== 1'b0 ) begin
				dontStop = 0;
				if ($value$plusargs("dontStopOnSimulError=%0b",dontStop)) ;
				if (!dontStop) begin
					$display("On instance %m :");
					$display( "SimulError: at %0t : %s" , $realtime , "The input divided clock In_root_Clk does not have a 4 ratio with the In_Clk, or the In_RstN is not synchronous with the In_root_Clk." );
					$stop;
				end
			end
	// synthesis translate_on
	// synopsys translate_on
	endmodule



// FlexNoC version    : 4.7.0
// PDD File           : /home/aptashko/GEMINI/design/ip/FlexNoC/rsnoc_arch_edit.pdd
// Exported Structure : /Specification.Architecture.Structure
// ExportOption       : /verilog

`timescale 1ps/1ps
module ClockManager_interconnect_synch_regime_Cm266 ( In_Clk , In_RstN , In_Tm , In_root_Clk , root_Clk , root_En , root_RstN , root_Tm );
	input   In_Clk      ;
	input   In_RstN     ;
	input   In_Tm       ;
	input   In_root_Clk ;
	output  root_Clk    ;
	output  root_En     ;
	output  root_RstN   ;
	output  root_Tm     ;
	wire       u_root     ;
	reg  [1:0] uCnt_root  ;
	wire       uEn_root   ;
	reg        uTog0_root ;
	reg        uTog1_root ;
	wire       u_17       ;
	wire       u_17_RstN  ;
	wire       IntRstN    ;
	wire       LClk       ;
	wire       LClk_RstN  ;
	wire       LClk_Tm    ;
	reg        dontStop   ;
	assign u_root = In_root_Clk;
	assign root_Clk = u_root;
	assign LClk = In_Clk;
	assign IntRstN = In_RstN;
	assign LClk_RstN = IntRstN;
	assign uEn_root = uCnt_root == 2'b0;
	assign root_En = uEn_root;
	always @( posedge LClk or negedge LClk_RstN )
		if ( ! LClk_RstN )
			uCnt_root <= #1.0 ( 2'b01 );
		else	uCnt_root <= #1.0 ( ( uEn_root ? 2'b10 : uCnt_root ) - 2'b01 );
	assign root_RstN = IntRstN;
	assign LClk_Tm = In_Tm;
	assign root_Tm = LClk_Tm;
	assign u_17 = u_root;
	assign u_17_RstN = IntRstN;
		always @( posedge LClk or negedge LClk_RstN )
			if ( ! LClk_RstN )
				uTog0_root <= #1.0 ( 1'b0 );
			else if ( uEn_root )
				uTog0_root <= #1.0 ( ~ uTog0_root );
		always @( posedge u_17 or negedge u_17_RstN )
			if ( ! u_17_RstN )
				uTog1_root <= #1.0 ( 1'b0 );
			else	uTog1_root <= #1.0 ( ~ uTog1_root );
	// synopsys translate_off
	// synthesis translate_off
	always @( posedge u_17 )
		if ( u_17 == 1'b1 )
			if ( ~ ( ~ u_17_RstN ) & 1'b1 & ( ( uTog0_root ^ uTog1_root ) ) !== 1'b0 ) begin
				dontStop = 0;
				if ($value$plusargs("dontStopOnSimulError=%0b",dontStop)) ;
				if (!dontStop) begin
					$display("On instance %m :");
					$display( "SimulError: at %0t : %s" , $realtime , "The input divided clock In_root_Clk does not have a 2 ratio with the In_Clk, or the In_RstN is not synchronous with the In_root_Clk." );
					$stop;
				end
			end
	// synthesis translate_on
	// synopsys translate_on
	// synopsys translate_off
	// synthesis translate_off
	always @( posedge LClk )
		if ( LClk == 1'b1 )
			if ( ~ ( ~ LClk_RstN ) & 1'b1 & ( ( uTog0_root ^ uTog1_root ) ) !== 1'b0 ) begin
				dontStop = 0;
				if ($value$plusargs("dontStopOnSimulError=%0b",dontStop)) ;
				if (!dontStop) begin
					$display("On instance %m :");
					$display( "SimulError: at %0t : %s" , $realtime , "The input divided clock In_root_Clk does not have a 2 ratio with the In_Clk, or the In_RstN is not synchronous with the In_root_Clk." );
					$stop;
				end
			end
	// synthesis translate_on
	// synopsys translate_on
	endmodule



// FlexNoC version    : 4.7.0
// PDD File           : /home/aptashko/GEMINI/design/ip/FlexNoC/rsnoc_arch_edit.pdd
// Exported Structure : /Specification.Architecture.Structure
// ExportOption       : /verilog

`timescale 1ps/1ps
module ClockManager_interconnect_synch_regime_Cm533 ( In_Clk , In_RstN , In_Tm , root_Clk , root_En , root_RstN , root_Tm );
	input   In_Clk    ;
	input   In_RstN   ;
	input   In_Tm     ;
	output  root_Clk  ;
	output  root_En   ;
	output  root_RstN ;
	output  root_Tm   ;
	wire  u_root  ;
	wire  IntRstN ;
	wire  LClk_Tm ;
	assign u_root = In_Clk;
	assign root_Clk = u_root;
	assign root_En = 1'b1;
	assign IntRstN = In_RstN;
	assign root_RstN = IntRstN;
	assign LClk_Tm = In_Tm;
	assign root_Tm = LClk_Tm;
endmodule


