
proc gck_autogen {{filename "gck_autogen.v"}} {
	set lib_gck_list [filter -regexp clock_gating_integrated_cell {posedge_precontrol} [find / -libcell *]]

	if {[llength $lib_gck_list] == 0} {
		set lib_gck_list [filter -regexp clock_gating_integrated_cell {posedge} [find / -libcell *]]
	}

	# Find a gck cell with minimal leakage power
	set min_lp 999999

	foreach lg $lib_gck_list {
    		set current_lp [get_attribute cell_leakage_power $lg]
		if {$current_lp < $min_lp} {
			set min_lp $current_lp
			set lib_gck $lg
		}
	}

	if {[info exists lib_gck]} {
		set lib_gck_pin_list [find $lib_gck -libpin *]
	} else {
		#puts "gck_autogen failed because no gck cell can be found"
		return 0
	}

	foreach lgp $lib_gck_pin_list {
		if {[get_attribute clock_gate_clock_pin $lgp] == true} {
			regexp {.*\/(\S+)$} $lgp match clock_pin
		} elseif {[get_attribute clock_gate_enable_pin $lgp] == true} {
			regexp {.*\/(\S+)$} $lgp match enable_pin
		} elseif {[get_attribute clock_gate_out_pin $lgp] == true} {
			regexp {.*\/(\S+)$} $lgp match out_pin
		} elseif {[get_attribute clock_gate_test_pin $lgp] == true} {
			regexp {.*\/(\S+)$} $lgp match test_pin
		}
	}

	if {![info exists clock_pin]} {
		#puts "gck_autogen failed because of no clock input pin"
		return 0
	}

	if {![info exists enable_pin]} {
		#puts "gck_autogen failed because of no clock enable pin"
		return 0
	}

	if {![info exists out_pin]} {
		#puts "gck_autogen failed because of no clock output pin"
		return 0
	}

	if {![regexp {.*\/(\S+)$} $lib_gck match lib_gck_name]} {
		#puts "gck_autogen failed because of no library gck name"
		return 0
	}

	set_attribute avoid false $lib_gck 

	file delete -force "$filename"

	set outfile [open "$filename" w]

	puts $outfile "//This file is generated by synthesis script automatically"
	puts $outfile "module gck (clk_out, clk_en, clk_in, test_en);\n"
	puts $outfile "output clk_out;      // clock output\n"
	puts $outfile "input clk_en;        // clock enable"
	puts $outfile "input clk_in;        // clock input"
	puts $outfile "input test_en;       // test_enable"

	if {[info exists test_pin]} {
		puts $outfile "$lib_gck_name gck (.$out_pin\(clk_out), .$enable_pin\(clk_en), .$test_pin\(test_en), .$clock_pin\(clk_in));"
	} else {
		puts $outfile "wire clk_en_new = clk_en | test_en;"
		puts $outfile "$lib_gck_name gck (.$out_pin\(clk_out), .$enable_pin\(clk_en_new), .$clock_pin\(clk_in));"
	}

	puts $outfile "\nendmodule"
	close $outfile
	
	return 1
}

