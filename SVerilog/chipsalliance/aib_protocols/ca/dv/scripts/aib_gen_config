#!/bin/csh -f
set config_dir = .
set sailrock_file = sailrock_cfg.txt
set mode_idx_file = ${config_dir}/config_default.txt
set config_reg_file = config_aib.dat
set config_hex_file = config_aib.hex
#set delay_file = aib_channel_delay.txt

set top_item = (master slave)
##    ./aib_gen_parser.py -f $sailrock_file
    set mode_idx_file = aib_config.txt

## if($#argv < 1) then
##
##    echo " Start setting config of AIB."
##    echo " Use deault config.txt in this directory (y/n) ?"
##    set default_file = $<
##        if ( $default_file != "y") then
##	  echo " Please input the config file :: "
##	  set mode_idx_file = $<
##	endif
##
##  else
##  	### read from file start here
##  	set mode_idx_file = $argv[1]
##  endif

  if ( -f $mode_idx_file) then
    	echo " Working on AIB parser file $mode_idx_file"
  else
	echo " File $mode_idx_file not exit "
	exit
  endif

  ##echo "interface_num channel_num  TX     RX " > $delay_file
  set mode_idx = `cat $mode_idx_file`
  @ idx = 1
  @ total_int = 0
  set config_hex_head = $config_hex_file:r
  set config_hex_tail = $config_hex_file:e
  set new_top_item = ( )

  while ( $idx < $#mode_idx )
	set check_int = `echo $mode_idx[$idx] | cut -d "_" -f1`
        @ idx_1 = $idx + 1
        @ idx_2 = $idx + 2
    if ( $mode_idx[$idx] == "//") then
        @ idx = $idx + 1
    else
      if( $check_int == "interface") then
	@ total_int = $total_int + 1
	set int_num = `echo $mode_idx[$idx] | cut -d "_" -f2`
	set config_hex_file = ${config_hex_head}_${int_num}.${config_hex_tail}
	printf " Work on $mode_idx[$idx] filename = $config_hex_file\n"
 	rm -rf $config_hex_file
 	touch $config_hex_file

      else

        foreach top_b ($top_item)
	  set top = ${top_b}_${int_num}
	  eval 'set nmode_idx = "'${top}'_'$mode_idx[$idx]'"'
	  if ($top_b == "master") then
	  	set $nmode_idx = $mode_idx[$idx_1]
	  	set n_mode_idx = $mode_idx[$idx_1]
	  else
	  	set $nmode_idx = $mode_idx[$idx_2]
	  	set n_mode_idx = $mode_idx[$idx_2]
	  endif
	   ## echo "$nmode_idx"
	  if ( $nmode_idx == "${top}_aib_tx_mode" || $nmode_idx == "${top}_aib_rx_mode" ) then
	        switch ($n_mode_idx)
	          case reg:
	                @ mode = 0
	          breaksw
	          case fifo_4x:
	                @ mode = 4
	          breaksw
	          case fifo_2x:
	                @ mode = 2
	          breaksw
	          case fifo_1x:
	                @ mode = 1
	          breaksw
	          default :
	                echo " No Such mode $mode_idx[idx_1]"
	                exit
	          breaksw
	        endsw
		printf "%x\n" $mode >> $config_hex_file
	  else
		printf "%x\n" $n_mode_idx >> $config_hex_file
	  endif
        end ## end for loop`
       endif ##endif interface
        	@ idx = $idx + 3
    endif ## end if //
  end ## end while
  endif

  @ int = 0
  while ( $int < $total_int )
    foreach top ($top_item)
	  set new_top_item = ( $new_top_item ${top}_$int )
    end
    @ int = $int + 1
  end

###  Rule check
  @ master_n = 0
  @ chan_count = 0
  foreach top ($new_top_item)
    @ start_addr = 520
    @ count = 0
    @ ${top}_ch = 0
    while ( `eval 'echo $'${top}_ch` < `eval 'echo $'${top}_aib_num_of_channel` )

                ## ## 0-256 -c9-
		## ## 0-9   -c11-
		## ## delay is phy clock delay after receiving data
                ## set random_num = `head -c 1 /dev/urandom | od -t u1 | cut -c11-`
                ## @ random_tx_delay = $random_num % 6
		##  if($random_tx_delay < 4) then
		##	@ random_tx_delay = 6
		##   endif
		## endif
                ##set random_num = `head -c 1 /dev/urandom | od -t u1 | cut -c9-`
                ## @ random_rx_delay = $random_num % 7
                ## if ( `eval 'echo $'${top}_aib_rx_mode` == "fifo_4x") then      ## fifo_4x can not less than 4
                ##   if($random_rx_delay < 4) then
                ##        @ random_rx_delay = 7
                ##   endif
                ## endif

                ## printf "%s        %d           %d      %d\n" $top `eval 'echo $'${top}_ch` $random_tx_delay $random_rx_delay >> $delay_file


## echo  CHECK Point 1 $top === `eval 'echo $'${top}_aib_rx_mode`

	set x = ${top}_aib_rx_walign_en
	set xv = `eval 'echo $'$x`
        if ( $xv == 0)  then
          if ( `eval 'echo $'${top}_aib_rx_mode` == "fifo_2x" | `eval 'echo $'${top}_aib_rx_mode` == "fifo_4x") then
                echo " Warning, Work alignment must enable in FIFO2X or FIFO4X mode "
##                exit
          endif
        else
          if ( `eval 'echo $'${top}_aib_rx_mode` == "reg" | `eval 'echo $'${top}_aib_rx_mode` == "fifo_1x") then
                echo " Warning, Work alignment can not enable in FIFO1X or REG mode "
##                exit
          endif
        endif


	@ ${top}_reg_208 = 0
	@ ${top}_reg_210 = 0
	@ ${top}_reg_218 = 0
	@ ${top}_reg_21c = 0

##        switch (`eval 'echo $'${top}_aib_rx_rd_delay`)
## aib_rx_rd_delay up to 7
##	switch (${random_rx_delay})
        switch (`eval 'echo $'${top}_aib_rx_rd_delay`)
          case 2:
                @ ${top}_aib_rx_rd_delay = ((1<<1) | 0 )
          breaksw
          case 3:
                @ ${top}_aib_rx_rd_delay = ((1<<1) | 1 )
          breaksw
          case 4:
                @ ${top}_aib_rx_rd_delay = ((1<<2) | 0 )
          breaksw
          case 5:
                @ ${top}_aib_rx_rd_delay = ((1<<2) | 1 )
          breaksw
          case 6 :
                @ ${top}_aib_rx_rd_delay = ((1<<2) | (1<<1) )
          breaksw
          default :
                @ ${top}_aib_rx_rd_delay = ((1<<2) | (1<<1) | 1 )
          breaksw
        endsw
	if ( `eval 'echo $'${top}_aib_ver` == 1 ) then
	  if ( `eval 'echo $'${top}_aib_rx_marker_loc` == 39 ) then
		echo " Correct :: Version 1 need to set marker bit to 39 "
	  else
		echo " Wrong :: Version 1 need to set marker bit to 39 "
		exit
	  endif
	endif

	switch (`eval 'echo $'${top}_aib_rx_marker_loc`)
	  case 39:
		@ ${top}_reg_210 = (1<<3)
	  breaksw
	  case 76:
                @ ${top}_reg_210 = (1<<4)
          breaksw
          case 77:
                @ ${top}_reg_210 = (1<<5)
          breaksw
          case 78:
                @ ${top}_reg_210 = (1<<6)
          breaksw
          case 79:
                @ ${top}_reg_210 = (1<<7)
	  breaksw
	  default :
                @ ${top}_reg_210 = 0
	  breaksw
	endsw

## echo  CHECK Point $top === `eval 'echo $'${top}_aib_rx_mode`
        switch (`eval 'echo $'${top}_aib_rx_mode`)
          case reg:
                @ ${top}_v_aib_rx_mode = ((1<<1) | 1 )
		@ ${top}_ver1_rx_double_read = 0
          breaksw
          case fifo_4x:
                @ ${top}_v_aib_rx_mode = ((1<<1) | 0 )
          breaksw
          case fifo_2x:
                @ ${top}_v_aib_rx_mode = 1
		@ ${top}_ver1_rx_double_read = 1
          breaksw
          case fifo_1x:
                @ ${top}_v_aib_rx_mode = 0
		@ ${top}_ver1_rx_double_read = 0
          breaksw
          default :
		echo " No Such mode ${top}_aib_rx_mode "
		exit
          breaksw
        endsw

## echo  CHECK Point $top === `eval 'echo $'${top}_aib_tx_mode`
        switch (`eval 'echo $'${top}_aib_tx_mode`)
          case reg:
                @ ${top}_v_aib_tx_mode = ((1<<1) | 1 )
		@ ${top}_ver1_tx_double_write = 0
          breaksw
          case fifo_4x:
                @ ${top}_v_aib_tx_mode = ((1<<1) | 0 )
          breaksw
          case fifo_2x:
                @ ${top}_v_aib_tx_mode = 1
		@ ${top}_ver1_tx_double_write = 1
          breaksw
          case fifo_1x:
                @ ${top}_v_aib_tx_mode = 0
		@ ${top}_ver1_tx_double_write = 0
          breaksw
          default :
                echo " No Such mode ${top}_aib_rx_mode "
                exit
          breaksw
        endsw

	##switch (${random_tx_delay})
        switch (`eval 'echo $'${top}_aib_tx_rd_delay`)
          case 2:
                @ ${top}_aib_tx_rd_delay = ((1<<1) | 0 )
          breaksw
          case 3:
                @ ${top}_aib_tx_rd_delay = ((1<<1) | 1 )
          breaksw
          case 4:
                @ ${top}_aib_tx_rd_delay = ((1<<2) | 0 )
          breaksw
          case 5:
                @ ${top}_aib_tx_rd_delay = ((1<<2) | 1 )
          breaksw
          default :
                @ ${top}_aib_tx_rd_delay = ((1<<2) | (1<<1) | 0)
          breaksw
        endsw

        if (`eval 'echo $'${top}_aib_ver` == 1 ) then
                @ ${top}_reg_208 = ((`eval 'echo $'${top}_ver1_rx_double_read` << 27) | (`eval 'echo $'${top}_aib_rx_swap_en`))
        else
                @ ${top}_reg_208 = ((`eval 'echo $'${top}_aib_rx_rd_delay` << 24) | (`eval 'echo $'${top}_aib_rx_dbi_en` << 1) | (`eval 'echo $'${top}_aib_rx_swap_en`))
        endif

        @ ${top}_reg_20c = (`eval 'echo $'${top}_aib_loop_back_mode` << 6)

	if (`eval 'echo $'${top}_aib_ver` == 1 ) then
		@ ${top}_reg_210 = ((`eval 'echo $'${top}_v_aib_rx_mode` << 1) | (`eval 'echo $'${top}_aib_rx_walign_en`))
	else
		@ ${top}_reg_210 = ((`eval 'echo $'${top}_reg_210`) | (`eval 'echo $'${top}_v_aib_rx_mode` << 1) | (`eval 'echo $'${top}_aib_rx_walign_en`))
	endif

        switch (`eval 'echo $'${top}_aib_tx_marker_loc`)
          case 39:
                @ ${top}_reg_218 = (1<<16)
          breaksw
          case 76:
                @ ${top}_reg_218 = (1<<17)
          breaksw
          case 77:
                @ ${top}_reg_218 = (1<<18)
          breaksw
          case 78:
                @ ${top}_reg_218 = (1<<19)
          breaksw
          case 79:
                @ ${top}_reg_218 = (1<<20)
          breaksw
          default :
                @ ${top}_reg_218 = 0
          breaksw
        endsw

	if ( (`eval 'echo $'${top}_aib_tx_swap_en` == 1 || `eval 'echo $'${top}_aib_rx_swap_en` == 1 )&& `eval 'echo $'${top}_aib_ver` == 2 ) then
		echo " Warning swap_en only work on version 1 "
		exit
	endif

        if ( `eval 'echo $'${top}_aib_ver` == 1 ) then
		@ ${top}_reg_218 = ((`eval 'echo $'${top}_aib_tx_rd_delay` << 29 ) | (`eval 'echo $'${top}_aib_tx_wmarker_en` << 23) | (`eval 'echo $'${top}_v_aib_tx_mode` << 21) | (`eval 'echo $'${top}_aib_tx_swap_en`))

	else
		@ ${top}_reg_218 = ((`eval 'echo $'${top}_reg_218`) | (`eval 'echo $'${top}_aib_tx_rd_delay` << 28) |  (`eval 'echo $'${top}_aib_tx_wmarker_en` << 23) | (`eval 'echo $'${top}_v_aib_tx_mode` << 21))
		@ ${top}_reg_218 = ((`eval 'echo $'${top}_reg_218`) | (`eval 'echo $'${top}_aib_tx_dbi_en` << 1) | (`eval 'echo $'${top}_aib_tx_swap_en`))
	endif

	if (`eval 'echo $'${top}_aib_ver` == 1 ) then
		@ ${top}_reg_21c = ((`eval 'echo $'${top}_aib_loop_back_mode` << 14) | (`eval 'echo $'${top}_ver1_tx_double_write`))
	else
		@ ${top}_reg_21c = (`eval 'echo $'${top}_aib_loop_back_mode` << 14)
	endif

###  @ count = 0
###  @ ${top}_ch = 0
###  @ start_addr = 520
###  while ( `eval 'echo $'${top}_ch` < `eval 'echo $'${top}_aib_num_of_channel` )
    echo  == Work on $top channel `eval 'echo $'${top}_ch`
    set ch_en = `eval 'echo $'${top}_aib_channel_enable`
    ## set ch_en_v = `python -c "print int('$ch_en',16)"`
    set ch_en_v = `python -c "print(int('$ch_en',16))"`

    @ shift_en = (($ch_en_v >> `eval 'echo $'${top}_ch`) & 1 )
    if ( $shift_en  == 1) then
	if ( `eval 'echo $'${top}_ch` == 0 ) then
		printf "%04d %04x %08x\n" $count $start_addr  `eval 'echo $'${top}_reg_208` >  ${top}_$config_reg_file
	else
                printf "%04d %04x %08x\n" $count $start_addr  `eval 'echo $'${top}_reg_208` >>  ${top}_$config_reg_file
	endif

	@ count = $count + 1
	@ next_addr = $start_addr + 4
        if (`eval 'echo $'${top}_aib_ver` == 1 ) then
		printf "%04d %04x %08x\n" $count $next_addr `eval 'echo $'${top}_reg_20c` >> ${top}_$config_reg_file
	endif

	@ count = $count + 1
	@ next_addr = $next_addr + 4
	printf "%04d %04x %08x\n" $count $next_addr `eval 'echo $'${top}_reg_210` >> ${top}_$config_reg_file
	@ count = $count + 1
	@ next_addr = $next_addr + 8
	printf "%04d %04x %08x\n" $count $next_addr `eval 'echo $'${top}_reg_218` >> ${top}_$config_reg_file
	@ count = $count + 1
	@ next_addr = $next_addr + 4
## should be 220
	printf "%04d %04x %08x\n" $count $next_addr `eval 'echo $'${top}_reg_21c` >> ${top}_$config_reg_file
	@ count = $count + 1
	@ start_addr = $start_addr + 2048
    else
	@ count = $count + 1
	@ start_addr = $start_addr + 2048   ## 0x800
	echo " disable "
    endif

  	@ ${top}_ch = `eval 'echo $'${top}_ch` + 1
  end
  end
