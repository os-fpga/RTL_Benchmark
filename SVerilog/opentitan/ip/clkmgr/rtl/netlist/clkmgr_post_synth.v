/* Generated by Yosys 0.16+65 (git sha1 051517d61, gcc 9.1.0 -fPIC -Os) */

module clkmgr(clk_i, rst_ni, clk_main_i, rst_main_ni, clk_fixed_i, rst_fixed_ni, clk_usb_48mhz_i, rst_usb_48mhz_ni, \tl_i.a_valid , \tl_i.d_ready , \tl_o.d_valid , \tl_o.d_error , \tl_o.a_ready , \pwr_i.main_ip_clk_en , \pwr_i.io_ip_clk_en , \pwr_i.usb_ip_clk_en , \pwr_o.main_status , \pwr_o.io_status , \pwr_o.usb_status , \dft_i.test_en , \clocks_o.clk_fixed_powerup 
, \clocks_o.clk_main_powerup , \clocks_o.clk_usb_48mhz_powerup , \clocks_o.clk_main_aes , \clocks_o.clk_main_hmac , \clocks_o.clk_main_infra , \clocks_o.clk_fixed_infra , \clocks_o.clk_fixed_secure , \clocks_o.clk_main_secure , \clocks_o.clk_fixed_timers , \clocks_o.clk_proc_main , \clocks_o.clk_fixed_peri , \clocks_o.clk_usb_48mhz_peri , \tl_o.d_opcode , \status_i.idle , \tl_i.a_opcode , \tl_i.a_param , \tl_i.a_size , \tl_i.a_source , \tl_i.a_address , \tl_i.a_mask , \tl_i.a_data 
, \tl_i.a_user.rsvd , \tl_i.a_user.instr_type , \tl_i.a_user.cmd_intg , \tl_i.a_user.data_intg , \tl_o.d_param , \tl_o.d_size , \tl_o.d_source , \tl_o.d_sink , \tl_o.d_data , \tl_o.d_user.rsp_intg , \tl_o.d_user.data_intg );
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  input clk_fixed_i;
  wire clk_fixed_i;
  input clk_i;
  wire clk_i;
  input clk_main_i;
  wire clk_main_i;
  input clk_usb_48mhz_i;
  wire clk_usb_48mhz_i;
  output \clocks_o.clk_fixed_infra ;
  wire \clocks_o.clk_fixed_infra ;
  output \clocks_o.clk_fixed_peri ;
  wire \clocks_o.clk_fixed_peri ;
  output \clocks_o.clk_fixed_powerup ;
  wire \clocks_o.clk_fixed_powerup ;
  output \clocks_o.clk_fixed_secure ;
  wire \clocks_o.clk_fixed_secure ;
  output \clocks_o.clk_fixed_timers ;
  wire \clocks_o.clk_fixed_timers ;
  output \clocks_o.clk_main_aes ;
  wire \clocks_o.clk_main_aes ;
  output \clocks_o.clk_main_hmac ;
  wire \clocks_o.clk_main_hmac ;
  output \clocks_o.clk_main_infra ;
  wire \clocks_o.clk_main_infra ;
  output \clocks_o.clk_main_powerup ;
  wire \clocks_o.clk_main_powerup ;
  output \clocks_o.clk_main_secure ;
  wire \clocks_o.clk_main_secure ;
  output \clocks_o.clk_proc_main ;
  wire \clocks_o.clk_proc_main ;
  output \clocks_o.clk_usb_48mhz_peri ;
  wire \clocks_o.clk_usb_48mhz_peri ;
  output \clocks_o.clk_usb_48mhz_powerup ;
  wire \clocks_o.clk_usb_48mhz_powerup ;
  input \dft_i.test_en ;
  wire \dft_i.test_en ;
  wire \i_clk_fixed_peri_cg.gen_generic.u_impl_generic.en_latch ;
  wire \i_clk_main_aes_cg.gen_generic.u_impl_generic.en_latch ;
  wire \i_clk_main_hmac_cg.gen_generic.u_impl_generic.en_latch ;
  wire \i_clk_usb_48mhz_peri_cg.gen_generic.u_impl_generic.en_latch ;
  wire \i_fixed_cg.i_cg.gen_generic.u_impl_generic.en_latch ;
  wire \i_main_cg.en_o ;
  wire \i_main_cg.i_cg.gen_generic.u_impl_generic.en_latch ;
  wire \i_roots_en_sync.gen_generic.u_impl_generic.q_o ;
  wire \i_usb_48mhz_cg.en_o ;
  input \pwr_i.io_ip_clk_en ;
  wire \pwr_i.io_ip_clk_en ;
  input \pwr_i.main_ip_clk_en ;
  wire \pwr_i.main_ip_clk_en ;
  input \pwr_i.usb_ip_clk_en ;
  wire \pwr_i.usb_ip_clk_en ;
  output \pwr_o.io_status ;
  wire \pwr_o.io_status ;
  output \pwr_o.main_status ;
  wire \pwr_o.main_status ;
  output \pwr_o.usb_status ;
  wire \pwr_o.usb_status ;
  wire roots_en_q1;
  input rst_fixed_ni;
  wire rst_fixed_ni;
  input rst_main_ni;
  wire rst_main_ni;
  input rst_ni;
  wire rst_ni;
  input rst_usb_48mhz_ni;
  wire rst_usb_48mhz_ni;
  input [1:0] \status_i.idle ;
  wire [1:0] \status_i.idle ;
  input [31:0] \tl_i.a_address ;
  wire [31:0] \tl_i.a_address ;
  input [31:0] \tl_i.a_data ;
  wire [31:0] \tl_i.a_data ;
  input [3:0] \tl_i.a_mask ;
  wire [3:0] \tl_i.a_mask ;
  input [2:0] \tl_i.a_opcode ;
  wire [2:0] \tl_i.a_opcode ;
  input [2:0] \tl_i.a_param ;
  wire [2:0] \tl_i.a_param ;
  input [1:0] \tl_i.a_size ;
  wire [1:0] \tl_i.a_size ;
  input [7:0] \tl_i.a_source ;
  wire [7:0] \tl_i.a_source ;
  input [6:0] \tl_i.a_user.cmd_intg ;
  wire [6:0] \tl_i.a_user.cmd_intg ;
  input [6:0] \tl_i.a_user.data_intg ;
  wire [6:0] \tl_i.a_user.data_intg ;
  input [3:0] \tl_i.a_user.instr_type ;
  wire [3:0] \tl_i.a_user.instr_type ;
  input [4:0] \tl_i.a_user.rsvd ;
  wire [4:0] \tl_i.a_user.rsvd ;
  input \tl_i.a_valid ;
  wire \tl_i.a_valid ;
  input \tl_i.d_ready ;
  wire \tl_i.d_ready ;
  output \tl_o.a_ready ;
  wire \tl_o.a_ready ;
  output [31:0] \tl_o.d_data ;
  wire [31:0] \tl_o.d_data ;
  output \tl_o.d_error ;
  wire \tl_o.d_error ;
  output [2:0] \tl_o.d_opcode ;
  wire [2:0] \tl_o.d_opcode ;
  output [2:0] \tl_o.d_param ;
  wire [2:0] \tl_o.d_param ;
  output \tl_o.d_sink ;
  wire \tl_o.d_sink ;
  output [1:0] \tl_o.d_size ;
  wire [1:0] \tl_o.d_size ;
  output [7:0] \tl_o.d_source ;
  wire [7:0] \tl_o.d_source ;
  output [6:0] \tl_o.d_user.data_intg ;
  wire [6:0] \tl_o.d_user.data_intg ;
  output [6:0] \tl_o.d_user.rsp_intg ;
  wire [6:0] \tl_o.d_user.rsp_intg ;
  output \tl_o.d_valid ;
  wire \tl_o.d_valid ;
  wire \u_reg.u_reg_if.a_ack ;
  dffsre _084_ (
    .C(clk_i),
    .D(roots_en_q1),
    .E(_083_),
    .Q(\pwr_o.usb_status ),
    .R(rst_ni),
    .S(1'b1)
  );
  dffsre _085_ (
    .C(clk_usb_48mhz_i),
    .D(\pwr_i.usb_ip_clk_en ),
    .E(1'b1),
    .Q(_000_),
    .R(rst_usb_48mhz_ni),
    .S(1'b1)
  );
  dffsre _086_ (
    .C(clk_usb_48mhz_i),
    .D(_000_),
    .E(1'b1),
    .Q(\i_usb_48mhz_cg.en_o ),
    .R(rst_usb_48mhz_ni),
    .S(1'b1)
  );
  dffsre _087_ (
    .C(clk_usb_48mhz_i),
    .D(1'b1),
    .E(1'b1),
    .Q(_001_),
    .R(rst_usb_48mhz_ni),
    .S(1'b1)
  );
  dffsre _088_ (
    .C(clk_usb_48mhz_i),
    .D(_001_),
    .E(1'b1),
    .Q(_002_),
    .R(rst_usb_48mhz_ni),
    .S(1'b1)
  );
  dffsre _089_ (
    .C(clk_fixed_i),
    .D(\pwr_i.usb_ip_clk_en ),
    .E(1'b1),
    .Q(_004_),
    .R(rst_fixed_ni),
    .S(1'b1)
  );
  dffsre _090_ (
    .C(clk_fixed_i),
    .D(_004_),
    .E(1'b1),
    .Q(_006_),
    .R(rst_fixed_ni),
    .S(1'b1)
  );
  dffsre _091_ (
    .C(clk_fixed_i),
    .D(1'b1),
    .E(1'b1),
    .Q(_005_),
    .R(rst_fixed_ni),
    .S(1'b1)
  );
  dffsre _092_ (
    .C(clk_fixed_i),
    .D(_005_),
    .E(1'b1),
    .Q(_007_),
    .R(rst_fixed_ni),
    .S(1'b1)
  );
  dffsre _093_ (
    .C(clk_main_i),
    .D(\pwr_i.usb_ip_clk_en ),
    .E(1'b1),
    .Q(_013_),
    .R(rst_main_ni),
    .S(1'b1)
  );
  dffsre _094_ (
    .C(clk_main_i),
    .D(_013_),
    .E(1'b1),
    .Q(\i_main_cg.en_o ),
    .R(rst_main_ni),
    .S(1'b1)
  );
  dffsre _095_ (
    .C(clk_main_i),
    .D(1'b1),
    .E(1'b1),
    .Q(_014_),
    .R(rst_main_ni),
    .S(1'b1)
  );
  dffsre _096_ (
    .C(clk_main_i),
    .D(_014_),
    .E(1'b1),
    .Q(_015_),
    .R(rst_main_ni),
    .S(1'b1)
  );
  dffsre _097_ (
    .C(clk_i),
    .D(\u_reg.u_reg_if.a_ack ),
    .E(_016_),
    .Q(\tl_o.d_valid ),
    .R(rst_ni),
    .S(1'b1)
  );
  dffsre _098_ (
    .C(clk_i),
    .D(_017_),
    .E(\u_reg.u_reg_if.a_ack ),
    .Q(\tl_o.d_error ),
    .R(rst_ni),
    .S(1'b1)
  );
  dffsre _099_ (
    .C(clk_i),
    .D(_018_),
    .E(\u_reg.u_reg_if.a_ack ),
    .Q(\tl_o.d_data [0]),
    .R(rst_ni),
    .S(1'b1)
  );
  dffsre _100_ (
    .C(clk_i),
    .D(_019_),
    .E(\u_reg.u_reg_if.a_ack ),
    .Q(\tl_o.d_data [1]),
    .R(rst_ni),
    .S(1'b1)
  );
  dffsre _101_ (
    .C(clk_i),
    .D(_020_),
    .E(\u_reg.u_reg_if.a_ack ),
    .Q(\tl_o.d_data [31]),
    .R(rst_ni),
    .S(1'b1)
  );
  dffsre _102_ (
    .C(clk_i),
    .D(\tl_i.a_source [0]),
    .E(\u_reg.u_reg_if.a_ack ),
    .Q(\tl_o.d_source [0]),
    .R(rst_ni),
    .S(1'b1)
  );
  dffsre _103_ (
    .C(clk_i),
    .D(\tl_i.a_source [1]),
    .E(\u_reg.u_reg_if.a_ack ),
    .Q(\tl_o.d_source [1]),
    .R(rst_ni),
    .S(1'b1)
  );
  dffsre _104_ (
    .C(clk_i),
    .D(\tl_i.a_source [2]),
    .E(\u_reg.u_reg_if.a_ack ),
    .Q(\tl_o.d_source [2]),
    .R(rst_ni),
    .S(1'b1)
  );
  dffsre _105_ (
    .C(clk_i),
    .D(\tl_i.a_source [3]),
    .E(\u_reg.u_reg_if.a_ack ),
    .Q(\tl_o.d_source [3]),
    .R(rst_ni),
    .S(1'b1)
  );
  dffsre _106_ (
    .C(clk_i),
    .D(\tl_i.a_source [4]),
    .E(\u_reg.u_reg_if.a_ack ),
    .Q(\tl_o.d_source [4]),
    .R(rst_ni),
    .S(1'b1)
  );
  dffsre _107_ (
    .C(clk_i),
    .D(\tl_i.a_source [5]),
    .E(\u_reg.u_reg_if.a_ack ),
    .Q(\tl_o.d_source [5]),
    .R(rst_ni),
    .S(1'b1)
  );
  dffsre _108_ (
    .C(clk_i),
    .D(\tl_i.a_source [6]),
    .E(\u_reg.u_reg_if.a_ack ),
    .Q(\tl_o.d_source [6]),
    .R(rst_ni),
    .S(1'b1)
  );
  dffsre _109_ (
    .C(clk_i),
    .D(\tl_i.a_source [7]),
    .E(\u_reg.u_reg_if.a_ack ),
    .Q(\tl_o.d_source [7]),
    .R(rst_ni),
    .S(1'b1)
  );
  dffsre _110_ (
    .C(clk_i),
    .D(\tl_i.a_size [0]),
    .E(\u_reg.u_reg_if.a_ack ),
    .Q(\tl_o.d_size [0]),
    .R(rst_ni),
    .S(1'b1)
  );
  dffsre _111_ (
    .C(clk_i),
    .D(\tl_i.a_size [1]),
    .E(\u_reg.u_reg_if.a_ack ),
    .Q(\tl_o.d_size [1]),
    .R(rst_ni),
    .S(1'b1)
  );
  dffsre _112_ (
    .C(clk_i),
    .D(_021_),
    .E(\u_reg.u_reg_if.a_ack ),
    .Q(\tl_o.d_opcode [0]),
    .R(rst_ni),
    .S(1'b1)
  );
  dffsre _113_ (
    .C(clk_i),
    .D(_022_),
    .E(1'b1),
    .Q(\i_roots_en_sync.gen_generic.u_impl_generic.q_o ),
    .R(rst_ni),
    .S(1'b1)
  );
  dffsre _114_ (
    .C(clk_i),
    .D(\i_roots_en_sync.gen_generic.u_impl_generic.q_o ),
    .E(1'b1),
    .Q(roots_en_q1),
    .R(rst_ni),
    .S(1'b1)
  );
  dffsre _115_ (
    .C(clk_i),
    .D(_023_),
    .E(1'b1),
    .Q(_026_),
    .R(rst_ni),
    .S(1'b1)
  );
  dffsre _116_ (
    .C(clk_i),
    .D(_024_),
    .E(1'b1),
    .Q(_027_),
    .R(rst_ni),
    .S(1'b1)
  );
  dffsre _117_ (
    .C(clk_i),
    .D(_025_),
    .E(1'b1),
    .Q(_022_),
    .R(rst_ni),
    .S(1'b1)
  );
  assign _083_ = 4'b1001 >> { \i_roots_en_sync.gen_generic.u_impl_generic.q_o , roots_en_q1 };
  assign \tl_o.d_user.rsp_intg [1] = 16'b1001011001101001 >> { \tl_o.d_size [0], \tl_o.d_error , \tl_o.d_opcode [0], \tl_o.d_size [1] };
  assign _023_ = 4'b0100 >> { \status_i.idle [1], _015_ };
  assign \tl_o.d_user.data_intg [6] = 4'b0110 >> { \tl_o.d_data [31], \tl_o.d_data [1] };
  assign \tl_o.d_user.data_intg [4] = 4'b0110 >> { \tl_o.d_data [0], \tl_o.d_data [1] };
  assign _025_ = 8'b11111110 >> { \i_main_cg.en_o , _006_, \i_usb_48mhz_cg.en_o  };
  assign _024_ = 4'b0100 >> { \status_i.idle [0], _015_ };
  assign \u_reg.u_reg_if.a_ack  = 4'b0100 >> { \tl_i.a_valid , \tl_o.d_valid  };
  assign \tl_o.d_user.data_intg [3] = 4'b1001 >> { \tl_o.d_data [0], \tl_o.d_data [31] };
  assign _003_ = 4'b1110 >> { \dft_i.test_en , _006_ };
  assign _012_ = 4'b1110 >> { \dft_i.test_en , \i_main_cg.en_o  };
  assign _016_ = 8'b11001010 >> { \tl_o.d_valid , \tl_i.d_ready , \tl_i.a_valid  };
  assign \clocks_o.clk_main_aes  = 4'b1000 >> { \i_clk_main_aes_cg.gen_generic.u_impl_generic.en_latch , clk_main_i };
  assign _010_ = 8'b11110100 >> { \dft_i.test_en , \i_main_cg.en_o , _023_ };
  assign _009_ = 8'b11110100 >> { \dft_i.test_en , \i_main_cg.en_o , _024_ };
  assign \clocks_o.clk_main_hmac  = 4'b1000 >> { \i_clk_main_hmac_cg.gen_generic.u_impl_generic.en_latch , clk_main_i };
  assign _031_ = 64'b0011000100010000000001010101000100000101010100010001000100010000 >> { \tl_i.a_mask [2], \tl_i.a_mask [0], \tl_i.a_mask [1], \tl_i.a_mask [3], \tl_i.a_size [0], \tl_i.a_size [1] };
  assign _032_ = 32'd4293979886 >> { \tl_i.a_address [1], \tl_i.a_mask [1:0], \tl_i.a_mask [2], \tl_i.a_mask [3] };
  assign _033_ = 64'b0000000000000000000100010001000111111111111111110000000000001111 >> { \tl_i.a_address [0], \tl_i.a_size [0], \tl_i.a_mask [1], \tl_i.a_mask [3:2], \tl_i.a_mask [0] };
  assign _034_ = 32'd65311 >> { _032_, \tl_i.a_opcode [2], \u_reg.u_reg_if.a_ack , \tl_i.a_address [0], \tl_i.a_address [1] };
  assign _035_ = 64'b1111111011111110111111101111111000000000111111111111111111111111 >> { \tl_i.a_size [1], _034_, _033_, \tl_i.a_size [0], \tl_i.a_address [0], \tl_i.a_address [1] };
  assign _036_ = 64'b0000000000000011000000000000111000000000000000000000000000000000 >> { \tl_i.a_valid , \tl_i.a_opcode [0], \tl_i.a_opcode [1], _035_, \tl_i.a_opcode [2], _031_ };
  assign _019_ = 16'b1011111111111111 >> { _026_, \tl_i.a_address [3], _036_, \tl_i.a_address [2] };
  assign _018_ = 16'b1011111111111111 >> { _027_, \tl_i.a_address [3], _036_, \tl_i.a_address [2] };
  assign \clocks_o.clk_main_infra  = 4'b1000 >> { \i_main_cg.i_cg.gen_generic.u_impl_generic.en_latch , clk_main_i };
  assign _020_ = 8'b10001111 >> { _036_, \tl_i.a_address [2], \tl_i.a_address [3] };
  assign _008_ = 8'b11111000 >> { \dft_i.test_en , _007_, _006_ };
  assign _011_ = 8'b11111000 >> { \dft_i.test_en , _002_, \i_usb_48mhz_cg.en_o  };
  assign \clocks_o.clk_fixed_peri  = 4'b1000 >> { \i_clk_fixed_peri_cg.gen_generic.u_impl_generic.en_latch , clk_fixed_i };
  assign _037_ = 16'b1001011001101001 >> { \tl_i.a_address [8], \tl_i.a_address [10], \tl_i.a_address [11], \tl_i.a_address [9] };
  assign _038_ = 32'd1771476585 >> { \tl_i.a_address [23], \tl_i.a_address [19], \tl_i.a_address [29], \tl_i.a_address [0], \tl_i.a_user.instr_type [1] };
  assign _039_ = 32'd1771476585 >> { \tl_i.a_user.instr_type [0], \tl_i.a_opcode [2], \tl_i.a_address [18], \tl_i.a_address [22], \tl_i.a_address [28] };
  assign _040_ = 64'b1001011001101001011010011001011001101001100101101001011001101001 >> { \tl_i.a_mask [0], \tl_i.a_address [31], \tl_i.a_address [21:20], \tl_i.a_address [30], _037_ };
  assign _041_ = 16'b1001011001101001 >> { \tl_i.a_data [9], \tl_i.a_data [14], \tl_i.a_data [29], \tl_i.a_data [24] };
  assign _042_ = 32'd2523490710 >> { \tl_i.a_data [22], \tl_i.a_data [2], \tl_i.a_user.data_intg [5], \tl_i.a_data [6], _041_ };
  assign _043_ = 16'b1001011001101001 >> { \tl_i.a_data [23], \tl_i.a_data [27:26], \tl_i.a_data [19] };
  assign _044_ = 32'd2408054784 >> { \u_reg.u_reg_if.a_ack , \tl_i.a_opcode [0], \tl_i.a_mask [0], \tl_i.a_address [2], \tl_i.a_address [3] };
  assign _045_ = 64'b0100000100010100000101000100000100010100010000010100000100010100 >> { \tl_i.a_data [18], \tl_i.a_data [13], \tl_i.a_data [3], _043_, _042_, _044_ };
  assign _046_ = 64'b0110100110010110100101100110100100000000000000000000000000000000 >> { _045_, \tl_i.a_user.cmd_intg [2], \tl_i.a_address [1], _039_, _038_, _040_ };
  assign _047_ = 16'b1001011001101001 >> { \tl_i.a_user.data_intg [4], \tl_i.a_data [4], \tl_i.a_data [23], \tl_i.a_data [1] };
  assign _048_ = 32'd2523490710 >> { \tl_i.a_data [9], \tl_i.a_data [25], \tl_i.a_data [22], \tl_i.a_data [31], _047_ };
  assign _049_ = 16'b1001011001101001 >> { \tl_i.a_data [30], \tl_i.a_data [16], \tl_i.a_data [3], _048_ };
  assign _050_ = 16'b1001011001101001 >> { \tl_i.a_data [17], \tl_i.a_data [8], \tl_i.a_data [26], \tl_i.a_data [29] };
  assign _051_ = 32'd2523490710 >> { \tl_i.a_user.data_intg [0], \tl_i.a_data [25], \tl_i.a_data [10], \tl_i.a_data [2], _050_ };
  assign _052_ = 16'b1001011001101001 >> { \tl_i.a_data [15], \tl_i.a_data [11], \tl_i.a_data [18], _051_ };
  assign _053_ = 64'b1110011101111110011111101110011101111110111001111110011101111110 >> { \tl_i.a_data [0], \tl_i.a_data [13:12], \tl_i.a_data [5], _052_, _049_ };
  assign _054_ = 32'd1771476585 >> { \tl_i.a_data [4], \tl_i.a_data [28], \tl_i.a_data [17], \tl_i.a_data [6], \tl_i.a_data [21] };
  assign _055_ = 64'b1001011001101001011010011001011001101001100101101001011001101001 >> { \tl_i.a_data [20], \tl_i.a_user.data_intg [1], \tl_i.a_data [15], \tl_i.a_data [30], \tl_i.a_data [31], \tl_i.a_data [25] };
  assign _056_ = 64'b1001011001101001011010011001011001101001100101101001011001101001 >> { \tl_i.a_user.data_intg [3], \tl_i.a_data [7], \tl_i.a_data [0], \tl_i.a_data [11], \tl_i.a_data [16], \tl_i.a_data [10] };
  assign _057_ = 64'b0001000000000001000001000100000000000100010000000001000000000001 >> { _056_, _041_, _055_, _043_, _054_, _053_ };
  assign _058_ = 64'b0110100110010110100101100110100110010110011010010110100110010110 >> { \tl_i.a_address [14], \tl_i.a_address [26], \tl_i.a_address [20], \tl_i.a_address [30], \tl_i.a_user.instr_type [3], \tl_i.a_address [25] };
  assign _059_ = 16'b1001011001101001 >> { \tl_i.a_user.instr_type [2], \tl_i.a_mask [1], \tl_i.a_address [29:28] };
  assign _060_ = 64'b0110100110010110100101100110100110010110011010010110100110010110 >> { \tl_i.a_user.cmd_intg [3], \tl_i.a_address [24], \tl_i.a_address [2], \tl_i.a_address [3], \tl_i.a_address [19:18] };
  assign _061_ = 64'b0110100110010110100101100110100110010110011010010110100110010110 >> { \tl_i.a_address [13:12], \tl_i.a_address [4], \tl_i.a_address [8], _059_, _060_ };
  assign _062_ = 16'b1001011001101001 >> { \tl_i.a_address [7], \tl_i.a_address [4], \tl_i.a_address [6], \tl_i.a_address [1] };
  assign _063_ = 64'b1001011001101001011010011001011001101001100101101001011001101001 >> { \tl_i.a_opcode [0], \tl_i.a_user.instr_type [0], \tl_i.a_user.instr_type [1], \tl_i.a_address [27], \tl_i.a_address [16], \tl_i.a_address [11] };
  assign _064_ = 64'b1001011001101001011010011001011001101001100101101001011001101001 >> { \tl_i.a_user.cmd_intg [6], \tl_i.a_address [17], \tl_i.a_address [23:22], _062_, _063_ };
  assign _065_ = 16'b0001100000000000 >> { _057_, _064_, _061_, _058_ };
  assign _066_ = 64'b1001011001101001011010011001011001101001100101101001011001101001 >> { \tl_i.a_data [22], \tl_i.a_data [31], \tl_i.a_data [10], \tl_i.a_data [2], \tl_i.a_data [12], \tl_i.a_data [14] };
  assign _067_ = 16'b1001011001101001 >> { \tl_i.a_user.data_intg [6], \tl_i.a_data [28:27], _066_ };
  assign _068_ = 64'b1001011001101001011010011001011001101001100101101001011001101001 >> { \tl_i.a_data [30], \tl_i.a_data [16], \tl_i.a_data [3], \tl_i.a_data [15], \tl_i.a_data [11], \tl_i.a_data [18] };
  assign _069_ = 64'b0110100110010110100101100110100110010110011010010110100110010110 >> { \tl_i.a_user.data_intg [2], \tl_i.a_data [21], \tl_i.a_data [19], \tl_i.a_data [24], \tl_i.a_data [5], _068_ };
  assign _070_ = 64'b1011111011101011111010111011111011010111011111010111110111010111 >> { _069_, \tl_i.a_data [20], \tl_i.a_data [7], \tl_i.a_data [8], \tl_i.a_data [1], _067_ };
  assign _071_ = 32'd1771476585 >> { \tl_i.a_address [12], \tl_i.a_address [16], \tl_i.a_address [17], \tl_i.a_address [13], _037_ };
  assign _072_ = 16'b0110100110010110 >> { \tl_i.a_address [15], \tl_i.a_user.cmd_intg [1], \tl_i.a_address [14], _071_ };
  assign _073_ = 64'b0110100110010110100101100110100110010110011010010110100110010110 >> { \tl_i.a_user.instr_type [3], \tl_i.a_mask [2], \tl_i.a_mask [0], \tl_i.a_address [31], \tl_i.a_mask [3], \tl_i.a_address [30] };
  assign _074_ = 32'd2523490710 >> { \tl_i.a_opcode [0], \tl_i.a_user.instr_type [0], \tl_i.a_user.instr_type [1], _059_, _073_ };
  assign _075_ = 64'b1001011001101001011010011001011001101001100101101001011001101001 >> { \tl_i.a_address [5], \tl_i.a_user.cmd_intg [0], \tl_i.a_address [0], \tl_i.a_opcode [2], \tl_i.a_address [2], \tl_i.a_address [3] };
  assign _076_ = 16'b0111111011100111 >> { _075_, _062_, _074_, _072_ };
  assign _077_ = 64'b0110100110010110100101100110100110010110011010010110100110010110 >> { \tl_i.a_address [24], \tl_i.a_address [15], \tl_i.a_address [21], \tl_i.a_address [31], \tl_i.a_user.instr_type [2], \tl_i.a_address [5] };
  assign _078_ = 64'b0110100110010110100101100110100110010110011010010110100110010110 >> { \tl_i.a_user.cmd_intg [5], \tl_i.a_address [7], \tl_i.a_address [17], \tl_i.a_address [13], \tl_i.a_address [3], \tl_i.a_mask [3] };
  assign _079_ = 32'd1771476585 >> { \tl_i.a_address [27:26], \tl_i.a_address [10], _078_, _038_ };
  assign _080_ = 64'b1001011001101001011010011001011001101001100101101001011001101001 >> { \tl_i.a_address [12], \tl_i.a_address [16], \tl_i.a_user.instr_type [3], \tl_i.a_mask [2], \tl_i.a_address [6], \tl_i.a_address [9] };
  assign _081_ = 64'b0110100110010110100101100110100110010110011010010110100110010110 >> { _080_, _039_, \tl_i.a_user.cmd_intg [4], \tl_i.a_address [27], \tl_i.a_address [25], \tl_i.a_address [2] };
  assign _082_ = 8'b10111101 >> { _077_, _081_, _079_ };
  assign _017_ = 64'b1111111011111111111111111111111111111111111111111111111111111111 >> { _065_, _046_, _036_, _070_, _076_, _082_ };
  assign \clocks_o.clk_usb_48mhz_peri  = 4'b1000 >> { \i_clk_usb_48mhz_peri_cg.gen_generic.u_impl_generic.en_latch , clk_usb_48mhz_i };
  assign \clocks_o.clk_fixed_infra  = 4'b1000 >> { \i_fixed_cg.i_cg.gen_generic.u_impl_generic.en_latch , clk_fixed_i };
  assign _021_ = 16'b0001000000000000 >> { \u_reg.u_reg_if.a_ack , \tl_i.a_opcode  };
  assign _028_ = 2'b01 >> clk_main_i;
  assign _029_ = 2'b01 >> clk_fixed_i;
  assign _030_ = 2'b01 >> clk_usb_48mhz_i;
  assign \tl_o.d_user.rsp_intg [0] = 2'b01 >> \tl_o.d_user.rsp_intg [1];
  assign \tl_o.a_ready  = 2'b01 >> \tl_o.d_valid ;
  assign \tl_o.d_user.rsp_intg [5] = 2'b01 >> \tl_o.d_opcode [0];
  assign \tl_o.d_user.rsp_intg [3] = 2'b01 >> \tl_o.d_size [0];
  assign \tl_o.d_user.data_intg [0] = 2'b01 >> \tl_o.d_user.data_intg [3];
  latchsre _205_ (
    .D(_012_),
    .E(1'b1),
    .G(_028_),
    .Q(\i_main_cg.i_cg.gen_generic.u_impl_generic.en_latch ),
    .R(1'b1),
    .S(1'b1)
  );
  latchsre _206_ (
    .D(_003_),
    .E(1'b1),
    .G(_029_),
    .Q(\i_fixed_cg.i_cg.gen_generic.u_impl_generic.en_latch ),
    .R(1'b1),
    .S(1'b1)
  );
  latchsre _207_ (
    .D(_008_),
    .E(1'b1),
    .G(_029_),
    .Q(\i_clk_fixed_peri_cg.gen_generic.u_impl_generic.en_latch ),
    .R(1'b1),
    .S(1'b1)
  );
  latchsre _208_ (
    .D(_011_),
    .E(1'b1),
    .G(_030_),
    .Q(\i_clk_usb_48mhz_peri_cg.gen_generic.u_impl_generic.en_latch ),
    .R(1'b1),
    .S(1'b1)
  );
  latchsre _209_ (
    .D(_009_),
    .E(1'b1),
    .G(_028_),
    .Q(\i_clk_main_aes_cg.gen_generic.u_impl_generic.en_latch ),
    .R(1'b1),
    .S(1'b1)
  );
  latchsre _210_ (
    .D(_010_),
    .E(1'b1),
    .G(_028_),
    .Q(\i_clk_main_hmac_cg.gen_generic.u_impl_generic.en_latch ),
    .R(1'b1),
    .S(1'b1)
  );
  assign \tl_o.d_data [30:2] = { \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31], \tl_o.d_data [31] };
  assign \tl_o.d_opcode [2:1] = 2'b00;
  assign \tl_o.d_param  = 3'b000;
  assign \tl_o.d_sink  = 1'b0;
  assign { \tl_o.d_user.data_intg [5], \tl_o.d_user.data_intg [2:1] } = { 1'b1, \tl_o.d_user.data_intg [6], 1'b1 };
  assign { \tl_o.d_user.rsp_intg [6], \tl_o.d_user.rsp_intg [4], \tl_o.d_user.rsp_intg [2] } = { 1'b0, \tl_o.d_size [1], \tl_o.d_error  };
  assign \pwr_o.main_status  = 1'b0;
  assign \clocks_o.clk_usb_48mhz_powerup  = 1'b0;
  assign \clocks_o.clk_proc_main  = \clocks_o.clk_main_infra ;
  assign \clocks_o.clk_main_secure  = \clocks_o.clk_main_infra ;
  assign \clocks_o.clk_main_powerup  = 1'b0;
  assign \clocks_o.clk_fixed_timers  = \clocks_o.clk_fixed_infra ;
  assign \clocks_o.clk_fixed_secure  = \clocks_o.clk_fixed_infra ;
  assign \clocks_o.clk_fixed_powerup  = 1'b0;
  assign \pwr_o.io_status  = 1'b0;
endmodule
