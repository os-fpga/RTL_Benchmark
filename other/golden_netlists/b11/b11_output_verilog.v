/* Generated by Yosys 0.16+65 (git sha1 051517d61, gcc 9.1.0 -fPIC -Os) */

module b11(stbi, clock, reset, x_in, x_out);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire [8:0] _076_;
  wire [9:0] _077_;
  wire [8:0] _078_;
  wire [8:0] _079_;
  wire [9:0] _080_;
  wire [8:0] _081_;
  wire [8:0] _082_;
  wire [6:0] _083_;
  wire [5:0] _084_;
  input clock;
  wire clock;
  wire [4:0] cont;
  wire [8:0] cont1;
  wire [5:0] r_in;
  input reset;
  wire reset;
  wire [3:0] stato;
  input stbi;
  wire stbi;
  input [5:0] x_in;
  wire [5:0] x_in;
  output [5:0] x_out;
  wire [5:0] x_out;
  dffsre _0ref85_ (
    .C(clock),
    .D(x_in[5]),
    .E(_001_),
    .Q(r_in[5]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _0ref86_ (
    .C(clock),
    .D(x_in[4]),
    .E(_001_),
    .Q(r_in[4]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _0ref87_ (
    .C(clock),
    .D(x_in[3]),
    .E(_001_),
    .Q(r_in[3]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _0ref88_ (
    .C(clock),
    .D(x_in[2]),
    .E(_001_),
    .Q(r_in[2]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _0ref89_ (
    .C(clock),
    .D(x_in[1]),
    .E(_001_),
    .Q(r_in[1]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _0ref90_ (
    .C(clock),
    .D(x_in[0]),
    .E(_001_),
    .Q(r_in[0]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _0ref91_ (
    .C(clock),
    .D(_003_),
    .E(_002_),
    .Q(cont1[0]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _0ref92_ (
    .C(clock),
    .D(_005_),
    .E(_004_),
    .Q(cont1[1]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _0ref93_ (
    .C(clock),
    .D(_009_),
    .E(_008_),
    .Q(_016_),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _0ref94_ (
    .C(clock),
    .D(_010_),
    .E(_008_),
    .Q(_017_),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _0ref95_ (
    .C(clock),
    .D(_011_),
    .E(_008_),
    .Q(cont1[6]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _0ref96_ (
    .C(clock),
    .D(_012_),
    .E(_008_),
    .Q(cont1[5]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _0ref97_ (
    .C(clock),
    .D(_013_),
    .E(_008_),
    .Q(cont1[4]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _0ref98_ (
    .C(clock),
    .D(_014_),
    .E(_008_),
    .Q(cont1[3]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _0ref99_ (
    .C(clock),
    .D(_015_),
    .E(_008_),
    .Q(cont1[2]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _1ref00_ (
    .C(clock),
    .D(_019_),
    .E(_018_),
    .Q(x_out[5]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _1ref01_ (
    .C(clock),
    .D(_020_),
    .E(_018_),
    .Q(x_out[4]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _1ref02_ (
    .C(clock),
    .D(_021_),
    .E(_018_),
    .Q(x_out[3]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _1ref03_ (
    .C(clock),
    .D(_022_),
    .E(_018_),
    .Q(x_out[2]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _1ref04_ (
    .C(clock),
    .D(_023_),
    .E(_018_),
    .Q(x_out[1]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _1ref05_ (
    .C(clock),
    .D(_024_),
    .E(_018_),
    .Q(x_out[0]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _1ref06_ (
    .C(clock),
    .D(_026_),
    .E(_025_),
    .Q(cont[4]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _1ref07_ (
    .C(clock),
    .D(_027_),
    .E(_025_),
    .Q(cont[3]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _1ref08_ (
    .C(clock),
    .D(_028_),
    .E(_025_),
    .Q(cont[2]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _1ref09_ (
    .C(clock),
    .D(_029_),
    .E(_025_),
    .Q(cont[1]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _1ref10_ (
    .C(clock),
    .D(_030_),
    .E(_025_),
    .Q(cont[0]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _1ref11_ (
    .C(clock),
    .D(_031_),
    .E(1'b1),
    .Q(stato[0]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _1ref12_ (
    .C(clock),
    .D(_032_),
    .E(1'b1),
    .Q(stato[1]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _1ref13_ (
    .C(clock),
    .D(_033_),
    .E(1'b1),
    .Q(stato[2]),
    .R(_075_),
    .S(1'b1)
  );
  dffsre _1ref14_ (
    .C(clock),
    .D(_034_),
    .E(1'b1),
    .Q(stato[3]),
    .R(_075_),
    .S(1'b1)
  );
  assign _026_ = 64'b1111111111011111100000000000000000000000000000000000000000000000 >> { stato[1], cont[4], cont[1:0], cont[2], cont[3] };
  assign _073_ = 64'b1100000000001100111101111111101100111111111100110000100000000100 >> { cont1[2:1], r_in[3:2], stato[1], cont1[0] };
  assign _074_ = 64'b1111111100000000000000001111111100110101001101010011010100110101 >> { stato[1], cont1[2:1], r_in[1], _079_[2], _082_[2] };
  assign _035_ = 8'b00110101 >> { r_in[0], cont[1], cont[2] };
  assign _015_ = 64'b0000000011111111001100110011001100001111000011111010101010101010 >> { stato[0], stato[2], _073_, _074_, _035_, r_in[2] };
  assign _036_ = 8'b11100000 >> cont1[3:1];
  assign _037_ = 16'b0000011111111000 >> { cont1[6:4], _036_ };
  assign _038_ = 32'd4042273621 >> { stato[0], r_in[1], _037_, _079_[6], _082_[6] };
  assign _039_ = 64'b1111111111111111111111111111000011110000000000001110000000000000 >> { r_in[2], cont1[2], cont1[3], cont1[4], cont1[1:0] };
  assign _040_ = 8'b10000000 >> { r_in[3], cont1[5], _039_ };
  assign _041_ = 64'b0000000000000000111111101111000000000000000000000000000000000000 >> { cont1[4], r_in[2], cont1[2], cont1[3], cont1[0], cont1[1] };
  assign _042_ = 64'b0000000000000000000000000000000000000000000000000001000011111111 >> { r_in[3], _041_, cont1[5], r_in[2], cont1[4], _036_ };
  assign _043_ = 16'b0000000000000111 >> cont1[4:1];
  assign _044_ = 32'd4293936196 >> { stato[0], _040_, _042_, cont1[5], _043_ };
  assign _011_ = 32'd1012203520 >> { stato[2:1], cont1[6], _044_, _038_ };
  assign _022_ = 16'b1010110000000000 >> { stato[3], _016_, cont1[2], _084_[2] };
  assign _028_ = 16'b0111100000000000 >> { stato[1], cont[2:0] };
  assign _045_ = 32'd252685004 >> { stato[1], r_in[1], cont1[0], _082_[0], _079_[0] };
  assign _003_ = 32'd3435924208 >> { stato[2], stato[0], r_in[0], _045_, cont[0] };
  assign _046_ = 64'b0111111111111111111111111111111111111111111111111111111111111110 >> { r_in[5], r_in[3:2], r_in[4], r_in[1:0] };
  assign _025_ = 32'd16515079 >> { stato[3:2], stato[0], stato[1], _046_ };
  assign _027_ = 64'b0011111111110111110000000000000000000000000000000000000000000000 >> { stato[1], cont[3], cont[1], cont[2], cont[0], cont[4] };
  assign _030_ = 4'b0100 >> { stato[1], cont[0] };
  assign _081_[5] = 4'b1001 >> { r_in[5], cont1[5] };
  assign _081_[1] = 4'b1001 >> { cont1[1], r_in[1] };
  assign _081_[4] = 4'b1001 >> { cont1[4], r_in[4] };
  assign _047_ = 16'b0000000000000111 >> { cont1[6:5], _036_, cont1[4] };
  assign _048_ = 32'd4042312789 >> { stato[0], r_in[1], _047_, _006_, _000_ };
  assign _049_ = 8'b01000000 >> { cont1[5], cont1[6], _043_ };
  assign _050_ = 32'd1429409551 >> { stato[0], cont1[6], _049_, _042_, _040_ };
  assign _010_ = 32'd3277455360 >> { stato[2:1], _017_, _050_, _048_ };
  assign _081_[0] = 4'b1001 >> { cont1[0], r_in[0] };
  assign _081_[2] = 4'b1001 >> { cont1[2], r_in[2] };
  assign _034_ = 16'b1100000100000000 >> { stato[1], stato[2], stato[0], _046_ };
  assign _033_ = 8'b01111000 >> stato[2:0];
  assign _051_ = 64'b1111111111111111000000001111110000000000000000000101010101010101 >> { stato[1:0], _016_, _017_, cont1[6], r_in[1] };
  assign _031_ = 64'b0000111100001111000011110000111100000000110011001010101011111111 >> { stato[2:0], _051_, _046_, stbi };
  assign _052_ = 8'b00110101 >> { r_in[1], _079_[3], _082_[3] };
  assign _053_ = 32'd4228098730 >> { stato[0], cont1[3], cont1[1], cont1[2], _052_ };
  assign _054_ = 32'd861212431 >> { stato[0], r_in[0], r_in[3], cont[2], cont[3] };
  assign _055_ = 64'b0000111111110001001100110011001111111110110011111111111111111111 >> { cont1[2], stato[0], r_in[3:2], cont1[1:0] };
  assign _014_ = 64'b0000111111110000010101010101010100110011001100110011001100110011 >> { stato[2:1], cont1[3], _055_, _054_, _053_ };
  assign _056_ = 32'd8191 >> { cont1[5], _036_, cont1[4], cont1[0], cont1[2] };
  assign _057_ = 64'b1111111111111111001100110011000100110011001100001111111111111111 >> { stato[0], stato[1], _017_, cont1[6], _016_, _056_ };
  assign _058_ = 32'd369098750 >> { r_in[3], r_in[4], r_in[0], r_in[1], r_in[2] };
  assign _059_ = 32'd4290507007 >> { stato[1:0], stbi, _058_, r_in[5] };
  assign _032_ = 64'b0000000011111111001100110111011100001111000011110000111100001111 >> { stato[2:0], _059_, _057_, r_in[1] };
  assign _021_ = 16'b1010110000000000 >> { stato[3], _016_, cont1[3], _084_[3] };
  assign _060_ = 32'd3489673215 >> { cont1[1:0], stato[1], r_in[3:2] };
  assign _061_ = 32'd252654421 >> { stato[2], r_in[0], _060_, cont[0], cont[1] };
  assign _062_ = 64'b0011001100110011111100001010101011111111000000001111111100000000 >> { stato[2:1], r_in[1], _079_[1], cont1[1], _082_[1] };
  assign _005_ = 8'b00111010 >> { stato[0], _061_, _062_ };
  assign _029_ = 64'b0000000011011111111111110000000000000000000000000000000000000000 >> { stato[1], cont[0], cont[1], cont[3:2], cont[4] };
  assign _019_ = 32'd1336934400 >> { stato[3], cont1[5], _016_, _007_, cont1[4] };
  assign _081_[3] = 4'b1001 >> { r_in[3], cont1[3] };
  assign _024_ = 16'b1010110000000000 >> { stato[3], _016_, cont1[0], _084_[0] };
  assign _002_ = 64'b0101010100000000000000000000111111111111111100111111000000000000 >> { stato[2:0], stato[3], _046_, r_in[2] };
  assign _008_ = 64'b1100110011000000111111111111000011001100110011001111000001010000 >> { stato[3:2], stato[0], stato[1], _057_, _046_ };
  assign _063_ = 64'b1111111111111111000011110000111101010101000000001111111111001100 >> { stato[0], _017_, r_in[1], _047_, _000_, _006_ };
  assign _064_ = 64'b0101010111111111111111110011001100001111000011111111111111111111 >> { stato[0], _017_, cont1[6], _049_, _042_, _040_ };
  assign _009_ = 32'd3282370560 >> { stato[2:1], _016_, _064_, _063_ };
  assign _023_ = 16'b1010110000000000 >> { stato[3], _016_, cont1[1], _084_[1] };
  assign _001_ = 16'b0000000000001101 >> { stato[1], stato[2], stato[0], stato[3] };
  assign _018_ = 16'b0000000000001011 >> { stato[1], stato[2], stato[0], stato[3] };
  assign _004_ = 64'b0111111111111111111111111111111100000000000000000000000000000000 >> { _008_, stato[1:0], r_in[3:2], stato[2] };
  assign _065_ = 64'b0000000000000011111111111110111100001111111111110000111000000000 >> { cont1[3], r_in[2], cont1[2], r_in[3], cont1[1:0] };
  assign _066_ = 64'b1010101010101010000000000011111101010101010101011111111111000000 >> { cont1[4], stato[0], cont1[3], cont1[1], cont1[2], _065_ };
  assign _067_ = 64'b1111111100000000000000001111111100110101001101010011010100110101 >> { stato[0], _036_, cont1[4], r_in[1], _079_[4], _082_[4] };
  assign _068_ = 32'd3433754864 >> { stato[0], r_in[0], r_in[4], cont[3], cont[4] };
  assign _013_ = 32'd861270256 >> { stato[2:1], _068_, _066_, _067_ };
  assign _069_ = 8'b00110101 >> { r_in[1], _079_[5], _082_[5] };
  assign _070_ = 64'b1111111100000000111111110000000000000000000000001110111111101111 >> { r_in[3], _041_, _039_, r_in[2], cont1[4], _036_ };
  assign _071_ = 16'b1111000001110111 >> { stato[1], _070_, cont1[4], _036_ };
  assign _072_ = 64'b0011001100110011110011001100110011110000010101010000111101010101 >> { stato[0], cont1[5], stato[1], _043_, _071_, _069_ };
  assign _012_ = 64'b1111111100000000111111110000000010001000100010001111000011110000 >> { stato[2], stato[0], _072_, r_in[5], cont[4], r_in[0] };
  assign _020_ = 16'b1011010000000000 >> { stato[3], cont1[4], _016_, _007_ };
  assign _075_ = 2'b01 >> reset;
  assign _076_[0] = 2'b01 >> cont1[0];
  assign _076_[1] = 2'b01 >> cont1[1];
  assign _078_[5] = 2'b01 >> _081_[5];
  assign _078_[1] = 2'b01 >> _081_[1];
  assign _078_[4] = 2'b01 >> _081_[4];
  assign _078_[0] = 2'b01 >> _081_[0];
  assign _078_[2] = 2'b01 >> _081_[2];
  assign _076_[3] = 2'b01 >> cont1[3];
  assign _078_[3] = 2'b01 >> _081_[3];
  assign _076_[6] = 2'b01 >> cont1[6];
  assign _076_[2] = 2'b01 >> cont1[2];
  adder_carry _2ref03_ (
    .cin(_077_[7]),
    .g(1'b0),
    .p(1'b0),
    .sumout(_006_)
  );
  adder_carry _2ref04_ (
    .cin(_077_[0]),
    .cout(_077_[1]),
    .g(r_in[0]),
    .p(_078_[0]),
    .sumout(_079_[0])
  );
  adder_carry _2ref05_ (
    .cin(_077_[1]),
    .cout(_077_[2]),
    .g(r_in[1]),
    .p(_078_[1]),
    .sumout(_079_[1])
  );
  adder_carry _2ref06_ (
    .cin(_077_[2]),
    .cout(_077_[3]),
    .g(r_in[2]),
    .p(_078_[2]),
    .sumout(_079_[2])
  );
  adder_carry _2ref07_ (
    .cin(_077_[3]),
    .cout(_077_[4]),
    .g(r_in[3]),
    .p(_078_[3]),
    .sumout(_079_[3])
  );
  adder_carry _2ref08_ (
    .cin(_077_[4]),
    .cout(_077_[5]),
    .g(r_in[4]),
    .p(_078_[4]),
    .sumout(_079_[4])
  );
  adder_carry _2ref09_ (
    .cin(_077_[5]),
    .cout(_077_[6]),
    .g(r_in[5]),
    .p(_078_[5]),
    .sumout(_079_[5])
  );
  adder_carry _2ref10_ (
    .cin(_077_[6]),
    .cout(_077_[7]),
    .g(1'b0),
    .p(cont1[6]),
    .sumout(_079_[6])
  );
  adder_carry _2ref11_ (
    .cout(_077_[0]),
    .g(1'b0),
    .p(1'b0)
  );
  adder_carry _2ref12_ (
    .cin(_080_[7]),
    .g(1'b0),
    .p(1'b0),
    .sumout(_000_)
  );
  adder_carry _2ref13_ (
    .cin(_080_[0]),
    .cout(_080_[1]),
    .g(r_in[0]),
    .p(_081_[0]),
    .sumout(_082_[0])
  );
  adder_carry _2ref14_ (
    .cin(_080_[1]),
    .cout(_080_[2]),
    .g(r_in[1]),
    .p(_081_[1]),
    .sumout(_082_[1])
  );
  adder_carry _2ref15_ (
    .cin(_080_[2]),
    .cout(_080_[3]),
    .g(r_in[2]),
    .p(_081_[2]),
    .sumout(_082_[2])
  );
  adder_carry _2ref16_ (
    .cin(_080_[3]),
    .cout(_080_[4]),
    .g(r_in[3]),
    .p(_081_[3]),
    .sumout(_082_[3])
  );
  adder_carry _2ref17_ (
    .cin(_080_[4]),
    .cout(_080_[5]),
    .g(r_in[4]),
    .p(_081_[4]),
    .sumout(_082_[4])
  );
  adder_carry _2ref18_ (
    .cin(_080_[5]),
    .cout(_080_[6]),
    .g(r_in[5]),
    .p(_081_[5]),
    .sumout(_082_[5])
  );
  adder_carry _2ref19_ (
    .cin(_080_[6]),
    .cout(_080_[7]),
    .g(1'b0),
    .p(_076_[6]),
    .sumout(_082_[6])
  );
  adder_carry _2ref20_ (
    .cout(_080_[0]),
    .g(1'b1),
    .p(1'b0)
  );
  adder_carry _2ref21_ (
    .cin(_083_[4]),
    .g(1'b0),
    .p(1'b0),
    .sumout(_007_)
  );
  adder_carry _2ref22_ (
    .cin(_083_[0]),
    .cout(_083_[1]),
    .g(1'b0),
    .p(_076_[0]),
    .sumout(_084_[0])
  );
  adder_carry _2ref23_ (
    .cin(_083_[1]),
    .cout(_083_[2]),
    .g(1'b0),
    .p(_076_[1]),
    .sumout(_084_[1])
  );
  adder_carry _2ref24_ (
    .cin(_083_[2]),
    .cout(_083_[3]),
    .g(1'b0),
    .p(_076_[2]),
    .sumout(_084_[2])
  );
  adder_carry _2ref25_ (
    .cin(_083_[3]),
    .cout(_083_[4]),
    .g(1'b0),
    .p(_076_[3]),
    .sumout(_084_[3])
  );
  adder_carry _2ref26_ (
    .cout(_083_[0]),
    .g(1'b1),
    .p(1'b0)
  );
  assign _078_[8:6] = cont1[8:6];
  assign _081_[7:6] = _076_[7:6];
endmodule
